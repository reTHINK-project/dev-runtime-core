import { Communication } from './communication';

export const descriptors = {

  Runtimes: {
    Runtime: {
      sourcePackage: {
        sourceCode: '',
        sourceCodeClassname: 'Runtime',
        encoding: 'base64',
        signature: ''
      },
      cguid: '3-43c6b47b-bdf8-4c42-96ae-e4f2b7dfcdac0',
      type: 'Runtimes',
      version: 15.89999999999996,
      description: 'Description of Runtime',
      objectName: 'Runtime',
      configuration: {},
      runtimeType: 'browser',
      hypertyCapabilities: {
        mic: true,
        camera: true,
        sensor: false,
        webrtc: true,
        ortc: true
      },
      protocolCapabilities: {
        http: true,
        https: true,
        ws: true,
        wss: true,
        coap: false,
        datachannel: false
      },
      sourcePackageURL: '/sourcePackage',
      language: 'javascript',
      signature: '',
      messageSchemas: '',
      dataObjects: [],
      accessControlPolicy: 'somePolicy',
      p2pHandlerStub: '',
      p2pRequesterStub: ''
    }
  },

  Hyperties: {
    HelloHyperty: {
      sourcePackage: {
        sourceCode: '',
        sourceCodeClassname: 'HelloHyperty',
        encoding: 'UTF-8',
        signature: ''
      },
      cguid: 10003,
      version: 0.1,
      description: 'Description of GroupChat',
      objectName: 'HelloHyperty',
      configuration: {},
      hypertyType: [
        'chat'
      ],
      sourcePackageURL: '/sourcePackage',
      language: 'javascript',
      signature: '',
      messageSchemas: '',
      dataObjects: [
        'https://catalogue.sp.domain/.well-known/dataschema/Communication'
      ],
      accessControlPolicy: 'somePolicy'
    }
  },

  ProtoStubs: {
    default: {
      cguid: '1',
      type: '0',
      version: '0.1',
      description: 'description of VertxProtoStub',
      objectName: 'VertxProtoStub',
      sourcePackageURL: '/sourcePackage',
      sourcePackage: {
        sourceCode: 'KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsNCglpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpDQoJCW1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOw0KCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQ0KCQlkZWZpbmUoImFjdGl2YXRlIiwgW10sIGZhY3RvcnkpOw0KCWVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKQ0KCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOw0KCWVsc2UNCgkJcm9vdFsiYWN0aXZhdGUiXSA9IGZhY3RvcnkoKTsNCn0pKHRoaXMsIGZ1bmN0aW9uKCkgew0KcmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXANCi8qKioqKiovIAkvLyBUaGUgbW9kdWxlIGNhY2hlDQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsNCi8qKioqKiovDQovKioqKioqLyAJLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb24NCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7DQovKioqKioqLw0KLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUNCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsNCi8qKioqKiovIAkJCXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzOw0KLyoqKioqKi8gCQl9DQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpDQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsNCi8qKioqKiovIAkJCWk6IG1vZHVsZUlkLA0KLyoqKioqKi8gCQkJbDogZmFsc2UsDQovKioqKioqLyAJCQlleHBvcnRzOiB7fQ0KLyoqKioqKi8gCQl9Ow0KLyoqKioqKi8NCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uDQovKioqKioqLyAJCW1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pOw0KLyoqKioqKi8NCi8qKioqKiovIAkJLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZA0KLyoqKioqKi8gCQltb2R1bGUubCA9IHRydWU7DQovKioqKioqLw0KLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQ0KLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7DQovKioqKioqLyAJfQ0KLyoqKioqKi8NCi8qKioqKiovDQovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykNCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOw0KLyoqKioqKi8NCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQ0KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7DQovKioqKioqLw0KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cw0KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgew0KLyoqKioqKi8gCQlpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7DQovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgew0KLyoqKioqKi8gCQkJCWNvbmZpZ3VyYWJsZTogZmFsc2UsDQovKioqKioqLyAJCQkJZW51bWVyYWJsZTogdHJ1ZSwNCi8qKioqKiovIAkJCQlnZXQ6IGdldHRlcg0KLyoqKioqKi8gCQkJfSk7DQovKioqKioqLyAJCX0NCi8qKioqKiovIAl9Ow0KLyoqKioqKi8NCi8qKioqKiovIAkvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlcw0KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkgew0KLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8NCi8qKioqKiovIAkJCWZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6DQovKioqKioqLyAJCQlmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9Ow0KLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7DQovKioqKioqLyAJCXJldHVybiBnZXR0ZXI7DQovKioqKioqLyAJfTsNCi8qKioqKiovDQovKioqKioqLyAJLy8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsDQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9Ow0KLyoqKioqKi8NCi8qKioqKiovIAkvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfXw0KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOw0KLyoqKioqKi8NCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMNCi8qKioqKiovIAlyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTsNCi8qKioqKiovIH0pDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLyoqKioqKi8gKFsNCi8qIDAgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQoNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsNCiAgdmFsdWU6IHRydWUNCn0pOw0KDQp2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsNCg0KZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZhdGU7DQoNCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQ0KDQovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8NCg0KdmFyIFZlcnR4UHJvdG9TdHViID0gZnVuY3Rpb24gKCkgew0KICAvKiBwcml2YXRlDQogICAgX2NvbnRpbnVvdXNPcGVuOiBib29sZWFuDQogICAgIF9ydW50aW1lUHJvdG9TdHViVVJMOiBzdHJpbmcNCiAgICBfYnVzOiBNaW5pQnVzDQogICAgX21zZ0NhbGxiYWNrOiAoTWVzc2FnZSkgPT4gdm9pZA0KICAgIF9jb25maWc6IHsgdXJsLCBydW50aW1lVVJMIH0NCiAgICAgX3NvY2s6IChXZWJTb2NrZXQgfCBTb2NrSlMpDQogICAgX3JlT3BlbjogYm9vbGVhbg0KICAqLw0KDQogIC8qKg0KICAgKiBWZXJ0eCBQcm90b1N0dWIgY3JlYXRpb24NCiAgICogQHBhcmFtICB7c3RyaW5nfSBydW50aW1lUHJvdG9TdHViVVJMIC0gVVJMIHVzZWQgaW50ZXJuYWxseSBmb3IgbWVzc2FnZSBkZWxpdmVyeSBwb2ludC4gTm90IHVzZWQgZm9yIE1lc3NhZ2VOb2RlIGRlbGl2ZXIuDQogICAqIEBwYXJhbSAge01pbmlCdXN9IGJ1cyAtIE1pbmlCdXMgdXNlZCB0byBzZW5kL3JlY2VpdmUgbWVzc2FnZXMuIE5vcm1hbGx5IGNvbm5lY3RlZCB0byB0aGUgTWVzc2FnZUJ1cy4NCiAgICogQHBhcmFtICB7T2JqZWN0fSBjb25maWcgLSBNYW5kYXRvcnkgZmllbGRzIGFyZTogInVybCIgb2YgdGhlIE1lc3NhZ2VOb2RlIGFkZHJlc3MgYW5kICJydW50aW1lVVJMIi4NCiAgICogQHJldHVybiB7VmVydHhQcm90b1N0dWJ9DQogICAqLw0KICBmdW5jdGlvbiBWZXJ0eFByb3RvU3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykgew0KICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWZXJ0eFByb3RvU3R1Yik7DQoNCiAgICBpZiAoIXJ1bnRpbWVQcm90b1N0dWJVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIHJ1bnRpbWVQcm90b1N0dWJVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7DQogICAgaWYgKCFidXMpIHRocm93IG5ldyBFcnJvcignVGhlIGJ1cyBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsNCiAgICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IEVycm9yKCdUaGUgY29uZmlnIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOw0KDQogICAgaWYgKCFjb25maWcudXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb25maWcudXJsIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOw0KICAgIGlmICghY29uZmlnLnJ1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIGNvbmZpZy5ydW50aW1lVVJMIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOw0KDQogICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgIHRoaXMuX2lkID0gMDsNCiAgICB0aGlzLl9jb250aW51b3VzT3BlbiA9IHRydWU7DQoNCiAgICB0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDsNCiAgICB0aGlzLl9idXMgPSBidXM7DQogICAgdGhpcy5fY29uZmlnID0gY29uZmlnOw0KDQogICAgdGhpcy5fcnVudGltZVNlc3Npb25VUkwgPSBjb25maWcucnVudGltZVVSTDsNCiAgICB0aGlzLl9yZU9wZW4gPSBmYWxzZTsNCiAgICBjb25zb2xlLmxvZygnUHJvdG9zdHViTG9hZGVkJyk7DQoNCiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpOw0KICAgIF90aGlzLl9zZW5kU3RhdHVzKCdpbi1wcm9ncmVzcycpOw0KICAgIF90aGlzLl9zZW5kU3RhdHVzKCdsaXZlJyk7DQogIH0NCg0KICAvKioNCiAgICogR2V0IHRoZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIFByb3RvU3R1Yg0KICAgKiBAcmV0dXJuIHtPYmplY3R9IC0gTWFuZGF0b3J5IGZpZWxkcyBhcmU6ICJ1cmwiIG9mIHRoZSBNZXNzYWdlTm9kZSBhZGRyZXNzIGFuZCAicnVudGltZVVSTCIuDQogICAqLw0KDQoNCiAgX2NyZWF0ZUNsYXNzKFZlcnR4UHJvdG9TdHViLCBbew0KICAgIGtleTogJ2Nvbm5lY3QnLA0KDQoNCiAgICAvKioNCiAgICAgKiBUcnkgdG8gb3BlbiB0aGUgY29ubmVjdGlvbiB0byB0aGUgTWVzc2FnZU5vZGUuIENvbm5lY3Rpb24gaXMgYXV0byBtYW5hZ2VkLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgdGhpcyBleHBsaWNpdGx5Lg0KICAgICAqIEhvd2V2ZXIsIGlmICJkaXNjb25uZWN0KCkiIGlzIGNhbGxlZCwgaXQncyBuZWNlc3NhcnkgdG8gY2FsbCB0aGlzIHRvIGVuYWJsZSBjb25uZWN0aW9ucyBhZ2Fpbi4NCiAgICAgKiBBIHN0YXR1cyBtZXNzYWdlIGlzIHNlbnQgdG8gInJ1bnRpbWVQcm90b1N0dWJVUkwvc3RhdHVzIiwgY29udGFpbmluZyB0aGUgdmFsdWUgImNvbm5lY3RlZCIgaWYgc3VjY2Vzc2Z1bCwgb3IgImRpc2Nvbm5lY3RlZCIgaWYgc29tZSBlcnJvciBvY2N1cnMuDQogICAgICovDQogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3QoKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICBfdGhpcy5fY29udGludW91c09wZW4gPSB0cnVlOw0KICAgICAgX3RoaXMuX29wZW4oZnVuY3Rpb24gKCkge30pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEl0IHdpbGwgZGlzY29ubmVjdCBhbmQgb3JkZXIgdG8gc3RheSBkaXNjb25uZWN0ZWQuIFJlY29ubmVjdGlvbiB0cmllcywgd2lsbCBub3QgYmUgYXR0ZW1wdGVkLCB1bmxlc3MgImNvbm5lY3QoKSIgaXMgY2FsbGVkLg0KICAgICAqIEEgc3RhdHVzIG1lc3NhZ2UgaXMgc2VudCB0byAicnVudGltZVByb3RvU3R1YlVSTC9zdGF0dXMiIHdpdGggdmFsdWUgImRpc2Nvbm5lY3RlZCIuDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ2Rpc2Nvbm5lY3QnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgX3RoaXMuX2NvbnRpbnVvdXNPcGVuID0gZmFsc2U7DQogICAgfQ0KDQogICAgLy90b2RvOiBhZGQgZG9jdW1lbnRhdGlvbg0KDQogIH0sIHsNCiAgICBrZXk6ICdfc2VuZE9wZW4nLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZE9wZW4oY2FsbGJhY2spIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIF90aGlzLl9zZW5kU3RhdHVzKCdpbi1wcm9ncmVzcycpOw0KICAgICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2xpdmUnKTsNCiAgICAgIGNhbGxiYWNrKCk7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX3NlbmRDbG9zZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kQ2xvc2UoKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICBfdGhpcy5faWQrKzsNCiAgICAgIHZhciBtc2cgPSB7DQogICAgICAgIGlkOiBfdGhpcy5faWQsIHR5cGU6ICdjbG9zZScsIGZyb206IF90aGlzLl9ydW50aW1lU2Vzc2lvblVSTCwgdG86ICdtbjovc2Vzc2lvbicNCiAgICAgIH07DQoNCiAgICAgIC8vaW52YWxpZGF0ZSBydW50aW1lU2Vzc2lvbg0KICAgICAgX3RoaXMuX3JlT3BlbiA9IGZhbHNlOw0KICAgICAgX3RoaXMuX3J1bnRpbWVTZXNzaW9uVVJMID0gX3RoaXMuX2NvbmZpZy5fcnVudGltZVVSTDsNCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfc2VuZFN0YXR1cycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIGNvbnNvbGUubG9nKCdbVmVydHhQcm90b3N0dWIgc3RhdHVzIGNoYW5nZWRdIHRvICcsIHZhbHVlKTsNCg0KICAgICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7DQoNCiAgICAgIHZhciBtc2cgPSB7DQogICAgICAgIHR5cGU6ICd1cGRhdGUnLA0KICAgICAgICBmcm9tOiBfdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCwNCiAgICAgICAgdG86IF90aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLA0KICAgICAgICBib2R5OiB7DQogICAgICAgICAgdmFsdWU6IHZhbHVlDQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIGlmIChyZWFzb24pIHsNCiAgICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjsNCiAgICAgIH0NCg0KICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShtc2cpOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ19maWx0ZXInLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlsdGVyKG1zZykgew0KICAgICAgaWYgKG1zZy5ib2R5ICYmIG1zZy5ib2R5LnZpYSA9PT0gdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCkgew0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgIH0NCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfZGVsaXZlcicsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxpdmVyKG1zZykgew0KICAgICAgaWYgKCFtc2cuYm9keSkgbXNnLmJvZHkgPSB7fTsNCg0KICAgICAgbXNnLmJvZHkudmlhID0gdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTDsNCiAgICAgIGNvbnNvbGUubG9nKCdbVmVydHhQcm90b1N0dWI6IE1OIC0+IFByb3RvU3R1Yl0nLCBtc2cpOw0KICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZyk7DQogICAgfQ0KDQogICAgLy8gYWRkIGRvY3VtZW50YXRpb24NCg0KICB9LCB7DQogICAga2V5OiAnX29wZW4nLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfb3BlbihjYWxsYmFjaykgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgaWYgKCF0aGlzLl9jb250aW51b3VzT3Blbikgew0KICAgICAgICAvL1RPRE86IHNlbmQgc3RhdHVzIChzZW50IG1lc3NhZ2UgZXJyb3IgLSBkaXNjb25uZWN0ZWQpDQogICAgICAgIHJldHVybjsNCiAgICAgIH0NCg0KICAgICAgdGhpcy5fc2VuZE9wZW4oY2FsbGJhY2spOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ2NvbmZpZycsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fY29uZmlnOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ3J1bnRpbWVTZXNzaW9uJywNCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgIHJldHVybiB0aGlzLl9ydW50aW1lU2Vzc2lvblVSTDsNCiAgICB9DQogIH1dKTsNCg0KICByZXR1cm4gVmVydHhQcm90b1N0dWI7DQp9KCk7DQoNCmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHsNCiAgcmV0dXJuIHsNCiAgICBuYW1lOiAnVmVydHhQcm90b1N0dWInLA0KICAgIGluc3RhbmNlOiBuZXcgVmVydHhQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZykNCiAgfTsNCn0NCg0KLyoqDQoqIENhbGxiYWNrIHVzZWQgdG8gc2VuZCBtZXNzYWdlcw0KKiBAY2FsbGJhY2sgUG9zdE1lc3NhZ2UNCiogQHBhcmFtIHtNZXNzYWdlfSBtc2cgLSBNZXNzYWdlIHRvIHNlbmQNCiovDQoNCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOw0KDQovKioqLyB9KQ0KLyoqKioqKi8gXSk7DQp9KTs=',
        sourceCodeClassname: 'VertxProtoStub',
        encoding: 'Base64',
        signature: ''
      },
      language: 'Javascript ECMA5',
      signature: '',
      messageSchemas: '',
      configuration: {
        url: 'wss://127.0.0.1:9090/ws'
      },
      constraints: '',
      hypertyCapabilities: '',
      protocolCapabilities: '',
      policies: '',
      dataObjects: []
    },
    'slack.slack.com': {
      sourcePackage: {
        sourceCode: '',
        sourceCodeClassname: 'SlackProtoStub',
        encoding: 'base64',
        signature: ''
      },
      sourcePackageURL: '/sourcePackage',
      cguid: '4-6e7a55d5-3daf-cdc4-63fb-8b2984ada3651',
      version: '0.5',
      description: 'Description of SlackProtoStub',
      language: 'Javascript',
      type: 'ProtoStubs',
      objectName: 'SlackProtoStub',
      configuration: {},
      messageSchemas: '',
      signature: '',
      accessControlPolicy: 'somePolicy',
      constraints: '',
      dataObjects: [],
      interworking: true
    },
    P2PHandlerStub: {
      sourcePackage: {
        sourceCode: '',
        sourceCodeClassname: 'P2PHandlerStub',
        encoding: 'base64',
        signature: ''
      },
      sourcePackageURL: '/sourcePackage',
      cguid: '4-d1c8fa16-ffd5-8164-f4e2-7ceb1506446e3',
      version: 0.2,
      description: 'Description of P2PHandlerStub',
      anguage: 'Javascript',
      type: 'ProtoStubs',
      objectName: 'P2PHandlerStub',
      configuration: {},
      messageSchemas: '',
      signature: '',
      accessControlPolicy: 'somePolicy',
      constraints: '',
      dataObjects: []
    }

  },

  IdpProxies: {
    default: {
      cguid: '1',
      type: '0',
      version: '0.1',
      description: 'description of VertxProtoStub',
      objectName: 'VertxProtoStub',
      sourcePackageURL: '/sourcePackage',
      sourcePackage: {
        sourceCode: '',
        sourceCodeClassname: 'VertxProtoStub',
        encoding: 'Base64',
        signature: ''
      },
      language: 'Javascript ECMA5',
      signature: '',
      messageSchemas: '',
      configuration: {
        url: 'wss://127.0.0.1:9090/ws'
      },
      constraints: '',
      hypertyCapabilities: '',
      protocolCapabilities: '',
      policies: '',
      dataObjects: []
    },
    'google.com':{
      cguid: '32323213231',
      type: '0',
      version: '0.1',
      description: 'description of VertxProtoStub',
      objectName: 'VertxProtoStub',
      sourcePackageURL: '/sourcePackage',
      sourcePackage: {
        sourceCode: '',
        sourceCodeClassname: 'VertxProtoStub',
        encoding: 'Base64',
        signature: ''
      },
      language: 'Javascript ECMA5',
      signature: '',
      messageSchemas: '',
      configuration: {
        url: 'wss://127.0.0.1:9090/ws'
      },
      constraints: '',
      hypertyCapabilities: '',
      protocolCapabilities: '',
      policies: '',
      dataObjects: []
    },

    'slack.com': {
      sourcePackage: {
        sourceCode: '',
        sourceCodeClassname: 'SlackProxyStub',
        encoding: 'base64',
        signature: ''
      },
      sourcePackageURL: '/sourcePackage',
      cguid: '5-59580981-c95f-7ed8-8775-ab2669f3239a3',
      version: 0.7999999999999999,
      description: 'Description of SlackProxyStub',
      language: 'Javascript',
      type: 'IDPProxys',
      constraints: {},
      interworking: true,
      objectName: 'SlackProxyStub',
      configuration: {},
      messageSchemas: '',
      signature: '',
      dataObjects: [],
      accessControlPolicy: 'somePolicy'
    }
  },

  DataSchemas: {
    Communication: {
      cguid: '1',
      type: '0',
      version: '0.1',
      description: 'description of Communication DataSchema',
      objectName: 'Communication',
      sourcePackageURL: '/sourcePackage',
      sourcePackage: {
        sourceCode: Communication,
        sourceCodeClassname: 'Communication',
        encoding: 'utf-8',
        signature: ''
      },
      language: 'Javascript ECMA5',
      signature: '',
      messageSchemas: '',
      configuration: {},
      constraints: '',
      hypertyCapabilities: '',
      protocolCapabilities: '',
      policies: '',
      dataObjects: []
    }
  }

};
