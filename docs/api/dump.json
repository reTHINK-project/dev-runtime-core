[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/bus/Bus.js",
    "content": "/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.\r\n* Components that need a message system should receive this class as a dependency or extend it.\r\n* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener\r\n*/\r\nclass Bus {\r\n  /* private\r\n  _msgId: number;\r\n  _subscriptions: <url: MsgListener[]>\r\n\r\n  _responseTimeOut: number\r\n  _responseCallbacks: <url+id: (msg) => void>\r\n\r\n  */\r\n\r\n  constructor() {\r\n    let _this = this;\r\n    _this._msgId = 0;\r\n    _this._subscriptions = {};\r\n\r\n    _this._responseTimeOut = 5000; //default to 3s\r\n    _this._responseCallbacks = {};\r\n\r\n    _this._registerExternalListener();\r\n  }\r\n\r\n  /**\r\n  * Register listener to receive message when \"msg.to === url\".\r\n  * Special url \"*\" for default listener is accepted to intercept all messages.\r\n  * @param {URL} url Address to intercept, tha is in the message \"to\"\r\n  * @param {Listener} listener listener\r\n  * @return {MsgListener} instance of MsgListener\r\n  */\r\n  addListener(url, listener) {\r\n    let _this = this;\r\n\r\n    let item = new MsgListener(_this._subscriptions, url, listener);\r\n    let itemList = _this._subscriptions[url];\r\n    if (!itemList) {\r\n      itemList = [];\r\n      _this._subscriptions[url] = itemList;\r\n    }\r\n\r\n    itemList.push(item);\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Manually add a response listener. Only one listener per message ID should exist.\r\n   * ATENTION, there is no timeout for this listener.\r\n   * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.\r\n   * @param {URL} url Origin address of the message sent, \"msg.from\".\r\n   * @param {number} msgId Message ID that is returned from the postMessage.\r\n   * @param {Function} responseListener Callback function for the response\r\n   */\r\n  addResponseListener(url, msgId, responseListener) {\r\n    this._responseCallbacks[url + msgId] = responseListener;\r\n  }\r\n\r\n  /**\r\n   * Remove the response listener.\r\n   * @param {URL} url Origin address of the message sent, \"msg.from\".\r\n   * @param {number} msgId  Message ID that is returned from the postMessage\r\n   */\r\n  removeResponseListener(url, msgId) {\r\n    delete this._responseCallbacks[url + msgId];\r\n  }\r\n\r\n  /**\r\n   * Remove all existent listeners for the URL\r\n   * @param  {URL} url Address registered\r\n   */\r\n  removeAllListenersOf(url) {\r\n    delete this._subscriptions[url];\r\n  }\r\n\r\n  /**\r\n   * Helper method to bind listeners (in both directions) into other MiniBus target.\r\n   * @param  {URL} outUrl Outbound URL, register listener for url in direction \"this -> target\"\r\n   * @param  {URL} inUrl Inbound URL, register listener for url in direction \"target -> this\"\r\n   * @param  {MiniBus} target The other target MiniBus\r\n   * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.\r\n   */\r\n  bind(outUrl, inUrl, target) {\r\n    let _this = this;\r\n\r\n    let thisListn = _this.addListener(outUrl, (msg) => {\r\n      target.postMessage(msg);\r\n    });\r\n\r\n    let targetListn = target.addListener(inUrl, (msg) => {\r\n      _this.postMessage(msg);\r\n    });\r\n\r\n    return {\r\n      thisListener: thisListn,\r\n      targetListener: targetListn,\r\n      unbind: () => {\r\n        this.thisListener.remove();\r\n        this.targetListener.remove();\r\n      }\r\n    };\r\n  }\r\n\r\n  //publish on default listeners\r\n  _publishOnDefault(msg) {\r\n    //is there any \"*\" (default) listeners?\r\n    let itemList = this._subscriptions['*'];\r\n    if (itemList) {\r\n      this._publishOn(itemList, msg);\r\n    }\r\n  }\r\n\r\n  //publish on a subscription list.\r\n  _publishOn(itemList, msg) {\r\n    itemList.forEach((sub) => {\r\n      sub._callback(msg);\r\n    });\r\n  }\r\n\r\n  _responseCallback(inMsg, responseCallback) {\r\n    let _this = this;\r\n\r\n    //automatic management of response handlers\r\n    if (responseCallback) {\r\n      let responseId = inMsg.from + inMsg.id;\r\n      _this._responseCallbacks[responseId] = responseCallback;\r\n\r\n      setTimeout(() => {\r\n        let responseFun = _this._responseCallbacks[responseId];\r\n        delete _this._responseCallbacks[responseId];\r\n\r\n        if (responseFun) {\r\n          let errorMsg = {\r\n            id: inMsg.id, type: 'response',\r\n            body: { code: 408, desc: 'Response timeout!', value: inMsg }\r\n          };\r\n\r\n          responseFun(errorMsg);\r\n        }\r\n      }, _this._responseTimeOut);\r\n    }\r\n  }\r\n\r\n  _onResponse(msg) {\r\n    let _this = this;\r\n\r\n    if (msg.type === 'response') {\r\n      let responseId = msg.to + msg.id;\r\n      let responseFun = _this._responseCallbacks[responseId];\r\n\r\n      //if it's a provisional response, don't delete response listener\r\n      if (msg.body.code >= 200) {\r\n        delete _this._responseCallbacks[responseId];\r\n      }\r\n\r\n      if (responseFun) {\r\n        responseFun(msg);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  //receive messages from external interface\r\n  _onMessage(msg) {\r\n    let _this = this;\r\n\r\n    if (!_this._onResponse(msg)) {\r\n      let itemList = _this._subscriptions[msg.to];\r\n      if (itemList) {\r\n        _this._publishOn(itemList, msg);\r\n      } else {\r\n        _this._publishOnDefault(msg);\r\n      }\r\n    }\r\n  }\r\n\r\n  _genId(inMsg) {\r\n    //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?\r\n    //Global counter will not work, because there will be multiple MiniBus instances!\r\n    //Per URL, can be a lot of data to maintain!\r\n    //Maybe a counter per MiniBus instance. This is the assumed solution for now.\r\n    if (!inMsg.id || inMsg.id === 0) {\r\n      this._msgId++;\r\n      inMsg.id = this._msgId;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Send messages to local listeners, or if not exists to external listeners.\r\n  * It's has an optional mechanism for automatic management of response handlers.\r\n  * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).\r\n  * @param  {Message} msg Message to send. Message ID is automatically added to the message.\r\n  * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.\r\n  * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.\r\n  */\r\n  postMessage(inMsg, responseCallback) { }\r\n\r\n  /**\r\n   * Not public available, used by the class extension implementation, to process messages from the public \"postMessage\" without a registered listener.\r\n   * Used to send the message to an external interface, like a WebWorker, IFrame, etc.\r\n   * @param  {Message.Message} msg Message\r\n   */\r\n  _onPostMessage(msg) { /*implementation will send message to external system*/ }\r\n\r\n  /**\r\n   * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.\r\n   * This method is called one time in the constructor to register external listeners.\r\n   * The implementation will probably call the \"_onMessage\" method to publish in the local listeners.\r\n   * DO NOT call \"postMessage\", there is a danger that the message enters in a cycle!\r\n   */\r\n  _registerExternalListener() { /*implementation will register external listener and call \"this._onMessage(msg)\" */ }\r\n\r\n}\r\n\r\nclass MsgListener {\r\n  /* private\r\n  _subscriptions: <string: MsgListener[]>;\r\n  _url: string;\r\n  _callback: (msg) => void;\r\n  */\r\n\r\n  constructor(subscriptions, url, callback) {\r\n    let _this = this;\r\n\r\n    _this._subscriptions = subscriptions;\r\n    _this._url = url;\r\n    _this._callback = callback;\r\n  }\r\n\r\n  get url() { return this._url; }\r\n\r\n  /**\r\n   * Remove this listener from the Bus\r\n   */\r\n  remove() {\r\n    let _this = this;\r\n\r\n    let subs = _this._subscriptions[_this._url];\r\n    if (subs) {\r\n      let index = subs.indexOf(_this);\r\n      subs.splice(index, 1);\r\n\r\n      //if there are no listeners, remove the subscription entirely.\r\n      if (subs.length === 0) {\r\n        delete _this._subscriptions[_this._url];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Bus;\r\n",
    "static": true,
    "longname": "src/bus/Bus.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "MsgListener",
    "memberof": "src/bus/Bus.js",
    "static": true,
    "longname": "src/bus/Bus.js~MsgListener",
    "access": null,
    "export": false,
    "importPath": "runtime-core/src/bus/Bus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bus/Bus.js~MsgListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~MsgListener#constructor",
    "access": null,
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "subscriptions",
        "types": [
          "*"
        ]
      },
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "get",
    "name": "url",
    "memberof": "src/bus/Bus.js~MsgListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~MsgListener#url",
    "access": null,
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "remove",
    "memberof": "src/bus/Bus.js~MsgListener",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~MsgListener#remove",
    "access": null,
    "description": "Remove this listener from the Bus",
    "lineNumber": 262,
    "params": []
  },
  {
    "__docId__": 5,
    "kind": "class",
    "name": "Bus",
    "memberof": "src/bus/Bus.js",
    "static": true,
    "longname": "src/bus/Bus.js~Bus",
    "access": null,
    "export": true,
    "importPath": "runtime-core/src/bus/Bus.js",
    "importStyle": "Bus",
    "description": "",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "micaelpedrosa@gmail.com\nMinimal interface and implementation to send and receive messages. It can be reused in many type of components.\nComponents that need a message system should receive this class as a dependency or extend it.\nExtensions should implement the following private methods: _onPostMessage and _registerExternalListener"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 6,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#constructor",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "addListener",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#addListener",
    "access": null,
    "description": "Register listener to receive message when \"msg.to === url\".\nSpecial url \"*\" for default listener is accepted to intercept all messages.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Address to intercept, tha is in the message \"to\""
      },
      {
        "nullable": null,
        "types": [
          "Listener"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "listener"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MsgListener"
      ],
      "spread": false,
      "description": "instance of MsgListener"
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "addResponseListener",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#addResponseListener",
    "access": null,
    "description": "Manually add a response listener. Only one listener per message ID should exist.\nATENTION, there is no timeout for this listener.\nThe listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Origin address of the message sent, \"msg.from\"."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "msgId",
        "description": "Message ID that is returned from the postMessage."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "responseListener",
        "description": "Callback function for the response"
      }
    ]
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "removeResponseListener",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#removeResponseListener",
    "access": null,
    "description": "Remove the response listener.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Origin address of the message sent, \"msg.from\"."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "msgId",
        "description": "Message ID that is returned from the postMessage"
      }
    ]
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "removeAllListenersOf",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#removeAllListenersOf",
    "access": null,
    "description": "Remove all existent listeners for the URL",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Address registered"
      }
    ]
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "bind",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#bind",
    "access": null,
    "description": "Helper method to bind listeners (in both directions) into other MiniBus target.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "outUrl",
        "description": "Outbound URL, register listener for url in direction \"this -> target\""
      },
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "inUrl",
        "description": "Inbound URL, register listener for url in direction \"target -> this\""
      },
      {
        "nullable": null,
        "types": [
          "MiniBus"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The other target MiniBus"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bound"
      ],
      "spread": false,
      "description": "an object that contains the properties [thisListener, targetListener] and the unbind method."
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "_publishOnDefault",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_publishOnDefault",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "_publishOn",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_publishOn",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "itemList",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "_responseCallback",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_responseCallback",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "inMsg",
        "types": [
          "*"
        ]
      },
      {
        "name": "responseCallback",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "_onResponse",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_onResponse",
    "access": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "_onMessage",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_onMessage",
    "access": null,
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "_genId",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_genId",
    "access": null,
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "inMsg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "postMessage",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#postMessage",
    "access": null,
    "description": "Send messages to local listeners, or if not exists to external listeners.\nIt's has an optional mechanism for automatic management of response handlers.\nThe response handler will be unregistered after receiving the response, or after response timeout (default to 3s).",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Message to send. Message ID is automatically added to the message."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "responseCallback",
        "description": "Optional parameter, if the developer what's automatic response management."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the message ID, in case it should be needed for manual management of the response handler."
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "_onPostMessage",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_onPostMessage",
    "access": null,
    "description": "Not public available, used by the class extension implementation, to process messages from the public \"postMessage\" without a registered listener.\nUsed to send the message to an external interface, like a WebWorker, IFrame, etc.",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message.Message"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Message"
      }
    ]
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "_registerExternalListener",
    "memberof": "src/bus/Bus.js~Bus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Bus.js~Bus#_registerExternalListener",
    "access": null,
    "description": "Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.\nThis method is called one time in the constructor to register external listeners.\nThe implementation will probably call the \"_onMessage\" method to publish in the local listeners.\nDO NOT call \"postMessage\", there is a danger that the message enters in a cycle!",
    "lineNumber": 238,
    "params": []
  },
  {
    "__docId__": 21,
    "kind": "file",
    "name": "src/bus/MessageBus.js",
    "content": "/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\nimport Bus from './Bus';\r\nimport Pipeline from './Pipeline';\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Message BUS Interface is an extension of the Bus\r\n* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)\r\n*/\r\nclass MessageBus extends Bus {\r\n  /* private\r\n  _registry: Registry\r\n  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }\r\n\r\n  _pipeline: Pipeline\r\n  */\r\n\r\n  //TODO: future optimization\r\n  //1. message batch processing with setInterval\r\n  //2. resolve default gateway/protostub with register.resolve\r\n\r\n  constructor(registry) {\r\n    super();\r\n    this._registry = registry;\r\n    this._forwards = {};\r\n\r\n    this._pipeline = new Pipeline((error) => {\r\n      console.log('PIPELINE-ERROR: ', JSON.stringify(error));\r\n    });\r\n  }\r\n\r\n  get pipeline() { return this._pipeline; }\r\n\r\n  /**\r\n   * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.\r\n   * External routing use the registry.resolve(..) method to decide the destination sandbox.\r\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\r\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\r\n   * @return {number}                  the Message id\r\n   */\r\n  postMessage(inMsg, responseCallback) {\r\n    console.log('onPOSTMessage: ', inMsg);\r\n    let _this = this;\r\n\r\n    _this._genId(inMsg);\r\n\r\n    _this._pipeline.process(inMsg, (msg) => {\r\n\r\n      _this._responseCallback(inMsg, responseCallback);\r\n\r\n      if (!_this._onResponse(msg)) {\r\n        let itemList = _this._subscriptions[msg.to];\r\n        if (itemList) {\r\n          //do not publish on default address, because of loopback cycle\r\n          _this._publishOn(itemList, msg);\r\n        } else {\r\n          //if there is no listener, send to external interface\r\n          _this._onPostMessage(msg);\r\n        }\r\n      }\r\n    });\r\n\r\n    return inMsg.id;\r\n  }\r\n\r\n  /**\r\n   * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.\r\n   * This means, even if there is a listener for the address, it will also send the message to the external routing.\r\n   * @param {URL} from Publish address.\r\n   */\r\n  addPublish(from) {\r\n    let _this = this;\r\n\r\n    //verify if forward exist\r\n    let refCount = _this._forwards[from];\r\n    if (!refCount) {\r\n      let forwardListener = _this.addListener(from, (msg) => {\r\n        console.log('MB-PUBLISH: ( ' + from + ' )');\r\n        _this._onPostMessage(msg);\r\n      });\r\n\r\n      refCount = {\r\n        counter: 0,\r\n        fl: forwardListener,\r\n        remove: () => {\r\n          this.counter--;\r\n          if (this.counter === 0) {\r\n            this.fl.remove();\r\n            delete _this._forwards[from];\r\n          }\r\n        }\r\n      };\r\n\r\n     _this._forwards[from] = refCount;\r\n   }\r\n\r\n   refCount.counter++;\r\n   return refCount;\r\n  }\r\n\r\n  /**\r\n   * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.\r\n   * @param {URL} from Message destination, it's actually the field \"to\" of the message.\r\n   * @param {URL} to   Forward address.\r\n   */\r\n   addForward(from, to) {\r\n     let _this = this;\r\n\r\n     return _this.addListener(from, (msg) => {\r\n       console.log('MB-FORWARD: ( ' + from + ' to ' + to + ' )');\r\n       _this.forward(to, msg);\r\n     });\r\n   }\r\n\r\n   /**\r\n    * Just forward's a message to the forward address. Listeners should be available for the forward address.\r\n    * @param  {URL} url Forward address.\r\n    * @param  {Message} msg Message to forward\r\n    */\r\n   forward(url, msg) {\r\n     let _this = this;\r\n\r\n     let itemList = _this._subscriptions[url];\r\n     if (itemList) {\r\n       _this._publishOn(itemList, msg);\r\n     }\r\n   }\r\n\r\n   //default route, if there are no listeners available for a message destination.\r\n   _onPostMessage(msg) {\r\n     let _this = this;\r\n\r\n     //resolve external protostub...\r\n     _this._registry.resolve(msg.to).then((route) => {\r\n       _this.forward(route, msg);\r\n     }).catch(function(e) {\r\n       console.log('RESOLVE-ERROR: ', e);\r\n     });\r\n   }\r\n}\r\n\r\nexport default MessageBus;\r\n",
    "static": true,
    "longname": "src/bus/MessageBus.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 22,
    "kind": "class",
    "name": "MessageBus",
    "memberof": "src/bus/MessageBus.js",
    "static": true,
    "longname": "src/bus/MessageBus.js~MessageBus",
    "access": null,
    "export": true,
    "importPath": "runtime-core/src/bus/MessageBus.js",
    "importStyle": "MessageBus",
    "description": "",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "micaelpedrosa@gmail.com\nMessage BUS Interface is an extension of the Bus\nIt doesn't support the default '*' listener, instead it uses the registry.resolve(..)"
      }
    ],
    "interface": false,
    "extends": [
      "src/bus/Bus.js~Bus"
    ]
  },
  {
    "__docId__": 23,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#constructor",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "registry",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "_registry",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#_registry",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "_forwards",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#_forwards",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "_pipeline",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#_pipeline",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "get",
    "name": "pipeline",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#pipeline",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "postMessage",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#postMessage",
    "access": null,
    "description": "Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.\nExternal routing use the registry.resolve(..) method to decide the destination sandbox.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "inMsg",
        "description": "JSON with mandatory Message structure {id, type, from, to}"
      },
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "responseCallback",
        "description": "Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\"."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the Message id"
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "addPublish",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#addPublish",
    "access": null,
    "description": "Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.\nThis means, even if there is a listener for the address, it will also send the message to the external routing.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Publish address."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "addForward",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#addForward",
    "access": null,
    "description": "Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Message destination, it's actually the field \"to\" of the message."
      },
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Forward address."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "forward",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#forward",
    "access": null,
    "description": "Just forward's a message to the forward address. Listeners should be available for the forward address.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Forward address."
      },
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Message to forward"
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "_onPostMessage",
    "memberof": "src/bus/MessageBus.js~MessageBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MessageBus.js~MessageBus#_onPostMessage",
    "access": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 33,
    "kind": "file",
    "name": "src/bus/MiniBus.js",
    "content": "/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\nimport Bus from './Bus';\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Message BUS Interface is an extension of the Bus\r\n* It is used mainly in the internal sandbox routing.\r\n*/\r\nclass MiniBus extends Bus {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Post a message for routing. Message is routed directly to the external routing _onPostMessage.\r\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\r\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\r\n   * @return {number}                  the Message id\r\n   */\r\n  postMessage(inMsg, responseCallback) {\r\n    let _this = this;\r\n\r\n    _this._genId(inMsg);\r\n    _this._responseCallback(inMsg, responseCallback);\r\n\r\n    //always send to external (to core MessageBus)\r\n    _this._onPostMessage(inMsg);\r\n\r\n    return inMsg.id;\r\n  }\r\n\r\n  //internal method used when a message is received by an external routing system\r\n  _onMessage(msg) {\r\n    let _this = this;\r\n\r\n    if (!_this._onResponse(msg)) {\r\n      let itemList = _this._subscriptions[msg.to];\r\n      if (itemList) {\r\n        _this._publishOn(itemList, msg);\r\n        if (!msg.to.startsWith('hyperty')) {\r\n          _this._publishOnDefault(msg);\r\n        }\r\n      } else {\r\n        _this._publishOnDefault(msg);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default MiniBus;\r\n",
    "static": true,
    "longname": "src/bus/MiniBus.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 34,
    "kind": "class",
    "name": "MiniBus",
    "memberof": "src/bus/MiniBus.js",
    "static": true,
    "longname": "src/bus/MiniBus.js~MiniBus",
    "access": null,
    "export": true,
    "importPath": "runtime-core/src/bus/MiniBus.js",
    "importStyle": "MiniBus",
    "description": "",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "micaelpedrosa@gmail.com\nMessage BUS Interface is an extension of the Bus\nIt is used mainly in the internal sandbox routing."
      }
    ],
    "interface": false,
    "extends": [
      "src/bus/Bus.js~Bus"
    ]
  },
  {
    "__docId__": 35,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bus/MiniBus.js~MiniBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MiniBus.js~MiniBus#constructor",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "postMessage",
    "memberof": "src/bus/MiniBus.js~MiniBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MiniBus.js~MiniBus#postMessage",
    "access": null,
    "description": "Post a message for routing. Message is routed directly to the external routing _onPostMessage.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "inMsg",
        "description": "JSON with mandatory Message structure {id, type, from, to}"
      },
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "responseCallback",
        "description": "Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\"."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the Message id"
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "_onMessage",
    "memberof": "src/bus/MiniBus.js~MiniBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/MiniBus.js~MiniBus#_onMessage",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 38,
    "kind": "file",
    "name": "src/bus/Pipeline.js",
    "content": "/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.\r\n* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.\r\n*/\r\nclass Pipeline {\r\n  /* public\r\n    handlers: ((PipeContext) => void)[]\r\n    onFail: (error) => void\r\n  */\r\n\r\n  constructor(_onFail) {\r\n    let _this = this;\r\n\r\n    _this.handlers = [];\r\n    _this.onFail = _onFail;\r\n  }\r\n\r\n  /**\r\n   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.\r\n   * @param  {Message} msg       Message for the queue\r\n   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.\r\n   */\r\n  process(msg, onDeliver) {\r\n    let _this = this;\r\n\r\n    if (_this.handlers.length > 0) {\r\n      let iter = new Iterator(_this.handlers);\r\n      iter.next(new PipeContext(_this, iter, msg, onDeliver));\r\n    } else {\r\n      onDeliver(msg);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Wrapper around a message that adds actions that can be fired by any interceptor handler.\r\n* The Pipeline is asynchronous, so an handler should always call an action, the default one is \"next()\"\r\n*/\r\nclass PipeContext {\r\n  /* private\r\n    _inStop: boolean\r\n\r\n    _pipeline: Pipeline\r\n    _iter: Iterator\r\n    _msg: Message\r\n  */\r\n\r\n  constructor(pipeline, iter, msg, onDeliver) {\r\n    let _this = this;\r\n\r\n    _this._inStop = false;\r\n\r\n    _this._pipeline = pipeline;\r\n    _this._iter = iter;\r\n    _this._msg = msg;\r\n    _this._onDeliver = onDeliver;\r\n  }\r\n\r\n  get pipeline() { return this._pipeline; }\r\n\r\n  get msg() { return this._msg; }\r\n  set msg(inMsg) { this._msg = inMsg; }\r\n\r\n  /**\r\n   * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.\r\n   */\r\n  next() {\r\n    let _this = this;\r\n\r\n    if (!_this._inStop) {\r\n      if (_this._iter.hasNext) {\r\n        _this._iter.next(_this);\r\n      } else {\r\n        _this._onDeliver(_this._msg);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Proceed directly to the onDeliver handler, unless there was an error.\r\n   */\r\n  deliver() {\r\n    let _this = this;\r\n    if (!_this._inStop) {\r\n      _this._inStop = true;\r\n      _this._onDeliver(_this._msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark the context with an error and proceed to the onFail handler.\r\n   * @param  {[type]} error [description]\r\n   */\r\n  fail(error) {\r\n    let _this = this;\r\n\r\n    if (!_this._inStop) {\r\n      _this._inStop = true;\r\n      if (_this._pipeline.onFail) {\r\n        _this._pipeline.onFail(error);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass Iterator {\r\n  /* private\r\n    _index: number\r\n    _array: []\r\n  */\r\n\r\n  constructor(array) {\r\n    this._index = -1;\r\n    this._array = array;\r\n  }\r\n\r\n  get hasNext() {\r\n    return this._index < this._array.length - 1;\r\n  }\r\n\r\n  get next() {\r\n    this._index++;\r\n    return this._array[this._index];\r\n  }\r\n}\r\n\r\nexport default Pipeline;\r\n",
    "static": true,
    "longname": "src/bus/Pipeline.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 39,
    "kind": "class",
    "name": "PipeContext",
    "memberof": "src/bus/Pipeline.js",
    "static": true,
    "longname": "src/bus/Pipeline.js~PipeContext",
    "access": null,
    "export": false,
    "importPath": "runtime-core/src/bus/Pipeline.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "micaelpedrosa@gmail.com\nWrapper around a message that adds actions that can be fired by any interceptor handler.\nThe Pipeline is asynchronous, so an handler should always call an action, the default one is \"next()\""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 40,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#constructor",
    "access": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pipeline",
        "types": [
          "*"
        ]
      },
      {
        "name": "iter",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "onDeliver",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 41,
    "kind": "get",
    "name": "pipeline",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#pipeline",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "get",
    "name": "msg",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#msg",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "set",
    "name": "msg",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#msg",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "_msg",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#_msg",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "next",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#next",
    "access": null,
    "description": "Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.",
    "lineNumber": 92,
    "params": []
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "deliver",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#deliver",
    "access": null,
    "description": "Proceed directly to the onDeliver handler, unless there was an error.",
    "lineNumber": 107,
    "params": []
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "fail",
    "memberof": "src/bus/Pipeline.js~PipeContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~PipeContext#fail",
    "access": null,
    "description": "Mark the context with an error and proceed to the onFail handler.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "[description]"
      }
    ]
  },
  {
    "__docId__": 48,
    "kind": "class",
    "name": "Iterator",
    "memberof": "src/bus/Pipeline.js",
    "static": true,
    "longname": "src/bus/Pipeline.js~Iterator",
    "access": null,
    "export": false,
    "importPath": "runtime-core/src/bus/Pipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bus/Pipeline.js~Iterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~Iterator#constructor",
    "access": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "_index",
    "memberof": "src/bus/Pipeline.js~Iterator",
    "static": false,
    "longname": "src/bus/Pipeline.js~Iterator#_index",
    "access": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_array",
    "memberof": "src/bus/Pipeline.js~Iterator",
    "static": false,
    "longname": "src/bus/Pipeline.js~Iterator#_array",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "get",
    "name": "hasNext",
    "memberof": "src/bus/Pipeline.js~Iterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~Iterator#hasNext",
    "access": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "get",
    "name": "next",
    "memberof": "src/bus/Pipeline.js~Iterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~Iterator#next",
    "access": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Pipeline",
    "memberof": "src/bus/Pipeline.js",
    "static": true,
    "longname": "src/bus/Pipeline.js~Pipeline",
    "access": null,
    "export": true,
    "importPath": "runtime-core/src/bus/Pipeline.js",
    "importStyle": "Pipeline",
    "description": "",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "micaelpedrosa@gmail.com\nSequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.\nNormal use for this, is to intercept all messages with configured handlers, and act accordingly."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bus/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~Pipeline#constructor",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "_onFail",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "process",
    "memberof": "src/bus/Pipeline.js~Pipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bus/Pipeline.js~Pipeline#process",
    "access": null,
    "description": "Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Message for the queue"
      },
      {
        "nullable": null,
        "types": [
          "Callback"
        ],
        "spread": false,
        "optional": false,
        "name": "onDeliver",
        "description": "When message is finished processing from all handlers, it will be delivered in this callback."
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/minibus.js",
    "content": "/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\nimport MiniBus from './bus/MiniBus';\r\nexport default MiniBus;\r\n",
    "static": true,
    "longname": "src/minibus.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "testFile",
    "name": "test/AddressAllocation.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport sinonChai from 'sinon-chai';\r\n\r\nimport { generateGUID } from '../src/utils/utils';\r\nimport AddressAllocation from '../src/allocation/AddressAllocation';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\n\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\ndescribe('AddressAllocation', function() {\r\n\r\n  let aa;\r\n  let registry;\r\n  let bus;\r\n  let guid = generateGUID();\r\n  let domain = 'sp.domain';\r\n\r\n  before(() => {\r\n\r\n    registry = {\r\n      registerHyperty: () => {},\r\n      checkRegisteredURLs: () => {}\r\n    };\r\n\r\n    bus = {\r\n      postMessage: (msg, replyCallback) => {\r\n\r\n        if (!msg.body.scheme) { msg.body.scheme = 'hyperty'; }\r\n\r\n        replyCallback({\r\n          id: 1, type: 'response', from: 'domain://msg-node.sp.domain/address-allocation', to: 'local://fake.url',\r\n          body: {code: 200, value: {allocated: msg.body.scheme + '://' + domain + '/' + guid}}\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n    sinon.stub(registry, 'checkRegisteredURLs', (info) => {\r\n\r\n      return new Promise((resolve) => {\r\n\r\n        console.log('CHECK REGISTER: ', info);\r\n\r\n        if (info.reporter.length === 0) {\r\n          resolve('hyperty://' + domain + '/' + guid);\r\n        } else {\r\n          resolve('comm://' + domain + '/' + guid);\r\n        }\r\n\r\n      });\r\n\r\n    });\r\n\r\n    let runtimeURL = 'hyperty-runtime://ua.pt/123';\r\n    new AddressAllocation(runtimeURL, bus, registry);\r\n    aa = AddressAllocation.instance;\r\n  });\r\n\r\n  it('should create a new hyperty address', function(done) {\r\n\r\n    let number = 2;\r\n    let scheme = 'hyperty';\r\n    let info = {\r\n      name: 'test',\r\n      schema: 'hyperty-catalogue://' + domain + '/.well-known/dataschema/hello',\r\n      reporter: [],\r\n      resources: []\r\n    };\r\n    expect(aa.create(domain, number, info, scheme))\r\n    .eventually.to.eql({newAddress: true, address: 'hyperty://' + domain + '/' + guid})\r\n    .notify(done);\r\n  });\r\n\r\n  it('should create a new data Object address', function(done) {\r\n\r\n    let number = 2;\r\n    let scheme = 'comm';\r\n    let info = {\r\n      name: 'dataObjectName',\r\n      schema: 'hyperty-catalogue://' + domain + '/.well-known/dataschema/communication',\r\n      reporter: ['comm://' + domain + '/' + guid],\r\n      resources: ['chat']\r\n    };\r\n    expect(aa.create(domain, number, info, scheme))\r\n    .eventually.to.eql({newAddress: true, address: 'comm://' + domain + '/' + guid})\r\n    .notify(done);\r\n  });\r\n\r\n\r\n  it('should reuse an hyperty url address based on reuse option', function(done) {\r\n\r\n    let number = 1;\r\n    let scheme = 'hyperty';\r\n    let info = {\r\n      name: 'test',\r\n      schema: 'hyperty-catalogue://' + domain + '/.well-known/dataschema/hello',\r\n      reporter: [],\r\n      resources: []\r\n    };\r\n\r\n    expect(aa.create(domain, number, info, scheme, true))\r\n    .eventually.to.eql({newAddress: false, address: 'hyperty://' + domain + '/' + guid})\r\n    .notify(done);\r\n\r\n  });\r\n\r\n  it('should reuse an hyperty url address based on an given url', function(done) {\r\n\r\n    let number = 1;\r\n    let scheme = 'hyperty';\r\n    let info = {\r\n      name: 'test',\r\n      schema: 'hyperty-catalogue://' + domain + '/.well-known/dataschema/hello',\r\n      reporter: [],\r\n      resources: []\r\n    };\r\n\r\n    expect(aa.create(domain, number, info, scheme, 'hyperty://' + domain + '/' + guid))\r\n    .eventually.to.eql({newAddress: false, address: 'hyperty://' + domain + '/' + guid})\r\n    .notify(done);\r\n\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/AddressAllocation.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "testDescribe",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/AddressAllocation.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/AddressAllocation.spec.js~describe0",
    "access": null,
    "description": "AddressAllocation",
    "lineNumber": 15
  },
  {
    "__docId__": 117,
    "kind": "testIt",
    "name": "it1",
    "testId": 1,
    "memberof": "test/AddressAllocation.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AddressAllocation.spec.js~describe0.it1",
    "access": null,
    "description": "should create a new hyperty address",
    "lineNumber": 64
  },
  {
    "__docId__": 118,
    "kind": "testIt",
    "name": "it2",
    "testId": 2,
    "memberof": "test/AddressAllocation.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AddressAllocation.spec.js~describe0.it2",
    "access": null,
    "description": "should create a new data Object address",
    "lineNumber": 79
  },
  {
    "__docId__": 119,
    "kind": "testIt",
    "name": "it3",
    "testId": 3,
    "memberof": "test/AddressAllocation.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AddressAllocation.spec.js~describe0.it3",
    "access": null,
    "description": "should reuse an hyperty url address based on reuse option",
    "lineNumber": 95
  },
  {
    "__docId__": 120,
    "kind": "testIt",
    "name": "it4",
    "testId": 4,
    "memberof": "test/AddressAllocation.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/AddressAllocation.spec.js~describe0.it4",
    "access": null,
    "description": "should reuse an hyperty url address based on an given url",
    "lineNumber": 112
  },
  {
    "__docId__": 121,
    "kind": "testFile",
    "name": "test/CoreDiscovery.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport sinonChai from 'sinon-chai';\r\n\r\nlet expect = chai.expect;\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n// dependencies\r\nimport MessageBus from '../src/bus/MessageBus';\r\nimport Descriptors from '../src/runtime/Descriptors';\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\nimport GraphConnector from '../src/graphconnector/GraphConnector';\r\nimport CoreDiscovery from '../src/discovery/CoreDiscovery';\r\nimport Registry from '../src/registry/Registry';\r\nimport AddressAllocation from '../src/allocation/AddressAllocation';\r\n\r\nlet msgbus;\r\nlet runtimeURL = 'hyperty-runtime://ua.pt/123';\r\nlet domain = 'ua.pt';\r\nlet appSandbox = runtimeFactory.createAppSandbox();\r\nlet storageManager = runtimeFactory.storageManager();\r\nlet runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();\r\nlet runtimeCapabilities = runtimeFactory.runtimeCapabilities(storageManager);\r\nlet coreDiscovery;\r\n\r\nlet hyperty = {'hyperty://ist.pt/1':\r\n                {descriptor: 'hyperty-catalogue://ist.pt/.well-known/hyperty/HelloHyperty',\r\n                 lastModified: '\"2016-03-03T13:32:06Z\"',\r\n                 dataSchemes: ['comm'],\r\n                 resources:   ['chat']}\r\n};\r\n\r\nlet dataObject = {'comm://ist.pt/1':\r\n                {schema: 'hyperty-catalogue://catalogue.hybroker.rethink.ptinovacao.pt/.well-known/dataschema/Communication',\r\n                 url: 'comm://ist.pt/1',\r\n                 name: 'mychat',\r\n                 lastModified: '\"2016-03-03T13:32:06Z\"',\r\n                 dataSchemes: ['comm'],\r\n                 resources:   ['chat']}\r\n};\r\n\r\ndescribe('CoreDiscovery', function() {\r\n\r\n  // this will be executed before all the tests, and you can garantee this will be setted\r\n  before(() => {\r\n\r\n      let identityModule = {\r\n          getIdentities: () => {\r\n              let identities = [];\r\n              let identityBundle = {identity: 'user://gmail.com/openidtest10', token: 'idToken'};\r\n              identities.push(identityBundle);\r\n              return identities;\r\n          }\r\n      };\r\n\r\n      // instanciate the registry;\r\n      let registry = new Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, runtimeCapabilities, storageManager);\r\n      msgbus = new MessageBus(registry);\r\n      new AddressAllocation(runtimeURL, msgbus, registry);\r\n      registry.messageBus = msgbus;\r\n      // Prepare the on instance to handle with the fallbacks and runtimeCatalogue;\r\n      let descriptorInstance = new Descriptors(runtimeURL, runtimeCatalogue, {});\r\n      let graphConnector = new GraphConnector(runtimeURL, msgbus, storageManager);\r\n      coreDiscovery = new CoreDiscovery(runtimeURL, msgbus, graphConnector, runtimeFactory);\r\n\r\n      coreDiscovery.messageBus.addListener('domain://registry.ua.pt/', (msg) => {\r\n        console.info(msg);\r\n        let message_hyperties = {\r\n            id: msg.id, type: 'response', from: 'domain://registry.ua.pt/', to: msg.from,\r\n            body: {\r\n                code: 200,\r\n                value: [hyperty]\r\n            }\r\n        };\r\n\r\n        let message_hyperty = {\r\n            id: msg.id, type: 'response', from: 'domain://registry.ua.pt/', to: msg.from,\r\n            body: {\r\n                code: 200,\r\n                value: hyperty\r\n            }\r\n        };\r\n\r\n        let message_dataObjects = {\r\n            id: msg.id, type: 'response', from: 'domain://registry.ua.pt/', to: msg.from,\r\n            body: {\r\n                code: 200,\r\n                value: [dataObject]\r\n            }\r\n        };\r\n\r\n        let message_dataObject = {\r\n            id: msg.id, type: 'response', from: 'domain://registry.ua.pt/', to: msg.from,\r\n            body: {\r\n                code: 200,\r\n                value: dataObject\r\n            }\r\n        };\r\n\r\n        if(msg.body.resource === '/hyperty/idp-identifier/openidtest20@gmail.com')\r\n          coreDiscovery.messageBus.postMessage(message_hyperties); //discoverHyperties\r\n        else if(msg.body.resource === '/comm')\r\n          coreDiscovery.messageBus.postMessage(message_dataObjects); //discoverDataObjects && //discoverDataObjectsPerReporter\r\n        else if (msg.body.resource === 'hyperty://ist.pt/1')\r\n          coreDiscovery.messageBus.postMessage(message_hyperty); //discoverHypertyPerURL\r\n        else if (msg.body.resource === 'comm://ist.pt/1')\r\n          coreDiscovery.messageBus.postMessage(message_dataObject); //discoverDataObjectPerURL\r\n        else if (msg.body.resource === 'myChat')\r\n          coreDiscovery.messageBus.postMessage(message_dataObjects); //discoverDataObjectsPerName\r\n\r\n      });\r\n  });\r\n\r\n  describe('construction', function() {\r\n      it('should create a new CoreDiscovery without error', function() {\r\n          expect(coreDiscovery).to.be.instanceof(CoreDiscovery);\r\n      });\r\n  });\r\n\r\n  describe('discoverHyperties()', function() {\r\n    it('should conclude the advanced search without error', function(done) {\r\n\r\n      expect(coreDiscovery.discoverHyperties('openidtest20@gmail.com', ['comm'], ['chat'], domain).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.eql([hyperty]).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('discoverDataObjects()', function() {\r\n    it('should conclude the advanced search without error', function(done) {\r\n\r\n      expect(coreDiscovery.discoverDataObjects('openidtest20@gmail.com', ['comm'], ['chat'], domain).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.eql([dataObject]).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('discoverHypertyPerURL()', function() {\r\n    it('should conclude the advanced search without error', function(done) {\r\n\r\n      expect(coreDiscovery.discoverHypertyPerURL('hyperty://ist.pt/1').then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.eql(hyperty).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('discoverDataObjectPerURL()', function() {\r\n    it('should conclude the advanced search without error', function(done) {\r\n\r\n      expect(coreDiscovery.discoverDataObjectPerURL('comm://ist.pt/1').then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.eql(dataObject).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('discoverDataObjectsPerName()', function() {\r\n    it('should conclude the advanced search without error', function(done) {\r\n\r\n      expect(coreDiscovery.discoverDataObjectsPerName('myChat', ['comm'], ['chat']).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.eql([dataObject]).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('discoverDataObjectsPerReporter()', function() {\r\n    it('should conclude the advanced search without error', function(done) {\r\n\r\n      expect(coreDiscovery.discoverDataObjectsPerReporter('hyperty://ist.pt/1', ['comm'], ['chat']).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.eql([dataObject]).and.notify(done);\r\n    });\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/CoreDiscovery.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "testDescribe",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/CoreDiscovery.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5",
    "access": null,
    "description": "CoreDiscovery",
    "lineNumber": 43
  },
  {
    "__docId__": 123,
    "kind": "testDescribe",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/CoreDiscovery.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe6",
    "access": null,
    "description": "construction",
    "lineNumber": 115
  },
  {
    "__docId__": 124,
    "kind": "testIt",
    "name": "it7",
    "testId": 7,
    "memberof": "test/CoreDiscovery.spec.js~describe5.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe6.it7",
    "access": null,
    "description": "should create a new CoreDiscovery without error",
    "lineNumber": 116
  },
  {
    "__docId__": 125,
    "kind": "testDescribe",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/CoreDiscovery.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe8",
    "access": null,
    "description": "discoverHyperties()",
    "lineNumber": 121
  },
  {
    "__docId__": 126,
    "kind": "testIt",
    "name": "it9",
    "testId": 9,
    "memberof": "test/CoreDiscovery.spec.js~describe5.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe8.it9",
    "access": null,
    "description": "should conclude the advanced search without error",
    "lineNumber": 122
  },
  {
    "__docId__": 127,
    "kind": "testDescribe",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/CoreDiscovery.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe10",
    "access": null,
    "description": "discoverDataObjects()",
    "lineNumber": 130
  },
  {
    "__docId__": 128,
    "kind": "testIt",
    "name": "it11",
    "testId": 11,
    "memberof": "test/CoreDiscovery.spec.js~describe5.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe10.it11",
    "access": null,
    "description": "should conclude the advanced search without error",
    "lineNumber": 131
  },
  {
    "__docId__": 129,
    "kind": "testDescribe",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/CoreDiscovery.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe12",
    "access": null,
    "description": "discoverHypertyPerURL()",
    "lineNumber": 139
  },
  {
    "__docId__": 130,
    "kind": "testIt",
    "name": "it13",
    "testId": 13,
    "memberof": "test/CoreDiscovery.spec.js~describe5.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe12.it13",
    "access": null,
    "description": "should conclude the advanced search without error",
    "lineNumber": 140
  },
  {
    "__docId__": 131,
    "kind": "testDescribe",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/CoreDiscovery.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe14",
    "access": null,
    "description": "discoverDataObjectPerURL()",
    "lineNumber": 148
  },
  {
    "__docId__": 132,
    "kind": "testIt",
    "name": "it15",
    "testId": 15,
    "memberof": "test/CoreDiscovery.spec.js~describe5.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe14.it15",
    "access": null,
    "description": "should conclude the advanced search without error",
    "lineNumber": 149
  },
  {
    "__docId__": 133,
    "kind": "testDescribe",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/CoreDiscovery.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe16",
    "access": null,
    "description": "discoverDataObjectsPerName()",
    "lineNumber": 157
  },
  {
    "__docId__": 134,
    "kind": "testIt",
    "name": "it17",
    "testId": 17,
    "memberof": "test/CoreDiscovery.spec.js~describe5.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe16.it17",
    "access": null,
    "description": "should conclude the advanced search without error",
    "lineNumber": 158
  },
  {
    "__docId__": 135,
    "kind": "testDescribe",
    "name": "describe18",
    "testId": 18,
    "memberof": "test/CoreDiscovery.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe18",
    "access": null,
    "description": "discoverDataObjectsPerReporter()",
    "lineNumber": 166
  },
  {
    "__docId__": 136,
    "kind": "testIt",
    "name": "it19",
    "testId": 19,
    "memberof": "test/CoreDiscovery.spec.js~describe5.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/CoreDiscovery.spec.js~describe5.describe18.it19",
    "access": null,
    "description": "should conclude the advanced search without error",
    "lineNumber": 167
  },
  {
    "__docId__": 137,
    "kind": "testFile",
    "name": "test/DataObjectsStorage.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\n\r\nimport DataObjectsStorage from '../src/store-objects/DataObjectsStorage';\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\nchai.use(chaiAsPromised);\r\n\r\ndescribe('dataObjectsStorage', function() {\r\n\r\n  let storageManager;\r\n  let dataObjectsStorage;\r\n  let runtimeURL = 'hyperty-runtime://fake-runtime';\r\n  let syncherManagerURL = runtimeURL + '/sm';\r\n\r\n  let owner = 'hyperty://<domain>/id-owner';\r\n  let url = 'resource://obj1';\r\n  let userURL = 'user://<domain>/<my-name>';\r\n  let schema = 'schema://fake-schema-url';\r\n  let schemaList = ['schema://fake-schema-url/Communication', 'schema://fake-schema-url/Context', 'schema://fake-schema-url/Connection'];\r\n\r\n  before(() => {\r\n\r\n    storageManager = runtimeFactory.storageManager();\r\n    dataObjectsStorage = new DataObjectsStorage(storageManager, {});\r\n\r\n  });\r\n\r\n  it('should set dataObject information to be saved on storage', (done) => {\r\n\r\n    let metadata = {};\r\n\r\n    metadata.status = 'live';\r\n    metadata.isReporter = true;\r\n    let data = {\r\n      x: 1,\r\n      y: 2\r\n    };\r\n    metadata.schema = schema;\r\n    metadata.url = url;\r\n    metadata.name = 'WebRTC';\r\n    metadata.subscriberUsers = [];\r\n    metadata.subscriptions = [];\r\n    metadata.version = 0;\r\n    metadata.reporter = 'hyperty://<domain>/id-3';\r\n    let subscriberHyperty = 'hyperty://<domain>/id-2';\r\n    let childrenObjects = {};\r\n    childrenObjects[metadata.reporter + '#1'] = { message: 'message 1' };\r\n    childrenObjects[subscriberHyperty + '#1'] = { message: 'message 2' };\r\n    childrenObjects[metadata.reporter + '#2'] = { message: 'message 3' };\r\n\r\n    expect(dataObjectsStorage.set(metadata))\r\n    .to.have.keys('url', 'isReporter', 'subscriberUsers', 'subscriptions', 'version', 'schema', 'status', 'reporter', 'name', 'childrenObjects', 'data');\r\n\r\n    expect(dataObjectsStorage.saveData(true, url, null, data)).to.be.deep.equal({\r\n      url: metadata.url,\r\n      isReporter: metadata.isReporter,\r\n      subscriptions: [],\r\n      subscriberUsers: [],\r\n      data: data,\r\n      version: 0,\r\n      schema: metadata.schema,\r\n      status: metadata.status,\r\n      reporter: metadata.reporter,\r\n      childrenObjects: {},\r\n      name: metadata.name\r\n    });\r\n\r\n    expect(dataObjectsStorage.saveChildrens(true, metadata.url, null, childrenObjects)).to.deep.equal({\r\n      url: metadata.url,\r\n      isReporter: metadata.isReporter,\r\n      subscriptions: [],\r\n      subscriberUsers: [],\r\n      schema: metadata.schema,\r\n      status: metadata.status,\r\n      reporter: metadata.reporter,\r\n      data: data,\r\n      childrenObjects: childrenObjects,\r\n      version: 0,\r\n      name: metadata.name\r\n    });\r\n\r\n    expect(dataObjectsStorage.update(metadata.isReporter, metadata.url, 'subscriptions', subscriberHyperty)).to.be.deep.equal({\r\n      url: metadata.url,\r\n      isReporter: metadata.isReporter,\r\n      subscriptions: [subscriberHyperty],\r\n      subscriberUsers: [],\r\n      schema: schema,\r\n      status: metadata.status,\r\n      reporter: metadata.reporter,\r\n      data: data,\r\n      childrenObjects: childrenObjects,\r\n      version: 0,\r\n      name: metadata.name\r\n    });\r\n\r\n    done();\r\n\r\n  });\r\n\r\n  it('should set a bundle of information to be saved on storage like reporter', (done) => {\r\n\r\n    let num = 4;\r\n\r\n    for (let i = 0; i < num; i++) {\r\n\r\n      let metadata = {};\r\n\r\n      metadata.status = 'live';\r\n      metadata.version = 0;\r\n      metadata.isReporter = true;\r\n      metadata.url = '<scheme>://<domain>/id-' + i;\r\n      let rand = Math.round(Math.random() * 2);\r\n      metadata.schema = schemaList[rand];\r\n      metadata.reporter = 'hyperty://<domain>/id-' + (num - i);\r\n      let subscriberHyperty = 'hyperty://<domain>/id-' + ((num - i) * 2);\r\n\r\n      // resource, isReporter, schema, status, data, subscription, children, childrenResources, subscriberUser\r\n      expect(dataObjectsStorage.set(metadata)).to.be.deep.equal({\r\n        url: metadata.url,\r\n        isReporter: metadata.isReporter,\r\n        subscriptions: [],\r\n        subscriberUsers: [],\r\n        childrenObjects: {},\r\n        data: {},\r\n        version: 0,\r\n        schema: metadata.schema,\r\n        status: metadata.status,\r\n        reporter: metadata.reporter\r\n      });\r\n\r\n      expect(dataObjectsStorage.update(metadata.isReporter, metadata.url, 'store', true)).to.be.deep.equal({\r\n        url: metadata.url,\r\n        isReporter: metadata.isReporter,\r\n        subscriptions: [],\r\n        subscriberUsers: [],\r\n        childrenObjects: {},\r\n        data: {},\r\n        version: 0,\r\n        schema: metadata.schema,\r\n        status: metadata.status,\r\n        reporter: metadata.reporter,\r\n        store: true\r\n      });\r\n\r\n      expect(dataObjectsStorage.saveData(metadata.isReporter, metadata.url, 'participants.1', {name: 'vitor', last: 'silva'})).to.be.deep.equal({\r\n        url: metadata.url,\r\n        isReporter: metadata.isReporter,\r\n        subscriptions: [],\r\n        subscriberUsers: [],\r\n        childrenObjects: {},\r\n        version: 0,\r\n        schema: metadata.schema,\r\n        status: metadata.status,\r\n        reporter: metadata.reporter,\r\n        store: true,\r\n        data: {\r\n          participants: {\r\n            1: {\r\n              name: 'vitor', last: 'silva'\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      expect(dataObjectsStorage.update(metadata.isReporter, metadata.url, 'subscriptions', subscriberHyperty)).to.be.deep.equal({\r\n        url: metadata.url,\r\n        isReporter: metadata.isReporter,\r\n        subscriptions: [subscriberHyperty],\r\n        subscriberUsers: [],\r\n        childrenObjects: {},\r\n        version: 0,\r\n        schema: metadata.schema,\r\n        status: metadata.status,\r\n        reporter: metadata.reporter,\r\n        store: true,\r\n        data: {\r\n          participants: {\r\n            1: {\r\n              name: 'vitor', last: 'silva'\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      if (i === num - 1) {\r\n        console.log('DONE', i);\r\n        done();\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  it('should set a bundle of information to be saved on storage like observers', (done) => {\r\n\r\n    let num = 4;\r\n    let letters = ['A', 'B', 'C', 'D'];\r\n\r\n    for (let i = 0; i < num; i++) {\r\n\r\n      let metadata = {};\r\n\r\n      metadata.status = 'live';\r\n      metadata.version = 0;\r\n      metadata.isReporter = false;\r\n      metadata.url = '<scheme>://<domain>/id-' + letters[i];\r\n      let rand = Math.round(Math.random() * 2);\r\n      metadata.schema = schemaList[rand];\r\n      metadata.reporter = 'hyperty://<domain>/id-' + (num - i);\r\n      let subscriberHyperty = 'hyperty://<domain>/id-' + letters[(num - i)];\r\n\r\n      // resource, isReporter, schema, status, data, subscription, children, childrenResources, subscriberUser\r\n      expect(dataObjectsStorage.set(metadata)).to.be.deep.equal({\r\n        url: metadata.url,\r\n        isReporter: metadata.isReporter,\r\n        subscriptions: [],\r\n        subscriberUsers: [],\r\n        childrenObjects: {},\r\n        data: {},\r\n        version: 0,\r\n        schema: metadata.schema,\r\n        status: metadata.status,\r\n        reporter: metadata.reporter\r\n      });\r\n\r\n      if (i === num - 1) {\r\n        done();\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  it('should update a resource with new Hyperty Subscribers', (done) => {\r\n    let url = '<scheme>://<domain>/id-2';\r\n    let hypertySubscribers = ['hyperty://<domain>/id-3', 'hyperty://<domain>/id-2'];\r\n    let isReporter = true;\r\n\r\n    expect(dataObjectsStorage.update(isReporter, url, 'hypertySubscribers', hypertySubscribers[0]).hypertySubscribers).to.contains(hypertySubscribers[0], hypertySubscribers[1]);\r\n\r\n    // .to.have.deep.property('subscriptions', ['hyperty://<domain>/id-4', 'hyperty://<domain>/id-3']);\r\n\r\n    // expect(dataObjectsStorage._storeDataObject[type][resource].subscriptions).to.contains(subscriptions[0], subscriptions[1]);\r\n    done();\r\n  });\r\n\r\n  it('should update a resource with new Subscriber Users', (done) => {\r\n    let resource = '<scheme>://<domain>/id-2';\r\n    let isReporter = true;\r\n\r\n    expect(dataObjectsStorage.update(isReporter, resource, 'subscriberUsers', userURL).subscriberUsers).to.contains(userURL);\r\n    done();\r\n  });\r\n\r\n  // it('should update the data resource', (done) => {\r\n  //   let resource = '<scheme>://<domain>/id-2';\r\n  //   let isReporter = true;\r\n  //   dataObjectsStorage.updateData(resource, 'subscriberUsers', userURL, isReporter);\r\n  //\r\n  //   let type = isReporter ? 'reporters' : 'observers';\r\n  //\r\n  //   expect(dataObjectsStorage._storeDataObject[type][resource].subscriberUsers).to.contains(userURL);\r\n  //   done();\r\n  // });\r\n\r\n  it('should get specific dataObject by hypertyURL', (done) => {\r\n\r\n    let msg = {\r\n      type: 'create',\r\n      from: 'hyperty://<domain>/id-2',\r\n      to: syncherManagerURL\r\n    };\r\n\r\n    expect(dataObjectsStorage.getResourcesByCriteria(msg, true))\r\n    .to.be.fulfilled\r\n    .and.eventually.to.include.keys('<scheme>://<domain>/id-2')\r\n    .and.notify(done);\r\n\r\n  });\r\n\r\n  it('should get specific dataObject by identity', (done) => {\r\n\r\n    let msg = {\r\n      type: 'create',\r\n      from: 'hyperty://<domain>/id-3',\r\n      to: syncherManagerURL,\r\n      body: {\r\n        identity: userURL\r\n      }\r\n\r\n    };\r\n\r\n    expect(dataObjectsStorage.getResourcesByCriteria(msg, true))\r\n    .to.be.fulfilled\r\n    .and.eventually.to.include.keys('<scheme>://<domain>/id-2')\r\n    .and.notify(done);\r\n\r\n  });\r\n\r\n  it('should get specific dataObject by schema', (done) => {\r\n\r\n    let msg = {\r\n      type: 'create',\r\n      from: 'hyperty://<domain>/id-3',\r\n      to: syncherManagerURL,\r\n      body: {\r\n        schema: schema\r\n      }\r\n\r\n    };\r\n\r\n    expect(dataObjectsStorage.getResourcesByCriteria(msg, true))\r\n    .to.be.fulfilled\r\n    .and.eventually.to.include.keys(url)\r\n    .and.notify(done);\r\n\r\n  });\r\n\r\n  it('should get specific dataObject by some data', (done) => {\r\n\r\n    let msg = {\r\n      type: 'create',\r\n      from: 'hyperty://<domain>/id-3',\r\n      to: syncherManagerURL,\r\n      body: {\r\n        value: {\r\n          name: 'WebRTC'\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    expect(dataObjectsStorage.getResourcesByCriteria(msg, true))\r\n    .to.be.fulfilled\r\n    .and.eventually.to.include.keys(url)\r\n    .and.notify(done);\r\n\r\n  });\r\n\r\n  it('should delete a specific value from specific resource', (done) => {\r\n    let resource = '<scheme>://<domain>/id-3';\r\n    let subscription = 'hyperty://<domain>/id-1';\r\n    dataObjectsStorage.delete(resource, 'subscriptions', subscription);\r\n\r\n    done();\r\n  });\r\n\r\n  it('should not delete a resource', (done) => {\r\n    let resource = '<scheme>://<domain>/id-8';\r\n    expect(dataObjectsStorage.deleteResource(resource)).to.be.fulfilled\r\n    .and.eventually.to.be.eq('The ' + resource + ' dosen\\t exists, nothing was deleted').and.notify(done);\r\n  });\r\n\r\n  it('should delete a resource', (done) => {\r\n    let resource = '<scheme>://<domain>/id-1';\r\n    expect(dataObjectsStorage.deleteResource(resource))\r\n    .to.be.fulfilled\r\n    .and.eventually.to.be.undefined.and.notify(done);\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "testDescribe",
    "name": "describe20",
    "testId": 20,
    "memberof": "test/DataObjectsStorage.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20",
    "access": null,
    "description": "dataObjectsStorage",
    "lineNumber": 12
  },
  {
    "__docId__": 139,
    "kind": "testIt",
    "name": "it21",
    "testId": 21,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it21",
    "access": null,
    "description": "should set dataObject information to be saved on storage",
    "lineNumber": 32
  },
  {
    "__docId__": 140,
    "kind": "testIt",
    "name": "it22",
    "testId": 22,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it22",
    "access": null,
    "description": "should set a bundle of information to be saved on storage like reporter",
    "lineNumber": 104
  },
  {
    "__docId__": 141,
    "kind": "testIt",
    "name": "it23",
    "testId": 23,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it23",
    "access": null,
    "description": "should set a bundle of information to be saved on storage like observers",
    "lineNumber": 197
  },
  {
    "__docId__": 142,
    "kind": "testIt",
    "name": "it24",
    "testId": 24,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it24",
    "access": null,
    "description": "should update a resource with new Hyperty Subscribers",
    "lineNumber": 236
  },
  {
    "__docId__": 143,
    "kind": "testIt",
    "name": "it25",
    "testId": 25,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it25",
    "access": null,
    "description": "should update a resource with new Subscriber Users",
    "lineNumber": 249
  },
  {
    "__docId__": 144,
    "kind": "testIt",
    "name": "it26",
    "testId": 26,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it26",
    "access": null,
    "description": "should get specific dataObject by hypertyURL",
    "lineNumber": 268
  },
  {
    "__docId__": 145,
    "kind": "testIt",
    "name": "it27",
    "testId": 27,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it27",
    "access": null,
    "description": "should get specific dataObject by identity",
    "lineNumber": 283
  },
  {
    "__docId__": 146,
    "kind": "testIt",
    "name": "it28",
    "testId": 28,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it28",
    "access": null,
    "description": "should get specific dataObject by schema",
    "lineNumber": 302
  },
  {
    "__docId__": 147,
    "kind": "testIt",
    "name": "it29",
    "testId": 29,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it29",
    "access": null,
    "description": "should get specific dataObject by some data",
    "lineNumber": 321
  },
  {
    "__docId__": 148,
    "kind": "testIt",
    "name": "it30",
    "testId": 30,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it30",
    "access": null,
    "description": "should delete a specific value from specific resource",
    "lineNumber": 342
  },
  {
    "__docId__": 149,
    "kind": "testIt",
    "name": "it31",
    "testId": 31,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it31",
    "access": null,
    "description": "should not delete a resource",
    "lineNumber": 350
  },
  {
    "__docId__": 150,
    "kind": "testIt",
    "name": "it32",
    "testId": 32,
    "memberof": "test/DataObjectsStorage.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/DataObjectsStorage.spec.js~describe20.it32",
    "access": null,
    "description": "should delete a resource",
    "lineNumber": 356
  },
  {
    "__docId__": 151,
    "kind": "testFile",
    "name": "test/Descriptors.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport sinonChai from 'sinon-chai';\r\n\r\nlet expect = chai.expect;\r\n\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\nimport { descriptors } from './resources/descriptors.js';\r\n\r\nimport { buildURL } from '../src/utils/utils';\r\nimport { runtimeConfiguration } from './resources/runtimeConfiguration';\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\nimport Descriptors from '../src/runtime/Descriptors';\r\n\r\ndescribe('Should get configuration and parse to Descriptors', () => {\r\n\r\n  // Testing Registry\r\n  let domain = 'sp.domain';\r\n  let runtimeURL = 'hyperty-runtime://' + domain + '/123';\r\n  let descriptorsInstance;\r\n\r\n  runtimeConfiguration.domain = domain;\r\n\r\n  before(()=> {\r\n    let catalogue = runtimeFactory.createRuntimeCatalogue();\r\n    descriptorsInstance = new Descriptors(runtimeURL, catalogue, runtimeConfiguration);\r\n\r\n    sinon.stub(descriptorsInstance.catalogue, 'getStubDescriptor', (url) => {\r\n      return new Promise((resolve) => {\r\n        resolve(descriptors.ProtoStubs.default);\r\n      });\r\n    });\r\n\r\n    sinon.stub(descriptorsInstance.catalogue, 'getIdpProxyDescriptor', (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        if (url.includes('catalogue.google.com')) {\r\n          reject();\r\n        } else {\r\n          resolve(descriptors.IdpProxies['google.com']);\r\n        }\r\n      });\r\n    });\r\n\r\n    sinon.stub(descriptorsInstance.catalogue, 'getHypertyDescriptor', (url) => {\r\n      return new Promise((resolve) => {\r\n        resolve(descriptors.Hyperties.HelloHyperty);\r\n      });\r\n    });\r\n\r\n  });\r\n\r\n  after(() => {\r\n    descriptorsInstance.catalogue.getIdpProxyDescriptor.restore();\r\n    descriptorsInstance.catalogue.getHypertyDescriptor.restore();\r\n    descriptorsInstance.catalogue.getStubDescriptor.restore();\r\n  });\r\n\r\n  it('constructor should receive 3 arguments', () => {\r\n\r\n    expect(descriptorsInstance)\r\n    .to.have.property('runtimeURL')\r\n    .that.is.an('string')\r\n    .to.not.be.empty;\r\n\r\n    expect(descriptorsInstance)\r\n    .to.have.property('catalogue');\r\n\r\n    expect(descriptorsInstance)\r\n    .to.have.property('runtimeConfiguration')\r\n    .that.is.a('object')\r\n    .and.to.contain.all.keys(runtimeConfiguration);\r\n\r\n  });\r\n\r\n  it('should get hyperty', (done) => {\r\n\r\n    let hypertyDescriptorURL = 'hyperty-catalogue://catalogue.sp.domain/.well-known/hyperty/Connector';\r\n\r\n    expect(descriptorsInstance.getHypertyDescriptor(hypertyDescriptorURL))\r\n    .to.be.fulfilled\r\n    .and.notify(done);\r\n\r\n  });\r\n\r\n  it('should get protocolstub', (done) => {\r\n\r\n    let stubDescriptorURL = 'sp.domain';\r\n\r\n    expect(descriptorsInstance.getStubDescriptor(stubDescriptorURL))\r\n    .to.be.fulfilled\r\n    .and.notify(done);\r\n\r\n  });\r\n\r\n  it('should get protocolstub', (done) => {\r\n\r\n    let idpProxyURL = 'google.com';\r\n\r\n    expect(descriptorsInstance.getIdpProxyDescriptor(idpProxyURL))\r\n    .to.be.fulfilled\r\n    .and.notify(done);\r\n\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/Descriptors.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "testDescribe",
    "name": "describe33",
    "testId": 33,
    "memberof": "test/Descriptors.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/Descriptors.spec.js~describe33",
    "access": null,
    "description": "Should get configuration and parse to Descriptors",
    "lineNumber": 17
  },
  {
    "__docId__": 153,
    "kind": "testIt",
    "name": "it34",
    "testId": 34,
    "memberof": "test/Descriptors.spec.js~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/Descriptors.spec.js~describe33.it34",
    "access": null,
    "description": "constructor should receive 3 arguments",
    "lineNumber": 60
  },
  {
    "__docId__": 154,
    "kind": "testIt",
    "name": "it35",
    "testId": 35,
    "memberof": "test/Descriptors.spec.js~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/Descriptors.spec.js~describe33.it35",
    "access": null,
    "description": "should get hyperty",
    "lineNumber": 77
  },
  {
    "__docId__": 155,
    "kind": "testIt",
    "name": "it36",
    "testId": 36,
    "memberof": "test/Descriptors.spec.js~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/Descriptors.spec.js~describe33.it36",
    "access": null,
    "description": "should get protocolstub",
    "lineNumber": 87
  },
  {
    "__docId__": 156,
    "kind": "testIt",
    "name": "it37",
    "testId": 37,
    "memberof": "test/Descriptors.spec.js~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/Descriptors.spec.js~describe33.it37",
    "access": null,
    "description": "should get protocolstub",
    "lineNumber": 97
  },
  {
    "__docId__": 157,
    "kind": "testFile",
    "name": "test/GraphConnector.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\nchai.use(chaiAsPromised);\r\n\r\n// dependencies\r\nimport BloomFilter from '../src/graphconnector/BloomFilter';\r\nimport GraphConnector from '../src/graphconnector/GraphConnector';\r\nimport GraphConnectorContactData from '../src/graphconnector/GraphConnectorContactData';\r\nimport bip39 from 'bip39';\r\nimport jsrsasign from 'jsrsasign';\r\nimport Registry from '../src/registry/Registry';\r\nimport MessageBus from '../src/bus/MessageBus';\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\nimport AddressAllocation from '../src/allocation/AddressAllocation';\r\n\r\nlet registry;\r\nlet msgbus;\r\nlet runtimeURL = 'hyperty-runtime://ua.pt/123';\r\nlet appSandbox = runtimeFactory.createAppSandbox();\r\nlet storageManager = runtimeFactory.storageManager();\r\nlet runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();\r\nlet runtimeCapabilities = runtimeFactory.runtimeCapabilities(storageManager);\r\nlet graphConnector;\r\n\r\ndescribe('Graph Connector', function() {\r\n\r\n    // this will be executed before all the tests, and you can garantee this will be setted\r\n    before(function () {\r\n\r\n        let identityModule = {\r\n            getIdentities: () => {\r\n                let identities = [];\r\n                let identityBundle = {identity: 'user://gmail.com/openidtest10', token: 'idToken'};\r\n                identities.push(identityBundle);\r\n                return identities;\r\n            }\r\n        };\r\n\r\n        // instanciate the registry;\r\n        registry = new Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, runtimeCapabilities, storageManager);\r\n        msgbus = new MessageBus(registry);\r\n        new AddressAllocation(runtimeURL, msgbus, registry);\r\n\r\n        registry.messageBus = msgbus;\r\n\r\n        graphConnector = new GraphConnector(runtimeURL, msgbus, storageManager);\r\n\r\n    });\r\n\r\n        describe('construction', function() {\r\n            it('create new GraphConnector instance with zero contacts', function() {\r\n\r\n                expect(graphConnector.contacts.length).to.equal(0);\r\n            });\r\n        });\r\n\r\n\r\n        describe('create mock address book', function() {\r\n\r\n            let guid;\r\n            let remGUIDArr = [];\r\n\r\n            it('create new GraphConnector with random contacts', function() {\r\n\r\n\r\n                // mock reply from Global Registry\r\n                graphConnector.messageBus.addListener('global://registry/', (msg) => {\r\n                    let message = {\r\n                        id: msg.id, type: 'response', from: 'global://registry/', to: msg.from,\r\n                        body: {\r\n                            Message: 'request was performed successfully',\r\n                            Code: 400,\r\n                            Value: \"test\",\r\n                            errorCode: 0\r\n                        }\r\n                    };\r\n\r\n                    graphConnector.messageBus.postMessage(message, (reply) => {\r\n\r\n                        console.info('Reply GUID add-contacts: ', reply);\r\n                    });\r\n                });\r\n\r\n                graphConnector.addContact('123', 'Alice', 'Wonderland');\r\n                graphConnector.addContact('1234', 'Bob', 'Wonderland');\r\n                graphConnector.addContact('12345', 'Felix', 'Beierle');\r\n                graphConnector.addContact('123456', 'Senan', 'Sharhan');\r\n                expect(graphConnector.contacts.length).to.equal(4);\r\n            });\r\n\r\n            it('remove some contacts from GraphConnector', function() {\r\n\r\n                graphConnector.removeContact('1234');\r\n                let status = graphConnector.removeContact('4321');\r\n                expect(status).to.equal(false);\r\n                expect(graphConnector.contacts.length).to.equal(3);\r\n            });\r\n\r\n\r\n              it('setting first and last name of the owner', function() {\r\n                graphConnector.generateGUID();\r\n                let result = graphConnector.setOwnerName('Tom', 'Sawyer');\r\n                expect(result).to.equal(true);\r\n                result = graphConnector.setOwnerName('Tom');\r\n                expect(result).to.equal(true);\r\n\r\n            });\r\n\r\n\r\n            it('test direct contacts bloom filter', function() {\r\n\r\n                graphConnector.calculateBloomFilter1Hop();\r\n\r\n                for (let i = 0; i < remGUIDArr.length; i++) {\r\n                    let result = graphConnector.contactsBloomFilter1Hop.test(remGUIDArr[i]);\r\n                    if (result) console.log(contacts);\r\n                    expect(result).to.equal(false);\r\n                }\r\n\r\n                let resultAlice = graphConnector.contactsBloomFilter1Hop.test('123');\r\n                expect(resultAlice).to.equal(true);\r\n                expect(graphConnector.contactsBloomFilter1Hop.test('absdgdghdftgh')).to.equal(false);\r\n                graphConnector.removeContact('123');\r\n                expect(graphConnector.contactsBloomFilter1Hop.test('123')).to.equal(false);\r\n            });\r\n\r\n            it('test privacy setting for contacts', function() {\r\n\r\n                graphConnector.addContact('123', 'Alice', 'Wonderland');\r\n                graphConnector.calculateBloomFilter1Hop();\r\n                expect(graphConnector.contactsBloomFilter1Hop.test('123')).to.equal(true);\r\n\r\n                // set private\r\n                graphConnector.getContact('Alice')[0].privateContact = true;\r\n                graphConnector.calculateBloomFilter1Hop();\r\n                expect(graphConnector.contactsBloomFilter1Hop.test('123')).to.equal(false);\r\n\r\n            });\r\n\r\n            it('check GUID when in friend-of-friend connection', function() {\r\n\r\n                let bf = new BloomFilter(\r\n                    4314,     // number of bits to allocate. With 300 entries, we have a false positive rate of 0.001 %.\r\n                    10        // number of hash functions.\r\n                );\r\n\r\n                bf.add('george');\r\n                bf.add('jerry');\r\n                bf.add('elaine');\r\n                graphConnector.getContact('Alice')[0].contactsBloomFilter1Hop = bf;\r\n\r\n                let result = graphConnector.checkGUID('george');\r\n                let directContacts = result[0];\r\n                let fofs = result [1];\r\n                expect(result.length).to.equal(2);\r\n                expect(directContacts.length).to.equal(0);\r\n                expect(fofs.length).to.equal(1);\r\n\r\n                // connection through Alice\r\n                expect(fofs[0].firstName).to.eql('Alice');\r\n                expect(fofs[0].lastName).to.eql('Wonderland');\r\n                expect(fofs[0].guid).to.eql('123');\r\n\r\n            });\r\n\r\n            it('setting bloom filter of a given contact', function() {\r\n                let bf = new BloomFilter(\r\n                    4314,   // number of bits to allocate. With 300 entries, we have a false positive rate of 0.001 %.\r\n                    10        // number of hash functions.\r\n                );\r\n                bf.add('george');\r\n                bf.add('jerry');\r\n                bf.add('elaine');\r\n                let tmpGUID = '0987xyz7y7fyft87gf6f76';\r\n                graphConnector.addContact(tmpGUID, 'bloom123', 'test');\r\n                graphConnector.setBloomFilter1HopContact(tmpGUID, bf);\r\n                expect((graphConnector.getContact('bloom123')[0].contactsBloomFilter1Hop)).to.eql(bf);\r\n                let lastSyncDate = graphConnector.getContact('bloom123')[0].lastSyncBloomFilter1Hop;\r\n                expect(typeof lastSyncDate).not.to.equal('undefined');\r\n            });\r\n\r\n            it('editing contact (GUID, lname, fname, privacyStatus)', function() {\r\n\r\n                var expectedEdit = new GraphConnectorContactData('1234', 'Joey', 'Wunderlander');\r\n                expectedEdit.privateContact = true;\r\n                graphConnector.addContact('4321', 'eoJ', 'Landwunder');\r\n                let res = graphConnector.editContact('4321', 'Joe', 'Wunderland', '4321', true);\r\n                let result = graphConnector.editContact('4321', 'Joe', 'Wunderland', '1234', true);\r\n                expect(result[0].guid).to.equal(expectedEdit.guid);\r\n                result = graphConnector.editContact('1234', 'Joey', 'Wunderland', '1234', true);\r\n                expect(result[0].fname).to.equal(expectedEdit.fname);\r\n                result = graphConnector.editContact('1234', 'Joey', 'Wunderlander', '1234', true);\r\n                expect(result[0].lname).to.equal(expectedEdit.lname);\r\n                result = graphConnector.editContact('1234', 'Joey', 'Wunderlander', '1234', true);\r\n                expect(result[0].privateContact).to.equal(expectedEdit.privateContact);\r\n            });\r\n\r\n            it('Adding a groupname to a contact', function() {\r\n\r\n                graphConnector.addContact('123456', 'john', 'snow');\r\n                let resultTrue = graphConnector.addGroupName('123456', 'Winterfell');\r\n                let resultFalse = graphConnector.addGroupName('123456789', 'Winterfell');\r\n                expect(resultTrue).to.equal(true);\r\n                expect(resultFalse).to.equal(false);\r\n                resultFalse = graphConnector.addGroupName('123456789', 'Winterfell');\r\n                expect(resultFalse).to.equal(false);\r\n            });\r\n\r\n            it('Adding and removing groupname to owner', function() {\r\n                graphConnector.addContact('1234567890qwertz', 'test', 'test');\r\n                let res = graphConnector.addGroupName('1234567890qwertz', 'Winterfell');\r\n                expect(res).to.equal(true);\r\n                res = graphConnector.addGroupName('1234567890qwertz', 'Winterfell');\r\n                expect(res).to.equal(false);\r\n                res = graphConnector.removeGroupName('1234567890qwertz', 'Winterfell');\r\n                expect(res).to.equal(true);\r\n            });\r\n\r\n            it('adding a residenceLocation to a contact and to owner', function() {\r\n                let contact = graphConnector.setLocation('123456', 'Berlin');\r\n                expect(contact).to.equal(true);\r\n                contact = graphConnector.setLocation('1234567890qwertz', 'Honolulu');\r\n                expect(contact).to.equal(true);\r\n            });\r\n\r\n            it('getting all contacts with same groupName', function() {\r\n                graphConnector.addGroupName('123456', 'Summerfall');\r\n                graphConnector.addGroupName('1234567890qwertz', 'Summerfall');\r\n                let res = graphConnector.getGroup('Summerfall');\r\n                expect(res.length).to.equal(2);\r\n            });\r\n\r\n            it('getting all the group names of the user', function() {\r\n\r\n                let result = graphConnector.getGroupNames();\r\n                expect(result.length).to.equal(2);\r\n                graphConnector.addGroupName('123456', 'SSummerfall');\r\n                result = graphConnector.getGroupNames();\r\n                expect(result.length).to.equal(3);\r\n                graphConnector.removeGroupName('123456', 'SSummerfall');\r\n\r\n            });\r\n\r\n            it('removing a groupname of a contact', function() {\r\n                graphConnector.addContact('123456', 'john', 'snow');\r\n                let resultTrue = graphConnector.removeGroupName('123456', 'Winterfell');\r\n                let resultFalse = graphConnector.removeGroupName('123456789', 'Winterfell');\r\n                expect(resultTrue).to.equal(true);\r\n                expect(resultFalse).to.equal(false);\r\n            });\r\n\r\n            it('removing a residenceLocation', function() {\r\n                let result = graphConnector.removeLocation('123456');\r\n                expect(result).to.equal(true);\r\n                result = graphConnector.removeLocation('1234567noValidGUID');\r\n                expect(result).to.equal(false);\r\n            });\r\n\r\n            it('checking setActive() ', function() {\r\n                let result = graphConnector.setActive(1);\r\n                expect(result).to.equal(true);\r\n                result = graphConnector.setActive(0);\r\n                expect(result).to.equal(true);\r\n            });\r\n\r\n            it('checking setRevoked() ', function() {\r\n                let result = graphConnector.setRevoked(1);\r\n                expect(result).to.equal(true);\r\n                result = graphConnector.setRevoked(0);\r\n                expect(result).to.equal(true);\r\n            });\r\n\r\n            it('checking setTimeout() ', function() {\r\n                let timeout = new Date('October 13, 2017 11:13:00');\r\n                timeout.setMonth(timeout.getMonth() + 120);\r\n                let result = graphConnector.setTimeout(timeout);\r\n                expect(result).to.equal(true);\r\n                timeout = new Date();\r\n                result = graphConnector.setTimeout(timeout);\r\n                expect(result).to.equal(false);\r\n            });\r\n\r\n            it('get contact by first name', function() {\r\n                graphConnector.addContact('kkk', 'Ishantiw', 'abc');\r\n                graphConnector.addContact('lll', 'Ishanti', 'bcd');\r\n                graphConnector.addContact('uuu', 'Ishantiwari', 'cde');\r\n                let result = graphConnector.getContact('Ishan');\r\n                expect(result.length).to.equal(3);\r\n\r\n                //expect(result[0]).to.eql(expected);\r\n            });\r\n\r\n            it('get contact by last name', function() {\r\n                graphConnector.addContact('kkklast', 'fgh', 'Joky');\r\n                graphConnector.addContact('llllast', 'ghi', 'Jokyus');\r\n                graphConnector.addContact('uuulast', 'hij', 'Jokyi');\r\n                let result = graphConnector.getContact('Joky');\r\n                expect(result.length).to.equal(3);\r\n\r\n                ///expect(result[0]).to.eql(expected);\r\n            });\r\n\r\n            it('get list of contacts', function() {\r\n                let result = graphConnector.getAllContacts();\r\n                expect(result.length).to.equal(graphConnector.contacts.length);\r\n            });\r\n\r\n            it('Adding user ID to owner', function() {\r\n\r\n                let resultTrue = graphConnector.addUserID('john://facebook.com/fluffy123', 'google.com');\r\n                let resultFalse = graphConnector.addUserID('john://facebook.com/fluffy123', 'google.com');\r\n                expect(resultTrue).to.equal(true);\r\n                expect(resultFalse).to.equal(false);\r\n\r\n            });\r\n\r\n            it('Removing user ID of the owner', function() {\r\n                let resultTrue = graphConnector.removeUserID('john://facebook.com/fluffy123', 'google.com');\r\n                let resultFalse = graphConnector.removeUserID('john://facebook.com/fluffy123', 'google.com');\r\n                expect(resultTrue).to.equal(true);\r\n                expect(resultFalse).to.equal(false);\r\n            });\r\n\r\n            it('Guid exists or not', function() {\r\n                graphConnector.addContact('guidcheck123', 'guidTest', 'guid');\r\n                let resultTrue = graphConnector.guidExist('guidcheck123');\r\n                let resultFalse = graphConnector.guidExist('guidcheck321');\r\n                expect(resultTrue).to.equal(true);\r\n                expect(resultFalse).to.equal(false);\r\n            });\r\n\r\n            it('returning the owner', function() {\r\n                let owner = graphConnector.getOwner();\r\n                owner.firstName = 'TestingOwner';\r\n                expect(owner.firstName).to.equal('TestingOwner');\r\n            });\r\n\r\n            it('adding userID to a contact', function() {\r\n                graphConnector.addContact('testingAddUSERID123', 'TestingUserID', 'adduserIDSuccess');\r\n                let success = graphConnector.setContactUserIDs('testingAddUSERID123', 'test://facebook.com/fluffy123', 'google.com');\r\n                let unsuccess = graphConnector.setContactUserIDs('testingAddUSERID123', 'test://facebook.com/fluffy123', 'google.com');\r\n                expect(success).to.equal(true);\r\n                expect(unsuccess).to.equal(false);\r\n            });\r\n\r\n            it('getting userIDs of a contact', function() {\r\n                graphConnector.addContact('testingGETUSERID12345', 'TestingUserIDget', 'getuserIDSuccess');\r\n                //Adding user ids to a contact\r\n                graphConnector.setContactUserIDs('testingGETUSERID12345', 'test123://facebook.com/fluffy123', 'google.com');\r\n                graphConnector.setContactUserIDs('testingGETUSERID12345', 'test://twitter.com/fluffy123', 'google.com');\r\n                let success = graphConnector.getContactUserIDs('testingGETUSERID12345');\r\n                let unsuccess = graphConnector.getContactUserIDs('testingGETUSERID123456');\r\n                expect(success.length).to.equal(2);\r\n                expect(unsuccess).to.equal(false);\r\n            });\r\n\r\n            it('Setting the user Defaults', function() {\r\n                graphConnector.setDefaults('a', 'b', 'c');\r\n\r\n                let success = graphConnector.setDefaults('1', '2', '3');\r\n                expect(success).to.equal(true);\r\n            });\r\n\r\n            it('bloom filter tests', function() {\r\n\r\n                let jabberwocky = '`Twas brillig, and the slithy toves\\n  Did gyre and gimble in the wabe:\\nAll mimsy were the borogoves,\\n  And the mome raths outgrabe.\\n\\n\\\"Beware the Jabberwock, my son!\\n  The jaws that bite, the claws that catch!\\nBeware the Jubjub bird, and shun\\n  The frumious Bandersnatch!\\\"\\n\\nHe took his vorpal sword in hand:\\n  Long time the manxome foe he sought --\\nSo rested he by the Tumtum tree,\\n  And stood awhile in thought.\\n\\nAnd, as in uffish thought he stood,\\n  The Jabberwock, with eyes of flame,\\nCame whiffling through the tulgey wood,\\n  And burbled as it came!\\n\\nOne, two! One, two! And through and through\\n  The vorpal blade went snicker-snack!\\nHe left it dead, and with its head\\n  He went galumphing back.\\n\\n\\\"And, has thou slain the Jabberwock?\\n  Come to my arms, my beamish boy!\\nO frabjous day! Callooh! Callay!\\n  He chortled in his joy.\\n\\n`Twas brillig, and the slithy toves\\n  Did gyre and gimble in the wabe;\\nAll mimsy were the borogoves,\\n  And the mome raths outgrabe.';\r\n\r\n                let f = new BloomFilter(1000, 4);\r\n                let n1 = 'Bess';\r\n                let n2 = 'Jane';\r\n                f.add(n1);\r\n                expect(f.test(n1)).to.equal(true);\r\n                expect(f.test(n2)).to.equal(false);\r\n\r\n                f = new BloomFilter(1000, 4);\r\n                n1 = jabberwocky;\r\n                n2 = jabberwocky + '\\n';\r\n                f.add(n1);\r\n                expect(f.test(n1)).to.equal(true);\r\n                expect(f.test(n2)).to.equal(false);\r\n\r\n                f = new BloomFilter(1000, 4);\r\n                n1 = '\\u0100';\r\n                n2 = '\\u0101';\r\n                let n3 = '\\u0103';\r\n                f.add(n1);\r\n                expect(f.test(n1)).to.equal(true);\r\n                expect(f.test(n2)).to.equal(false);\r\n                expect(f.test(n3)).to.equal(false);\r\n\r\n                f = new BloomFilter(20, 10);\r\n                f.add('abc');\r\n                expect(f.test('wtf')).to.equal(false);\r\n\r\n                f = new BloomFilter(1000, 4);\r\n                f.add(1);\r\n                expect(f.test(1)).to.equal(true);\r\n                expect(f.test(2)).to.equal(false);\r\n\r\n                f = new BloomFilter(1000, 4);\r\n                for (let i = 0; i < 100; ++i) {\r\n                    f.add(i);\r\n                }\r\n                expect(f.size()).to.be.closeTo(99.953102, 1e-6);\r\n                for (let i = 0; i < 1000; ++i) {\r\n                    f.add(i);\r\n                }\r\n                expect(f.size()).to.be.closeTo(950.424571, 1e-6);\r\n\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n        describe('GUID', function() {\r\n\r\n\r\n            it('GUID generation', function() {\r\n\r\n                this.timeout(30000);\r\n\r\n                let mnemonic1 = graphConnector.generateGUID();\r\n                let res = mnemonic1.split(' ');\r\n\r\n                expect(res.length).to.equal(16);\r\n\r\n            });\r\n\r\n            it('GUID re-generation', function(done) {\r\n\r\n                this.timeout(15000);\r\n\r\n                // create mnemonic and sign Global Regsitry record\r\n                let mnemonic1 = graphConnector.generateGUID();\r\n                let jwt1 = graphConnector.signGlobalRegistryRecord();\r\n\r\n\r\n                // mock reply from Global Registry\r\n                graphConnector.messageBus.removeAllListenersOf('global://registry/');\r\n                graphConnector.messageBus.addListener('global://registry/', (msg) => {\r\n                    let message = {\r\n                        id: msg.id, type: 'response', from: 'global://registry/', to: msg.from,\r\n                        body: {\r\n                            Message: 'request was performed successfully',\r\n                            Code: 200,\r\n                            Value: jwt1,\r\n                            errorCode: 0\r\n                        }\r\n                    };\r\n\r\n                    graphConnector.messageBus.postMessage(message, (reply) => {\r\n\r\n                        console.info('Reply GUID re-generation: ', reply);\r\n                    });\r\n                });\r\n\r\n                expect(graphConnector.useGUID(mnemonic1).then(function(response) {\r\n\r\n                    let publicKey2 = graphConnector.globalRegistryRecord.publicKey;\r\n                    let publicKeyObject2 = jsrsasign.KEYUTIL.getKey(publicKey2);\r\n\r\n                    let unwrappedJWT = jsrsasign.KJUR.jws.JWS.parse(jwt1);\r\n                    let encodedString = jwt1.split('.').slice(0, 2).join('.');\r\n                    let sigValueHex = unwrappedJWT.sigHex;\r\n                    let sig = new jsrsasign.KJUR.crypto.Signature({alg: 'SHA256withECDSA'});\r\n                    sig.init(publicKeyObject2);\r\n                    sig.updateString(encodedString);\r\n                    let isValid = sig.verify(sigValueHex);\r\n\r\n                    return isValid;\r\n                })).to.be.fulfilled.and.eventually.equal(true).and.notify(done);\r\n\r\n            });\r\n        });\r\n\r\n        describe('Global Registry Connection - send', function() {\r\n\r\n\r\n            it('send Global Registry Record', function(done) {\r\n\r\n                this.timeout(15000);\r\n\r\n                // create mnemonic and sign Global Regsitry record\r\n\r\n                let jwt1 = graphConnector.signGlobalRegistryRecord();\r\n\r\n                // mock reply from Global Registry 1\r\n                graphConnector.messageBus.removeAllListenersOf('global://registry/');\r\n                graphConnector.messageBus.addListener('global://registry/', (msg) => {\r\n                    let message = {\r\n                        id: msg.id, type: 'response', from: 'global://registry/', to: msg.from,\r\n                        body: {\r\n                            Message: 'request was performed successfully',\r\n                            Code: 200,\r\n                            errorCode: 0\r\n                        }\r\n                    };\r\n\r\n                    graphConnector.messageBus.postMessage(message, (reply) => {\r\n                        console.info('Reply GRC - send: ', reply);\r\n                    });\r\n                });\r\n\r\n                expect(graphConnector.sendGlobalRegistryRecord(jwt1).then(function(response) {\r\n                    return response;\r\n                })).to.be.fulfilled.and.eventually.equal(200).and.notify(done);\r\n\r\n            });\r\n        });\r\n\r\n        describe('Global Registry Connection - use GUID', function() {\r\n\r\n\r\n            it('re-use GUID and retrieve data from Global Registry', function(done) {\r\n\r\n                this.timeout(15000);\r\n\r\n                // create mnemonic and sign Global Regsitry record\r\n                let mnemonic1 = graphConnector.generateGUID();\r\n                let jwt1 = graphConnector.signGlobalRegistryRecord();\r\n                let grr1 = graphConnector.globalRegistryRecord;\r\n\r\n                // mock reply from Global Registry 2\r\n                graphConnector.messageBus.removeAllListenersOf('global://registry/');\r\n                graphConnector.messageBus.addListener('global://registry/', (msg) => {\r\n                    let message = {\r\n                        id: msg.id, type: 'response', from: 'global://registry/', to: msg.from,\r\n                        body: {\r\n                            Message: 'request was performed successfully',\r\n                            Code: 200,\r\n                            Value: jwt1,\r\n                            errorCode: 0\r\n                        }\r\n                    };\r\n\r\n                    graphConnector.messageBus.postMessage(message, (reply) => {\r\n                        console.log('Reply GRC - use GUID: ', reply);\r\n                    });\r\n                });\r\n\r\n                expect(graphConnector.useGUID(mnemonic1).then(function(response) {\r\n                    return response;\r\n                })).to.be.fulfilled.and.eventually.eql(grr1).and.notify(done);\r\n            });\r\n\r\n        });\r\n\r\n     describe('Querying Global Registry', function() {\r\n\r\n\r\n            it('query Global Registry', function(done) {\r\n\r\n                this.timeout(15000);\r\n\r\n                let jwt = graphConnector.signGlobalRegistryRecord();\r\n                let guid1 = graphConnector.globalRegistryRecord.guid;\r\n\r\n\r\n                // mock reply from Global Registry\r\n                graphConnector.messageBus.removeAllListenersOf('global://registry/');\r\n                graphConnector.messageBus.addListener('global://registry/', (msg) => {\r\n                    let message = {\r\n                        id: msg.id, type: 'response', from: 'global://registry/', to: msg.from,\r\n                        body: {\r\n                            Message: 'request was performed successfully',\r\n                            Code: 200,\r\n                            Value: jwt,\r\n                            errorCode: 0\r\n                        }\r\n                    };\r\n\r\n                    graphConnector.messageBus.postMessage(message, (reply) => {\r\n                        console.info('Reply QGR - query: ', reply);\r\n                    });\r\n                });\r\n\r\n\r\n                expect(graphConnector.queryGlobalRegistry(guid1).then(function(response) {\r\n                    return response._guid;\r\n                })).to.be.fulfilled.and.eventually.equal(guid1).and.notify(done);\r\n\r\n            });\r\n\r\n        });\r\n\r\n});\r\n\r\n",
    "static": true,
    "longname": "test/GraphConnector.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "testDescribe",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/GraphConnector.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38",
    "access": null,
    "description": "Graph Connector",
    "lineNumber": 29
  },
  {
    "__docId__": 159,
    "kind": "testDescribe",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/GraphConnector.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe39",
    "access": null,
    "description": "construction",
    "lineNumber": 54
  },
  {
    "__docId__": 160,
    "kind": "testIt",
    "name": "it40",
    "testId": 40,
    "memberof": "test/GraphConnector.spec.js~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe39.it40",
    "access": null,
    "description": "create new GraphConnector instance with zero contacts",
    "lineNumber": 55
  },
  {
    "__docId__": 161,
    "kind": "testDescribe",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/GraphConnector.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41",
    "access": null,
    "description": "create mock address book",
    "lineNumber": 62
  },
  {
    "__docId__": 162,
    "kind": "testIt",
    "name": "it42",
    "testId": 42,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it42",
    "access": null,
    "description": "create new GraphConnector with random contacts",
    "lineNumber": 67
  },
  {
    "__docId__": 163,
    "kind": "testIt",
    "name": "it43",
    "testId": 43,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it43",
    "access": null,
    "description": "remove some contacts from GraphConnector",
    "lineNumber": 95
  },
  {
    "__docId__": 164,
    "kind": "testIt",
    "name": "it44",
    "testId": 44,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it44",
    "access": null,
    "description": "setting first and last name of the owner",
    "lineNumber": 104
  },
  {
    "__docId__": 165,
    "kind": "testIt",
    "name": "it45",
    "testId": 45,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it45",
    "access": null,
    "description": "test direct contacts bloom filter",
    "lineNumber": 114
  },
  {
    "__docId__": 166,
    "kind": "testIt",
    "name": "it46",
    "testId": 46,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it46",
    "access": null,
    "description": "test privacy setting for contacts",
    "lineNumber": 131
  },
  {
    "__docId__": 167,
    "kind": "testIt",
    "name": "it47",
    "testId": 47,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it47",
    "access": null,
    "description": "check GUID when in friend-of-friend connection",
    "lineNumber": 144
  },
  {
    "__docId__": 168,
    "kind": "testIt",
    "name": "it48",
    "testId": 48,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it48",
    "access": null,
    "description": "setting bloom filter of a given contact",
    "lineNumber": 170
  },
  {
    "__docId__": 169,
    "kind": "testIt",
    "name": "it49",
    "testId": 49,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it49",
    "access": null,
    "description": "editing contact (GUID, lname, fname, privacyStatus)",
    "lineNumber": 186
  },
  {
    "__docId__": 170,
    "kind": "testIt",
    "name": "it50",
    "testId": 50,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it50",
    "access": null,
    "description": "Adding a groupname to a contact",
    "lineNumber": 202
  },
  {
    "__docId__": 171,
    "kind": "testIt",
    "name": "it51",
    "testId": 51,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it51",
    "access": null,
    "description": "Adding and removing groupname to owner",
    "lineNumber": 213
  },
  {
    "__docId__": 172,
    "kind": "testIt",
    "name": "it52",
    "testId": 52,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it52",
    "access": null,
    "description": "adding a residenceLocation to a contact and to owner",
    "lineNumber": 223
  },
  {
    "__docId__": 173,
    "kind": "testIt",
    "name": "it53",
    "testId": 53,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it53",
    "access": null,
    "description": "getting all contacts with same groupName",
    "lineNumber": 230
  },
  {
    "__docId__": 174,
    "kind": "testIt",
    "name": "it54",
    "testId": 54,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it54",
    "access": null,
    "description": "getting all the group names of the user",
    "lineNumber": 237
  },
  {
    "__docId__": 175,
    "kind": "testIt",
    "name": "it55",
    "testId": 55,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it55",
    "access": null,
    "description": "removing a groupname of a contact",
    "lineNumber": 248
  },
  {
    "__docId__": 176,
    "kind": "testIt",
    "name": "it56",
    "testId": 56,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it56",
    "access": null,
    "description": "removing a residenceLocation",
    "lineNumber": 256
  },
  {
    "__docId__": 177,
    "kind": "testIt",
    "name": "it57",
    "testId": 57,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it57",
    "access": null,
    "description": "checking setActive() ",
    "lineNumber": 263
  },
  {
    "__docId__": 178,
    "kind": "testIt",
    "name": "it58",
    "testId": 58,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it58",
    "access": null,
    "description": "checking setRevoked() ",
    "lineNumber": 270
  },
  {
    "__docId__": 179,
    "kind": "testIt",
    "name": "it59",
    "testId": 59,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it59",
    "access": null,
    "description": "checking setTimeout() ",
    "lineNumber": 277
  },
  {
    "__docId__": 180,
    "kind": "testIt",
    "name": "it60",
    "testId": 60,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it60",
    "access": null,
    "description": "get contact by first name",
    "lineNumber": 287
  },
  {
    "__docId__": 181,
    "kind": "testIt",
    "name": "it61",
    "testId": 61,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it61",
    "access": null,
    "description": "get contact by last name",
    "lineNumber": 297
  },
  {
    "__docId__": 182,
    "kind": "testIt",
    "name": "it62",
    "testId": 62,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it62",
    "access": null,
    "description": "get list of contacts",
    "lineNumber": 307
  },
  {
    "__docId__": 183,
    "kind": "testIt",
    "name": "it63",
    "testId": 63,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it63",
    "access": null,
    "description": "Adding user ID to owner",
    "lineNumber": 312
  },
  {
    "__docId__": 184,
    "kind": "testIt",
    "name": "it64",
    "testId": 64,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it64",
    "access": null,
    "description": "Removing user ID of the owner",
    "lineNumber": 321
  },
  {
    "__docId__": 185,
    "kind": "testIt",
    "name": "it65",
    "testId": 65,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it65",
    "access": null,
    "description": "Guid exists or not",
    "lineNumber": 328
  },
  {
    "__docId__": 186,
    "kind": "testIt",
    "name": "it66",
    "testId": 66,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it66",
    "access": null,
    "description": "returning the owner",
    "lineNumber": 336
  },
  {
    "__docId__": 187,
    "kind": "testIt",
    "name": "it67",
    "testId": 67,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it67",
    "access": null,
    "description": "adding userID to a contact",
    "lineNumber": 342
  },
  {
    "__docId__": 188,
    "kind": "testIt",
    "name": "it68",
    "testId": 68,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it68",
    "access": null,
    "description": "getting userIDs of a contact",
    "lineNumber": 350
  },
  {
    "__docId__": 189,
    "kind": "testIt",
    "name": "it69",
    "testId": 69,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it69",
    "access": null,
    "description": "Setting the user Defaults",
    "lineNumber": 361
  },
  {
    "__docId__": 190,
    "kind": "testIt",
    "name": "it70",
    "testId": 70,
    "memberof": "test/GraphConnector.spec.js~describe38.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe41.it70",
    "access": null,
    "description": "bloom filter tests",
    "lineNumber": 368
  },
  {
    "__docId__": 191,
    "kind": "testDescribe",
    "name": "describe71",
    "testId": 71,
    "memberof": "test/GraphConnector.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe71",
    "access": null,
    "description": "GUID",
    "lineNumber": 420
  },
  {
    "__docId__": 192,
    "kind": "testIt",
    "name": "it72",
    "testId": 72,
    "memberof": "test/GraphConnector.spec.js~describe38.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe71.it72",
    "access": null,
    "description": "GUID generation",
    "lineNumber": 423
  },
  {
    "__docId__": 193,
    "kind": "testIt",
    "name": "it73",
    "testId": 73,
    "memberof": "test/GraphConnector.spec.js~describe38.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe71.it73",
    "access": null,
    "description": "GUID re-generation",
    "lineNumber": 434
  },
  {
    "__docId__": 194,
    "kind": "testDescribe",
    "name": "describe74",
    "testId": 74,
    "memberof": "test/GraphConnector.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe74",
    "access": null,
    "description": "Global Registry Connection - send",
    "lineNumber": 481
  },
  {
    "__docId__": 195,
    "kind": "testIt",
    "name": "it75",
    "testId": 75,
    "memberof": "test/GraphConnector.spec.js~describe38.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe74.it75",
    "access": null,
    "description": "send Global Registry Record",
    "lineNumber": 484
  },
  {
    "__docId__": 196,
    "kind": "testDescribe",
    "name": "describe76",
    "testId": 76,
    "memberof": "test/GraphConnector.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe76",
    "access": null,
    "description": "Global Registry Connection - use GUID",
    "lineNumber": 516
  },
  {
    "__docId__": 197,
    "kind": "testIt",
    "name": "it77",
    "testId": 77,
    "memberof": "test/GraphConnector.spec.js~describe38.describe76",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe76.it77",
    "access": null,
    "description": "re-use GUID and retrieve data from Global Registry",
    "lineNumber": 519
  },
  {
    "__docId__": 198,
    "kind": "testDescribe",
    "name": "describe78",
    "testId": 78,
    "memberof": "test/GraphConnector.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe78",
    "access": null,
    "description": "Querying Global Registry",
    "lineNumber": 553
  },
  {
    "__docId__": 199,
    "kind": "testIt",
    "name": "it79",
    "testId": 79,
    "memberof": "test/GraphConnector.spec.js~describe38.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "test/GraphConnector.spec.js~describe38.describe78.it79",
    "access": null,
    "description": "query Global Registry",
    "lineNumber": 556
  },
  {
    "__docId__": 200,
    "kind": "testFile",
    "name": "test/IdentityModule.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport MessageBus from '../src/bus/MessageBus';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\nchai.use(chaiAsPromised);\r\n\r\nimport IdentityModule from '../src/identity/IdentityModule';\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\n\r\nlet storageManager = runtimeFactory.storageManager();\r\nlet persistenceManager = runtimeFactory.persistenceManager();\r\nlet runtimeURL = 'hyperty-runtime://csp.com/123';\r\n\r\nlet msgbus = {\r\n  postMessage: (msg, callback) => {\r\n    let createMsg = {\r\n      type: 'create',\r\n      from: 'hyperty-runtime://csp.com/123/idm',\r\n      to: 'hyperty-runtime://csp.com/123/identity-gui',\r\n      body: {value: {identities: [], idps: ['google.com', 'microsoft.com', 'orange.fr']}}\r\n    };\r\n\r\n    let responseMsg = {\r\n      type: 'response',\r\n      from: 'hyperty-runtime://csp.com/123/idm',\r\n      to: 'hyperty-runtime://csp.com/123/identity-gui',\r\n      body: {value: {identities: [], idps: ['google.com', 'microsoft.com', 'orange.fr']}}\r\n    };\r\n\r\n    let executeMsg = {\r\n      type: 'execute',\r\n      from: 'hyperty-runtime://csp.com/123/idm',\r\n      to: 'hyperty-runtime://csp.com/123/identity-gui',\r\n      body: { resource: 'identity', method: 'openPopup', params: {urlreceived: 'url'}}\r\n    };\r\n\r\n    expect(msg.type).to.be.oneOf([createMsg.type, executeMsg.type, responseMsg.type]);\r\n\r\n    if (msg.type === createMsg.type) {\r\n\r\n      expect(msg).to.eql(createMsg);\r\n\r\n      callback({\r\n        id: 1, type: 'response', from: 'hyperty-runtime://csp.com/123/identity-gui', to: 'hyperty-runtime://csp.com/123/idm',\r\n        body: {type: 'idp', value: 'google.com', code: 200}\r\n      });\r\n    }\r\n  },\r\n\r\n  addListener: (url, callback) => {\r\n    expect(url).to.eql('hyperty-runtime://csp.com/123/idm');\r\n  }\r\n};\r\n\r\nlet identityModule = new IdentityModule(runtimeURL, 'runtimeCapabilities', storageManager);\r\n\r\nidentityModule.messageBus = msgbus;\r\n\r\ndescribe('IdentityModule', function() {\r\n\r\n  describe('constructor()', function() {\r\n\r\n    it('successfully instantiated', function() {\r\n      expect(identityModule).to.be.instanceof(IdentityModule);\r\n    });\r\n  });\r\n\r\n  describe('getIdentitiesToChoose()', function() {\r\n\r\n    //not expected to have initially an identity registered\r\n    let expectedInfo = {\r\n      identities: [],\r\n      idps: [{ domain: 'google.com', type: 'idToken' },\r\n            { domain: 'microsoft.com', type: 'idToken' },\r\n            { domain: 'orange.fr', type: 'idToken' },\r\n            { domain: 'slack.com', type: 'Legacy' }]\r\n    };\r\n\r\n    it('should return a list of IdPs and a list of identities previously registered', () => {\r\n      expect(identityModule.getIdentitiesToChoose()).to.be.eql(expectedInfo);\r\n    });\r\n  });\r\n\r\n  /*describe('requestIdentityToGUI(identities, idps)', () => {\r\n\r\n    let idInfo = identityModule.getIdentitiesToChoose();\r\n\r\n    // the fake gui, will choose the first idp on the list\r\n    let expectedValue = {type: 'idp', value: 'google.com'};\r\n\r\n    it('should return the first idp on the list', (done) => {\r\n\r\n      expect(identityModule.requestIdentityToGUI(idInfo.identities, idInfo.idps).then((value) => {\r\n        return value;\r\n      })).to.be.fulfilled.and.eventually.to.be.eql(expectedValue).and.notify(done);\r\n    });\r\n\r\n  });*/\r\n\r\n  //TODO complete with encryptMessage() and decryptMessage()\r\n  /*describe('encryptMessage()', function() {\r\n\r\n    it('successfully instantiated', function() {\r\n      expect(identityModule).to.be.instanceof(IdentityModule);\r\n    });\r\n  });*/\r\n});\r\n",
    "static": true,
    "longname": "test/IdentityModule.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "testDescribe",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/IdentityModule.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/IdentityModule.spec.js~describe80",
    "access": null,
    "description": "IdentityModule",
    "lineNumber": 62
  },
  {
    "__docId__": 202,
    "kind": "testDescribe",
    "name": "describe81",
    "testId": 81,
    "memberof": "test/IdentityModule.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/IdentityModule.spec.js~describe80.describe81",
    "access": null,
    "description": "constructor()",
    "lineNumber": 64
  },
  {
    "__docId__": 203,
    "kind": "testIt",
    "name": "it82",
    "testId": 82,
    "memberof": "test/IdentityModule.spec.js~describe80.describe81",
    "testDepth": 2,
    "static": true,
    "longname": "test/IdentityModule.spec.js~describe80.describe81.it82",
    "access": null,
    "description": "successfully instantiated",
    "lineNumber": 66
  },
  {
    "__docId__": 204,
    "kind": "testDescribe",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/IdentityModule.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/IdentityModule.spec.js~describe80.describe83",
    "access": null,
    "description": "getIdentitiesToChoose()",
    "lineNumber": 71
  },
  {
    "__docId__": 205,
    "kind": "testIt",
    "name": "it84",
    "testId": 84,
    "memberof": "test/IdentityModule.spec.js~describe80.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/IdentityModule.spec.js~describe80.describe83.it84",
    "access": null,
    "description": "should return a list of IdPs and a list of identities previously registered",
    "lineNumber": 82
  },
  {
    "__docId__": 206,
    "kind": "testFile",
    "name": "test/MessageBus.spec.js",
    "content": "import chai from 'chai';\r\nimport MessageBus from '../src/bus/MessageBus';\r\n\r\nlet expect = chai.expect;\r\n\r\ndescribe('MessageBus', function() {\r\n  it('sending message', function(done) {\r\n    let msgResult;\r\n\r\n    let mockRegistry = {\r\n      resolve(url) {\r\n        return new Promise((resolve) => {\r\n          //resolve to the same URL\r\n          resolve(url);\r\n        });\r\n      }\r\n    };\r\n\r\n    let msgBus = new MessageBus(mockRegistry);\r\n    msgBus.addListener('hyper-2', (msg) => {\r\n      msgResult = msg;\r\n    });\r\n\r\n    msgBus.postMessage({\r\n      from: 'hyper-1', to: 'hyper-2',\r\n      body: {value: 'x'}\r\n    });\r\n\r\n    setTimeout(() => {\r\n      expect(msgResult).to.eql({\r\n        id: 1, from: 'hyper-1', to: 'hyper-2',\r\n        body: {value: 'x'}\r\n      });\r\n\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('pipeline msg change', function(done) {\r\n    let mBus = new MessageBus();\r\n    mBus.pipeline.handlers = [\r\n      function(ctx) {\r\n        ctx.msg.token = '12345678';\r\n        ctx.next();\r\n      }\r\n    ];\r\n\r\n    mBus.addListener('hyper-2', (msg) => {\r\n      expect(msg).to.eql({ id: 1, type: 'ping', token: '12345678', from: 'hyper-1', to: 'hyper-2' });\r\n      done();\r\n    });\r\n\r\n    mBus.postMessage({ type: 'ping', from: 'hyper-1', to: 'hyper-2' });\r\n  });\r\n\r\n  it('sending using external system', function(done) {\r\n    let msgResult;\r\n\r\n    let mockRegistry = {\r\n      resolve() {\r\n        return new Promise((resolve) => {\r\n          //resolve to default\r\n          resolve('protostub');\r\n        });\r\n      }\r\n    };\r\n\r\n    let msgBus = new MessageBus(mockRegistry);\r\n    msgBus.addListener('protostub', (msg) => {\r\n      msgResult = msg;\r\n    });\r\n\r\n    msgBus.postMessage({\r\n      from: 'hyper-1', to: 'hyper-2/other',\r\n      body: {value: 'x'}\r\n    });\r\n\r\n    setTimeout(() => {\r\n      expect(msgResult).to.eql({\r\n        id: 1, from: 'hyper-1', to: 'hyper-2/other',\r\n        body: {value: 'x'}\r\n      });\r\n\r\n      done();\r\n    });\r\n\r\n  });\r\n\r\n  it('publish unique messages', function(done) {\r\n    let result = { obj1: 0, obj2: 0 };\r\n\r\n    let msgBus = new MessageBus();\r\n    msgBus._onPostMessage = (msg) => {\r\n      console.log(msg);\r\n      result[msg.to]++;\r\n    };\r\n\r\n    msgBus.addPublish('obj1');\r\n    msgBus.addPublish('obj1'); //repeated route ignored\r\n    msgBus.addPublish('obj2');\r\n\r\n    setTimeout(() => {\r\n      msgBus.postMessage({ from: 'x', to: 'obj1' });\r\n      msgBus.postMessage({ from: 'x', to: 'obj2' });\r\n      msgBus.postMessage({ from: 'x', to: 'obj2' });\r\n\r\n      setTimeout(() => {\r\n        expect(result).to.eql({ obj1: 1, obj2: 2 });\r\n        done();\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/MessageBus.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "testDescribe",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/MessageBus.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/MessageBus.spec.js~describe85",
    "access": null,
    "description": "MessageBus",
    "lineNumber": 6
  },
  {
    "__docId__": 208,
    "kind": "testIt",
    "name": "it86",
    "testId": 86,
    "memberof": "test/MessageBus.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/MessageBus.spec.js~describe85.it86",
    "access": null,
    "description": "sending message",
    "lineNumber": 7
  },
  {
    "__docId__": 209,
    "kind": "testIt",
    "name": "it87",
    "testId": 87,
    "memberof": "test/MessageBus.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/MessageBus.spec.js~describe85.it87",
    "access": null,
    "description": "pipeline msg change",
    "lineNumber": 39
  },
  {
    "__docId__": 210,
    "kind": "testIt",
    "name": "it88",
    "testId": 88,
    "memberof": "test/MessageBus.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/MessageBus.spec.js~describe85.it88",
    "access": null,
    "description": "sending using external system",
    "lineNumber": 56
  },
  {
    "__docId__": 211,
    "kind": "testIt",
    "name": "it89",
    "testId": 89,
    "memberof": "test/MessageBus.spec.js~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "test/MessageBus.spec.js~describe85.it89",
    "access": null,
    "description": "publish unique messages",
    "lineNumber": 89
  },
  {
    "__docId__": 212,
    "kind": "testFile",
    "name": "test/MiniBus.spec.js",
    "content": "import chai from 'chai';\r\nimport MiniBus from '../src/bus/MiniBus';\r\n\r\nlet expect = chai.expect;\r\n\r\ndescribe('MiniBus', function() {\r\n  it('simple sending message', function(done) {\r\n    let mBus = new MiniBus();\r\n    mBus._onPostMessage = (msg) => {\r\n      expect(msg).to.eql({\r\n        id: 1, type: 'test', from: 'hyper-1', to: 'hyper-2',\r\n        body: {value: 'x'}\r\n      });\r\n\r\n      done();\r\n    };\r\n\r\n    mBus.postMessage({\r\n      type: 'test', from: 'hyper-1', to: 'hyper-2',\r\n      body: {value: 'x'}\r\n    });\r\n  });\r\n\r\n  it('send with external response', function(done) {\r\n    this.timeout(4000);\r\n    let msgResult = {};\r\n\r\n    let mBus = new MiniBus();\r\n    mBus.addListener('hyper-1', (msg) => {\r\n      msgResult = msg;\r\n    });\r\n\r\n    mBus._onPostMessage = (msg) => {\r\n      expect(msg).to.eql({\r\n        id: 1, type: 'test', from: 'hyper-1', to: 'hyper-2',\r\n        body: {value: 'x'}\r\n      });\r\n\r\n      mBus._onMessage({\r\n        id: 1, type: 'response', from: 'hyper-2', to: 'hyper-1',\r\n        body: {value: 'y'}\r\n      });\r\n    };\r\n\r\n    mBus.postMessage({\r\n      type: 'test', from: 'hyper-1', to: 'hyper-2',\r\n      body: {value: 'x'}\r\n    }, (response) => {\r\n      expect(response).to.eql({\r\n        id: 1, type: 'response', from: 'hyper-2', to: 'hyper-1',\r\n        body: {value: 'y'}\r\n      });\r\n\r\n      setTimeout(() => {\r\n        //expect not to enter in the hyper-1 listener\r\n        expect(msgResult).to.be.empty;\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  it('send and publish', function(done) {\r\n    let mBus = new MiniBus();\r\n    let msgResult = {};\r\n\r\n    let defaultListener = false;\r\n    let hyper2Listener = false;\r\n    let objListener = false;\r\n\r\n    mBus.addListener('*', (msg) => {\r\n      msgResult = msg;\r\n      defaultListener = true;\r\n    });\r\n\r\n    mBus.addListener('hyperty://hyper-2', (msg) => {\r\n      msgResult = msg;\r\n      hyper2Listener = true;\r\n    });\r\n\r\n    mBus.addListener('resource://fake-url', (msg) => {\r\n      msgResult = msg;\r\n      objListener = true;\r\n    });\r\n\r\n    //simulate message from MessageBus core\r\n    mBus._onMessage({\r\n      id: 1, type: 'send', from: 'hyperty://hyper-1', to: 'hyperty://hyper-2',\r\n      body: {value: 'x'}\r\n    });\r\n\r\n    setTimeout(() => {\r\n      //should be only received in the hyperty listener\r\n      expect(defaultListener).to.eql(false);\r\n      expect(hyper2Listener).to.eql(true);\r\n      expect(msgResult).to.eql({\r\n        id: 1, type: 'send', from: 'hyperty://hyper-1', to: 'hyperty://hyper-2',\r\n        body: {value: 'x'}\r\n      });\r\n\r\n      //simulate message from MessageBus core\r\n      mBus._onMessage({\r\n        id: 2, type: 'publish', from: 'hyperty://hyper-1', to: 'resource://fake-url',\r\n        body: {value: 'x'}\r\n      });\r\n\r\n      setTimeout(() => {\r\n        //should be received in default and object listener\r\n        expect(defaultListener).to.eql(true);\r\n        expect(objListener).to.eql(true);\r\n        expect(msgResult).to.eql({\r\n          id: 2, type: 'publish', from: 'hyperty://hyper-1', to: 'resource://fake-url',\r\n          body: {value: 'x'}\r\n        });\r\n        done();\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/MiniBus.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "testDescribe",
    "name": "describe90",
    "testId": 90,
    "memberof": "test/MiniBus.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/MiniBus.spec.js~describe90",
    "access": null,
    "description": "MiniBus",
    "lineNumber": 6
  },
  {
    "__docId__": 214,
    "kind": "testIt",
    "name": "it91",
    "testId": 91,
    "memberof": "test/MiniBus.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/MiniBus.spec.js~describe90.it91",
    "access": null,
    "description": "simple sending message",
    "lineNumber": 7
  },
  {
    "__docId__": 215,
    "kind": "testIt",
    "name": "it92",
    "testId": 92,
    "memberof": "test/MiniBus.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/MiniBus.spec.js~describe90.it92",
    "access": null,
    "description": "send with external response",
    "lineNumber": 24
  },
  {
    "__docId__": 216,
    "kind": "testIt",
    "name": "it93",
    "testId": 93,
    "memberof": "test/MiniBus.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/MiniBus.spec.js~describe90.it93",
    "access": null,
    "description": "send and publish",
    "lineNumber": 62
  },
  {
    "__docId__": 217,
    "kind": "testFile",
    "name": "test/PersistenceManager.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport PersistenceManager from 'service-framework/dist/PersistenceManager';\r\n\r\nlet expect = chai.expect;\r\nlet localStorage = window.localStorage\r\n\r\ndescribe('PersistenceManager', function() {\r\n  let persistenceManager = new PersistenceManager(localStorage);\r\n\r\n    describe('set', function(){\r\n        it('should set the value for a given key-version tuple', function(){\r\n            persistenceManager.set('key', 'v1.0.0', {})\r\n\r\n            expect(localStorage.getItem('key')).to.exist\r\n        })\r\n    })\r\n\r\n    describe('get', function(){\r\n        it('should get the value for a given key', function(){\r\n            persistenceManager.set('key', 'v1.0.0', {})\r\n\r\n            expect(persistenceManager.get('key')).to.be.eql({})\r\n        })\r\n    })\r\n\r\n    describe('getVersion', function(){\r\n        it('should get the value version for a given key', function(){\r\n            persistenceManager.set('key', 'v1.0.0', {})\r\n\r\n            expect(persistenceManager.getVersion('key')).to.be.equal('v1.0.0')\r\n        })\r\n    })\r\n\r\n    describe('delete', function(){\r\n        it('should remove a value from PersistenceManager for a given key', function(){\r\n            localStorage.setItem('key', '{}')\r\n\r\n            persistenceManager.delete('key')\r\n\r\n            expect(localStorage.getItem('key')).to.be.a('null')\r\n        })\r\n    })\r\n})\r\n",
    "static": true,
    "longname": "test/PersistenceManager.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "testDescribe",
    "name": "describe94",
    "testId": 94,
    "memberof": "test/PersistenceManager.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94",
    "access": null,
    "description": "PersistenceManager",
    "lineNumber": 8
  },
  {
    "__docId__": 219,
    "kind": "testDescribe",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/PersistenceManager.spec.js~describe94",
    "testDepth": 1,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe95",
    "access": null,
    "description": "set",
    "lineNumber": 11
  },
  {
    "__docId__": 220,
    "kind": "testIt",
    "name": "it96",
    "testId": 96,
    "memberof": "test/PersistenceManager.spec.js~describe94.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe95.it96",
    "access": null,
    "description": "should set the value for a given key-version tuple",
    "lineNumber": 12
  },
  {
    "__docId__": 221,
    "kind": "testDescribe",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/PersistenceManager.spec.js~describe94",
    "testDepth": 1,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe97",
    "access": null,
    "description": "get",
    "lineNumber": 19
  },
  {
    "__docId__": 222,
    "kind": "testIt",
    "name": "it98",
    "testId": 98,
    "memberof": "test/PersistenceManager.spec.js~describe94.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe97.it98",
    "access": null,
    "description": "should get the value for a given key",
    "lineNumber": 20
  },
  {
    "__docId__": 223,
    "kind": "testDescribe",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/PersistenceManager.spec.js~describe94",
    "testDepth": 1,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe99",
    "access": null,
    "description": "getVersion",
    "lineNumber": 27
  },
  {
    "__docId__": 224,
    "kind": "testIt",
    "name": "it100",
    "testId": 100,
    "memberof": "test/PersistenceManager.spec.js~describe94.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe99.it100",
    "access": null,
    "description": "should get the value version for a given key",
    "lineNumber": 28
  },
  {
    "__docId__": 225,
    "kind": "testDescribe",
    "name": "describe101",
    "testId": 101,
    "memberof": "test/PersistenceManager.spec.js~describe94",
    "testDepth": 1,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe101",
    "access": null,
    "description": "delete",
    "lineNumber": 35
  },
  {
    "__docId__": 226,
    "kind": "testIt",
    "name": "it102",
    "testId": 102,
    "memberof": "test/PersistenceManager.spec.js~describe94.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/PersistenceManager.spec.js~describe94.describe101.it102",
    "access": null,
    "description": "should remove a value from PersistenceManager for a given key",
    "lineNumber": 36
  },
  {
    "__docId__": 227,
    "kind": "testFile",
    "name": "test/Pipeline.spec.js",
    "content": "import chai from 'chai';\r\nimport Pipeline from '../src/bus/Pipeline';\r\n\r\nlet expect = chai.expect;\r\n\r\ndescribe('Pipeline', function() {\r\n  it('fail detected', function() {\r\n    var errorResult = 'none';\r\n    var msgResult;\r\n\r\n    let pipeline = new Pipeline((error) => {\r\n      errorResult = error;\r\n    });\r\n\r\n    pipeline.handlers = [\r\n      function(ctx) {\r\n        ctx.msg.value++;\r\n        msgResult = ctx.msg;\r\n        ctx.fail('error-msg');\r\n      },\r\n\r\n      function(ctx) {\r\n        ctx.msg.value++;\r\n        ctx.next();\r\n      }\r\n    ];\r\n\r\n    pipeline.process({id: 1, value: 0}, (msg) => {\r\n      msg.result = 'OK';\r\n      msgResult = msg;\r\n    });\r\n\r\n    expect({id: 1, value: 1}).to.eql(msgResult);\r\n    expect('error-msg').to.eql(errorResult);\r\n  });\r\n\r\n  it('deliver detected', function() {\r\n    var errorResult = 'none';\r\n    var msgResult;\r\n\r\n    let pipeline = new Pipeline((error) => {\r\n      errorResult = error;\r\n    });\r\n\r\n    pipeline.handlers = [\r\n      function(ctx) {\r\n        ctx.msg.value++;\r\n        ctx.deliver();\r\n      },\r\n\r\n      function(ctx) {\r\n        ctx.msg.value++;\r\n        ctx.next();\r\n      }\r\n    ];\r\n\r\n    pipeline.process({id: 1, value: 0}, (msg) => {\r\n      msg.result = 'OK';\r\n      msgResult = msg;\r\n    });\r\n\r\n    expect({id: 1, value: 1, result: 'OK'}).to.eql(msgResult);\r\n    expect('none').to.eql(errorResult);\r\n  });\r\n\r\n  it('sequence processor', function() {\r\n    var errorResult = 'none';\r\n    var msgResult;\r\n\r\n    let pipeline = new Pipeline((error) => {\r\n      errorResult = error;\r\n    });\r\n\r\n    pipeline.handlers = [\r\n      function(ctx) {\r\n        ctx.msg.value++;\r\n        ctx.next();\r\n      },\r\n\r\n      function(ctx) {\r\n        ctx.msg.value++;\r\n        ctx.next();\r\n      }\r\n    ];\r\n\r\n    pipeline.process({id: 1, value: 0}, (msg) => {\r\n      msg.result = 'OK';\r\n      msgResult = msg;\r\n    });\r\n\r\n    expect({id: 1, value: 2, result: 'OK'}).to.eql(msgResult);\r\n    expect('none').to.eql(errorResult);\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/Pipeline.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "testDescribe",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/Pipeline.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/Pipeline.spec.js~describe103",
    "access": null,
    "description": "Pipeline",
    "lineNumber": 6
  },
  {
    "__docId__": 229,
    "kind": "testIt",
    "name": "it104",
    "testId": 104,
    "memberof": "test/Pipeline.spec.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/Pipeline.spec.js~describe103.it104",
    "access": null,
    "description": "fail detected",
    "lineNumber": 7
  },
  {
    "__docId__": 230,
    "kind": "testIt",
    "name": "it105",
    "testId": 105,
    "memberof": "test/Pipeline.spec.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/Pipeline.spec.js~describe103.it105",
    "access": null,
    "description": "deliver detected",
    "lineNumber": 37
  },
  {
    "__docId__": 231,
    "kind": "testIt",
    "name": "it106",
    "testId": 106,
    "memberof": "test/Pipeline.spec.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/Pipeline.spec.js~describe103.it106",
    "access": null,
    "description": "sequence processor",
    "lineNumber": 66
  },
  {
    "__docId__": 232,
    "kind": "testFile",
    "name": "test/PolicyEngine.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\nchai.use(chaiAsPromised);\r\n\r\nimport AdvancedCondition from '../src/policy/conditions/AdvancedCondition';\r\nimport AllowOverrides from '../src/policy/combiningAlgorithms/AllowOverrides';\r\nimport Condition from '../src/policy/conditions/Condition';\r\nimport PEP from '../src/policy/PEP';\r\nimport Rule from '../src/policy/Rule';\r\nimport RuntimeCoreCtx from '../src/policy/context/RuntimeCoreCtx';\r\nimport Policy from '../src/policy/Policy';\r\nimport SubscriptionCondition from '../src/policy/conditions/SubscriptionCondition';\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\n\r\n/********** CONDITIONS **********/\r\nlet simpleCondition = new Condition('source', 'equals', 'user1@domain1');\r\nlet andCondition = new AdvancedCondition(['and', new Condition('source', 'equals', 'user1@domain1'), new Condition('domain', 'equals', 'domain1')]);\r\nlet orCondition = new AdvancedCondition(['or', new Condition('source', 'equals', 'user1@domain1'), new Condition('domain', 'equals', 'domain1')]);\r\nlet notCondition = new AdvancedCondition(['not', new Condition('source', 'equals', 'user2@domain2')]);\r\nlet andNotCondition = new AdvancedCondition(['and', new Condition('source', 'equals', 'user1@domain1'), ['not', new Condition('domain', 'equals', 'domain1')]]);\r\nlet orNotCondition = new AdvancedCondition(['or', ['not', new Condition('domain', 'equals', 'domain1')], new Condition('source', 'equals', 'user1@domain1')]);\r\n\r\n/********** RULES **********/\r\nlet simpleRule = new Rule(false, simpleCondition, 'global', 'global', 0);\r\nlet acceptAnySubscriptionRule = new Rule(true, new SubscriptionCondition('subscription', 'equals', '*'), 'global', 'global', 0);\r\nlet acceptPreAuthSubscriptionRule = new Rule(true, new SubscriptionCondition('subscription', 'in', 'preauthorised'), 'global', 'global', 0);\r\nlet blockAnySubscriptionRule = new Rule(false, new SubscriptionCondition('subscription', 'equals', '*'), 'global', 'global', 0);\r\nlet blockPreAuthSubscriptionRule = new Rule(false, new AdvancedCondition(['not', new SubscriptionCondition('subscription', 'in', 'preauthorised')]), 'global', 'global', 0);\r\nlet schemeRule = new Rule(false, new Condition('scheme', 'equals', 'comm'), 'global', 'global', 0);\r\nlet dateRule = new Rule(false, new Condition('date', 'equals', '01/01/2016'), 'global', 'global', 0);\r\nlet domainRule = new Rule(false, new Condition('domain', 'equals', 'blockedDomain'), 'global', 'global', 0);\r\nlet sourceRule = new Rule(false, new Condition('source', 'equals', 'user@blockedDomain'), 'global', 'global', 0);\r\nlet sourceRuleForConn = new Rule(false, new Condition('source', 'equals', 'user@blockedDomain'), 'hyperty', 'Connector', 0);\r\nlet sourceRuleForUser1 = new Rule(false, new Condition('source', 'equals', 'user@blockedDomain'), 'identity', 'user1@work,', 0);\r\n\r\n/********** POLICIES **********/\r\nlet sourcePolicy = new Policy('HypertyChat', [simpleRule], [], 'allowOverrides');\r\n\r\n/********** MESSAGES **********/\r\nlet messageFromChat = { body: { identity: { userProfile: { username: 'user@blockedDomain' } } }, id: 1, type: 'subscribe', from: 'hyperty://domain/hyperty-123', to: 'hyperty://domain/hyperty-456' };\r\n\r\nlet messageFromConn = { body: { identity: { userProfile: { username: 'user@blockedDomain' } } }, id: 1, type: 'subscribe', from: 'hyperty://domain/hyperty-012', to: 'hyperty://domain/hyperty-789' };\r\n\r\nlet messageFromUser1 = { body: { identity: { userProfile: { username: 'user1@domain1' } } }, id: 1, type: 'subscribe', from: 'scheme://domain/data-object-instance', to: 'comm://domain/data-object-instance' };\r\n\r\nlet messageFromUser2 = { body: { identity: { userProfile: { username: 'user2@domain2' } } }, id: 1, type: 'subscribe', from: 'scheme://domain/data-object-instance', to: 'comm://domain/data-object-instance' };\r\n\r\nlet noIdMessage = { from: 'hyperty://domain/hyperty-url', id: 1, to: 'comm://domain/hyperty-instance', type: 'subscribe' };\r\n\r\nlet message = { body: { auth: false, identity: { userProfile: { username: 'user@domain' } } }, from: 'hyperty://domain/hyperty-url', id: 1, to: 'comm://domain/hyperty-instance', type: 'subscribe' };\r\n\r\nlet messageFromBlocked = { body: { identity: { userProfile: { username: 'user@blockedDomain' } } }, id: 1, type: 'subscribe', from: 'comm://domain/data-object-instance', to: 'comm://domain/hyperty-instance' };\r\n\r\nlet subscribeMessage = { body: { identity: { userProfile: { username: 'user@domain' } }, subscriber: 'hyperty://domain/hyperty-instance' }, id: 1, type: 'subscribe', from: 'runtime://localhost/7600/sm', to: 'comm://domain/data-object-url/subscription' };\r\n\r\nlet allowedSubscribeMessage = { body: { auth: true, identity: { userProfile: { username: 'user@domain' } }, subscriber: 'hyperty://domain/hyperty-instance' }, id: 1, type: 'subscribe', from: 'runtime://localhost/7600/sm', to: 'comm://domain/data-object-url/subscription' };\r\n\r\nlet badSubscribeMessage = { body: { identity: { userProfile: { username: 'user@domain' } }, subscriber: 'hyperty://domain/not-preauthorised-hyperty-instance' }, id: 1, type: 'subscribe', from: 'runtime://localhost/7600/sm', to: 'comm://domain/data-object-url/subscription' };\r\n\r\n/********** TESTS **********/\r\nlet runtimeCapabilities = {\r\n  isAvailable: () => {\r\n    return new Promise((resolve) => {\r\n      resolve(false);\r\n    });\r\n  }\r\n};\r\n\r\nlet runtimeCtx = new RuntimeCoreCtx();\r\n\r\ndescribe('Policies management', () => {\r\n  describe('conditions management', () => {\r\n    it('creates a simple condition', () => {\r\n      expect(simpleCondition.attribute).to.be.eql('source');\r\n      expect(simpleCondition.operator).to.be.eql('equals');\r\n      expect(simpleCondition.params).to.be.eql('user1@domain1');\r\n    });\r\n    it('returns condition is applicable', () => {\r\n      expect(simpleCondition.isApplicable(runtimeCtx, messageFromUser1)).to.be.eql(true);\r\n    });\r\n    it('returns condition is not applicable', () => {\r\n      expect(simpleCondition.isApplicable(runtimeCtx, messageFromUser2)).to.be.eql(false);\r\n    });\r\n\r\n    it('creates an advanced condition - \"and\"', () => {\r\n      expect(andCondition.condition).to.be.eql(['and', new Condition('source', 'equals', 'user1@domain1'), new Condition('domain', 'equals', 'domain1')]);\r\n      expect(andCondition.condition[0]).to.be.eql('and');\r\n      expect(andCondition.condition[1]).to.be.eql(new Condition('source', 'equals', 'user1@domain1'));\r\n      expect(andCondition.condition[2]).to.be.eql(new Condition('domain', 'equals', 'domain1'));\r\n    });\r\n\r\n    it('correctly returns \"and\" condition is applicable', () => {\r\n      expect(andCondition.isApplicable(runtimeCtx, messageFromUser1)).to.be.eql(true);\r\n    });\r\n\r\n    it('correctly returns \"and\" condition is not applicable', () => {\r\n      expect(andCondition.isApplicable(runtimeCtx, messageFromUser2)).to.be.eql(false);\r\n    });\r\n\r\n    it('creates an advanced condition - \"or\"', () => {\r\n      expect(orCondition.condition).to.be.eql(['or', new Condition('source', 'equals', 'user1@domain1'), new Condition('domain', 'equals', 'domain1')]);\r\n    });\r\n\r\n    it('correctly returns \"or\" condition is applicable', () => {\r\n      expect(orCondition.isApplicable(runtimeCtx, messageFromUser1)).to.be.eql(true);\r\n    });\r\n\r\n    it('correctly returns \"or\" condition is not applicable', () => {\r\n      expect(orCondition.isApplicable(runtimeCtx, messageFromUser2)).to.be.eql(false);\r\n    });\r\n\r\n    it('creates an advanced condition - \"not\"', () => {\r\n      expect(notCondition.condition).to.be.eql(['not', new Condition('source', 'equals', 'user2@domain2')]);\r\n    });\r\n\r\n    it('correctly returns \"not\" condition is applicable', () => {\r\n      expect(notCondition.isApplicable(runtimeCtx, messageFromUser1)).to.be.eql(true);\r\n    });\r\n\r\n    it('correctly returns \"not\" condition is not applicable', () => {\r\n      expect(notCondition.isApplicable(runtimeCtx, messageFromUser2)).to.be.eql(false);\r\n    });\r\n\r\n    it('correctly returns \"and not\" condition is not applicable', () => {\r\n      expect(andNotCondition.isApplicable(runtimeCtx, messageFromUser1)).to.be.eql(false);\r\n    });\r\n\r\n    it('correctly returns \"or not\" condition is applicable', () => {\r\n      expect(orNotCondition.isApplicable(runtimeCtx, messageFromUser1)).to.be.eql(true);\r\n    });\r\n  });\r\n\r\n  describe('rules management', () => {\r\n    it('creates a simple rule', () => {\r\n      expect(simpleRule.decision).to.be.eql(false);\r\n      expect(simpleRule.condition).to.be.eql(simpleCondition);\r\n      expect(simpleRule.scope).to.be.eql('global');\r\n      expect(simpleRule.target).to.be.eql('global');\r\n    });\r\n    it('evaluates a simple rule to false', () => {\r\n      expect(simpleRule.evaluate(runtimeCtx, messageFromUser1)).to.be.eql(false);\r\n    });\r\n    it('evaluates a simple rule to \"Not Applicable\"', () => {\r\n      expect(simpleRule.evaluate(runtimeCtx, messageFromUser2)).to.be.eql('Not Applicable');\r\n    });\r\n  });\r\n\r\n  describe('policies management', () => {\r\n    it('creates a service provider policy', () => {\r\n      expect(sourcePolicy.key).to.be.eql('HypertyChat');\r\n      expect(sourcePolicy.combiningAlgorithm).to.be.eql(new AllowOverrides());\r\n      expect(sourcePolicy.rules).to.be.eql([simpleRule]);\r\n    });\r\n    it('evaluates a service provider policy to false', () => {\r\n      expect(sourcePolicy.evaluateRules(runtimeCtx, messageFromUser1)).to.be.eql(false);\r\n    });\r\n    it('evaluates a service provider policy to \"Not Applicable\"', () => {\r\n      expect(sourcePolicy.evaluateRules(runtimeCtx, messageFromUser2)).to.be.eql('Not Applicable');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Policy Engine with Runtime Core context', () => {\r\n  let runtimeRegistry = {\r\n    isInterworkingProtoStub: () => {\r\n      return false;\r\n    },\r\n    isLocal: () => {\r\n      return true;\r\n    },\r\n    getPreAuthSubscribers: () => {\r\n      return ['hyperty://domain/hyperty-instance'];\r\n    },\r\n    getHypertyName: (hypertyURL) => {\r\n      if (hypertyURL === 'hyperty://domain/hyperty-123') {\r\n        return 'HypertyChat';\r\n      }\r\n      if (hypertyURL === 'hyperty://domain/hyperty-789') {\r\n        return 'Connector';\r\n      }\r\n    },\r\n    getHypertyOwner: () => {\r\n      return 'user://work/user2';\r\n    },\r\n    getReporterURLSynchonous: () => {\r\n      return 'hyperty://domain/hyperty-url';\r\n    },\r\n    getUserEmailFromURL: () => {\r\n      return 'user2@work';\r\n    },\r\n    isDataObjectURL: (dataObjectURL) => {\r\n      let splitURL = dataObjectURL.split('://');\r\n      return splitURL[0] === 'comm';\r\n    },\r\n    registerSubscribedDataObject: () => {},\r\n    registerSubscriber: () => {},\r\n    runtimeURL: 'runtime://localhost/7601'\r\n  };\r\n\r\n  let identityModule = {\r\n    decryptMessage: (message) => {\r\n      return new Promise((resolve) => {\r\n        resolve(message);\r\n      });\r\n    },\r\n    doMutualAuthentication: (message) => {\r\n      return new Promise((resolve) => {\r\n        resolve(message);\r\n      });\r\n    },\r\n    encryptMessage: (message) => {\r\n      return new Promise((resolve) => {\r\n        resolve(message);\r\n      });\r\n    },\r\n    getIdentity: () => {\r\n      return new Promise((resolve) => {\r\n        resolve({ userProfile: {username: 'user@domain' } });\r\n      });\r\n    },\r\n    getToken: () => {\r\n      return new Promise((resolve) => {\r\n        resolve({ userProfile: {username: 'user@domain' } });\r\n      });\r\n    },\r\n    _getHypertyFromDataObject: (dataObjectURL) => {\r\n      return new Promise((resolve) => {\r\n        if (dataObjectURL === 'comm://domain/data-object-url') {\r\n          resolve('hyperty://domain/hyperty-url');\r\n        }\r\n      });\r\n    }\r\n  };\r\n  let storageManager = runtimeFactory.storageManager();\r\n  let policyEngine = new PEP(new RuntimeCoreCtx(identityModule, runtimeRegistry, storageManager, runtimeCapabilities));\r\n\r\n  describe('initial filtering', () => {\r\n    it('message that loads an hyperty should not be validated by policies', () => {\r\n      let loadMessage = { id: 2, from: 'hyperty-runtime://sandbox/external', to: 'hyperty-runtime://sandbox/internal', type: 'create' };\r\n      expect(policyEngine._isToVerify(loadMessage)).to.be.eql(false);\r\n    });\r\n\r\n    /*it('message of the \"update\" type must have the data object\\'s reporter as source', (done) => {\r\n      let updateMessage = { body: { source: 'hyperty://domain/hyperty-url', identity: 'identityToken' }, from: 'comm://domain/data-object-url', id: 3, to: 'comm://domain/data-object-url/changes', type: 'update' };\r\n      expect(policyEngine.authorise(updateMessage).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(updateMessage).and.notify(done);\r\n\r\n      let badUpdateMessage = { body: { source: 'hyperty://domain/hyperty-url2', identity: 'identityToken' }, from: 'comm://domain/data-object-url', id: 3, to: 'comm://domain/data-object-url/changes', type: 'update' };\r\n      expect(policyEngine.authorise(badUpdateMessage).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });*/\r\n  });\r\n\r\n  describe('identity obtention', () => {\r\n    it('should add an identity in the message body', (done) => {\r\n      expect(policyEngine.authorise(noIdMessage).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(message).and.notify(done);\r\n    });\r\n\r\n    it('should maintain the identity in the message body', (done) => {\r\n      expect(policyEngine.authorise(message).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(message).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('policies management', () => {\r\n    policyEngine.removePolicy('*');\r\n\r\n    it('adds a service provider policy to the engine', () => {\r\n      policyEngine.context.activeUserPolicy = undefined;\r\n      policyEngine.addPolicy('SERVICE_PROVIDER', 'HypertyChat', sourcePolicy);\r\n      console.log('policyEngine.context.serviceProviderPolicy');\r\n      console.log(policyEngine.context.serviceProviderPolicy);\r\n      expect(policyEngine.context.serviceProviderPolicy).to.be.eql({HypertyChat: new Policy('HypertyChat', [simpleRule], [])});\r\n      expect(policyEngine.context.serviceProviderPolicy.HypertyChat).to.be.eql(new Policy('HypertyChat', [simpleRule], []));\r\n      expect(policyEngine.context.serviceProviderPolicy.HypertyChat.actions).to.be.eql([]);\r\n      expect(policyEngine.context.serviceProviderPolicy.HypertyChat.rules).to.be.eql([simpleRule]);\r\n    });\r\n\r\n    it('adds a user policy to the engine', () => {\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [dateRule], []));\r\n      expect(policyEngine.context.userPolicies).to.be.eql({'My policy': new Policy('My policy', [dateRule], [])});\r\n      expect(policyEngine.context.userPolicies['My policy']).to.be.eql(new Policy('My policy', [dateRule], []));\r\n      expect(policyEngine.context.userPolicies['My policy'].actions).to.be.eql([]);\r\n      expect(policyEngine.context.userPolicies['My policy'].rules).to.be.eql([dateRule]);\r\n    });\r\n\r\n    it('adds a second user policy to the engine', () => {\r\n      policyEngine.addPolicy('USER', 'My second policy', new Policy('My second policy', [simpleRule], []));\r\n      expect(policyEngine.context.userPolicies).to.be.eql({'My policy': new Policy('My policy', [dateRule], []), 'My second policy': new Policy('My second policy', [simpleRule], [])});\r\n      expect(policyEngine.context.serviceProviderPolicy).to.be.eql({HypertyChat: new Policy('HypertyChat', [simpleRule], [])});\r\n      expect(policyEngine.context.activeUserPolicy).to.be.eql(undefined);\r\n    });\r\n\r\n    it('removes an existing user policy', () => {\r\n      policyEngine.removePolicy('USER', 'My policy');\r\n      expect(policyEngine.context.serviceProviderPolicy).to.be.eql({HypertyChat: new Policy('HypertyChat', [simpleRule], [])});\r\n      expect(policyEngine.context.userPolicies).to.be.eql({'My second policy': new Policy('My second policy', [simpleRule], [])});\r\n      expect(policyEngine.context.activeUserPolicy).to.be.eql(undefined);\r\n    });\r\n\r\n    it('tries to remove a policy that does not exist', () => {\r\n      policyEngine.removePolicy('USER', 'Vacations');\r\n      expect(policyEngine.context.serviceProviderPolicy).to.be.eql({HypertyChat: new Policy('HypertyChat', [simpleRule], [])});\r\n      expect(policyEngine.context.userPolicies).to.be.eql({'My second policy': new Policy('My second policy', [simpleRule], [])});\r\n      expect(policyEngine.context.activeUserPolicy).to.be.eql(undefined);\r\n    });\r\n\r\n    it('removes all policies', () => {\r\n      policyEngine.removePolicy('*');\r\n      expect(policyEngine.context.serviceProviderPolicy).to.be.eql({});\r\n      expect(policyEngine.context.userPolicies).to.be.eql({});\r\n      expect(policyEngine.context.activeUserPolicy).to.be.eql(undefined);\r\n    });\r\n\r\n    it('does not apply rules as it is not its target', (done) => {\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [sourceRuleForConn], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(messageFromChat).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(messageFromChat).and.notify(done);\r\n\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [sourceRuleForUser1], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(messageFromUser2).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(messageFromChat).and.notify(done);\r\n    });\r\n\r\n    it('applies a rule as it is its target', (done) => {\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [sourceRuleForConn], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(messageFromConn).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('functionality: scheme', () => {\r\n    it('rejects the message as it is from a blocked scheme', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [schemeRule], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(messageFromBlocked).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });\r\n\r\n    it('allows the message as it comes from a scheme that is not blocked', (done) => {\r\n      expect(policyEngine.authorise(message).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(message).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('functionality: source', () => {\r\n    let sourceRule2 = new Rule(false, new Condition('source', 'in', ['user@blockedDomain']));\r\n    it('rejects the message as it comes from a blocked source', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [sourceRule2], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(messageFromBlocked).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });\r\n\r\n    it('rejects the message as it comes from a blocked source', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [sourceRule], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(messageFromBlocked).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });\r\n\r\n    it('allows the message as it comes from a source that is not blocked', (done) => {\r\n      expect(policyEngine.authorise(message).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(message).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('functionality: domain', () => {\r\n    it('rejects the message as it comes from a blocked domain', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [domainRule], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(messageFromBlocked).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });\r\n\r\n    it('allows the message as it comes from a domain that is not blocked', (done) => {\r\n      expect(policyEngine.authorise(message).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(message).and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('data objects management', () => {\r\n    it('rejects a subscription attempt, as the policy rejects all', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [blockAnySubscriptionRule], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(subscribeMessage).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });\r\n\r\n    it('accepts a subscription attempt, as the policy accepts all', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [acceptAnySubscriptionRule], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(subscribeMessage).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(allowedSubscribeMessage).and.notify(done);\r\n    });\r\n\r\n    it('accepts a subscription attempt, as the policy accepts preauthorised subscribers and is preauthorised', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [acceptPreAuthSubscriptionRule], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(subscribeMessage).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.fulfilled.and.eventually.eql(allowedSubscribeMessage).and.notify(done);\r\n    });\r\n\r\n    it('rejects a subscription attempt, as the policy rejects non-preauthorised subscriber and is not preauthorised', (done) => {\r\n      policyEngine.removePolicy('*');\r\n      policyEngine.addPolicy('USER', 'My policy', new Policy('My policy', [blockPreAuthSubscriptionRule], []));\r\n      policyEngine.context.activeUserPolicy = 'My policy';\r\n      expect(policyEngine.authorise(badSubscribeMessage).then((message) => {\r\n        return message;\r\n      }), (error) => {\r\n        return error;\r\n      }).to.be.rejected.and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('groups management', () => {\r\n    let groups = policyEngine.context.groups;\r\n    for (let i in groups) {\r\n      policyEngine.context.deleteGroup(i);\r\n    }\r\n\r\n    it('creates a group', () => {\r\n      policyEngine.context.createGroup('groupA');\r\n      expect(policyEngine.context.getGroupsNames()).to.be.eql(['groupA']);\r\n    });\r\n\r\n    it('creates a second group', () => {\r\n      policyEngine.context.createGroup('groupB');\r\n      expect(policyEngine.context.getGroupsNames()).to.be.eql(['groupA', 'groupB']);\r\n    });\r\n\r\n    it('adds an email to a group', () => {\r\n      policyEngine.context.addToGroup('groupA', 'user1@domain');\r\n      expect(policyEngine.context.getGroup('groupA')).to.be.eql(['user1@domain']);\r\n    });\r\n\r\n    it('adds a second email to a group', () => {\r\n      policyEngine.context.addToGroup('groupA', 'user2@domain');\r\n      expect(policyEngine.context.getGroup('groupA')).to.be.eql(['user1@domain', 'user2@domain']);\r\n    });\r\n\r\n    it('removes a user from a group', () => {\r\n      policyEngine.context.removeFromGroup('groupA', 'user1@domain');\r\n      expect(policyEngine.context.getGroup('groupA')).to.be.eql(['user2@domain']);\r\n    });\r\n\r\n    it('deletes a group', () => {\r\n      policyEngine.context.deleteGroup('groupA');\r\n      expect(policyEngine.context.getGroup('groupA')).to.be.eql([]);\r\n      expect(policyEngine.context.getGroupsNames()).to.be.eql(['groupB']);\r\n    });\r\n  });\r\n  policyEngine.removePolicy('*');\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/PolicyEngine.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "testDescribe",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/PolicyEngine.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107",
    "access": null,
    "description": "Policies management",
    "lineNumber": 75
  },
  {
    "__docId__": 234,
    "kind": "testDescribe",
    "name": "describe108",
    "testId": 108,
    "memberof": "test/PolicyEngine.spec.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108",
    "access": null,
    "description": "conditions management",
    "lineNumber": 76
  },
  {
    "__docId__": 235,
    "kind": "testIt",
    "name": "it109",
    "testId": 109,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it109",
    "access": null,
    "description": "creates a simple condition",
    "lineNumber": 77
  },
  {
    "__docId__": 236,
    "kind": "testIt",
    "name": "it110",
    "testId": 110,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it110",
    "access": null,
    "description": "returns condition is applicable",
    "lineNumber": 82
  },
  {
    "__docId__": 237,
    "kind": "testIt",
    "name": "it111",
    "testId": 111,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it111",
    "access": null,
    "description": "returns condition is not applicable",
    "lineNumber": 85
  },
  {
    "__docId__": 238,
    "kind": "testIt",
    "name": "it112",
    "testId": 112,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it112",
    "access": null,
    "description": "creates an advanced condition - \"and\"",
    "lineNumber": 89
  },
  {
    "__docId__": 239,
    "kind": "testIt",
    "name": "it113",
    "testId": 113,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it113",
    "access": null,
    "description": "correctly returns \"and\" condition is applicable",
    "lineNumber": 96
  },
  {
    "__docId__": 240,
    "kind": "testIt",
    "name": "it114",
    "testId": 114,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it114",
    "access": null,
    "description": "correctly returns \"and\" condition is not applicable",
    "lineNumber": 100
  },
  {
    "__docId__": 241,
    "kind": "testIt",
    "name": "it115",
    "testId": 115,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it115",
    "access": null,
    "description": "creates an advanced condition - \"or\"",
    "lineNumber": 104
  },
  {
    "__docId__": 242,
    "kind": "testIt",
    "name": "it116",
    "testId": 116,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it116",
    "access": null,
    "description": "correctly returns \"or\" condition is applicable",
    "lineNumber": 108
  },
  {
    "__docId__": 243,
    "kind": "testIt",
    "name": "it117",
    "testId": 117,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it117",
    "access": null,
    "description": "correctly returns \"or\" condition is not applicable",
    "lineNumber": 112
  },
  {
    "__docId__": 244,
    "kind": "testIt",
    "name": "it118",
    "testId": 118,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it118",
    "access": null,
    "description": "creates an advanced condition - \"not\"",
    "lineNumber": 116
  },
  {
    "__docId__": 245,
    "kind": "testIt",
    "name": "it119",
    "testId": 119,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it119",
    "access": null,
    "description": "correctly returns \"not\" condition is applicable",
    "lineNumber": 120
  },
  {
    "__docId__": 246,
    "kind": "testIt",
    "name": "it120",
    "testId": 120,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it120",
    "access": null,
    "description": "correctly returns \"not\" condition is not applicable",
    "lineNumber": 124
  },
  {
    "__docId__": 247,
    "kind": "testIt",
    "name": "it121",
    "testId": 121,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it121",
    "access": null,
    "description": "correctly returns \"and not\" condition is not applicable",
    "lineNumber": 128
  },
  {
    "__docId__": 248,
    "kind": "testIt",
    "name": "it122",
    "testId": 122,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe108.it122",
    "access": null,
    "description": "correctly returns \"or not\" condition is applicable",
    "lineNumber": 132
  },
  {
    "__docId__": 249,
    "kind": "testDescribe",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/PolicyEngine.spec.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe123",
    "access": null,
    "description": "rules management",
    "lineNumber": 137
  },
  {
    "__docId__": 250,
    "kind": "testIt",
    "name": "it124",
    "testId": 124,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe123.it124",
    "access": null,
    "description": "creates a simple rule",
    "lineNumber": 138
  },
  {
    "__docId__": 251,
    "kind": "testIt",
    "name": "it125",
    "testId": 125,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe123.it125",
    "access": null,
    "description": "evaluates a simple rule to false",
    "lineNumber": 144
  },
  {
    "__docId__": 252,
    "kind": "testIt",
    "name": "it126",
    "testId": 126,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe123.it126",
    "access": null,
    "description": "evaluates a simple rule to \"Not Applicable\"",
    "lineNumber": 147
  },
  {
    "__docId__": 253,
    "kind": "testDescribe",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/PolicyEngine.spec.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe127",
    "access": null,
    "description": "policies management",
    "lineNumber": 152
  },
  {
    "__docId__": 254,
    "kind": "testIt",
    "name": "it128",
    "testId": 128,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe127.it128",
    "access": null,
    "description": "creates a service provider policy",
    "lineNumber": 153
  },
  {
    "__docId__": 255,
    "kind": "testIt",
    "name": "it129",
    "testId": 129,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe127.it129",
    "access": null,
    "description": "evaluates a service provider policy to false",
    "lineNumber": 158
  },
  {
    "__docId__": 256,
    "kind": "testIt",
    "name": "it130",
    "testId": 130,
    "memberof": "test/PolicyEngine.spec.js~describe107.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe107.describe127.it130",
    "access": null,
    "description": "evaluates a service provider policy to \"Not Applicable\"",
    "lineNumber": 161
  },
  {
    "__docId__": 257,
    "kind": "testDescribe",
    "name": "describe131",
    "testId": 131,
    "memberof": "test/PolicyEngine.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131",
    "access": null,
    "description": "Policy Engine with Runtime Core context",
    "lineNumber": 167
  },
  {
    "__docId__": 258,
    "kind": "testDescribe",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe132",
    "access": null,
    "description": "initial filtering",
    "lineNumber": 241
  },
  {
    "__docId__": 259,
    "kind": "testIt",
    "name": "it133",
    "testId": 133,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe132.it133",
    "access": null,
    "description": "message that loads an hyperty should not be validated by policies",
    "lineNumber": 242
  },
  {
    "__docId__": 260,
    "kind": "testDescribe",
    "name": "describe134",
    "testId": 134,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe134",
    "access": null,
    "description": "identity obtention",
    "lineNumber": 264
  },
  {
    "__docId__": 261,
    "kind": "testIt",
    "name": "it135",
    "testId": 135,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe134.it135",
    "access": null,
    "description": "should add an identity in the message body",
    "lineNumber": 265
  },
  {
    "__docId__": 262,
    "kind": "testIt",
    "name": "it136",
    "testId": 136,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe134.it136",
    "access": null,
    "description": "should maintain the identity in the message body",
    "lineNumber": 273
  },
  {
    "__docId__": 263,
    "kind": "testDescribe",
    "name": "describe137",
    "testId": 137,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137",
    "access": null,
    "description": "policies management",
    "lineNumber": 282
  },
  {
    "__docId__": 264,
    "kind": "testIt",
    "name": "it138",
    "testId": 138,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it138",
    "access": null,
    "description": "adds a service provider policy to the engine",
    "lineNumber": 285
  },
  {
    "__docId__": 265,
    "kind": "testIt",
    "name": "it139",
    "testId": 139,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it139",
    "access": null,
    "description": "adds a user policy to the engine",
    "lineNumber": 296
  },
  {
    "__docId__": 266,
    "kind": "testIt",
    "name": "it140",
    "testId": 140,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it140",
    "access": null,
    "description": "adds a second user policy to the engine",
    "lineNumber": 304
  },
  {
    "__docId__": 267,
    "kind": "testIt",
    "name": "it141",
    "testId": 141,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it141",
    "access": null,
    "description": "removes an existing user policy",
    "lineNumber": 311
  },
  {
    "__docId__": 268,
    "kind": "testIt",
    "name": "it142",
    "testId": 142,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it142",
    "access": null,
    "description": "tries to remove a policy that does not exist",
    "lineNumber": 318
  },
  {
    "__docId__": 269,
    "kind": "testIt",
    "name": "it143",
    "testId": 143,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it143",
    "access": null,
    "description": "removes all policies",
    "lineNumber": 325
  },
  {
    "__docId__": 270,
    "kind": "testIt",
    "name": "it144",
    "testId": 144,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it144",
    "access": null,
    "description": "does not apply rules as it is not its target",
    "lineNumber": 332
  },
  {
    "__docId__": 271,
    "kind": "testIt",
    "name": "it145",
    "testId": 145,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe137.it145",
    "access": null,
    "description": "applies a rule as it is its target",
    "lineNumber": 351
  },
  {
    "__docId__": 272,
    "kind": "testDescribe",
    "name": "describe146",
    "testId": 146,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe146",
    "access": null,
    "description": "functionality: scheme",
    "lineNumber": 362
  },
  {
    "__docId__": 273,
    "kind": "testIt",
    "name": "it147",
    "testId": 147,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe146",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe146.it147",
    "access": null,
    "description": "rejects the message as it is from a blocked scheme",
    "lineNumber": 363
  },
  {
    "__docId__": 274,
    "kind": "testIt",
    "name": "it148",
    "testId": 148,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe146",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe146.it148",
    "access": null,
    "description": "allows the message as it comes from a scheme that is not blocked",
    "lineNumber": 374
  },
  {
    "__docId__": 275,
    "kind": "testDescribe",
    "name": "describe149",
    "testId": 149,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe149",
    "access": null,
    "description": "functionality: source",
    "lineNumber": 383
  },
  {
    "__docId__": 276,
    "kind": "testIt",
    "name": "it150",
    "testId": 150,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe149.it150",
    "access": null,
    "description": "rejects the message as it comes from a blocked source",
    "lineNumber": 385
  },
  {
    "__docId__": 277,
    "kind": "testIt",
    "name": "it151",
    "testId": 151,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe149.it151",
    "access": null,
    "description": "rejects the message as it comes from a blocked source",
    "lineNumber": 396
  },
  {
    "__docId__": 278,
    "kind": "testIt",
    "name": "it152",
    "testId": 152,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe149.it152",
    "access": null,
    "description": "allows the message as it comes from a source that is not blocked",
    "lineNumber": 407
  },
  {
    "__docId__": 279,
    "kind": "testDescribe",
    "name": "describe153",
    "testId": 153,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe153",
    "access": null,
    "description": "functionality: domain",
    "lineNumber": 416
  },
  {
    "__docId__": 280,
    "kind": "testIt",
    "name": "it154",
    "testId": 154,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe153.it154",
    "access": null,
    "description": "rejects the message as it comes from a blocked domain",
    "lineNumber": 417
  },
  {
    "__docId__": 281,
    "kind": "testIt",
    "name": "it155",
    "testId": 155,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe153.it155",
    "access": null,
    "description": "allows the message as it comes from a domain that is not blocked",
    "lineNumber": 428
  },
  {
    "__docId__": 282,
    "kind": "testDescribe",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe156",
    "access": null,
    "description": "data objects management",
    "lineNumber": 437
  },
  {
    "__docId__": 283,
    "kind": "testIt",
    "name": "it157",
    "testId": 157,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe156.it157",
    "access": null,
    "description": "rejects a subscription attempt, as the policy rejects all",
    "lineNumber": 438
  },
  {
    "__docId__": 284,
    "kind": "testIt",
    "name": "it158",
    "testId": 158,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe156.it158",
    "access": null,
    "description": "accepts a subscription attempt, as the policy accepts all",
    "lineNumber": 449
  },
  {
    "__docId__": 285,
    "kind": "testIt",
    "name": "it159",
    "testId": 159,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe156.it159",
    "access": null,
    "description": "accepts a subscription attempt, as the policy accepts preauthorised subscribers and is preauthorised",
    "lineNumber": 460
  },
  {
    "__docId__": 286,
    "kind": "testIt",
    "name": "it160",
    "testId": 160,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe156.it160",
    "access": null,
    "description": "rejects a subscription attempt, as the policy rejects non-preauthorised subscriber and is not preauthorised",
    "lineNumber": 471
  },
  {
    "__docId__": 287,
    "kind": "testDescribe",
    "name": "describe161",
    "testId": 161,
    "memberof": "test/PolicyEngine.spec.js~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe161",
    "access": null,
    "description": "groups management",
    "lineNumber": 483
  },
  {
    "__docId__": 288,
    "kind": "testIt",
    "name": "it162",
    "testId": 162,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe161.it162",
    "access": null,
    "description": "creates a group",
    "lineNumber": 489
  },
  {
    "__docId__": 289,
    "kind": "testIt",
    "name": "it163",
    "testId": 163,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe161.it163",
    "access": null,
    "description": "creates a second group",
    "lineNumber": 494
  },
  {
    "__docId__": 290,
    "kind": "testIt",
    "name": "it164",
    "testId": 164,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe161.it164",
    "access": null,
    "description": "adds an email to a group",
    "lineNumber": 499
  },
  {
    "__docId__": 291,
    "kind": "testIt",
    "name": "it165",
    "testId": 165,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe161.it165",
    "access": null,
    "description": "adds a second email to a group",
    "lineNumber": 504
  },
  {
    "__docId__": 292,
    "kind": "testIt",
    "name": "it166",
    "testId": 166,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe161.it166",
    "access": null,
    "description": "removes a user from a group",
    "lineNumber": 509
  },
  {
    "__docId__": 293,
    "kind": "testIt",
    "name": "it167",
    "testId": 167,
    "memberof": "test/PolicyEngine.spec.js~describe131.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/PolicyEngine.spec.js~describe131.describe161.it167",
    "access": null,
    "description": "deletes a group",
    "lineNumber": 514
  },
  {
    "__docId__": 294,
    "kind": "testFile",
    "name": "test/Registry.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport sinonChai from 'sinon-chai';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\n\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\n// Main dependecies\r\nimport Registry from '../src/registry/Registry';\r\nimport Sandbox from '../src/sandbox/Sandbox';\r\nimport MessageBus from '../src/bus/MessageBus';\r\nimport Loader from '../src/runtime/Loader';\r\nimport Descriptors from '../src/runtime/Descriptors';\r\nimport { descriptors } from './resources/descriptors';\r\nimport {divideURL} from '../src/utils/utils';\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\n\r\nimport AddressAllocation from '../src/allocation/AddressAllocation';\r\n\r\n// Testing Registry\r\nlet runtimeURL = 'hyperty-runtime://ua.pt/123';\r\n\r\nlet sandboxDummyCapabilities = {browser: true};\r\nlet storageManager = runtimeFactory.storageManager();\r\nlet appSandbox = runtimeFactory.createAppSandbox();\r\n\r\n// let sandboxDummy = {sandbox: 'sandbox', type: 'normal', capabilities: sandboxDummyCapabilities};\r\nlet protostubURL;\r\nlet sandboxDummy = new Sandbox(sandboxDummyCapabilities);\r\nsandboxDummy.type = 'normal';\r\n\r\nconsole.log('App:', appSandbox);\r\nconsole.log('Work:', sandboxDummy);\r\n\r\n//registry = new Registry(msgbus, runtimeURL, appSandbox);\r\ndescribe('Registry', function() {\r\n\r\n  let registry;\r\n\r\n  before(() => {\r\n    let identityModule = {\r\n      getIdentityAssertion: () => {\r\n        let identityBundle = {userProfile: {email: 'openidtest10@gmail.com', token: 'idToken', userURL: 'user://gmail.com/openidtest10'}};\r\n        return new Promise(function(resolve) {\r\n          resolve(identityBundle);\r\n        });\r\n      }\r\n    };\r\n\r\n    let runtimeCatalogue = {\r\n      getDataSchemaDescriptor: () => {\r\n        return new Promise(function(resolve) {\r\n          let dataschema = {sourcePackage: {sourceCode: {properties: {scheme: {constant: 'value'}}}}};\r\n          resolve(dataschema);\r\n        });\r\n      }\r\n\r\n      /*getIdpProxyDescriptor: () => {\r\n        return new Promise(function(resolve) {\r\n          let idpproxy = {sourcePackage: {sourceCode: {properties: {scheme: {constant: 'value'}}}}, interworking: true};\r\n          resolve(idpproxy);\r\n        });\r\n      }*/\r\n    };\r\n\r\n\r\n//    sandboxDummy.sandbox = sandbox;\r\n\r\n    let msgbus = new MessageBus(registry);\r\n\r\n    new AddressAllocation(runtimeURL, msgbus);\r\n\r\n    registry = new Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, 'runtimeCapabilities', storageManager);\r\n\r\n    // Prepare the on instance to handle with the fallbacks and runtimeCatalogue;\r\n    let descriptorInstance = new Descriptors(runtimeURL, runtimeCatalogue, {});\r\n\r\n    // Prepare the loader to load the hyperties, protostubs and idpproxy;\r\n    let loader = new Loader(runtimeURL, {}, descriptorInstance);\r\n    loader.runtimeURL = runtimeURL;\r\n    loader.runtimeCatalogue = runtimeCatalogue;\r\n    loader.registry = registry;\r\n    loader.runtimeFactory = runtimeFactory;\r\n\r\n    loader.messageBus = msgbus;\r\n\r\n    registry._runtimeURL = runtimeURL;\r\n    registry._loader = loader;\r\n    registry.messageBus = msgbus;\r\n\r\n    // to emulate registrations\r\n\r\n    registry.messageBus.addListener('domain://registry.ua.pt/', (msg) => {\r\n      console.log('MSG BUS LISTENER for Domain Registry: ', msg);\r\n      let responseMessage = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: {code: 200}};\r\n\r\n      msgbus.postMessage(responseMessage);\r\n    });\r\n\r\n    // to emulate MN subscriptions\r\n\r\n    registry.messageBus.addListener('domain://msg-node.ua.pt/sm', (msg) => {\r\n      console.log('MSG BUS LISTENER for MN Subscription Manager: ', msg);\r\n      let responseMessage = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: {code: 200}};\r\n\r\n      msgbus.postMessage(responseMessage);\r\n    });\r\n\r\n    let getDescriptor = (url) => {\r\n\r\n      return new Promise(function(resolve, reject) {\r\n\r\n        let dividedURL = divideURL(url);\r\n        let identity = dividedURL.identity;\r\n\r\n        if (!identity) {\r\n          identity = 'default';\r\n        } else {\r\n          identity = identity.substring(identity.lastIndexOf('/') + 1);\r\n        }\r\n\r\n        let result;\r\n\r\n        if (url.includes('hyperty')) {\r\n          try {\r\n            result = descriptors.Hyperties[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n\r\n        } else if (url.includes('protocolstub') || url === dividedURL.domain) {\r\n          try {\r\n            result = descriptors.ProtoStubs[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        } else if (url.includes('idp-proxy')) {\r\n          try {\r\n            result = descriptors.IdpProxies[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        } else if (url.includes('dataschema')) {\r\n          try {\r\n            result = descriptors.DataSchemas[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        }\r\n        resolve(result);\r\n      });\r\n    };\r\n\r\n    console.log('registry ', descriptorInstance);\r\n    sinon.stub(descriptorInstance, 'getHypertyDescriptor', (hypertyURL) => {\r\n      return getDescriptor(hypertyURL);\r\n    });\r\n\r\n    sinon.stub(descriptorInstance, 'getStubDescriptor', (stubURL) => {\r\n      //console.log('get descriptor for:', stubURL);\r\n      return getDescriptor('https://catalogue.ua.pt/.well-known/protocolstub/' + stubURL);\r\n    });\r\n\r\n    sinon.stub(descriptorInstance, 'getIdpProxyDescriptor', (idpProxyURL) => {\r\n      return getDescriptor('https://catalogue.ua.pt/.well-known/idp-proxy/' + idpProxyURL);\r\n    });\r\n\r\n  });\r\n\r\n  describe('constructor()', function() {\r\n\r\n    it('depends of the MessageBus', function() {\r\n      expect(registry.messageBus).to.be.instanceof(MessageBus);\r\n    });\r\n  });\r\n\r\n  describe('getAppSandbox()', function() {\r\n    it('return AppSandbox()', function() {\r\n      let sandbox = registry.getAppSandbox();\r\n      expect(sandbox).to.be.instanceof(Sandbox);\r\n    });\r\n  });\r\n\r\n  describe('registerStub(sandBox, domainURL)', function() {\r\n\r\n    let domainURL = 'ua.pt';\r\n\r\n    it('should register a stub', function(done) {\r\n      expect(registry.registerStub(sandboxDummy, domainURL).then((deployed) => {\r\n        console.log('Depoyed->', deployed);\r\n        protostubURL = deployed.url;\r\n        return deployed.url;\r\n      })).to.be.fulfilled.and.eventually.to.contain('runtime://ua.pt/protostub/').and.notify(done);\r\n\r\n    });\r\n\r\n    it('should register a P2P Handler Stub', (done) => {\r\n      let p2pConfig = {\r\n        isHandlerStub: true,\r\n        runtimeURL: runtimeURL\r\n      };\r\n\r\n      expect(registry.registerStub(sandboxDummy, registry.runtimeURL, p2pConfig).then((deployed) => {\r\n        return deployed.url;\r\n      })).to.be.fulfilled.and.eventually.to.contain('runtime://ua.pt/p2phandler/').and.notify(done);\r\n    });\r\n\r\n    it('should register a P2P Requester Stub', (done) => {\r\n\r\n      let p2pConfig = {\r\n        remoteRuntimeURL: 'runtime://ua.pt/1234566',\r\n        p2pHandler: 'runtime://ua.pt/p2phandler/1234',\r\n        p2pRequesterStub: true\r\n      };\r\n\r\n      registry.p2pHandlerAssociation[registry.runtimeURL] = [];\r\n\r\n      expect(registry.registerStub(sandboxDummy, domainURL, p2pConfig).then((deployed) => {\r\n        return deployed.url;\r\n      })).to.be.fulfilled.and.eventually.to.contain('runtime://ua.pt/p2prequester/').and.notify(done);\r\n    });\r\n\r\n    it('should discover P2PHandlerStub', (done) => {\r\n\r\n      expect(registry.discoverP2PStub()).to.have.property('url').contain('runtime://ua.pt/p2phandler/');\r\n      done();\r\n    });\r\n\r\n  });\r\n\r\n  describe('discoverProtostub(url)', function() {\r\n\r\n    it('should discover a ProtocolStub', function(done) {\r\n\r\n  /*    let Stub = {\r\n        status: 'live',\r\n        url: 'runtime://ua.pt/protostub/1234'\r\n      };*/\r\n\r\n      let domain = 'ua.pt';\r\n\r\n      registry.protostubsList[domain].status = 'live';\r\n\r\n    //  registry.protostubsList[domain] = Stub;\r\n\r\n      expect(registry.discoverProtostub(domain)).to.have.property('url').contain('runtime://ua.pt/protostub/');\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('registerPEP(postMessage, hyperty)', function() {\r\n\r\n    it('should register PEP', function(done) {\r\n      let postMessage = {};\r\n      let hyperty = 'hyperty-catalogue://ua.pt/HelloHyperty';\r\n\r\n      expect(registry.registerPEP(postMessage, hyperty).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.equal('PEP registered with success').and.notify(done);\r\n\r\n    });\r\n  });\r\n\r\n  describe('unregisterPEP(HypertyRuntimeURL)', function() {\r\n\r\n    it('should unregister PEP', function(done) {\r\n      let HypertyRuntimeURL = 'hyperty-catalogue://ua.pt/HelloHyperty';\r\n\r\n      expect(registry.unregisterPEP(HypertyRuntimeURL).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.equal('PEP successfully removed.').and.notify(done);\r\n\r\n    });\r\n  });\r\n\r\n  describe('registerHyperty(sandbox, descriptorURL, descriptor)', function() {\r\n\r\n    it('should register an Hyperty', function(done) {\r\n\r\n      let descriptorURL = 'hyperty-catalogue://ua.pt/<catalogue-object-identifier>';\r\n      let descriptor = {\r\n        _objectName: 'hyperty-chat',\r\n        dataObjects: ['url'],\r\n        hypertyType: ['comm']\r\n      };\r\n      let addressURL = {newAddress: true, address: ['hyperty://ua.pt/1']};\r\n      expect(registry.registerHyperty(sandboxDummy, descriptorURL, descriptor, addressURL)).to.be.fulfilled.and.eventually.equal('hyperty://ua.pt/1').and.notify(done);\r\n\r\n    });\r\n  });\r\n\r\n  describe('getSandbox(url)', function() {\r\n\r\n    it('should get a sandbox from a domain', function(done) {\r\n      let domain = 'ua.pt';\r\n\r\n      console.log('Get Sandbox:', sandboxDummy);\r\n\r\n      expect(registry.getSandbox(domain).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.be.eql(sandboxDummy).and.notify(done);\r\n\r\n    });\r\n\r\n    it('should get a sandbox from a specific hypertyIstance', function(done) {\r\n      let hypertyInstance = 'hyperty://ua.pt/1';\r\n\r\n      expect(registry.getSandbox(hypertyInstance).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.be.eql(sandboxDummy).and.notify(done);\r\n    });\r\n\r\n    it('should get a sandbox from a specific protostubURL', function(done) {\r\n\r\n    //  let protostubURL = 'runtime://ua.pt/protostub/123';\r\n\r\n      expect(registry.getSandbox(protostubURL, sandboxDummyCapabilities))\r\n      .to.be.fulfilled\r\n      .and.eventually.to.be.eql(sandboxDummy)\r\n      .and.notify(done);\r\n    });\r\n\r\n    // let anotherSandbox = { sandbox: sandbox1, type: 'normal', capabilities: sandboxDummyCapabilities};\r\n    let sandbox1 = new Sandbox(sandboxDummyCapabilities);\r\n\r\n    it('should register a anotherdomain protoStub URL', function(done) {\r\n      let domainURL = 'anotherDomain.pt';\r\n\r\n      expect(registry.registerStub(sandbox1, domainURL).then(function(response) {\r\n        return response.url;\r\n      })).to.be.fulfilled.and.eventually.contain(domainURL).and.notify(done);\r\n    });\r\n\r\n\r\n    it('should get a sandbox from another domain', function(done) {\r\n      let domainURL = 'anotherDomain.pt';\r\n\r\n      expect(registry.getSandbox(domainURL, sandboxDummyCapabilities).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.be.equal(sandbox1).and.notify(done);\r\n    });\r\n\r\n  //  });\r\n\r\n  });\r\n\r\n  describe('resolve(url)', function() {\r\n\r\n    it('should return a protostub url', function(done) {\r\n      let url = 'hyperty://ua.pt/123-dhsdhsg';\r\n\r\n      expect(registry.resolve(url).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.contain('runtime://ua.pt/protostub/').and.notify(done);\r\n\r\n    });\r\n  });\r\n\r\n  describe('unregisterStub(url)', function() {\r\n\r\n    it('should unregister a ProtocolStub', function(done) {\r\n      let url = 'ua.pt';\r\n\r\n      expect(registry.unregisterStub(url).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.equal('ProtostubURL removed').and.notify(done);\r\n\r\n    });\r\n  });\r\n\r\n  describe('getHypertyOwner(hypertyURL)', function() {\r\n    it('should return the user associated to the hyperty URL', function() {\r\n      let url = 'hyperty://ua.pt/1';\r\n      expect(registry.getHypertyOwner(url)).to.be.eql('user://gmail.com/openidtest10');\r\n    });\r\n  });\r\n\r\n  describe('getHypertyName(hypertyURL)', function() {\r\n    it('should return the hyperty Name from a given hypertyURL', function() {\r\n      let url = 'hyperty://ua.pt/1';\r\n\r\n      expect(registry.getHypertyName(url)).to.be.equal('hyperty-chat');\r\n    });\r\n  });\r\n\r\n  describe('registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, authorise)', function() {\r\n    it('should register a new Data Object in the runtime registry', function(done) {\r\n      let objectRegistration = {};\r\n      objectRegistration.name = 'hello-chat';\r\n      objectRegistration.schema = 'hyperty-catalogue://catalogue.localhost/.well-known/dataschema/Communication';\r\n      objectRegistration.url = 'comm://localhost/9303b707-f301-4929-ad7d-65a89a356871';\r\n      objectRegistration.reporter = 'hyperty://localhost/d692091f-192c-420c-a763-a180f13e626a';\r\n      objectRegistration.authorise = ['user://gmail.com/user15'];\r\n      objectRegistration.resources = ['fake'];\r\n\r\n      expect(registry.registerDataObject(objectRegistration).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.equal('ok').and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('checkRegisteredURLs(info)', function() {\r\n\r\n    it('should return a previously registered Hyperty URL', function(done) {\r\n\r\n      let descriptor = {\r\n        _objectName: 'hyperty-chat',\r\n        dataObjects: ['url'],\r\n        hypertyType: ['comm']\r\n      };\r\n\r\n      expect(registry.checkRegisteredURLs(descriptor).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.be.eql(['hyperty://ua.pt/1']).and.notify(done);\r\n\r\n    });\r\n\r\n    it('should return a undefined value if the Hyperty is not previously registered', function(done) {\r\n\r\n      let fakeDescriptor = {\r\n        _objectName: 'hyperty-fake',\r\n        dataObjects: ['url2'],\r\n        hypertyType: ['comm2']\r\n      };\r\n      expect(registry.checkRegisteredURLs(fakeDescriptor).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.be.equal(undefined).and.notify(done);\r\n    });\r\n\r\n    it('should return a previously registered Data Object URL', function(done) {\r\n\r\n      let info = {\r\n        name: 'hello-chat',\r\n        schema: 'hyperty-catalogue://catalogue.localhost/.well-known/dataschema/Communication',\r\n        resources: ['fake'],\r\n        reporter: 'hyperty://localhost/d692091f-192c-420c-a763-a180f13e626a'\r\n      };\r\n\r\n      expect(registry.checkRegisteredURLs(info).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.be.eql('comm://localhost/9303b707-f301-4929-ad7d-65a89a356871').and.notify(done);\r\n\r\n    });\r\n\r\n    it('should return a undefined value if the dataObjectURL is not previously registered', function(done) {\r\n      let fakeInfo = {\r\n        name: 'fake',\r\n        schema: 'hyperty-catalogue://catalogue.localhost/.well-known/dataschema/unknown',\r\n        resources: ['fake'],\r\n        reporter: 'hyperty://localhost/anotherURL123'\r\n      };\r\n      expect(registry.checkRegisteredURLs(fakeInfo).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.be.equal(undefined).and.notify(done);\r\n    });\r\n\r\n    it('should return an hyperty url based on given address', function(done) {\r\n\r\n      let descriptor = {\r\n        _objectName: 'hyperty-chat',\r\n        dataObjects: ['url'],\r\n        hypertyType: ['comm']\r\n      };\r\n\r\n      let reuseURL = 'hyperty://ua.pt/1';\r\n\r\n      expect(registry.checkRegisteredURLs(descriptor, reuseURL)).to.eventually\r\n      .to.be.eql(['hyperty://ua.pt/1'])\r\n      .and.to.be.fulfilled\r\n      .and.notify(done);\r\n\r\n    });\r\n\r\n  });\r\n\r\n  describe('getReporterURL(dataObjectURL)', function() {\r\n\r\n    it('should return the reporterURL associated with the dataobject URL', function(done) {\r\n      let dataObjectURL = 'comm://localhost/9303b707-f301-4929-ad7d-65a89a356871';\r\n\r\n      expect(registry.getReporterURL(dataObjectURL).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.equal('hyperty://localhost/d692091f-192c-420c-a763-a180f13e626a').and.notify(done);\r\n    });\r\n\r\n    it('should not found the reporter the reporterURL associated with the dataobject URL', function(done) {\r\n      let fakedataObjectURL = 'comm://fake';\r\n      expect(registry.getReporterURL(fakedataObjectURL).then(function(response) {\r\n        return response;\r\n      })).eventually.equal('No reporter was found').and.to.be.rejected.and.notify(done);\r\n\r\n    });\r\n\r\n  });\r\n\r\n  describe('getPreAuthSubscribers(dataObjectURL)', function() {\r\n    it('should return the list of pre authorised users', function() {\r\n      let dataObjectURL = 'comm://localhost/9303b707-f301-4929-ad7d-65a89a356871';\r\n      let fakedataObjectURL = 'comm://fake';\r\n\r\n      expect(registry.getPreAuthSubscribers(dataObjectURL)).to.be.eql(['user://gmail.com/user15']);\r\n\r\n      expect(registry.getPreAuthSubscribers(fakedataObjectURL)).to.be.eql([]);\r\n    });\r\n  });\r\n\r\n  describe('getDataObjectSubscribers(dataObjectURL)', function() {\r\n    it('should return the list of pre authorised users', function() {\r\n      let dataObjectURL = 'comm://localhost/9303b707-f301-4929-ad7d-65a89a356871';\r\n      let subscriberURL = 'hyperty://localhost/00-00-sub1';\r\n\r\n      registry.registerSubscriber(dataObjectURL, subscriberURL);\r\n\r\n      expect(registry.getDataObjectSubscribers(dataObjectURL)).to.be.eql(['hyperty://localhost/00-00-sub1']);\r\n    });\r\n  });\r\n\r\n  describe('unregisterHyperty(url)', function() {\r\n    it('should unregister an Hyperty', function(done) {\r\n      let url = 'hyperty://ua.pt/1';\r\n\r\n      expect(registry.unregisterHyperty(url).then(function(response) {\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.equal('Hyperty successfully deleted').and.notify(done);\r\n    });\r\n  });\r\n\r\n  describe('isLegacy(url)', function() {\r\n\r\n    it('should return a protostub', function(done) {\r\n      let url = 'slack://user@slack.com';\r\n\r\n      expect(registry.isLegacy(url).then(function(response) {\r\n        console.log('ProtoSTUB->', response);\r\n        return response;\r\n      })).to.be.fulfilled.and.eventually.to.equal(true).and.notify(done);\r\n\r\n    });\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/Registry.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 295,
    "kind": "testDescribe",
    "name": "describe168",
    "testId": 168,
    "memberof": "test/Registry.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/Registry.spec.js~describe168",
    "access": null,
    "description": "Registry",
    "lineNumber": 40
  },
  {
    "__docId__": 296,
    "kind": "testDescribe",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe169",
    "access": null,
    "description": "constructor()",
    "lineNumber": 174
  },
  {
    "__docId__": 297,
    "kind": "testIt",
    "name": "it170",
    "testId": 170,
    "memberof": "test/Registry.spec.js~describe168.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe169.it170",
    "access": null,
    "description": "depends of the MessageBus",
    "lineNumber": 176
  },
  {
    "__docId__": 298,
    "kind": "testDescribe",
    "name": "describe171",
    "testId": 171,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe171",
    "access": null,
    "description": "getAppSandbox()",
    "lineNumber": 181
  },
  {
    "__docId__": 299,
    "kind": "testIt",
    "name": "it172",
    "testId": 172,
    "memberof": "test/Registry.spec.js~describe168.describe171",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe171.it172",
    "access": null,
    "description": "return AppSandbox()",
    "lineNumber": 182
  },
  {
    "__docId__": 300,
    "kind": "testDescribe",
    "name": "describe173",
    "testId": 173,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe173",
    "access": null,
    "description": "registerStub(sandBox, domainURL)",
    "lineNumber": 188
  },
  {
    "__docId__": 301,
    "kind": "testIt",
    "name": "it174",
    "testId": 174,
    "memberof": "test/Registry.spec.js~describe168.describe173",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe173.it174",
    "access": null,
    "description": "should register a stub",
    "lineNumber": 192
  },
  {
    "__docId__": 302,
    "kind": "testIt",
    "name": "it175",
    "testId": 175,
    "memberof": "test/Registry.spec.js~describe168.describe173",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe173.it175",
    "access": null,
    "description": "should register a P2P Handler Stub",
    "lineNumber": 201
  },
  {
    "__docId__": 303,
    "kind": "testIt",
    "name": "it176",
    "testId": 176,
    "memberof": "test/Registry.spec.js~describe168.describe173",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe173.it176",
    "access": null,
    "description": "should register a P2P Requester Stub",
    "lineNumber": 212
  },
  {
    "__docId__": 304,
    "kind": "testIt",
    "name": "it177",
    "testId": 177,
    "memberof": "test/Registry.spec.js~describe168.describe173",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe173.it177",
    "access": null,
    "description": "should discover P2PHandlerStub",
    "lineNumber": 227
  },
  {
    "__docId__": 305,
    "kind": "testDescribe",
    "name": "describe178",
    "testId": 178,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe178",
    "access": null,
    "description": "discoverProtostub(url)",
    "lineNumber": 235
  },
  {
    "__docId__": 306,
    "kind": "testIt",
    "name": "it179",
    "testId": 179,
    "memberof": "test/Registry.spec.js~describe168.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe178.it179",
    "access": null,
    "description": "should discover a ProtocolStub",
    "lineNumber": 237
  },
  {
    "__docId__": 307,
    "kind": "testDescribe",
    "name": "describe180",
    "testId": 180,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe180",
    "access": null,
    "description": "registerPEP(postMessage, hyperty)",
    "lineNumber": 255
  },
  {
    "__docId__": 308,
    "kind": "testIt",
    "name": "it181",
    "testId": 181,
    "memberof": "test/Registry.spec.js~describe168.describe180",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe180.it181",
    "access": null,
    "description": "should register PEP",
    "lineNumber": 257
  },
  {
    "__docId__": 309,
    "kind": "testDescribe",
    "name": "describe182",
    "testId": 182,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe182",
    "access": null,
    "description": "unregisterPEP(HypertyRuntimeURL)",
    "lineNumber": 268
  },
  {
    "__docId__": 310,
    "kind": "testIt",
    "name": "it183",
    "testId": 183,
    "memberof": "test/Registry.spec.js~describe168.describe182",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe182.it183",
    "access": null,
    "description": "should unregister PEP",
    "lineNumber": 270
  },
  {
    "__docId__": 311,
    "kind": "testDescribe",
    "name": "describe184",
    "testId": 184,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe184",
    "access": null,
    "description": "registerHyperty(sandbox, descriptorURL, descriptor)",
    "lineNumber": 280
  },
  {
    "__docId__": 312,
    "kind": "testIt",
    "name": "it185",
    "testId": 185,
    "memberof": "test/Registry.spec.js~describe168.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe184.it185",
    "access": null,
    "description": "should register an Hyperty",
    "lineNumber": 282
  },
  {
    "__docId__": 313,
    "kind": "testDescribe",
    "name": "describe186",
    "testId": 186,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe186",
    "access": null,
    "description": "getSandbox(url)",
    "lineNumber": 296
  },
  {
    "__docId__": 314,
    "kind": "testIt",
    "name": "it187",
    "testId": 187,
    "memberof": "test/Registry.spec.js~describe168.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe186.it187",
    "access": null,
    "description": "should get a sandbox from a domain",
    "lineNumber": 298
  },
  {
    "__docId__": 315,
    "kind": "testIt",
    "name": "it188",
    "testId": 188,
    "memberof": "test/Registry.spec.js~describe168.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe186.it188",
    "access": null,
    "description": "should get a sandbox from a specific hypertyIstance",
    "lineNumber": 309
  },
  {
    "__docId__": 316,
    "kind": "testIt",
    "name": "it189",
    "testId": 189,
    "memberof": "test/Registry.spec.js~describe168.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe186.it189",
    "access": null,
    "description": "should get a sandbox from a specific protostubURL",
    "lineNumber": 317
  },
  {
    "__docId__": 317,
    "kind": "testIt",
    "name": "it190",
    "testId": 190,
    "memberof": "test/Registry.spec.js~describe168.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe186.it190",
    "access": null,
    "description": "should register a anotherdomain protoStub URL",
    "lineNumber": 330
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "name": "it191",
    "testId": 191,
    "memberof": "test/Registry.spec.js~describe168.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe186.it191",
    "access": null,
    "description": "should get a sandbox from another domain",
    "lineNumber": 339
  },
  {
    "__docId__": 319,
    "kind": "testDescribe",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe192",
    "access": null,
    "description": "resolve(url)",
    "lineNumber": 351
  },
  {
    "__docId__": 320,
    "kind": "testIt",
    "name": "it193",
    "testId": 193,
    "memberof": "test/Registry.spec.js~describe168.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe192.it193",
    "access": null,
    "description": "should return a protostub url",
    "lineNumber": 353
  },
  {
    "__docId__": 321,
    "kind": "testDescribe",
    "name": "describe194",
    "testId": 194,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe194",
    "access": null,
    "description": "unregisterStub(url)",
    "lineNumber": 363
  },
  {
    "__docId__": 322,
    "kind": "testIt",
    "name": "it195",
    "testId": 195,
    "memberof": "test/Registry.spec.js~describe168.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe194.it195",
    "access": null,
    "description": "should unregister a ProtocolStub",
    "lineNumber": 365
  },
  {
    "__docId__": 323,
    "kind": "testDescribe",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe196",
    "access": null,
    "description": "getHypertyOwner(hypertyURL)",
    "lineNumber": 375
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "name": "it197",
    "testId": 197,
    "memberof": "test/Registry.spec.js~describe168.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe196.it197",
    "access": null,
    "description": "should return the user associated to the hyperty URL",
    "lineNumber": 376
  },
  {
    "__docId__": 325,
    "kind": "testDescribe",
    "name": "describe198",
    "testId": 198,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe198",
    "access": null,
    "description": "getHypertyName(hypertyURL)",
    "lineNumber": 382
  },
  {
    "__docId__": 326,
    "kind": "testIt",
    "name": "it199",
    "testId": 199,
    "memberof": "test/Registry.spec.js~describe168.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe198.it199",
    "access": null,
    "description": "should return the hyperty Name from a given hypertyURL",
    "lineNumber": 383
  },
  {
    "__docId__": 327,
    "kind": "testDescribe",
    "name": "describe200",
    "testId": 200,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe200",
    "access": null,
    "description": "registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, authorise)",
    "lineNumber": 390
  },
  {
    "__docId__": 328,
    "kind": "testIt",
    "name": "it201",
    "testId": 201,
    "memberof": "test/Registry.spec.js~describe168.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe200.it201",
    "access": null,
    "description": "should register a new Data Object in the runtime registry",
    "lineNumber": 391
  },
  {
    "__docId__": 329,
    "kind": "testDescribe",
    "name": "describe202",
    "testId": 202,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe202",
    "access": null,
    "description": "checkRegisteredURLs(info)",
    "lineNumber": 406
  },
  {
    "__docId__": 330,
    "kind": "testIt",
    "name": "it203",
    "testId": 203,
    "memberof": "test/Registry.spec.js~describe168.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe202.it203",
    "access": null,
    "description": "should return a previously registered Hyperty URL",
    "lineNumber": 408
  },
  {
    "__docId__": 331,
    "kind": "testIt",
    "name": "it204",
    "testId": 204,
    "memberof": "test/Registry.spec.js~describe168.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe202.it204",
    "access": null,
    "description": "should return a undefined value if the Hyperty is not previously registered",
    "lineNumber": 422
  },
  {
    "__docId__": 332,
    "kind": "testIt",
    "name": "it205",
    "testId": 205,
    "memberof": "test/Registry.spec.js~describe168.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe202.it205",
    "access": null,
    "description": "should return a previously registered Data Object URL",
    "lineNumber": 434
  },
  {
    "__docId__": 333,
    "kind": "testIt",
    "name": "it206",
    "testId": 206,
    "memberof": "test/Registry.spec.js~describe168.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe202.it206",
    "access": null,
    "description": "should return a undefined value if the dataObjectURL is not previously registered",
    "lineNumber": 449
  },
  {
    "__docId__": 334,
    "kind": "testIt",
    "name": "it207",
    "testId": 207,
    "memberof": "test/Registry.spec.js~describe168.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe202.it207",
    "access": null,
    "description": "should return an hyperty url based on given address",
    "lineNumber": 461
  },
  {
    "__docId__": 335,
    "kind": "testDescribe",
    "name": "describe208",
    "testId": 208,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe208",
    "access": null,
    "description": "getReporterURL(dataObjectURL)",
    "lineNumber": 480
  },
  {
    "__docId__": 336,
    "kind": "testIt",
    "name": "it209",
    "testId": 209,
    "memberof": "test/Registry.spec.js~describe168.describe208",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe208.it209",
    "access": null,
    "description": "should return the reporterURL associated with the dataobject URL",
    "lineNumber": 482
  },
  {
    "__docId__": 337,
    "kind": "testIt",
    "name": "it210",
    "testId": 210,
    "memberof": "test/Registry.spec.js~describe168.describe208",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe208.it210",
    "access": null,
    "description": "should not found the reporter the reporterURL associated with the dataobject URL",
    "lineNumber": 490
  },
  {
    "__docId__": 338,
    "kind": "testDescribe",
    "name": "describe211",
    "testId": 211,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe211",
    "access": null,
    "description": "getPreAuthSubscribers(dataObjectURL)",
    "lineNumber": 500
  },
  {
    "__docId__": 339,
    "kind": "testIt",
    "name": "it212",
    "testId": 212,
    "memberof": "test/Registry.spec.js~describe168.describe211",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe211.it212",
    "access": null,
    "description": "should return the list of pre authorised users",
    "lineNumber": 501
  },
  {
    "__docId__": 340,
    "kind": "testDescribe",
    "name": "describe213",
    "testId": 213,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe213",
    "access": null,
    "description": "getDataObjectSubscribers(dataObjectURL)",
    "lineNumber": 511
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "name": "it214",
    "testId": 214,
    "memberof": "test/Registry.spec.js~describe168.describe213",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe213.it214",
    "access": null,
    "description": "should return the list of pre authorised users",
    "lineNumber": 512
  },
  {
    "__docId__": 342,
    "kind": "testDescribe",
    "name": "describe215",
    "testId": 215,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe215",
    "access": null,
    "description": "unregisterHyperty(url)",
    "lineNumber": 522
  },
  {
    "__docId__": 343,
    "kind": "testIt",
    "name": "it216",
    "testId": 216,
    "memberof": "test/Registry.spec.js~describe168.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe215.it216",
    "access": null,
    "description": "should unregister an Hyperty",
    "lineNumber": 523
  },
  {
    "__docId__": 344,
    "kind": "testDescribe",
    "name": "describe217",
    "testId": 217,
    "memberof": "test/Registry.spec.js~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe217",
    "access": null,
    "description": "isLegacy(url)",
    "lineNumber": 532
  },
  {
    "__docId__": 345,
    "kind": "testIt",
    "name": "it218",
    "testId": 218,
    "memberof": "test/Registry.spec.js~describe168.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/Registry.spec.js~describe168.describe217.it218",
    "access": null,
    "description": "should return a protostub",
    "lineNumber": 534
  },
  {
    "__docId__": 346,
    "kind": "testFile",
    "name": "test/RuntimeUA.spec.js",
    "content": "import chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport sinonChai from 'sinon-chai';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\n\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\nimport { descriptors } from './resources/descriptors.js';\r\n\r\n// Testing Module\r\nimport RuntimeUA from  '../src/runtime/RuntimeUA';\r\n\r\n// Main dependecies\r\nimport Registry from '../src/registry/Registry';\r\nimport IdentityModule from '../src/identity/IdentityModule';\r\nimport PEP from '../src/policy/PEP';\r\nimport MessageBus from '../src/bus/MessageBus';\r\n\r\nimport { divideURL } from '../src/utils/utils';\r\n\r\nimport { runtimeFactory } from './resources/runtimeFactory';\r\n\r\n/// import { runtimeConfiguration } from './resources/runtimeConfiguration';\r\n\r\n// Testing runtimeUA;\r\nlet domain = 'localhost';\r\ndescribe('RuntimeUA', function() {\r\n\r\n  let runtime = new RuntimeUA(descriptors.Runtimes.Runtime, runtimeFactory, domain);\r\n  let getDescriptor;\r\n\r\n  before(function() {\r\n\r\n    getDescriptor = (url) => {\r\n\r\n      return new Promise(function(resolve, reject) {\r\n\r\n        let dividedURL = divideURL(url);\r\n        let identity = dividedURL.identity;\r\n\r\n        if (!identity) {\r\n          identity = 'default';\r\n        } else {\r\n          identity = identity.substring(identity.lastIndexOf('/') + 1);\r\n        }\r\n\r\n        let result;\r\n\r\n        if (url.includes('hyperty')) {\r\n          try {\r\n            result = descriptors.Hyperties[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n\r\n        } else if (url.includes('protocolstub') || url === dividedURL.domain) {\r\n          try {\r\n            result = descriptors.ProtoStubs[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        } else if (url.includes('idp-proxy')) {\r\n          try {\r\n            result = descriptors.IdpProxies[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        } else if (url.includes('dataschema')) {\r\n          try {\r\n            result = descriptors.DataSchemas[identity];\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n\r\n        }\r\n\r\n        resolve(result);\r\n\r\n      });\r\n    };\r\n  });\r\n\r\n  after(function() {\r\n    runtime.descriptorInstance.getHypertyDescriptor.restore();\r\n    runtime.descriptorInstance.getStubDescriptor.restore();\r\n    runtime.descriptorInstance.getIdpProxyDescriptor.restore();\r\n  });\r\n\r\n  describe('constructor()', function() {\r\n\r\n    it('expects the runtime was ready', (done) => {\r\n\r\n      expect(runtime.init().then((result) => {\r\n\r\n        sinon.stub(runtime.messageBus, 'postMessage', function(msg, replyCallback) {\r\n          replyCallback({\r\n            id: 1, type: 'response', from: 'domain://msg-node.sp.domain/address-allocation', to: 'local://fake.url',\r\n            body: {code: 200, value: {allocated: msg.body.scheme + '://sp.domain/9c8c1949-e08e-4554-b201-bab201bdb21d'}}\r\n          });\r\n        });\r\n\r\n        sinon.stub(runtime.descriptorInstance, 'getHypertyDescriptor', (hypertyURL) => {\r\n          return getDescriptor(hypertyURL);\r\n        });\r\n\r\n        sinon.stub(runtime.descriptorInstance, 'getStubDescriptor', (stubURL) => {\r\n          return getDescriptor(stubURL);\r\n        });\r\n\r\n        sinon.stub(runtime.descriptorInstance, 'getIdpProxyDescriptor', (idpProxyURL) => {\r\n          return getDescriptor(idpProxyURL);\r\n        });\r\n\r\n        sinon.stub(runtime.runtimeCatalogue, 'getDataSchemaDescriptor', (dataSchemaURL) => {\r\n          return getDescriptor(dataSchemaURL);\r\n        });\r\n\r\n        sinon.stub(runtime.registry, 'registerHyperty', (sandbox, descriptorURL, descriptor, addressURL) => {\r\n          return new Promise(function(resolve) {\r\n            console.log('AQIO:', addressURL);\r\n            if (addressURL.newAddress) {\r\n              resolve('hyperty://sp.domain/9c8c1949-e08e-4554-b201-bab201bdb21d');\r\n            } else {\r\n              resolve(addressURL.address);\r\n            }\r\n          });\r\n\r\n        });\r\n\r\n        sinon.stub(runtime.registry, 'checkRegisteredURLs', (info, reuseURL) => {\r\n\r\n          return new Promise((resolve) => {\r\n            console.log('checkRegisteredURLs:', typeof(reuseURL), reuseURL);\r\n            if (typeof(reuseURL) === 'boolean') {\r\n              resolve('hyperty://sp.domain/9c8c1949-e08e-4554-b201-bab201bdb21d');\r\n            } else if (typeof(reuseURL) === 'string') {\r\n              console.log('checkRegisteredURLs is string:', reuseURL);\r\n              resolve(reuseURL);\r\n            } else {\r\n              resolve('hyperty://sp.domain/9c8c1949-e08e-4554-b201-bab201bdb21d');\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n        return result;\r\n      }))\r\n      .to.be.fulfilled\r\n      .and.to.eventually.be.true\r\n      .and.notify(done);\r\n\r\n    });\r\n\r\n    it('depends of the Registry', function() {\r\n      expect(runtime.registry).to.be.instanceof(Registry);\r\n    });\r\n\r\n    it('depends of the Identity Module', function() {\r\n      expect(runtime.identityModule).to.be.instanceof(IdentityModule);\r\n    });\r\n\r\n    it('depends of the Policy Engine', function() {\r\n      expect(runtime.policyEngine).to.be.instanceof(PEP);\r\n    });\r\n\r\n    it('depends of the MessageBus', function() {\r\n      expect(runtime.messageBus).to.be.instanceof(MessageBus);\r\n    });\r\n\r\n    it('should throw when given no arguments', function() {\r\n      expect(runtime).to.have.property('runtimeFactory');\r\n      expect(runtime.runtimeFactory).to.have.property('atob');\r\n      expect(runtime.runtimeFactory).to.have.property('persistenceManager');\r\n      expect(runtime.runtimeFactory).to.have.property('runtimeCapabilities');\r\n      expect(runtime.runtimeFactory).to.have.property('storageManager');\r\n      expect(runtime.runtimeFactory).to.have.property('createSandbox');\r\n      expect(runtime.runtimeFactory).to.have.property('createAppSandbox');\r\n      expect(runtime.runtimeFactory).to.have.property('createHttpRequest');\r\n      expect(runtime.runtimeFactory).to.have.property('createRuntimeCatalogue');\r\n    });\r\n\r\n  });\r\n\r\n  describe('loadHyperty(hypertyDescriptorURL)', function() {\r\n\r\n    it('should throw when given no arguments', function(done) {\r\n      let hypertyDescriptorURL = 'hyperty-catalogue://catalogue.sp.domain/.well-known/hyperty/HelloHyperty';\r\n      let loadHyperty = runtime.loadHyperty(hypertyDescriptorURL);\r\n\r\n      expect(loadHyperty)\r\n      .to.be.fulfilled\r\n      .and.notify(done);\r\n    });\r\n\r\n    it('should be a Promise', function(done) {\r\n\r\n      let hypertyDescriptorURL = 'hyperty-catalogue://catalogue.sp.domain/.well-known/hyperty/HelloHyperty';\r\n      let loadHyperty = runtime.loadHyperty(hypertyDescriptorURL);\r\n\r\n      expect(loadHyperty)\r\n      .to.be.fulfilled\r\n      .and.to.be.instanceof(Promise)\r\n      .and.notify(done);\r\n\r\n    });\r\n\r\n    it('should be deployed', function(done) {\r\n\r\n      let hypertyDescriptorURL = 'hyperty-catalogue://catalogue.sp.domain/.well-known/hyperty/HelloHyperty';\r\n      let loadHyperty = runtime.loadHyperty(hypertyDescriptorURL);\r\n      let hypertyResolved = ['runtimeHypertyURL', 'status'];\r\n\r\n      expect(loadHyperty).to.eventually.to.have.all.keys(hypertyResolved)\r\n      .and.to.be.fulfilled\r\n      .and.notify(done);\r\n\r\n    });\r\n\r\n    it('should load an hyperty based on given true value for the reuse', function(done) {\r\n\r\n      let hypertyDescriptorURL = 'hyperty-catalogue://catalogue.sp.domain/.well-known/hyperty/HelloHyperty';\r\n      let loadHyperty = runtime.loadHyperty(hypertyDescriptorURL, true);\r\n      let hypertyResolved = ['runtimeHypertyURL', 'status'];\r\n\r\n      expect(loadHyperty).to.be.fulfilled\r\n      .and.eventually.to.have.all.keys(hypertyResolved)\r\n      .and.notify(done);\r\n\r\n    });\r\n\r\n    it('should load an hyperty based on given reuse URL address', function(done) {\r\n\r\n      let hypertyDescriptorURL = 'hyperty-catalogue://catalogue.sp.domain/.well-known/hyperty/HelloHyperty';\r\n      let loadHyperty = runtime.loadHyperty(hypertyDescriptorURL, 'hyperty://sp.domain/1');\r\n      let hypertyResolved = {\r\n        runtimeHypertyURL: 'hyperty://sp.domain/1',\r\n        status: 'deployed'\r\n      };\r\n\r\n      expect(loadHyperty).to.eventually.to.deep.equal(hypertyResolved)\r\n      .and.to.be.fulfilled\r\n      .and.notify(done);\r\n\r\n    });\r\n\r\n\r\n  });\r\n\r\n  describe('loadStub(sp-domain)', function() {\r\n\r\n    it('should throw when given no arguments', function(done) {\r\n      let spDomain = 'sp.domain';\r\n      let loadStubPromise = runtime.loadStub(spDomain);\r\n\r\n      expect(loadStubPromise).to.be.fulfilled.and.notify(done);\r\n    });\r\n\r\n    it('should be a Promise', function(done) {\r\n      let spDomain = 'sp.domain';\r\n      let loadStubPromise = runtime.loadStub(spDomain);\r\n\r\n      expect(loadStubPromise).to.be.fulfilled\r\n      .to.be.instanceof(Promise)\r\n      .and.notify(done);\r\n    });\r\n\r\n    it('should be deployed', function(done) {\r\n      let spDomain = 'sp.domain';\r\n      let loadStubPromise = runtime.loadStub(spDomain);\r\n\r\n      //let stubResolved = ['url', 'status'];\r\n\r\n      expect(loadStubPromise).to.be.fulfilled\r\n      .and.eventually.have.all.keys('url', 'status', 'descriptorURL')\r\n      .and.eventually.to.have.property('url').to.include('runtime://sp.domain/protostub/')\r\n      .and.notify(done);\r\n    });\r\n\r\n  });\r\n\r\n  describe('loadIdpProxy(google.com)', function() {\r\n\r\n    it('should throw when given no arguments', function(done) {\r\n      let domain = 'google.com';\r\n      let loadIdpPromise = runtime.loadIdpProxy(domain);\r\n\r\n      expect(loadIdpPromise).to.be.fulfilled.and.notify(done);\r\n    });\r\n\r\n    it('should be a Promise', function(done) {\r\n      let domain = 'google.com';\r\n      let loadIdpPromise = runtime.loadIdpProxy(domain);\r\n\r\n      expect(loadIdpPromise).to.be.fulfilled\r\n      .to.be.instanceof(Promise)\r\n      .and.notify(done);\r\n    });\r\n\r\n    it('should be deployed', function(done) {\r\n      let domain = 'google.com';\r\n      let loadIdpPromise = runtime.loadIdpProxy(domain);\r\n      let stubResolved = ['url', 'status'];\r\n\r\n      expect(loadIdpPromise).to.be.fulfilled\r\n      .and.eventually.to.have.all.keys(stubResolved)\r\n      .and.notify(done);\r\n    });\r\n\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/RuntimeUA.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "testDescribe",
    "name": "describe219",
    "testId": 219,
    "memberof": "test/RuntimeUA.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219",
    "access": null,
    "description": "RuntimeUA",
    "lineNumber": 31
  },
  {
    "__docId__": 348,
    "kind": "testDescribe",
    "name": "describe220",
    "testId": 220,
    "memberof": "test/RuntimeUA.spec.js~describe219",
    "testDepth": 1,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe220",
    "access": null,
    "description": "constructor()",
    "lineNumber": 93
  },
  {
    "__docId__": 349,
    "kind": "testIt",
    "name": "it221",
    "testId": 221,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe220.it221",
    "access": null,
    "description": "expects the runtime was ready",
    "lineNumber": 95
  },
  {
    "__docId__": 350,
    "kind": "testIt",
    "name": "it222",
    "testId": 222,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe220.it222",
    "access": null,
    "description": "depends of the Registry",
    "lineNumber": 159
  },
  {
    "__docId__": 351,
    "kind": "testIt",
    "name": "it223",
    "testId": 223,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe220.it223",
    "access": null,
    "description": "depends of the Identity Module",
    "lineNumber": 163
  },
  {
    "__docId__": 352,
    "kind": "testIt",
    "name": "it224",
    "testId": 224,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe220.it224",
    "access": null,
    "description": "depends of the Policy Engine",
    "lineNumber": 167
  },
  {
    "__docId__": 353,
    "kind": "testIt",
    "name": "it225",
    "testId": 225,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe220.it225",
    "access": null,
    "description": "depends of the MessageBus",
    "lineNumber": 171
  },
  {
    "__docId__": 354,
    "kind": "testIt",
    "name": "it226",
    "testId": 226,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe220.it226",
    "access": null,
    "description": "should throw when given no arguments",
    "lineNumber": 175
  },
  {
    "__docId__": 355,
    "kind": "testDescribe",
    "name": "describe227",
    "testId": 227,
    "memberof": "test/RuntimeUA.spec.js~describe219",
    "testDepth": 1,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe227",
    "access": null,
    "description": "loadHyperty(hypertyDescriptorURL)",
    "lineNumber": 189
  },
  {
    "__docId__": 356,
    "kind": "testIt",
    "name": "it228",
    "testId": 228,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe227",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe227.it228",
    "access": null,
    "description": "should throw when given no arguments",
    "lineNumber": 191
  },
  {
    "__docId__": 357,
    "kind": "testIt",
    "name": "it229",
    "testId": 229,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe227",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe227.it229",
    "access": null,
    "description": "should be a Promise",
    "lineNumber": 200
  },
  {
    "__docId__": 358,
    "kind": "testIt",
    "name": "it230",
    "testId": 230,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe227",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe227.it230",
    "access": null,
    "description": "should be deployed",
    "lineNumber": 212
  },
  {
    "__docId__": 359,
    "kind": "testIt",
    "name": "it231",
    "testId": 231,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe227",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe227.it231",
    "access": null,
    "description": "should load an hyperty based on given true value for the reuse",
    "lineNumber": 224
  },
  {
    "__docId__": 360,
    "kind": "testIt",
    "name": "it232",
    "testId": 232,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe227",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe227.it232",
    "access": null,
    "description": "should load an hyperty based on given reuse URL address",
    "lineNumber": 236
  },
  {
    "__docId__": 361,
    "kind": "testDescribe",
    "name": "describe233",
    "testId": 233,
    "memberof": "test/RuntimeUA.spec.js~describe219",
    "testDepth": 1,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe233",
    "access": null,
    "description": "loadStub(sp-domain)",
    "lineNumber": 254
  },
  {
    "__docId__": 362,
    "kind": "testIt",
    "name": "it234",
    "testId": 234,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe233.it234",
    "access": null,
    "description": "should throw when given no arguments",
    "lineNumber": 256
  },
  {
    "__docId__": 363,
    "kind": "testIt",
    "name": "it235",
    "testId": 235,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe233.it235",
    "access": null,
    "description": "should be a Promise",
    "lineNumber": 263
  },
  {
    "__docId__": 364,
    "kind": "testIt",
    "name": "it236",
    "testId": 236,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe233.it236",
    "access": null,
    "description": "should be deployed",
    "lineNumber": 272
  },
  {
    "__docId__": 365,
    "kind": "testDescribe",
    "name": "describe237",
    "testId": 237,
    "memberof": "test/RuntimeUA.spec.js~describe219",
    "testDepth": 1,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe237",
    "access": null,
    "description": "loadIdpProxy(google.com)",
    "lineNumber": 286
  },
  {
    "__docId__": 366,
    "kind": "testIt",
    "name": "it238",
    "testId": 238,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe237",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe237.it238",
    "access": null,
    "description": "should throw when given no arguments",
    "lineNumber": 288
  },
  {
    "__docId__": 367,
    "kind": "testIt",
    "name": "it239",
    "testId": 239,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe237",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe237.it239",
    "access": null,
    "description": "should be a Promise",
    "lineNumber": 295
  },
  {
    "__docId__": 368,
    "kind": "testIt",
    "name": "it240",
    "testId": 240,
    "memberof": "test/RuntimeUA.spec.js~describe219.describe237",
    "testDepth": 2,
    "static": true,
    "longname": "test/RuntimeUA.spec.js~describe219.describe237.it240",
    "access": null,
    "description": "should be deployed",
    "lineNumber": 304
  },
  {
    "__docId__": 369,
    "kind": "testFile",
    "name": "test/Sandbox.spec.js",
    "content": "import SandboxRegistry from '../src/sandbox/SandboxRegistry';\r\nimport Sandbox from '../src/sandbox/Sandbox';\r\n\r\nimport chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\n\r\nlet expect = chai.expect;\r\nchai.use(chaiAsPromised);\r\n\r\ndescribe('Sandbox', function() {\r\n  let externalURL = 'hyperty-runtime://sandbox/external';\r\n  let internalURL = 'hyperty-runtime://sandbox/internal';\r\n\r\n  it('deploy and undeploy', function(done) {\r\n    let deploySend;\r\n\r\n    let sb = new Sandbox();\r\n    sb._onPostMessage = (msg) => {\r\n      console.log(msg);\r\n      if (msg.id === 1) {\r\n        expect(msg).to.eql({\r\n          id: 1, type: 'create', from: externalURL, to: internalURL,\r\n          body: { url: 'hyperty://fake-url', sourceCode: '<source code>', config: {init: '<init>'} }\r\n        });\r\n      }\r\n\r\n      if (msg.id  === 2) {\r\n        expect(msg).to.eql({\r\n          id: 2, type: 'delete', from: externalURL, to: internalURL,\r\n          body: { url: 'hyperty://fake-url' }\r\n        });\r\n      }\r\n\r\n      deploySend(msg);\r\n    };\r\n\r\n    let bus = {\r\n      addListener: (url, callback) => {\r\n        expect(url).to.eql(internalURL);\r\n        deploySend = callback;\r\n      },\r\n\r\n      postMessage: (msg) => {\r\n        expect(msg).to.eql({\r\n          id: msg.id, type: 'response', from: internalURL, to: externalURL,\r\n          body: { code: 200 }\r\n        });\r\n\r\n        sb._onMessage(msg);\r\n      },\r\n\r\n      removeAllListenersOf: (url) => {\r\n        expect(url).to.eql('hyperty://fake-url');\r\n      }\r\n    };\r\n\r\n    let sbr = new SandboxRegistry(bus);\r\n    sbr._create = (url, sourceCode, config) => {\r\n      expect(url).to.eql('hyperty://fake-url');\r\n      expect(sourceCode).to.eql('<source code>');\r\n      expect(config).to.eql({init: '<init>'});\r\n      return '<instance>';\r\n    };\r\n\r\n    expect(sb.deployComponent('<source code>', 'hyperty://fake-url', {init: '<init>'}).then((deployReply) => {\r\n      expect(deployReply).to.eql('deployed');\r\n      expect(sbr.components).to.eql({'hyperty://fake-url': '<instance>'});\r\n\r\n      return sb.removeComponent('hyperty://fake-url').then((unDeployReply) => {\r\n        expect(unDeployReply).to.eql('undeployed');\r\n        expect(sbr.components).to.eql({});\r\n      });\r\n    })).notify(done);\r\n  });\r\n\r\n  it('deploy url duplication rejected', function(done) {\r\n    let deploySend;\r\n\r\n    let sb = new Sandbox();\r\n    sb._onPostMessage = (msg) => { deploySend(msg); };\r\n\r\n    let bus = {\r\n      addListener: (url, callback) => {\r\n        deploySend = callback;\r\n      },\r\n\r\n      postMessage: (msg) => {\r\n        sb._onMessage(msg);\r\n      }\r\n    };\r\n\r\n    let sbr = new SandboxRegistry(bus);\r\n    sbr._create = (url, sourceCode, config) => {\r\n      return '<instance>';\r\n    };\r\n\r\n    expect(sb.deployComponent('<source code>', 'hyperty://fake-url', {init: '<init>'}).then((deployReply) => {\r\n      expect(deployReply).to.eql('deployed');\r\n      expect(sbr.components).to.eql({'hyperty://fake-url': '<instance>'});\r\n      return expect(sb.deployComponent('<source code>', 'hyperty://fake-url', {init: '<init>'})).to.be.rejectedWith('Instance hyperty://fake-url already exist!');\r\n    })).notify(done);\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/Sandbox.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "testDescribe",
    "name": "describe241",
    "testId": 241,
    "memberof": "test/Sandbox.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/Sandbox.spec.js~describe241",
    "access": null,
    "description": "Sandbox",
    "lineNumber": 10
  },
  {
    "__docId__": 371,
    "kind": "testIt",
    "name": "it242",
    "testId": 242,
    "memberof": "test/Sandbox.spec.js~describe241",
    "testDepth": 1,
    "static": true,
    "longname": "test/Sandbox.spec.js~describe241.it242",
    "access": null,
    "description": "deploy and undeploy",
    "lineNumber": 14
  },
  {
    "__docId__": 372,
    "kind": "testIt",
    "name": "it243",
    "testId": 243,
    "memberof": "test/Sandbox.spec.js~describe241",
    "testDepth": 1,
    "static": true,
    "longname": "test/Sandbox.spec.js~describe241.it243",
    "access": null,
    "description": "deploy url duplication rejected",
    "lineNumber": 76
  },
  {
    "__docId__": 373,
    "kind": "testFile",
    "name": "test/SyncherManager.spec.js",
    "content": "import { runtimeFactory } from './resources/runtimeFactory';\r\nimport {Syncher, DataObjectReporter, DataObjectObserver} from 'service-framework/dist/Syncher';\r\nimport SyncherManager from '../src/syncher/SyncherManager';\r\nimport DataObjectsStorage from '../src//store-objects/DataObjectsStorage';\r\nimport MessageBus from '../src/bus/MessageBus';\r\n\r\nimport PEP from '../src/policy/PEP';\r\nimport RuntimeCoreCtx from '../src/policy/context/RuntimeCoreCtx';\r\n\r\nimport chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\n\r\nchai.config.truncateThreshold = 0;\r\n\r\nlet expect = chai.expect;\r\nchai.use(chaiAsPromised);\r\n\r\ndescribe('SyncherManager', function() {\r\n  let storageManager = runtimeFactory.storageManager();\r\n  let dataObjectsStorage = new DataObjectsStorage(storageManager, {});\r\n\r\n  let schemaURL = 'schema://fake-schema-url';\r\n  let runtimeURL = 'hyperty-runtime://fake-runtime';\r\n\r\n  let objURL = 'resource://obj1';\r\n  let objURLChanges = objURL + '/changes';\r\n\r\n  let hyperURL1 = 'hyperty://h1.domain/h1';\r\n  let hyperURL2 = 'hyperty://h2.domain/h2';\r\n\r\n  let initialData = {\r\n    communication: { name: 'chat-x' },\r\n    x: 10, y: 10\r\n  };\r\n\r\n  let msgNodeResponseFunc = (bus, msg) => {\r\n\r\n    if (msg.type === 'subscribe') {\r\n      if (msg.id === 2) {\r\n        //reporter subscribe\r\n        expect(msg).to.contain.all.keys({\r\n          id: 2, type: 'subscribe', from: 'hyperty-runtime://fake-runtime/sm', to: 'domain://msg-node.h1.domain/sm',\r\n          body: { resources: [objURL + '/children/children1', objURL + '/children/children2'], source: hyperURL1 }\r\n        });\r\n      } else {\r\n        //observer subscribe\r\n        expect(msg).to.contain.all.keys({\r\n          id: 5, type: 'subscribe', from: 'hyperty-runtime://fake-runtime/sm', to: 'domain://msg-node.obj1/sm',\r\n          body: { resources: [objURL + '/changes', objURL + '/children/children1', objURL + '/children/children2'], source: hyperURL2 }\r\n        });\r\n      }\r\n\r\n      //simulate msg-node response\r\n      bus.postMessage({\r\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n        body: { code: 200 }\r\n      });\r\n    }\r\n  };\r\n\r\n  //fake object allocator -> always return the same URL\r\n  let allocator = {\r\n    create: () => {\r\n      return new Promise((resolve) => {\r\n        resolve({address: [objURL]});\r\n      });\r\n    }\r\n  };\r\n\r\n  let registry = {\r\n    registerDataObject: (objectRegistration) => {\r\n      console.log('REGISTRY-OBJECT: ', objectRegistration);\r\n      return new Promise((resolve) => {\r\n        resolve('ok');\r\n      });\r\n    },\r\n\r\n    isInterworkingProtoStub: (url) => {\r\n      console.log('isInterworkingProtoStub: ', url);\r\n      return false;\r\n    },\r\n\r\n    getPreAuthSubscribers: () => {\r\n      return ['hyperty://domain/hyperty-instance'];\r\n    },\r\n    getHypertyName: () => {\r\n      return 'HypertyChat';\r\n    },\r\n    isDataObjectURL: (dataObjectURL) => {\r\n      let splitURL = dataObjectURL.split.skip('://');\r\n      return splitURL[0] === 'comm';\r\n    },\r\n    registerSubscribedDataObject: () => {},\r\n    registerSubscriber: () => {},\r\n    isLocal: (url) => {\r\n      console.log('isLocal: ', url);\r\n      return false;\r\n    },\r\n    runtimeURL: 'runtime://localhost/7601'\r\n  };\r\n\r\n  let identityModule = {\r\n    decryptMessage: (message) => {\r\n      return new Promise((resolve) => {\r\n        resolve(message);\r\n      });\r\n    },\r\n    encryptMessage: (message) => {\r\n      return new Promise((resolve) => {\r\n        resolve(message);\r\n      });\r\n    },\r\n    getToken: () => {\r\n      return new Promise((resolve) => {\r\n        resolve({ userProfile: {username: 'user@domain' } });\r\n      });\r\n    }\r\n  };\r\n\r\n  let catalog = {\r\n    getDataSchemaDescriptor: (schema) => {\r\n      console.log('REQUEST-SCHEMA: ', schema);\r\n      return new Promise((resolve, reject) => {\r\n        if (schema) {\r\n          resolve({ sourcePackage: { sourceCode: {\r\n            properties: {\r\n              scheme: { constant: 'resource' },\r\n              children: { constant: ['children1', 'children2'] }\r\n            }\r\n          }}});\r\n        } else {\r\n          reject('No schema provided');\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  let runtimeCoreCtx = new RuntimeCoreCtx(runtimeURL, identityModule, registry, storageManager, runtimeFactory.runtimeCapabilities());\r\n  let policyEngine = new PEP(runtimeCoreCtx);\r\n\r\n  let handlers = [\r\n\r\n    // Policy message authorise\r\n    function(ctx) {\r\n      policyEngine.authorise(ctx.msg).then(function(changedMgs) {\r\n\r\n        changedMgs.body.identity = {\r\n          userProfile: {\r\n            userURL: 'user://user@domain.pt'\r\n          }\r\n        };\r\n\r\n        ctx.msg = changedMgs;\r\n        ctx.next();\r\n      }).catch(function(reason) {\r\n        console.error(reason);\r\n        ctx.fail(reason);\r\n      });\r\n    }\r\n  ];\r\n\r\n  it('reporter read', function(done) {\r\n    let bus = new MessageBus();\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('_onPostMessage: ', msg);\r\n      msgNodeResponseFunc(bus, msg);\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync2 = new Syncher(hyperURL2, bus, { runtimeURL: runtimeURL });\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [], initialData).then((dor) => {\r\n      console.log('on-create-reply', dor.onRead);\r\n      dor.onRead((event) => {\r\n        console.log('on-read');\r\n        event.accept();\r\n      });\r\n\r\n      sync2.read(dor.url).then((data) => {\r\n        console.log('on-read-reply', data);\r\n        expect(data).to.contain.all.keys({ communication: { name: 'chat-x' }, x: 10, y: 10 });\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  it('reporter observer integration', function(done) {\r\n    let bus = new MessageBus();\r\n    bus.pipeline.handlers = handlers;\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('[reporter observer integration - onPostMessage]: ', msg);\r\n\r\n      msgNodeResponseFunc(bus, msg);\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync2 = new Syncher(hyperURL2, bus, { runtimeURL: runtimeURL });\r\n    sync2.onNotification((notifyEvent) => {\r\n      console.log('on-create-notify: ', notifyEvent);\r\n\r\n      notifyEvent.ack();\r\n\r\n      sync2.subscribe(schemaURL, notifyEvent.url, true, false).then((doo) => {\r\n        console.log('on-subscribe-reply', doo, doo.data);\r\n\r\n        doo.onChange('*', (changeEvent) => {\r\n          console.log('on-change: ', JSON.stringify(changeEvent));\r\n          expect(changeEvent).to.contain.all.keys({ cType: 'add', oType: 'object', field: 'test', data: ['a', 'b', 'c'] });\r\n          expect(doo.data).to.contain.all.keys({ communication: { name: 'chat-x' }, x: 10, y: 10, test: ['a', 'b', 'c'] });\r\n          done();\r\n        });\r\n      });\r\n    });\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [], initialData, true, false).then((dor) => {\r\n      console.log('on-create-reply', dor);\r\n      dor.inviteObservers([hyperURL2]);\r\n\r\n      dor.onSubscription((subscribeEvent) => {\r\n        console.log('on-resources: ', subscribeEvent);\r\n\r\n        //we may have some problems in the time sequence here.\r\n        //change-msg can reach the observer first\r\n        subscribeEvent.accept();\r\n\r\n        // TODO: We had the settimeout because when the proxyobserve trigger will trigger with this version of object..\r\n        // this hack should make it trigger in next cycle;\r\n        setTimeout(() => {\r\n          dor.data.test = ['a', 'b', 'c'];\r\n        });\r\n\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should resume observers', function(done) {\r\n\r\n    let bus = new MessageBus();\r\n    bus._onMessage((a) => {\r\n      console.log('BUS:', a);\r\n    });\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('_onPostMessage: ', msg);\r\n      msgNodeResponseFunc(bus, msg);\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let a;\r\n\r\n    let sync2 = new Syncher(hyperURL2, bus, { runtimeURL: runtimeURL });\r\n    sync2.resumeObservers({}).then((doos) => {\r\n\r\n      console.log('on-subscribe-resume-reply', doos);\r\n\r\n      Object.values(doos).forEach((doo) => {\r\n        console.log('on-subscribe-resume-reply DataObjectObserver: ', doo);\r\n\r\n        expect(doo.data).to.contain.all.keys({ communication: { name: 'chat-x' }, x: 10, y: 10, test: ['a', 'b', 'c']});\r\n\r\n        // doo.onChange('*', (changeEvent) => {\r\n        //   console.log('on-subscribe-resume on-change: ', JSON.stringify(changeEvent), doo.data);\r\n        //   expect(changeEvent).to.contain.all.keys({ cType: 'add', oType: 'object', field: 'test', data: ['a', 'b', 'c'] });\r\n        // });\r\n\r\n        done();\r\n      });\r\n\r\n      a.data.test = ['a', 'b', 'c'];\r\n\r\n    }).catch((error) => {\r\n      expect(error).to.be.equal('No data objects observers to be resumed')\r\n      done();\r\n    });\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [], initialData).then((dor) => {\r\n      console.log('on-create-resume-reply', dor);\r\n      a = dor;\r\n      dor.inviteObservers([hyperURL2]);\r\n\r\n      dor.onRead((readEvent) => {\r\n        readEvent.accept();\r\n      });\r\n\r\n      dor.onSubscription((subscribeEvent) => {\r\n        console.log('on-resume-resources: ', subscribeEvent);\r\n\r\n        //we may have some problems in the time sequence here.\r\n        //change-msg can reach the observer first\r\n        subscribeEvent.accept();\r\n      });\r\n    });\r\n\r\n  });\r\n\r\n  it('should resume reporters', function(done) {\r\n\r\n    let bus = new MessageBus();\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('_onPostMessage: ', msg);\r\n      msgNodeResponseFunc(bus, msg);\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.resumeReporters({}).then((dors) => {\r\n\r\n      console.log('on-subscribe-resume-reply', dors);\r\n\r\n      Object.values(dors).forEach((dor) => {\r\n\r\n        console.log('on-create-resume-reply DataObjectReporter: ', dor);\r\n\r\n        dor.data.newTest = ['a', 'b', 'c'];\r\n        expect(dor.data).to.contain.all.keys({ communication: { name: 'chat-x' }, x: 10, y: 10, test: ['a', 'b', 'c'], newTest: ['a', 'b', 'c'] });\r\n        done();\r\n\r\n      });\r\n\r\n    }).catch((error) => {\r\n      console.log('AQUI:', error);\r\n      expect(error).to.be.equal('No data objects reporters to be resumed')\r\n      done();\r\n    });\r\n\r\n  });\r\n\r\n  // TODO we should update the ProxyObject on service-framework to make test pass\r\n  // TODO or we should update the tests messages, because the order;\r\n  it.skip('verify produced sync messages', function(done) {\r\n    this.timeout(10000);\r\n\r\n    let seq = 0;\r\n    let data;\r\n\r\n    let bus = {\r\n      postMessage: (msg, replyCallback) => {\r\n        seq++;\r\n        console.log('replyCallback:', replyCallback);\r\n        console.log('3-postMessage: (seq === ' + seq + ')', JSON.stringify(msg));\r\n\r\n        if (seq === 1) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 1, source: hyperURL1, attribute: '1',\r\n              value: {\r\n                name: 'Micael',\r\n                birthdate: '28-02-1981',\r\n                email: 'micael-xxx@gmail.com',\r\n                phone: 911000000\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        if (seq === 2) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 2, source: hyperURL1, attribute: '1.obj1',\r\n              value: {\r\n                name: 'xpto'\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        if (seq === 3) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 3, source: hyperURL1, attribute: '2',\r\n              value: {\r\n                name: 'Luis Duarte',\r\n                birthdate: '02-12-1991',\r\n                email: 'luis-xxx@gmail.com',\r\n                phone: 910000000\r\n              }\r\n            }\r\n          });\r\n\r\n          //apply changes...\r\n          data['1'].name = 'Micael Pedrosa';\r\n          data['1'].birthdate = new Date(1982, 1, 28).toUTCString();\r\n          data['1'].obj1.name = 'XPTO';\r\n        }\r\n\r\n/*        if (seq === 3) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 3, source: hyperURL1, attribute: '2' }\r\n          });\r\n        }*/\r\n\r\n        if (seq === 4) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 4, source: hyperURL1, attribute: '1.name', value: 'Micael Pedrosa' }\r\n          });\r\n\r\n        }\r\n\r\n        if (seq === 5) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 5, source: hyperURL1, attribute: '1.birthdate', value: new Date(1982, 1, 28).toUTCString() }\r\n          });\r\n\r\n        }\r\n\r\n        if (seq === 6) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 6, source: hyperURL1, attribute: '1.obj1.name', value: 'XPTO' }\r\n          });\r\n\r\n          //apply changes...\r\n          data['1'].arr = [1, 0, { x: 10, y: 20 }];\r\n        }\r\n\r\n        if (seq === 7) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 7, source: hyperURL1, attribute: '1.arr', value: [1, 0, {x: 10, y: 20}] }\r\n          });\r\n\r\n          //apply changes...\r\n          data['1'].arr[1] = 2;\r\n        }\r\n\r\n        if (seq === 8) {\r\n          console.log('data', data);\r\n\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 8, source: hyperURL1, attributeType: 'array', attribute: '1.arr.1', value: 2 }\r\n          });\r\n\r\n          //apply changes...\r\n          setTimeout(() => {\r\n            data['1'].arr.push(3);\r\n            data['1'].arr.push({ x: 1, y: 2 });\r\n          });\r\n\r\n          done();\r\n        }\r\n\r\n        if (seq === 9) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 9, source: hyperURL1, attributeType: 'array', operation: 'add', attribute: '1.arr.3', value: 3 }\r\n          });\r\n        }\r\n\r\n        if (seq === 10) {\r\n\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 10, source: hyperURL1, attributeType: 'array', operation: 'add', attribute: '1.arr.4', value: {x: 1, y: 2} }\r\n          });\r\n\r\n          //apply changes...\r\n          data['1'].arr.splice(1, 2, 10, 11, 12);\r\n          data['1'].arr[5].x = 10;\r\n        }\r\n\r\n        if (seq === 11) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 11, source: 'hyperty://h1.domain/h1', attribute: '1.arr.4.x', value: 10 }\r\n          });\r\n\r\n          // done();\r\n        }\r\n\r\n        if (seq === 12) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 12, source: hyperURL1, attributeType: 'array', operation: 'remove', attribute: '1.arr.1', value: 2 }\r\n          });\r\n        }\r\n\r\n        if (seq === 13) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 12, source: hyperURL1, attributeType: 'array', operation: 'add', attribute: '1.arr.1', value: [10, 11, 12] }\r\n          });\r\n        }\r\n\r\n        if (seq === 14) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 13, source: hyperURL1, attribute: '1.arr.5.x', value: 10 }\r\n          });\r\n\r\n          //apply changes...\r\n          data['1'].arr.pop();\r\n        }\r\n\r\n        if (seq === 14) {\r\n          expect(msg).to.deep.equal({\r\n            type: 'update', from: objURL, to: objURLChanges,\r\n            body: { version: 14, source: hyperURL1, attributeType: 'array', operation: 'remove', attribute: '1.arr.5', value: 1 }\r\n          });\r\n\r\n          done();\r\n        }\r\n      },\r\n\r\n      addListener: (url, callback) => {\r\n        console.log('3-addListener', url, callback);\r\n      }\r\n    };\r\n\r\n    //BEGIN: skip message system (already tested in previous units) and manually create a reporter and subscription, this should not be done in real code.\r\n    let sync = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n\r\n        /*\r\n        input.syncher ? _this._syncher = input.syncher : throwMandatoryParmMissingError('syncher');\r\n    input.url ?  _this._url = input.url : throwMandatoryParmMissingError('url');\r\n    input.created ? _this._created = input.created : throwMandatoryParmMissingError('created');\r\n    input.reporter ? _this._reporter = input.reporter : throwMandatoryParmMissingError('reporter');\r\n    input.runtime ? _this._runtime = input.runtime : throwMandatoryParmMissingError('runtime');\r\n    input.schema ? _this._schema = input.schema : throwMandatoryParmMissingError('schema');\r\n    input.name ? _this._name = input.name : throwMandatoryParmMissingError('name');\r\n    */\r\n    let dataObjectReporter = {\r\n      syncher: sync,\r\n      url: objURL,\r\n      created: new Date().toUTCString(),\r\n      reporter: hyperURL1,\r\n      schema: schemaURL,\r\n      runtime: runtimeURL,\r\n      name: 'test1'\r\n    };\r\n\r\n    let reporter = new DataObjectReporter(dataObjectReporter);\r\n    reporter.subscriptions[hyperURL2] = { status: 'on' };\r\n    sync.reporters[objURL] = reporter;\r\n\r\n    //END\r\n    data = reporter.data;\r\n\r\n    //apply changes...\r\n    data['1'] = { name: 'Micael', birthdate: '28-02-1981', email: 'micael-xxx@gmail.com', phone: 911000000};\r\n    data['1'].obj1 = { name: 'xpto' };\r\n    data['2'] = { name: 'Luis Duarte', birthdate: '02-12-1991', email: 'luis-xxx@gmail.com', phone: 910000000 };\r\n  });\r\n\r\n  // TODO we should update the ProxyObject on service-framework to make test pass\r\n  // TODO or we should update the tests messages, because the order;\r\n  it.skip('verify consumed sync messages', function(done) {\r\n    this.timeout(10000);\r\n\r\n    let post;\r\n    let bus = {\r\n      addListener: (url, callback) => {\r\n        console.log('4-addListener', url);\r\n\r\n        if (url === objURLChanges) {\r\n          post = callback;\r\n        }\r\n      }\r\n    };\r\n\r\n    //BEGIN: skip message system (already tested in previous units) and manually create an observer, this should not be done in real code.\r\n    let seq = 0;\r\n    let data;\r\n    let compacted = false;\r\n\r\n    let sync = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n\r\n    let dataObjectObserver = {\r\n      syncher: sync,\r\n      url: objURL,\r\n      created: new Date().toUTCString(),\r\n      reporter: hyperURL1,\r\n      schema: schemaURL,\r\n      runtime: runtimeURL,\r\n      name: 'test1'\r\n    };\r\n\r\n    let observer = new DataObjectObserver(dataObjectObserver);\r\n    sync.observers[objURL] = observer;\r\n\r\n    // let observer = new DataObjectObserver(sync, objURL, schemaURL, 'on', { data: {}, childrens: {} }, [], 0);\r\n\r\n    observer.onChange('*', (event) => {\r\n      seq++;\r\n      console.log('4-onChange: (seq === ' + seq + ')', JSON.stringify(event));\r\n\r\n      if (seq === 1) {\r\n        expect(event).to.contain.all.keys({ cType: 'add', oType: 'object', field: '1', data: { name: 'Micael', birthdate: '28-01-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: { name: 'xpto' } } });\r\n      }\r\n\r\n      if (seq === 2) {\r\n        expect(event).to.contain.all.keys({ cType: 'add', oType: 'object', field: '2', data: { name: 'Luis Duarte', birthdate: '02-12-1991', email: 'luis-xxx@gmail.com', phone: 910000000, obj1: { name: 'xpto' } } });\r\n\r\n        //verify changes...\r\n        expect(data).to.contain.all.keys({\r\n          1: { name: 'Micael', birthdate: '28-01-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: { name: 'xpto' } },\r\n          2: { name: 'Luis Duarte', birthdate: '02-12-1991', email: 'luis-xxx@gmail.com', phone: 910000000, obj1: { name: 'xpto' } }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 3, attribute: '2' }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 4, attribute: '1.name', value: 'Micael Pedrosa' }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 5, attribute: '1.birthdate', value: '28-02-1981' }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 6, attribute: '1.obj1.name', value: 'XPTO' }\r\n        });\r\n      }\r\n\r\n      if (seq === 3) {\r\n        expect(event).to.contain.all.keys({ cType: 'remove', oType: 'object', field: '2' });\r\n      }\r\n\r\n      if (seq === 4) {\r\n        expect(event).to.contain.all.keys({ cType: 'update', oType: 'object', field: '1.name', data: 'Micael Pedrosa' });\r\n      }\r\n\r\n      if (seq === 5) {\r\n        expect(event).to.contain.all.keys({ cType: 'update', oType: 'object', field: '1.birthdate', data: '28-02-1981' });\r\n      }\r\n\r\n      if (seq === 6) {\r\n        expect(event).to.contain.all.keys({ cType: 'update', oType: 'object', field: '1.obj1.name', data: 'XPTO' });\r\n\r\n        //verify changes...\r\n        expect(data).to.contain.all.keys({\r\n          1: { name: 'Micael Pedrosa', birthdate: '28-02-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: { name: 'XPTO' } }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 7, attribute: '1.arr', value: [1, 0, { x: 10, y: 20 }] }\r\n        });\r\n      }\r\n\r\n      if (seq === 7) {\r\n        expect(event).to.contain.all.keys({ cType: 'add', oType: 'object', field: '1.arr', data: [1, 0, { x: 10, y: 20 }] });\r\n\r\n        //verify changes...\r\n        expect(data).to.contain.all.keys({\r\n          1: { name: 'Micael Pedrosa', birthdate: '28-02-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: {name: 'XPTO'}, arr: [1, 0, { x: 10, y: 20 }] }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 8, attributeType: 'array', attribute: '1.arr.1', value: 2 }\r\n        });\r\n      }\r\n\r\n      if (seq === 8) {\r\n        expect(event).to.contain.all.keys({ cType: 'update', oType: 'array', field: '1.arr.1', data: 2 });\r\n\r\n        //verify changes...\r\n        expect(data).to.contain.all.keys({\r\n          1: { name: 'Micael Pedrosa', birthdate: '28-02-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: {name: 'XPTO'}, arr: [1, 2, { x: 10, y: 20 }] }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 9, attributeType: 'array', operation: 'add', attribute: '1.arr.3', value: [3] }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 10, attributeType: 'array', operation: 'add', attribute: '1.arr.4', value: [{ x: 1, y: 2 }] }\r\n        });\r\n      }\r\n\r\n      if (seq === 9) {\r\n        if (event.data.length === 1) {\r\n          expect(event).to.contain.all.keys({ cType: 'add', oType: 'array', field: '1.arr.3', data: [3] });\r\n        } else {\r\n          //it's OK to compact 2 messages...\r\n          expect(event).to.contain.all.keys({ cType: 'add', oType: 'array', field: '1.arr.3', data: [3, { x: 1, y: 2 }]});\r\n          compacted = true;\r\n        }\r\n      }\r\n\r\n      if (seq === 10) {\r\n        if (!compacted) {\r\n          expect(event).to.contain.all.keys({ cType: 'add', oType: 'array', field: '1.arr.4', data: [{ x: 1, y: 2 }] });\r\n        }\r\n\r\n        compacted = false;\r\n\r\n        //verify changes...\r\n        expect(data).to.contain.all.keys({\r\n          1: { name: 'Micael Pedrosa', birthdate: '28-02-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: { name: 'XPTO' }, arr: [1, 2, { x: 10, y: 20 }, 3, { x: 1, y: 2 }]}\r\n        });\r\n\r\n        done();\r\n\r\n        /*\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 11, attributeType: 'array', operation: 'remove', attribute: '1.arr.1', value: 2 }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 12, attributeType: 'array', operation: 'add', attribute: '1.arr.1', value: [10, 11, 12] }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 13, attribute: '1.arr.5.x', value: 10 }\r\n        });\r\n        */\r\n      }\r\n\r\n      /*\r\n      if (seq === 11) {\r\n        expect(event).to.contain.all.keys({ cType: 'remove', oType: 'array', field: '1.arr.1', data: 2 });\r\n      }\r\n\r\n      if (seq === 12) {\r\n        expect(event).to.contain.all.keys({ cType: 'add', oType: 'array', field: '1.arr.1', data: [10, 11, 12] });\r\n      }\r\n\r\n      if (seq === 13) {\r\n        expect(event).to.contain.all.keys({ cType: 'update', oType: 'object', field: '1.arr.5.x', data: 10 });\r\n\r\n        //verify changes...\r\n        expect(data).to.contain.all.keys({\r\n          1: { name: 'Micael Pedrosa', birthdate: '28-02-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: { name: 'XPTO' }, arr: [1, 10, 11, 12, 3, { x: 10, y: 2 }] }\r\n        });\r\n\r\n        post({\r\n          type: 'update', from: objURL, to: objURLChanges,\r\n          body: { version: 14, attributeType: 'array', operation: 'remove', attribute: '1.arr.5', value: 1 }\r\n        });\r\n      }\r\n\r\n      if (seq === 14) {\r\n        expect(event).to.contain.all.keys({ cType: 'remove', oType: 'array', field: '1.arr.5', data: 1 });\r\n\r\n        //verify changes...\r\n        expect(data).to.contain.all.keys({\r\n          1: { name: 'Micael Pedrosa', birthdate: '28-02-1981', email: 'micael-xxx@gmail.com', phone: 911000000, obj1: { name: 'XPTO' }, arr: [1, 10, 11, 12, 3] }\r\n        });\r\n\r\n        done();\r\n      }\r\n      */\r\n    });\r\n\r\n    //END\r\n    data = observer.data;\r\n\r\n    post({\r\n      type: 'update', from: objURL, to: objURLChanges,\r\n      body: { version: 1, attribute: '1',\r\n        value: {\r\n          name: 'Micael',\r\n          birthdate: '28-01-1981',\r\n          email: 'micael-xxx@gmail.com',\r\n          phone: 911000000,\r\n          obj1: { name: 'xpto'}\r\n        }\r\n      }\r\n    });\r\n\r\n    post({\r\n      type: 'update', from: objURL, to: objURLChanges,\r\n      body: { version: 2, attribute: '2',\r\n        value: {\r\n          name: 'Luis Duarte',\r\n          birthdate: '02-12-1991',\r\n          email: 'luis-xxx@gmail.com',\r\n          phone: 910000000,\r\n          obj1: { name: 'xpto' }\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  it('reporter addChild', function(done) {\r\n    let bus = new MessageBus();\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('5-_onPostMessage: ', msg);\r\n      msgNodeResponseFunc(bus, msg);\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [], initialData).then((dor) => {\r\n      console.log('on-create-reply');\r\n      dor.addChild('children1', {message: 'my message'}).then((doc) => {\r\n        console.log('on-addChild-reply', doc);\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  it('observer addChild', function(done) {\r\n    let bus = new MessageBus();\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('6-_onPostMessage: ', msg);\r\n      msgNodeResponseFunc(bus, msg);\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync2 = new Syncher(hyperURL2, bus, { runtimeURL: runtimeURL });\r\n\r\n    sync2.onNotification((notifyEvent) => {\r\n      console.log('on-create-notify: ', notifyEvent);\r\n      notifyEvent.ack();\r\n\r\n      sync2.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n        console.log('on-subscribe-reply');\r\n        doo.addChild('children1', { message: 'Hello World!' }).then((doc) => {\r\n          console.log('on-local-addChild', doc);\r\n\r\n          doc.onResponse((event) => {\r\n            console.log('on-remote-addChild-reply', event);\r\n            expect(event).to.contain.all.keys({ type: 'response', url: hyperURL1, code: 200 });\r\n          });\r\n        });\r\n\r\n      });\r\n    });\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [hyperURL2], initialData).then((dor) => {\r\n      console.log('on-create-reply');\r\n      dor.onSubscription((subscribeEvent) => {\r\n        dor.onAddChild((event) => {\r\n          console.log('on-remote-addChild', event);\r\n          delete event.identity;\r\n          expect(event).to.contain.all.keys({\r\n            type: 'create',\r\n            from: hyperURL2,\r\n            url: 'resource://obj1/children/children1',\r\n            childId: hyperURL2 + '#1',\r\n            value: { message: 'Hello World!'}\r\n          });\r\n          done();\r\n        });\r\n        console.log('on-resources: ', subscribeEvent);\r\n        subscribeEvent.accept();\r\n      });\r\n    });\r\n\r\n  });\r\n\r\n  it('children deltas generate and process', function(done) {\r\n    let bus = new MessageBus();\r\n    bus.pipeline.handlers = handlers;\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('7-_onPostMessage: ', msg);\r\n      msgNodeResponseFunc(bus, msg);\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync2 = new Syncher(hyperURL2, bus, { runtimeURL: runtimeURL });\r\n    sync2.onNotification((notifyEvent) => {\r\n      notifyEvent.ack();\r\n\r\n      sync2.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n        doo.addChild('children1', { message: 'Hello Micael!' }).then((doc) => {\r\n          doc.data.message = 'Hello Luis!';\r\n        });\r\n      });\r\n    });\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [hyperURL2], initialData).then((dor) => {\r\n      dor.onSubscription((subscribeEvent) => {\r\n        dor.onAddChild((event) => {\r\n          let children1 = dor.childrens[event.childId];\r\n          children1.onChange((changeEvent) => {\r\n            console.log('onChange: ', changeEvent);\r\n            expect(changeEvent).to.contain.all.keys({ cType: 'update', oType: 'object', field: 'message', data: 'Hello Luis!' });\r\n            expect(children1.data).to.contain.all.keys({ message: 'Hello Luis!' });\r\n            done();\r\n          });\r\n        });\r\n\r\n        subscribeEvent.accept();\r\n      });\r\n    });\r\n  });\r\n\r\n  it('create and delete', function(done) {\r\n    let deleted = false;\r\n\r\n    let bus = new MessageBus();\r\n    bus.pipeline.handlers = handlers;\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('8-_onPostMessage: ', msg);\r\n      if (msg.type === 'subscribe') {\r\n        bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 200 }\r\n        });\r\n      } else if (msg.type === 'delete') {\r\n        //expect delete message to msg-node\r\n        if (msg.from === runtimeURL + '/sm') {\r\n          expect(msg.to).to.eql('domain://msg-node.h1.domain/object-address-allocation');\r\n          expect(msg.body.resource).to.eql(objURL);\r\n        }\r\n\r\n        if (msg.from === objURL + '/subscription') {\r\n          deleted = true;\r\n        }\r\n      }\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync2 = new Syncher(hyperURL2, bus, { runtimeURL: runtimeURL });\r\n    sync2.onNotification((notifyEvent) => {\r\n      console.log('onNotification: ', notifyEvent);\r\n      if (notifyEvent.type === 'create') {\r\n        notifyEvent.ack(100);\r\n        sync2.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n          console.log('resources: ', doo.url);\r\n        });\r\n      } else if (notifyEvent.type === 'delete') {\r\n        notifyEvent.ack(100);\r\n        expect(deleted).to.eql(true);\r\n        done();\r\n      }\r\n    });\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [hyperURL2], initialData).then((dor) => {\r\n      console.log('create: ', dor.url);\r\n      dor.onSubscription((subscribeEvent) => {\r\n        console.log('onSubscription: ', subscribeEvent);\r\n        subscribeEvent.accept();\r\n\r\n        setTimeout(() => {\r\n          expect(sync1.reporters[dor.url]).to.eql(dor);\r\n          dor.delete();\r\n          delete sync1.reporters[dor.url];\r\n          expect(sync1.reporters[dor.url]).to.be.empty;\r\n          console.log('reporter-deleted');\r\n        }, 100);\r\n\r\n      });\r\n    });\r\n  });\r\n\r\n  it('subscribe and unsubscribe', function(done) {\r\n    let bus = new MessageBus();\r\n    bus.pipeline.handlers = handlers;\r\n\r\n    bus._onPostMessage = (msg) => {\r\n      console.log('8-_onPostMessage: ', msg);\r\n      if (msg.type === 'subscribe') {\r\n        bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 200 }\r\n        });\r\n      } else if (msg.type === 'unsubscribe') {\r\n        //expect delete message to msg-node\r\n        expect(msg.from).to.eql(runtimeURL + '/sm');\r\n        expect(msg.to).to.eql('domain://msg-node.h2.domain/sm');\r\n        expect(msg.body.resource).to.eql(objURL);\r\n        done();\r\n      }\r\n    };\r\n\r\n    new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n    let sync2 = new Syncher(hyperURL2, bus, { runtimeURL: runtimeURL });\r\n    sync2.onNotification((notifyEvent) => {\r\n      console.log('onNotification: ', notifyEvent);\r\n      sync2.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n        console.log('resources: ', doo.url);\r\n        doo.unsubscribe();\r\n      });\r\n    });\r\n\r\n    let sync1 = new Syncher(hyperURL1, bus, { runtimeURL: runtimeURL });\r\n    sync1.create(schemaURL, [hyperURL2], initialData).then((dor) => {\r\n      console.log('create: ', dor.url);\r\n      dor.onSubscription((subscribeEvent) => {\r\n        console.log('onSubscription: ', subscribeEvent);\r\n        subscribeEvent.accept();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('should use the storageManager', function() {\r\n\r\n    let hyperties = {};\r\n\r\n    // let sync1DataObjectReporter;\r\n    // let sync2DataObjectObserver;\r\n    // let sync3DataObjectObserver;\r\n\r\n    it('should save the url on storageManager', function(done) {\r\n\r\n      let bus = new MessageBus();\r\n      bus.pipeline.handlers = handlers;\r\n\r\n      bus._onPostMessage = function(msg)  {\r\n        console.log('8-_onPostMessage: ', msg);\r\n        if (msg.type === 'subscribe') {\r\n          bus.postMessage({\r\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n            body: { code: 200 }\r\n          });\r\n        }\r\n      };\r\n\r\n      function guid() {\r\n        function s4() {\r\n          return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16)\r\n            .substring(1);\r\n        }\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n          s4() + '-' + s4() + s4() + s4();\r\n      }\r\n\r\n      let objURL = 'resource://domain/' + guid();\r\n\r\n      //fake object allocator -> always return the same URL\r\n      let allocator = {\r\n        create: () => {\r\n          return new Promise((resolve) => {\r\n            hyperties.object = objURL;\r\n            resolve({address: [objURL]});\r\n          });\r\n        }\r\n      };\r\n\r\n      new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n      let hypertyURL3 = 'hyperty://h1.domain/' + guid();\r\n      hyperties.h3 = hypertyURL3;\r\n      let sync3 = new Syncher(hypertyURL3, bus, { runtimeURL: runtimeURL });\r\n      sync3.onNotification((notifyEvent) => {\r\n        sync3.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n          //sync3DataObjectObserver = doo;\r\n          console.log('sync3 resources: ', doo.url);\r\n          done();\r\n        });\r\n      });\r\n\r\n      let hypertyURL2 = 'hyperty://h1.domain/' + guid();\r\n      hyperties.h2 = hypertyURL2;\r\n      let sync2 = new Syncher(hypertyURL2, bus, { runtimeURL: runtimeURL });\r\n      sync2.onNotification((notifyEvent) => {\r\n        sync2.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n          //sync2DataObjectObserver = doo;\r\n          console.log('sync2 resources:', doo.url);\r\n        });\r\n      });\r\n\r\n      let hypertyURL1 = 'hyperty://h1.domain/' + guid();\r\n      hyperties.h1 = hypertyURL1;\r\n      let sync1 = new Syncher(hypertyURL1, bus, { runtimeURL: runtimeURL });\r\n      sync1.create(schemaURL, [hypertyURL2, hypertyURL3], initialData, true, false).then((dor) => {\r\n        // sync1DataObjectReporter = dor;\r\n        dor.onSubscription((subscribeEvent) => {\r\n          subscribeEvent.accept();\r\n        });\r\n      });\r\n    });\r\n\r\n    it('should resume the url stored on storageManager', (done) => {\r\n\r\n      let bus = new MessageBus();\r\n      bus.pipeline.handlers = handlers;\r\n      bus._onPostMessage = (msg) => {\r\n        console.log('10-_onPostMessage: ', msg);\r\n\r\n        if (msg.type === 'subscribe') {\r\n          bus.postMessage({\r\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n            body: { code: 200 }\r\n          });\r\n        }\r\n\r\n        // TODO: remove the msg.body.version verification\r\n        // TODO: this could be related with the syncher synchronization mechanism\r\n        if (msg.type === 'update' && msg.body.version === 2) {\r\n          expect(msg.from).to.eql(hyperties.object);\r\n          expect(msg.to).to.eql(hyperties.object + '/changes');\r\n\r\n          done();\r\n        }\r\n\r\n      };\r\n\r\n      //fake object allocator -> always return the same URL\r\n      let allocator = {\r\n        create: function() {\r\n          return new Promise(function(resolve) {\r\n            resolve({address: [hyperties.object]});\r\n          });\r\n        }\r\n      };\r\n\r\n      new SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, dataObjectsStorage, identityModule);\r\n\r\n      let sync3 = new Syncher(hyperties.h3, bus, { runtimeURL: runtimeURL });\r\n      sync3.onNotification((notifyEvent) => {\r\n        sync3.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n          doo.onChange('*', function(changes) {\r\n            console.log('Sync 3: ', changes);\r\n          });\r\n          console.log('sync3 resources: ', doo.url);\r\n        });\r\n      });\r\n\r\n      let sync2 = new Syncher(hyperties.h2, bus, { runtimeURL: runtimeURL });\r\n      sync2.onNotification((notifyEvent) => {\r\n        sync2.subscribe(schemaURL, notifyEvent.url).then((doo) => {\r\n          doo.onChange('*', function(changes) {\r\n            console.log('Sync 2: ', changes);\r\n          });\r\n          console.log('sync2 resources:', doo.url);\r\n        });\r\n      });\r\n\r\n      let sync1 = new Syncher(hyperties.h1, bus, { runtimeURL: runtimeURL });\r\n      sync1.create(schemaURL, [hyperties.h2, hyperties.h3], initialData).then((dor) => {\r\n\r\n        dor.onSubscription((subscribeEvent) => {\r\n          subscribeEvent.accept();\r\n\r\n          dor.data.x = 20;\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/SyncherManager.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 374,
    "kind": "testDescribe",
    "name": "describe244",
    "testId": 244,
    "memberof": "test/SyncherManager.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244",
    "access": null,
    "description": "SyncherManager",
    "lineNumber": 18
  },
  {
    "__docId__": 375,
    "kind": "testIt",
    "name": "it245",
    "testId": 245,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it245",
    "access": null,
    "description": "reporter read",
    "lineNumber": 162
  },
  {
    "__docId__": 376,
    "kind": "testIt",
    "name": "it246",
    "testId": 246,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it246",
    "access": null,
    "description": "reporter observer integration",
    "lineNumber": 189
  },
  {
    "__docId__": 377,
    "kind": "testIt",
    "name": "it247",
    "testId": 247,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it247",
    "access": null,
    "description": "should resume observers",
    "lineNumber": 241
  },
  {
    "__docId__": 378,
    "kind": "testIt",
    "name": "it248",
    "testId": 248,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it248",
    "access": null,
    "description": "should resume reporters",
    "lineNumber": 303
  },
  {
    "__docId__": 379,
    "kind": "testIt",
    "name": "it249",
    "testId": 249,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it249",
    "access": null,
    "description": "reporter addChild",
    "lineNumber": 800
  },
  {
    "__docId__": 380,
    "kind": "testIt",
    "name": "it250",
    "testId": 250,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it250",
    "access": null,
    "description": "observer addChild",
    "lineNumber": 819
  },
  {
    "__docId__": 381,
    "kind": "testIt",
    "name": "it251",
    "testId": 251,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it251",
    "access": null,
    "description": "children deltas generate and process",
    "lineNumber": 872
  },
  {
    "__docId__": 382,
    "kind": "testIt",
    "name": "it252",
    "testId": 252,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it252",
    "access": null,
    "description": "create and delete",
    "lineNumber": 912
  },
  {
    "__docId__": 383,
    "kind": "testIt",
    "name": "it253",
    "testId": 253,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.it253",
    "access": null,
    "description": "subscribe and unsubscribe",
    "lineNumber": 974
  },
  {
    "__docId__": 384,
    "kind": "testDescribe",
    "name": "describe254",
    "testId": 254,
    "memberof": "test/SyncherManager.spec.js~describe244",
    "testDepth": 1,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.describe254",
    "access": null,
    "description": "should use the storageManager",
    "lineNumber": 1015
  },
  {
    "__docId__": 385,
    "kind": "testIt",
    "name": "it255",
    "testId": 255,
    "memberof": "test/SyncherManager.spec.js~describe244.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.describe254.it255",
    "access": null,
    "description": "should save the url on storageManager",
    "lineNumber": 1023
  },
  {
    "__docId__": 386,
    "kind": "testIt",
    "name": "it256",
    "testId": 256,
    "memberof": "test/SyncherManager.spec.js~describe244.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/SyncherManager.spec.js~describe244.describe254.it256",
    "access": null,
    "description": "should resume the url stored on storageManager",
    "lineNumber": 1094
  },
  {
    "__docId__": 387,
    "kind": "testFile",
    "name": "test/utils.spec.js",
    "content": "// Unit test modules\r\nimport chai from 'chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport sinonChai from 'sinon-chai';\r\n\r\n// internal modules to be tested\r\nimport {divideURL, splitObjectURL} from '../src/utils/utils';\r\n\r\nlet expect = chai.expect;\r\n\r\nchai.config.showDiff = true;\r\nchai.config.truncateThreshold = 0;\r\n\r\nchai.use(chaiAsPromised);\r\nchai.use(sinonChai);\r\n\r\ndescribe('Utils Module', function() {\r\n\r\n  it('should divide an url in 3 parts (type, domain, identity)', function() {\r\n\r\n    // http://localhost:9090/test\r\n    // hyperty://localhost:9090/test\r\n    // http://sp1.sp/test-testes\r\n    // hyperty-catalogue://sp1.sp/HelloHyperty\r\n    // runtime://sp1.sp/8456/sm\r\n    // domain://msg-node.sp1.sp/hyperty-address-allocation\r\n    // hyperty-runtime://sp1.sp\r\n\r\n    let url = 'runtime://sp.sp/8456/sm';\r\n    expect(divideURL(url)).to.deep.equal({type: 'runtime', domain: 'sp.sp', identity: '/8456/sm'});\r\n\r\n    url = 'domain://msg-node.sp1.sp/hyperty-address-allocation';\r\n    expect(divideURL(url)).to.deep.equal({type: 'domain', domain: 'msg-node.sp1.sp', identity: '/hyperty-address-allocation'});\r\n\r\n    url = 'hyperty://sp1.sp/HelloHyperty';\r\n    expect(divideURL(url)).to.deep.equal({type: 'hyperty', domain: 'sp1.sp', identity: '/HelloHyperty'});\r\n\r\n    url = 'hyperty://localhost:9090/test';\r\n    expect(divideURL(url)).to.deep.equal({type: 'hyperty', domain: 'localhost:9090', identity: '/test'});\r\n\r\n    url = 'runtime://sp1.sp';\r\n    expect(divideURL(url)).to.deep.equal({type: 'runtime', domain: 'sp1.sp', identity: ''});\r\n\r\n    url = 'http://localhost:9090/test';\r\n    expect(divideURL(url)).to.deep.equal({type: 'http', domain: 'localhost:9090', identity: '/test'});\r\n\r\n    url = 'https://localhost:9090/secure-test';\r\n    expect(divideURL(url)).to.deep.equal({type: 'https', domain: 'localhost:9090', identity: '/secure-test'});\r\n  });\r\n\r\n  it('should return the dataObjectURL identifier', function() {\r\n\r\n    expect(splitObjectURL('comm://localhost/f3b43208-63fa-468f-8fe0-ac3d20ca9dc0/children/chatmessages')).to.deep.eql({\r\n      url: 'comm://localhost/f3b43208-63fa-468f-8fe0-ac3d20ca9dc0',\r\n      resource: 'chatmessages'\r\n    });\r\n\r\n    expect(splitObjectURL('comm://localhost/f3b43208-63fa-468f-8fe0-ac3d20ca9dc0/children')).to.deep.eql({\r\n      url: 'comm://localhost/f3b43208-63fa-468f-8fe0-ac3d20ca9dc0',\r\n      resource: undefined\r\n    });\r\n\r\n    expect(splitObjectURL('comm://localhost/f3b43208-63fa-468f-8fe0-ac3d20ca9dc0')).to.deep.eql({\r\n      url: 'comm://localhost/f3b43208-63fa-468f-8fe0-ac3d20ca9dc0',\r\n      resource: undefined\r\n    });\r\n  });\r\n\r\n});\r\n",
    "static": true,
    "longname": "test/utils.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 388,
    "kind": "testDescribe",
    "name": "describe257",
    "testId": 257,
    "memberof": "test/utils.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/utils.spec.js~describe257",
    "access": null,
    "description": "Utils Module",
    "lineNumber": 17
  },
  {
    "__docId__": 389,
    "kind": "testIt",
    "name": "it258",
    "testId": 258,
    "memberof": "test/utils.spec.js~describe257",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.spec.js~describe257.it258",
    "access": null,
    "description": "should divide an url in 3 parts (type, domain, identity)",
    "lineNumber": 19
  },
  {
    "__docId__": 390,
    "kind": "testIt",
    "name": "it259",
    "testId": 259,
    "memberof": "test/utils.spec.js~describe257",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils.spec.js~describe257.it259",
    "access": null,
    "description": "should return the dataObjectURL identifier",
    "lineNumber": 51
  }
]