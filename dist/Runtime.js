// version: 0.17.0
// date: Fri Jun 14 2019 11:33:30 GMT+0100 (GMT+01:00)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


// version: 0.17.0
// date: Fri Jun 14 2019 11:33:30 GMT+0100 (GMT+01:00)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


System.register("[name]",[],function(__WEBPACK_DYNAMIC_EXPORT__){return{execute:function(){__WEBPACK_DYNAMIC_EXPORT__(function(c){var e={};function n(t){if(e[t])return e[t].exports;var g=e[t]={i:t,l:!1,exports:{}};return c[t].call(g.exports,g,g.exports,n),g.l=!0,g.exports}return n.m=c,n.c=e,n.d=function(c,e,t){n.o(c,e)||Object.defineProperty(c,e,{enumerable:!0,get:t})},n.r=function(c){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},n.t=function(c,e){if(1&e&&(c=n(c)),8&e)return c;if(4&e&&"object"==typeof c&&c&&c.__esModule)return c;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:c}),2&e&&"string"!=typeof c)for(var g in c)n.d(t,g,function(e){return c[e]}.bind(null,g));return t},n.n=function(c){var e=c&&c.__esModule?function(){return c.default}:function(){return c};return n.d(e,"a",e),e},n.o=function(c,e){return Object.prototype.hasOwnProperty.call(c,e)},n.p="",n(n.s=124)}([function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    "use strict";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    "use strict";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = "undefined";\n\n    var logMethods = [\n        "trace",\n        "debug",\n        "info",\n        "warn",\n        "error"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === \'function\') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === \'debug\') {\n            methodName = \'log\';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, \'log\');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn\'t present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = "loglevel";\n      if (name) {\n        storageKey += ":" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || \'silent\').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + "=" + levelName + ";";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + "=");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,\n          "ERROR": 4, "SILENT": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return "No console available for logging";\n              }\n          } else {\n              throw "log.setLevel() called with invalid level: " + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== "string" || name === "") {\n          throw new TypeError("You must supply a name when creating a logger.");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(2);\nvar core = __webpack_require__(8);\nvar hide = __webpack_require__(15);\nvar redefine = __webpack_require__(12);\nvar ctx = __webpack_require__(18);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcz81Y2ExIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcz83NzI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval("module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzPzc5ZTUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(5);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcz9jYjdjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},function(module,exports){eval("module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcz9kM2Y0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval("var store = __webpack_require__(49)('wks');\nvar uid = __webpack_require__(30);\nvar Symbol = __webpack_require__(2).Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcz8yYjRjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(20);\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcz85ZGVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n")},function(module,exports){eval("var core = module.exports = { version: '2.6.8' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanM/ODM3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjgnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(3)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzPzllMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){eval("var anObject = __webpack_require__(4);\nvar IE8_DOM_DEFINE = __webpack_require__(91);\nvar toPrimitive = __webpack_require__(27);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(9) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanM/ODZjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(25);\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanM/NGJmOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(2);\nvar hide = __webpack_require__(15);\nvar has = __webpack_require__(14);\nvar SRC = __webpack_require__(30)('src');\nvar $toString = __webpack_require__(129);\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(8).inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcz8yYWJhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar fails = __webpack_require__(3);\nvar defined = __webpack_require__(25);\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcz8zODZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n")},function(module,exports){eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanM/NjlhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){eval("var dP = __webpack_require__(10);\nvar createDesc = __webpack_require__(29);\nmodule.exports = __webpack_require__(9) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzPzMyZTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(45);\nvar defined = __webpack_require__(25);\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzPzY4MjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar fails = __webpack_require__(3);\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzPzJmMjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){eval("// optional / simple context binding\nvar aFunction = __webpack_require__(19);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanM/OWI0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n")},function(module,exports){eval("module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzP2Q4ZTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n")},function(module,exports){eval("// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzPzQ1ODgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){eval("var pIE = __webpack_require__(46);\nvar createDesc = __webpack_require__(29);\nvar toIObject = __webpack_require__(16);\nvar toPrimitive = __webpack_require__(27);\nvar has = __webpack_require__(14);\nvar IE8_DOM_DEFINE = __webpack_require__(91);\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(9) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcz8xMWU5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n")},function(module,exports,__webpack_require__){eval("// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(1);\nvar core = __webpack_require__(8);\nvar fails = __webpack_require__(3);\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzPzVlZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n")},function(module,exports,__webpack_require__){eval("// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = __webpack_require__(18);\nvar IObject = __webpack_require__(45);\nvar toObject = __webpack_require__(11);\nvar toLength = __webpack_require__(7);\nvar asc = __webpack_require__(107);\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzPzBhNDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n")},function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanM/MmQ5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n")},function(module,exports){eval('// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError("Can\'t call method on  " + it);\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzP2JlMTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){"use strict";eval("\nif (__webpack_require__(9)) {\n  var LIBRARY = __webpack_require__(31);\n  var global = __webpack_require__(2);\n  var fails = __webpack_require__(3);\n  var $export = __webpack_require__(1);\n  var $typed = __webpack_require__(60);\n  var $buffer = __webpack_require__(85);\n  var ctx = __webpack_require__(18);\n  var anInstance = __webpack_require__(43);\n  var propertyDesc = __webpack_require__(29);\n  var hide = __webpack_require__(15);\n  var redefineAll = __webpack_require__(44);\n  var toInteger = __webpack_require__(20);\n  var toLength = __webpack_require__(7);\n  var toIndex = __webpack_require__(118);\n  var toAbsoluteIndex = __webpack_require__(33);\n  var toPrimitive = __webpack_require__(27);\n  var has = __webpack_require__(14);\n  var classof = __webpack_require__(47);\n  var isObject = __webpack_require__(5);\n  var toObject = __webpack_require__(11);\n  var isArrayIter = __webpack_require__(77);\n  var create = __webpack_require__(34);\n  var getPrototypeOf = __webpack_require__(36);\n  var gOPN = __webpack_require__(35).f;\n  var getIterFn = __webpack_require__(79);\n  var uid = __webpack_require__(30);\n  var wks = __webpack_require__(6);\n  var createArrayMethod = __webpack_require__(23);\n  var createArrayIncludes = __webpack_require__(50);\n  var speciesConstructor = __webpack_require__(48);\n  var ArrayIterators = __webpack_require__(81);\n  var Iterators = __webpack_require__(41);\n  var $iterDetect = __webpack_require__(53);\n  var setSpecies = __webpack_require__(42);\n  var arrayFill = __webpack_require__(80);\n  var arrayCopyWithin = __webpack_require__(109);\n  var $DP = __webpack_require__(10);\n  var $GOPD = __webpack_require__(21);\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n")},function(module,exports,__webpack_require__){eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(5);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanM/NmE5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n")},function(module,exports,__webpack_require__){eval("var META = __webpack_require__(30)('meta');\nvar isObject = __webpack_require__(5);\nvar has = __webpack_require__(14);\nvar setDesc = __webpack_require__(10).f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !__webpack_require__(3)(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzPzY3YWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n")},function(module,exports){eval("module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzQ2MzAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n")},function(module,exports){eval("var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanM/Y2E1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30\n")},function(module,exports){eval("module.exports = false;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzPzJkMDAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(93);\nvar enumBugKeys = __webpack_require__(64);\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz8wZDU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n")},function(module,exports,__webpack_require__){eval("var toInteger = __webpack_require__(20);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcz83N2YxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __webpack_require__(4);\nvar dPs = __webpack_require__(94);\nvar enumBugKeys = __webpack_require__(64);\nvar IE_PROTO = __webpack_require__(63)('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(61)('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(65).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzPzJhZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = __webpack_require__(93);\nvar hiddenKeys = __webpack_require__(64).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcz85MDkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __webpack_require__(14);\nvar toObject = __webpack_require__(11);\nvar IE_PROTO = __webpack_require__(63)('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzPzM4ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n")},function(module,exports,__webpack_require__){eval("// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = __webpack_require__(6)('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(15)(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanM/OWM2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(5);\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzP2IzOWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n")},function(module,exports,__webpack_require__){eval("var def = __webpack_require__(10).f;\nvar has = __webpack_require__(14);\nvar TAG = __webpack_require__(6)('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz83ZjIwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar defined = __webpack_require__(25);\nvar fails = __webpack_require__(3);\nvar spaces = __webpack_require__(67);\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcz9hYTc3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40\n")},function(module,exports){eval("module.exports = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanM/ODRmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar global = __webpack_require__(2);\nvar dP = __webpack_require__(10);\nvar DESCRIPTORS = __webpack_require__(9);\nvar SPECIES = __webpack_require__(6)('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcz83YTU2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///42\n")},function(module,exports){eval("module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcz9mNjA1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n")},function(module,exports,__webpack_require__){eval("var redefine = __webpack_require__(12);\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanM/ZGNiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n")},function(module,exports,__webpack_require__){eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(24);\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzPzYyNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n")},function(module,exports){eval("exports.f = {}.propertyIsEnumerable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzPzUyYTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46\n")},function(module,exports,__webpack_require__){eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(24);\nvar TAG = __webpack_require__(6)('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzPzIzYzYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n")},function(module,exports,__webpack_require__){eval("// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = __webpack_require__(4);\nvar aFunction = __webpack_require__(19);\nvar SPECIES = __webpack_require__(6)('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzP2ViZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n")},function(module,exports,__webpack_require__){eval("var core = __webpack_require__(8);\nvar global = __webpack_require__(2);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __webpack_require__(31) ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanM/NTUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49\n")},function(module,exports,__webpack_require__){eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(16);\nvar toLength = __webpack_require__(7);\nvar toAbsoluteIndex = __webpack_require__(33);\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz9jMzY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n")},function(module,exports){eval("exports.f = Object.getOwnPropertySymbols;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz8yNjIxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51\n")},function(module,exports,__webpack_require__){eval("// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(24);\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcz8xMTY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///52\n")},function(module,exports,__webpack_require__){eval("var ITERATOR = __webpack_require__(6)('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcz81Y2M1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = __webpack_require__(4);\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcz8wYmZiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///54\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar classof = __webpack_require__(47);\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcz81ZjFiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n")},function(module,exports,__webpack_require__){"use strict";eval("\n__webpack_require__(111);\nvar redefine = __webpack_require__(12);\nvar hide = __webpack_require__(15);\nvar fails = __webpack_require__(3);\nvar defined = __webpack_require__(25);\nvar wks = __webpack_require__(6);\nvar regexpExec = __webpack_require__(82);\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzPzIxNGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56\n")},function(module,exports,__webpack_require__){eval("var ctx = __webpack_require__(18);\nvar call = __webpack_require__(106);\nvar isArrayIter = __webpack_require__(77);\nvar anObject = __webpack_require__(4);\nvar toLength = __webpack_require__(7);\nvar getIterFn = __webpack_require__(79);\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanM/NGE1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///57\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(2);\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzP2EyNWYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar global = __webpack_require__(2);\nvar $export = __webpack_require__(1);\nvar redefine = __webpack_require__(12);\nvar redefineAll = __webpack_require__(44);\nvar meta = __webpack_require__(28);\nvar forOf = __webpack_require__(57);\nvar anInstance = __webpack_require__(43);\nvar isObject = __webpack_require__(5);\nvar fails = __webpack_require__(3);\nvar $iterDetect = __webpack_require__(53);\nvar setToStringTag = __webpack_require__(39);\nvar inheritIfRequired = __webpack_require__(68);\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzP2UwYjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///59\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(2);\nvar hide = __webpack_require__(15);\nvar uid = __webpack_require__(30);\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcz8wZjg4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(5);\nvar document = __webpack_require__(2).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzPzIzMGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n")},function(module,exports,__webpack_require__){eval("exports.f = __webpack_require__(6);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzPzM3YzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62\n")},function(module,exports,__webpack_require__){eval("var shared = __webpack_require__(49)('keys');\nvar uid = __webpack_require__(30);\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzYxM2IiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///63\n")},function(module,exports){eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzP2UxMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///64\n")},function(module,exports,__webpack_require__){eval("var document = __webpack_require__(2).document;\nmodule.exports = document && document.documentElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzP2ZhYjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65\n")},function(module,exports,__webpack_require__){eval("// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(5);\nvar anObject = __webpack_require__(4);\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = __webpack_require__(18)(Function.call, __webpack_require__(21).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanM/OGI5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66\n")},function(module,exports){eval("module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanM/ZmRlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///67\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(5);\nvar setPrototypeOf = __webpack_require__(66).set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzPzVkYmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar toInteger = __webpack_require__(20);\nvar defined = __webpack_require__(25);\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzPzk3NDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///69\n")},function(module,exports){eval("// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanM/OTZmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///70\n")},function(module,exports){eval("// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzPzJkNWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///71\n")},function(module,exports,__webpack_require__){eval("var toInteger = __webpack_require__(20);\nvar defined = __webpack_require__(25);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanM/MDJmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar LIBRARY = __webpack_require__(31);\nvar $export = __webpack_require__(1);\nvar redefine = __webpack_require__(12);\nvar hide = __webpack_require__(15);\nvar Iterators = __webpack_require__(41);\nvar $iterCreate = __webpack_require__(105);\nvar setToStringTag = __webpack_require__(39);\nvar getPrototypeOf = __webpack_require__(36);\nvar ITERATOR = __webpack_require__(6)('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcz8wMWY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73\n")},function(module,exports,__webpack_require__){eval("// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = __webpack_require__(75);\nvar defined = __webpack_require__(25);\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcz9kMmM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///74\n")},function(module,exports,__webpack_require__){eval("// 7.2.8 IsRegExp(argument)\nvar isObject = __webpack_require__(5);\nvar cof = __webpack_require__(24);\nvar MATCH = __webpack_require__(6)('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanM/YWFlMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///75\n")},function(module,exports,__webpack_require__){eval("var MATCH = __webpack_require__(6)('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanM/NTE0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///76\n")},function(module,exports,__webpack_require__){eval("// check on default Array iterator\nvar Iterators = __webpack_require__(41);\nvar ITERATOR = __webpack_require__(6)('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzPzMzYTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///77\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $defineProperty = __webpack_require__(10);\nvar createDesc = __webpack_require__(29);\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanM/ZjFhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///78\n")},function(module,exports,__webpack_require__){eval("var classof = __webpack_require__(47);\nvar ITERATOR = __webpack_require__(6)('iterator');\nvar Iterators = __webpack_require__(41);\nmodule.exports = __webpack_require__(8).getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcz8yN2VlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79\n")},function(module,exports,__webpack_require__){"use strict";eval("// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n\nvar toObject = __webpack_require__(11);\nvar toAbsoluteIndex = __webpack_require__(33);\nvar toLength = __webpack_require__(7);\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzPzM2YmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///80\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar addToUnscopables = __webpack_require__(37);\nvar step = __webpack_require__(110);\nvar Iterators = __webpack_require__(41);\nvar toIObject = __webpack_require__(16);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(73)(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcz9jYWRmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar regexpFlags = __webpack_require__(54);\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcz81MjBhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///82\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar at = __webpack_require__(72)(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcz8wMzkwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83\n")},function(module,exports,__webpack_require__){eval("var ctx = __webpack_require__(18);\nvar invoke = __webpack_require__(99);\nvar html = __webpack_require__(65);\nvar cel = __webpack_require__(61);\nvar global = __webpack_require__(2);\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (__webpack_require__(24)(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzPzE5OTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///84\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar global = __webpack_require__(2);\nvar DESCRIPTORS = __webpack_require__(9);\nvar LIBRARY = __webpack_require__(31);\nvar $typed = __webpack_require__(60);\nvar hide = __webpack_require__(15);\nvar redefineAll = __webpack_require__(44);\nvar fails = __webpack_require__(3);\nvar anInstance = __webpack_require__(43);\nvar toInteger = __webpack_require__(20);\nvar toLength = __webpack_require__(7);\nvar toIndex = __webpack_require__(118);\nvar gOPN = __webpack_require__(35).f;\nvar dP = __webpack_require__(10).f;\nvar arrayFill = __webpack_require__(80);\nvar setToStringTag = __webpack_require__(39);\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanM/ZWQwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///85\n")},function(module,exports){eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcz9lNTNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///86\n")},function(module,exports){eval("module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcz9mNzcyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///87\n")},function(module,exports,__webpack_require__){eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(123)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzPzhlNjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///88\n")},function(module,exports){eval('//     proxy-observe v0.0.18\r\n//     Copyright (c) 2015, 2016 Simon Y. Blackwell, AnyWhichWay\r\n//     MIT License - http://opensource.org/licenses/mit-license.php\r\n(function() {\r\n\t"use strict";\r\n\t// Creates and returns a Proxy wrapping a target so that all changes can be trapped and forwarded to\r\n\t// a callback. The callback takes an array of changes just like the traditional original Chrome Object.observe\r\n\t// {object:<object changed>,name:<field changed>,type:add|update|delete|reconfigure|preventExtensions|setPrototype,oldValue:<old value if update | delete>}\r\n\t// The acceptlist can be add|update|delete|reconfigure|preventExtensions|setPrototype.\r\n\t// v 0.0.10 to support pausing and restarting observation two additional constructor arguments are available to Object.observe:\r\n\t// pausable - create the Observer so it can be paused\r\n\t// pause - create observer in paused state\r\n\t// if pausable is true then an additional method deliver(ignorePrevious) is available to start delivery\r\n\t// to pause delivery set a property called pause on the function deliver to true\r\n\t// pausable is optional to reduce the chance of shadowing a property or method on any existing code called deliver\r\n\tif(!Object.observe && typeof(Proxy)==="function") {\r\n\t\tfunction Observer(target,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tvar me = this, proxy;\r\n\t    \tfunction deliver(ignorePrevious,delay) {\r\n\t    \t\tdeliver.delay = delay;\r\n\t    \t\tif(!deliver.pause) {\r\n\t        \t\tif(me.changeset.length>0) {\r\n\t        \t\t\tif(!ignorePrevious) {\r\n\t\t    \t    \t\tvar changes = me.changeset.filter(function(change) { return !acceptlist || acceptlist.indexOf(change.type)>=0; });\r\n\t\t        \t\t\tif(changes.length>0) {\r\n\t\t        \t\t\t\tcallback(changes);\r\n\t\t        \t\t\t}\r\n\t        \t\t\t}\r\n\t        \t\t\tme.changeset = [];\r\n\t        \t\t}\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \tdeliver.pause = pause;\r\n\t    \tdeliver.delay = delay;\r\n\t\t    me.get = function(target, property) {\r\n\t\t    \tif(property==="__observer__") {\r\n\t\t    \t\treturn me;\r\n\t\t    \t}\r\n\t\t    \tif(property==="unobserve") {\r\n\t\t    \t\treturn function() {\r\n\t\t    \t\t\tObject.unobserve(target);\r\n\t\t    \t\t\treturn target;\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t\t    \tif(property==="deliver") {\r\n\t\t    \t\treturn deliver;\r\n\t\t    \t}\r\n\t\t    \treturn target[property];\r\n\t\t    }\r\n\t    \tme.target = target;\r\n\t    \tme.changeset = [];\r\n\t    \tif(!me.target.__observerCallbacks__) {\r\n\t    \t\t// __observerCallbacks__ is used as an index to get at the proxy which is the observer, so we can unobserve\r\n\t    \t\tObject.defineProperty(target,"__observerCallbacks__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t\tObject.defineProperty(target,"__observers__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t}\r\n\t    \tme.target.__observerCallbacks__.push(callback);\r\n\t    \tme.target.__observers__.push(this);\r\n\t    \tproxy = new Proxy(target,me);\r\n\t    \tdeliver(false,delay);\r\n\t    \treturn proxy;\r\n\t    }\r\n\t\tObserver.prototype.deliver = function() {\r\n\t\t\treturn this.get(null,"deliver");\r\n\t\t}\r\n\t    Observer.prototype.set = function(target, property, value) { // , receiver\r\n\t    \tvar oldvalue = target[property];\r\n\t    \tvar type = (oldvalue===undefined ? "add" : "update");\r\n\t    \ttarget[property] = value;\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && (!this.acceptlist || this.acceptlist.indexOf(type)>=0)) {\r\n\t        \tvar change = {object:target,name:property,type:type},\r\n\t        \t\tstart = this.changeset.length === 0,\r\n\t        \t\tdeliver = this.deliver();\r\n\t        \tif(type==="update") {\r\n\t        \t\tchange.oldValue = oldvalue;\r\n\t        \t}\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.deleteProperty = function(target, property) {\r\n\t    \tvar oldvalue = target[property];\r\n\t    \t//if(typeof(oldvalue)!=="undefined") {\r\n\t\t    \tdelete target[property];\r\n\t\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("delete")>=0) {\r\n\t\t        \tvar change = {object:target,name:property,type:"delete",oldValue:oldvalue},\r\n\t\t        \t\tstart = this.changeset.length === 0,\r\n\t\t        \t\tdeliver = this.deliver();\r\n\t\t        \tthis.changeset.push(change);\r\n\t\t        \tif(start) {\r\n\t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t\t        \t}\r\n\t\t    \t}\r\n\t    \t//}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.defineProperty = function(target, property, descriptor) {\r\n\t    \tObject.defineProperty(target, property, descriptor);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("reconfigure")>=0) {\r\n\t        \tvar change = {object:target,name:property,type:"reconfigure"},\r\n        \t\t\tstart = this.changeset.length === 0,\r\n        \t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.setPrototypeOf = function(target, prototype) {\r\n\t    \tvar oldvalue = Object.getPrototypeOf(target);\r\n\t    \tObject.setPrototypeOf(target, prototype);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("setPrototype")>=0) {\r\n\t        \tvar change = {object:target,name:"__proto__",type:"setPrototype",oldValue:oldvalue},\r\n    \t\t\t\tstart = this.changeset.length === 0,\r\n    \t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.preventExtensions = function(target) {\r\n\t        Object.preventExtensions(target);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("preventExtensions")>=0) {\r\n\t        \tvar change = {object:target,type:"preventExtensions"},\r\n\t\t\t\t\tstart = this.changeset.length === 0,\r\n\t\t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Object.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \treturn new Observer(object,callback,acceptlist,pausable,pause,delay);\r\n\t    };\r\n\t    Object.unobserve = function(object,callback) {\r\n\t    \tif(object.__observerCallbacks__) {\r\n\t    \t\tif(!callback) {\r\n\t    \t\t\tobject.__observerCallbacks__.splice(0,object.__observerCallbacks__.length);\r\n\t    \t\t\tobject.__observers__.splice(0,object.__observers__.length);\r\n\t    \t\t\treturn;\r\n\t    \t\t}\r\n\t    \t\tobject.__observerCallbacks__.forEach(function(observercallback,i) {\r\n\t    \t\t\tif(callback===observercallback) {\r\n\t    \t\t\t\tobject.__observerCallbacks__.splice(i,1);\r\n\t    \t\t\t\tdelete object.__observers__[i].callback;\r\n\t    \t\t\t\tobject.__observers__.splice(i,1);\r\n\t    \t\t\t}\r\n\t    \t\t});\r\n\t    \t}\r\n\t    };\r\n\t    Array.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tif(!(object instanceof Array) && !Array.isArray(object)) {\r\n\t    \t\tthrow new TypeError("First argument to Array.observer is not an Array");\r\n\t    \t}\r\n            \tacceptlist = acceptlist || ["add", "update", "delete", "splice"];\r\n\t    \tvar arrayproxy = new Proxy(object,{get: function(target,property) {\r\n\t    \t\tif(property==="unobserve") {\r\n\t\t    \t\treturn function(callback) {\r\n\t\t    \t\t\tif(callback) {\r\n\t\t    \t\t\t\treturn Object.unobserve(target,callback);\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\treturn target.unobserve();\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t    \t\tif(property==="splice") {\r\n\t    \t\t\treturn function(start,end) {\r\n\t    \t\t\t\tif(typeof(start)!=="number" || typeof(end)!=="number") {\r\n\t    \t\t\t\t\tthrow new TypeError("First two arguments to Array splice are not number, number");\r\n\t    \t\t\t\t}\r\n\t    \t    \t\tvar removed = this.slice(start,start+end),\r\n\t    \t    \t\t\taddedCount = (arguments.length > 1 ? arguments.length-2 : 0),\r\n\t    \t    \t\t\tchange =  {object:object,type:"splice",index:start,removed:removed,addedCount:addedCount};\r\n\t    \t    \t\ttarget.splice.apply(target,arguments);\r\n\t    \t    \t\tif(acceptlist.indexOf("splice")>=0) {\r\n\t    \t    \t\t\tvar start = proxy.__observer__.changeset.length === 0,\r\n\t    \t        \t\t\tdeliver = proxy.__observer__.deliver();\r\n\t    \t    \t\t\tproxy.__observer__.changeset.push(change);\r\n\t    \t    \t\t\tif(start) {\r\n\t    \t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t    \t\t        \t}\r\n\t    \t    \t\t}\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="push") {\r\n\t    \t\t\t return function(item) {\r\n\t    \t\t    \treturn this.splice(this.length,0,item);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="pop") {\r\n\t    \t\t\t return function() {\r\n\t    \t\t    \treturn this.splice(this.length-1,1);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="unshift") {\r\n\t    \t\t\t return function(item) {\r\n    \t\t    \t\treturn this.splice(0,0,item);\r\n    \t\t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="shift") {\r\n\t    \t\t\treturn function() {\r\n\t    \t    \t\treturn this.splice(0,1);\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\treturn target[property];\r\n\t    \t}});\r\n\t    \tvar proxy = Object.observe(arrayproxy,function(changeset) { \r\n\t    \t\tvar changes = changeset.filter(function(change) { return change.name!=="length" && change.name!=="add" && (!acceptlist || acceptlist.indexOf(change.type)>=0); });\r\n\t    \t\tif(changes.length>0) {\r\n\t    \t\t\tcallback(changes);\r\n\t    \t\t}\r\n\t    \t},acceptlist,pausable,pause,delay);\r\n\t    \treturn proxy;\r\n\t    };\r\n\t    Array.unobserve = function(object,callback) {\r\n\t\t  return object.unobserve(callback);\r\n\t    }\r\n\t}\r\n\tObject.deepObserve = function(object,callback,parts) {\r\n\r\n\t\tparts = (parts ? parts : []);\r\n\r\n\t\tvar toTypeName = function(obj) {\r\n\t\t\treturn ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()\r\n\t\t}\r\n\r\n\t\tfunction reobserve(value, parts) {\r\n\t\t\tvar keys = Object.keys(value);\r\n\t\t\tkeys.forEach(function(key) {\r\n\t\t\t\tif((toTypeName(value[key]) === \'object\' || toTypeName(value[key]) === \'array\') && !value[key].hasOwnProperty(\'__observers__\')) {\r\n\t\t\t\t\tvar newparts = parts.slice(0);\r\n\t\t\t\t\tnewparts.push(key);\r\n\t\t\t\t\tvalue[key] = Object.deepObserve(value[key],callback,newparts);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treobserve(object, parts);\r\n\r\n\t\tvar observed = Object.observe(object,function(changeset) {\r\n\t\t\tvar changes = [];\r\n\t\t\tfunction recurse(name,rootObject,oldObject,newObject,path) {\r\n\t\t\t\tif(newObject instanceof Object) {\r\n\t\t\t\t\tvar newkeys = Object.keys(newObject);\r\n\t\t\t\t\tnewkeys.forEach(function(key) {\r\n\t\t\t\t\t\tif(!oldObject || (oldObject[key]!==newObject[key])) {\r\n\t\t\t\t\t\t\tvar oldvalue = (oldObject && oldObject[key]!==undefined ? oldObject[key] : undefined),\r\n\t\t\t\t\t\t\t\tchange = (oldvalue===undefined ? "add" : "update"),\r\n\t\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\r\n\t\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldvalue,newValue:newObject[key],keypath:keypath});\r\n\t\t\t\t\t\t\trecurse(name,rootObject,oldvalue,newObject[key],keypath);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if(oldObject instanceof Object) {\r\n\t\t\t\t\tvar oldkeys = Object.keys(oldObject);\r\n\t\t\t\t\toldkeys.forEach(function(key) {\r\n\t\t\t\t\t\tvar change = (newObject===null ? "update" : "delete"),\r\n\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldObject[key],newValue:newObject,keypath:keypath});\r\n\t\t\t\t\t\trecurse(name,rootObject,oldObject[key],undefined,keypath);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tchangeset.forEach(function(change) {\r\n\t\t\t\tvar keypath = (parts.length>0 ? parts.join(".") + "." : "") + change.name;\r\n\r\n\t\t\t\tif (change.type === "update" || change.type === "add") { \r\n\t\t\t\t\treobserve(change.object, parts);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchanges.push({name:change.name,object:change.object,type:change.type,oldValue:change.oldValue,newValue:change.object[change.name],keypath:keypath});\r\n\t\t\t\trecurse(change.name,change.object,change.oldValue,change.object[change.name],keypath);\r\n\t\t\t});\r\n\t\t\tcallback(changes);\r\n\t\t});\r\n\t\treturn observed;\r\n\t};\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\nAuthor: Geraint Luff and others\r\nYear: 2013\r\n\r\nThis code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.\r\n\r\nIf you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.\r\n*/\r\n(function (global, factory) {\r\n  if (true) {\r\n    // AMD. Register as an anonymous module.\r\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n  } else {}\r\n}(this, function () {\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys\r\nif (!Object.keys) {\r\n\tObject.keys = (function () {\r\n\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\r\n\t\t\thasDontEnumBug = !({toString: null}).propertyIsEnumerable(\'toString\'),\r\n\t\t\tdontEnums = [\r\n\t\t\t\t\'toString\',\r\n\t\t\t\t\'toLocaleString\',\r\n\t\t\t\t\'valueOf\',\r\n\t\t\t\t\'hasOwnProperty\',\r\n\t\t\t\t\'isPrototypeOf\',\r\n\t\t\t\t\'propertyIsEnumerable\',\r\n\t\t\t\t\'constructor\'\r\n\t\t\t],\r\n\t\t\tdontEnumsLength = dontEnums.length;\r\n\r\n\t\treturn function (obj) {\r\n\t\t\tif (typeof obj !== \'object\' && typeof obj !== \'function\' || obj === null) {\r\n\t\t\t\tthrow new TypeError(\'Object.keys called on non-object\');\r\n\t\t\t}\r\n\r\n\t\t\tvar result = [];\r\n\r\n\t\t\tfor (var prop in obj) {\r\n\t\t\t\tif (hasOwnProperty.call(obj, prop)) {\r\n\t\t\t\t\tresult.push(prop);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (hasDontEnumBug) {\r\n\t\t\t\tfor (var i=0; i < dontEnumsLength; i++) {\r\n\t\t\t\t\tif (hasOwnProperty.call(obj, dontEnums[i])) {\r\n\t\t\t\t\t\tresult.push(dontEnums[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t})();\r\n}\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\nif (!Object.create) {\r\n\tObject.create = (function(){\r\n\t\tfunction F(){}\r\n\r\n\t\treturn function(o){\r\n\t\t\tif (arguments.length !== 1) {\r\n\t\t\t\tthrow new Error(\'Object.create implementation only accepts one parameter.\');\r\n\t\t\t}\r\n\t\t\tF.prototype = o;\r\n\t\t\treturn new F();\r\n\t\t};\r\n\t})();\r\n}\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray\r\nif(!Array.isArray) {\r\n\tArray.isArray = function (vArg) {\r\n\t\treturn Object.prototype.toString.call(vArg) === "[object Array]";\r\n\t};\r\n}\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf\r\nif (!Array.prototype.indexOf) {\r\n\tArray.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\r\n\t\tif (this === null) {\r\n\t\t\tthrow new TypeError();\r\n\t\t}\r\n\t\tvar t = Object(this);\r\n\t\tvar len = t.length >>> 0;\r\n\r\n\t\tif (len === 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tvar n = 0;\r\n\t\tif (arguments.length > 1) {\r\n\t\t\tn = Number(arguments[1]);\r\n\t\t\tif (n !== n) { // shortcut for verifying if it\'s NaN\r\n\t\t\t\tn = 0;\r\n\t\t\t} else if (n !== 0 && n !== Infinity && n !== -Infinity) {\r\n\t\t\t\tn = (n > 0 || -1) * Math.floor(Math.abs(n));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (n >= len) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tvar k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\r\n\t\tfor (; k < len; k++) {\r\n\t\t\tif (k in t && t[k] === searchElement) {\r\n\t\t\t\treturn k;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n}\r\n\r\n// Grungey Object.isFrozen hack\r\nif (!Object.isFrozen) {\r\n\tObject.isFrozen = function (obj) {\r\n\t\tvar key = "tv4_test_frozen_key";\r\n\t\twhile (obj.hasOwnProperty(key)) {\r\n\t\t\tkey += Math.random();\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tobj[key] = true;\r\n\t\t\tdelete obj[key];\r\n\t\t\treturn false;\r\n\t\t} catch (e) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n}\r\n// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed\r\n\r\nvar uriTemplateGlobalModifiers = {\r\n\t"+": true,\r\n\t"#": true,\r\n\t".": true,\r\n\t"/": true,\r\n\t";": true,\r\n\t"?": true,\r\n\t"&": true\r\n};\r\nvar uriTemplateSuffices = {\r\n\t"*": true\r\n};\r\n\r\nfunction notReallyPercentEncode(string) {\r\n\treturn encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\r\n\t\treturn "%" + doubleEncoded.substring(3);\r\n\t});\r\n}\r\n\r\nfunction uriTemplateSubstitution(spec) {\r\n\tvar modifier = "";\r\n\tif (uriTemplateGlobalModifiers[spec.charAt(0)]) {\r\n\t\tmodifier = spec.charAt(0);\r\n\t\tspec = spec.substring(1);\r\n\t}\r\n\tvar separator = "";\r\n\tvar prefix = "";\r\n\tvar shouldEscape = true;\r\n\tvar showVariables = false;\r\n\tvar trimEmptyString = false;\r\n\tif (modifier === \'+\') {\r\n\t\tshouldEscape = false;\r\n\t} else if (modifier === ".") {\r\n\t\tprefix = ".";\r\n\t\tseparator = ".";\r\n\t} else if (modifier === "/") {\r\n\t\tprefix = "/";\r\n\t\tseparator = "/";\r\n\t} else if (modifier === \'#\') {\r\n\t\tprefix = "#";\r\n\t\tshouldEscape = false;\r\n\t} else if (modifier === \';\') {\r\n\t\tprefix = ";";\r\n\t\tseparator = ";";\r\n\t\tshowVariables = true;\r\n\t\ttrimEmptyString = true;\r\n\t} else if (modifier === \'?\') {\r\n\t\tprefix = "?";\r\n\t\tseparator = "&";\r\n\t\tshowVariables = true;\r\n\t} else if (modifier === \'&\') {\r\n\t\tprefix = "&";\r\n\t\tseparator = "&";\r\n\t\tshowVariables = true;\r\n\t}\r\n\r\n\tvar varNames = [];\r\n\tvar varList = spec.split(",");\r\n\tvar varSpecs = [];\r\n\tvar varSpecMap = {};\r\n\tfor (var i = 0; i < varList.length; i++) {\r\n\t\tvar varName = varList[i];\r\n\t\tvar truncate = null;\r\n\t\tif (varName.indexOf(":") !== -1) {\r\n\t\t\tvar parts = varName.split(":");\r\n\t\t\tvarName = parts[0];\r\n\t\t\ttruncate = parseInt(parts[1], 10);\r\n\t\t}\r\n\t\tvar suffices = {};\r\n\t\twhile (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\r\n\t\t\tsuffices[varName.charAt(varName.length - 1)] = true;\r\n\t\t\tvarName = varName.substring(0, varName.length - 1);\r\n\t\t}\r\n\t\tvar varSpec = {\r\n\t\t\ttruncate: truncate,\r\n\t\t\tname: varName,\r\n\t\t\tsuffices: suffices\r\n\t\t};\r\n\t\tvarSpecs.push(varSpec);\r\n\t\tvarSpecMap[varName] = varSpec;\r\n\t\tvarNames.push(varName);\r\n\t}\r\n\tvar subFunction = function (valueFunction) {\r\n\t\tvar result = "";\r\n\t\tvar startIndex = 0;\r\n\t\tfor (var i = 0; i < varSpecs.length; i++) {\r\n\t\t\tvar varSpec = varSpecs[i];\r\n\t\t\tvar value = valueFunction(varSpec.name);\r\n\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || (typeof value === \'object\' && Object.keys(value).length === 0)) {\r\n\t\t\t\tstartIndex++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (i === startIndex) {\r\n\t\t\t\tresult += prefix;\r\n\t\t\t} else {\r\n\t\t\t\tresult += (separator || ",");\r\n\t\t\t}\r\n\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\tif (showVariables) {\r\n\t\t\t\t\tresult += varSpec.name + "=";\r\n\t\t\t\t}\r\n\t\t\t\tfor (var j = 0; j < value.length; j++) {\r\n\t\t\t\t\tif (j > 0) {\r\n\t\t\t\t\t\tresult += varSpec.suffices[\'*\'] ? (separator || ",") : ",";\r\n\t\t\t\t\t\tif (varSpec.suffices[\'*\'] && showVariables) {\r\n\t\t\t\t\t\t\tresult += varSpec.name + "=";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof value === "object") {\r\n\t\t\t\tif (showVariables && !varSpec.suffices[\'*\']) {\r\n\t\t\t\t\tresult += varSpec.name + "=";\r\n\t\t\t\t}\r\n\t\t\t\tvar first = true;\r\n\t\t\t\tfor (var key in value) {\r\n\t\t\t\t\tif (!first) {\r\n\t\t\t\t\t\tresult += varSpec.suffices[\'*\'] ? (separator || ",") : ",";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfirst = false;\r\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);\r\n\t\t\t\t\tresult += varSpec.suffices[\'*\'] ? \'=\' : ",";\r\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (showVariables) {\r\n\t\t\t\t\tresult += varSpec.name;\r\n\t\t\t\t\tif (!trimEmptyString || value !== "") {\r\n\t\t\t\t\t\tresult += "=";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (varSpec.truncate != null) {\r\n\t\t\t\t\tvalue = value.substring(0, varSpec.truncate);\r\n\t\t\t\t}\r\n\t\t\t\tresult += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21"): notReallyPercentEncode(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\tsubFunction.varNames = varNames;\r\n\treturn {\r\n\t\tprefix: prefix,\r\n\t\tsubstitution: subFunction\r\n\t};\r\n}\r\n\r\nfunction UriTemplate(template) {\r\n\tif (!(this instanceof UriTemplate)) {\r\n\t\treturn new UriTemplate(template);\r\n\t}\r\n\tvar parts = template.split("{");\r\n\tvar textParts = [parts.shift()];\r\n\tvar prefixes = [];\r\n\tvar substitutions = [];\r\n\tvar varNames = [];\r\n\twhile (parts.length > 0) {\r\n\t\tvar part = parts.shift();\r\n\t\tvar spec = part.split("}")[0];\r\n\t\tvar remainder = part.substring(spec.length + 1);\r\n\t\tvar funcs = uriTemplateSubstitution(spec);\r\n\t\tsubstitutions.push(funcs.substitution);\r\n\t\tprefixes.push(funcs.prefix);\r\n\t\ttextParts.push(remainder);\r\n\t\tvarNames = varNames.concat(funcs.substitution.varNames);\r\n\t}\r\n\tthis.fill = function (valueFunction) {\r\n\t\tvar result = textParts[0];\r\n\t\tfor (var i = 0; i < substitutions.length; i++) {\r\n\t\t\tvar substitution = substitutions[i];\r\n\t\t\tresult += substitution(valueFunction);\r\n\t\t\tresult += textParts[i + 1];\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\tthis.varNames = varNames;\r\n\tthis.template = template;\r\n}\r\nUriTemplate.prototype = {\r\n\ttoString: function () {\r\n\t\treturn this.template;\r\n\t},\r\n\tfillFromObject: function (obj) {\r\n\t\treturn this.fill(function (varName) {\r\n\t\t\treturn obj[varName];\r\n\t\t});\r\n\t}\r\n};\r\nvar ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {\r\n\tthis.missing = [];\r\n\tthis.missingMap = {};\r\n\tthis.formatValidators = parent ? Object.create(parent.formatValidators) : {};\r\n\tthis.schemas = parent ? Object.create(parent.schemas) : {};\r\n\tthis.collectMultiple = collectMultiple;\r\n\tthis.errors = [];\r\n\tthis.handleError = collectMultiple ? this.collectError : this.returnError;\r\n\tif (checkRecursive) {\r\n\t\tthis.checkRecursive = true;\r\n\t\tthis.scanned = [];\r\n\t\tthis.scannedFrozen = [];\r\n\t\tthis.scannedFrozenSchemas = [];\r\n\t\tthis.scannedFrozenValidationErrors = [];\r\n\t\tthis.validatedSchemasKey = \'tv4_validation_id\';\r\n\t\tthis.validationErrorsKey = \'tv4_validation_errors_id\';\r\n\t}\r\n\tif (trackUnknownProperties) {\r\n\t\tthis.trackUnknownProperties = true;\r\n\t\tthis.knownPropertyPaths = {};\r\n\t\tthis.unknownPropertyPaths = {};\r\n\t}\r\n\tthis.errorReporter = errorReporter || defaultErrorReporter(\'en\');\r\n\tif (typeof this.errorReporter === \'string\') {\r\n\t\tthrow new Error(\'debug\');\r\n\t}\r\n\tthis.definedKeywords = {};\r\n\tif (parent) {\r\n\t\tfor (var key in parent.definedKeywords) {\r\n\t\t\tthis.definedKeywords[key] = parent.definedKeywords[key].slice(0);\r\n\t\t}\r\n\t}\r\n};\r\nValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {\r\n\tthis.definedKeywords[keyword] = this.definedKeywords[keyword] || [];\r\n\tthis.definedKeywords[keyword].push(keywordFunction);\r\n};\r\nValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {\r\n\tvar error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);\r\n\terror.message = this.errorReporter(error, data, schema);\r\n\treturn error;\r\n};\r\nValidatorContext.prototype.returnError = function (error) {\r\n\treturn error;\r\n};\r\nValidatorContext.prototype.collectError = function (error) {\r\n\tif (error) {\r\n\t\tthis.errors.push(error);\r\n\t}\r\n\treturn null;\r\n};\r\nValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {\r\n\tfor (var i = startIndex; i < this.errors.length; i++) {\r\n\t\tthis.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);\r\n\t}\r\n\treturn this;\r\n};\r\nValidatorContext.prototype.banUnknownProperties = function (data, schema) {\r\n\tfor (var unknownPath in this.unknownPropertyPaths) {\r\n\t\tvar error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, "", null, data, schema);\r\n\t\tvar result = this.handleError(error);\r\n\t\tif (result) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.addFormat = function (format, validator) {\r\n\tif (typeof format === \'object\') {\r\n\t\tfor (var key in format) {\r\n\t\t\tthis.addFormat(key, format[key]);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tthis.formatValidators[format] = validator;\r\n};\r\nValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {\r\n\tif (schema[\'$ref\'] !== undefined) {\r\n\t\turlHistory = urlHistory || {};\r\n\t\tif (urlHistory[schema[\'$ref\']]) {\r\n\t\t\treturn this.createError(ErrorCodes.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(\', \')}, \'\', \'\', null, undefined, schema);\r\n\t\t}\r\n\t\turlHistory[schema[\'$ref\']] = true;\r\n\t\tschema = this.getSchema(schema[\'$ref\'], urlHistory);\r\n\t}\r\n\treturn schema;\r\n};\r\nValidatorContext.prototype.getSchema = function (url, urlHistory) {\r\n\tvar schema;\r\n\tif (this.schemas[url] !== undefined) {\r\n\t\tschema = this.schemas[url];\r\n\t\treturn this.resolveRefs(schema, urlHistory);\r\n\t}\r\n\tvar baseUrl = url;\r\n\tvar fragment = "";\r\n\tif (url.indexOf(\'#\') !== -1) {\r\n\t\tfragment = url.substring(url.indexOf("#") + 1);\r\n\t\tbaseUrl = url.substring(0, url.indexOf("#"));\r\n\t}\r\n\tif (typeof this.schemas[baseUrl] === \'object\') {\r\n\t\tschema = this.schemas[baseUrl];\r\n\t\tvar pointerPath = decodeURIComponent(fragment);\r\n\t\tif (pointerPath === "") {\r\n\t\t\treturn this.resolveRefs(schema, urlHistory);\r\n\t\t} else if (pointerPath.charAt(0) !== "/") {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar parts = pointerPath.split("/").slice(1);\r\n\t\tfor (var i = 0; i < parts.length; i++) {\r\n\t\t\tvar component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");\r\n\t\t\tif (schema[component] === undefined) {\r\n\t\t\t\tschema = undefined;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tschema = schema[component];\r\n\t\t}\r\n\t\tif (schema !== undefined) {\r\n\t\t\treturn this.resolveRefs(schema, urlHistory);\r\n\t\t}\r\n\t}\r\n\tif (this.missing[baseUrl] === undefined) {\r\n\t\tthis.missing.push(baseUrl);\r\n\t\tthis.missing[baseUrl] = baseUrl;\r\n\t\tthis.missingMap[baseUrl] = baseUrl;\r\n\t}\r\n};\r\nValidatorContext.prototype.searchSchemas = function (schema, url) {\r\n\tif (Array.isArray(schema)) {\r\n\t\tfor (var i = 0; i < schema.length; i++) {\r\n\t\t\tthis.searchSchemas(schema[i], url);\r\n\t\t}\r\n\t} else if (schema && typeof schema === "object") {\r\n\t\tif (typeof schema.id === "string") {\r\n\t\t\tif (isTrustedUrl(url, schema.id)) {\r\n\t\t\t\tif (this.schemas[schema.id] === undefined) {\r\n\t\t\t\t\tthis.schemas[schema.id] = schema;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var key in schema) {\r\n\t\t\tif (key !== "enum") {\r\n\t\t\t\tif (typeof schema[key] === "object") {\r\n\t\t\t\t\tthis.searchSchemas(schema[key], url);\r\n\t\t\t\t} else if (key === "$ref") {\r\n\t\t\t\t\tvar uri = getDocumentUri(schema[key]);\r\n\t\t\t\t\tif (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {\r\n\t\t\t\t\t\tthis.missingMap[uri] = uri;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\nValidatorContext.prototype.addSchema = function (url, schema) {\r\n\t//overload\r\n\tif (typeof url !== \'string\' || typeof schema === \'undefined\') {\r\n\t\tif (typeof url === \'object\' && typeof url.id === \'string\') {\r\n\t\t\tschema = url;\r\n\t\t\turl = schema.id;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (url === getDocumentUri(url) + "#") {\r\n\t\t// Remove empty fragment\r\n\t\turl = getDocumentUri(url);\r\n\t}\r\n\tthis.schemas[url] = schema;\r\n\tdelete this.missingMap[url];\r\n\tnormSchema(schema, url);\r\n\tthis.searchSchemas(schema, url);\r\n};\r\n\r\nValidatorContext.prototype.getSchemaMap = function () {\r\n\tvar map = {};\r\n\tfor (var key in this.schemas) {\r\n\t\tmap[key] = this.schemas[key];\r\n\t}\r\n\treturn map;\r\n};\r\n\r\nValidatorContext.prototype.getSchemaUris = function (filterRegExp) {\r\n\tvar list = [];\r\n\tfor (var key in this.schemas) {\r\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\r\n\t\t\tlist.push(key);\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n};\r\n\r\nValidatorContext.prototype.getMissingUris = function (filterRegExp) {\r\n\tvar list = [];\r\n\tfor (var key in this.missingMap) {\r\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\r\n\t\t\tlist.push(key);\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n};\r\n\r\nValidatorContext.prototype.dropSchemas = function () {\r\n\tthis.schemas = {};\r\n\tthis.reset();\r\n};\r\nValidatorContext.prototype.reset = function () {\r\n\tthis.missing = [];\r\n\tthis.missingMap = {};\r\n\tthis.errors = [];\r\n};\r\n\r\nValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {\r\n\tvar topLevel;\r\n\tschema = this.resolveRefs(schema);\r\n\tif (!schema) {\r\n\t\treturn null;\r\n\t} else if (schema instanceof ValidationError) {\r\n\t\tthis.errors.push(schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tvar startErrorCount = this.errors.length;\r\n\tvar frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;\r\n\tif (this.checkRecursive && data && typeof data === \'object\') {\r\n\t\ttopLevel = !this.scanned.length;\r\n\t\tif (data[this.validatedSchemasKey]) {\r\n\t\t\tvar schemaIndex = data[this.validatedSchemasKey].indexOf(schema);\r\n\t\t\tif (schemaIndex !== -1) {\r\n\t\t\t\tthis.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (Object.isFrozen(data)) {\r\n\t\t\tfrozenIndex = this.scannedFrozen.indexOf(data);\r\n\t\t\tif (frozenIndex !== -1) {\r\n\t\t\t\tvar frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);\r\n\t\t\t\tif (frozenSchemaIndex !== -1) {\r\n\t\t\t\t\tthis.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.scanned.push(data);\r\n\t\tif (Object.isFrozen(data)) {\r\n\t\t\tif (frozenIndex === -1) {\r\n\t\t\t\tfrozenIndex = this.scannedFrozen.length;\r\n\t\t\t\tthis.scannedFrozen.push(data);\r\n\t\t\t\tthis.scannedFrozenSchemas.push([]);\r\n\t\t\t}\r\n\t\t\tscannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;\r\n\t\t\tthis.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;\r\n\t\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];\r\n\t\t} else {\r\n\t\t\tif (!data[this.validatedSchemasKey]) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tObject.defineProperty(data, this.validatedSchemasKey, {\r\n\t\t\t\t\t\tvalue: [],\r\n\t\t\t\t\t\tconfigurable: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\tObject.defineProperty(data, this.validationErrorsKey, {\r\n\t\t\t\t\t\tvalue: [],\r\n\t\t\t\t\t\tconfigurable: true\r\n\t\t\t\t\t});\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t//IE 7/8 workaround\r\n\t\t\t\t\tdata[this.validatedSchemasKey] = [];\r\n\t\t\t\t\tdata[this.validationErrorsKey] = [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tscannedSchemasIndex = data[this.validatedSchemasKey].length;\r\n\t\t\tdata[this.validatedSchemasKey][scannedSchemasIndex] = schema;\r\n\t\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = [];\r\n\t\t}\r\n\t}\r\n\r\n\tvar errorCount = this.errors.length;\r\n\tvar error = this.validateBasic(data, schema, dataPointerPath)\r\n\t\t|| this.validateNumeric(data, schema, dataPointerPath)\r\n\t\t|| this.validateString(data, schema, dataPointerPath)\r\n\t\t|| this.validateArray(data, schema, dataPointerPath)\r\n\t\t|| this.validateObject(data, schema, dataPointerPath)\r\n\t\t|| this.validateCombinations(data, schema, dataPointerPath)\r\n\t\t|| this.validateHypermedia(data, schema, dataPointerPath)\r\n\t\t|| this.validateFormat(data, schema, dataPointerPath)\r\n\t\t|| this.validateDefinedKeywords(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n\r\n\tif (topLevel) {\r\n\t\twhile (this.scanned.length) {\r\n\t\t\tvar item = this.scanned.pop();\r\n\t\t\tdelete item[this.validatedSchemasKey];\r\n\t\t}\r\n\t\tthis.scannedFrozen = [];\r\n\t\tthis.scannedFrozenSchemas = [];\r\n\t}\r\n\r\n\tif (error || errorCount !== this.errors.length) {\r\n\t\twhile ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {\r\n\t\t\tvar dataPart = (dataPathParts && dataPathParts.length) ? "" + dataPathParts.pop() : null;\r\n\t\t\tvar schemaPart = (schemaPathParts && schemaPathParts.length) ? "" + schemaPathParts.pop() : null;\r\n\t\t\tif (error) {\r\n\t\t\t\terror = error.prefixWith(dataPart, schemaPart);\r\n\t\t\t}\r\n\t\t\tthis.prefixErrors(errorCount, dataPart, schemaPart);\r\n\t\t}\r\n\t}\r\n\r\n\tif (scannedFrozenSchemaIndex !== null) {\r\n\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);\r\n\t} else if (scannedSchemasIndex !== null) {\r\n\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);\r\n\t}\r\n\r\n\treturn this.handleError(error);\r\n};\r\nValidatorContext.prototype.validateFormat = function (data, schema) {\r\n\tif (typeof schema.format !== \'string\' || !this.formatValidators[schema.format]) {\r\n\t\treturn null;\r\n\t}\r\n\tvar errorMessage = this.formatValidators[schema.format].call(null, data, schema);\r\n\tif (typeof errorMessage === \'string\' || typeof errorMessage === \'number\') {\r\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage}, \'\', \'/format\', null, data, schema);\r\n\t} else if (errorMessage && typeof errorMessage === \'object\') {\r\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage.message || "?"}, errorMessage.dataPath || \'\', errorMessage.schemaPath || "/format", null, data, schema);\r\n\t}\r\n\treturn null;\r\n};\r\nValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {\r\n\tfor (var key in this.definedKeywords) {\r\n\t\tif (typeof schema[key] === \'undefined\') {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tvar validationFunctions = this.definedKeywords[key];\r\n\t\tfor (var i = 0; i < validationFunctions.length; i++) {\r\n\t\t\tvar func = validationFunctions[i];\r\n\t\t\tvar result = func(data, schema[key], schema, dataPointerPath);\r\n\t\t\tif (typeof result === \'string\' || typeof result === \'number\') {\r\n\t\t\t\treturn this.createError(ErrorCodes.KEYWORD_CUSTOM, {key: key, message: result}, \'\', \'\', null, data, schema).prefixWith(null, key);\r\n\t\t\t} else if (result && typeof result === \'object\') {\r\n\t\t\t\tvar code = result.code;\r\n\t\t\t\tif (typeof code === \'string\') {\r\n\t\t\t\t\tif (!ErrorCodes[code]) {\r\n\t\t\t\t\t\tthrow new Error(\'Undefined error code (use defineError): \' + code);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcode = ErrorCodes[code];\r\n\t\t\t\t} else if (typeof code !== \'number\') {\r\n\t\t\t\t\tcode = ErrorCodes.KEYWORD_CUSTOM;\r\n\t\t\t\t}\r\n\t\t\t\tvar messageParams = (typeof result.message === \'object\') ? result.message : {key: key, message: result.message || "?"};\r\n\t\t\t\tvar schemaPath = result.schemaPath || ("/" + key.replace(/~/g, \'~0\').replace(/\\//g, \'~1\'));\r\n\t\t\t\treturn this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nfunction recursiveCompare(A, B) {\r\n\tif (A === B) {\r\n\t\treturn true;\r\n\t}\r\n\tif (A && B && typeof A === "object" && typeof B === "object") {\r\n\t\tif (Array.isArray(A) !== Array.isArray(B)) {\r\n\t\t\treturn false;\r\n\t\t} else if (Array.isArray(A)) {\r\n\t\t\tif (A.length !== B.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfor (var i = 0; i < A.length; i++) {\r\n\t\t\t\tif (!recursiveCompare(A[i], B[i])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar key;\r\n\t\t\tfor (key in A) {\r\n\t\t\t\tif (B[key] === undefined && A[key] !== undefined) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (key in B) {\r\n\t\t\t\tif (A[key] === undefined && B[key] !== undefined) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (key in A) {\r\n\t\t\t\tif (!recursiveCompare(A[key], B[key])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {\r\n\tvar error;\r\n\tif (error = this.validateType(data, schema, dataPointerPath)) {\r\n\t\treturn error.prefixWith(null, "type");\r\n\t}\r\n\tif (error = this.validateEnum(data, schema, dataPointerPath)) {\r\n\t\treturn error.prefixWith(null, "type");\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateType = function validateType(data, schema) {\r\n\tif (schema.type === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar dataType = typeof data;\r\n\tif (data === null) {\r\n\t\tdataType = "null";\r\n\t} else if (Array.isArray(data)) {\r\n\t\tdataType = "array";\r\n\t}\r\n\tvar allowedTypes = schema.type;\r\n\tif (!Array.isArray(allowedTypes)) {\r\n\t\tallowedTypes = [allowedTypes];\r\n\t}\r\n\r\n\tfor (var i = 0; i < allowedTypes.length; i++) {\r\n\t\tvar type = allowedTypes[i];\r\n\t\tif (type === dataType || (type === "integer" && dataType === "number" && (data % 1 === 0))) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn this.createError(ErrorCodes.INVALID_TYPE, {type: dataType, expected: allowedTypes.join("/")}, \'\', \'\', null, data, schema);\r\n};\r\n\r\nValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {\r\n\tif (schema["enum"] === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tfor (var i = 0; i < schema["enum"].length; i++) {\r\n\t\tvar enumVal = schema["enum"][i];\r\n\t\tif (recursiveCompare(data, enumVal)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn this.createError(ErrorCodes.ENUM_MISMATCH, {value: (typeof JSON !== \'undefined\') ? JSON.stringify(data) : data}, \'\', \'\', null, data, schema);\r\n};\r\n\r\nValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {\r\n\treturn this.validateMultipleOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateMinMax(data, schema, dataPointerPath)\r\n\t\t|| this.validateNaN(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nvar CLOSE_ENOUGH_LOW = Math.pow(2, -51);\r\nvar CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;\r\nValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {\r\n\tvar multipleOf = schema.multipleOf || schema.divisibleBy;\r\n\tif (multipleOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tif (typeof data === "number") {\r\n\t\tvar remainder = (data/multipleOf)%1;\r\n\t\tif (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf}, \'\', \'\', null, data, schema);\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {\r\n\tif (typeof data !== "number") {\r\n\t\treturn null;\r\n\t}\r\n\tif (schema.minimum !== undefined) {\r\n\t\tif (data < schema.minimum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}, \'\', \'/minimum\', null, data, schema);\r\n\t\t}\r\n\t\tif (schema.exclusiveMinimum && data === schema.minimum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}, \'\', \'/exclusiveMinimum\', null, data, schema);\r\n\t\t}\r\n\t}\r\n\tif (schema.maximum !== undefined) {\r\n\t\tif (data > schema.maximum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}, \'\', \'/maximum\', null, data, schema);\r\n\t\t}\r\n\t\tif (schema.exclusiveMaximum && data === schema.maximum) {\r\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}, \'\', \'/exclusiveMaximum\', null, data, schema);\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {\r\n\tif (typeof data !== "number") {\r\n\t\treturn null;\r\n\t}\r\n\tif (isNaN(data) === true || data === Infinity || data === -Infinity) {\r\n\t\treturn this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, {value: data}, \'\', \'/type\', null, data, schema);\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {\r\n\treturn this.validateStringLength(data, schema, dataPointerPath)\r\n\t\t|| this.validateStringPattern(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {\r\n\tif (typeof data !== "string") {\r\n\t\treturn null;\r\n\t}\r\n\tif (schema.minLength !== undefined) {\r\n\t\tif (data.length < schema.minLength) {\r\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}, \'\', \'/minLength\', null, data, schema);\r\n\t\t}\r\n\t}\r\n\tif (schema.maxLength !== undefined) {\r\n\t\tif (data.length > schema.maxLength) {\r\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}, \'\', \'/maxLength\', null, data, schema);\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {\r\n\tif (typeof data !== "string" || (typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp))) {\r\n\t\treturn null;\r\n\t}\r\n\tvar regexp;\r\n\tif (schema.pattern instanceof RegExp) {\r\n\t  regexp = schema.pattern;\r\n\t}\r\n\telse {\r\n\t  var body, flags = \'\';\r\n\t  // Check for regular expression literals\r\n\t  // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5\r\n\t  var literal = schema.pattern.match(/^\\/(.+)\\/([img]*)$/);\r\n\t  if (literal) {\r\n\t    body = literal[1];\r\n\t    flags = literal[2];\r\n\t  }\r\n\t  else {\r\n\t    body = schema.pattern;\r\n\t  }\r\n\t  regexp = new RegExp(body, flags);\r\n\t}\r\n\tif (!regexp.test(data)) {\r\n\t\treturn this.createError(ErrorCodes.STRING_PATTERN, {pattern: schema.pattern}, \'\', \'/pattern\', null, data, schema);\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {\r\n\tif (!Array.isArray(data)) {\r\n\t\treturn null;\r\n\t}\r\n\treturn this.validateArrayLength(data, schema, dataPointerPath)\r\n\t\t|| this.validateArrayUniqueItems(data, schema, dataPointerPath)\r\n\t\t|| this.validateArrayItems(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {\r\n\tvar error;\r\n\tif (schema.minItems !== undefined) {\r\n\t\tif (data.length < schema.minItems) {\r\n\t\t\terror = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems}, \'\', \'/minItems\', null, data, schema);\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (schema.maxItems !== undefined) {\r\n\t\tif (data.length > schema.maxItems) {\r\n\t\t\terror = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems}, \'\', \'/maxItems\', null, data, schema);\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {\r\n\tif (schema.uniqueItems) {\r\n\t\tfor (var i = 0; i < data.length; i++) {\r\n\t\t\tfor (var j = i + 1; j < data.length; j++) {\r\n\t\t\t\tif (recursiveCompare(data[i], data[j])) {\r\n\t\t\t\t\tvar error = this.createError(ErrorCodes.ARRAY_UNIQUE, {match1: i, match2: j}, \'\', \'/uniqueItems\', null, data, schema);\r\n\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {\r\n\tif (schema.items === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar error, i;\r\n\tif (Array.isArray(schema.items)) {\r\n\t\tfor (i = 0; i < data.length; i++) {\r\n\t\t\tif (i < schema.items.length) {\r\n\t\t\t\tif (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t}\r\n\t\t\t} else if (schema.additionalItems !== undefined) {\r\n\t\t\t\tif (typeof schema.additionalItems === "boolean") {\r\n\t\t\t\t\tif (!schema.additionalItems) {\r\n\t\t\t\t\t\terror = (this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, \'/\' + i, \'/additionalItems\', null, data, schema));\r\n\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tfor (i = 0; i < data.length; i++) {\r\n\t\t\tif (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {\r\n\tif (typeof data !== "object" || data === null || Array.isArray(data)) {\r\n\t\treturn null;\r\n\t}\r\n\treturn this.validateObjectMinMaxProperties(data, schema, dataPointerPath)\r\n\t\t|| this.validateObjectRequiredProperties(data, schema, dataPointerPath)\r\n\t\t|| this.validateObjectProperties(data, schema, dataPointerPath)\r\n\t\t|| this.validateObjectDependencies(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {\r\n\tvar keys = Object.keys(data);\r\n\tvar error;\r\n\tif (schema.minProperties !== undefined) {\r\n\t\tif (keys.length < schema.minProperties) {\r\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}, \'\', \'/minProperties\', null, data, schema);\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (schema.maxProperties !== undefined) {\r\n\t\tif (keys.length > schema.maxProperties) {\r\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}, \'\', \'/maxProperties\', null, data, schema);\r\n\t\t\tif (this.handleError(error)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {\r\n\tif (schema.required !== undefined) {\r\n\t\tfor (var i = 0; i < schema.required.length; i++) {\r\n\t\t\tvar key = schema.required[i];\r\n\t\t\tif (data[key] === undefined) {\r\n\t\t\t\tvar error = this.createError(ErrorCodes.OBJECT_REQUIRED, {key: key}, \'\', \'/required/\' + i, null, data, schema);\r\n\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {\r\n\tvar error;\r\n\tfor (var key in data) {\r\n\t\tvar keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, \'~0\').replace(/\\//g, \'~1\');\r\n\t\tvar foundMatch = false;\r\n\t\tif (schema.properties !== undefined && schema.properties[key] !== undefined) {\r\n\t\t\tfoundMatch = true;\r\n\t\t\tif (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (schema.patternProperties !== undefined) {\r\n\t\t\tfor (var patternKey in schema.patternProperties) {\r\n\t\t\t\tvar regexp = new RegExp(patternKey);\r\n\t\t\t\tif (regexp.test(key)) {\r\n\t\t\t\t\tfoundMatch = true;\r\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!foundMatch) {\r\n\t\t\tif (schema.additionalProperties !== undefined) {\r\n\t\t\t\tif (this.trackUnknownProperties) {\r\n\t\t\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\r\n\t\t\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\r\n\t\t\t\t}\r\n\t\t\t\tif (typeof schema.additionalProperties === "boolean") {\r\n\t\t\t\t\tif (!schema.additionalProperties) {\r\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {key: key}, \'\', \'/additionalProperties\', null, data, schema).prefixWith(key, null);\r\n\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {\r\n\t\t\t\tthis.unknownPropertyPaths[keyPointerPath] = true;\r\n\t\t\t}\r\n\t\t} else if (this.trackUnknownProperties) {\r\n\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\r\n\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {\r\n\tvar error;\r\n\tif (schema.dependencies !== undefined) {\r\n\t\tfor (var depKey in schema.dependencies) {\r\n\t\t\tif (data[depKey] !== undefined) {\r\n\t\t\t\tvar dep = schema.dependencies[depKey];\r\n\t\t\t\tif (typeof dep === "string") {\r\n\t\t\t\t\tif (data[dep] === undefined) {\r\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}, \'\', \'\', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");\r\n\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (Array.isArray(dep)) {\r\n\t\t\t\t\tfor (var i = 0; i < dep.length; i++) {\r\n\t\t\t\t\t\tvar requiredKey = dep[i];\r\n\t\t\t\t\t\tif (data[requiredKey] === undefined) {\r\n\t\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}, \'\', \'/\' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");\r\n\t\t\t\t\t\t\tif (this.handleError(error)) {\r\n\t\t\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {\r\n\t\t\t\t\t\treturn error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {\r\n\treturn this.validateAllOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateAnyOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateOneOf(data, schema, dataPointerPath)\r\n\t\t|| this.validateNot(data, schema, dataPointerPath)\r\n\t\t|| null;\r\n};\r\n\r\nValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {\r\n\tif (schema.allOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar error;\r\n\tfor (var i = 0; i < schema.allOf.length; i++) {\r\n\t\tvar subSchema = schema.allOf[i];\r\n\t\tif (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {\r\n\t\t\treturn error;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {\r\n\tif (schema.anyOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar errors = [];\r\n\tvar startErrorCount = this.errors.length;\r\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\r\n\tif (this.trackUnknownProperties) {\r\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\r\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\r\n\t}\r\n\tvar errorAtEnd = true;\r\n\tfor (var i = 0; i < schema.anyOf.length; i++) {\r\n\t\tif (this.trackUnknownProperties) {\r\n\t\t\tthis.unknownPropertyPaths = {};\r\n\t\t\tthis.knownPropertyPaths = {};\r\n\t\t}\r\n\t\tvar subSchema = schema.anyOf[i];\r\n\r\n\t\tvar errorCount = this.errors.length;\r\n\t\tvar error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);\r\n\r\n\t\tif (error === null && errorCount === this.errors.length) {\r\n\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\r\n\t\t\tif (this.trackUnknownProperties) {\r\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\r\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\r\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\r\n\t\t\t\t}\r\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\r\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\r\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// We need to continue looping so we catch all the property definitions, but we don\'t want to return an error\r\n\t\t\t\terrorAtEnd = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (error) {\r\n\t\t\terrors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));\r\n\t\t}\r\n\t}\r\n\tif (this.trackUnknownProperties) {\r\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\r\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\r\n\t}\r\n\tif (errorAtEnd) {\r\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\r\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t\treturn this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);\r\n\t}\r\n};\r\n\r\nValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {\r\n\tif (schema.oneOf === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar validIndex = null;\r\n\tvar errors = [];\r\n\tvar startErrorCount = this.errors.length;\r\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\r\n\tif (this.trackUnknownProperties) {\r\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\r\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\r\n\t}\r\n\tfor (var i = 0; i < schema.oneOf.length; i++) {\r\n\t\tif (this.trackUnknownProperties) {\r\n\t\t\tthis.unknownPropertyPaths = {};\r\n\t\t\tthis.knownPropertyPaths = {};\r\n\t\t}\r\n\t\tvar subSchema = schema.oneOf[i];\r\n\r\n\t\tvar errorCount = this.errors.length;\r\n\t\tvar error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);\r\n\r\n\t\tif (error === null && errorCount === this.errors.length) {\r\n\t\t\tif (validIndex === null) {\r\n\t\t\t\tvalidIndex = i;\r\n\t\t\t} else {\r\n\t\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t\t\t\treturn this.createError(ErrorCodes.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, "", "/oneOf", null, data, schema);\r\n\t\t\t}\r\n\t\t\tif (this.trackUnknownProperties) {\r\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\r\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\r\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\r\n\t\t\t\t}\r\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\r\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\r\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (error) {\r\n\t\t\terrors.push(error);\r\n\t\t}\r\n\t}\r\n\tif (this.trackUnknownProperties) {\r\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\r\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\r\n\t}\r\n\tif (validIndex === null) {\r\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\r\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t\treturn this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);\r\n\t} else {\r\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {\r\n\tif (schema.not === undefined) {\r\n\t\treturn null;\r\n\t}\r\n\tvar oldErrorCount = this.errors.length;\r\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\r\n\tif (this.trackUnknownProperties) {\r\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\r\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\r\n\t\tthis.unknownPropertyPaths = {};\r\n\t\tthis.knownPropertyPaths = {};\r\n\t}\r\n\tvar error = this.validateAll(data, schema.not, null, null, dataPointerPath);\r\n\tvar notErrors = this.errors.slice(oldErrorCount);\r\n\tthis.errors = this.errors.slice(0, oldErrorCount);\r\n\tif (this.trackUnknownProperties) {\r\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\r\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\r\n\t}\r\n\tif (error === null && notErrors.length === 0) {\r\n\t\treturn this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {\r\n\tif (!schema.links) {\r\n\t\treturn null;\r\n\t}\r\n\tvar error;\r\n\tfor (var i = 0; i < schema.links.length; i++) {\r\n\t\tvar ldo = schema.links[i];\r\n\t\tif (ldo.rel === "describedby") {\r\n\t\t\tvar template = new UriTemplate(ldo.href);\r\n\t\t\tvar allPresent = true;\r\n\t\t\tfor (var j = 0; j < template.varNames.length; j++) {\r\n\t\t\t\tif (!(template.varNames[j] in data)) {\r\n\t\t\t\t\tallPresent = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (allPresent) {\r\n\t\t\t\tvar schemaUrl = template.fillFromObject(data);\r\n\t\t\t\tvar subSchema = {"$ref": schemaUrl};\r\n\t\t\t\tif (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// parseURI() and resolveUrl() are from https://gist.github.com/1088850\r\n//   -  released as public domain by author ("Yaffle") - see comments on gist\r\n\r\nfunction parseURI(url) {\r\n\tvar m = String(url).replace(/^\\s+|\\s+$/g, \'\').match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\r\n\t// authority = \'//\' + user + \':\' + pass \'@\' + hostname + \':\' port\r\n\treturn (m ? {\r\n\t\thref     : m[0] || \'\',\r\n\t\tprotocol : m[1] || \'\',\r\n\t\tauthority: m[2] || \'\',\r\n\t\thost     : m[3] || \'\',\r\n\t\thostname : m[4] || \'\',\r\n\t\tport     : m[5] || \'\',\r\n\t\tpathname : m[6] || \'\',\r\n\t\tsearch   : m[7] || \'\',\r\n\t\thash     : m[8] || \'\'\r\n\t} : null);\r\n}\r\n\r\nfunction resolveUrl(base, href) {// RFC 3986\r\n\r\n\tfunction removeDotSegments(input) {\r\n\t\tvar output = [];\r\n\t\tinput.replace(/^(\\.\\.?(\\/|$))+/, \'\')\r\n\t\t\t.replace(/\\/(\\.(\\/|$))+/g, \'/\')\r\n\t\t\t.replace(/\\/\\.\\.$/, \'/../\')\r\n\t\t\t.replace(/\\/?[^\\/]*/g, function (p) {\r\n\t\t\t\tif (p === \'/..\') {\r\n\t\t\t\t\toutput.pop();\r\n\t\t\t\t} else {\r\n\t\t\t\t\toutput.push(p);\r\n\t\t\t\t}\r\n\t\t});\r\n\t\treturn output.join(\'\').replace(/^\\//, input.charAt(0) === \'/\' ? \'/\' : \'\');\r\n\t}\r\n\r\n\thref = parseURI(href || \'\');\r\n\tbase = parseURI(base || \'\');\r\n\r\n\treturn !href || !base ? null : (href.protocol || base.protocol) +\r\n\t\t(href.protocol || href.authority ? href.authority : base.authority) +\r\n\t\tremoveDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === \'/\' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? \'/\' : \'\') + base.pathname.slice(0, base.pathname.lastIndexOf(\'/\') + 1) + href.pathname) : base.pathname)) +\r\n\t\t(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +\r\n\t\thref.hash;\r\n}\r\n\r\nfunction getDocumentUri(uri) {\r\n\treturn uri.split(\'#\')[0];\r\n}\r\nfunction normSchema(schema, baseUri) {\r\n\tif (schema && typeof schema === "object") {\r\n\t\tif (baseUri === undefined) {\r\n\t\t\tbaseUri = schema.id;\r\n\t\t} else if (typeof schema.id === "string") {\r\n\t\t\tbaseUri = resolveUrl(baseUri, schema.id);\r\n\t\t\tschema.id = baseUri;\r\n\t\t}\r\n\t\tif (Array.isArray(schema)) {\r\n\t\t\tfor (var i = 0; i < schema.length; i++) {\r\n\t\t\t\tnormSchema(schema[i], baseUri);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (typeof schema[\'$ref\'] === "string") {\r\n\t\t\t\tschema[\'$ref\'] = resolveUrl(baseUri, schema[\'$ref\']);\r\n\t\t\t}\r\n\t\t\tfor (var key in schema) {\r\n\t\t\t\tif (key !== "enum") {\r\n\t\t\t\t\tnormSchema(schema[key], baseUri);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction defaultErrorReporter(language) {\r\n\tlanguage = language || \'en\';\r\n\r\n\tvar errorMessages = languages[language];\r\n\r\n\treturn function (error) {\r\n\t\tvar messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];\r\n\t\tif (typeof messageTemplate !== \'string\') {\r\n\t\t\treturn "Unknown error code " + error.code + ": " + JSON.stringify(error.messageParams);\r\n\t\t}\r\n\t\tvar messageParams = error.params;\r\n\t\t// Adapted from Crockford\'s supplant()\r\n\t\treturn messageTemplate.replace(/\\{([^{}]*)\\}/g, function (whole, varName) {\r\n\t\t\tvar subValue = messageParams[varName];\r\n\t\t\treturn typeof subValue === \'string\' || typeof subValue === \'number\' ? subValue : whole;\r\n\t\t});\r\n\t};\r\n}\r\n\r\nvar ErrorCodes = {\r\n\tINVALID_TYPE: 0,\r\n\tENUM_MISMATCH: 1,\r\n\tANY_OF_MISSING: 10,\r\n\tONE_OF_MISSING: 11,\r\n\tONE_OF_MULTIPLE: 12,\r\n\tNOT_PASSED: 13,\r\n\t// Numeric errors\r\n\tNUMBER_MULTIPLE_OF: 100,\r\n\tNUMBER_MINIMUM: 101,\r\n\tNUMBER_MINIMUM_EXCLUSIVE: 102,\r\n\tNUMBER_MAXIMUM: 103,\r\n\tNUMBER_MAXIMUM_EXCLUSIVE: 104,\r\n\tNUMBER_NOT_A_NUMBER: 105,\r\n\t// String errors\r\n\tSTRING_LENGTH_SHORT: 200,\r\n\tSTRING_LENGTH_LONG: 201,\r\n\tSTRING_PATTERN: 202,\r\n\t// Object errors\r\n\tOBJECT_PROPERTIES_MINIMUM: 300,\r\n\tOBJECT_PROPERTIES_MAXIMUM: 301,\r\n\tOBJECT_REQUIRED: 302,\r\n\tOBJECT_ADDITIONAL_PROPERTIES: 303,\r\n\tOBJECT_DEPENDENCY_KEY: 304,\r\n\t// Array errors\r\n\tARRAY_LENGTH_SHORT: 400,\r\n\tARRAY_LENGTH_LONG: 401,\r\n\tARRAY_UNIQUE: 402,\r\n\tARRAY_ADDITIONAL_ITEMS: 403,\r\n\t// Custom/user-defined errors\r\n\tFORMAT_CUSTOM: 500,\r\n\tKEYWORD_CUSTOM: 501,\r\n\t// Schema structure\r\n\tCIRCULAR_REFERENCE: 600,\r\n\t// Non-standard validation options\r\n\tUNKNOWN_PROPERTY: 1000\r\n};\r\nvar ErrorCodeLookup = {};\r\nfor (var key in ErrorCodes) {\r\n\tErrorCodeLookup[ErrorCodes[key]] = key;\r\n}\r\nvar ErrorMessagesDefault = {\r\n\tINVALID_TYPE: "Invalid type: {type} (expected {expected})",\r\n\tENUM_MISMATCH: "No enum match for: {value}",\r\n\tANY_OF_MISSING: "Data does not match any schemas from \\"anyOf\\"",\r\n\tONE_OF_MISSING: "Data does not match any schemas from \\"oneOf\\"",\r\n\tONE_OF_MULTIPLE: "Data is valid against more than one schema from \\"oneOf\\": indices {index1} and {index2}",\r\n\tNOT_PASSED: "Data matches schema from \\"not\\"",\r\n\t// Numeric errors\r\n\tNUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",\r\n\tNUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",\r\n\tNUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",\r\n\tNUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",\r\n\tNUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",\r\n\tNUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",\r\n\t// String errors\r\n\tSTRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",\r\n\tSTRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",\r\n\tSTRING_PATTERN: "String does not match pattern: {pattern}",\r\n\t// Object errors\r\n\tOBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",\r\n\tOBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",\r\n\tOBJECT_REQUIRED: "Missing required property: {key}",\r\n\tOBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",\r\n\tOBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",\r\n\t// Array errors\r\n\tARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",\r\n\tARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",\r\n\tARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",\r\n\tARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",\r\n\t// Format errors\r\n\tFORMAT_CUSTOM: "Format validation failed ({message})",\r\n\tKEYWORD_CUSTOM: "Keyword failed: {key} ({message})",\r\n\t// Schema structure\r\n\tCIRCULAR_REFERENCE: "Circular $refs: {urls}",\r\n\t// Non-standard validation options\r\n\tUNKNOWN_PROPERTY: "Unknown property (not in schema)"\r\n};\r\n\r\nfunction ValidationError(code, params, dataPath, schemaPath, subErrors) {\r\n\tError.call(this);\r\n\tif (code === undefined) {\r\n\t\tthrow new Error ("No error code supplied: " + schemaPath);\r\n\t}\r\n\tthis.message = \'\';\r\n\tthis.params = params;\r\n\tthis.code = code;\r\n\tthis.dataPath = dataPath || "";\r\n\tthis.schemaPath = schemaPath || "";\r\n\tthis.subErrors = subErrors || null;\r\n\r\n\tvar err = new Error(this.message);\r\n\tthis.stack = err.stack || err.stacktrace;\r\n\tif (!this.stack) {\r\n\t\ttry {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\tcatch(err) {\r\n\t\t\tthis.stack = err.stack || err.stacktrace;\r\n\t\t}\r\n\t}\r\n}\r\nValidationError.prototype = Object.create(Error.prototype);\r\nValidationError.prototype.constructor = ValidationError;\r\nValidationError.prototype.name = \'ValidationError\';\r\n\r\nValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {\r\n\tif (dataPrefix !== null) {\r\n\t\tdataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\\//g, "~1");\r\n\t\tthis.dataPath = "/" + dataPrefix + this.dataPath;\r\n\t}\r\n\tif (schemaPrefix !== null) {\r\n\t\tschemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\\//g, "~1");\r\n\t\tthis.schemaPath = "/" + schemaPrefix + this.schemaPath;\r\n\t}\r\n\tif (this.subErrors !== null) {\r\n\t\tfor (var i = 0; i < this.subErrors.length; i++) {\r\n\t\t\tthis.subErrors[i].prefixWith(dataPrefix, schemaPrefix);\r\n\t\t}\r\n\t}\r\n\treturn this;\r\n};\r\n\r\nfunction isTrustedUrl(baseUrl, testUrl) {\r\n\tif(testUrl.substring(0, baseUrl.length) === baseUrl){\r\n\t\tvar remainder = testUrl.substring(baseUrl.length);\r\n\t\tif ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/")\r\n\t\t\t|| remainder.charAt(0) === "#"\r\n\t\t\t|| remainder.charAt(0) === "?") {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nvar languages = {};\r\nfunction createApi(language) {\r\n\tvar globalContext = new ValidatorContext();\r\n\tvar currentLanguage;\r\n\tvar customErrorReporter;\r\n\tvar api = {\r\n\t\tsetErrorReporter: function (reporter) {\r\n\t\t\tif (typeof reporter === \'string\') {\r\n\t\t\t\treturn this.language(reporter);\r\n\t\t\t}\r\n\t\t\tcustomErrorReporter = reporter;\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\taddFormat: function () {\r\n\t\t\tglobalContext.addFormat.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tlanguage: function (code) {\r\n\t\t\tif (!code) {\r\n\t\t\t\treturn currentLanguage;\r\n\t\t\t}\r\n\t\t\tif (!languages[code]) {\r\n\t\t\t\tcode = code.split(\'-\')[0]; // fall back to base language\r\n\t\t\t}\r\n\t\t\tif (languages[code]) {\r\n\t\t\t\tcurrentLanguage = code;\r\n\t\t\t\treturn code; // so you can tell if fall-back has happened\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\taddLanguage: function (code, messageMap) {\r\n\t\t\tvar key;\r\n\t\t\tfor (key in ErrorCodes) {\r\n\t\t\t\tif (messageMap[key] && !messageMap[ErrorCodes[key]]) {\r\n\t\t\t\t\tmessageMap[ErrorCodes[key]] = messageMap[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar rootCode = code.split(\'-\')[0];\r\n\t\t\tif (!languages[rootCode]) { // use for base language if not yet defined\r\n\t\t\t\tlanguages[code] = messageMap;\r\n\t\t\t\tlanguages[rootCode] = messageMap;\r\n\t\t\t} else {\r\n\t\t\t\tlanguages[code] = Object.create(languages[rootCode]);\r\n\t\t\t\tfor (key in messageMap) {\r\n\t\t\t\t\tif (typeof languages[rootCode][key] === \'undefined\') {\r\n\t\t\t\t\t\tlanguages[rootCode][key] = messageMap[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlanguages[code][key] = messageMap[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tfreshApi: function (language) {\r\n\t\t\tvar result = createApi();\r\n\t\t\tif (language) {\r\n\t\t\t\tresult.language(language);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tvalidate: function (data, schema, checkRecursive, banUnknownProperties) {\r\n\t\t\tvar def = defaultErrorReporter(currentLanguage);\r\n\t\t\tvar errorReporter = customErrorReporter ? function (error, data, schema) {\r\n\t\t\t\treturn customErrorReporter(error, data, schema) || def(error, data, schema);\r\n\t\t\t} : def;\r\n\t\t\tvar context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);\r\n\t\t\tif (typeof schema === "string") {\r\n\t\t\t\tschema = {"$ref": schema};\r\n\t\t\t}\r\n\t\t\tcontext.addSchema("", schema);\r\n\t\t\tvar error = context.validateAll(data, schema, null, null, "");\r\n\t\t\tif (!error && banUnknownProperties) {\r\n\t\t\t\terror = context.banUnknownProperties(data, schema);\r\n\t\t\t}\r\n\t\t\tthis.error = error;\r\n\t\t\tthis.missing = context.missing;\r\n\t\t\tthis.valid = (error === null);\r\n\t\t\treturn this.valid;\r\n\t\t},\r\n\t\tvalidateResult: function () {\r\n\t\t\tvar result = {toString: function () {\r\n\t\t\t\treturn this.valid ? \'valid\' : this.error.message;\r\n\t\t\t}};\r\n\t\t\tthis.validate.apply(result, arguments);\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tvalidateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {\r\n\t\t\tvar def = defaultErrorReporter(currentLanguage);\r\n\t\t\tvar errorReporter = customErrorReporter ? function (error, data, schema) {\r\n\t\t\t\treturn customErrorReporter(error, data, schema) || def(error, data, schema);\r\n\t\t\t} : def;\r\n\t\t\tvar context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);\r\n\t\t\tif (typeof schema === "string") {\r\n\t\t\t\tschema = {"$ref": schema};\r\n\t\t\t}\r\n\t\t\tcontext.addSchema("", schema);\r\n\t\t\tcontext.validateAll(data, schema, null, null, "");\r\n\t\t\tif (banUnknownProperties) {\r\n\t\t\t\tcontext.banUnknownProperties(data, schema);\r\n\t\t\t}\r\n\t\t\tvar result = {toString: function () {\r\n\t\t\t\treturn this.valid ? \'valid\' : this.error.message;\r\n\t\t\t}};\r\n\t\t\tresult.errors = context.errors;\r\n\t\t\tresult.missing = context.missing;\r\n\t\t\tresult.valid = (result.errors.length === 0);\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\taddSchema: function () {\r\n\t\t\treturn globalContext.addSchema.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetSchema: function () {\r\n\t\t\treturn globalContext.getSchema.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetSchemaMap: function () {\r\n\t\t\treturn globalContext.getSchemaMap.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetSchemaUris: function () {\r\n\t\t\treturn globalContext.getSchemaUris.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tgetMissingUris: function () {\r\n\t\t\treturn globalContext.getMissingUris.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tdropSchemas: function () {\r\n\t\t\tglobalContext.dropSchemas.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tdefineKeyword: function () {\r\n\t\t\tglobalContext.defineKeyword.apply(globalContext, arguments);\r\n\t\t},\r\n\t\tdefineError: function (codeName, codeNumber, defaultMessage) {\r\n\t\t\tif (typeof codeName !== \'string\' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {\r\n\t\t\t\tthrow new Error(\'Code name must be a string in UPPER_CASE_WITH_UNDERSCORES\');\r\n\t\t\t}\r\n\t\t\tif (typeof codeNumber !== \'number\' || codeNumber%1 !== 0 || codeNumber < 10000) {\r\n\t\t\t\tthrow new Error(\'Code number must be an integer > 10000\');\r\n\t\t\t}\r\n\t\t\tif (typeof ErrorCodes[codeName] !== \'undefined\') {\r\n\t\t\t\tthrow new Error(\'Error already defined: \' + codeName + \' as \' + ErrorCodes[codeName]);\r\n\t\t\t}\r\n\t\t\tif (typeof ErrorCodeLookup[codeNumber] !== \'undefined\') {\r\n\t\t\t\tthrow new Error(\'Error code already used: \' + ErrorCodeLookup[codeNumber] + \' as \' + codeNumber);\r\n\t\t\t}\r\n\t\t\tErrorCodes[codeName] = codeNumber;\r\n\t\t\tErrorCodeLookup[codeNumber] = codeName;\r\n\t\t\tErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;\r\n\t\t\tfor (var langCode in languages) {\r\n\t\t\t\tvar language = languages[langCode];\r\n\t\t\t\tif (language[codeName]) {\r\n\t\t\t\t\tlanguage[codeNumber] = language[codeNumber] || language[codeName];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\treset: function () {\r\n\t\t\tglobalContext.reset();\r\n\t\t\tthis.error = null;\r\n\t\t\tthis.missing = [];\r\n\t\t\tthis.valid = true;\r\n\t\t},\r\n\t\tmissing: [],\r\n\t\terror: null,\r\n\t\tvalid: true,\r\n\t\tnormSchema: normSchema,\r\n\t\tresolveUrl: resolveUrl,\r\n\t\tgetDocumentUri: getDocumentUri,\r\n\t\terrorCodes: ErrorCodes\r\n\t};\r\n\tapi.language(language || \'en\');\r\n\treturn api;\r\n}\r\n\r\nvar tv4 = createApi();\r\ntv4.addLanguage(\'en-gb\', ErrorMessagesDefault);\r\n\r\n//legacy property\r\ntv4.tv4 = tv4;\r\n\r\nreturn tv4; // used by _header.js to globalise.\r\n\r\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90\n')},function(module,exports,__webpack_require__){eval("module.exports = !__webpack_require__(9) && !__webpack_require__(3)(function () {\n  return Object.defineProperty(__webpack_require__(61)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz9jNjlhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(2);\nvar core = __webpack_require__(8);\nvar LIBRARY = __webpack_require__(31);\nvar wksExt = __webpack_require__(62);\nvar defineProperty = __webpack_require__(10).f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzPzNhNzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///92\n")},function(module,exports,__webpack_require__){eval("var has = __webpack_require__(14);\nvar toIObject = __webpack_require__(16);\nvar arrayIndexOf = __webpack_require__(50)(false);\nvar IE_PROTO = __webpack_require__(63)('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz9jZTEwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93\n")},function(module,exports,__webpack_require__){eval("var dP = __webpack_require__(10);\nvar anObject = __webpack_require__(4);\nvar getKeys = __webpack_require__(32);\n\nmodule.exports = __webpack_require__(9) ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzPzE0OTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94\n")},function(module,exports,__webpack_require__){eval("// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __webpack_require__(16);\nvar gOPN = __webpack_require__(35).f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanM/N2JiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 19.1.2.1 Object.assign(target, source, ...)\nvar DESCRIPTORS = __webpack_require__(9);\nvar getKeys = __webpack_require__(32);\nvar gOPS = __webpack_require__(51);\nvar pIE = __webpack_require__(46);\nvar toObject = __webpack_require__(11);\nvar IObject = __webpack_require__(45);\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(3)(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzPzczMzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n")},function(module,exports){eval("// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzPzgzYTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///97\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar aFunction = __webpack_require__(19);\nvar isObject = __webpack_require__(5);\nvar invoke = __webpack_require__(99);\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzP2YwYzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///98\n")},function(module,exports){eval("// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanM/MzFmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///99\n")},function(module,exports,__webpack_require__){eval("var $parseInt = __webpack_require__(2).parseInt;\nvar $trim = __webpack_require__(40).trim;\nvar ws = __webpack_require__(67);\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzPzNjYTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///100\n")},function(module,exports,__webpack_require__){eval("var $parseFloat = __webpack_require__(2).parseFloat;\nvar $trim = __webpack_require__(40).trim;\n\nmodule.exports = 1 / $parseFloat(__webpack_require__(67) + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanM/ZDc1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///101\n")},function(module,exports,__webpack_require__){eval("var cof = __webpack_require__(24);\nmodule.exports = function (it, msg) {\n  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n  return +it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanM/YmVmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///102\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.3 Number.isInteger(number)\nvar isObject = __webpack_require__(5);\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcz85YzEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///103\n")},function(module,exports){eval("// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcz9kNmM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///104\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar create = __webpack_require__(34);\nvar descriptor = __webpack_require__(29);\nvar setToStringTag = __webpack_require__(39);\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(15)(IteratorPrototype, __webpack_require__(6)('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanM/NDFhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///105\n")},function(module,exports,__webpack_require__){eval("// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(4);\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzPzFmYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///106\n")},function(module,exports,__webpack_require__){eval("// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = __webpack_require__(219);\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanM/Y2QxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///107\n")},function(module,exports,__webpack_require__){eval("var aFunction = __webpack_require__(19);\nvar toObject = __webpack_require__(11);\nvar IObject = __webpack_require__(45);\nvar toLength = __webpack_require__(7);\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzPzdiMjMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///108\n")},function(module,exports,__webpack_require__){"use strict";eval("// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n\nvar toObject = __webpack_require__(11);\nvar toAbsoluteIndex = __webpack_require__(33);\nvar toLength = __webpack_require__(7);\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanM/YmE5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///109\n")},function(module,exports){eval("module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzP2Q1M2IiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///110\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar regexpExec = __webpack_require__(82);\n__webpack_require__(1)({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanM/YjBjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///111\n")},function(module,exports,__webpack_require__){eval("// 21.2.5.3 get RegExp.prototype.flags()\nif (__webpack_require__(9) && /./g.flags != 'g') __webpack_require__(10).f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: __webpack_require__(54)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzPzM4NDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///112\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar LIBRARY = __webpack_require__(31);\nvar global = __webpack_require__(2);\nvar ctx = __webpack_require__(18);\nvar classof = __webpack_require__(47);\nvar $export = __webpack_require__(1);\nvar isObject = __webpack_require__(5);\nvar aFunction = __webpack_require__(19);\nvar anInstance = __webpack_require__(43);\nvar forOf = __webpack_require__(57);\nvar speciesConstructor = __webpack_require__(48);\nvar task = __webpack_require__(84).set;\nvar microtask = __webpack_require__(239)();\nvar newPromiseCapabilityModule = __webpack_require__(114);\nvar perform = __webpack_require__(240);\nvar userAgent = __webpack_require__(58);\nvar promiseResolve = __webpack_require__(115);\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[__webpack_require__(6)('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = __webpack_require__(44)($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\n__webpack_require__(39)($Promise, PROMISE);\n__webpack_require__(42)(PROMISE);\nWrapper = __webpack_require__(8)[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(53)(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///113\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = __webpack_require__(19);\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcz9hNWI4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///114\n")},function(module,exports,__webpack_require__){eval("var anObject = __webpack_require__(4);\nvar isObject = __webpack_require__(5);\nvar newPromiseCapability = __webpack_require__(114);\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzP2JjYWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///115\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar dP = __webpack_require__(10).f;\nvar create = __webpack_require__(34);\nvar redefineAll = __webpack_require__(44);\nvar ctx = __webpack_require__(18);\nvar anInstance = __webpack_require__(43);\nvar forOf = __webpack_require__(57);\nvar $iterDefine = __webpack_require__(73);\nvar step = __webpack_require__(110);\nvar setSpecies = __webpack_require__(42);\nvar DESCRIPTORS = __webpack_require__(9);\nvar fastKey = __webpack_require__(28).fastKey;\nvar validate = __webpack_require__(38);\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///116\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar redefineAll = __webpack_require__(44);\nvar getWeak = __webpack_require__(28).getWeak;\nvar anObject = __webpack_require__(4);\nvar isObject = __webpack_require__(5);\nvar anInstance = __webpack_require__(43);\nvar forOf = __webpack_require__(57);\nvar createArrayMethod = __webpack_require__(23);\nvar $has = __webpack_require__(14);\nvar validate = __webpack_require__(38);\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzPzY0M2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///117\n")},function(module,exports,__webpack_require__){eval("// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = __webpack_require__(20);\nvar toLength = __webpack_require__(7);\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanM/MDlmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///118\n")},function(module,exports,__webpack_require__){eval("// all object keys, includes non-enumerable and symbols\nvar gOPN = __webpack_require__(35);\nvar gOPS = __webpack_require__(51);\nvar anObject = __webpack_require__(4);\nvar Reflect = __webpack_require__(2).Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanM/OTkwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///119\n")},function(module,exports,__webpack_require__){eval("// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = __webpack_require__(7);\nvar repeat = __webpack_require__(69);\nvar defined = __webpack_require__(25);\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcz8yZTA4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///120\n")},function(module,exports,__webpack_require__){eval("var DESCRIPTORS = __webpack_require__(9);\nvar getKeys = __webpack_require__(32);\nvar toIObject = __webpack_require__(16);\nvar isEnum = __webpack_require__(46).f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzPzUwNGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///121\n")},function(module,exports){eval("var core = module.exports = { version: '2.6.8' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzPzU4NGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi44JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///122\n")},function(module,exports){eval("module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcz8yOTRjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///123\n")},function(c,e,n){n(125),c.exports=n(311)},function(module,exports,__webpack_require__){"use strict";eval('\n\n__webpack_require__(126);\n\nvar _global = _interopRequireDefault(__webpack_require__(298));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (_global.default._babelPolyfill && typeof console !== "undefined" && console.warn) {\n  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");\n}\n\n_global.default._babelPolyfill = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvaW5kZXguanM/ZTc5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4vbm9Db25mbGljdFwiKTtcblxudmFyIF9nbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuaWYgKF9nbG9iYWwuZGVmYXVsdC5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbl9nbG9iYWwuZGVmYXVsdC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///125\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(127);\n\n__webpack_require__(270);\n\n__webpack_require__(272);\n\n__webpack_require__(275);\n\n__webpack_require__(277);\n\n__webpack_require__(279);\n\n__webpack_require__(281);\n\n__webpack_require__(283);\n\n__webpack_require__(285);\n\n__webpack_require__(287);\n\n__webpack_require__(289);\n\n__webpack_require__(291);\n\n__webpack_require__(293);\n\n__webpack_require__(297);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvbm9Db25mbGljdC5qcz84MzY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9lczZcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///126\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(128);\n__webpack_require__(131);\n__webpack_require__(132);\n__webpack_require__(133);\n__webpack_require__(134);\n__webpack_require__(135);\n__webpack_require__(136);\n__webpack_require__(137);\n__webpack_require__(138);\n__webpack_require__(139);\n__webpack_require__(140);\n__webpack_require__(141);\n__webpack_require__(142);\n__webpack_require__(143);\n__webpack_require__(144);\n__webpack_require__(145);\n__webpack_require__(146);\n__webpack_require__(147);\n__webpack_require__(148);\n__webpack_require__(149);\n__webpack_require__(150);\n__webpack_require__(151);\n__webpack_require__(152);\n__webpack_require__(153);\n__webpack_require__(154);\n__webpack_require__(155);\n__webpack_require__(156);\n__webpack_require__(157);\n__webpack_require__(158);\n__webpack_require__(159);\n__webpack_require__(160);\n__webpack_require__(161);\n__webpack_require__(162);\n__webpack_require__(163);\n__webpack_require__(164);\n__webpack_require__(165);\n__webpack_require__(166);\n__webpack_require__(167);\n__webpack_require__(168);\n__webpack_require__(169);\n__webpack_require__(170);\n__webpack_require__(171);\n__webpack_require__(172);\n__webpack_require__(174);\n__webpack_require__(175);\n__webpack_require__(176);\n__webpack_require__(177);\n__webpack_require__(178);\n__webpack_require__(179);\n__webpack_require__(180);\n__webpack_require__(181);\n__webpack_require__(182);\n__webpack_require__(183);\n__webpack_require__(184);\n__webpack_require__(185);\n__webpack_require__(186);\n__webpack_require__(187);\n__webpack_require__(188);\n__webpack_require__(189);\n__webpack_require__(190);\n__webpack_require__(191);\n__webpack_require__(192);\n__webpack_require__(193);\n__webpack_require__(194);\n__webpack_require__(195);\n__webpack_require__(196);\n__webpack_require__(197);\n__webpack_require__(198);\n__webpack_require__(199);\n__webpack_require__(200);\n__webpack_require__(201);\n__webpack_require__(202);\n__webpack_require__(203);\n__webpack_require__(204);\n__webpack_require__(205);\n__webpack_require__(206);\n__webpack_require__(207);\n__webpack_require__(209);\n__webpack_require__(210);\n__webpack_require__(212);\n__webpack_require__(213);\n__webpack_require__(214);\n__webpack_require__(215);\n__webpack_require__(216);\n__webpack_require__(217);\n__webpack_require__(218);\n__webpack_require__(220);\n__webpack_require__(221);\n__webpack_require__(222);\n__webpack_require__(223);\n__webpack_require__(224);\n__webpack_require__(225);\n__webpack_require__(226);\n__webpack_require__(227);\n__webpack_require__(228);\n__webpack_require__(229);\n__webpack_require__(230);\n__webpack_require__(231);\n__webpack_require__(232);\n__webpack_require__(81);\n__webpack_require__(233);\n__webpack_require__(111);\n__webpack_require__(234);\n__webpack_require__(112);\n__webpack_require__(235);\n__webpack_require__(236);\n__webpack_require__(237);\n__webpack_require__(238);\n__webpack_require__(113);\n__webpack_require__(241);\n__webpack_require__(242);\n__webpack_require__(243);\n__webpack_require__(244);\n__webpack_require__(245);\n__webpack_require__(246);\n__webpack_require__(247);\n__webpack_require__(248);\n__webpack_require__(249);\n__webpack_require__(250);\n__webpack_require__(251);\n__webpack_require__(252);\n__webpack_require__(253);\n__webpack_require__(254);\n__webpack_require__(255);\n__webpack_require__(256);\n__webpack_require__(257);\n__webpack_require__(258);\n__webpack_require__(259);\n__webpack_require__(260);\n__webpack_require__(261);\n__webpack_require__(262);\n__webpack_require__(263);\n__webpack_require__(264);\n__webpack_require__(265);\n__webpack_require__(266);\n__webpack_require__(267);\n__webpack_require__(268);\n__webpack_require__(269);\nmodule.exports = __webpack_require__(8);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///127\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// ECMAScript 6 symbols shim\nvar global = __webpack_require__(2);\nvar has = __webpack_require__(14);\nvar DESCRIPTORS = __webpack_require__(9);\nvar $export = __webpack_require__(1);\nvar redefine = __webpack_require__(12);\nvar META = __webpack_require__(28).KEY;\nvar $fails = __webpack_require__(3);\nvar shared = __webpack_require__(49);\nvar setToStringTag = __webpack_require__(39);\nvar uid = __webpack_require__(30);\nvar wks = __webpack_require__(6);\nvar wksExt = __webpack_require__(62);\nvar wksDefine = __webpack_require__(92);\nvar enumKeys = __webpack_require__(130);\nvar isArray = __webpack_require__(52);\nvar anObject = __webpack_require__(4);\nvar isObject = __webpack_require__(5);\nvar toObject = __webpack_require__(11);\nvar toIObject = __webpack_require__(16);\nvar toPrimitive = __webpack_require__(27);\nvar createDesc = __webpack_require__(29);\nvar _create = __webpack_require__(34);\nvar gOPNExt = __webpack_require__(95);\nvar $GOPD = __webpack_require__(21);\nvar $GOPS = __webpack_require__(51);\nvar $DP = __webpack_require__(10);\nvar $keys = __webpack_require__(32);\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  __webpack_require__(35).f = gOPNExt.f = $getOwnPropertyNames;\n  __webpack_require__(46).f = $propertyIsEnumerable;\n  $GOPS.f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !__webpack_require__(31)) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });\n\n$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return $GOPS.f(toObject(it));\n  }\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(15)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///128\n")},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(49)('native-function-to-string', Function.toString);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzP2ZhNWIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///129\n")},function(module,exports,__webpack_require__){eval("// all enumerable object keys, includes symbols\nvar getKeys = __webpack_require__(32);\nvar gOPS = __webpack_require__(51);\nvar pIE = __webpack_require__(46);\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzP2Q0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///130\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: __webpack_require__(34) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcz84NDc4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///131\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperty: __webpack_require__(10).f });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcz8xYzAxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///132\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperties: __webpack_require__(94) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzPzU4YjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///133\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = __webpack_require__(16);\nvar $getOwnPropertyDescriptor = __webpack_require__(21).f;\n\n__webpack_require__(22)('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcz85OTg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///134\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = __webpack_require__(11);\nvar $getPrototypeOf = __webpack_require__(36);\n\n__webpack_require__(22)('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanM/ZTRmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///135\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(11);\nvar $keys = __webpack_require__(32);\n\n__webpack_require__(22)('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanM/NDU2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///136\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.7 Object.getOwnPropertyNames(O)\n__webpack_require__(22)('getOwnPropertyNames', function () {\n  return __webpack_require__(95).f;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanM/MjVkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///137\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.5 Object.freeze(O)\nvar isObject = __webpack_require__(5);\nvar meta = __webpack_require__(28).onFreeze;\n\n__webpack_require__(22)('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcz8wZDZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///138\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.17 Object.seal(O)\nvar isObject = __webpack_require__(5);\nvar meta = __webpack_require__(28).onFreeze;\n\n__webpack_require__(22)('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanM/Y2Y2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///139\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = __webpack_require__(5);\nvar meta = __webpack_require__(28).onFreeze;\n\n__webpack_require__(22)('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcz85YWVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///140\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.12 Object.isFrozen(O)\nvar isObject = __webpack_require__(5);\n\n__webpack_require__(22)('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcz82NmM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///141\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.13 Object.isSealed(O)\nvar isObject = __webpack_require__(5);\n\n__webpack_require__(22)('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcz81N2YwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///142\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.11 Object.isExtensible(O)\nvar isObject = __webpack_require__(5);\n\n__webpack_require__(22)('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanM/MTY1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///143\n")},function(module,exports,__webpack_require__){eval("// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(1);\n\n$export($export.S + $export.F, 'Object', { assign: __webpack_require__(96) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcz9mNzUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///144\n")},function(module,exports,__webpack_require__){eval("// 19.1.3.10 Object.is(value1, value2)\nvar $export = __webpack_require__(1);\n$export($export.S, 'Object', { is: __webpack_require__(97) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzP2RiOTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///145\n")},function(module,exports,__webpack_require__){eval("// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = __webpack_require__(1);\n$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(66).set });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanM/ZmQyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///146\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 19.1.3.6 Object.prototype.toString()\nvar classof = __webpack_require__(47);\nvar test = {};\ntest[__webpack_require__(6)('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  __webpack_require__(12)(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcz8wNmRiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///147\n")},function(module,exports,__webpack_require__){eval("// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = __webpack_require__(1);\n\n$export($export.P, 'Function', { bind: __webpack_require__(98) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcz9kOTJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///148\n")},function(module,exports,__webpack_require__){eval("var dP = __webpack_require__(10).f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || __webpack_require__(9) && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcz83ZjdmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///149\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar isObject = __webpack_require__(5);\nvar getPrototypeOf = __webpack_require__(36);\nvar HAS_INSTANCE = __webpack_require__(6)('hasInstance');\nvar FunctionProto = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(10).f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n  if (typeof this != 'function' || !isObject(O)) return false;\n  if (!isObject(this.prototype)) return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n  return false;\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzPzIxN2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///150\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar $parseInt = __webpack_require__(100);\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzPzE4ZDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///151\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar $parseFloat = __webpack_require__(101);\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanM/YjcyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///152\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar global = __webpack_require__(2);\nvar has = __webpack_require__(14);\nvar cof = __webpack_require__(24);\nvar inheritIfRequired = __webpack_require__(68);\nvar toPrimitive = __webpack_require__(27);\nvar fails = __webpack_require__(3);\nvar gOPN = __webpack_require__(35).f;\nvar gOPD = __webpack_require__(21).f;\nvar dP = __webpack_require__(10).f;\nvar $trim = __webpack_require__(40).trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(__webpack_require__(34)(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = __webpack_require__(9) ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  __webpack_require__(12)(global, NUMBER, $Number);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzP2M1ZjYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///153\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar toInteger = __webpack_require__(20);\nvar aNumberValue = __webpack_require__(102);\nvar repeat = __webpack_require__(69);\nvar $toFixed = 1.0.toFixed;\nvar floor = Math.floor;\nvar data = [0, 0, 0, 0, 0, 0];\nvar ERROR = 'Number.toFixed: incorrect invocation!';\nvar ZERO = '0';\n\nvar multiply = function (n, c) {\n  var i = -1;\n  var c2 = c;\n  while (++i < 6) {\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function (n) {\n  var i = 6;\n  var c = 0;\n  while (--i >= 0) {\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function () {\n  var i = 6;\n  var s = '';\n  while (--i >= 0) {\n    if (s !== '' || i === 0 || data[i] !== 0) {\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !__webpack_require__(3)(function () {\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits) {\n    var x = aNumberValue(this, ERROR);\n    var f = toInteger(fractionDigits);\n    var s = '';\n    var m = ZERO;\n    var e, z, j, k;\n    if (f < 0 || f > 20) throw RangeError(ERROR);\n    // eslint-disable-next-line no-self-compare\n    if (x != x) return 'NaN';\n    if (x <= -1e21 || x >= 1e21) return String(x);\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x > 1e-21) {\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = f;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if (f > 0) {\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzPzAzNmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///154\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $fails = __webpack_require__(3);\nvar aNumberValue = __webpack_require__(102);\nvar $toPrecision = 1.0.toPrecision;\n\n$export($export.P + $export.F * ($fails(function () {\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function () {\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision) {\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcz81NGE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///155\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.1 Number.EPSILON\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanM/MmUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///156\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.2 Number.isFinite(number)\nvar $export = __webpack_require__(1);\nvar _isFinite = __webpack_require__(2).isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcz9mY2EwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///157\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.3 Number.isInteger(number)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Number', { isInteger: __webpack_require__(103) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanM/N2NkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///158\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.4 Number.isNaN(number)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcz9lZTFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///159\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = __webpack_require__(1);\nvar isInteger = __webpack_require__(103);\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcz9iMWIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///160\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanM/ODdmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///161\n")},function(module,exports,__webpack_require__){eval("// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanM/OTI3OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///162\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar $parseFloat = __webpack_require__(101);\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzPzVkZjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///163\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar $parseInt = __webpack_require__(100);\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcz8wNGZmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///164\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.3 Math.acosh(x)\nvar $export = __webpack_require__(1);\nvar log1p = __webpack_require__(104);\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcz83ZjI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///165\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.5 Math.asinh(x)\nvar $export = __webpack_require__(1);\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcz81MzZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///166\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.7 Math.atanh(x)\nvar $export = __webpack_require__(1);\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcz9kOWFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///167\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.9 Math.cbrt(x)\nvar $export = __webpack_require__(1);\nvar sign = __webpack_require__(70);\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzP2Y5YWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///168\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.11 Math.clz32(x)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcz8zMmQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///169\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.12 Math.cosh(x)\nvar $export = __webpack_require__(1);\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzPzI1YzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///170\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.14 Math.expm1(x)\nvar $export = __webpack_require__(1);\nvar $expm1 = __webpack_require__(71);\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcz85ZjNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///171\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.16 Math.fround(x)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Math', { fround: __webpack_require__(173) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanM/MDQyZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///172\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.16 Math.fround(x)\nvar sign = __webpack_require__(70);\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanM/OTFjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///173\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = __webpack_require__(1);\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcz9jN2M2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///174\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.18 Math.imul(x, y)\nvar $export = __webpack_require__(1);\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * __webpack_require__(3)(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzP2Y0ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///175\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.21 Math.log10(x)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcz83ODcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///176\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.20 Math.log1p(x)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Math', { log1p: __webpack_require__(104) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcz8wNDlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///177\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.22 Math.log2(x)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzP2E2OWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///178\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.28 Math.sign(x)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Math', { sign: __webpack_require__(70) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzPzBiMjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///179\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.30 Math.sinh(x)\nvar $export = __webpack_require__(1);\nvar expm1 = __webpack_require__(71);\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * __webpack_require__(3)(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzPzZjMWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///180\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.33 Math.tanh(x)\nvar $export = __webpack_require__(1);\nvar expm1 = __webpack_require__(71);\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzP2M3YzYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///181\n")},function(module,exports,__webpack_require__){eval("// 20.2.2.34 Math.trunc(x)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcz84NGI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///182\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar toAbsoluteIndex = __webpack_require__(33);\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcz81Njk1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///183\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar toIObject = __webpack_require__(16);\nvar toLength = __webpack_require__(7);\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcz83ODhkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///184\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 21.1.3.25 String.prototype.trim()\n__webpack_require__(40)('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanM/NGYzNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///185\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $at = __webpack_require__(72)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(73)(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzPzVkZjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///186\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $at = __webpack_require__(72)(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanM/YTAzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///187\n")},function(module,exports,__webpack_require__){"use strict";eval("// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n\nvar $export = __webpack_require__(1);\nvar toLength = __webpack_require__(7);\nvar context = __webpack_require__(74);\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * __webpack_require__(76)(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcz9hZWY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///188\n")},function(module,exports,__webpack_require__){"use strict";eval("// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n\nvar $export = __webpack_require__(1);\nvar context = __webpack_require__(74);\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * __webpack_require__(76)(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzPzJmZGIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///189\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: __webpack_require__(69)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcz8xNGI5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///190\n")},function(module,exports,__webpack_require__){"use strict";eval("// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n\nvar $export = __webpack_require__(1);\nvar toLength = __webpack_require__(7);\nvar context = __webpack_require__(74);\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * __webpack_require__(76)(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzP2Y1NTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///191\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.2 String.prototype.anchor(name)\n__webpack_require__(13)('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcz84NDQ5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///192\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.3 String.prototype.big()\n__webpack_require__(13)('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcz85Yzg2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///193\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.4 String.prototype.blink()\n__webpack_require__(13)('blink', function (createHTML) {\n  return function blink() {\n    return createHTML(this, 'blink', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzP2ZhODMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///194\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.5 String.prototype.bold()\n__webpack_require__(13)('bold', function (createHTML) {\n  return function bold() {\n    return createHTML(this, 'b', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanM/NDhjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///195\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.6 String.prototype.fixed()\n__webpack_require__(13)('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzP2QyNjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///196\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.7 String.prototype.fontcolor(color)\n__webpack_require__(13)('fontcolor', function (createHTML) {\n  return function fontcolor(color) {\n    return createHTML(this, 'font', 'color', color);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcz82YzM3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///197\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.8 String.prototype.fontsize(size)\n__webpack_require__(13)('fontsize', function (createHTML) {\n  return function fontsize(size) {\n    return createHTML(this, 'font', 'size', size);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzPzllYzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///198\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.9 String.prototype.italics()\n__webpack_require__(13)('italics', function (createHTML) {\n  return function italics() {\n    return createHTML(this, 'i', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanM/ZDBiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///199\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.10 String.prototype.link(url)\n__webpack_require__(13)('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanM/YjU0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///200\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.11 String.prototype.small()\n__webpack_require__(13)('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzP2YzODYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///201\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.12 String.prototype.strike()\n__webpack_require__(13)('strike', function (createHTML) {\n  return function strike() {\n    return createHTML(this, 'strike', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcz8xNDQ4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///202\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.13 String.prototype.sub()\n__webpack_require__(13)('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcz82NzNlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///203\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// B.2.3.14 String.prototype.sup()\n__webpack_require__(13)('sup', function (createHTML) {\n  return function sup() {\n    return createHTML(this, 'sup', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcz8yNDJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///204\n")},function(module,exports,__webpack_require__){eval("// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanM/NzhjZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///205\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar toObject = __webpack_require__(11);\nvar toPrimitive = __webpack_require__(27);\n\n$export($export.P + $export.F * __webpack_require__(3)(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzPzAyOTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///206\n")},function(module,exports,__webpack_require__){eval("// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = __webpack_require__(1);\nvar toISOString = __webpack_require__(208);\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n  toISOString: toISOString\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzPzhlYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///207\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = __webpack_require__(3);\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzPzhlZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///208\n")},function(module,exports,__webpack_require__){eval("var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  __webpack_require__(12)(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanM/ODdiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///209\n")},function(module,exports,__webpack_require__){eval("var TO_PRIMITIVE = __webpack_require__(6)('toPrimitive');\nvar proto = Date.prototype;\n\nif (!(TO_PRIMITIVE in proto)) __webpack_require__(15)(proto, TO_PRIMITIVE, __webpack_require__(211));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanM/YzhjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///210\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar anObject = __webpack_require__(4);\nvar toPrimitive = __webpack_require__(27);\nvar NUMBER = 'number';\n\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanM/ODM4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///211\n")},function(module,exports,__webpack_require__){eval("// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Array', { isArray: __webpack_require__(52) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanM/MmNhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///212\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar ctx = __webpack_require__(18);\nvar $export = __webpack_require__(1);\nvar toObject = __webpack_require__(11);\nvar call = __webpack_require__(106);\nvar isArrayIter = __webpack_require__(77);\nvar toLength = __webpack_require__(7);\nvar createProperty = __webpack_require__(78);\nvar getIterFn = __webpack_require__(79);\n\n$export($export.S + $export.F * !__webpack_require__(53)(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcz8xYzRjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///213\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar createProperty = __webpack_require__(78);\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * __webpack_require__(3)(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanM/ZTgwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///214\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = __webpack_require__(1);\nvar toIObject = __webpack_require__(16);\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (__webpack_require__(45) != Object || !__webpack_require__(17)(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcz8zNzNmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///215\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar html = __webpack_require__(65);\nvar cof = __webpack_require__(24);\nvar toAbsoluteIndex = __webpack_require__(33);\nvar toLength = __webpack_require__(7);\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * __webpack_require__(3)(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = new Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanM/MjNiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///216\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar aFunction = __webpack_require__(19);\nvar toObject = __webpack_require__(11);\nvar fails = __webpack_require__(3);\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !__webpack_require__(17)($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcz81NWRkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///217\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $forEach = __webpack_require__(23)(0);\nvar STRICT = __webpack_require__(17)([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanM/ZjNlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///218\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(5);\nvar isArray = __webpack_require__(52);\nvar SPECIES = __webpack_require__(6)('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcz9lODUzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///219\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $map = __webpack_require__(23)(1);\n\n$export($export.P + $export.F * !__webpack_require__(17)([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzPzZkNjciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///220\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $filter = __webpack_require__(23)(2);\n\n$export($export.P + $export.F * !__webpack_require__(17)([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzP2QyNWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///221\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $some = __webpack_require__(23)(3);\n\n$export($export.P + $export.F * !__webpack_require__(17)([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcz83NTlmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///222\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $every = __webpack_require__(23)(4);\n\n$export($export.P + $export.F * !__webpack_require__(17)([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanM/NjA5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///223\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $reduce = __webpack_require__(108);\n\n$export($export.P + $export.F * !__webpack_require__(17)([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzPzBjZDgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///224\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $reduce = __webpack_require__(108);\n\n$export($export.P + $export.F * !__webpack_require__(17)([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzPzQ4ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///225\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $indexOf = __webpack_require__(50)(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(17)($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanM/NTdlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///226\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar toIObject = __webpack_require__(16);\nvar toInteger = __webpack_require__(20);\nvar toLength = __webpack_require__(7);\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(17)($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcz85ODY1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///227\n")},function(module,exports,__webpack_require__){eval("// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = __webpack_require__(1);\n\n$export($export.P, 'Array', { copyWithin: __webpack_require__(109) });\n\n__webpack_require__(37)('copyWithin');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanM/NzQ0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///228\n")},function(module,exports,__webpack_require__){eval("// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = __webpack_require__(1);\n\n$export($export.P, 'Array', { fill: __webpack_require__(80) });\n\n__webpack_require__(37)('fill');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcz82YzdiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///229\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = __webpack_require__(1);\nvar $find = __webpack_require__(23)(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n__webpack_require__(37)(KEY);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcz83NTE0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///230\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = __webpack_require__(1);\nvar $find = __webpack_require__(23)(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n__webpack_require__(37)(KEY);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcz8yMGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///231\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(42)('Array');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcz9kMDRmIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///232\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(2);\nvar inheritIfRequired = __webpack_require__(68);\nvar dP = __webpack_require__(10).f;\nvar gOPN = __webpack_require__(35).f;\nvar isRegExp = __webpack_require__(75);\nvar $flags = __webpack_require__(54);\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (__webpack_require__(9) && (!CORRECT_NEW || __webpack_require__(3)(function () {\n  re2[__webpack_require__(6)('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  __webpack_require__(12)(global, 'RegExp', $RegExp);\n}\n\n__webpack_require__(42)('RegExp');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzPzNiMmIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///233\n")},function(module,exports,__webpack_require__){"use strict";eval("\n__webpack_require__(112);\nvar anObject = __webpack_require__(4);\nvar $flags = __webpack_require__(54);\nvar DESCRIPTORS = __webpack_require__(9);\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  __webpack_require__(12)(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (__webpack_require__(3)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcz82YjU0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///234\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar anObject = __webpack_require__(4);\nvar toLength = __webpack_require__(7);\nvar advanceStringIndex = __webpack_require__(83);\nvar regExpExec = __webpack_require__(55);\n\n// @@match logic\n__webpack_require__(56)('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzPzQ5MTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///235\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar anObject = __webpack_require__(4);\nvar toObject = __webpack_require__(11);\nvar toLength = __webpack_require__(7);\nvar toInteger = __webpack_require__(20);\nvar advanceStringIndex = __webpack_require__(83);\nvar regExpExec = __webpack_require__(55);\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\n__webpack_require__(56)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanM/YTQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///236\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar anObject = __webpack_require__(4);\nvar sameValue = __webpack_require__(97);\nvar regExpExec = __webpack_require__(55);\n\n// @@search logic\n__webpack_require__(56)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative($search, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcz8zODZkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///237\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isRegExp = __webpack_require__(75);\nvar anObject = __webpack_require__(4);\nvar speciesConstructor = __webpack_require__(48);\nvar advanceStringIndex = __webpack_require__(83);\nvar toLength = __webpack_require__(7);\nvar callRegExpExec = __webpack_require__(55);\nvar regexpExec = __webpack_require__(82);\nvar fails = __webpack_require__(3);\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\n__webpack_require__(56)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzPzI4YTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///238\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(2);\nvar macrotask = __webpack_require__(84).set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = __webpack_require__(24)(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzPzgwNzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///239\n")},function(module,exports){eval("module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcz85YzgwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///240\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar strong = __webpack_require__(116);\nvar validate = __webpack_require__(38);\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = __webpack_require__(59)(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzP2Y0MDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///241\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar strong = __webpack_require__(116);\nvar validate = __webpack_require__(38);\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = __webpack_require__(59)(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzPzRmN2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///242\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar global = __webpack_require__(2);\nvar each = __webpack_require__(23)(0);\nvar redefine = __webpack_require__(12);\nvar meta = __webpack_require__(28);\nvar assign = __webpack_require__(96);\nvar weak = __webpack_require__(117);\nvar isObject = __webpack_require__(5);\nvar validate = __webpack_require__(38);\nvar NATIVE_WEAK_MAP = __webpack_require__(38);\nvar IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = __webpack_require__(59)(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (NATIVE_WEAK_MAP && IS_IE11) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanM/MTBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///243\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar weak = __webpack_require__(117);\nvar validate = __webpack_require__(38);\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\n__webpack_require__(59)(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanM/YzAyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///244\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar $export = __webpack_require__(1);\nvar $typed = __webpack_require__(60);\nvar buffer = __webpack_require__(85);\nvar anObject = __webpack_require__(4);\nvar toAbsoluteIndex = __webpack_require__(33);\nvar toLength = __webpack_require__(7);\nvar isObject = __webpack_require__(5);\nvar ArrayBuffer = __webpack_require__(2).ArrayBuffer;\nvar speciesConstructor = __webpack_require__(48);\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * __webpack_require__(3)(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < fin) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\n__webpack_require__(42)(ARRAY_BUFFER);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzP2M2NmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///245\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\n$export($export.G + $export.W + $export.F * !__webpack_require__(60).ABV, {\n  DataView: __webpack_require__(85).DataView\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzPzI2MmYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///246\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcz9iMDVjIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///247\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanM/MzRlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///248\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcz82YWEyIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///249\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanM/MTVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///250\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzP2FmNTYiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///251\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanM/YjZlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///252\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzPzljMjkiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///253\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcz82M2Q5Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///254\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(26)('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcz80ZGRhIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///255\n")},function(module,exports,__webpack_require__){eval("// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = __webpack_require__(1);\nvar aFunction = __webpack_require__(19);\nvar anObject = __webpack_require__(4);\nvar rApply = (__webpack_require__(2).Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !__webpack_require__(3)(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcz9kZjFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///256\n")},function(module,exports,__webpack_require__){eval("// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = __webpack_require__(1);\nvar create = __webpack_require__(34);\nvar aFunction = __webpack_require__(19);\nvar anObject = __webpack_require__(4);\nvar isObject = __webpack_require__(5);\nvar fails = __webpack_require__(3);\nvar bind = __webpack_require__(98);\nvar rConstruct = (__webpack_require__(2).Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanM/MjM5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///257\n")},function(module,exports,__webpack_require__){eval("// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = __webpack_require__(10);\nvar $export = __webpack_require__(1);\nvar anObject = __webpack_require__(4);\nvar toPrimitive = __webpack_require__(27);\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * __webpack_require__(3)(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanM/ODhjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///258\n")},function(module,exports,__webpack_require__){eval("// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = __webpack_require__(1);\nvar gOPD = __webpack_require__(21).f;\nvar anObject = __webpack_require__(4);\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanM/YmExNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///259\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 26.1.5 Reflect.enumerate(target)\nvar $export = __webpack_require__(1);\nvar anObject = __webpack_require__(4);\nvar Enumerate = function (iterated) {\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = [];      // keys\n  var key;\n  for (key in iterated) keys.push(key);\n};\n__webpack_require__(105)(Enumerate, 'Object', function () {\n  var that = this;\n  var keys = that._k;\n  var key;\n  do {\n    if (that._i >= keys.length) return { value: undefined, done: true };\n  } while (!((key = keys[that._i++]) in that._t));\n  return { value: key, done: false };\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target) {\n    return new Enumerate(target);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanM/N2ZmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///260\n")},function(module,exports,__webpack_require__){eval("// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = __webpack_require__(21);\nvar getPrototypeOf = __webpack_require__(36);\nvar has = __webpack_require__(14);\nvar $export = __webpack_require__(1);\nvar isObject = __webpack_require__(5);\nvar anObject = __webpack_require__(4);\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanM/ZDE4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///261\n")},function(module,exports,__webpack_require__){eval("// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = __webpack_require__(21);\nvar $export = __webpack_require__(1);\nvar anObject = __webpack_require__(4);\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanM/ZWJkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///262\n")},function(module,exports,__webpack_require__){eval("// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = __webpack_require__(1);\nvar getProto = __webpack_require__(36);\nvar anObject = __webpack_require__(4);\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzPzJkMzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///263\n")},function(module,exports,__webpack_require__){eval("// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanM/ZjZiMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///264\n")},function(module,exports,__webpack_require__){eval("// 26.1.10 Reflect.isExtensible(target)\nvar $export = __webpack_require__(1);\nvar anObject = __webpack_require__(4);\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzPzIyNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///265\n")},function(module,exports,__webpack_require__){eval("// 26.1.11 Reflect.ownKeys(target)\nvar $export = __webpack_require__(1);\n\n$export($export.S, 'Reflect', { ownKeys: __webpack_require__(119) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcz9jNjk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///266\n")},function(module,exports,__webpack_require__){eval("// 26.1.12 Reflect.preventExtensions(target)\nvar $export = __webpack_require__(1);\nvar anObject = __webpack_require__(4);\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanM/YTE5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///267\n")},function(module,exports,__webpack_require__){eval("// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = __webpack_require__(10);\nvar gOPD = __webpack_require__(21);\nvar getPrototypeOf = __webpack_require__(36);\nvar has = __webpack_require__(14);\nvar $export = __webpack_require__(1);\nvar createDesc = __webpack_require__(29);\nvar anObject = __webpack_require__(4);\nvar isObject = __webpack_require__(5);\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n      existingDescriptor.value = V;\n      dP.f(receiver, propertyKey, existingDescriptor);\n    } else dP.f(receiver, propertyKey, createDesc(0, V));\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanM/OTI1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///268\n")},function(module,exports,__webpack_require__){eval("// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = __webpack_require__(1);\nvar setProto = __webpack_require__(66);\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzPzkyNzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///269\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(271);\nmodule.exports = __webpack_require__(8).Array.includes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanM/MTQzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///270\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// https://github.com/tc39/Array.prototype.includes\nvar $export = __webpack_require__(1);\nvar $includes = __webpack_require__(50)(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n__webpack_require__(37)('includes');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanM/Njc2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///271\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(273);\nmodule.exports = __webpack_require__(8).Array.flatMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXAuanM/NjI5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZmxhdE1hcDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///272\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\nvar $export = __webpack_require__(1);\nvar flattenIntoArray = __webpack_require__(274);\nvar toObject = __webpack_require__(11);\nvar toLength = __webpack_require__(7);\nvar aFunction = __webpack_require__(19);\nvar arraySpeciesCreate = __webpack_require__(107);\n\n$export($export.P, 'Array', {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen, A;\n    aFunction(callbackfn);\n    sourceLen = toLength(O.length);\n    A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n    return A;\n  }\n});\n\n__webpack_require__(37)('flatMap');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanM/ZTk1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///273\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = __webpack_require__(52);\nvar isObject = __webpack_require__(5);\nvar toLength = __webpack_require__(7);\nvar ctx = __webpack_require__(18);\nvar IS_CONCAT_SPREADABLE = __webpack_require__(6)('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzP2M0NWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///274\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(276);\nmodule.exports = __webpack_require__(8).String.padStart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydC5qcz9jMThjIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///275\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = __webpack_require__(1);\nvar $pad = __webpack_require__(120);\nvar userAgent = __webpack_require__(58);\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcz9mNTc2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///276\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(278);\nmodule.exports = __webpack_require__(8).String.padEnd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmQuanM/NDBkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZEVuZDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///277\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = __webpack_require__(1);\nvar $pad = __webpack_require__(120);\nvar userAgent = __webpack_require__(58);\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanM/ZWQ1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///278\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(280);\nmodule.exports = __webpack_require__(8).String.trimLeft;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnQuanM/MjMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbUxlZnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///279\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n__webpack_require__(40)('trimLeft', function ($trim) {\n  return function trimLeft() {\n    return $trim(this, 1);\n  };\n}, 'trimStart');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcz8yM2JlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///280\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(282);\nmodule.exports = __webpack_require__(8).String.trimRight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kLmpzPzk2N2QiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltUmlnaHQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///281\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n__webpack_require__(40)('trimRight', function ($trim) {\n  return function trimRight() {\n    return $trim(this, 2);\n  };\n}, 'trimEnd');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanM/N2MwZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///282\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(284);\nmodule.exports = __webpack_require__(62).f('asyncIterator');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzP2MwM2MiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///283\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(92)('asyncIterator');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzP2FjNGQiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///284\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(286);\nmodule.exports = __webpack_require__(8).Object.getOwnPropertyDescriptors;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanM/Zjk3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///285\n")},function(module,exports,__webpack_require__){eval("// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = __webpack_require__(1);\nvar ownKeys = __webpack_require__(119);\nvar toIObject = __webpack_require__(16);\nvar gOPD = __webpack_require__(21);\nvar createProperty = __webpack_require__(78);\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanM/OGU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///286\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(288);\nmodule.exports = __webpack_require__(8).Object.values;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L3ZhbHVlcy5qcz9jYzUxIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///287\n")},function(module,exports,__webpack_require__){eval("// https://github.com/tc39/proposal-object-values-entries\nvar $export = __webpack_require__(1);\nvar $values = __webpack_require__(121)(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcz84NjE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///288\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(290);\nmodule.exports = __webpack_require__(8).Object.entries;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanM/MjViNCJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///289\n")},function(module,exports,__webpack_require__){eval("// https://github.com/tc39/proposal-object-values-entries\nvar $export = __webpack_require__(1);\nvar $entries = __webpack_require__(121)(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanM/ZmZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///290\n")},function(module,exports,__webpack_require__){"use strict";eval("\n__webpack_require__(113);\n__webpack_require__(292);\nmodule.exports = __webpack_require__(8).Promise['finally'];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzPzRjOGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///291\n")},function(module,exports,__webpack_require__){"use strict";eval("// https://github.com/tc39/proposal-promise-finally\n\nvar $export = __webpack_require__(1);\nvar core = __webpack_require__(8);\nvar global = __webpack_require__(2);\nvar speciesConstructor = __webpack_require__(48);\nvar promiseResolve = __webpack_require__(115);\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzPzA5N2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///292\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(294);\n__webpack_require__(295);\n__webpack_require__(296);\nmodule.exports = __webpack_require__(8);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzPzE3MTUiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///293\n")},function(module,exports,__webpack_require__){eval("// ie9- setTimeout & setInterval additional parameters fix\nvar global = __webpack_require__(2);\nvar $export = __webpack_require__(1);\nvar userAgent = __webpack_require__(58);\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzPzQ3OTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///294\n")},function(module,exports,__webpack_require__){eval("var $export = __webpack_require__(1);\nvar $task = __webpack_require__(84);\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzPzEzMGYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///295\n")},function(module,exports,__webpack_require__){eval("var $iterators = __webpack_require__(81);\nvar getKeys = __webpack_require__(32);\nvar redefine = __webpack_require__(12);\nvar global = __webpack_require__(2);\nvar hide = __webpack_require__(15);\nvar Iterators = __webpack_require__(41);\nvar wks = __webpack_require__(6);\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzP2FjNmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///296\n")},function(module,exports,__webpack_require__){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = "GeneratorFunction";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = "GeneratorFunction";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = "Generator";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///297\n')},function(module,exports,__webpack_require__){eval("__webpack_require__(299);\nmodule.exports = __webpack_require__(122).global;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9nbG9iYWwuanM/NTZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLmdsb2JhbDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///298\n")},function(module,exports,__webpack_require__){eval("// https://github.com/tc39/proposal-global\nvar $export = __webpack_require__(300);\n\n$export($export.G, { global: __webpack_require__(86) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5nbG9iYWwuanM/ZWNmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///299\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(86);\nvar core = __webpack_require__(122);\nvar ctx = __webpack_require__(301);\nvar hide = __webpack_require__(303);\nvar has = __webpack_require__(310);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanM/NjNiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///300\n")},function(module,exports,__webpack_require__){eval("// optional / simple context binding\nvar aFunction = __webpack_require__(302);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanM/ZDg2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///301\n")},function(module,exports){eval("module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzPzc5YWEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///302\n")},function(module,exports,__webpack_require__){eval("var dP = __webpack_require__(304);\nvar createDesc = __webpack_require__(309);\nmodule.exports = __webpack_require__(88) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzPzM1ZTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///303\n")},function(module,exports,__webpack_require__){eval("var anObject = __webpack_require__(305);\nvar IE8_DOM_DEFINE = __webpack_require__(306);\nvar toPrimitive = __webpack_require__(308);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(88) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanM/ZDlmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///304\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(87);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanM/ZTRhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///305\n")},function(module,exports,__webpack_require__){eval("module.exports = !__webpack_require__(88) && !__webpack_require__(123)(function () {\n  return Object.defineProperty(__webpack_require__(307)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz83OTRiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///306\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(87);\nvar document = __webpack_require__(86).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzPzFlYzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///307\n")},function(module,exports,__webpack_require__){eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(87);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanM/MWJjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///308\n")},function(module,exports){eval("module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzP2FlYmQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///309\n")},function(module,exports){eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanM/MDdlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///310\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(0);\nvar loglevel_default = /*#__PURE__*/__webpack_require__.n(loglevel);\n\n// CONCATENATED MODULE: ./src/logLevels.js\n\r\n\r\nconst a = loglevel_default.a.getLogger('address-allocation');\r\nconst b = loglevel_default.a.getLogger('Bus');\r\nconst c = loglevel_default.a.getLogger('MessageBus');\r\nconst d = loglevel_default.a.getLogger('CoreDiscovery');\r\nconst e = loglevel_default.a.getLogger('StorageManager');\r\nconst f = loglevel_default.a.getLogger('HypertyResourcesStorage');\r\nconst g = loglevel_default.a.getLogger('IdentityModule');\r\nconst h = loglevel_default.a.getLogger('PEP');\r\nconst logLevels_i = loglevel_default.a.getLogger('P2PConnectionResolve');\r\nconst j = loglevel_default.a.getLogger('Registry');\r\nconst k = loglevel_default.a.getLogger('RuntimeUA');\r\nconst l = loglevel_default.a.getLogger('Loader');\r\nconst m = loglevel_default.a.getLogger('Descriptors');\r\nconst n = loglevel_default.a.getLogger('DataObjectsStorage');\r\nconst o = loglevel_default.a.getLogger('Subscription');\r\nconst p = loglevel_default.a.getLogger('SubscriptionManager');\r\nconst q = loglevel_default.a.getLogger('ObserverObject');\r\nconst r = loglevel_default.a.getLogger('ReporterObject');\r\nconst s = loglevel_default.a.getLogger('SynSubscription');\r\nconst t = loglevel_default.a.getLogger('SyncherManager');\r\nconst u = loglevel_default.a.getLogger('IdentityHandler');\r\nconst v = loglevel_default.a.getLogger('CryptoManager');\r\nconst x = loglevel_default.a.getLogger('Pipeline');\r\nconst f1 = loglevel_default.a.getLogger('Syncher');\r\nconst f2 = loglevel_default.a.getLogger('RuntimeCatalogue');\r\n\r\n\r\n\r\n\r\n/**\r\n  0 actual logging methods, ordered and available as:\r\n\r\n      0 - log.trace(msg)\r\n      1 - log.debug(msg)\r\n      2 - log.info(msg)\r\n      3 - log.warn(msg)\r\n      4 - log.error(msg)\r\n\r\n  log.log(msg) is also available, as an alias for log.debug(msg), to improve compatibility with console, and make migration easier.\r\n\r\n  Exact output formatting of these will depend on the console available in the current context of your application. For example, many environments will include a full stack trace with all trace() calls, and icons or similar to highlight other calls.\r\n\r\n  These methods should never fail in any environment, even if no console object is currently available, and should always fall back to an available log method even if the specific method called (e.g. warn) isn't available.\r\n\r\n  Be aware that all this means that these method won't necessarily always produce exactly the output you expect in every environment; loglevel only guarantees that these methods will never explode on you, and that it will call the most relevant method it can find, with your argument. Firefox is a notable example here: due to a current Firefox bug log.trace(msg) calls in Firefox will print only the stacktrace, and won't include any passed message arguments.\r\n\r\n*/\r\n\r\n\r\n// address-allocation\r\na.setLevel(0);\r\n\r\n// Bus\r\nb.setLevel(3);\r\n\r\n// MessageBus\r\nc.setLevel(3);\r\n\r\n// CoreDiscovery\r\nd.setLevel(5);\r\n\r\n// StorageManager\r\ne.setLevel(0);\r\n\r\n// HypertyResourcesStorage\r\nf.setLevel(3);\r\n\r\n// IdentityModule\r\ng.setLevel(0);\r\n\r\n// PEP\r\nh.setLevel(3);\r\n\r\n// P2PConnectionResolve\r\nlogLevels_i.setLevel(3);\r\n\r\n// Registry\r\nj.setLevel(0);\r\n\r\n// RuntimeUA\r\nk.setLevel(0);\r\n\r\n// Loader\r\nl.setLevel(0);\r\n\r\n// Descriptors\r\nm.setLevel(3);\r\n\r\n// DataObjectsStorage\r\nn.setLevel(0);\r\n\r\n// Subscription\r\no.setLevel(3);\r\n\r\n// SubscriptionManager\r\np.setLevel(3);\r\n\r\n// ObserverObject\r\nq.setLevel(0);\r\n\r\n// ReporterObject\r\nr.setLevel(0);\r\n\r\n// SynSubscription\r\ns.setLevel(3);\r\n\r\n// SyncherManager\r\nt.setLevel(0);\r\n\r\n// IdentityHandler\r\nu.setLevel(3);\r\n\r\n// CryptoManager\r\nv.setLevel(0);\r\n\r\n// Pipeline\r\nx.setLevel(0);\r\n\r\n// Syncher\r\nf1.setLevel(0);\r\n\r\n// Syncher DataObjectObserver\r\nf1.setLevel(0);\r\n\r\n// RuntimeCatalogue\r\nf2.setLevel(0);\r\n\n// CONCATENATED MODULE: ./src/runtime/runtimeUtils.js\nlet runtimeUtils = {\r\n  runtimeDescriptor: {},\r\n  runtimeCapabilities: {\r\n    constraints: {}\r\n  }\r\n};\r\n\n// CONCATENATED MODULE: ./src/utils/utils.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n/**\r\n * Support module with some functions will be useful\r\n * @module utils\r\n */\r\n\r\n/**\r\n * @typedef divideURL\r\n * @type Object\r\n * @property {string} type The type of URL\r\n * @property {string} domain The domain of URL\r\n * @property {string} identity The identity of URL\r\n */\r\n\r\n/**\r\n * Divide an url in type, domain and identity\r\n * @param  {URL.URL} url - url address\r\n * @return {divideURL} the result of divideURL\r\n */\r\nfunction divideURL(url) {\r\n\r\n  function recurse(value) {\r\n    const regex = /([a-zA-Z-]*)(:\\/\\/(?:\\.)?|:)([-a-zA-Z0-9@:%._+~#=]{2,256})([-a-zA-Z0-9@:%._+~#=/]*)/gi;\r\n    const subst = '$1,$3,$4';\r\n    let parts = value.replace(regex, subst).split(',');\r\n    return parts;\r\n  }\r\n\r\n  let parts = recurse(url);\r\n\r\n  // If the url has no scheme\r\n  if (parts[0] === url && !parts[0].includes('@')) {\r\n\r\n    let result = {\r\n      type: '',\r\n      domain: url,\r\n      identity: ''\r\n    };\r\n\r\n    console.warn('[DivideURL] DivideURL don\\'t support url without scheme. Please review your url address', url);\r\n\r\n    return result;\r\n  }\r\n\r\n  // check if the url has the scheme and includes an @\r\n  if (parts[0] === url && parts[0].includes('@')) {\r\n    let scheme = parts[0] === url ? 'smtp' : parts[0];\r\n    parts = recurse(scheme + '://' + parts[0]);\r\n  }\r\n\r\n  // if the domain includes an @, divide it to domain and identity respectively\r\n  if (parts[1].includes('@')) {\r\n    parts[2] = parts[0] + '://' + parts[1];\r\n    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);\r\n  } \t/*else if (parts[2].includes('/')) {\r\n    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);\r\n  }*/\r\n\r\n  let result = {\r\n    type: parts[0],\r\n    domain: parts[1],\r\n    identity: parts[2]\r\n  };\r\n\r\n  return result;\r\n\r\n}\r\n\r\n/**\r\n * Check if an Object is empty\r\n * @param  {Object} object Object to be checked\r\n * @return {Boolean}       status of Object, empty or not (true|false);\r\n */\r\nfunction emptyObject(object) {\r\n  return Object.keys(object).length > 0 ? false : true;\r\n}\r\n\r\nfunction secondsSinceEpoch() {\r\n  return Math.floor(Date.now() / 1000);\r\n}\r\n\r\n\r\n/**\r\n * Make a COPY of the original data\r\n * @param  {Object}  obj - object to be cloned\r\n * @return {Object}\r\n */\r\nfunction deepClone(obj) {\r\n  //TODO: simple but inefficient JSON deep clone...\r\n  if (obj) return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nfunction removePathFromURL(url) {\r\n  let splitURL = url.split('/');\r\n  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\r\n}\r\n\r\n/**\r\n * Obtains the user URL that corresponds to a given email\r\n * @param  {string} userEmail The user email\r\n * @return {URL.URL} userURL The user URL\r\n */\r\nfunction getUserURLFromEmail(userEmail) {\r\n  let indexOfAt = userEmail.indexOf('@');\r\n  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);\r\n}\r\n\r\n/**\r\n * Obtains the user email that corresponds to a given URL\r\n * @param  {URL.URL} userURL The user URL\r\n * @return {string} userEmail The user email\r\n */\r\nfunction getUserEmailFromURL(userURL) {\r\n  let url = divideURL(userURL);\r\n  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'\r\n}\r\n\r\n/**\r\n * Check if the user identifier is already in the URL format, if not, convert to URL format\r\n * @param  {string}   identifier  user identifier\r\n * @return {string}   userURL    the user URL\r\n */\r\nfunction convertToUserURL(identifier) {\r\n\r\n  // check if the identifier is already in the url format\r\n  if (identifier.substring(0, 7) === 'user://') {\r\n    let dividedURL = divideURL(identifier);\r\n\r\n    //check if the url is well formated\r\n    if (dividedURL.domain && dividedURL.identity) {\r\n      return identifier;\r\n    } else {\r\n      throw 'userURL with wrong format';\r\n    }\r\n\r\n  //if not, convert the user email to URL format\r\n  } else {\r\n    return getUserURLFromEmail(identifier);\r\n  }\r\n}\r\n\r\nfunction isDataObjectURL(url) {\r\n  let schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];\r\n  let splitURL = (url).split('://');\r\n  let urlSchema = splitURL[0];\r\n\r\n  return schemasToIgnore.indexOf(urlSchema) === -1;\r\n}\r\n\r\nfunction utils_isLegacy(url) {\r\n  if (url.split('@').length > 1) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction isURL(url) {\r\n  return (url).split('/').length >= 3;\r\n}\r\n\r\nfunction isUserURL(url) {\r\n  return divideURL(url).type === 'user';\r\n}\r\n\r\nfunction utils_isHypertyURL(url) {\r\n  return divideURL(url).type === 'hyperty';\r\n}\r\n\r\n/**\r\n * get information relative each component configured on runtime configuration;\r\n * @param  {object} configuration object with all configuration\r\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\r\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\r\n * @return {object}               return an object with all configurations;\r\n */\r\nfunction getConfigurationResources(configuration, component, resource) {\r\n  let objectResource = configuration[component];\r\n  let resourceType = objectResource[resource];\r\n\r\n  return resourceType;\r\n}\r\n\r\n/**\r\n * Build a full url with the runtime configuration;\r\n * @param  {object} configuration object with all configuration\r\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\r\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\r\n * @param  {string} type          resource to get, like a hyperty name or protocolstub name;\r\n * @param  {boolean} useFallback  if true the function will check if have a fallback url;\r\n * @return {string}               partial url to contact the resource;\r\n */\r\nfunction buildURL(configuration, component, type, resource, useFallback = false) {\r\n  let objectResource = configuration[component];\r\n  let url;\r\n\r\n  if (!objectResource.hasOwnProperty(type)) {\r\n    throw Error('The configuration ' + JSON.stringify(objectResource, '', 2) + ' don\\'t have the ' + type + ' resource you are looking for');\r\n  }\r\n\r\n  let resourceType = objectResource[type];\r\n\r\n\r\n  if (type) {\r\n    let ext = type === 'idp-proxy' ? '.idp.js' : '.ps.js';\r\n    url = resourceType.prefix + configuration.domain + resourceType.suffix + resource;\r\n    if (resourceType.hasOwnProperty('fallback') && useFallback) {\r\n      if (resourceType.fallback.indexOf('%domain%')) {\r\n        url = resourceType.fallback.replace(/(%domain%)/g, configuration.domain) + resource+ext;\r\n      } else {\r\n        url = resourceType.fallback + resource;\r\n      }\r\n    }\r\n  } else {\r\n    url = resourceType.prefix + configuration.domain + resourceType.suffix;\r\n  }\r\n\r\n  // console.log(url);\r\n\r\n  return url;\r\n}\r\n\r\n/**\r\n * Generate a Global Unique ID\r\n *\r\n * @returns String;\r\n */\r\nfunction generateGUID() {\r\n\r\n  function s4() {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n      .toString(16)\r\n      .substring(1);\r\n  }\r\n\r\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n\r\n}\r\n\r\nfunction getUserIdentityDomain(url) {\r\n  let dividedURL = divideURL(url);\r\n  let splitedDomain = dividedURL.domain.split('.');\r\n  let splitedLength = splitedDomain.length;\r\n  if (splitedLength == 1) {\r\n    return splitedDomain[splitedLength - 1];\r\n  }\r\n  let domain = splitedDomain[splitedLength - 2] + '.' + splitedDomain[splitedLength - 1];\r\n  return domain;\r\n}\r\n\r\n/**\r\n * Check if URL is from a backend service\r\n * @param  {string} url     URL to be processed\r\n * @return {boolean}\r\n */\r\n\r\nfunction isBackendServiceURL(url) {\r\n  let dividedURL = divideURL(url);\r\n  let splitedDomain = dividedURL.domain.split('.');\r\n  let backendSchemes = ['domain', 'global', 'domain-idp']; // should be defined in the runtime configuration\r\n  let backendSubDomains = ['registry', 'msg-node']; // should be defined in the runtime configuration\r\n  let subDomain;\r\n\r\n  if (splitedDomain.length > 1) {\r\n    subDomain = splitedDomain.filter(item => backendSubDomains.indexOf(item) !== -1)[0];\r\n  }\r\n\r\n  if (subDomain && backendSubDomains.indexOf(subDomain) !== -1) {\r\n    return true;\r\n  }\r\n\r\n  if (dividedURL.type) {\r\n    return (backendSchemes.indexOf(dividedURL.type) !== -1);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction divideEmail(email) {\r\n  let indexOfAt = email.indexOf('@');\r\n\r\n  let result = {\r\n    username: email.substring(0, indexOfAt),\r\n    domain: email.substring(indexOfAt + 1, email.length)\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\n\r\nfunction utils_assign(obj, keyPath, value) {\r\n\r\n  if (!obj) obj = {};\r\n  if (typeof(keyPath) === 'string') keyPath = parseAttributes(keyPath);\r\n\r\n  let lastKeyIndex = keyPath.length - 1;\r\n\r\n  for (var i = 0; i < lastKeyIndex; ++i) {\r\n    let key = keyPath[i];\r\n    if (!(key in obj)) {\r\n      obj[key] = {};\r\n    }\r\n\r\n    obj = obj[key];\r\n\r\n  }\r\n\r\n  obj[keyPath[lastKeyIndex]] = value;\r\n}\r\n\r\nfunction splitObjectURL(dataObjectURL) {\r\n  console.info('[utils - splitObjectURL]: ', dataObjectURL);\r\n\r\n  let splitedURL = dataObjectURL.split('/');\r\n  let url = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];\r\n  let resource = splitedURL[5];\r\n\r\n  let result = {\r\n    url: url,\r\n    resource: resource\r\n  };\r\n\r\n  console.info('[utils - splitObjectURL]: ', result);\r\n\r\n  return result;\r\n}\r\n\r\nfunction checkAttribute(path) {\r\n\r\n  let regex = /((([a-zA-Z]+):\\/\\/([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})\\/[a-zA-Z0-9.]+@[a-zA-Z0-9]+(-)?[a-zA-Z0-9]+(\\.)?[a-zA-Z0-9]{2,10}?\\.[a-zA-Z]{2,10})(.+(?=.identity))?/gm;\r\n\r\n  let list = [];\r\n  let final = [];\r\n  let test = path.match(regex);\r\n\r\n  if (test == null) {\r\n    final = path.split('.');\r\n  } else {\r\n    let m;\r\n    while ((m = regex.exec(path)) !== null) {\r\n      // This is necessary to avoid infinite loops with zero-width matches\r\n      if (m.index === regex.lastIndex) {\r\n        regex.lastIndex++;\r\n      }\r\n\r\n      // The result can be accessed through the `m`-variable.\r\n      m.forEach((match, groupIndex) => {\r\n        if (groupIndex === 0) {\r\n          list.push(match);\r\n        }\r\n      });\r\n    }\r\n    let result;\r\n    list.forEach((url) => {\r\n\r\n      result = path.replace(url, '*-*');\r\n      final = result.split('.').map((item) => {\r\n\r\n        if (item === '*-*') { return url; }\r\n\r\n        return item;\r\n      });\r\n    });\r\n  }\r\n\r\n  console.log('[RuntimeCore.Utils.checkAttribute]', final);\r\n  return final;\r\n}\r\n\r\nfunction parseAttributes(path) {\r\n  let regex = /([0-9a-zA-Z][-\\w]*):\\/\\//g;\r\n\r\n  let string3 = 'identity';\r\n\r\n  if (!path.includes('://')) {\r\n    return (path.split('.'));\r\n  } else {\r\n    let string1 = path.split(regex)[0];\r\n\r\n    let array1 = string1.split('.');\r\n\r\n    let string2 = path.replace(string1, '');\r\n\r\n    if (path.includes(string3)) {\r\n\r\n      let array2 = string2.split(string3 + '.');\r\n\r\n      console.log('array2 ' + array2);\r\n\r\n      string2 = array2[0].slice('.', -1);\r\n\r\n      array2 = array2[1].split('.');\r\n\r\n      array1.push(string2, string3);\r\n\r\n      array1 = array1.concat(array2);\r\n\r\n    } else {\r\n      array1.push(string2);\r\n\r\n    }\r\n\r\n    return (array1.filter(Boolean));\r\n\r\n  }\r\n\r\n}\r\n\r\nfunction isEmpty(obj) {\r\n  for (var prop in obj) {\r\n\r\n    if (obj.hasOwnProperty(prop)) {\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  return JSON.stringify(obj) === JSON.stringify({});\r\n}\r\n\r\nfunction chatkeysToStringCloner(sessionKeys) {\r\n  let dataObjectSessionKeysClone = {};\r\n  let fields = Object.keys(sessionKeys);\r\n  if (fields) {\r\n    try {\r\n      for (let i = 0; i <  fields.length; i++) {\r\n        let field = fields[i];\r\n        dataObjectSessionKeysClone[field] = {};\r\n        dataObjectSessionKeysClone[field].sessionKey = sessionKeys[field].sessionKey.toString();\r\n        dataObjectSessionKeysClone[field].isToEncrypt = sessionKeys[field].isToEncrypt;\r\n      }\r\n    } catch (err) {\r\n      console.error('_chatkeysToStringCloner:err', err);\r\n    }\r\n  }\r\n  return dataObjectSessionKeysClone;\r\n}\r\n\r\nfunction chatkeysToArrayCloner(sessionKeys) {\r\n  let dataObjectSessionKeysClone = {};\r\n  let fields = Object.keys(sessionKeys);\r\n  if (fields) {\r\n    try {\r\n      for (let i = 0; i <  fields.length; i++) {\r\n        let field = fields[i];\r\n        dataObjectSessionKeysClone[field] = {};\r\n        let arrayValues = JSON.parse('[' + sessionKeys[field].sessionKey + ']');\r\n        dataObjectSessionKeysClone[field].sessionKey = new Uint8Array(arrayValues);\r\n        dataObjectSessionKeysClone[field].isToEncrypt = sessionKeys[field].isToEncrypt;\r\n      }\r\n    } catch (err) {\r\n      console.error('_chatkeysToArrayCloner:err', err);\r\n    }\r\n  }\r\n  return dataObjectSessionKeysClone;\r\n}\r\n\r\nfunction parseMessageURL(URL) {\r\n  let splitedToURL = URL.split('/');\r\n  if (splitedToURL.length <= 6) {\r\n    return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];\r\n  } else {\r\n    return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];\r\n  }\r\n}\r\n\r\nfunction availableSpace(usage, quota) {\r\n  const available = (usage / quota).toFixed(2);\r\n  return {\r\n    quota: quota,\r\n    usage: usage,\r\n    percent: Number(available)\r\n  };\r\n}\r\n\r\n/**\r\n* Encodes a JS object to base 64 encode\r\n* @param   {Object}    value    byteArray value\r\n* @return  {string}   encoded value\r\n*/\r\nfunction encode(value) {\r\n  try {\r\n    let stringValue = stringify(value);\r\n    return btoa(stringValue);\r\n  } catch (err) {\r\n    console.error('[Utils.encode:err] ' + err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n  * Decode a base64 string to object\r\n  * @param   {string_b64}    value    value encoded in base 64\r\n  * @return  {Object} decodedValue\r\n  */\r\nfunction decode(value) {\r\n  try {\r\n    return JSON.parse(atob(value));\r\n  } catch (err) {\r\n    console.log('[Utils.decode:err] ' + err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n* Decode a base64 string to Uint8Array\r\n* @param   {string_b64}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\r\nfunction decodeToUint8Array(value) {\r\n  try {\r\n    return new Uint8Array(decode(value));\r\n  } catch (err) {\r\n    console.error('[Utils.decodeToUint8Array:err] ' + err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n* Converts a JS object to string\r\n* NOTE: Special conversion for Uint8Arrays\r\n* @param   {Object}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\r\nfunction stringify(value) {\r\n  try {\r\n    let stringValue;\r\n    if (value.constructor === Uint8Array) {\r\n      stringValue = '[' + value.toString() + ']'; // the [] is for JSON.parse compatibility\r\n    } else {\r\n      stringValue = JSON.stringify(value);\r\n    }\r\n    return stringValue;\r\n  } catch (err) {\r\n    console.error('[Utils.stringify:err] ' + err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n* Converts a stringified object to object\r\n* @param   {String}    value    byteArray value\r\n* @return  {Object}   encoded value\r\n*/\r\nfunction parse(value) {\r\n  try {\r\n    return JSON.parse(value);\r\n  } catch (err) {\r\n    console.error('[Utils.parse:err]' + err);\r\n    console.trace();\r\n    console.error('That that cause the error:', value);\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n* Converts a stringified object to object\r\n* @param   {String}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\r\nfunction parseToUint8Array(value) {\r\n  try {\r\n    return new Uint8Array(parse(value));\r\n  } catch (err) {\r\n    console.error('[Utils.parseToUint8Array:err]' + err);\r\n    throw err;\r\n  }\r\n}\r\n\n// EXTERNAL MODULE: ./node_modules/proxy-observe/index.js\nvar proxy_observe = __webpack_require__(89);\n\n// CONCATENATED MODULE: ./src/syncher/ProxyObject.js\n\r\n\r\n\r\nconst ProxyObject_objectType = {ARRAY: '[object Array]', OBJECT: '[object Object]' };\r\n\r\n/**\r\n * @access private\r\n * Main class that maintains a JSON object, and observes changes in this object, recursively.\r\n * Internal objects and arrays are also observed.\r\n */\r\nclass ProxyObject_SyncObject {\r\n\r\n  constructor(initialData) {\r\n    let _this = this;\r\n\r\n    _this._observers = [];\r\n    _this._filters = {};\r\n\r\n    this._data = initialData || {};\r\n\r\n    this._internalObserve(this._data);\r\n  }\r\n\r\n  get data() { return this._data; }\r\n\r\n  observe(callback) {\r\n    this._observers.push(callback);\r\n  }\r\n\r\n  find(path) {\r\n    let list = parseAttributes(path);\r\n\r\n    return this._findWithSplit(list);\r\n  }\r\n\r\n  findBefore(path) {\r\n    let result = {};\r\n    let list = parseAttributes(path);\r\n    result.last = list.pop();\r\n    result.obj = this._findWithSplit(list);\r\n\r\n    return result;\r\n  }\r\n\r\n  _findWithSplit(list) {\r\n    let obj = this._data;\r\n    list.forEach((value) => {\r\n      obj = obj[value];\r\n    });\r\n\r\n    return obj;\r\n  }\r\n\r\n  _internalObserve(object) {\r\n\r\n    let handler = (changeset) => {\r\n\r\n      changeset.every((change) => {\r\n        this._onChanges(change);\r\n      });\r\n\r\n    };\r\n\r\n    this._data = Object.deepObserve(object, handler);\r\n\r\n  }\r\n\r\n  _fireEvent(event) {\r\n    this._observers.forEach((callback) => {\r\n      callback(event);\r\n    });\r\n  }\r\n\r\n  _onChanges(change) {\r\n\r\n    let obj = change.object;\r\n    let objType;\r\n\r\n    if (obj.constructor === Object) {\r\n      objType = ObjectType.OBJECT;\r\n    }\r\n\r\n    if (obj.constructor === Array) {\r\n      objType = ObjectType.ARRAY;\r\n    }\r\n\r\n    let fieldString = change.keypath;\r\n\r\n    // console.log('Field:', fieldString);\r\n    // console.log('type:', change.type);\r\n\r\n    //let oldValue = change.oldValue;\r\n    let newValue = obj[change.name];\r\n\r\n    // console.info(change.type + ' | Field: ' + fieldString + ' | New Value:', JSON.stringify(newValue), fieldString.includes('length'));\r\n\r\n    if (change.type === 'update' && !fieldString.includes('.length')) {\r\n      this._fireEvent({\r\n        cType: ChangeType.UPDATE,\r\n        oType: objType,\r\n        field: fieldString,\r\n        data: newValue\r\n      });\r\n    }\r\n\r\n    if (change.type === 'add') {\r\n      this._fireEvent({\r\n        cType: ChangeType.ADD,\r\n        oType: objType,\r\n        field: fieldString,\r\n        data: newValue\r\n      });\r\n    }\r\n\r\n    if (change.type === 'delete') {\r\n      this._fireEvent({\r\n        cType: ChangeType.REMOVE,\r\n        oType: objType,\r\n        field: fieldString\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nlet ChangeType = {UPDATE: 'update', ADD: 'add', REMOVE: 'remove'};\r\nlet ObjectType = {OBJECT: 'object', ARRAY: 'array'};\r\n/* harmony default export */ var ProxyObject = (ProxyObject_SyncObject);\r\n\n// CONCATENATED MODULE: ./src/syncher/DataObjectChild.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n// Log System\r\n\r\nlet DataObjectChild_log = loglevel[\"getLogger\"]('DataObjectChild');\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The class returned from the DataObject addChildren call or from onAddChildren if remotely created.\r\n */\r\nclass DataObjectChild_DataObjectChild /* implements SyncStatus */ {\r\n  /* private\r\n\r\n  ----event handlers----\r\n  _onResponseHandler: (event) => void\r\n  */\r\n\r\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the DataObject.addChild\r\n   */\r\n  constructor(input) {\r\n    let _this = this;\r\n\r\n    function throwMandatoryParmMissingError(par) {\r\n      throw '[DataObjectChild] ' + par + ' mandatory parameter is missing';\r\n    }\r\n\r\n    input.parent ?  _this._parent = input.parent : throwMandatoryParmMissingError('parent');\r\n    input.url ?  _this._url = input.url : throwMandatoryParmMissingError('url');\r\n    input.created ? _this._created = input.created : throwMandatoryParmMissingError('created');\r\n    input.reporter ? _this._reporter = input.reporter : throwMandatoryParmMissingError('reporter');\r\n    input.runtime ? _this._runtime = input.runtime : throwMandatoryParmMissingError('runtime');\r\n    input.schema ? _this._schema = input.schema : throwMandatoryParmMissingError('schema');\r\n    input.parentObject ? _this._parentObject = input.parentObject : throwMandatoryParmMissingError('parentObject');\r\n\r\n    if (input.name) _this._name = input.name;\r\n    if (input.description) _this._description = input.description;\r\n    if (input.tags) _this._tags = input.tags;\r\n    if (input.resources) _this._resources = input.resources;\r\n    if (input.observerStorage) _this._observerStorage = input.observerStorage;\r\n    if (input.publicObservation) _this._publicObservation = input.publicObservation;\r\n\r\n    _this._childId = input.url;\r\n\r\n    if (input.data) {\r\n      _this._syncObj = new ProxyObject(input.data);\r\n    } else {\r\n      _this._syncObj = new ProxyObject({});\r\n    }\r\n\r\n    DataObjectChild_log.log('[DataObjectChild -  Constructor] - ', _this._syncObj);\r\n\r\n    _this._bus = _this._parentObject._bus;\r\n    _this._owner = _this._parentObject._owner;\r\n\r\n    _this._allocateListeners();\r\n\r\n    _this._metadata = input;\r\n\r\n    // delete _this._metadata.data;\r\n    delete _this._metadata.parentObject;\r\n\r\n    _this._sharingStatus = false;\r\n\r\n  }\r\n\r\n  get shareable() {\r\n    let shareable = this.metadata;\r\n    shareable.data = this.data;\r\n\r\n    return shareable;\r\n  }\r\n\r\n  /**\r\n   * This function is used to share the child Object among authorised Hyperties\r\n   * @param  {boolean}     reporter  If true the child object is only shared to Parent reporter\r\n   * @return {Promise<JSON>}        It returns a promise with the sharing results.\r\n   */\r\n\r\n  share(toReporter) {\r\n    let _this = this;\r\n\r\n    _this._sharingStatus = new Promise((resolve, reject) => {\r\n\r\n      let to;\r\n      let reporter = toReporter;\r\n\r\n      if (reporter) {\r\n        to = _this.metadata.parent;\r\n      } else to = _this.metadata.parent + '/children/';\r\n\r\n      let childValue = _this.metadata;\r\n      childValue.data = _this.data;\r\n\r\n      //FLOW-OUT: this message will be sent directly to a resource child address: MessageBus\r\n      let requestMsg = {\r\n        type: 'create', from: _this.metadata.reporter, to: to,\r\n        body: { resource: childValue.url, value: childValue }\r\n      };\r\n\r\n      if (_this.identity)      {\r\n        requestMsg.body.identity = _this.identity;\r\n      }\r\n\r\n      //to be used to disable mutual authentication for legacy users\r\n\r\n      if (_this._parentObject.data.hasOwnProperty('mutual')) requestMsg.body.mutual = _this._parentObject.data.mutual;\r\n\r\n      if (_this._parentObject.metadata.reporter === _this.metadata.reporter) {\r\n        _this._bus.postMessage(deepClone(requestMsg));\r\n        return resolve();\r\n      } else {\r\n\r\n        let callback = (reply) => {\r\n\r\n          if (reply.to === _this._reporter) {\r\n            _this._bus.removeResponseListener(requestMsg.from, reply.id);\r\n\r\n            DataObjectChild_log.log('[Syncher.DataObjectChild.share] Parent reporter reply ', reply);\r\n\r\n            let result = {\r\n              code: reply.body && reply.body.code ? reply.body.code : 500,\r\n              desc: reply.body && reply.body.desc ? reply.body.desc : 'Unknown'\r\n            };\r\n\r\n            if (reply.body.code < 300) {\r\n              return resolve(result);\r\n            } else return reject(result);\r\n\r\n          }\r\n        };\r\n\r\n        let id = _this._bus.postMessage(deepClone(requestMsg), callback, false);\r\n\r\n        setTimeout(()=> {\r\n\r\n          // If Reporter does  not reply the promise is rejected\r\n          _this._bus.removeResponseListener(requestMsg.from, id);\r\n\r\n          let result = {\r\n            code: 408,\r\n            desc: 'timout'\r\n          };\r\n          return reject(result);\r\n\r\n        }, 3000);\r\n\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n     * This function is used to share the child Object among authorised Hyperties\r\n     * @param  {boolean}     reporter  If true the child object is only shared to Parent reporter\r\n     * @return {Promise<JSON>}        It returns a promise with the sharing results.\r\n     */\r\n\r\n  store() {\r\n    let _this = this;\r\n\r\n    let child = {};\r\n    let key = _this.metadata.children + '.' + _this.metadata.url;\r\n\r\n    child.value = _this.metadata;\r\n    child.identity = _this.identity;\r\n\r\n    let msg = {\r\n\r\n      from: _this.metadata.reporter,\r\n      to: _this._parentObject._syncher._subURL,\r\n      type: 'create',\r\n      body: {\r\n        resource: _this.metadata.parent,\r\n        attribute: key,\r\n        value: child\r\n      }\r\n    };\r\n\r\n    DataObjectChild_log.log('[DataObjectChild.store]:', msg);\r\n\r\n    _this._bus.postMessage(msg);\r\n  }\r\n\r\n  _allocateListeners() {\r\n    let _this = this;\r\n\r\n    //this is only needed for children reporters\r\n    if (_this._reporter === _this._owner) {\r\n      _this._listener = _this._bus.addListener(_this._reporter, (msg) => {\r\n        if (msg.type === 'response' && msg.id === _this._msgId) {\r\n          DataObjectChild_log.log('DataObjectChild.onResponse:', msg);\r\n          _this._onResponse(msg);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  _releaseListeners() {\r\n    let _this = this;\r\n\r\n    if (_this._listener) {\r\n      _this._listener.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Release and delete object data\r\n   */\r\n  delete() {\r\n    let _this = this;\r\n\r\n\r\n    _this._releaseListeners();\r\n\r\n    //TODO: send delete message ?\r\n\r\n    // nothing to be done\r\n    // return new Promise((resolve) => {\r\n    //   log.log('[DataObjectChild.delete]');\r\n    //   resolve();\r\n    // });\r\n  }\r\n\r\n  /**\r\n   * All Metadata about the Child Data Object\r\n   * @type {Object} -\r\n   */\r\n  get metadata() { return this._metadata; }\r\n\r\n  /**\r\n   * Children ID generated on addChildren. Unique identifier\r\n   * @type {URL} - URL of the format <HypertyURL>#<numeric-sequence>\r\n   */\r\n  get childId() { return this._childId; }\r\n\r\n  /**\r\n   * Data Structure to be synchronized.\r\n   * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n   */\r\n\r\n  get sharingStatus() {\r\n    return this._sharingStatus;\r\n  }\r\n\r\n  /**\r\n    * Data Structure to be synchronized.\r\n    * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n    */\r\n\r\n  get data() { return this._syncObj.data; }\r\n\r\n  /**\r\n   * Set for this dataObjectChild an identity\r\n   * @method identity\r\n   * @param  {Identity} identity identity from who created the message\r\n   */\r\n  set identity(identity) { this._identity = identity; }\r\n\r\n  /**\r\n   * Get for this dataObjectChild an identity\r\n   * @method identity\r\n   * @return {Identity} identity from who created the message\r\n   */\r\n  get identity() { return this._identity; }\r\n\r\n  /**\r\n   * Register the change listeners sent by the reporter child\r\n   * @param {function(event: MsgEvent)} callback\r\n   */\r\n  onChange(callback) {\r\n    this._syncObj.observe((event) => {\r\n      DataObjectChild_log.log('[DataObjectChild - observer] - ', event);\r\n      callback(event);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup the callback to process response notifications of the creates\r\n   * @param {function(event: MsgEvent)} callback\r\n   */\r\n  onResponse(callback) {\r\n    this._onResponseHandler = callback;\r\n  }\r\n\r\n  //FLOW-IN: message received from a remote DataObject -> _onChildCreate\r\n  _onResponse(msg) {\r\n    let _this = this;\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      url: msg.body.source,\r\n      code: msg.body.code\r\n    };\r\n\r\n    if (_this._onResponseHandler) {\r\n      _this._onResponseHandler(event);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_DataObjectChild = (DataObjectChild_DataObjectChild);\r\n\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResource.js\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\r\n\r\n// Log System\r\n\r\nlet HypertyResource_log = loglevel[\"getLogger\"]('HypertyResource');\r\n\r\n\r\n\r\n\r\nclass HypertyResource_HypertyResource extends syncher_DataObjectChild {\r\n\r\n  /**\r\n  * HypertyResource constructor\r\n  *\r\n  * @param  {URL} localRuntimeURL RuntimeURL of local runtime\r\n  * @param  {URL} input.owner HypertyURL of the Hyperty handling this resource\r\n  * @param  {URL} input.runtime Runtime URL where this resource is hosted\r\n  * @param  {Bus} input.bus sandbox message bus\r\n  * @param  {DataObject} input.parent Parent Data Object where the HypertyResource is handled as a child\r\n  * @param  {Boolean} isSender indicates if parent is Reporter or an Observer\r\n  * @param  {Array} input optional input parameters\r\n  */\r\n\r\n  constructor(isSender, input) {\r\n    super(input);\r\n    let _this = this;\r\n\r\n    _this.arraybufferSizeLimit = 5242880; //above this limit content is not saved as ArrayBuffer\r\n\r\n    _this._isSender = isSender;\r\n\r\n    _this._localStorageURL = _this._parentObject._syncher._runtimeUrl + '/storage';\r\n\r\n  }\r\n\r\n  get resourceType() {\r\n    let _this = this;\r\n    return _this.metadata.resourceType;\r\n  }\r\n\r\n  get mimetype() {\r\n    let _this = this;\r\n    return _this._metadata.type;\r\n  }\r\n\r\n  get content() {\r\n    let _this = this;\r\n    return _this._content;\r\n  }\r\n\r\n  get contentURL() {\r\n    let _this = this;\r\n    return _this._metadata.contentURL;\r\n  }\r\n\r\n  get shareable() {\r\n    let _this = this;\r\n    let shareable = super.metadata;\r\n    shareable.resourceType = _this.resourceType;\r\n    return shareable;\r\n  }\r\n\r\n  /*\r\n  set parent(parent) {\r\n    let _this = this;\r\n    _this._parent = parent;\r\n  }*/\r\n\r\n  save() {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let msg = {\r\n        from: _this._owner,\r\n        to: _this._localStorageURL,\r\n        type: 'create',\r\n        body: { value: deepClone(_this._metadata) }\r\n      };\r\n\r\n      let callback = (reply) => {\r\n        HypertyResource_log.info('[HypertyResource.save] reply: ', reply);\r\n        _this._bus.removeResponseListener(_this._owner, reply.id);\r\n        if (reply.body.code === 200) {\r\n          if (reply.body.value) {\r\n            if (!_this._metadata.contentURL) _this._metadata.contentURL = [];\r\n            _this._metadata.contentURL.push(reply.body.value);\r\n          }\r\n          resolve();\r\n        } else reject(reply.body.code + ' ' + reply.body.desc);\r\n\r\n      };\r\n\r\n      msg.body.value.content = _this._content;\r\n\r\n      _this._bus.postMessage(msg, callback, false);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * Function to Read HypertyResource\r\n  *\r\n  * @param  {} callback callback to be called with progress information in terms of percentage\r\n  * @return  {Promise}  input optional input parameters\r\n  */\r\n\r\n\r\n  read(callback) {\r\n    let _this = this;\r\n    HypertyResource_log.info('[HypertyResource.read] ', this);\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (_this.content) {\r\n        resolve(_this);\r\n      } else {\r\n\r\n        //TODO: use an iteration to get online runtime storages when some are offline\r\n        let storage = _this._getBestContentURL(_this._metadata.contentURL);\r\n\r\n        HypertyResource_log.log('Storage:', storage);\r\n\r\n        let msg = {\r\n          from: _this._owner,\r\n          to: storage.url,\r\n          type: 'read',\r\n          body: { resource: storage.url + '/' + storage.resource, p2p: true }\r\n        };\r\n\r\n        if (_this.metadata.p2pRequester && _this.metadata.p2pHandler) {\r\n          msg.body.p2pRequester = _this.metadata.p2pRequester;\r\n          msg.body.p2pHandler = _this.metadata.p2pHandler;\r\n        }\r\n\r\n        // get the resource first on the Local Hyperty Resource Storage;\r\n        _this._getBestResource(msg, callback).then((reply) => {\r\n          HypertyResource_log.info('[HypertyResource] - get locally the resource:', reply);\r\n          resolve(_this);\r\n        }).catch((reply) => {\r\n\r\n          HypertyResource_log.warn('[HypertyResource] - get locally the resource fail', reply);\r\n\r\n          // Generate new message to not use the same id of the last one;\r\n          let msg = {\r\n            from: _this._owner,\r\n            to: storage.remoteURL,\r\n            type: 'read',\r\n            body: { resource: storage.remoteURL + '/' + storage.resource, p2p: true }\r\n          };\r\n\r\n          if (_this.metadata.p2pRequester && _this.metadata.p2pHandler) {\r\n            msg.body.p2pRequester = _this.metadata.p2pRequester;\r\n            msg.body.p2pHandler = _this.metadata.p2pHandler;\r\n          }\r\n\r\n          // get the resource on the Remote Hyperty Resource Storage;\r\n          _this._getBestResource(msg, callback).then((reply) => {\r\n            HypertyResource_log.warn('[HypertyResource] - get remotely the resource', reply);\r\n            resolve(_this);\r\n          }).catch((reply) => {\r\n            HypertyResource_log.warn('[HypertyResource] - get remotely the resource fail', reply);\r\n            reject(reply.body.code + ' ' + reply.body.desc);\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  _getBestResource(msg, inProgressCallback) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let waitForResponse = setTimeout(() => {\r\n\r\n        // If Reporter does  not reply the promise is rejected\r\n        _this._bus.removeResponseListener(_this._owner, id);\r\n\r\n        msg.body.code = 408;\r\n        msg.body.desc = 'Response timeout'\r\n\r\n        return reject(msg);\r\n\r\n      }, 3000);\r\n\r\n      let callback = (reply) => {\r\n        HypertyResource_log.log('[HypertyResource.read] reply: ', reply);\r\n        let id = reply.id;\r\n\r\n        clearTimeout(waitForResponse);\r\n\r\n        switch (reply.body.code) {\r\n          case 200:\r\n            _this._content = reply.body.value.content;\r\n\r\n            // save locally if not too big\r\n            if (reply.body.value.size < _this.arraybufferSizeLimit) {\r\n              _this.save();\r\n            }\r\n\r\n            _this._bus.removeResponseListener(_this._owner, id);\r\n            resolve(reply);\r\n\r\n            break;\r\n\r\n          case 183:\r\n            inProgressCallback(reply.body.value);\r\n            break;\r\n\r\n          default:\r\n            _this._bus.removeResponseListener(_this._owner, id);\r\n            reject(reply);\r\n            break;\r\n        }\r\n\r\n      };\r\n\r\n      let id = _this._bus.postMessage(msg, callback, false);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  // Remove Hyperty from the local storage\r\n\r\n  delete() {\r\n    let _this = this;\r\n\r\n    HypertyResource_log.info('[HypertyResource.delete]', _this.metadata);\r\n\r\n\r\n    let msg = {\r\n      from: _this._owner,\r\n      to: _this._localStorageURL,\r\n      type: 'delete',\r\n      body: { resources: _this.metadata.contentURL }\r\n    };\r\n\r\n    return new Promise((resolve) => {\r\n      _this._bus.postMessage(msg, (reply) => {\r\n        if (reply.body.code < 300) resolve(true);\r\n        else resolve(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  _getBestContentURL(contentURLList) {\r\n\r\n    let _this = this;\r\n\r\n    const contentURL = contentURLList[0];\r\n    const splitedResource = contentURL.substr(contentURL.lastIndexOf('/') + 1);\r\n    const url = _this._localStorageURL; // contentURL.substr(0, contentURL.lastIndexOf('/'));\r\n    const remoteResource = contentURL.substr(0, contentURL.lastIndexOf('/'));\r\n\r\n    return {url: url, resource: splitedResource, remoteURL: remoteResource };\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n/* harmony default export */ var hyperty_resource_HypertyResource = (HypertyResource_HypertyResource);\r\n\n// CONCATENATED MODULE: ./src/utils/ImageTools.js\nlet hasBlobConstructor = typeof(Blob) !== 'undefined' && (function () {\r\n    try {\r\n        return Boolean(new Blob());\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}());\r\n\r\nlet hasArrayBufferViewSupport = hasBlobConstructor && typeof(Uint8Array) !== 'undefined' && (function () {\r\n    try {\r\n        return new Blob([new Uint8Array(100)]).size === 100;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}());\r\n\r\nlet hasToBlobSupport = (typeof HTMLCanvasElement !== \"undefined\" ? HTMLCanvasElement.prototype.toBlob : false);\r\n\r\nlet hasBlobSupport = (hasToBlobSupport || (typeof Uint8Array !== 'undefined' && typeof ArrayBuffer !== 'undefined' && typeof atob !== 'undefined'));\r\n\r\nlet hasReaderSupport = (typeof FileReader !== 'undefined' || typeof URL !== 'undefined');\r\n\r\nclass ImageTools {\r\n    static resize(file, maxDimensions, callback) {\r\n        if (typeof maxDimensions === 'function') {\r\n            callback = maxDimensions;\r\n            maxDimensions = {\r\n                width: 640,\r\n                height: 480\r\n            };\r\n        }\r\n\r\n        let maxWidth  = maxDimensions.width;\r\n        let maxHeight = maxDimensions.height;\r\n\r\n        if (!ImageTools.isSupported() || !file.type.match(/image.*/)) {\r\n            callback(file, false);\r\n            return false;\r\n        }\r\n\r\n        if (file.type.match(/image\\/gif/)) {\r\n            // Not attempting, could be an animated gif\r\n            callback(file, false);\r\n            // TODO: use https://github.com/antimatter15/whammy to convert gif to webm\r\n            return false;\r\n        }\r\n\r\n        let image = document.createElement('img');\r\n            \r\n        image.onload = (imgEvt) => {\r\n            let width  = image.width;\r\n            let height = image.height;\r\n            let isTooLarge = false;\r\n\r\n            if (width >= height && width > maxDimensions.width) {\r\n                // width is the largest dimension, and it's too big.\r\n                height *= maxDimensions.width / width;\r\n                width = maxDimensions.width;\r\n                isTooLarge = true;\r\n            } else if (height > maxDimensions.height) {\r\n                // either width wasn't over-size or height is the largest dimension\r\n                // and the height is over-size\r\n                width *= maxDimensions.height / height;\r\n                height = maxDimensions.height;\r\n                isTooLarge = true;\r\n            }\r\n\r\n            if (!isTooLarge) {\r\n                // early exit; no need to resize\r\n                callback(file, false);\r\n                return;\r\n            }\r\n\r\n            let canvas = document.createElement('canvas');\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n\r\n            let ctx = canvas.getContext('2d');\r\n            ctx.drawImage(image, 0, 0, width, height);\r\n\r\n            if (hasToBlobSupport) {\r\n                canvas.toBlob((blob) => {\r\n                    callback(blob, true);\r\n                }, file.type);\r\n            } else {\r\n                let blob = ImageTools._toBlob(canvas, file.type);\r\n                callback(blob, true);\r\n            }\r\n        };\r\n        ImageTools._loadImage(image, file);\r\n\r\n        return true;\r\n    }\r\n\r\n    static _toBlob(canvas, type) {\r\n        let dataURI = canvas.toDataURL(type);\r\n        let dataURIParts = dataURI.split(',');\r\n        let byteString;\r\n        if (dataURIParts[0].indexOf('base64') >= 0) {\r\n            // Convert base64 to raw binary data held in a string:\r\n            byteString = atob(dataURIParts[1]);\r\n        } else {\r\n            // Convert base64/URLEncoded data component to raw binary data:\r\n            byteString = decodeURIComponent(dataURIParts[1]);\r\n        }\r\n        let arrayBuffer = new ArrayBuffer(byteString.length);\r\n        let intArray = new Uint8Array(arrayBuffer);\r\n\r\n        for (let i = 0; i < byteString.length; i += 1) {\r\n            intArray[i] = byteString.charCodeAt(i);\r\n        }\r\n\r\n        let mimeString = dataURIParts[0].split(':')[1].split(';')[0];\r\n        let blob = null;\r\n\r\n        if (hasBlobConstructor) {\r\n            blob = new Blob(\r\n                [hasArrayBufferViewSupport ? intArray : arrayBuffer],\r\n                {type: mimeString}\r\n            );\r\n        } else {\r\n            let bb = new BlobBuilder();\r\n            bb.append(arrayBuffer);\r\n            blob = bb.getBlob(mimeString);\r\n        }\r\n\r\n        return blob;\r\n    }\r\n\r\n    static _loadImage(image, file, callback) {\r\n        if (typeof(URL) === 'undefined') {\r\n            let reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n                image.src = evt.target.result;\r\n                if (callback) { callback(); }\r\n            }\r\n            reader.readAsDataURL(file);\r\n        } else {\r\n            image.src = URL.createObjectURL(file);\r\n            if (callback) { callback(); }\r\n        }\r\n    };\r\n\r\n    static isSupported() {\r\n        return (\r\n               (typeof(HTMLCanvasElement) !== 'undefined') \r\n            && hasBlobSupport\r\n            && hasReaderSupport\r\n        );\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/hyperty-resource/FileHypertyResource.js\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\r\n\r\n// Log System\r\n\r\nlet FileHypertyResource_log = loglevel[\"getLogger\"]('FileHypertyResource');\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass FileHypertyResource_FileHypertyResource extends hyperty_resource_HypertyResource {\r\n\r\n  /**\r\n  * FileHypertyResource constructor\r\n  *\r\n  * @param  {URL} owner HypertyURL of the Hyperty handling this resource\r\n  * @param  {URL} runtime Runtime URL where this resource is hosted\r\n  * @param  {Bus} bus sandbox message bus\r\n  * @param  {DataObject} parent Parent Data Object where the HypertyResource is handled as a child\r\n  * @param  {File} file file to be encoded as HypertyResource\r\n  * @param  {Boolean} isReporter indicates if parent is Reporter or an Observer\r\n  * @param  {Array} input optional input parameters\r\n  */\r\n\r\n  constructor(isSender, input) {\r\n\r\n    super(isSender, input);\r\n\r\n    let _this = this;\r\n\r\n    _this.metadata.resourceType = 'file';\r\n\r\n  }\r\n\r\n  init(file) {\r\n    let _this = this;\r\n\r\n    if (!file) throw new Error('[FileHypertyResource.constructor] missing mandatory *file* input ');\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this._metadata.name = file.name;\r\n      _this._metadata.lastModified = file.lastModified;\r\n      _this._metadata.size = file.size;\r\n      _this._metadata.mimetype = file.type;\r\n\r\n      FileHypertyResource_log.log('[FileHypertyResource.init] file: ', file);\r\n\r\n      if (_this._isSender) {\r\n\r\n        let mimetype = file.type.split('/')[0];\r\n\r\n        switch (mimetype) {\r\n          case 'image' :\r\n            _this._getImagePreview(file).then((preview)=>{\r\n              _this._metadata.preview = preview;\r\n              _this._content = file;\r\n              resolve();\r\n            });\r\n            break;\r\n          default :\r\n            _this._content = file;\r\n            resolve();\r\n            break;\r\n        }\r\n\r\n        // if too big lets store as File and asArray Buffer\r\n\r\n      //  if (file.size > _this.arraybufferSizeLimit) {\r\n      /*  } else {\r\n\r\n          let reader = new FileReader();\r\n\r\n          reader.onload = function(theFile) {\r\n\r\n            log.log('[FileHypertyResource.init] file loaded ', theFile);\r\n\r\n            _this._content = theFile.target.result;\r\n            resolve();\r\n\r\n          }\r\n\r\n          reader.readAsArrayBuffer(file);\r\n\r\n        }*/\r\n      } else {\r\n      _this._content = file.content;\r\n      if (file.preview) _this._metadata.preview = file.preview;\r\n      resolve();\r\n    }\r\n\r\n    });\r\n\r\n  }\r\n\r\n _getImagePreview(image){\r\n   let reader = new FileReader();\r\n   return new Promise((resolve,reject)=>{\r\n\r\n   ImageTools.resize(image, {\r\n        width: 100, // maximum width\r\n        height: 100 // maximum height\r\n    }, function(blob, didItResize) {\r\n        // didItResize will be true if it managed to resize it, otherwise false (and will return the original file as 'blob')\r\n        if (didItResize) {\r\n          reader.readAsDataURL(blob);\r\n\r\n          reader.onload = function(theImage) {\r\n            resolve(theImage.target.result);\r\n        };\r\n      } else {\r\n        FileHypertyResource_log.warn('[FileHypertyResource._getImagePreview] unable to create image preview from original image ');\r\n        resolve(undefined);\r\n      }\r\n    });\r\n  });\r\n }\r\n\r\n\r\n\r\n  get name() {\r\n    let _this = this;\r\n    return _this._metadata.name;\r\n  }\r\n\r\n  get preview() {\r\n    let _this = this;\r\n    return _this._metadata.preview;\r\n  }\r\n\r\n  /**\r\n  * Share file as a data object child of a data object parent\r\n  *\r\n  * @param  {string} children Data Object Parent children name where the file is shared\r\n  */\r\n\r\n/*  share(children) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      //to be improved and adapted\r\n\r\n      if (!_this._isSender) return reject('[FileHypertyResource.share] Observers can not share files');\r\n\r\n      let file2share = _this._metadata;\r\n      file2share.type = _this._type;\r\n\r\n      _this._parent.addChild(children, file2share).then(function(dataObjectChild) {\r\n        log.log('[FileHypertyResource.share] object child: ', dataObjectChild);\r\n\r\n        let sharedFile = dataObjectChild.data;\r\n\r\n        resolve(sharedFile);\r\n\r\n      }).catch(function(reason) {\r\n        log.error('Reason:', reason);\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n\r\n  }*/\r\n\r\n  /**\r\n  * Returns file content optimised to be displayed in a message line\r\n  *\r\n  * @param  {string} children Data Object Parent children name where the file is shared\r\n  */\r\n\r\n  toMessage() {\r\n    //TODO: to be implemented. It should return HTML with img attribute as a thumbnail plus the name.\r\n  }\r\n\r\n}\r\n\r\n\r\n/* harmony default export */ var hyperty_resource_FileHypertyResource = (FileHypertyResource_FileHypertyResource);\r\n\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResourceFactory.js\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\r\n\r\n\r\n\r\nclass HypertyResourceFactory_HypertyResourceFactory {\r\n\r\n  /**\r\n  * HypertyResourceFactory constructor\r\n  *\r\n  */\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  createHypertyResource(isSender, type, metadata) {\r\n    let newHypertyResource;\r\n\r\n    switch (type) {\r\n      case 'file':\r\n        newHypertyResource = new hyperty_resource_FileHypertyResource(isSender, metadata);\r\n        break;\r\n      default:\r\n        throw new Error('[HypertyResourceFactory.createHypertyResource] not supported type: ', type);\r\n        break;\r\n      }\r\n\r\n      return(newHypertyResource);\r\n\r\n  }\r\n\r\n  createHypertyResourceWithContent(isSender, type, content, metadata) {\r\n    let newHypertyResource;\r\n\r\n    return new Promise((resolve) => {\r\n\r\n    switch (type) {\r\n      case 'file':\r\n        newHypertyResource = new hyperty_resource_FileHypertyResource(isSender, metadata);\r\n        break;\r\n      default:\r\n        reject();\r\n        break;\r\n      }\r\n\r\n      newHypertyResource.init(content).then(()=>{\r\n        return newHypertyResource.save();// skip save?\r\n      }).then(()=>{\r\n        resolve(newHypertyResource);\r\n      });\r\n\r\n  });\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ var hyperty_resource_HypertyResourceFactory = (HypertyResourceFactory_HypertyResourceFactory);\r\n\n// CONCATENATED MODULE: ./src/syncher/DataObject.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet DataObject_log = loglevel[\"getLogger\"]('DataObject');\r\n\r\n\r\n\r\n//import HeartBeat from './HeartBeat';\r\n\r\n\r\n\r\n/**\r\n * Main extension class for observers and reporters, with common properties and methods.\r\n * Children management is common for observers and reporters.\r\n */\r\nclass DataObject_DataObject {\r\n  /* private\r\n  _version: number\r\n\r\n  _owner: HypertyURL\r\n  _url: ObjectURL\r\n  _schema: Schema\r\n  _bus: MiniBus\r\n  _status: on | paused\r\n  _syncObj: SyncData\r\n\r\n  _children: { id: DataObjectChild }\r\n  _childrenListener: [MsgListener]\r\n\r\n  ----event handlers----\r\n  _onAddChildHandler: (event) => void\r\n  */\r\n\r\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's\r\n   */\r\n\r\n  constructor(input) {\r\n    let _this = this;\r\n\r\n    function throwMandatoryParmMissingError(par) {\r\n      throw '[DataObject] ' + par + ' mandatory parameter is missing';\r\n    }\r\n\r\n    input.syncher ? _this._syncher = input.syncher : throwMandatoryParmMissingError('syncher');\r\n    input.url ? _this._url = input.url : throwMandatoryParmMissingError('url');\r\n    input.created ? _this._created = input.created : throwMandatoryParmMissingError('created');\r\n    input.reporter ? _this._reporter = input.reporter : throwMandatoryParmMissingError('reporter');\r\n    input.runtime ? _this._runtime = input.runtime : throwMandatoryParmMissingError('runtime');\r\n    input.schema ? _this._schema = input.schema : throwMandatoryParmMissingError('schema');\r\n    input.name ? _this._name = input.name : throwMandatoryParmMissingError('name');\r\n\r\n\r\n    _this._status = input.status;\r\n\r\n    if (input.data) {\r\n      _this._syncObj = new ProxyObject(input.data);\r\n    } else {\r\n      _this._syncObj = new ProxyObject({});\r\n    }\r\n    _this._childrens = input.childrens;\r\n\r\n    //TODO: For Further Study\r\n    _this._mutual = input.mutual;\r\n\r\n    _this._version = 0;\r\n    _this._childId = 1;\r\n    _this._childrenListener; //bus listener for children\r\n    _this._onAddChildrenHandler; //Hyperty side handlers to process child objects created by remote Hyperties\r\n\r\n    _this._resumed = input.resume;\r\n\r\n    if (input.resume) { _this._version = input.version; }\r\n\r\n    _this._owner = input.syncher._owner;\r\n    _this._bus = input.syncher._bus;\r\n\r\n    if (input.description) _this._description = input.description;\r\n    if (input.tags) _this._tags = input.tags;\r\n    if (input.resources) _this._resources = input.resources;\r\n    if (input.observerStorage) _this._observerStorage = input.observerStorage;\r\n    if (input.publicObservation) _this._publicObservation = input.publicObservation;\r\n\r\n    _this._metadata = Object.assign(input);\r\n\r\n    //    console.log('[DataObject] mutual ', _this._metadata.mutual);\r\n\r\n    if (!input.hasOwnProperty('resume') || (input.hasOwnProperty('resume') && !input.resume)) {\r\n      _this._metadata.lastModified = _this._metadata.created;\r\n    }\r\n\r\n    delete _this._metadata.data;\r\n    delete _this._metadata.syncher;\r\n    delete _this._metadata.authorise;\r\n\r\n    _this._hypertyResourceFactory = new hyperty_resource_HypertyResourceFactory();\r\n    _this._childrenObjects = {};\r\n    _this._sharedChilds = []; //childObjects that were not sent yet to Reporters\r\n\r\n/*    if (input.backup && _this._childrens) {\r\n      let lastHeartbeat = (input.hasOwnProperty('childrenObjects') && input.childrenObjects.hasOwnProperty('heartbeat'))\r\n        ? input.childrenObjects.heartbeat : 0;\r\n      _this._heartBeat = new HeartBeat(_this._bus, _this._owner, _this._syncher._runtimeUrl, this, 15, lastHeartbeat);\r\n      if (_this._resumed) _this._heartBeat.start(true, _this.metadata.isReporter);\r\n      else _this._heartBeat.start(false, _this.metadata.isReporter);\r\n\r\n    }*/\r\n  }\r\n\r\n  _getLastChildId() {\r\n    let _this = this;\r\n\r\n    let childIdInt = 0;\r\n    let childIdString = _this._owner + '#' + childIdInt;\r\n\r\n\r\n    Object.keys(_this._childrens).filter((key) => {\r\n      if (_this._childrens[key].childId > childIdString) {\r\n        childIdString = _this._childrens[key].childId;\r\n      }\r\n    });\r\n\r\n    return childIdInt = Number(childIdString.split('#')[1]);\r\n  }\r\n\r\n  _allocateListeners() {\r\n    let _this = this;\r\n\r\n    let childBaseURL = _this._url + '/children/';\r\n    DataObject_log.log('[Data Object - AllocateListeners] - ', _this._childrens);\r\n    if (_this._childrens) {\r\n      //      _this._childrens.forEach((child) => {\r\n      let childURL = childBaseURL;\r\n      let listener = _this._bus.addListener(childURL, (msg) => {\r\n        //ignore msg sent by himself\r\n        if (msg.from !== this._owner) {\r\n          console.log('DataObject-Children-RCV: ', msg);\r\n          switch (msg.type) {\r\n            case 'create': _this._onChildCreate(msg); break;\r\n            case 'event': _this._onEvent(msg); break;\r\n            case 'delete': DataObject_log.log(msg); break;\r\n            default: _this._changeChildren(msg); break;\r\n          }\r\n        }\r\n        //        });\r\n\r\n        _this._childrenListener = listener;\r\n      });\r\n    }\r\n  }\r\n\r\n  _releaseListeners() {\r\n    let _this = this;\r\n\r\n    if (_this._childrenListener) {\r\n      _this._childrenListener.remove();\r\n\r\n      Object.keys(_this._childrenObjects).forEach((child) => {\r\n        /*      if (children === 'resources') {\r\n                Object.keys(_this._childrenObjects[children]).forEach((child) => {\r\n                  _this._childrenObjects[children][child]._releaseListeners();\r\n                });\r\n              } else {*/\r\n        _this._childrenObjects[child]._releaseListeners();\r\n        //      }\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Sync Data Object Observer with last version of Data Object Reporter. Useful for Resumes\r\n   * remove since hyperties can directly use syncher read?\r\n   */\r\n  sync() {\r\n\r\n    let _this = this;\r\n    DataObject_log.info('[DataObject.sync] synchronising ');\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let criteria = {};\r\n\r\n//      if (this.metadata.backupRevision) criteria.backupRevision = this.metadata.backupRevision;\r\n\r\n      _this._syncher.read(_this._metadata.url, criteria).then((value) => {\r\n        console.log('[DataObject.sync] value to sync: ', value);\r\n\r\n        Object.assign(_this.data, deepClone(value.data));\r\n\r\n        _this._version = value.version;\r\n\r\n        _this._metadata.lastModified = value.lastModified;\r\n\r\n        //TODO: check first if there are new childrenObjects to avoid overhead\r\n\r\n        if (value.childrenObjects) {\r\n          _this.resumeChildrens(value.childrenObjects);\r\n//          _this._storeChildrens();\r\n          resolve(true);\r\n        } else resolve(true);\r\n\r\n\r\n        /*if (value.version != _this._version) {\r\n          log.info('[DataObject.sync] updating existing data: ', _this.data);\r\n\r\n          Object.assign(_this.data || {}, deepClone(value.data));\r\n\r\n          _this._metadata = deepClone(value);\r\n\r\n          delete _this._metadata.data;\r\n\r\n          _this._version = value.version;\r\n\r\n        } else {\r\n          log.info('[DataObject.sync] existing data is updated: ', value);\r\n        }*/\r\n\r\n      }).catch((reason) => {\r\n        DataObject_log.info('[DataObject.sync] sync failed: ', reason);\r\n        resolve(false);\r\n      });\r\n\r\n    });\r\n\r\n\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  resumeChildrens(childrens) {\r\n    let _this = this;\r\n\r\n    let childIdString = this._owner.split('/')[3] + '#' + this._childId;\r\n\r\n    //setup childrens data from subscription\r\n    //    Object.keys(childrens).forEach((childrenResource) => {\r\n    //      let children = childrens[childrenResource];\r\n    let children = childrens;\r\n\r\n    //_this._childrenObjects[childrenResource] = {};\r\n    Object.keys(children).forEach((childId) => {\r\n      let newChild = false;\r\n\r\n/*        if (!_this._childrenObjects.hasOwnProperty(childrenResource))\r\n          _this._childrenObjects[childrenResource] = {};*/\r\n\r\n        // check if it is the last heartbeat\r\n\r\n        if (childId === 'heartbeat') {\r\n//          _this._heartBeat.onNewHeartbeat(children[childId].value);\r\n//          _this._heartBeat.start(true);\r\n        }\r\n        else if (children[childId].hasOwnProperty('value') && children[childId].value.resourceType && !_this._childrenObjects.hasOwnProperty(childId)) {\r\n        _this._childrenObjects[childId] = _this._resumeHypertyResource(children[childId]);\r\n        newChild = true;\r\n      } else if (!_this._childrenObjects.hasOwnProperty(childId)) {\r\n\r\n        _this._childrenObjects[childId] = _this._resumeChild(children[childId]);\r\n        DataObject_log.log('[DataObject.resumeChildrens] new DataObjectChild: ', _this._childrenObjects[childId]);\r\n        newChild = true;\r\n      }\r\n\r\n      if (newChild && childId > childIdString) {\r\n        childIdString = childId;\r\n        DataObject_log.log('[DataObjectReporter.resumeChildrens] - resuming: ', this._childrenObjects[childId]);\r\n      }\r\n\r\n    });\r\n    //    });\r\n\r\n    this._childId = Number(childIdString.split('#')[1]);\r\n\r\n  }\r\n\r\n  _resumeChild(input) {\r\n    let _this = this;\r\n    let childInput = input.value;\r\n    childInput.parentObject = _this;\r\n    childInput.parent = _this._url;\r\n\r\n    let child = new syncher_DataObjectChild(childInput);\r\n\r\n    child.identity = input.identity;\r\n\r\n    let event = {\r\n      type: 'create',\r\n      from: child.reporter,\r\n      url: child.parent,\r\n      value: child.data,\r\n      childId: child.url,\r\n      identity: child.identity,\r\n      child: child\r\n    };\r\n\r\n    if (child.resourceType) {\r\n      event.resource = child;\r\n\r\n    }\r\n\r\n    if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\r\n\r\n    return child;\r\n\r\n  }\r\n\r\n  _resumeHypertyResource(input) {\r\n    let _this = this;\r\n    let childInput = input.value;\r\n    childInput.parentObject = _this;\r\n    childInput.parent = _this._url;\r\n\r\n    let hypertyResource = _this._hypertyResourceFactory.createHypertyResource(false, childInput.resourceType, childInput)\r\n\r\n    hypertyResource.identity = input.identity;\r\n\r\n    let event = {\r\n      type: 'create',\r\n      from: hypertyResource.reporter,\r\n      url: hypertyResource.parent,\r\n      value: hypertyResource.data,\r\n      childId: hypertyResource.url,\r\n      identity: hypertyResource.identity,\r\n      child: hypertyResource\r\n    };\r\n\r\n    if (hypertyResource.resourceType) {\r\n      event.resource = hypertyResource;\r\n\r\n    }\r\n\r\n    if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\r\n\r\n    return hypertyResource;\r\n  }\r\n\r\n  /**\r\n   * All Metadata about the Data Object\r\n   * @type {Object} -\r\n   */\r\n\r\n  get metadata() { return this._metadata; }\r\n\r\n  /**\r\n   * Object URL of reporter or observer\r\n   * @type {ObjectURL}\r\n   */\r\n  get url() { return this._url; }\r\n\r\n  /**\r\n   * Object schema URL (this field is not yet stable, and is subsject to change)\r\n   * @type {SchemaURL}\r\n   */\r\n  get schema() { return this._schema; }\r\n\r\n  /**\r\n   * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)\r\n   * @type {Status} - Enum of: on | paused\r\n   */\r\n  get status() { return this._status; }\r\n\r\n  /**\r\n   * Data structure to be synchronized.\r\n   * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n   */\r\n  get data() { return this._syncObj.data; }\r\n\r\n  /**\r\n   * All created children's since the subscription, doesn't contain all children's since reporter creation.\r\n   * @type {Object<ChildId, DataObjectChild>}\r\n   */\r\n  get childrens() { return this._childrenObjects; }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  pause() {\r\n    //TODO: this feature needs more analise\r\n    throw 'Not implemented';\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  resume() {\r\n    //TODO: this feature needs more analise\r\n    throw 'Not implemented';\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  stop() {\r\n    //TODO: should remove the subscription and send message unsubscribe?\r\n    throw 'Not implemented';\r\n  }\r\n\r\n  /**\r\n   * Create and add a DataObjectChild to a children collection.\r\n   * @param {JSON} initialData - Initial data of the child\r\n   * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n   * @param  {SyncChildMetadata} input - (optional) All additional metadata about the DataObjectChild.\r\n   * @return {Promise<DataObjectChild>} - Return Promise to a new DataObjectChild.\r\n   */\r\n\r\n  addChild(initialData, identity, input) {\r\n    let _this = this;\r\n    let newChild;\r\n\r\n    //returns promise, in the future, the API may change to asynchronous call\r\n    return new Promise((resolve) => {\r\n\r\n      let msgChildPath = _this._url + '/children/';\r\n\r\n\r\n      let childInput = _this._getChildInput(input);\r\n      childInput.data = initialData;\r\n      //      childInput.children = children;\r\n      newChild = new syncher_DataObjectChild(childInput);\r\n\r\n      if (identity) newChild.identity = identity;\r\n\r\n      newChild.share();\r\n\r\n      console.log('[DataObject.addChild] added ', newChild);\r\n\r\n      newChild.onChange((event) => {\r\n        _this._onChange(event, { path: msgChildPath, childId: childInput.url });\r\n      });\r\n\r\n      //     if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\r\n\r\n      _this._childrenObjects[childInput.url] = newChild;\r\n\r\n      resolve(newChild);\r\n    });\r\n  }\r\n\r\n  _deleteChildrens() {\r\n\r\n    let _this = this;\r\n    let deletePromises = [];\r\n\r\n\r\n    return new Promise((resolve) => {\r\n      if (_this.childrens) {\r\n        DataObject_log.log('[DataObject.deleteChildrens]', _this.childrens);\r\n        let child;\r\n\r\n        for (child in _this.childrens) {\r\n          //          let child;\r\n\r\n          /*          if (children === 'resources') {\r\n                      for (child in _this.childrens[children]) {\r\n                        let childObj = _this.childrens[children][child];\r\n                        log.log('[DataObject._deleteChildrens] child',childObj);\r\n                        if (childObj.metadata.hasOwnProperty('resourceType'))\r\n                          deletePromises.push(_this.childrens[children][child].delete());\r\n                      }\r\n                     } else {*/\r\n          let childObj = _this.childrens[child];\r\n          DataObject_log.log('[DataObject._deleteChildrens] child', childObj);\r\n          if (childObj.metadata.hasOwnProperty('resourceType'))\r\n            deletePromises.push(_this.childrens[child].delete());\r\n        }\r\n        //        }\r\n\r\n        DataObject_log.log('[DataObject._deleteChildrens] promises ', deletePromises);\r\n\r\n        if (deletePromises.length > 0) {\r\n          Promise.all(deletePromises).then(() => {\r\n            resolve('[DataObject._deleteChildrens] done');\r\n          });\r\n        } else resolve('[DataObject._deleteChildrens] nothing to delete');\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _getChildInput(input) {\r\n    let _this = this;\r\n    let childInput = Object.assign({}, input);\r\n\r\n    _this._childId++;\r\n\r\n    //removing domain from childId to avoid backup issues with '.'\r\n\r\n    let start = Math.floor(Date.now());\r\n\r\n    console.log('[DataObject._getChildInput] start ', start);\r\n\r\n    childInput.url = start + '-' + _this._owner.split('/')[3] + '#' + _this._childId;\r\n\r\n    childInput.parentObject = _this;\r\n    childInput.reporter = _this._owner;\r\n    childInput.created = (new Date).toISOString();\r\n    childInput.runtime = _this._syncher._runtimeUrl;\r\n    childInput.p2pHandler = _this._syncher._p2pHandler;\r\n    childInput.p2pRequester = _this._syncher._p2pRequester;\r\n    childInput.schema = _this._schema;\r\n    childInput.parent = _this.url;\r\n    childInput.mutual = _this.metadata.mutual;\r\n    //    console.log('[DataObject._getChildInput] mutual ', childInput.mutual);\r\n\r\n    return childInput;\r\n  }\r\n\r\n  addHypertyResource(type, resource, identity, input) {\r\n    let _this = this;\r\n\r\n    //returns promise, in the future, the API may change to asynchronous call\r\n    return new Promise((resolve) => {\r\n\r\n      let hypertyResource;\r\n      let msgChildPath = _this._url + '/children/';\r\n\r\n      let childInput = _this._getChildInput(input);\r\n      //      childInput.children = children;\r\n\r\n      _this._hypertyResourceFactory.createHypertyResourceWithContent(true, type, resource, childInput).then((resource) => {\r\n        hypertyResource = resource;\r\n\r\n        if (identity) hypertyResource.identity = identity;\r\n\r\n        hypertyResource.share();\r\n\r\n        DataObject_log.log('[DataObject.addHypertyResource] added ', hypertyResource);\r\n\r\n        hypertyResource.onChange((event) => {\r\n          _this._onChange(event, { path: msgChildPath, childId: hypertyResource.childId });\r\n        });\r\n\r\n        //        if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\r\n\r\n        _this._childrenObjects[hypertyResource.childId] = hypertyResource;\r\n\r\n        resolve(hypertyResource);\r\n      });\r\n\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup the callback to process create and delete of childrens.\r\n   * @param {function(event: MsgEvent)} callback\r\n   * TODO: add childrenId to support different handlers per children\r\n   */\r\n  onAddChild(callback) {\r\n\r\n    this._onAddChildrenHandler = callback;\r\n  }\r\n\r\n  /**\r\n   * Setup the callback to process events from Data Objects.\r\n   * @param {function(event: DataObjectEvent)} callback\r\n   */\r\n  onEvent(callback) {\r\n\r\n    this._onEventHandler = callback;\r\n  }\r\n\r\n  /**\r\n   * Send Data Object Events.\r\n   * @param {function(event: DataObjectEvent)} callback\r\n   */\r\n  sendEvent(event) {\r\n\r\n    let msgEvent = {\r\n      from: this._owner,\r\n      to: this._url+'/children/',\r\n      type: 'event',\r\n      body: { value: event}\r\n    }\r\n\r\n    this._bus.postMessage(msgEvent);\r\n  }\r\n\r\n\r\n//FLOW-IN: event received from a remote DataObject\r\n_onEvent(msg) {\r\n  let _this = this;\r\n\r\n  let event = {\r\n    from: msg.from,\r\n    value: msg.body.value,\r\n    identity: msg.body.identity,\r\n  };\r\n\r\n  if (_this._onEventHandler) _this._onEventHandler(event);  \r\n\r\n}\r\n\r\n\r\n  //FLOW-IN: message received from a remote DataObject -> addChild\r\n  _onChildCreate(msg) {\r\n    let _this = this;\r\n\r\n    //    console.log('[DataObject._onChildCreate] receivedBy ' + _this._owner + ' : ', msg);\r\n\r\n    // if this is an heartbeat msg foward it to heatbeat handler\r\n\r\n    if (msg.body.resource === 'heartbeat') {\r\n//      console.log('[DataObject._onChildCreate] new heartbeat received ' + msg.body.value);\r\n//      this._heartBeat.onNewHeartbeat(msg.body.value);\r\n    } else {\r\n      console.log('[DataObject._onChildCreate] new child receivedBy ' + _this._owner + ' : ', msg);\r\n      let response = {\r\n        from: msg.to,\r\n        to: msg.from,\r\n        type: 'response',\r\n        id: msg.id,\r\n        body: {\r\n          code: 100\r\n        }\r\n      }\r\n\r\n      _this._bus.postMessage(response);\r\n\r\n      if (msg.body.value.resourceType) {\r\n        _this._onHypertyResourceAdded(msg);\r\n      } else _this._onChildAdded(msg);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  _onChildAdded(msg) {\r\n    let _this = this;\r\n    let childInput = deepClone(msg.body.value);\r\n    childInput.parentObject = _this;\r\n\r\n    //    let children = childInput.children;\r\n\r\n    let newChild = new syncher_DataObjectChild(childInput);\r\n    newChild.identity = msg.body.identity;\r\n\r\n\r\n    //    if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\r\n\r\n    _this._childrenObjects[childInput.url] = newChild;\r\n\r\n    if (msg.to === _this.metadata.url) newChild.store();\r\n\r\n    _this._hypertyEvt(msg, newChild);\r\n  }\r\n\r\n  _onHypertyResourceAdded(msg) {\r\n    let _this = this;\r\n    let input = msg.body.value;\r\n    let hypertyResource;\r\n\r\n    //    let children = input.children;\r\n\r\n    input.parentObject = _this;\r\n\r\n    hypertyResource = _this._hypertyResourceFactory.createHypertyResource(false, input.resourceType, input);\r\n    hypertyResource.identity = msg.body.identity;\r\n\r\n    //    if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\r\n\r\n    _this._childrenObjects[hypertyResource.childId] = hypertyResource;\r\n\r\n    _this._hypertyEvt(msg, hypertyResource);\r\n\r\n    // locally store messages that are directly sent to the hyperty\r\n    // ie to sync with messages sent when offline\r\n\r\n    if (msg.to === _this.metadata.url) hypertyResource.store();\r\n  }\r\n\r\n  _hypertyEvt(msg, child) {\r\n    let _this = this;\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      from: msg.from,\r\n      url: msg.to,\r\n      value: child.data,\r\n      childId: child.url,\r\n      identity: msg.body.identity,\r\n      child: child\r\n    };\r\n\r\n    if (child.resourceType) {\r\n      event.resource = child;\r\n\r\n    }\r\n\r\n    if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\r\n  }\r\n\r\n  //send delta messages to subscriptions\r\n  _onChange(event, childInfo) {\r\n    let _this = this;\r\n\r\n    _this._metadata.lastModified = (new Date).toISOString();\r\n\r\n    _this._version++;\r\n\r\n    if (_this._status === 'live') {\r\n      //FLOW-OUT: this message will be sent directly to a resource changes address: MessageBus\r\n      let changeMsg = {\r\n        type: 'update', from: _this._url, to: _this._url + '/changes',\r\n        body: { version: _this._version, source: _this._owner, attribute: event.field, lastModified: _this._metadata.lastModified }\r\n      };\r\n\r\n      DataObject_log.log('[DataObject - _onChange] - ', event, childInfo, changeMsg);\r\n\r\n      if (event.oType === ObjectType.OBJECT) {\r\n        if (event.cType !== ChangeType.REMOVE) {\r\n          changeMsg.body.value = deepClone(event.data);\r\n        }\r\n      } else {\r\n        changeMsg.body.attributeType = event.oType;\r\n        changeMsg.body.value = event.data;\r\n        if (event.cType !== ChangeType.UPDATE) {\r\n          changeMsg.body.operation = event.cType;\r\n        }\r\n      }\r\n\r\n      //childInfo must have (path, childId)\r\n      if (childInfo) {\r\n        changeMsg.to = childInfo.path;\r\n        changeMsg.body.resource = childInfo.childId;\r\n      }\r\n\r\n      //TODO: For Further Study\r\n      if (!_this.data._mutual) changeMsg.body.mutual = _this._mutual;\r\n\r\n      _this._bus.postMessage(changeMsg);\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: delta message received from a remote DataObjectReporter or DataObjectChild when changing data\r\n  _changeObject(syncObj, msg) {\r\n    let _this = this;\r\n\r\n    //TODO: update version ?\r\n    //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?\r\n    //will we need to confirm the reception ?\r\n    if (_this._version + 1 <= msg.body.version) {\r\n      _this._version = msg.body.version;\r\n      let path = msg.body.attribute;\r\n      let value;\r\n      if (typeof msg.body.value === 'object') value = deepClone(msg.body.value);\r\n      else value = msg.body.value;\r\n\r\n      let findResult = syncObj.findBefore(path);\r\n\r\n      if (msg.body.lastModified) {\r\n        _this._metadata.lastModified = msg.body.lastModified;\r\n      } else {\r\n        _this._metadata.lastModified = (new Date).toISOString();\r\n      }\r\n\r\n      if (msg.body.attributeType === ObjectType.ARRAY) {\r\n        if (msg.body.operation === ChangeType.ADD) {\r\n          let arr = findResult.obj;\r\n          let index = findResult.last;\r\n          Array.prototype.splice.apply(arr, [index, 0].concat(value));\r\n        } else if (msg.body.operation === ChangeType.REMOVE) {\r\n          let arr = findResult.obj;\r\n          let index = findResult.last;\r\n          arr.splice(index, value);\r\n        } else {\r\n          findResult.obj[findResult.last] = value; // UPDATE\r\n        }\r\n      } else {\r\n        if (msg.body.hasOwnProperty('value')) {\r\n          findResult.obj[findResult.last] = value; // UPDATE or ADD\r\n        } else {\r\n          delete findResult.obj[findResult.last]; // REMOVE\r\n        }\r\n      }\r\n    } else {\r\n      //TODO: how to handle unsynchronized versions?\r\n      DataObject_log.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: message received from a remote DataObjectChild when changing data\r\n  _changeChildren(msg) {\r\n    let _this = this;\r\n    const dividedURL = divideURL(msg.to);\r\n    const identity = dividedURL.identity;\r\n    //    const resource = identity ? identity.substring(identity.lastIndexOf('/') + 1) : undefined;\r\n\r\n    let childId = msg.body.resource;\r\n    let children = _this._childrenObjects[childId];\r\n\r\n    DataObject_log.log('Change children: ', _this._owner, msg, resource);\r\n\r\n    if (children) {\r\n      _this._changeObject(children._syncObj, msg);\r\n    } else {\r\n      DataObject_log.warn('No children found for: ', childId);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_DataObject = (DataObject_DataObject);\r\n\n// CONCATENATED MODULE: ./src/syncher/DataObjectReporter.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet DataObjectReporter_log = loglevel[\"getLogger\"]('DataObjectReporter');\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The class returned from the Syncher create call.\r\n * To be used as a reporter point, changes will be submited to DataObjectObserver instances.\r\n */\r\nclass DataObjectReporter_DataObjectReporter extends syncher_DataObject /* implements SyncStatus */ {\r\n  /* private\r\n  _subscriptions: <hypertyUrl: { status: string } }>\r\n\r\n  ----event handlers----\r\n  _onSubscriptionHandler: (event) => void\r\n  _onResponseHandler: (event) => void\r\n  _onReadHandler: (event) => void\r\n  */\r\n\r\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher.create method\r\n   */\r\n\r\n  //constructor(syncher, url, created, reporter, runtime, schema, name, initialStatus, initialData, childrens, mutual = true, resumed = false, description, tags, resources, observerStorage, publicObservation) {\r\n  constructor(input) {\r\n\r\n    super(input);\r\n    let _this = this;\r\n\r\n    _this._subscriptions = {};\r\n\r\n    _this._syncObj.observe((event) => {\r\n      DataObjectReporter_log.log('[Syncher.DataObjectReporter] ' + _this.url + ' publish change: ', event);\r\n      _this._onChange(event);\r\n    });\r\n\r\n    _this._allocateListeners();\r\n\r\n    _this.invitations = []; // array of promises with pending invitations\r\n    _this._childrenSizeThreshold = 50000;// to be used when replying to sync requests to ensure each response msg is not too large\r\n\r\n  }\r\n\r\n  _allocateListeners() {\r\n    super._allocateListeners();\r\n    let _this = this;\r\n\r\n    _this._objectListener = _this._bus.addListener(_this._url, (msg) => {\r\n      DataObjectReporter_log.log('[Syncher.DataObjectReporter] listener ' + _this._url + ' Received: ', msg);\r\n      switch (msg.type) {\r\n        case 'response': _this._onResponse(msg); break;\r\n        case 'read': _this._onRead(msg); break;\r\n        case 'execute': _this._onExecute(msg); break;\r\n        case 'create': _this._onChildCreate(msg); break;// to create child objects that were sent whenn offline\r\n      }\r\n    });\r\n\r\n    _this._runtimeStatusListener = _this._bus.addListener(_this._syncher._runtimeUrl+'/status' , (evt) => {\r\n      console.log('[Syncher.DataObjectReporter] runtime status event received ' + evt);\r\n\r\n/*      if (evt.body && evt.body.resource && evt.body.resource === _this._url && \r\n        evt.body.value && evt.body.value.backupRevision ) {\r\n          // broadcast backupRevision update\r\n\r\n          _this.data.backupRevision = evt.body.value.backupRevision;\r\n          console.log('[Syncher.DataObjectReporter] DO updated with backup revision ' + _this.data.backupRevision);\r\n        }*/\r\n    });\r\n\r\n  }\r\n\r\n  _releaseListeners() {\r\n    super._releaseListeners();\r\n    let _this = this;\r\n\r\n    _this._objectListener.remove();\r\n  }\r\n\r\n  /**\r\n   * Send invitations (create messages) to hyperties, observers list.\r\n   * @param  {HypertyURL[]} observers List of Hyperty URL's\r\n   */\r\n  inviteObservers(observers, p2p) {\r\n    let _this = this;\r\n\r\n\r\n    //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\r\n    // TODO: remove value and add resources? should similar to 1st create\r\n\r\n    let toInvite = observers;\r\n\r\n    // let invitePromises = [];\r\n\r\n    /*  observers.forEach((observer)=> {\r\n      if (!_this.invitations[observer]) {\r\n        toInvite.push(observer);\r\n        _this.invitations[observer] = observer;\r\n      }\r\n    });*/\r\n\r\n\r\n    if (toInvite.length > 0) {\r\n      DataObjectReporter_log.log('[Syncher.DataObjectReporter] InviteObservers ', toInvite, _this._metadata);\r\n\r\n      toInvite.forEach((observer)=>{\r\n\r\n        let invitation = new Promise((resolve, reject) => {\r\n\r\n          let inviteMsg = {\r\n            type: 'create', from: _this._syncher._owner, to: _this._syncher._subURL,\r\n            body: { resume: false, resource: _this._url, schema: _this._schema, value: _this._metadata, authorise: [observer] }\r\n          };\r\n\r\n          if (p2p) inviteMsg.body.p2p = p2p;\r\n\r\n          if (!_this.data.mutual) inviteMsg.body.mutual = _this.data.mutual;\r\n\r\n          _this._bus.postMessage(inviteMsg, (reply)=>{\r\n            DataObjectReporter_log.log('[Syncher.DataObjectReporter] Invitation reply ', reply);\r\n\r\n            let result = {\r\n              invited: observer,\r\n              code: reply.body && reply.body.code ? reply.body.code : 500,\r\n              desc: reply.body && reply.body.desc ? reply.body.desc : 'Unknown'\r\n            };\r\n\r\n            if (result.code < 300) resolve(result);\r\n/*            else if (result.code >= 300) {\r\n              if (_this.metadata.offline) {\r\n                resolve(_this._processOfflineInvitation(inviteMsg));\r\n              }*/ else reject(result);\r\n//            } \r\n          });\r\n        });\r\n\r\n        _this.invitations.push(invitation);\r\n\r\n      });\r\n\r\n      //      return(invitePromises);\r\n\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Release and delete object data\r\n   */\r\n  delete() {\r\n    let _this = this;\r\n\r\n   if(_this._heartBeat) _this._heartBeat.stop();\r\n\r\n    _this._deleteChildrens().then((result)=>{\r\n      DataObjectReporter_log.log(result);\r\n      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onDelete\r\n      let deleteMsg = {\r\n        type: 'delete', from: _this._owner, to: _this._syncher._subURL,\r\n        body: { resource: _this._url }\r\n      };\r\n\r\n      _this._bus.postMessage(deleteMsg, (reply) => {\r\n        DataObjectReporter_log.log('DataObjectReporter-DELETE: ', reply);\r\n        if (reply.body.code === 200) {\r\n          _this._releaseListeners();\r\n          delete _this._syncher._reporters[_this._url];\r\n\r\n          //_this._syncObj.unobserve();\r\n          _this._syncObj = {};\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Subscriptions requested and accepted to this reporter\r\n   * @type {Object<HypertyURL, SyncSubscription>}\r\n   */\r\n  get subscriptions() { return this._subscriptions; }\r\n\r\n  /**\r\n   * Setup the callback to process subscribe and unsubscribe notifications\r\n   * @param {function(event: MsgEvent)} callback function to receive events\r\n   */\r\n  onSubscription(callback) {\r\n    this._onSubscriptionHandler = callback;\r\n  }\r\n\r\n  /**\r\n   * Setup the callback to process response notifications of the create's\r\n   * @param {function(event: MsgEvent)} callback function to receive events\r\n   */\r\n  onResponse(callback) {\r\n    this._onResponseHandler = callback;\r\n  }\r\n\r\n  /**\r\n   * Setup the callback to process read notifications\r\n   * @param {function(event: MsgEvent)} callback\r\n   */\r\n\r\n  onRead(callback) {\r\n    this._onReadHandler = callback;\r\n  }\r\n\r\n  /**\r\n   * Setup the callback to process execute notifications\r\n   * @param {function(event: MsgEvent)} callback\r\n   */\r\n\r\n  onExecute(callback) {\r\n    this._onExecuteHandler = callback;\r\n  }\r\n\r\n  //FLOW-IN: message received from parent Syncher -> _onForward\r\n  _onForward(msg) {\r\n    let _this = this;\r\n\r\n    DataObjectReporter_log.log('DataObjectReporter-RCV: ', msg);\r\n    switch (msg.body.type) {\r\n      case 'subscribe': _this._onSubscribe(msg); break;\r\n      case 'unsubscribe': _this._onUnSubscribe(msg); break;\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: message received from this -> _onForward: emitted by a remote Syncher -> subscribe\r\n  _onSubscribe(msg) {\r\n    let _this = this;\r\n    let hypertyUrl = msg.body.from;\r\n    let dividedURL = divideURL(hypertyUrl);\r\n    let domain = dividedURL.domain;\r\n    let mutual = true;\r\n\r\n    if (msg.body.hasOwnProperty('mutual') && !msg.body.mutual) mutual = false;\r\n\r\n\r\n    console.log('[DataObjectReporter._onSubscribe]', msg, domain, dividedURL);\r\n\r\n    let event = {\r\n      type: msg.body.type,\r\n      url: hypertyUrl,\r\n\r\n      domain: domain,\r\n\r\n      identity: msg.body.identity,\r\n\r\n      nutual: mutual,\r\n\r\n      accept: () => {\r\n        //create new subscription\r\n        let sub = { url: hypertyUrl, status: 'live' };\r\n        _this._subscriptions[hypertyUrl] = sub;\r\n        if (_this.metadata.subscriptions) { _this.metadata.subscriptions.push(sub.url); }\r\n\r\n        let msgValue = deepClone(_this._metadata);\r\n        msgValue.data = deepClone(_this.data);\r\n        msgValue.version = _this._version;\r\n\r\n        //process and send childrens data\r\n        // let childrenValues = {};\r\n        //\r\n        // if (_this._childrenObjects) {\r\n        //   Object.keys(_this._childrenObjects).forEach((childrenId) => {\r\n        //     let childrenData = _this._childrenObjects[childrenId];\r\n        //     childrenValues[childrenId] = deepClone(childrenData);\r\n        //   });\r\n        //   msgValue.childrenObjects = childrenValues;\r\n        // }\r\n\r\n        let sendMsg = {\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 200, schema: _this._schema, value: msgValue }\r\n        };\r\n\r\n        //TODO: For Further Study\r\n        if (msg.body.hasOwnProperty('mutual') && !msg.body.mutual) {\r\n          sendMsg.body.mutual = msg.body.mutual;// TODO: remove?\r\n          _this.data.mutual = false;\r\n        }\r\n\r\n        if (_this._heartBeat) {\r\n          sendMsg.body.value.childrenObjects = {};\r\n          sendMsg.body.value.childrenObjects.heartbeat = _this._heartBeat.heartbeat;\r\n        }\r\n\r\n        console.log('[DataObjectReporter._onSubscribe.accept] sending response: ', sendMsg)\r\n\r\n        //send ok response message\r\n        _this._bus.postMessage(sendMsg);\r\n\r\n        return sub;\r\n      },\r\n\r\n      reject: (reason) => {\r\n        //send reject response message\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 403, desc: reason }\r\n        });\r\n      }\r\n    };\r\n\r\n    if (_this._onSubscriptionHandler) {\r\n      DataObjectReporter_log.log('SUBSCRIPTION-EVENT: ', event);\r\n      _this._onSubscriptionHandler(event);\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: message received from this -> _onForward: emitted by a remote DataObjectObserver -> unsubscribe\r\n  _onUnSubscribe(msg) {\r\n    let _this = this;\r\n    let hypertyUrl = msg.body.from;\r\n    let dividedURL = divideURL(hypertyUrl);\r\n    let domain = dividedURL.domain;\r\n\r\n    DataObjectReporter_log.log('[DataObjectReporter._onUnSubscribe]', msg, domain, dividedURL);\r\n\r\n    //let sub = _this._subscriptions[hypertyUrl];\r\n    delete _this._subscriptions[hypertyUrl];\r\n    delete _this.invitations[hypertyUrl];\r\n\r\n    let event = {\r\n      type: msg.body.type,\r\n      url: hypertyUrl,\r\n      domain: domain,\r\n      identity: msg.body.identity\r\n    };\r\n\r\n    // TODO: check if the _onSubscriptionHandler it is the same of the subscriptions???\r\n    if (_this._onSubscriptionHandler) {\r\n      DataObjectReporter_log.log('UN-SUBSCRIPTION-EVENT: ', event);\r\n      _this._onSubscriptionHandler(event);\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> _onRemoteCreate -> event.ack\r\n  _onResponse(msg) {\r\n    let _this = this;\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      url: msg.from,\r\n      code: msg.body.code\r\n    };\r\n\r\n    if (_this._onResponseHandler) {\r\n      DataObjectReporter_log.log('RESPONSE-EVENT: ', event);\r\n      _this._onResponseHandler(event);\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> read\r\n  _onRead(msg) {\r\n    let _this = this;\r\n    let childrensSize = JSON.stringify(_this.childrensJSON).length;\r\n\r\n    let largeObject = (childrensSize > _this._childrenSizeThreshold) ? true : false;\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      url: msg.from,\r\n\r\n      accept: () => {\r\n        if (largeObject) _this._syncReplyForLargeData(msg);\r\n        else _this._syncReply(msg);\r\n      },\r\n\r\n      reject: (reason) => {\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 401, desc: reason }\r\n        });\r\n      }\r\n    };\r\n\r\n    // if the requester is an authorised observer, the data object is responded otherwise an event is triggered\r\n    let subscriptions = [];\r\n\r\n    if (_this.metadata.subscriptions) {\r\n      subscriptions = _this.metadata.subscriptions;\r\n    } else if (_this._subscriptions) {\r\n      subscriptions = Object.keys(_this._subscriptions).map(function(key) { return _this._subscriptions[key].url; });\r\n    }\r\n\r\n    if (subscriptions.indexOf(msg.from) != -1) {\r\n      if (largeObject) _this._syncReplyForLargeData(msg);\r\n      else _this._syncReply(msg);\r\n    } else if (_this._onReadHandler) {\r\n      DataObjectReporter_log.log('READ-EVENT: ', event);\r\n      _this._onReadHandler(event);\r\n    }\r\n\r\n  }\r\n\r\n  get childrensJSON() {\r\n    let _this = this;\r\n    let childrens = {};\r\n\r\n//    let children;\r\n\r\n//    for (children in _this._childrenObjects) {\r\n      let child;\r\n//      childrens[children] = {};\r\n      for (child in _this._childrenObjects) {\r\n        childrens[child] = {};\r\n        childrens[child].value = _this._childrenObjects[child].metadata;\r\n        childrens[child].identity = _this._childrenObjects[child].identity;\r\n      }\r\n//    }\r\n\r\n    return childrens;\r\n  }\r\n\r\n  _syncReply(msg) {\r\n    let _this = this;\r\n\r\n    let objectValue = deepClone(_this.metadata);\r\n\r\n    objectValue.data = deepClone(_this.data);\r\n    objectValue.childrenObjects = deepClone(_this.childrensJSON);\r\n\r\n    objectValue.version = _this._version;\r\n\r\n    let response = {\r\n      id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n      body: { code: 200, value: objectValue }\r\n    };\r\n\r\n    _this._bus.postMessage(response);\r\n\r\n  }\r\n\r\n  // This function is only used if the data object to be synched has childrenOjects too large\r\n\r\n  _syncReplyForLargeData(msg) {\r\n  //set attribute with number of spllited messages\r\n    let _this = this;\r\n\r\n    // lets set the initial message with no childObjects\r\n\r\n    let objectValue = deepClone(_this.metadata);\r\n\r\n    objectValue.data = deepClone(_this.data);\r\n\r\n    objectValue.version = _this._version;\r\n\r\n    delete objectValue.childrenObjects;\r\n\r\n    let children;\r\n    let values = []; // array of values to be sent in separated responses\r\n    let childrenValue = {}; // value to be used in each response\r\n\r\n    for (child in _this._childrenObjects) {\r\n//      let child;\r\n      childrenValue[child] = {};\r\n//      for (child in _this._childrenObjects[children]) {\r\n        if (JSON.stringify(childrenValue).length > _this._childrenSizeThreshold) {\r\n          //childrenValue big enough to be sent in a response message\r\n          values.push(childrenValue);\r\n//          childrenValue = {};\r\n//          childrenValue[child] = {};\r\n        }\r\n        childrenValue[child] = {};\r\n        childrenValue[child].value = _this._childrenObjects[child].metadata;\r\n        childrenValue[child].identity = _this._childrenObjects[child].identity;\r\n//      }\r\n    }\r\n\r\n    values.push(childrenValue);\r\n\r\n    objectValue.responses = values.length + 1; //number of responses to be sent\r\n\r\n    let initialResponse = {\r\n      id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n      body: { code: 100, value: objectValue }\r\n    };\r\n\r\n    _this._bus.postMessage(initialResponse);\r\n\r\n    values.forEach((value) => {\r\n\r\n      let response = deepClone(initialResponse);\r\n\r\n      response.body.value = value;\r\n\r\n      response.body.value.responses = objectValue.responses;\r\n\r\n      setTimeout(() => { _this._bus.postMessage(response); }, 50);\r\n\r\n      // should put a timeout?\r\n\r\n    });\r\n\r\n  }\r\n\r\n  // Execute request received\r\n  _onExecute(msg) {\r\n    let _this = this;\r\n\r\n    if (!msg.body.method) throw '[DataObjectReporter._onExecute] method missing ', msg;\r\n\r\n    let response = {\r\n      id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n      body: { code: 200 }\r\n    };\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      url: msg.from,\r\n      method: msg.body.method,\r\n      params: msg.body.params,\r\n\r\n      accept: () => {\r\n        _this._bus.postMessage(response);\r\n      },\r\n\r\n      reject: (reason) => {\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 401, desc: reason }\r\n        });\r\n      }\r\n    };\r\n\r\n    if (_this._onExecuteHandler) {\r\n      DataObjectReporter_log.log('[DataObjectReporter] EXECUTE-EVENT: ', event);\r\n      _this._onExecuteHandler(event);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_DataObjectReporter = (DataObjectReporter_DataObjectReporter);\r\n\n// CONCATENATED MODULE: ./src/syncher/DataObjectObserver.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet DataObjectObserver_log = loglevel[\"getLogger\"]('DataObjectObserver');\r\n\r\n\r\n\r\n\r\nlet FilterType = {ANY: 'any', START: 'start', EXACT: 'exact'};\r\n\r\n/**\r\n * The class returned from the Syncher subscribe call.\r\n * To be used as an observation point from a DataObjectReporter change.\r\n */\r\nclass DataObjectObserver_DataObjectObserver extends syncher_DataObject /* implements SyncStatus */ {\r\n  /* private\r\n  _changeListener: MsgListener\r\n\r\n  ----event handlers----\r\n  _filters: {<filter>: {type: <start, exact>, callback: <function>} }\r\n  */\r\n\r\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher.subscribe method\r\n   */\r\n\r\n  //TODO: For Further Study\r\n  constructor(input) {\r\n    //todo: check why\r\n    //input.initialData = input.initialData.data;\r\n\r\n    super(input);\r\n\r\n    let _this = this;\r\n\r\n    _this._version = input.version;\r\n    _this._filters = {};\r\n\r\n    _this._syncObj.observe((event) => {\r\n      _this._onFilter(event);\r\n    });\r\n\r\n\r\n    _this._allocateListeners();\r\n  }\r\n\r\n  /**\r\n   * Sync Data Object Observer with last version of Data Object Reporter. Useful for Resumes\r\n   */\r\n  sync() {\r\n\r\n    let _this = this;\r\n    DataObjectObserver_log.info('[DataObjectObserver_sync] synchronising ');\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let criteria = {};\r\n\r\n//      if (this.metadata.backupRevision) criteria.backupRevision = this.metadata.backupRevision;\r\n\r\n      _this._syncher.read(_this._metadata.url, criteria).then((value)=>{\r\n        DataObjectObserver_log.info('[DataObjectObserver_sync] value to sync: ', value);\r\n\r\n        Object.assign(_this.data, deepClone(value.data));\r\n\r\n        _this._version = value.version;\r\n\r\n        _this._metadata.lastModified = value.lastModified;\r\n\r\n        //TODO: check first if there are new childrenObjects to avoid overhead\r\n\r\n        if (value.childrenObjects) {\r\n          _this.resumeChildrens(value.childrenObjects);\r\n          _this._storeChildrens();\r\n          resolve(true);\r\n        } else resolve(true);\r\n\r\n\r\n        /*if (value.version != _this._version) {\r\n          log.info('[DataObjectObserver_sync] updating existing data: ', _this.data);\r\n\r\n          Object.assign(_this.data || {}, deepClone(value.data));\r\n\r\n          _this._metadata = deepClone(value);\r\n\r\n          delete _this._metadata.data;\r\n\r\n          _this._version = value.version;\r\n\r\n        } else {\r\n          log.info('[DataObjectObserver_sync] existing data is updated: ', value);\r\n        }*/\r\n\r\n      }).catch((reason) => {\r\n        DataObjectObserver_log.info('[DataObjectObserver_sync] sync failed: ', reason);\r\n        resolve(false);\r\n      });\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n  _storeChildrens() {\r\n    let _this = this;\r\n\r\n    let childrens = {};\r\n\r\n    //TODO: to be sent to HypertyResourceStorage when ready to handle Chat Messages\r\n\r\n    Object.keys(_this._childrenObjects).forEach((childId) => {\r\n      let children = _this._childrenObjects;\r\n//      childrens[childrenResource] = {};\r\n\r\n//      Object.keys(children).forEach((childId) => {\r\n        childrens[childId] = {};\r\n        childrens[childId].value = children[childId].metadata;\r\n        childrens[childId].identity = children[childId].identity;\r\n//      });\r\n    });\r\n\r\n      let msg = {\r\n\r\n        from: _this._owner,\r\n        to: _this._syncher._subURL,\r\n        type: 'create',\r\n        body: {\r\n          resource: _this._url,\r\n          attribute: 'childrenObjects',\r\n          value: childrens\r\n        }\r\n      };\r\n\r\n      _this._bus.postMessage(msg);\r\n\r\n  }\r\n\r\n  _allocateListeners() {\r\n    super._allocateListeners();\r\n    let _this = this;\r\n\r\n    _this._changeListener = _this._bus.addListener(_this._url + '/changes', (msg) => {\r\n      if (msg.type === 'update') {\r\n        DataObjectObserver_log.log('DataObjectObserver-' + _this._url + '-RCV: ', msg);\r\n        _this._changeObject(_this._syncObj, msg);\r\n      }\r\n    });\r\n  }\r\n\r\n  _releaseListeners() {\r\n    super._releaseListeners();\r\n    let _this = this;\r\n\r\n    _this._changeListener.remove();\r\n  }\r\n\r\n  /**\r\n   * Release and delete object data\r\n   */\r\n  delete() {\r\n    let _this = this;\r\n\r\n    if (_this._heartBeat) _this._heartBeat.stop();\r\n\r\n    _this._deleteChildrens().then(()=>{\r\n      _this.unsubscribe();\r\n      _this._releaseListeners();\r\n      delete _this._syncher._observers[_this._url];\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Release and delete object data\r\n   */\r\n  unsubscribe() {\r\n    let _this = this;\r\n\r\n    //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalUnSubscribe\r\n    let unSubscribeMsg = {\r\n      type: 'unsubscribe', from: _this._owner, to: _this._syncher._subURL,\r\n      body: { resource: _this._url }\r\n    };\r\n\r\n    _this._bus.postMessage(unSubscribeMsg, (reply) => {\r\n      DataObjectObserver_log.log('DataObjectObserver-UNSUBSCRIBE: ', reply);\r\n      if (reply.body.code === 200) {\r\n        _this._releaseListeners();\r\n        delete _this._syncher._observers[_this._url];\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register the change listeners sent by the reporter\r\n   * @param {string} filter - Filter that identifies the field (separated dot path). Accepts * at the end for a more unrestricted filtering.\r\n   * @param {function(event: MsgEvent)} callback\r\n   */\r\n  onChange(filter, callback) {\r\n    let key = filter;\r\n    let filterObj = {\r\n      type: FilterType.EXACT,\r\n      callback: callback\r\n    };\r\n\r\n    let idx = filter.indexOf('*');\r\n    if (idx === filter.length - 1) {\r\n      if (idx === 0) {\r\n        filterObj.type = FilterType.ANY;\r\n      } else {\r\n        filterObj.type = FilterType.START;\r\n        key = filter.substr(0, filter.length - 1);\r\n      }\r\n    }\r\n\r\n    this._filters[key] = filterObj;\r\n  }\r\n\r\n  _onFilter(event) {\r\n    let _this = this;\r\n\r\n    Object.keys(_this._filters).forEach((key) => {\r\n      let filter = _this._filters[key];\r\n      if (filter.type === FilterType.ANY) {\r\n        //match anything\r\n        filter.callback(event);\r\n      } else if (filter.type === FilterType.START) {\r\n        //if starts with filter...\r\n        if (event.field.indexOf(key) === 0) {\r\n          filter.callback(event);\r\n        }\r\n      } else if (filter.type === FilterType.EXACT) {\r\n        //exact match\r\n        if (event.field === key) {\r\n          filter.callback(event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  onDisconnected(callback) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._subscribeRegistration()\r\n      .then(() => {\r\n        this._onDisconnected = callback;\r\n        resolve();\r\n      })\r\n      .catch((err) => reject(err));\r\n    });\r\n  }\r\n\r\n  _subscribeRegistration() {\r\n\r\n    const msg = {\r\n      type: 'subscribe',\r\n      from: this._owner,\r\n      to: this._syncher._runtimeUrl + '/subscriptions',\r\n      body: {\r\n        resources: [this._url + '/registration']\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._bus.postMessage(msg, (reply) => {\r\n        DataObjectObserver_log.log(`[DataObjectObserver._subscribeRegistration] ${this._url} rcved reply `, reply);\r\n\r\n        if (reply.body.code === 200) {\r\n          this._generateListener(this._url + '/registration');\r\n          resolve();\r\n        } else {\r\n          DataObjectObserver_log.error('Error subscribing registration status for ', this._url);\r\n          reject('Error subscribing registration status for ' + this._url);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _generateListener(notificationURL) {\r\n    let _this = this;\r\n\r\n    _this._bus.addListener(notificationURL, (msg) => {\r\n      DataObjectObserver_log.log(`[DataObjectObserver.registrationNotification] ${_this._url}: `, msg);\r\n      if (msg.body.value && msg.body.value === 'disconnected' && _this._onDisconnected) {\r\n        DataObjectObserver_log.log(`[DataObjectObserver] ${_this._url}: was disconnected `, msg);\r\n        _this._onDisconnected();\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Requests the reporter to execute a method on the data object\r\n   * @param {string} method - Name of the function to be executed.\r\n   * @param {array} params - array of parameters for the requested function\r\n   * @return {promise}\r\n   */\r\n\r\n  execute(method, params) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      const msg = {\r\n        type: 'execute',\r\n        from: this._owner,\r\n        to: _this._url,\r\n        body: {\r\n          method: method,\r\n          params: params\r\n        }\r\n      };\r\n\r\n      _this._bus.postMessage(msg, (reply) => {\r\n        DataObjectObserver_log.log(`[DataObjectObserver.execute] ${_this._url} rcved reply `, reply);\r\n\r\n        if (reply.body.code === 200) {\r\n          resolve();\r\n        } else {\r\n          DataObjectObserver_log.warn(`[DataObjectObserver.execute] execution of method ${method} was reject by reporter`);\r\n          reject(`[DataObjectObserver.execute] execution of method ${method} was reject by reporter`);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/* harmony default export */ var syncher_DataObjectObserver = (DataObjectObserver_DataObjectObserver);\r\n\n// CONCATENATED MODULE: ./src/syncher/DataProvisional.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n * @access private\r\n * This class is responsible for collecting delta changes in remote objects, before the response of subscription reach the observer.\r\n * It's used in Syncher -> subscribe. The flow is defined as:\r\n * 1. (observer) --subscribe--\x3e (reporter)\r\n * 2. (observer) <--delta updates-- (reporter)\r\n * 3. (observer) <--subscribe response-- (reporter)\r\n * This means that there could be delta updates transferred before the subscription confirmation.\r\n * Since there is no DataObjectObserver before the ubscription confirmation, there should be some other object collecting the updates.\r\n * Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\r\n */\r\n\r\n// Log System\r\n\r\nlet DataProvisional_log = loglevel[\"getLogger\"]('DataProvisional');\r\n\r\nclass DataProvisional {\r\n  /* private\r\n  _childrenListeners: [MsgListener]\r\n  _listener: MsgListener\r\n\r\n  _changes: []\r\n  */\r\n\r\n  constructor(owner, url, bus, children) {\r\n    let _this = this;\r\n\r\n    _this._owner = owner;\r\n    _this._url = url;\r\n    _this._bus = bus;\r\n    _this._children = children;\r\n\r\n    _this._changes = [];\r\n    _this._allocateListeners();\r\n  }\r\n\r\n  _allocateListeners() {\r\n    let _this = this;\r\n\r\n    _this._listener = _this._bus.addListener(_this._url, (msg) => {\r\n      DataProvisional_log.log('DataProvisional-' + _this._url + '-RCV: ', msg);\r\n      _this._changes.push(msg);\r\n    });\r\n\r\n    /*\r\n    _this._childrenListeners = [];\r\n    if (_this._children) {\r\n      let childBaseURL = url + '/children/';\r\n      _this._children.forEach((child) => {\r\n        let childURL = childBaseURL + child;\r\n        let listener = _this._bus.addListener(childURL, (msg) => {\r\n          //ignore msg sent by himself\r\n          if (msg.from !== owner) {\r\n            log.log(msg);\r\n          }\r\n        });\r\n\r\n        _this._childrenListeners.push(listener);\r\n      });\r\n    }*/\r\n  }\r\n\r\n  _releaseListeners() {\r\n    let _this = this;\r\n\r\n    _this._listener.remove();\r\n\r\n    /*_this._childrenListeners.forEach((listener) => {\r\n      listener.remove();\r\n    });*/\r\n  }\r\n\r\n  get children() { return this._children; }\r\n\r\n  apply(observer) {\r\n    let _this = this;\r\n    _this._changes.forEach((change) => {\r\n      observer._changeObject(observer._syncObj, change);\r\n    });\r\n  }\r\n}\r\n\r\n/* harmony default export */ var syncher_DataProvisional = (DataProvisional);\r\n\n// CONCATENATED MODULE: ./src/syncher/Syncher.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet Syncher_log = loglevel[\"getLogger\"]('Syncher');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* The main class for the syncher package.\r\n* The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.\r\n* Main functionality is to create reporters and to subscribe to existing ones.\r\n*/\r\nclass Syncher_Syncher {\r\n  /* private\r\n  _owner: URL\r\n  _bus: MiniBus\r\n\r\n  _subURL: URL\r\n\r\n  _reporters: <url: DataObjectReporter>\r\n  _observers: <url: DataObjectObserver>\r\n  _provisionals: <url: DataProvisional>\r\n\r\n  ----event handlers----\r\n  _onNotificationHandler: (event) => void\r\n  _onResume: (event) => void\r\n  */\r\n\r\n  /**\r\n  * Constructor that should be used by the Hyperty owner\r\n  * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.\r\n  * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.\r\n  * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.\r\n  */\r\n  constructor(owner, bus, config) {\r\n    let _this = this;\r\n\r\n    _this._owner = owner;\r\n    _this._bus = bus;\r\n\r\n    _this._subURL = config.runtimeURL + '/sm';\r\n    _this._runtimeUrl = config.runtimeURL;\r\n\r\n    _this._p2pHandler = config.p2pHandler;\r\n    _this._p2pRequester = config.p2pRequester;\r\n\r\n    _this._reporters = {};\r\n    _this._observers = {};\r\n    _this._provisionals = {};\r\n\r\n    bus.addListener(owner, (msg) => {\r\n      //ignore msg sent by himself\r\n      if (msg.from !== owner) {\r\n        Syncher_log.info('[Syncher] Syncher-RCV: ', msg, _this);\r\n        switch (msg.type) {\r\n          case 'forward': _this._onForward(msg); break;\r\n          case 'create': _this._onRemoteCreate(msg); break;\r\n          case 'delete': _this._onRemoteDelete(msg); break;\r\n          case 'execute': _this._onExecute(msg); break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * The owner of the Syncher and all created reporters.\r\n  * @type {HypertyURL}\r\n  */\r\n  get owner() { return this._owner; }\r\n\r\n  /**\r\n  * All owned reporters, the ones that were created by a create\r\n  * @type {Object<URL, DataObjectReporter>}\r\n  */\r\n  get reporters() { return this._reporters; }\r\n\r\n  /**\r\n  * All owned observers, the ones that were created by a local subscription\r\n  * @type {Object<URL, DataObjectObserver>}\r\n  */\r\n  get observers() { return this._observers; }\r\n\r\n  /**\r\n  * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.\r\n  * @param  {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\r\n  * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription\r\n  * @param  {JSON} initialData - Initial data of the reporter\r\n  * @param  {boolean} store - (Optional) if true, object will be stored by the runtime\r\n  * @param  {boolean} p2p - (Optional) if true, data synchronisation stream will use p2p connection as much as possible\r\n  * @param  {string} name - (Optional) the name of the dataobject\r\n  * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n  * @param  {SyncMetadata} input - (optional) all metadata required to sunc the Data Object.\r\n  * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP\r\n  */\r\n  create(schema, observers, initialData, store = false, p2p = false, name = 'no name', identity, input) {\r\n\r\n    if (!schema) throw Error('[Syncher - Create] - You need specify the data object schema');\r\n    if (!observers) throw Error('[Syncher - Create] -The observers should be defined');\r\n\r\n    let _this = this;\r\n    input = input || {};\r\n    let createInput  = Object.assign({}, input);\r\n\r\n    createInput.p2p = p2p;\r\n    createInput.store = store;\r\n    createInput.schema = schema;\r\n    createInput.authorise = observers;\r\n    createInput.p2pHandler = _this._p2pHandler;\r\n    createInput.p2pRequester = _this._p2pRequester;\r\n    (initialData) ? createInput.data = deepClone(initialData) : createInput.data = {};\r\n    createInput.name = name.length === 0 ? 'no name' : name;\r\n    createInput.reporter = (input.hasOwnProperty('reporter') && ((typeof input.reporter) !== 'boolean')) ? input.reporter : _this._owner;\r\n    createInput.resume = false;\r\n    if (input) {\r\n      createInput.mutual = input.hasOwnProperty('mutual') ? input.mutual : false;\r\n      createInput.name = input.hasOwnProperty('name') ? input.name : createInput.name;\r\n    } else { createInput.mutual = false; }\r\n\r\n    if (input.hasOwnProperty('reuseURL')) {\r\n      createInput.resource = input.reuseURL;\r\n    }\r\n\r\n    if (identity)      { createInput.identity = identity; }\r\n\r\n    //Object.assign(createInput, {resume: false});\r\n    //debugger;\r\n//    console.log('[syncher - create] - create Reporter - createInput: ', createInput);\r\n\r\n    return _this._create(createInput);\r\n  }\r\n\r\n  /**\r\n  * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.\r\n  * @param  {Object} criteria - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n  * @return {Promise<DataObjectReporter>[]} Return a promise with a list of DataObjectReporter to be resumed;\r\n  */\r\n  resumeReporters(criteria) {\r\n    let _this = this;\r\n    Syncher_log.log('[syncher - create] - resume Reporter - criteria: ', criteria);\r\n\r\n    Object.assign(criteria, {resume: true});\r\n\r\n    return _this._resumeCreate(criteria);\r\n  }\r\n\r\n  /**\r\n  * Request a subscription to an existent reporter object.\r\n  * @param {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\r\n  * @param {ObjectURL} objURL - Address of the existent reporter object to be observed\r\n  * @param {Boolean} [store=false] - Save the subscription on the Syncher Manager for further resume (Default is false)\r\n  * @param {Boolean} [p2p=false] - Info about if should use p2p connection (Default is false)\r\n  * @param {Boolean} [mutual=true] - Info about if messages of this object should be encrypted (Default is true)\r\n  * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n  * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.\r\n  */\r\n\r\n  subscribe(input) {\r\n  /*  let _this = this;\r\n    let criteria = {};\r\n\r\n    criteria.p2p = p2p;\r\n    criteria.store = store;\r\n    criteria.schema = schema;\r\n    criteria.domain_subscription = domain_subscription;\r\n\r\n    criteria.resource = objURL;\r\n    if (identity)      { criteria.identity = identity; }\r\n\r\n    //TODO: For Further Study\r\n    criteria.mutual = mutual;\r\n\r\n    log.log('[syncher - subscribe] - subscribe criteria: ', criteria);\r\n\r\n    Object.assign(criteria, {resume: false});*/\r\n\r\n    return this._subscribe(input);\r\n  }\r\n\r\n  /**\r\n  * Request a subscription to an existent reporter object.\r\n  * @param {criteria} criteria - Information to discovery the observer object\r\n  * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.\r\n  */\r\n  resumeObservers(criteria) {\r\n    let _this = this;\r\n    let _criteria = criteria || {};\r\n\r\n    Object.assign(_criteria, {resume: true});\r\n\r\n    return _this._resumeSubscribe(_criteria);\r\n  }\r\n\r\n  /**\r\n  * Request a read action on the reporter object\r\n  * @param {ObjectURL} objURL - URL of the reporter object to be read\r\n  * @return {Promise<Object>} Return Promise to last available data of the reporter\r\n  */\r\n  read(objURL, criteria) {\r\n    let _this = this;\r\n    console.log('[Syncher.read] ', objURL);\r\n\r\n    return new Promise((resolve, reject) => {\r\n     // in case the object is synched in a remote storage, lets sync with it\r\n//      if (_this._observers[objURL] && _this._observers[objURL].metadata.hasOwnProperty('backup') && _this._observers[objURL].metadata.backup) {\r\n\r\n        let readMsg = {\r\n          type: 'read', from: _this._owner, to: _this._subURL, \r\n          body: { resource: objURL}\r\n        };\r\n\r\n        if (criteria) readMsg.body.criteria = criteria;\r\n\r\n          let callback = (reply) => {\r\n            resolve(reply.body.value);\r\n          };\r\n    \r\n          _this._bus.postMessage(readMsg, callback, false);\r\n    \r\n /*     } else {\r\n        _this._readReporter(objURL).then((result)=> {\r\n        resolve(result);\r\n      });\r\n    }*/\r\n\r\n    });\r\n\r\n  }\r\n\r\n/*  _readCallBack(reply, resolve,reject) {\r\n    let _this = this;\r\n\r\n      console.log('[Syncher.read] reply: ', reply);\r\n\r\n      let childrens = {};\r\n      let value = {};\r\n      let n = 0;\r\n\r\n      if (reply.body.code < 300) {\r\n        if (!reply.body.value.hasOwnProperty('responses')) {\r\n          _this._bus.removeResponseListener(reply.from, reply.id);\r\n          resolve(reply.body.value);\r\n        } else { //data object is sent in separated messages\r\n          if (n === 0) { //initial response without childrens\r\n            value = reply.body.value;\r\n            ++n;\r\n          } else { // received response contains childrens\r\n            delete reply.body.value.responses;\r\n            let children;\r\n            for (children in reply.body.value) {\r\n              if (!childrens.hasOwnProperty(children)) childrens[children] = {};\r\n              Object.assign(childrens[children], reply.body.value[children]);\r\n            }\r\n            ++n;\r\n            if (n === value.responses) {\r\n              value.childrenObjects = childrens;\r\n              delete value.responses;\r\n              _this._bus.removeResponseListener(reply.from, reply.id);\r\n              resolve(value);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n\r\n      reject(reply.body.desc);\r\n      }\r\n\r\n  }*/\r\n\r\n  _readReporter(objURL) {\r\n    let _this = this;\r\n\r\n    //FLOW-OUT: this message will be sent directly to reporter object (maybe there is no listener available, so it will be resolved with MessageBus -> resolve)\r\n    //will reach the remote object in DataObjectReporter -> _onRead\r\n    let readMsg = {\r\n      type: 'read', from: _this._owner, to: objURL\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      _this._bus.postMessage(readMsg, (reply) => {\r\n        return _this._readCallBack(reply, resolve, reject);\r\n      }, false);\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Setup the callback to process create and delete events of remove Reporter objects.\r\n  * This is releated to the messagens sent by create to the observers Hyperty array.\r\n  * @param {function(event: MsgEvent)} callback\r\n  */\r\n  onNotification(callback) {\r\n    this._onNotificationHandler = callback;\r\n  }\r\n\r\n  /**\r\n  * Setup the callback to process close events from the runtime.\r\n  * @param {function(event: MsgEvent)} callback\r\n  */\r\n  onClose(callback) {\r\n    this._onClose = callback;\r\n  }\r\n\r\n  _create(input) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let reporterInput  = Object.assign({}, input);\r\n\r\n      let resume = input.resume;\r\n\r\n      reporterInput.created = (new Date).toISOString();\r\n      reporterInput.runtime = _this._runtimeUrl;\r\n\r\n      let requestValue = deepClone(reporterInput);\r\n\r\n      delete requestValue.p2p;\r\n      delete requestValue.store;\r\n      delete requestValue.observers;\r\n      delete requestValue.identity;\r\n\r\n      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\r\n      //debugger;\r\n      let requestMsg = {\r\n        type: 'create', from: _this._owner, to: _this._subURL,\r\n        body: { resume: resume, value: requestValue  }\r\n      };\r\n\r\n\r\n      requestMsg.body.schema = reporterInput.schema;\r\n\r\n      if (reporterInput.p2p) requestMsg.body.p2p = reporterInput.p2p;\r\n      if (reporterInput.store) requestMsg.body.store = reporterInput.store;\r\n      if (reporterInput.identity) requestMsg.body.identity = reporterInput.identity;\r\n\r\n      console.log('[syncher._create]: ', reporterInput, requestMsg);\r\n\r\n      //request create to the allocation system. Can be rejected by the PolicyEngine.\r\n      _this._bus.postMessage(requestMsg, (reply) => {\r\n        Syncher_log.log('[syncher - create] - create-response: ', reply);\r\n        if (reply.body.code === 200) {\r\n          //reporter creation accepted\r\n          reporterInput.url = reply.body.resource;\r\n\r\n/*          if (reply.body.p2pHandler) reporterInput.p2pHandler = reply.body.p2pHandler;\r\n          if (reply.body.p2pRequester) reporterInput.p2pRequester = reply.body.p2pRequester;*/\r\n\r\n          reporterInput.status = 'live';// pch: do we ned this?\r\n          reporterInput.syncher = _this;\r\n          reporterInput.childrens = reply.body.childrenResources;\r\n\r\n          let newObj = _this._reporters[reporterInput.url];\r\n\r\n          if (!newObj) {\r\n            newObj = new syncher_DataObjectReporter(reporterInput);\r\n            _this._reporters[reporterInput.url] = newObj;\r\n          }\r\n\r\n          newObj.inviteObservers(input.authorise, input.p2p);\r\n\r\n          resolve(newObj);\r\n\r\n        } else {\r\n          //reporter creation rejected\r\n          reject(reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  _resumeCreate(criteria) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let resume = criteria.resume;\r\n\r\n      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\r\n      let requestMsg = {\r\n        type: 'create', from: _this._owner, to: _this._subURL,\r\n        body: { resume: resume }\r\n      };\r\n\r\n      Syncher_log.log('[syncher - create]: ', criteria, requestMsg);\r\n      if (criteria) {\r\n        requestMsg.body.value = criteria;\r\n        if (criteria.hasOwnProperty('reporter')) {\r\n          requestMsg.body.value.reporter = criteria.reporter;\r\n        } else {\r\n          requestMsg.body.value.reporter = _this._owner;\r\n        }\r\n      }\r\n\r\n      if (criteria.p2p) requestMsg.body.p2p = criteria.p2p;\r\n      if (criteria.store) requestMsg.body.store = criteria.store;\r\n      if (criteria.observers) requestMsg.body.authorise = criteria.observers;\r\n      if (criteria.identity) requestMsg.body.identity = criteria.identity;\r\n\r\n      Syncher_log.log('[syncher._resumeCreate] - resume message: ', requestMsg);\r\n\r\n      //debugger;\r\n\r\n      //request create to the allocation system. Can be rejected by the PolicyEngine.\r\n\r\n      _this._bus.postMessage(requestMsg, (reply) => {\r\n        Syncher_log.log('[syncher._resumeCreate] - create-resumed-response: ', reply);\r\n        if (reply.body.code === 200) {\r\n          //debugger;\r\n          let listOfReporters = reply.body.value;\r\n\r\n          for (let index in listOfReporters) {\r\n\r\n            let dataObject = listOfReporters[index];\r\n\r\n            //reporter creation accepted\r\n\r\n            dataObject.data = deepClone(dataObject.data) || {};\r\n\r\n            if (dataObject.childrenObjects) { dataObject.childrenObjects = deepClone(dataObject.childrenObjects); }\r\n\r\n            dataObject.mutual = false;\r\n            dataObject.resume = true;\r\n            dataObject.status = 'live';// pch: do we ned this?\r\n            dataObject.syncher = _this;\r\n\r\n            Syncher_log.log('[syncher._resumeCreate] - create-resumed-dataObjectReporter', dataObject);\r\n\r\n            let newObj = new syncher_DataObjectReporter(dataObject);\r\n\r\n            if (dataObject.childrenObjects) {\r\n              newObj.resumeChildrens(dataObject.childrenObjects);\r\n            }\r\n            _this._reporters[dataObject.url] = newObj;\r\n\r\n          }\r\n\r\n          resolve(_this._reporters);\r\n          if (this._onReportersResume) this._onReportersResume(this._reporters);\r\n\r\n        } else if (reply.body.code === 404) {\r\n          resolve({});\r\n        } else {\r\n          //reporter creation rejected\r\n          reject(reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _subscribe(input) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe\r\n      let subscribeMsg = {\r\n        type: 'subscribe', from: _this._owner, to: _this._subURL,\r\n        body: input\r\n      };\r\n\r\n      // Hyperty request to be an Observer\r\n      // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer\r\n\r\n      // Resume Subscriptions for the same Hyperty URL\r\n      // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url\r\n\r\n      // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.\r\n      // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url\r\n/*      if (input) {\r\n        if (input.hasOwnProperty('p2p')) subscribeMsg.body.p2p = input.p2p;\r\n        if (input.hasOwnProperty('store')) subscribeMsg.body.store = input.store;\r\n        if (input.hasOwnProperty('schema')) subscribeMsg.body.schema = input.schema;\r\n        if (input.hasOwnProperty('identity')) subscribeMsg.body.identity = input.identity;\r\n        if (input.hasOwnProperty('resource')) subscribeMsg.body.resource = input.resource;\r\n        if (input.hasOwnProperty('domain_subscription')) subscribeMsg.body.domain_subscription = input.domain_subscription;\r\n      }\r\n      \r\n\r\n      subscribeMsg.body.resume = input.resume;\r\n\r\n      //TODO: For Further Study\r\n      if (input.hasOwnProperty('mutual')) subscribeMsg.body.mutual = input.mutual;*/\r\n\r\n      Syncher_log.log('[syncher_subscribe] - subscribe message: ', input, subscribeMsg);\r\n\r\n      //request subscription\r\n      //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\r\n      //for more info see the DataProvisional class documentation.\r\n      let msgId = _this._bus.postMessage(subscribeMsg);\r\n\r\n      _this._bus.addResponseListener(_this._owner, msgId,  (reply) => {\r\n\r\n        Syncher_log.log('[syncher] - subscribe-response: ', reply);\r\n\r\n        let objURL = reply.body.resource;\r\n\r\n        let newProvisional = _this._provisionals[objURL];\r\n        delete _this._provisionals[objURL];\r\n        if (newProvisional) newProvisional._releaseListeners();\r\n\r\n        if (reply.body.code < 200) {\r\n          Syncher_log.log('[syncher] - new DataProvisional: ', reply.body.childrenResources, objURL);\r\n          newProvisional = new syncher_DataProvisional(_this._owner, objURL, _this._bus, reply.body.childrenResources);\r\n          _this._provisionals[objURL] = newProvisional;\r\n        } else if (reply.body.code === 200) {\r\n          Syncher_log.log('[syncher] - new Data Object Observer: ', reply, _this._provisionals);\r\n\r\n          let observerInput = reply.body.value;\r\n\r\n          observerInput.syncher = _this;\r\n          observerInput.p2p = input.p2p;\r\n          observerInput.store = input.store;\r\n          observerInput.identity = input.identity;\r\n          observerInput.resume = false;\r\n\r\n          // todo: For Further Study\r\n          observerInput.mutual = input.mutual;\r\n\r\n          //observerInput.children = newProvisional.children;\r\n\r\n          //TODO: mutual For Further Study\r\n          let newObj = _this._observers[objURL];\r\n          if (!newObj) {\r\n            newObj = new syncher_DataObjectObserver(observerInput);\r\n            _this._observers[objURL] = newObj;\r\n          } else {\r\n            newObj.sync();\r\n          }\r\n\r\n          Syncher_log.log('[syncher] - new Data Object Observer already exist: ', newObj);\r\n\r\n          _this._bus.removeResponseListener(_this._owner, msgId);\r\n          resolve(newObj);\r\n\r\n          if (newProvisional) { newProvisional.apply(newObj); }\r\n\r\n        } else {\r\n          _this._bus.removeResponseListener(_this._owner, msgId);\r\n          reject(reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n  }\r\n/*\r\n  _processOfflineSubscription(subscription, redirectTo) {\r\n    let _this = this;\r\n\r\n    let forward = {\r\n      from: subscription.from,\r\n      type: 'forward',\r\n      to: redirectTo,\r\n      body: subscription\r\n    };\r\n\r\n    console.log('[Syncher._processOfflineSubscription] forwading ', forward);\r\n\r\n    _this._bus.postMessage(forward);\r\n\r\n    let result = {\r\n      code: 302,\r\n      desc: \"Found \" + redirectTo\r\n    };\r\n\r\n    return(result);\r\n\r\n  }*/\r\n\r\n\r\n  _resumeSubscribe(criteria) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe\r\n      let subscribeMsg = {\r\n        type: 'subscribe', from: _this._owner, to: _this._subURL,\r\n        body: {}\r\n      };\r\n\r\n      // Hyperty request to be an Observer\r\n      // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer\r\n\r\n      // Resume Subscriptions for the same Hyperty URL\r\n      // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url\r\n\r\n      // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.\r\n      // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url\r\n      if (criteria) {\r\n        if (criteria.hasOwnProperty('p2p')) subscribeMsg.body.p2p = criteria.p2p;\r\n        if (criteria.hasOwnProperty('store')) subscribeMsg.body.store = criteria.store;\r\n        if (criteria.hasOwnProperty('schema')) subscribeMsg.body.schema = criteria.schema;\r\n        if (criteria.hasOwnProperty('identity')) subscribeMsg.body.identity = criteria.identity;\r\n        if (criteria.hasOwnProperty('resource')) subscribeMsg.body.resource = criteria.resource;\r\n      }\r\n\r\n      subscribeMsg.body.resume = criteria.resume;\r\n\r\n      //TODO: For Further Study\r\n      let mutual = criteria.mutual;\r\n      if (criteria.hasOwnProperty('mutual')) subscribeMsg.body.mutual = mutual;\r\n\r\n      console.log('[syncher] - subscribe message: ', criteria, subscribeMsg);\r\n\r\n      //request subscription\r\n      //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\r\n      //for more info see the DataProvisional class documentation.\r\n      _this._bus.postMessage(subscribeMsg, (reply) => {\r\n        console.log('[syncher] - subscribe-resumed-response: ', reply);\r\n\r\n        let objURL = reply.body.resource;\r\n\r\n        let newProvisional = _this._provisionals[objURL];\r\n        delete _this._provisionals[objURL];\r\n        if (newProvisional) newProvisional._releaseListeners();\r\n\r\n        if (reply.body.code < 200) { // todo: check if this is needed for the resume\r\n\r\n          Syncher_log.log('[syncher] - resume new DataProvisional: ', reply, objURL);\r\n          newProvisional = new syncher_DataProvisional(_this._owner, objURL, _this._bus, reply.body.childrenResources);\r\n          _this._provisionals[objURL] = newProvisional;\r\n\r\n        } else if (reply.body.code === 200) {\r\n\r\n          let listOfObservers = reply.body.value;\r\n\r\n          for (let index in listOfObservers) {\r\n\r\n            let dataObject = listOfObservers[index];\r\n            console.log('[syncher] - Resume Object Observer: ', reply, dataObject, _this._provisionals);\r\n\r\n            if (dataObject.childrenObjects) { dataObject.childrenObjects = deepClone(dataObject.childrenObjects); }\r\n\r\n            dataObject.data = deepClone(dataObject.data) || {};\r\n            dataObject.resume = true;\r\n            dataObject.syncher = _this;\r\n\r\n            //TODO: mutual For Further Study\r\n            console.log('[syncher._resumeSubscribe] - create new dataObject: ', dataObject);\r\n            let newObj = new syncher_DataObjectObserver(dataObject);\r\n\r\n            if (dataObject.childrenObjects) { newObj.resumeChildrens(dataObject.childrenObjects); }\r\n            Syncher_log.log('[syncher._resumeSubscribe] - new dataObject', newObj);\r\n            _this._observers[newObj.url] = newObj;\r\n\r\n            if (_this._provisionals[newObj.url]) {\r\n              _this._provisionals[newObj.url].apply(newObj);\r\n            }\r\n\r\n            //lets sync with Reporter\r\n            // it was commented to let hyperties decide when to sync\r\n            //newObj.sync();\r\n          }\r\n\r\n          resolve(_this._observers);\r\n\r\n          if (this._onObserversResume) this._onObserversResume(_this._observers);\r\n\r\n        } else if (reply.body.code === 404) {\r\n          resolve({});\r\n        } else {\r\n          reject(reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  //FLOW-IN: message received from a local runtime ReporterObject -> _onRemoteSubscribe\r\n  _onForward(msg) {\r\n    let _this = this;\r\n\r\n    let reporter = _this._reporters[msg.body.to];\r\n    reporter._onForward(msg);\r\n  }\r\n\r\n  //FLOW-IN: message received from a remote Syncher -> create (this is actually an invitation to subscribe)\r\n  _onRemoteCreate(msg) {\r\n    let _this = this;\r\n    let resource = msg.from.slice(0, -13); //remove \"/subscription\" from the URL\r\n    let dividedURL = divideURL(resource);\r\n    let domain = dividedURL.domain;\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      from: msg.body.source,\r\n      url: resource,\r\n      domain: domain,\r\n      schema: msg.body.schema,\r\n      value: msg.body.value,\r\n      identity: msg.body.identity,\r\n\r\n      ack: (type) => {\r\n        let lType = 200;\r\n        if (type) {\r\n          lType = type;\r\n        }\r\n\r\n       //send ack response message\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: lType }\r\n        });\r\n      }\r\n    };\r\n\r\n    if (_this._onNotificationHandler) {\r\n      Syncher_log.info('[Syncher] NOTIFICATION-EVENT: ', event);\r\n      _this._onNotificationHandler(event);\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: message received from a remote DataObjectReporter -> delete\r\n  _onRemoteDelete(msg) {\r\n    let _this = this;\r\n\r\n   //remove \"/subscription\" from the URL\r\n    let resource = msg.body.resource;\r\n\r\n    let object = _this._observers[resource];\r\n\r\n    let unsubscribe = {\r\n      from: _this.owner,\r\n      to: _this._subURL,\r\n      id: msg.id,\r\n      type: 'unsubscribe',\r\n      body: { resource: msg.body.resource }\r\n    };\r\n\r\n    _this._bus.postMessage(unsubscribe);\r\n\r\n    delete _this._observers[resource];\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      url: resource,\r\n      identity: msg.body.identity,\r\n\r\n      ack: (type) => {\r\n        let lType = 200;\r\n        if (type) {\r\n          lType = type;\r\n        }\r\n\r\n       //TODO: any other different options for the release process, like accept but nor release local?\r\n        if (lType === 200 && object) {\r\n          object.delete();\r\n        }\r\n\r\n        //send ack response message\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: lType, source: _this._owner }\r\n        });\r\n      }\r\n    };\r\n\r\n//    if (object) {\r\n\r\n\r\n      if (_this._onNotificationHandler) {\r\n        Syncher_log.log('NOTIFICATION-EVENT: ', event);\r\n        _this._onNotificationHandler(event);\r\n      }\r\n/*    } else {\r\n      _this._bus.postMessage({\r\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n        body: { code: 404, source: _this._owner }\r\n      });\r\n    }*/\r\n  }\r\n\r\n  // close event received from runtime registry\r\n  _onExecute(msg) {\r\n    let _this = this;\r\n\r\n    let reply = {\r\n      id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n      body: { code: 200 }\r\n    };\r\n\r\n    if ((msg.from === _this._runtimeUrl + '/registry/' || msg.from === _this._runtimeUrl + '/registry') && msg.body && msg.body.method && msg.body.method === 'close' && _this._onClose) {\r\n      let event = {\r\n        type: 'close',\r\n\r\n        ack: (type) => {\r\n          if (type) {\r\n            reply.body.code = type;\r\n          }\r\n\r\n         //send ack response message\r\n          _this._bus.postMessage(reply);\r\n        }\r\n      };\r\n\r\n      Syncher_log.info('[Syncher] Close-EVENT: ', event);\r\n      _this._onClose(event);\r\n\r\n    } else {\r\n      _this._bus.postMessage(reply);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  * Callback system to trigger the resumed reporters\r\n  * @param  {Function} callback - function callback which will be invoked\r\n  * @return {Object<URL, DataObjectReporter>} Return one object with all resumed reporters;\r\n  */\r\n  onReportersResume(callback) {\r\n    this._onReportersResume = callback;\r\n  }\r\n\r\n  /**\r\n  * Callback system to trigger the resumed observers\r\n  * @param  {Function} callback - function callback which will be invoked\r\n  * @return {Object<URL, DataObjectObserver>} Return one object with all resumed observers;\r\n  */\r\n  onObserversResume(callback) {\r\n    this._onObserversResume = callback;\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_Syncher = (Syncher_Syncher);\r\n\n// CONCATENATED MODULE: ./src/syncher/NotificationHandler.js\n/**\r\n* The Notitification Handler is used to handle notifications not processed by the syncher when running in a sandbox.\r\n*/\r\n\r\n\r\n\r\nclass NotificationHandler_NotificationHandler {\r\n\r\n  constructor(bus) {\r\n\r\n    if (!bus) throw Error('[NotificationHandler Constructor] bus input is mandatory');\r\n    this._bus = bus;\r\n    this._onNotificationHandler = {};\r\n  }\r\n\r\n  onNotification(scheme, callback) {\r\n    this._onNotificationHandler[scheme] = callback;\r\n  }\r\n\r\n  onCreate(msg) {\r\n\r\n    let _this = this;\r\n  //  let resource = msg.from.slice(0, -13); //remove \"/subscription\" from the URL\r\n\r\n    let resource = msg.body.hasOwnProperty('resource') ? msg.body.resource : msg.from.slice(0, -13);\r\n    let dividedURL = divideURL(resource);\r\n    let domain = dividedURL.domain;\r\n    let scheme = resource.split('://')[0];\r\n\r\n    let error = (reason) => {\r\n      _this._bus.postMessage({\r\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n        body: { code: 400, desc: 'Bad Request: ' + reason }\r\n      });\r\n    };\r\n\r\n    if (!msg.body.hasOwnProperty('source')) { error('Missing source'); }\r\n    if (!msg.body.hasOwnProperty('schema')) { error('Missing schema'); }\r\n    if (!msg.body.hasOwnProperty('value')) { error('Missing value'); }\r\n    if (!msg.body.hasOwnProperty('identity')) { error('Missing identity'); }\r\n\r\n    let event = {\r\n      type: msg.type,\r\n      from: msg.body.source,\r\n      url: resource,\r\n      domain: domain,\r\n      schema: msg.body.schema,\r\n      value: msg.body.value,\r\n      identity: msg.body.identity,\r\n      to: msg.to,\r\n      via: msg.body.via,\r\n\r\n      ack: (type) => {\r\n        let lType = 200;\r\n        if (type) {\r\n          lType = type;\r\n        }\r\n\r\n       //send ack response message\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: lType }\r\n        });\r\n      },\r\n      error: (reason) => {\r\n        error(reason);\r\n      }\r\n    };\r\n    if (_this._onNotificationHandler[scheme]) {\r\n      console.info('[NotificationHandler] NOTIFICATION-EVENT: ', event);\r\n      _this._onNotificationHandler[scheme](event);\r\n    }\r\n  }\r\n\r\n  onDelete(msg) {\r\n    let _this = this;\r\n\r\n   //remove \"/subscription\" from the URL\r\n    let resource = msg.body.resource;\r\n\r\n    let object = _this._observers[resource];\r\n\r\n    let unsubscribe = {\r\n      from: _this.owner,\r\n      to: _this._subURL,\r\n      id: msg.id,\r\n      type: 'unsubscribe',\r\n      body: { resource: msg.body.resource }\r\n    };\r\n\r\n    _this._bus.postMessage(unsubscribe);\r\n\r\n    delete _this._observers[resource];\r\n\r\n    if (object) {\r\n      let event = {\r\n        type: msg.type,\r\n        url: resource,\r\n        identity: msg.body.identity,\r\n\r\n        ack: (type) => {\r\n          let lType = 200;\r\n          if (type) {\r\n            lType = type;\r\n          }\r\n\r\n         //TODO: any other different options for the release process, like accept but nor release local?\r\n          if (lType === 200) {\r\n            object.delete();\r\n          }\r\n\r\n          //send ack response message\r\n          _this._bus.postMessage({\r\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n            body: { code: lType, source: _this._owner }\r\n          });\r\n        }\r\n      };\r\n\r\n      if (_this._onNotificationHandler) {\r\n        log.log('NOTIFICATION-EVENT: ', event);\r\n        _this._onNotificationHandler(event);\r\n      }\r\n    } else {\r\n      _this._bus.postMessage({\r\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n        body: { code: 404, source: _this._owner }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ var syncher_NotificationHandler = (NotificationHandler_NotificationHandler);\r\n\n// CONCATENATED MODULE: ./src/identity/IdentityManager.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n/**\r\n* Core IdentityManager interface\r\n* Class to allow applications to search for Identities registered in runtime-core\r\n*/\r\nclass IdentityManager_IdentityManager {\r\n\r\n  /**\r\n  * To initialise the IdentityManager, which will provide the support for hyperties to\r\n  * query about identities registered\r\n  * @param  {String}          owner            owner\r\n  * @param  {String}          runtimeURL            runtimeURL\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  */\r\n  constructor(owner, runtimeURL, msgBus) {\r\n    let _this = this;\r\n    _this.messageBus = msgBus;\r\n\r\n    _this.domain = divideURL(owner).domain;\r\n    _this.owner = owner;\r\n    _this.runtimeURL = runtimeURL;\r\n  }\r\n\r\n  /**\r\n  * Function to query the runtime registry about the identity to which the hyperty was associated\r\n  * @param {String}       type (Optional)         type of user info required\r\n  * @param {String}       owner (Optional)   owner to search for\r\n  * @return {Promise}     userURL       userURL associated to the hyperty\r\n  */\r\n  discoverUserRegistered(type, hyperty) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let activeHypertyURL;\r\n\r\n      // if any type of search is selected query for that type, otherwise query for default user info\r\n      let searchType = (type) ? type : '.';\r\n\r\n      if (!hyperty) {\r\n        activeHypertyURL = _this.owner;\r\n      } else {\r\n        activeHypertyURL = hyperty;\r\n      }\r\n\r\n      let msg = {\r\n        type: 'read', from: activeHypertyURL, to: _this.runtimeURL + '/registry/', body: { resource: searchType, criteria: activeHypertyURL}\r\n      };\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        let userURL = reply.body.resource;\r\n\r\n        if (userURL && reply.body.code === 200) {\r\n          resolve(userURL);\r\n        } else {\r\n          reject('code: ' + reply.body.code + ' No user was found');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Function to query the Identity Module about authenticated identities from a certain domain\r\n  * @param {String}       idp idp domain of the identity to be discovered\r\n  * @return {Promise}     identity\r\n  */\r\n\r\n  discoverIdentityPerIdP(idp) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let msg = {\r\n        type: 'read', from: this.owner, to: _this.runtimeURL + '/idm', body: { resource: idp, criteria: 'idp'}\r\n      };\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if (reply.body.code === 200) {\r\n          resolve(reply.body.value);\r\n        } else {\r\n          reject(reply.body.code + ' ' + reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/* harmony default export */ var identity_IdentityManager = (IdentityManager_IdentityManager);\r\n\n// CONCATENATED MODULE: ./src/discovery/RegistrationStatus.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet RegistrationStatus_log = loglevel[\"getLogger\"]('RegistrationStatus');\r\n\r\n\r\n\r\n/**\r\n* The RegistrationStatus lib allows to monitor registration status of an Hyperty or Data Object\r\n*\r\n*/\r\nclass RegistrationStatus_RegistrationStatus {\r\n\r\n  /**\r\n  * @param {URL} url URL address of the entity to be monitored\r\n  * @param {URL} runtimeURL the current URL of the Runtime Instance used\r\n  * @param {HypertyURL} owner the URL of the Hyperty instance that is using this lib\r\n  * @param {MiniBus} owner the URL of the Hyperty instance that is using this lib\r\n  *\r\n  */\r\n\r\n  constructor(url, runtimeURL, owner, msgBus) {\r\n    this._registryObjectURL = url;\r\n    this._runtimeURL = runtimeURL;\r\n    this._domain = divideURL(runtimeURL).domain;\r\n    this._discoveredObjectURL = owner;\r\n    this._messageBus = msgBus;\r\n    this._subscriptionSet = false;\r\n    this._subscribers = {\r\n      live: {},\r\n      disconnected: {}\r\n    };\r\n  }\r\n\r\n\r\n  onLive(subscriber, callback) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (!this._subscriptionSet) {\r\n        this._subscribe()\r\n        .then(() => {\r\n          this._subscribers.live[subscriber] = callback;\r\n          resolve();\r\n        })\r\n        .catch((err) => reject(err));\r\n      } else {\r\n        this._subscribers.live[subscriber] = callback;\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  onDisconnected(subscriber, callback) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (!this._subscriptionSet) {\r\n        this._subscribe()\r\n        .then(() => {\r\n          this._subscribers.disconnected[subscriber] = callback;\r\n          resolve();\r\n        })\r\n        .catch((err) => reject(err));\r\n      } else {\r\n        this._subscribers.disconnected[subscriber] = callback;\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  _subscribe() {\r\n\r\n    const msg = {\r\n      type: 'subscribe',\r\n      from: this._discoveredObjectURL,\r\n      to: this._runtimeURL + '/subscriptions',\r\n      body: {\r\n        resources: [this._registryObjectURL + '/registration']\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._messageBus.postMessage(msg, (reply) => {\r\n        RegistrationStatus_log.log(`[DiscoveredObject.subscribe] ${this._registryObjectURL} rcved reply `, reply);\r\n\r\n        if (reply.body.code === 200) {\r\n          this._generateListener(this._registryObjectURL + '/registration');\r\n          this._subscriptionSet = true;\r\n          resolve();\r\n        } else {\r\n          RegistrationStatus_log.error('Error subscribing ', this._registryObjectURL);\r\n          reject('Error subscribing ' + this._registryObjectURL);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _generateListener(notificationURL) {\r\n\r\n    this._messageBus.addListener(notificationURL, (msg) => {\r\n      RegistrationStatus_log.log(`[DiscoveredObject.notification] ${this._registryObjectURL}: `, msg);\r\n      this._processNotification(msg);\r\n    });\r\n  }\r\n\r\n  _processNotification(msg) {\r\n    const status = msg.body.value;\r\n\r\n    setTimeout(() => {\r\n\r\n      // Hack to give time for onLive Hyperties to get ready. To be removed when Hyperty State machaine is implemented\r\n      Object.keys(this._subscribers[status]).forEach(\r\n        subscriber => this._subscribers[status][subscriber]()\r\n      );\r\n\r\n    }, 5000);\r\n\r\n  }\r\n\r\n\r\n  _unsubscribe() {\r\n\r\n    const msg = {\r\n      type: 'unsubscribe',\r\n      from: this._discoveredObjectURL,\r\n      to: this._runtimeURL + '/subscriptions',\r\n      body: {\r\n        resource: this._registryObjectURL + '/registration'\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._messageBus.postMessage(msg, (reply) => {\r\n        RegistrationStatus_log.log(`[DiscoveredObject.unsubscribe] ${this._registryObjectURL} rcved reply `, reply);\r\n\r\n        if (reply.body.code === 200) {\r\n          resolve();\r\n        } else {\r\n          RegistrationStatus_log.error('Error unsubscribing ', this._registryObjectURL);\r\n          reject('Error unsubscribing ' + this._registryObjectURL);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  unsubscribeLive(subscriber) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (subscriber in this._subscribers.live) {\r\n\r\n          //TODO: unsubscribe outside this condition\r\n        delete this._subscribers.live[subscriber];\r\n      }\r\n\r\n      if (this._areSubscriptionsEmpty()) {\r\n        this._unsubscribe()\r\n            .then(() => resolve())\r\n            .catch((err) => reject(err));\r\n      } else {\r\n        resolve();\r\n      }\r\n\r\n      /*  } else {\r\n          reject(`${subscriber} doesn't subscribe onLive for ${this._registryObjectURL}`);\r\n        }*/\r\n    });\r\n  }\r\n\r\n  unsubscribeDisconnected(subscriber) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (subscriber in this._subscribers.disconnected) {\r\n        delete this._subscribers.disconnected[subscriber];\r\n\r\n        if (this._areSubscriptionsEmpty()) {\r\n          this._unsubscribe()\r\n          .then(() => resolve())\r\n          .catch((err) => reject(err));\r\n        } else {\r\n          resolve();\r\n        }\r\n      } else {\r\n        reject(`${subscriber} doesn't subscribe onDisconnected for ${this._registryObjectURL}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  _areSubscriptionsEmpty() {\r\n    return Object.keys(this._subscribers.live).length === 0\r\n      && Object.keys(this._subscribers.disconnected).length === 0;\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var discovery_RegistrationStatus = (RegistrationStatus_RegistrationStatus);\r\n\n// CONCATENATED MODULE: ./src/discovery/DiscoveredObject.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n//import {divideURL, convertToUserURL} from '../utils/utils';\r\n\r\n\r\n/**\r\n* Discovered Object interface\r\n*/\r\nclass DiscoveredObject_DiscoveredObject extends discovery_RegistrationStatus {\r\n\r\n  get data() {\r\n    return this._data;\r\n  }\r\n\r\n  constructor(data, runtimeURL, discoveryURL, msgBus, discovery) {\r\n    super(data.hypertyID || data.url, runtimeURL, discoveryURL, msgBus);\r\n\r\n    this._data = data;\r\n    this._discovery = discovery;\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n  * function to check the status of the DiscoveredObject.\r\n  * Depending on existing subscribers it may trigger onLive or onDisconnected events.\r\n  *\r\n  */\r\n\r\n  check() {\r\n    // query DR for the status and call processNotification with msg received\r\n\r\n    let _this = this;\r\n    let message = {\r\n      body: {}\r\n    };\r\n\r\n    if (_this._discoveredObjectURL.startsWith('hyperty://') ) {\r\n      _this._discovery.discoverHypertyPerURL(_this._discoveredObjectURL).then((registration)=>{\r\n        message.body.status = registration.status;\r\n        _this._processNotification(message);\r\n      });\r\n    } else {\r\n      _this._discovery.discoverDataObjectsPerURL(_this._discoveredObjectURL).then((registration)=>{\r\n        message.body.status = registration.status;\r\n        _this._processNotification(message);\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ var discovery_DiscoveredObject = (DiscoveredObject_DiscoveredObject);\r\n\n// CONCATENATED MODULE: ./src/discovery/Discovery.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet Discovery_log = loglevel[\"getLogger\"]('Discovery');\r\n\r\n\r\n\r\n\r\n/**\r\n* Core Discovery interface\r\n* Class to allow applications to search for hyperties and DataObjects using the message bus\r\n*/\r\nclass Discovery_Discovery {\r\n\r\n  /**\r\n  * To initialise the HypertyDiscover, which will provide the support for hyperties to\r\n  * query users registered in outside the internal core.\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  * @param  {RuntimeURL}          runtimeURL            runtimeURL\r\n  */\r\n  constructor(hypertyURL, runtimeURL, msgBus) {\r\n    let _this = this;\r\n    _this.messageBus = msgBus;\r\n    _this.runtimeURL = runtimeURL;\r\n\r\n    _this.domain = divideURL(hypertyURL).domain;\r\n    _this.discoveryURL = hypertyURL;\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  _isLegacyUser(userIdentifier) {\r\n    if (userIdentifier.includes(':') && !userIdentifier.includes('user://')) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverHypertiesPerUserProfileData(userIdentifier, schema, resources) {\r\n    let _this = this;\r\n    let filteredHyperties = [];\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/hyperty/userprofile/' + userIdentifier,\r\n      }\r\n    };\r\n\r\n    if (schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema\r\n      };\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (!_this._isLegacyUser(userIdentifier)) {// todo: to reomve when discovery of legcay users are supported\r\n\r\n        _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n          if(reply.body.code === 200){\r\n            reply.body.value.map(function(hyperty) {\r\n               if(hyperty.hypertyID != _this.discoveryURL)\r\n                   filteredHyperties.push(hyperty);\r\n            });\r\n            if(filteredHyperties.length === 0)\r\n              resolve([]);\r\n            else {\r\n              Discovery_log.log(\"[Discovery.discoverHypertiesPerUserProfileData] Reply log: \",filteredHyperties);\r\n              resolve(filteredHyperties);\r\n            }\r\n          }\r\n          else {\r\n            Discovery_log.warn(\"[Discovery.discoverHypertiesPerUserProfileData] Error Reply for \" + userIdentifier + \" Reason: \", reply.body.description);\r\n            resolve([]);\r\n          }\r\n        });\r\n      } else {\r\n        resolve([{hypertyID: userIdentifier, status: 'live'}]);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * returns DiscoveredObject\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverHypertiesPerUserProfileDataDO(userIdentifier, schema, resources) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverHypertiesPerUserProfileData(...arguments)\r\n      .then(hyperties => {\r\n        resolve(this._convertToDiscoveredObject(hyperties));\r\n      })\r\n      .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for DataObjects registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverDataObjectsPerUserProfileData(userIdentifier, schema, resources) {\r\n    let _this = this;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/dataObject/userprofile/' + userIdentifier,\r\n      }\r\n    };\r\n\r\n    if(schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema\r\n      };\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (!_this._isLegacyUser(userIdentifier)) {// todo: to reomve when discovery of legcay users are supported\r\n\r\n        _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n          if(reply.body.code === 200){\r\n            Discovery_log.log(\"Reply log: \",reply.body.value);\r\n            resolve(reply.body.value);\r\n          }\r\n          else {\r\n            Discovery_log.warn(\"[Discovery.discoverDataObjectsPerUserProfileData] Error Reply for \" + userIdentifier + \" Reason: \", reply.body.description);\r\n            resolve([]);\r\n          }\r\n        });\r\n      } else {\r\n          resolve([{hypertyID: userIdentifier, status: 'live'}]);\r\n        }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * returns discoveredObject.\r\n  * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObjectsPerUserProfileDataDO(guidURL, schema, resources) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverDataObjectsPerUserProfileData(...arguments)\r\n        .then(registryObjects => resolve(this._convertToDiscoveredObject(registryObjects)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n  * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverHypertiesPerGUID(guidURL, schema, resources) {\r\n    let _this = this;\r\n    let filteredHyperties = [];\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/hyperty/guid/' + guidURL,\r\n      }\r\n    };\r\n\r\n    if(schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema\r\n      };\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if(reply.body.code === 200){\r\n          reply.body.value.map(function(hyperty) {\r\n             if(hyperty.hypertyID != _this.discoveryURL)\r\n                 filteredHyperties.push(hyperty);\r\n          });\r\n          if(filteredHyperties.length === 0)\r\n            reject('No Hyperty was found');\r\n          else {\r\n            Discovery_log.log(\"Reply log: \",filteredHyperties);\r\n            resolve(filteredHyperties);\r\n          }\r\n        }\r\n        else {\r\n          Discovery_log.warn(\"[Discovery.discoverHypertiesPerGUID] Error Reply for \" + guidURL + \" Reason: \", reply.body.description);\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n  * returns DiscoveredObject\r\n  * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverHypertiesPerGUIDDO(guidURL, schema, resources) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverHypertiesPerGUID(...arguments)\r\n      .then(hyperties => {\r\n        resolve(this._convertToDiscoveredObject(hyperties));\r\n      })\r\n      .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for DataObjects registered in domain registry associated with some GUID\r\n  * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObjectsPerGUID(guidURL, schema, resources) {\r\n    let _this = this;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/dataObject/guid/' + guidURL,\r\n      }\r\n    };\r\n\r\n    if(schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema\r\n      };\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if(reply.body.code === 200){\r\n          Discovery_log.log(\"Reply log: \",reply.body.value);\r\n          resolve(reply.body.value);\r\n        }\r\n        else {\r\n          Discovery_log.warn(\"[Discovery.discoverDataObjectsPerGUID] Error Reply for \" + guidURL + \" Reason: \", reply.body.description);\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * returns discoveredObject.\r\n  * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObjectsPerGUIDDO(guidURL, schema, resources) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverDataObjectsPerGUID(...arguments)\r\n        .then(registryObjects => resolve(this._convertToDiscoveredObject(registryObjects)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for Hyperties registered in domain registry\r\n  * @param  {String}           user                  user identifier, either in url or email format\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverHyperties(user, schema, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n    let filteredHyperties = [];\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/hyperty/user/' + user,\r\n      }\r\n    };\r\n\r\n    if(schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema,\r\n        domain: activeDomain\r\n      };\r\n    }else {\r\n      msg.body['criteria'] = {\r\n        domain: activeDomain\r\n      }\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (!_this._isLegacyUser(user)) {// todo: to reomve when discovery of legcay users are supported\r\n\r\n        _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n          if(reply.body.code === 200 || reply.body.code === 500){\r\n            reply.body.value.map(function(hyperty) {\r\n               if(hyperty.hypertyID != _this.discoveryURL)\r\n                   filteredHyperties.push(hyperty);\r\n            });\r\n/*            if(filteredHyperties.length === 0)\r\n              reject('No Hyperty was found');\r\n            else {*/\r\n              Discovery_log.log(\"[Discovery.discoverHyperties] Reply : \",filteredHyperties);\r\n              resolve(filteredHyperties);\r\n//            }\r\n          }\r\n          else {\r\n            Discovery_log.warn(\"[Discovery.discoverHyperties] Error Reply for \" + user + \" Reason: \", reply.body.description);\r\n            resolve(filteredHyperties);\r\n          }\r\n        });\r\n      } else {\r\n        resolve([{hypertyID: user, status: 'live'}]);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for Hyperties registered in domain registry,\r\n  *returns DiscoveredObject\r\n  * @param  {String}           user                  user identifier, either in url or email format\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverHypertiesDO(user, schema, resources, domain) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverHyperties(...arguments)\r\n      .then(hyperties => {\r\n        resolve(this._convertToDiscoveredObject(hyperties));\r\n      })\r\n      .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for DataObjects registered in domain registry\r\n  * @param  {String}           user                  user identifier, either in url or email format\r\n  * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObjects(user, schema, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/dataObject/user/' + user,\r\n      }\r\n    };\r\n\r\n    if(schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema,\r\n        domain: activeDomain\r\n      };\r\n    }else {\r\n      msg.body['criteria'] = {\r\n        domain: activeDomain\r\n      }\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if(reply.body.code === 200){\r\n          Discovery_log.log(\"Reply Value Log: \",reply.body.value);\r\n          resolve(reply.body.value);\r\n        }\r\n        else {\r\n          Discovery_log.warn(\"[Discovery.discoverDataObjects] Error Reply for \" + user + \" Reason: \", reply.body.description);\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * returns discoveredObject.\r\n  * @param  {String}           user                  user identifier, either in url or email format\r\n  * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObjectsDO(user, schema, resources, domain) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverDataObjects(...arguments)\r\n        .then(registryObjects => resolve(this._convertToDiscoveredObject(registryObjects)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about hyperties registered in domain registry, and\r\n  * return the hyperty information, if found.\r\n  * @param  {String}              url  hyperty URL\r\n  * @param  {String}            domain (Optional)\r\n  */\r\n  discoverHypertyPerURL(url, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/hyperty/url/' + url,\r\n        criteria: {\r\n          domain: activeDomain\r\n        }\r\n      }\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if(reply.body.code === 200){\r\n          Discovery_log.log(\"Reply Value Log: \",reply.body.value);\r\n          resolve(reply.body.value);\r\n        }\r\n        else {\r\n          Discovery_log.warn(\"[Discovery.discoverHypertyPerURL] Error Reply for \" + url + \" Reason: \", reply.body.description);\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about hyperties registered in domain registry, and\r\n  * returns discoveredObject.\r\n  * @param  {String}              url  hyperty URL\r\n  * @param  {String}            domain (Optional)\r\n  */\r\n  discoverHypertyPerURLDO(url, domain) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverHypertyPerURL(...arguments)\r\n        .then(hyperty => resolve(new discovery_DiscoveredObject(hyperty, this.runtimeURL, this.discoveryURL, this.messageBus, this)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * return the dataObject information, if found.\r\n  * @param  {String}              url  dataObject URL\r\n  * @param  {String}            domain (Optional)\r\n  */\r\n  discoverDataObjectPerURL(url, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/dataObject/url/' + url,\r\n        criteria: {\r\n          domain: activeDomain\r\n        }\r\n      }\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if(reply.body.code === 200){\r\n          Discovery_log.log(\"Reply Value Log: \",reply.body.value);\r\n          resolve(reply.body.value);\r\n        }\r\n        else {\r\n          Discovery_log.warn(\"[Discovery.discoverDataObjectPerURL] Error Reply for \" + url + \" Reason: \", reply.body.description);\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * returns discoveredObject.\r\n  * @param  {String}              url  dataObject URL\r\n  * @param  {String}            domain (Optional)\r\n  */\r\n  discoverDataObjectPerURLDO(url, domain) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverDataObjectPerURL(...arguments)\r\n        .then(registryObject => resolve(new discovery_DiscoveredObject(registryObject, this.runtimeURL, this.discoveryURL, this.messageBus, this)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about an dataObjects registered in domain registry with a given name, and\r\n  * return the dataObjects information, if found.\r\n  * @param  {String}              name  dataObject URL\r\n  * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n  * @param  {String}            domain (Optional)\r\n  */\r\n  discoverDataObjectsPerName(name, schema, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/dataObject/name/' + name\r\n      }\r\n    };\r\n\r\n    if(schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema,\r\n        domain: activeDomain\r\n      };\r\n    }else {\r\n      msg.body['criteria'] = {\r\n        domain: activeDomain\r\n      }\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if(reply.body.code === 200){\r\n          Discovery_log.log(\"Reply Value Log: \",reply.body.value);\r\n          resolve(reply.body.value);\r\n        }\r\n        else {\r\n          Discovery_log.warn(\"[Discovery.discoverDataObjectsPerName] Error Reply for \" + name + \" Reason: \", reply.body.description);\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * returns discoveredObject.\r\n  * @param  {String}              name  dataObject URL\r\n  * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n  * @param  {String}            domain (Optional)\r\n  */\r\n  discoverDataObjectsPerNameDO(name, schema, resources, domain) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverDataObjectsPerName(...arguments)\r\n        .then(registryObjects => resolve(this._convertToDiscoveredObject(registryObjects)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about specific reporter dataObject registered in domain registry, and\r\n  * return the dataObjects from that reporter.\r\n  * @param  {String}           reporter     dataObject reporter\r\n  * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n  * @param  {String}           domain       (Optional)\r\n  */\r\n  discoverDataObjectsPerReporter(reporter, schema, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: _this.runtimeURL + '/discovery/',\r\n      body: {\r\n        resource: '/dataObject/reporter/' + reporter\r\n      }\r\n    };\r\n\r\n    if(schema || resources) {\r\n      msg.body['criteria'] = {\r\n        resources: resources,\r\n        dataSchemes: schema,\r\n        domain: activeDomain\r\n      };\r\n    }else {\r\n      msg.body['criteria'] = {\r\n        domain: activeDomain\r\n      }\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if(reply.body.code === 200){\r\n          Discovery_log.log(\"Reply Value Log: \",reply.body.value);\r\n          resolve(reply.body.value);\r\n        }\r\n        else {\r\n          Discovery_log.warn(\"[Discovery.discoverDataObjectsPerName] Error Reply for \" + reporter + \" Reason: \", reply.body.description);\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * returns discoveredObject.\r\n  * @param  {String}              name  dataObject URL\r\n  * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n  * @param  {String}            domain (Optional)\r\n  */\r\n  discoverDataObjectsPerReporterDO(reporter, schema, resources, domain) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.discoverDataObjectsPerReporter(...arguments)\r\n        .then(registryObjects => resolve(this._convertToDiscoveredObject(registryObjects)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  _convertToDiscoveredObject(registryObjects) {\r\n    return registryObjects.map((registryObject) => {\r\n      return new discovery_DiscoveredObject(registryObject, this.runtimeURL, this.discoveryURL, this.messageBus, this);\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for dataObjects registered in domain registry\r\n  * @deprecated Deprecated. Use discoverDataObjectsPerName instead\r\n  * @param  {String}           name                  name of the dataObject\r\n  * @param  {Array<string>}    schema (Optional)     types of dataObject schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObject resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObject(name, schema, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n    //let userIdentifier = convertToUserURL(user);\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain, body: { resource: name,\r\n      criteria: {resources: resources, dataSchemes: schema}\r\n      }\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n        Discovery_log.log('[Discovery]', reply)\r\n\r\n        if(reply.body.code>299) {\r\n          Discovery_log.warn(\"[Discovery.discoverDataObject] Error Reply for \" + name + \" Reason: \", reply.body.description);\r\n          return resolve([]);\r\n        }\r\n\r\n        let hyperties = reply.body.value;\r\n\r\n        if (hyperties) {\r\n          resolve(hyperties);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for Hyperties registered in domain registry\r\n  * @deprecated Deprecated. Use discoverHyperties instead\r\n  * @param  {String}           user                  user identifier, either in url or email format\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverHyperty(user, schema, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n    let userIdentifier = convertToUserURL(user);\r\n\r\n    if (!domain) {\r\n      activeDomain = _this.domain;\r\n    } else {\r\n      activeDomain = domain;\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      Discovery_log.log('[Discovery.discoverHyperty] ACTIVE DOMAIN -> ', activeDomain, 'user->', user, 'schema->', schema, 'resources->', resources, 'domain->', domain);\r\n      if (user.includes(':') && !user.includes('user://')) {\r\n        Discovery_log.log('[Discovery.discoverHyperty] ' + user + ' is legacy domain');\r\n        let legacyUser = { userID: user, hypertyID: user, schema: schema, resources: resources };\r\n        return resolve(legacyUser);\r\n      }\r\n      let msg = {\r\n        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain, body: { resource: userIdentifier,\r\n        criteria: {resources: resources, dataSchemes: schema}\r\n        }\r\n      };\r\n\r\n      Discovery_log.info('[Discovery] msg to send->', msg);\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        Discovery_log.info('[Discovery] ON discoverHyperty->', reply);\r\n        let hyperties = reply.body.value;\r\n\r\n        if (hyperties) {\r\n          resolve(hyperties);\r\n        } else {\r\n          reject('No Hyperty was found');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about users registered in domain registry, and\r\n  * return the last hyperty instance registered by the user.\r\n  * @deprecated Deprecated. Use discoverHyperty instead\r\n  * @param  {email}              email\r\n  * @param  {domain}            domain (Optional)\r\n  */\r\n  discoverHypertyPerUser(email, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      // Hack for legacy users\r\n      if (email.includes(':') && !email.includes('user://')) {\r\n        Discovery_log.log('[Discovery.discoverHyperty] ' + email +'is legacy domain');\r\n        let legacyUser = { id: email, hypertyURL: email, descriptor: 'unknown' };\r\n        return resolve(legacyUser);\r\n      }\r\n\r\n      if (!domain) {\r\n        activeDomain = _this.domain;\r\n      } else {\r\n        activeDomain = domain;\r\n      }\r\n\r\n      let identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));\r\n\r\n\r\n      // message to query domain registry, asking for a user hyperty.\r\n      let message = {\r\n        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain, body: { resource: identityURL}\r\n      };\r\n\r\n      Discovery_log.info('[Discovery] Message: ', message, activeDomain, identityURL);\r\n\r\n      //log.info('[Discovery] message READ', message);\r\n\r\n      _this.messageBus.postMessage(message, (reply) => {\r\n        Discovery_log.info('[Discovery] message reply', reply);\r\n\r\n        let hyperty;\r\n        let mostRecent;\r\n        let lastHyperty;\r\n        let value = reply.body.value;\r\n\r\n        for (hyperty in value) {\r\n          if (value[hyperty].lastModified !== undefined) {\r\n            if (mostRecent === undefined) {\r\n              mostRecent = new Date(value[hyperty].lastModified);\r\n              lastHyperty = hyperty;\r\n            } else {\r\n              let hypertyDate = new Date(value[hyperty].lastModified);\r\n              if (mostRecent.getTime() < hypertyDate.getTime()) {\r\n                mostRecent = hypertyDate;\r\n                lastHyperty = hyperty;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        Discovery_log.info('[Discovery] Last Hyperty: ', lastHyperty, mostRecent);\r\n\r\n        let hypertyURL = lastHyperty;\r\n\r\n        if (hypertyURL === undefined) {\r\n          return reject('User Hyperty not found');\r\n        }\r\n\r\n        let idPackage = {\r\n          id: email,\r\n          descriptor: value[hypertyURL].descriptor,\r\n          hypertyURL: hypertyURL\r\n        };\r\n\r\n        Discovery_log.info('[Discovery] ===> hypertyDiscovery messageBundle: ', idPackage);\r\n        resolve(idPackage);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about users registered in domain registry, and\r\n  * return the all the hyperties registered by the user\r\n  * @deprecated Deprecated. Use discoverHyperty instead\r\n  * @param  {email}              email\r\n  * @param  {domain}            domain (Optional)\r\n  */\r\n  discoverHypertiesPerUser(email, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n    Discovery_log.log('on Function->', email);\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (email.includes(':') && !email.includes('user://')) {\r\n        Discovery_log.log('[Discovery.discoverHyperty] is legacy domain');\r\n        let legacyUser = { userID: email, hypertyID: email, schema: schema, resources: resources };\r\n        return resolve(legacyUser);\r\n      }\r\n\r\n      if (!domain) {\r\n        activeDomain = _this.domain;\r\n      } else {\r\n        activeDomain = domain;\r\n      }\r\n\r\n      let identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));\r\n\r\n      // message to query domain registry, asking for a user hyperty.\r\n      let message = {\r\n        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain, body: { resource: identityURL}\r\n      };\r\n\r\n      Discovery_log.log('[Discovery] Message discoverHypertiesPerUser: ', message, activeDomain, identityURL);\r\n\r\n      //log.info('[Discovery] message READ', message);\r\n\r\n      _this.messageBus.postMessage(message, (reply) => {\r\n        Discovery_log.info('[Discovery] discoverHypertiesPerUser reply', reply);\r\n\r\n        let value = reply.body.value;\r\n\r\n        if (!value) {\r\n          return reject('User Hyperty not found');\r\n        }\r\n\r\n        resolve(value);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about users registered in domain registry, and\r\n  * return the all the hyperties registered by the user\r\n  * @deprecated Deprecated. Use discoverHyperty instead\r\n  * @param  {email}              email\r\n  * @param  {domain}            domain (Optional)\r\n  */\r\n  resumeDiscoveries() {\r\n\r\n    let _this = this;\r\n\r\n    Discovery_log.log('[Discovery] resumeDiscoveries');\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let msg = {\r\n        type: 'read', from: _this.discoveryURL, to: _this.runtimeURL + '/subscriptions', body: { resource: _this.discoveryURL}\r\n      };\r\n\r\n      _this.messageBus.postMessage(msg, (reply)=>{\r\n        Discovery_log.log('[Discovery.resumeDiscoveries] reply: ', reply);\r\n\r\n        let notifications = [];\r\n\r\n        if (reply.body.code === 200) {\r\n          let urls = reply.body.value;// URLs to add listeners to\r\n\r\n          //lets create one DiscoveryObject per notification\r\n          urls.forEach((url) => {\r\n            let objectUrl = url.split('/registration')[0];\r\n            let data = {};\r\n            data.url = objectUrl;\r\n            Discovery_log.log('[Discovery.resumeDiscoveries] adding listener to: ', objectUrl);\r\n\r\n            if (objectUrl.includes('hyperty://')) {\r\n              notifications.push(_this.discoverHypertyPerURLDO(objectUrl));\r\n            } else {\r\n              notifications.push(_this.discoverDataObjectPerURLDO(objectUrl));\r\n            }\r\n          });\r\n          Promise.all(notifications).then(values=>{ resolve(values); });\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ var discovery_Discovery = (Discovery_Discovery);\r\n\n// CONCATENATED MODULE: ./src/utils/Search.js\nclass Search {\r\n\r\n  constructor(discovery, identityManager) {\r\n\r\n    if (!discovery) throw new Error('The discovery component is a needed parameter');\r\n    if (!identityManager) throw new Error('The identityManager component is a needed parameter');\r\n\r\n    let _this = this;\r\n\r\n    _this.discovery = discovery;\r\n    _this.identityManager = identityManager;\r\n\r\n  }\r\n\r\n  myIdentity() {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.identityManager.discoverUserRegistered().then((result) => {\r\n        resolve(result);\r\n      }).catch((reason) => {\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  hyperties(users, schemes, resources, globalFlag = false) {\r\n    //TODO: reuse users or the other way around\r\n\r\n  }\r\n\r\n  /**\r\n   * List of usersURL to search\r\n   * @param  {array<URL.userURL>}  users List of UserUR, like this format user://<ipddomain>/<user-identifier>\r\n   * @return {Promise}\r\n   */\r\n  users(usersURLs, providedDomains, schemes, resources, globalFlag = false) {\r\n\r\n    if (!usersURLs) throw new Error('You need to provide a list of users');\r\n    if (!providedDomains) throw new Error('You need to provide a list of domains');\r\n    if (!resources) throw new Error('You need to provide a list of resources');\r\n    if (!schemes) throw new Error('You need to provide a list of schemes');\r\n\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      console.info('[Search] Users: ', usersURLs, usersURLs.length);\r\n      console.info('[Search] Domains: ', providedDomains, providedDomains.length);\r\n      if (usersURLs.length === 0) {\r\n        console.info('Don\\'t have users to discovery');\r\n        resolve(usersURLs);\r\n      } else {\r\n        let getUsers = [];\r\n\r\n        usersURLs.forEach((userURL, index) => {\r\n          let currentDomain = providedDomains[index];\r\n          console.info('[Search] Search user ' + userURL + ' for provided domain:', currentDomain);\r\n          if (!globalFlag) {\r\n            getUsers.push(_this.discovery.discoverHyperties(userURL, schemes, resources, currentDomain));\r\n          } else {\r\n            getUsers.push(_this.discovery.discoverHypertiesPerUserProfileData(userURL, schemes, resources));\r\n          }\r\n\r\n        });\r\n\r\n        console.info('Requests promises: ', getUsers);\r\n\r\n        Promise.all(getUsers.map((promise) => {\r\n          return promise.then((hyperty) => { return hyperty; }, (error) => { return error; });\r\n        })).then((hyperties) => {\r\n\r\n          console.info('[Search] Hyperties from new Discovery', hyperties);\r\n          let result = hyperties.map(function(hyperty) {\r\n\r\n            if (hyperty.hasOwnProperty('hypertyID'))\r\n              return hyperty;\r\n            let recent = Object.keys(hyperty).reduceRight(function(a, b) {\r\n              let hypertyDate = new Date(hyperty[b].lastModified);\r\n              let hypertyDateP = new Date(hyperty[a].lastModified);\r\n              if (hypertyDateP.getTime() < hypertyDate.getTime()) {\r\n                return b;\r\n              }\r\n              return a;\r\n            });\r\n\r\n            return hyperty[recent];\r\n          });\r\n\r\n          let clean = result.filter((hyperty) => {\r\n            return hyperty.hasOwnProperty('hypertyID');\r\n          });\r\n\r\n          console.log('Requests result: ', clean);\r\n\r\n          hyperties.forEach(function(entry) {\r\n            if (entry !== 'No Hyperty was found') {\r\n              return resolve(clean);\r\n            }\r\n          });\r\n\r\n          reject('No Hyperty was found');\r\n\r\n        }).catch((reason) => {\r\n          console.error(reason);\r\n          resolve(usersURLs);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/* harmony default export */ var utils_Search = (Search);\r\n\n// CONCATENATED MODULE: ./src/utils/EventEmitter.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n/**\r\n * EventEmitter\r\n * All classes which extends this, can have addEventListener and trigger events;\r\n */\r\nclass EventEmitter {\r\n\r\n  /**\r\n   * addEventListener listen for an eventType\r\n   * @param  {string}         eventType - listening for this type of event\r\n   * @param  {Function}       cb        - callback function will be executed when the event it is invoked\r\n   */\r\n  addEventListener(eventType, cb) {\r\n    let _this = this;\r\n    _this[eventType] = cb;\r\n  }\r\n\r\n  /**\r\n   * Invoke the eventType\r\n   * @param  {string} eventType - event will be invoked\r\n   * @param  {object} params - parameters will be passed to the addEventListener\r\n   */\r\n  trigger(eventType, params) {\r\n    let _this = this;\r\n\r\n    if (_this[eventType]) {\r\n      _this[eventType](params);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var utils_EventEmitter = (EventEmitter);\r\n\n// CONCATENATED MODULE: ./src/contextManager/ContextObserver.js\n//import IdentityManager from '../identityManager/IdentityManager';\r\n//import Syncher from '../syncher/Syncher.js';\r\n//import Discovery from '../discovery/Discovery.js';\r\n//import {divideURL} from '../utils/utils';\r\n\r\n//import Search from '../utils/Search';\r\n\r\n\r\n/**\r\n* Context Observer;\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n*/\r\n\r\nclass ContextObserver_ContextObserver extends utils_EventEmitter {\r\n\r\n  constructor(hypertyURL, bus, configuration, contextResourceTypes, factory, syncher) {\r\n    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\r\n    if (!bus) throw new Error('The MiniBus is a needed parameter');\r\n    if (!configuration) throw new Error('The configuration is a needed parameter ');\r\n    if (!factory) throw new Error('The factory is a needed parameter ');\r\n\r\n    super();\r\n\r\n    let _this = this;\r\n\r\n    _this._contextResourceTypes = contextResourceTypes;\r\n    _this._url = hypertyURL;\r\n    _this._discoverUsersPromises = {}; // object with promises executed at discoverUsers function\r\n    _this._observePromises = {}; // object with promises executed at observe function\r\n\r\n\r\n    //let identityManager = new IdentityManager(hypertyURL, configuration.runtimeURL, bus);\r\n    console.log('[ContextObserver] started with hypertyURL->', hypertyURL);\r\n    _this._domain = factory.divideURL(configuration.runtimeURL).domain;\r\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + _this._domain + '/.well-known/dataschema/Context';\r\n\r\n    _this._users2observe = [];\r\n    _this._observers = {};\r\n\r\n    this._syncher = syncher ? syncher : factory.createSyncher(hypertyURL, bus, configuration);\r\n\r\n    let discovery = factory.createDiscovery(hypertyURL, configuration.runtimeURL, bus);\r\n    _this._discovery = discovery;\r\n\r\n    _this._discoveries = {}; //list of discovered objects\r\n    //_this.identityManager = identityManager;\r\n    //_this.search = new Search(discovery, identityManager);\r\n    window.discovery = _this._discovery;\r\n  }\r\n\r\n\r\n  start(resumedContext, disconnectedCallBack) {\r\n    let _this = this;\r\n    console.log('[ContextObserver.start] ');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this._syncher.resumeObservers({store: true}).then((observers) => {\r\n\r\n        let observersList = Object.keys(observers);\r\n\r\n        if (observersList.length  > 0) {\r\n\r\n          console.log('[ContextObserver.start] resuming: ', observers);\r\n\r\n          /*observersList.forEach((i)=>{\r\n          _this._users2observe.push(new UserAvailabilityController(observers[i]));\r\n        });*/\r\n          _this._observers = observers;\r\n\r\n          resolve(observers);\r\n\r\n          observersList.forEach((observer) =>{\r\n            let Context = observers[observer];\r\n\r\n            // By default resumed context is set with resumedContext.\r\n            if (resumedContext) context.data.values = resumedContext;\r\n\r\n            // Context will will be updated with value synchronized with reporter if connected\r\n            Context.sync();\r\n\r\n            //Add listener to be notified when reporter is abruptly disconnected\r\n            if (disconnectedCallBack) Context.onDisconnected(disconnectedCallBack);\r\n          });\r\n\r\n\r\n        } else {\r\n          resolve(false);\r\n        }\r\n\r\n      }).catch((reason) => {\r\n        console.info('[ContextObserver] Resume Observer failed | ', reason);\r\n        resolve(false);\r\n      });\r\n    }).catch((reason) => {\r\n      reject('[ContextObserver] Start failed | ', reason);\r\n    });\r\n  }\r\n\r\n  resumeDiscoveries() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this._discovery.resumeDiscoveries().then((discoveries) => {\r\n\r\n        console.log('[ContextObserver._resumeDiscoveries] found: ', discoveries);\r\n\r\n        discoveries.forEach((discovery) =>{\r\n\r\n          if (discovery.data.resources && discovery.data.resources[0] === _this._contextResourceTypes[0]) {\r\n            console.log('[ContextObserver._resumeDiscoveries] resuming: ', discovery);\r\n\r\n            if (discovery.data.status === 'live') { // previously discovered object is now live\r\n              resolve([discovery.data]);\r\n              discovery.unsubscribeLive(_this._url);\r\n            } else { // previously discovered object is still disconnected\r\n              discovery.onLive(_this._url, ()=>{\r\n                console.log('[ContextObserver._resumeDiscoveries] disconnected Hyperty is back to live', discovery);\r\n                resolve([discovery.data]);\r\n                discovery.unsubscribeLive(_this._url);\r\n              });\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }).catch((reason) => {\r\n      reject('[ContextObserver] resumeDiscoveries failed | ', reason);\r\n    });\r\n  }\r\n\r\n  onResumeObserver(callback) {\r\n    let _this = this;\r\n    _this._onResumeObserver = callback;\r\n  }\r\n\r\n\r\n  discoverUsers(email, domain) {\r\n    let _this = this;\r\n\r\n\r\n    let user = email + '@' + domain;\r\n\r\n    if (!_this._discoverUsersPromises[user]) {\r\n      _this._discoverUsersPromises[user] = new Promise(function(resolve, reject) {\r\n\r\n        _this._discovery.discoverHypertiesDO(email, ['context'], _this._contextResourceTypes, domain).then(hyperties =>{\r\n          //_this.search.users([email], [domain], ['context'], ['Context_context']).then(function(a) {\r\n          console.log('[ContextObserver.discoverUsers] discovery result->', hyperties);\r\n          let discovered = [];\r\n          let disconnected = [];\r\n          hyperties.forEach(hyperty =>{\r\n            _this._discoveries[hyperty.data.hypertyID] = hyperty;\r\n            if (hyperty.data.status === 'live') {\r\n              discovered.push(hyperty.data);\r\n            } else {\r\n              disconnected.push(hyperty);\r\n            }\r\n          });\r\n\r\n\r\n          if (discovered.length > 0) {\r\n            console.log('[ContextObserver.discoverUsers] returning discovered hyperties data->', discovered);\r\n            resolve(discovered);\r\n          } else if (disconnected.length > 0) {\r\n            console.log('[ContextObserver.discoverUsers] disconnected Hyperties ', disconnected);\r\n\r\n            //resolve([]);\r\n\r\n            disconnected[0].onLive(_this._url, ()=>{\r\n              console.log('[ContextObserver.discoverUsers] disconnected Hyperty is back to live', disconnected[0]);\r\n\r\n              discovered.push(disconnected[0].data);\r\n              resolve(discovered);\r\n              disconnected[0].unsubscribeLive(_this._url);\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return _this._discoverUsersPromises[user];\r\n  }\r\n\r\n  /**\r\n   * This function is used to start the user Context observation for a certain user Context reporter\r\n   * @param  {DiscoveredObject} hyperty       Hyperty to be observed.\r\n   * @return {<Promise> DataObjectObserver}      It returns as a Promise the UserAvailability Data Object Observer.\r\n   */\r\n\r\n  observe(hyperty, domainSubscription = true) {\r\n    let _this = this;\r\n    if (!_this._observePromises[hyperty.hypertyID]) {\r\n      _this._observePromises[hyperty.hypertyID] = new Promise(function(resolve, reject) {\r\n      //check if we are already observing it\r\n        _this._users2observe.forEach((Context) => {\r\n          if (Context._reporter === hyperty.hypertyID) return resolve(Context);\r\n        });\r\n\r\n        _this._discovery.discoverDataObjectsPerReporter(hyperty.hypertyID, ['context'], _this._contextResourceTypes,  _this._domain).then(function(dataObjects) {\r\n          console.log('[ContextObserver.discoverAvailability] discovered context objects ', dataObjects);\r\n          let last = 0;\r\n          let url;\r\n\r\n          dataObjects.forEach((dataObject) => {\r\n            if (dataObject.hasOwnProperty('lastModified') && dataObject.hasOwnProperty('url') && Date.parse(dataObject.lastModified) > last) {\r\n              last = dataObject.lastModified;\r\n              url = dataObject.url;\r\n\r\n            //console.log('URL DATA Object', url);\r\n            }\r\n          });\r\n          if (last != 0 && url) {\r\n            resolve(_this._subscribeContext(hyperty, url, domainSubscription));\r\n          } else {\r\n            reject('[ContextObserver.observe] discovered DataObjecs are invalid', dataObjects);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return _this._observePromises[hyperty.hypertyID];\r\n  }\r\n\r\n  _subscribeContext(hyperty, url, domainSubscription = true) {\r\n    let _this = this;\r\n\r\n    // avoid duplicated subscriptions\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._users2observe.forEach((Context) => {\r\n        if (Context.url === url) return resolve(Context);\r\n      });\r\n\r\n      let input = {\r\n        schema: _this._objectDescURL,\r\n        resource: url,\r\n        store: null,\r\n        p2p: null,\r\n        mutual: null,\r\n        domain_subscription: domainSubscription\r\n      };\r\n\r\n      _this._syncher.subscribe(input).then((Context) => {\r\n        console.log('[ContextObserver._subscribeContext] observer object', Context);\r\n\r\n        //let newUserAvailability = new UserAvailabilityController(Context, userID);\r\n\r\n        _this._users2observe.push(Context);\r\n\r\n        // When Object is disconnected set user Context status as unavailable\r\n        Context.onDisconnected(()=>{\r\n          console.log('[ContextObserver.onDisconnected]: ', Context);\r\n\r\n          Context.data.values[0].value = 'unavailable';\r\n          Context.sync();\r\n        });\r\n\r\n        resolve(Context);\r\n      });\r\n    });\r\n  }\r\n\r\n  _discoverAndSubscribeLegacyUsers(name) {\r\n    let _this = this;\r\n    return new Promise(function(resolve, reject) {\r\n      _this._discovery.discoverDataObjectsPerName(name).then(function(result) {\r\n        console.log('[ContextObserver._discoverAndSubscribeLegacyUsers] All DataObjects Result', result);\r\n        result.forEach(function(obj) {\r\n          if (obj.status === 'live') {\r\n            console.log('Live obj', obj);\r\n            if (!obj.hypertyID) {\r\n              obj.hypertyID = obj.reporter;\r\n            }\r\n            _this._subscribeContext(obj.schema, obj.url).then(function(resultSubscribe) {\r\n              console.log('[ContextObserver._discoverAndSubscribeLegacyUsers] _subscribeContext', resultSubscribe);\r\n              return resolve(resultSubscribe);\r\n            });\r\n          }\r\n        });\r\n      }).catch(function(err) {\r\n        console.log('error ', err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n * This function is used to stop the user Context observation for a certain user\r\n * @param  {string} Context       the UserAvailability Data Object Observer URL to be unobserved.\r\n */\r\n\r\n  unobserve(Context) {\r\n    let _this = this;\r\n\r\n    _this._users2observe.forEach((user, index) => {\r\n      if (user.url === Context) {\r\n        user.unsubscribe();\r\n        _this._users2observe.splice(index, 1);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var contextManager_ContextObserver = (ContextObserver_ContextObserver);\r\n\n// CONCATENATED MODULE: ./src/contextManager/ContextReporter.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Service Framework\r\n//import Syncher from '../syncher/Syncher';\r\n\r\n// Utils\r\n\r\n//import {divideURL} from '../utils/utils.js';\r\n\r\n// import availability from './availability.js';\r\n\r\n/**\r\n* Context Reporter;\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n*/\r\nclass ContextReporter_ContextReporter extends utils_EventEmitter {\r\n\r\n  constructor(hypertyURL, bus, configuration, factory, syncher) {\r\n    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\r\n    if (!bus) throw new Error('The MiniBus is a needed parameter');\r\n    if (!configuration) throw new Error('The configuration is a needed parameter');\r\n\r\n    super(hypertyURL, bus, configuration);\r\n\r\n    let _this = this;\r\n\r\n    console.info('[ContextReporter] started with url: ', hypertyURL);\r\n\r\n    this.syncher = syncher ? syncher : factory.createSyncher(hypertyURL, bus, configuration);\r\n\r\n\r\n    //    this.discovery = new Discovery(hypertyURL, bus);\r\n    this.domain = factory.divideURL(configuration.runtimeURL).domain;\r\n    this.contexts = {};\r\n\r\n    this.contextDescURL = 'hyperty-catalogue://catalogue.' + this.domain + '/.well-known/dataschema/Context';\r\n\r\n\r\n    //    this.heartbeat = [];\r\n\r\n    this.syncher.onNotification((event) => {\r\n      let _this = this;\r\n      _this.onNotification(event);\r\n    });\r\n\r\n    //TODO: uncomment when used with service framework develop branch\r\n\r\n    this.syncher.onClose((event) => {\r\n\r\n      console.log('[ContextReporter.onClose]');\r\n      let _this = this;\r\n      _this.setStatus(event.id, 'unavailable');\r\n      event.ack();\r\n    });\r\n\r\n  }\r\n\r\n  //TODO: move to User availability Reporter or to abstract HypertyContextReporter\r\n\r\n  start() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.syncher.resumeReporters({store: true}).then((reporters) => {\r\n\r\n        let reportersList = Object.keys(reporters);\r\n\r\n        if (reportersList.length  > 0) {\r\n\r\n          console.log('[ContextReporter.start] resuming ', reporters[reportersList[0]]);\r\n\r\n          // set availability to available\r\n\r\n          _this.contexts = reporters;\r\n\r\n          //TODO:\r\n          reportersList.forEach((context) => {\r\n            _this._onSubscription(_this.contexts[context]);\r\n          });\r\n\r\n          resolve(_this.contexts);\r\n        } else {\r\n          console.log('[ContextReporter.start] nothing to resume ', reporters);\r\n          resolve(false);\r\n        }\r\n\r\n      }).catch((reason) => {\r\n        console.error('[ContextReporter] Resume failed | ', reason);\r\n      });\r\n    }).catch((reason) => {\r\n      reject('[ContextReporter] Start failed | ', reason);\r\n    });\r\n  }\r\n\r\n\r\n  processNotification(event) {\r\n    let _this = this;\r\n    console.log('[ContextReporter.processNotification: ', event);\r\n\r\n    event.ack();\r\n\r\n  }\r\n\r\n  /**\r\n   * This function is used to create a new status object syncher\r\n   * @param  {URL.UserURL} contacts List of Users\r\n   * @return {Promise}\r\n   */\r\n  create(id, init, resources, name = 'myContext', reporter = null, reuseURL = null) {\r\n    //debugger;\r\n    let _this = this;\r\n    let input;\r\n    return new Promise((resolve, reject) => {\r\n      if (!reporter && !reuseURL) {\r\n        input = {resources: resources, expires: 30};\r\n      } else if (reporter && !reuseURL) {\r\n        input = {resources: resources, expires: 30, reporter: reporter};\r\n      } else if (!reporter && reuseURL) {\r\n        input = {resources: resources, expires: 30, reuseURL: reuseURL};\r\n      } else {\r\n        input = {resources: resources, expires: 30, reuseURL: reuseURL, reporter: reporter};\r\n      }\r\n\r\n      console.info('[ContextReporter.create] lets create a new User availability Context Object ', input);\r\n      _this.syncher.create(_this.contextDescURL, [], init, true, false, name, null, input)\r\n        .then((context) => {\r\n          _this.contexts[id] = context;\r\n\r\n          _this._onSubscription(context);\r\n          resolve(context);\r\n\r\n        }).catch(function(reason) {\r\n          reject(reason);\r\n        });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _onSubscription(context) {\r\n    context.onSubscription((event) => {\r\n      console.info('[ContextReporter._onSubscription] accepting: ', event);\r\n      event.accept();\r\n    });\r\n  }\r\n\r\n  setContext(id, newContext) {\r\n    let _this = this;\r\n    console.log('THIS [ContextReporter.setContext] before change :', _this.contexts[id]);\r\n    console.log('[ContextReporter.setContext] before change :', _this.contexts[id].data);\r\n\r\n    //    _this.contexts[id].data.values[0].value = newContext;\r\n\r\n    _this.contexts[id].data.values = newContext;\r\n    console.debug('[ContextReporter.setContext] after change :', _this.contexts[id].data);\r\n    _this.trigger(id + '-context-update', newContext);\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ var contextManager_ContextReporter = (ContextReporter_ContextReporter);\r\n\n// CONCATENATED MODULE: ./src/identity/UserProfile.js\n/**\r\n* The UserProfile according to User Identity Data Model\r\n*/\r\n\r\n\r\nclass UserProfile {\r\n\r\n  constructor(username, userURL, picture, name, locale, profile) {\r\n\r\n    if (username) { this.preferred_username = username; }\r\n    if (picture) { this.picture = picture; }\r\n    if (name) { this.name = name; }\r\n    if (locale) { this.locale = locale; }\r\n    if (userURL) { this.userURL = userURL; }\r\n    if (profile) Object.assign(this, profile);\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ var identity_UserProfile = (UserProfile);\r\n\n// CONCATENATED MODULE: ./src/identity/MessageBodyIdentity.js\n/**\r\n* The Identity info to be added to Message.Body.Identity\r\n*/\r\n\r\n\r\n\r\nclass MessageBodyIdentity_MessageBodyIdentity {\r\n\r\n  constructor(username, userURL, picture, name, locale, idp, assertion, profile) {\r\n\r\n    if (!idp) throw new Error('IDP should be a parameter');\r\n    if (!username) throw new Error('username should be a parameter');\r\n\r\n    this.idp = idp;\r\n\r\n    if (assertion)      { this.assertion = assertion; }\r\n    this.userProfile = new identity_UserProfile(username, userURL, picture, name, locale, profile);\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n/* harmony default export */ var identity_MessageBodyIdentity = (MessageBodyIdentity_MessageBodyIdentity);\r\n\n// CONCATENATED MODULE: ./src/chatManager/communication.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\nconst CommunicationStatus = {\r\n  OPEN: 'open',\r\n  PENDING: 'pending',\r\n  CLOSED: 'closed',\r\n  PAUSED: 'paused',\r\n  FAILED: 'failed'\r\n};\r\n\r\nlet communicationObject = {\r\n  startingTime: '',\r\n  status: '',\r\n  participants: {}\r\n};\r\n\r\nlet communicationChildren = {\r\n  \"parent\" : \"communication\",\r\n  \"listener\" : \"resources\",\r\n  \"type\" : \"HypertyResource\"\r\n};\r\n\r\n/*\r\nexport let communicationObject = {\r\n  id: '',\r\n  name: '',\r\n  owner: '',\r\n  scheme: 'comm',\r\n  startingTime: '',\r\n  lastModified: '',\r\n  duration: '',\r\n  status: '',\r\n  participants: []\r\n};\r\n*/\r\n\n// CONCATENATED MODULE: ./src/chatManager/InvitationsHandler.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* To manage Group Chat Invitations\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n* @version 0.1.0\r\n*/\r\n\r\n// TODO: have an instance per ChatController\r\n\r\nclass InvitationsHandler {\r\n\r\n  constructor(hypertyURL) {\r\n\r\n    if (!hypertyURL) throw Error('hypertyURL is a necessary dependecy');\r\n\r\n    let _this = this;\r\n    _this._hypertyURL = hypertyURL;\r\n\r\n    _this._pending = {}; // All pending invitations\r\n  }\r\n\r\n  set invitationResponse(callback) {\r\n    this._invitationsResponse = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to handle notifications for disconnected Hy+erties.\r\n   * @param  {DiscoveredObject[]}    disconnected  array of discovered hyperties that are disconnected\r\n   * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n   */\r\n\r\n  inviteDisconnectedHyperties(disconnected, dataObjectReporter) {\r\n\r\n    let _this = this;\r\n    console.log('[GroupChatManager.InvitationsHandler.inviteDisconnectedHyperties] lets invite ', disconnected);\r\n\r\n    disconnected.forEach((disconnectedHyperty)=>{\r\n\r\n      if (!_this._pending[dataObjectReporter]) {\r\n        _this._pending[dataObjectReporter] = {};\r\n      }\r\n\r\n      _this._pending[dataObjectReporter][disconnectedHyperty.data.hypertyID] = disconnectedHyperty;\r\n\r\n      disconnectedHyperty.onLive(_this._hypertyURL,()=>{\r\n        console.log('[GroupChatManager.create] disconnected Hyperty is back to live', disconnectedHyperty);\r\n\r\n        dataObjectReporter.inviteObservers([disconnectedHyperty.data.hypertyID]);\r\n\r\n        disconnectedHyperty.unsubscribeLive(_this._hypertyURL);\r\n\r\n        delete _this._pending[dataObjectReporter][disconnectedHyperty.data.hypertyID];\r\n\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * This function is used to process sent invitations. In case invitations are not acknowledge by recipient it will be handled as a disconnected hyperty\r\n   * @param  {DiscoveredObject[]}    live  array of discovered hyperties that are or were live\r\n   * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n   */\r\n\r\n  processInvitations(live, dataObjectReporter) {\r\n    let _this = this;\r\n\r\n    let invitations = dataObjectReporter.invitations || [];\r\n\r\n    console.log('[GroupChatManager.InvitationsHandler.processInvitations] waiting for replies ', invitations, this._invitationsResponse);\r\n\r\n    invitations.forEach((invitation) => {\r\n      invitation.then((result) => {\r\n        console.log('[GroupChatManager.InvitationsHandler.processInvitations] - OK: ', result, this._invitationsResponse);\r\n        if (this._invitationsResponse) { this._invitationsResponse(result); }\r\n      }).catch((result) => {\r\n        console.log('[GroupChatManager.InvitationsHandler.processInvitations] - NOT OK: ', result, this._invitationsResponse);\r\n        if (this._invitationsResponse) { this._invitationsResponse(result); }\r\n        _this.inviteDisconnectedHyperties([live[result.invited]], dataObjectReporter);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  resumeDiscoveries(discoveryEngine, groupChat) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let live = {};\r\n      let liveHyperties = [];\r\n      let disconnected = [];\r\n      let unsubscriptonPromises = [];\r\n\r\n      discoveryEngine.resumeDiscoveries().then((discoveries) => {\r\n\r\n        console.log('[GroupChatManager.InvitationsHandler.resumeDiscoveries] found: ', discoveries);\r\n\r\n        discoveries.forEach((discovery) =>{\r\n\r\n          if (discovery.data.resources && discovery.data.resources[0] === 'chat') {\r\n            console.log('[GroupChatManager.InvitationsHandler.resumeDiscoveries] resuming: ', discovery);\r\n\r\n            if (discovery.data.status === 'live' ) {// previously discovered object is now live\r\n              live[discovery.data.hypertyID] = discovery;\r\n              liveHyperties.push(discovery.data.hypertyID);\r\n              unsubscriptonPromises.push( discovery.unsubscribeLive(_this._hypertyURL) );\r\n            } else {// previously discovered object is still disconnected\r\n              disconnected.push(discovery);\r\n            }\r\n          }\r\n        });\r\n        if (disconnected.length > 0) _this.inviteDisconnectedHyperties(disconnected, groupChat);\r\n\r\n        if ( Object.keys(live).length > 0) {\r\n          groupChat.inviteObservers(liveHyperties);\r\n\r\n          if (groupChat.invitations.length > 0) _this.processInvitations(live, groupChat);\r\n\r\n          Promise.all(unsubscriptonPromises).then(()=>{ resolve()});\r\n\r\n        } else resolve();\r\n\r\n      });\r\n    }).catch((reason) => {\r\n    reject('[GroupChatManager.InvitationsHandler.resumeDiscoveries] failed | ', reason);\r\n  });\r\n  }\r\n\r\n  /**\r\n   * This function is used to remove and clean all pending invitations.\r\n   * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n   * @return {Promise} return a promise when all unsubscriptons for pending invitations are finished\r\n   */\r\n\r\n  cleanInvitations(dataObjectReporter) {\r\n    let _this = this;\r\n\r\n    let chatInvitations = _this._pending[dataObjectReporter];\r\n\r\n    console.log('[GroupChatManager.InvitationsHandler.cleanInvitations] ', chatInvitations);\r\n\r\n    if (chatInvitations) {\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let pendingInvitations = Object.keys(chatInvitations);\r\n\r\n        let unsubscriptonPromises = [];\r\n\r\n        pendingInvitations.forEach((invitation)=>{\r\n          unsubscriptonPromises.push( chatInvitations[invitation].unsubscribeLive(_this._hypertyURL) );\r\n        });\r\n\r\n        Promise.all(pendingInvitations).then(()=>{ resolve(); });\r\n\r\n      });\r\n\r\n    } else return Promise.resolve();\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var chatManager_InvitationsHandler = (InvitationsHandler);\r\n\n// CONCATENATED MODULE: ./src/chatManager/ChatController.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* The Group Chat API is used to control a Group Chat instance.\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\r\n\r\n//import { UserInfo } from './UserInfo';\r\n\r\n\r\n\r\nclass ChatController_ChatController {\r\n\r\n  constructor(syncher, discovery, domain, search, identity, manager) {\r\n\r\n    if (!syncher) throw Error('Syncher is a necessary dependecy');\r\n    if (!discovery) throw Error('Discover is a necessary dependecy');\r\n    if (!domain) throw Error('Domain is a necessary dependecy');\r\n    if (!search) throw Error('Search is a necessary dependecy');\r\n\r\n    let _this = this;\r\n    _this._syncher = syncher;\r\n    _this.discovery = discovery;\r\n    _this.search = search;\r\n    _this.myIdentity = identity;\r\n    _this.controllerMode = 'reporter';\r\n    _this.child_cseq = 0;\r\n    _this.domain = domain;\r\n\r\n    _this._manager = manager;\r\n\r\n    const hypertyURL = syncher.owner;\r\n\r\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\r\n\r\n    _this._invitationsHandler = new chatManager_InvitationsHandler(hypertyURL);\r\n\r\n  }\r\n\r\n  get invitationsHandler() {\r\n    return this._invitationsHandler;\r\n  }\r\n\r\n  get url() {\r\n    return this.controllerMode === 'reporter' ? this.dataObjectReporter.url : this.dataObjectObserver.url;\r\n  }\r\n\r\n  set dataObjectReporter(dataObjectReporter) {\r\n\r\n    if (!dataObjectReporter) throw new Error('[ChatController] The data object reporter is necessary parameter ');\r\n    let _this = this;\r\n\r\n    _this.controllerMode = 'reporter';\r\n\r\n    // Handler to process received files\r\n\r\n    // dataObjectReporter.onResponse(function(event) {\r\n    //   console.log('[DataObjectReporter - onResponse]', event);\r\n    //   if (_this._onInvitationResponse) {\r\n    //     _this._onInvitationResponse(event);\r\n    //   }\r\n    //\r\n    // });\r\n\r\n    dataObjectReporter.onSubscription(function(event) {\r\n\r\n      switch (event.type) {\r\n        case 'subscribe': _this._onSubscribe(event); break;\r\n        case 'unsubscribe': _this._onUnsubscribe(event); break;\r\n      }\r\n    });\r\n\r\n    _this._setOnAddChildListener(dataObjectReporter);\r\n\r\n    dataObjectReporter.onRead((event) => {\r\n      event.accept();\r\n    });\r\n\r\n    dataObjectReporter.onExecute((event) => {\r\n      switch (event.method) {\r\n        case 'addUser':\r\n          _this.addUser(event.params[0]).then(() => {\r\n            event.accept();\r\n          }).catch(function(reason) {\r\n            console.error('Reason:', reason);\r\n            event.reject(reason);\r\n          });\r\n          break;\r\n          case 'removeUser':\r\n            _this.removeUser(event.params).then(() => {\r\n              event.accept();\r\n            }).catch(function(reason) {\r\n              console.error('Reason:', reason);\r\n              event.reject(reason);\r\n            });\r\n            break;\r\n        default: event.reject('[ChatController.onExecute] Chat method execution not accepted by Reporter');\r\n          break;\r\n      }\r\n    });\r\n\r\n    _this._dataObjectReporter = dataObjectReporter;\r\n\r\n  }\r\n\r\n  get dataObjectReporter() {\r\n    let _this = this;\r\n    return _this._dataObjectReporter;\r\n  }\r\n\r\n  get messages() {\r\n\r\n    return this.controllerMode === 'reporter' ? this._dataObjectReporter._childrenObjects : this._dataObjectObserver._childrenObjects;\r\n  }\r\n\r\n  set dataObjectObserver(dataObjectObserver) {\r\n    let _this = this;\r\n\r\n    _this.controllerMode = 'observer';\r\n\r\n    _this._dataObjectObserver = dataObjectObserver;\r\n\r\n    dataObjectObserver.onChange('*', function(event) {\r\n      console.info('[ChatManager.ChatController]Observer - onChange', event);\r\n\r\n      if (event.field.includes('participants')) {\r\n        switch (event.cType) {\r\n          case 'add':\r\n            if (_this._onUserAdded) _this._onUserAdded(event);\r\n            break;\r\n\r\n          case 'remove':\r\n            if (_this._onUserRemoved) _this._onUserRemoved(event);\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (_this._onChange) _this._onChange(event);\r\n\r\n    });\r\n\r\n    _this._setOnAddChildListener(dataObjectObserver);\r\n\r\n    // let childrens = dataObjectObserver.childrens;\r\n    // Object.keys(childrens).forEach((child) => {\r\n    //   if (_this._onMessage) _this._onMessage({\r\n    //     childId: child,\r\n    //     identity: childrens[child].identity,\r\n    //     value: childrens[child].data\r\n    //   });\r\n    // })\r\n\r\n  }\r\n\r\n  get dataObjectObserver() {\r\n    let _this = this;\r\n    return _this._dataObjectObserver;\r\n  }\r\n\r\n  _setOnAddChildListener(dataObject) {\r\n\r\n    let _this = this;\r\n\r\n    dataObject.onAddChild(function(child) {\r\n      _this.child_cseq +=1;\r\n      console.info('[ChatManager.ChatController._setOnAddChildListener] new Child received: ', child);\r\n\r\n      if (_this._onMessage) _this._onMessage(child);\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get dataObject() {\r\n    return this.controllerMode === 'reporter' ? this.dataObjectReporter : this.dataObjectObserver;\r\n  }\r\n\r\n  set closeEvent(event) {\r\n    let _this = this;\r\n    _this._closeEvent = event;\r\n\r\n    if (_this._onClose) _this._onClose(event);\r\n  }\r\n\r\n  get closeEvent() {\r\n    let _this = this;\r\n    return _this._closeEvent;\r\n  }\r\n\r\n\r\n\r\n  _onSubscribe(event) {\r\n\r\n    let dataObjectReporter = this._dataObjectReporter;\r\n\r\n    event.accept();\r\n\r\n\r\n    console.log('[ChatManager.ChatController.onSubscribe] event', event, dataObjectReporter.url);\r\n    console.log('[ChatManager.ChatController.onSubscribe] New user has subscribe this object: ', dataObjectReporter.data, event.identity);\r\n\r\n    let identity = JSON.parse(JSON.stringify(event.identity));\r\n\r\n    if (identity.hasOwnProperty('assertion')) {\r\n      delete identity.assertion\r\n    }\r\n\r\n    let userInfo = {\r\n      hypertyURL: event.url,\r\n      domain: event.domain,\r\n      identity: identity\r\n    }\r\n    let userURL = event.identity.userProfile.guid;\r\n\r\n    console.log('[ChatManager.ChatController.onSubscribe]  new participant', userInfo);\r\n    if (event.identity.legacy) {\r\n     userInfo.legacy = event.identity.legacy;\r\n    }\r\n\r\n    dataObjectReporter.data.participants[userURL] = userInfo;\r\n\r\n    console.log('[ChatManager.ChatController.onSubscribe] communicationObject OBJ chatcontroller', dataObjectReporter.data.participants);\r\n    console.log('[ChatManager.ChatController.onSubscribe - onSubscription] ', userInfo);\r\n    // console.log('[ChatManager.ChatController.onSubscribe - this._onUserAdded] ', this._onUserAdded);\r\n\r\n    if (this._onUserAdded) this._onUserAdded(userInfo);\r\n  }\r\n\r\n  _onUnsubscribe(event) {\r\n    let dataObjectReporter = this._dataObjectReporter;\r\n\r\n    console.log('[ChatManager.ChatController.onUnsubscribe] event', event, dataObjectReporter.url);\r\n\r\n    let participant = event.identity.userProfile;\r\n\r\n    console.log('[ChatManager.ChatController.onUnsubscribe]  participant left', participant);\r\n    if (event.identity.legacy) {\r\n      participant.legacy = event.identity.legacy;\r\n    }\r\n\r\n    delete dataObjectReporter.data.participants[participant.userURL];\r\n\r\n    console.log('[ChatManager.ChatController.onUnsubscribe - this._onUserRemoved] ', this.onUserRemoved);\r\n    if (this._onUserRemoved) this._onUserRemoved(participant);\r\n  }\r\n\r\n  /**\r\n   * This function is used to send a file.\r\n   * @param  {string}     file                        Is the file to be sent.\r\n   * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n   */\r\n  sendFile(file) {\r\n\r\n    let _this = this;\r\n    let mode = _this.controllerMode;\r\n    let dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let identity = {\r\n        userProfile: _this.myIdentity\r\n      };\r\n\r\n      dataObject.addHypertyResource('resources', 'file',  file, identity).then(function(resourceFile) {\r\n\r\n          let identity = {\r\n              userProfile: _this.myIdentity\r\n          };\r\n          let fileSentEvt = { value : resourceFile, identity: identity, resource: resourceFile};\r\n\r\n          let reporterStatus = new discovery_RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n\r\n          // recursive function to sync with chat reporter\r\n\r\n            let share2Reporter = function(file, subscriber, evt, status) {\r\n              let statusOfReporter = status;\r\n              file.sharingStatus.then(resolve(evt)).catch((result)=>{\r\n                console.log('[ChatManager.ChatController.sendFile] share failed: ', result);\r\n\r\n                statusOfReporter.onLive( subscriber, () => {\r\n                statusOfReporter.unsubscribeLive(subscriber);\r\n                file.share(true);\r\n                share2Reporter(file, subscriber, evt, statusOfReporter);\r\n                });\r\n                  //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n              });\r\n            }\r\n\r\n            share2Reporter(resourceFile, _this._manager._hypertyURL, fileSentEvt, reporterStatus);\r\n        });\r\n    }).catch(function(reason) {\r\n      console.error('Reason:', reason);\r\n      reject(reason);\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * This function is used to send a chat message.\r\n   * @param  {string}     message                        Is the ChatMessage to be sent.\r\n   * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n   */\r\n  send(message, identity) {\r\n\r\n    let _this = this;\r\n    let mode = _this.controllerMode;\r\n    let dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n//      let _dataObjectChild;\r\n      _this.child_cseq += 1;\r\n      let msg = {\r\n\r\n/*        url: dataObject.data.url,\r\n        cseq: _this.child_cseq,\r\n        reporter: dataObject.data.reporter,\r\n        schema: dataObject.data.schema,\r\n        name: dataObject.data.name,\r\n        created : new Date().toJSON(),*/\r\n\r\n        type: 'chat',\r\n        content: message\r\n      }\r\n\r\n      let sender = identity ? identity : {\r\n        userProfile: _this.myIdentity\r\n      };\r\n\r\n\r\n      // TODO: change chatmessages to resource - chat, file\r\n      // TODO: change message to hypertyResource - https://github.com/reTHINK-project/dev-service-framework/tree/develop/docs/datamodel/data-objects/hyperty-resource\r\n      // TODO: handle with multiple resources - if the \"message\" will be different for each type of resources\r\n      dataObject.addChild(msg, sender).then(function(dataObjectChild) {\r\n        console.log('[ChatManager.ChatController][addChild - Chat Message]: ', dataObjectChild);\r\n        //resolve(dataObjectChild);\r\n\r\n        //TODO: move to separate function\r\n\r\n\r\n        let msg = {\r\n          childId: dataObjectChild._childId,\r\n          from: dataObjectChild._owner,\r\n          value: dataObjectChild.data,\r\n          type: 'create',\r\n          identity: sender\r\n        };\r\n\r\n        let reporterStatus = new discovery_RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n\r\n        // recursive function to sync with chat reporter\r\n\r\n          let share2Reporter = function(child, subscriber, msg, status) {\r\n            let statusOfReporter = status;\r\n            child.sharingStatus.then(resolve(msg)).catch((result)=>{\r\n\r\n                statusOfReporter.onLive( subscriber, () => {\r\n                  statusOfReporter.unsubscribeLive(subscriber);\r\n                  child.share(true);\r\n                  share2Reporter(child, subscriber, msg, statusOfReporter);\r\n                });\r\n                //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n            });\r\n          }\r\n\r\n          share2Reporter(dataObjectChild, _this._manager._hypertyURL, msg, reporterStatus);\r\n\r\n        }).catch(function(reason) {\r\n        console.error('Reason:', reason);\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * [onChange description]\r\n   * @param  {Function} callback [description]\r\n   * @return {[type]}            [description]\r\n   */\r\n  onChange(callback) {\r\n    let _this = this;\r\n    _this._onChange = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to receive new messages.\r\n   * @param  {Function} callback Function to handle with new messages\r\n   * @return {Communication.ChatMessage} m\r\n   */\r\n  onMessage(callback) {\r\n    let _this = this;\r\n    _this._onMessage = callback;\r\n  }\r\n\r\n  /**\r\n   * [onUserAdded description]\r\n   * @param  {Function} callback [description]\r\n   * @return {[type]}            [description]\r\n   */\r\n  onUserAdded(callback) {\r\n    let _this = this;\r\n    _this._onUserAdded = callback;\r\n  }\r\n\r\n  /**\r\n   * When the an user was removed\r\n   * @param  {Function} callback Function handle with the removed user\r\n   * @return {[type]}            [description]\r\n   */\r\n  onUserRemoved(callback) {\r\n    let _this = this;\r\n    _this._onUserRemoved = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to receive requests to close the Group Chat instance.\r\n   * @return {DeleteEvent} The DeleteEvent fired by the Syncher when the Chat is closed.\r\n   */\r\n  onClose(callback) {\r\n    let _this = this;\r\n    _this._onClose = callback;\r\n  }\r\n\r\n  onResponse(callback) {\r\n    let _this = this;\r\n    _this._onResponse = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to add / invite new user on an existing Group Chat instance.\r\n   * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n   * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n   * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n   */\r\n  addUser(users) {\r\n\r\n    let _this = this;\r\n\r\n    let haveEmptyElements = (element) => {\r\n      console.log('Element:', element.length);\r\n      return element.length !== 0;\r\n    };\r\n\r\n    let notFoundElements = (element) => {\r\n      console.log('user not found: ', element);\r\n      return !(element instanceof String);\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (users.filter(haveEmptyElements).length === 0) {\r\n        return reject('Don\\'t have users to invite');\r\n      }\r\n\r\n      console.info('[ChatManager.ChatController.addUsers ]: ', users);\r\n\r\n      /*_this.search.users(users, domains, ['comm'], ['chat'])\r\n\r\n    .then((hypertiesIDs) => {\r\n\r\n      if (hypertiesIDs.filter(notFoundElements).length === 0) {\r\n        throw 'User(s) not found';\r\n      }\r\n\r\n      let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n        return hyperty.hypertyID;\r\n      });*/\r\n\r\n      let usersDiscovery = [];\r\n      let disconnected = [];\r\n      let live = {};\r\n\r\n      users.forEach((user) => {\r\n        let userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\r\n          usersDiscovery.push(userDiscoveryPromise);\r\n        });\r\n\r\n      Promise.all(usersDiscovery).then((userDiscoveryResults) => {\r\n        console.log('[ChatManager.ChatController.addUsers] Users Discovery Results->', userDiscoveryResults);\r\n\r\n        let selectedHyperties = [];\r\n\r\n         userDiscoveryResults.forEach((userDiscoveryResult) => {\r\n\r\n           userDiscoveryResult.forEach((discovered)=>{\r\n             if (discovered.data.status === 'live'){\r\n               selectedHyperties.push(discovered.data.hypertyID);\r\n               live[discovered.data.hypertyID] = discovered;\r\n             }\r\n             else if (disconnected.length < 5) disconnected.push(discovered);\r\n           });\r\n\r\n        });\r\n\r\n        console.info('[ChatManager.ChatController]------------------------ Syncher Create ---------------------- \\n');\r\n        console.info('[ChatManager.ChatController]Selected Hyperties: !!! ', selectedHyperties);\r\n        console.info(`Have ${selectedHyperties.length} users;`);\r\n//        console.info('[ChatManager] HypertiesIDs ', hypertiesIDs);\r\n\r\n        let dataObject = _this.controllerMode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n\r\n        if (disconnected.length > 0) _this._invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObject);\r\n\r\n        dataObject.inviteObservers(selectedHyperties);\r\n\r\n        if (dataObject.invitations.length > 0) _this._invitationsHandler.processInvitations(live, dataObject);\r\n\r\n        return;\r\n\r\n        })\r\n        .then(() => {\r\n          console.info('[ChatManager.ChatController]Are invited with success ' + users.length + ' users;');\r\n          resolve(true);\r\n\r\n\r\n\r\n        }).catch((reason) => {\r\n          console.error('An error occurred when trying to invite users;\\n', reason);\r\n          reject(reason);\r\n        });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * This function is used to request the Reporter to add / invite new user on an existing Group Chat instance.\r\n   * Only Observers are allowed to use this function.\r\n   * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n   * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n   */\r\n  addUserReq(users) {\r\n\r\n    let _this = this;\r\n\r\n    //check is Observer and invoke observer.execute() with new promise\r\n    let haveEmptyElements = (element) => {\r\n      console.log('Element:', element.length);\r\n      return element.length !== 0;\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (users.filter(haveEmptyElements).length === 0) {\r\n        return reject('[ChatManager.ChatController.addUserReq] Don\\'t have users to add');\r\n      }\r\n      if (!_this.controllerMode === 'observer') {\r\n        return reject('[ChatManager.ChatController.addUserReq] only allowed to Chat Observer');\r\n\r\n      let addUser = _this.addUser(users);\r\n\r\n      if (_this._dataObjectObserver) {\r\n        addUser = _this._dataObjectObserver.execute('addUser', users);\r\n      }\r\n\r\n      addUser.then(() => {\r\n        console.info('[ChatManager.ChatController.addUserReq] Request accepted by Reporter ');\r\n        resolve(true);\r\n      }).catch((reason) => {\r\n        console.error('[ChatManager.ChatController.addUserReq] Request rejected by Reporter;\\n', reason);\r\n        reject(reason);\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n}\r\n\r\n  onInvitationResponse(callback) {\r\n    let _this = this;\r\n    _this._onInvitationResponse = callback;\r\n    _this._invitationsHandler.invitationResponse = callback;\r\n  }\r\n\r\n\r\n  /**\r\n   * This function is used to remove a user from an existing Group Chat instance.\r\n   * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n   * @return {<Promise> boolean} Promise with the status\r\n   */\r\n\r\n  /**\r\n   * This function is used to remove a user from an existing Group Chat instance.\r\n   * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n   * @param  {URL.UserURL} user       User to be removed from the Group Chat that is identified with reTHINK User URL.\r\n   * @return {<Promise> boolean}      It returns as a Promise true if successfully removed or false otherwise.\r\n   */\r\n  removeUser(user) {\r\n\r\n    // TODO: implement the removeUser;\r\n    console.log('[ChatManager.ChatController]Not yet implemented: ', user);\r\n\r\n  }\r\n\r\n  /**\r\n   * This function is used to close an existing Group Chat instance.\r\n   * Only available to Chat Group Reporters i.e. the Hyperty instance that created the Group Chat.\r\n   * @return {<Promise>Boolean} It returns as a Promise true if successfully closed or false otherwise.\r\n   */\r\n  close(del = true) {\r\n    // TODO: the dataObjectReporter.delete should be a Promise;\r\n\r\n    let _this = this;\r\n    \r\n    return new Promise(function(resolve, reject) {\r\n      \r\n      if (_this.controllerMode === 'reporter') {\r\n        // reporter\r\n        _this._invitationsHandler.cleanInvitations(_this.dataObjectReporter).then(() => {\r\n          if (!del) {\r\n            _this._manager.communicationObject.status = 'closed';\r\n              resolve(true);\r\n            }\r\n            else{\r\n\r\n              try {\r\n              \r\n                  delete _this._manager._reportersControllers[_this.dataObjectReporter.url];\r\n                _this.dataObjectReporter.delete();\r\n                resolve(true);\r\n                if (_this._onClose) _this._onClose({\r\n                  code: 200,\r\n                  desc: 'deleted',\r\n                  url: _this.dataObjectReporter.url\r\n                })\r\n              } catch (e) {\r\n                console.error(e);\r\n                reject(false);\r\n              }\r\n            }\r\n\r\n          });\r\n\r\n      } else {\r\n        // observer\r\n        if(del){\r\n          try {\r\n            delete _this._manager._observersControllers[_this.dataObjectObserver.url];\r\n            _this.dataObjectObserver.unsubscribe();\r\n            resolve(true);\r\n          } catch (e) {\r\n            console.error(e);\r\n            reject(false);\r\n          }\r\n        }\r\n        else{\r\n          // TODO: send message \r\n          resolve(true);\r\n        } \r\n        \r\n      }\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var chatManager_ChatController = (ChatController_ChatController);\r\n\n// CONCATENATED MODULE: ./src/chatManager/UserInfo.js\n\r\n\r\nclass UserInfo_UserInfo {\r\n\r\n  constructor(hypertyURL, domain, identity) {\r\n\r\n    let completeIdentity = deepClone(identity);\r\n    if (!identity.hasOwnProperty('userProfile')) {\r\n      completeIdentity['userProfile'] = identity;\r\n    }\r\n\r\n    return {\r\n      hypertyURL: hypertyURL,\r\n      domain, domain,\r\n      identity: completeIdentity\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\n// CONCATENATED MODULE: ./src/chatManager/ChatManager.js\n\r\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Service Framework\r\n//import IdentityManager from '../identityManager/IdentityManager';\r\n//import RegistrationStatus from '../discovery/RegistrationStatus';\r\n//import Discovery from '../discovery/Discovery';\r\n//import Syncher from '../syncher/Syncher';\r\n\r\n// Utils\r\n//import {divideURL} from '../utils/utils';\r\n//import Search from '../utils/Search';\r\n\r\n// Internals\r\n\r\n\r\n\r\n\r\n/**\r\n* Hyperty Group Chat Manager API (HypertyChat)\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\r\nclass ChatManager_ChatManager {\r\n\r\n  constructor(myUrl, bus, configuration, syncher, factory) {\r\n    if (!myUrl) throw new Error('[ChatManager.constructor] The myUrl is a needed parameter');\r\n    if (!bus) throw new Error('[ChatManager.constructor] The MiniBus is a needed parameter');\r\n    if (!configuration) throw new Error('[ChatManager.constructor] The configuration is a needed parameter');\r\n\r\n    let _this = this;\r\n    if (!syncher) {\r\n      syncher = factory.createSyncher(myUrl, bus, configuration);\r\n    }\r\n\r\n    _this._runtimeURL = configuration.runtimeURL;\r\n\r\n    let domain = factory.divideURL(_this._runtimeURL).domain;\r\n    let discovery = factory.createDiscovery(myUrl, configuration.runtimeURL, bus);\r\n    let identityManager = factory.createIdentityManager(myUrl, configuration.runtimeURL, bus);\r\n\r\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\r\n\r\n    _this._reportersControllers = {};\r\n    _this._observersControllers = {};\r\n\r\n    _this._myUrl = myUrl;\r\n    _this._bus = bus;\r\n    _this._syncher = syncher;\r\n    _this._domain = domain;\r\n\r\n    _this.discovery = discovery;\r\n    _this.identityManager = identityManager;\r\n    _this.currentIdentity;\r\n\r\n    _this.search = factory.createSearch(discovery, identityManager);\r\n\r\n    _this.communicationObject = communicationObject;\r\n\r\n    _this.communicationChildren = communicationChildren;\r\n\r\n    console.log('[ChatManager] Discover ', discovery);\r\n    console.log('[ChatManager] Identity Manager ', identityManager);\r\n\r\n\r\n  }\r\n\r\n  set offline(offline) {\r\n    this._offline = offline;\r\n  }\r\n\r\n  get offline() {\r\n    return this._offline ? this._offline : false;\r\n  }\r\n\r\n\r\n  processNotification(event) {\r\n    let _this = this;\r\n    console.log('[ChatManager.processNotification: ', event);\r\n\r\n    if (event.type === 'create') {\r\n\r\n      // TODO: replace the 100 for Message.Response\r\n      // event.ack(200);\r\n\r\n      if (_this._onInvitation) { _this._onInvitation(event); }\r\n    }\r\n\r\n    if (event.type === 'delete') {\r\n      // TODO: replace the 200 for Message.Response\r\n      event.ack(200);\r\n\r\n      _this._observersControllers[event.url].closeEvent = event;\r\n\r\n      delete _this._observersControllers[event.url];\r\n\r\n      _this._observersControllers.closeEvent = event;\r\n\r\n      _this.communicationObject = communicationObject;\r\n\r\n\r\n      for (let url in this._reportersControllers) {\r\n        this._reportersControllers[url].close(event);\r\n      }\r\n\r\n      for (let url in this._observersControllers) {\r\n        this._observersControllers[url].close(event);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  myIdentity(identity) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      console.info('[ChatManager.myIdentity]');\r\n      if (identity) return resolve(identity);\r\n\r\n      if (_this._myUrl.includes('hyperty://')) {\r\n        _this.identityManager.discoverUserRegistered().then((identity) => {\r\n          resolve(identity);\r\n        }).catch(function(reason) {\r\n          reject(reason);\r\n        });\r\n      } else {\r\n        _this.identityManager.discoverIdentityPerIdP().then((identity) => {\r\n          resolve(identity);\r\n        }).catch(function(reason) {\r\n          reject(reason);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function is used to create a new Group Chat providing the name and the identifiers of users to be invited.\r\n   * @param  {string}                     name  Is a string to identify the Group Chat\r\n   * @param  {array<URL.userURL>}         users Array of users to be invited to join the Group Chat. Users are identified with reTHINK User URL, like this format user://<ipddomain>/<user-identifier>\r\n   * @return {<Promise>ChatController}    A ChatController object as a Promise.\r\n   */\r\n  create(name, users, extra = {}) {\r\n\r\n    let _this = this;\r\n    let syncher = _this._syncher;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      _this.communicationObject = communicationObject;\r\n      _this.communicationObject.cseq = 1;\r\n      _this.communicationObject.startingTime = new Date().toJSON();\r\n      _this.communicationObject.status =  CommunicationStatus.OPEN;\r\n\r\n      let myIdentity;\r\n\r\n      _this.myIdentity().then((identity) => {\r\n        myIdentity = identity;\r\n        console.log('[ChatManager.create ] My Identity', identity);\r\n\r\n        // let url = _this.communicationObject.reporter;\r\n\r\n        let userInfo = new UserInfo_UserInfo(_this._myUrl, _this._domain, identity);\r\n\r\n        // Add my identity\r\n        _this.communicationObject.participants[identity.guid] = userInfo;\r\n\r\n        console.log('[ChatManager.create ] participants: ', _this.communicationObject.participants);\r\n        console.log('[ChatManager.create ] communicationObject', _this.communicationObject);\r\n        console.info('[ChatManager.create] searching ' + users);\r\n\r\n        //let usersSearch = _this.search.users(users, domains, ['comm'], ['chat']);\r\n\r\n        let usersDiscovery = [];\r\n\r\n        let disconnected = [];\r\n        let live = {};\r\n\r\n        users.forEach((user) => {\r\n          let userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\r\n          usersDiscovery.push(userDiscoveryPromise);\r\n\r\n          //if (user.user.includes('://')) mutual = false;\r\n        });\r\n\r\n        Promise.all(usersDiscovery).then((userDiscoveryResults) => {\r\n          console.log('[ChatManager.create] Users Discovery Results->', userDiscoveryResults);\r\n\r\n          let selectedHyperties = [];\r\n\r\n          userDiscoveryResults.forEach((userDiscoveryResult) => {\r\n\r\n            userDiscoveryResult.forEach((discovered)=>{\r\n              if (discovered.data.status === 'live') {\r\n                selectedHyperties.push(discovered.data.hypertyID);\r\n                live[discovered.data.hypertyID] = discovered;\r\n              } else {\r\n                // To control the number of subscriptions to disconnected devices\r\n                 if (disconnected.length < 5) {\r\n                    disconnected.push(discovered);\r\n                  }\r\n              }\r\n            });\r\n\r\n          });\r\n\r\n\r\n          /*        return usersSearch;\r\n      }).then((hypertiesIDs) => {\r\n        let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n          return hyperty.hypertyID;\r\n        }); */\r\n\r\n          console.info('[ChatManager] ---------------------- Syncher Create ---------------------- \\n');\r\n          console.info('[ChatManager] Selected Hyperties: !!! ', selectedHyperties);\r\n          console.info(`Have ${selectedHyperties.length} users;`);\r\n          let mutual = extra.mutual ? extra.mutual : true;\r\n\r\n          let input = Object.assign({resources: ['chat'], mutual: mutual}, extra);\r\n          delete input.name;\r\n\r\n          if (_this.offline) input.offline = _this.offline;\r\n\r\n          console.info('[ChatManager] input data:', input);\r\n          return syncher.create(_this._objectDescURL, selectedHyperties, _this.communicationObject, true, false, name, {}, input);\r\n        }).then(function(dataObjectReporter) {\r\n\r\n          console.info('[ChatManager] 3. Return Create Data Object Reporter', dataObjectReporter);\r\n\r\n          let chatController = new chatManager_ChatController(syncher, _this.discovery, _this._domain, _this.search, myIdentity, _this);\r\n          chatController.dataObjectReporter = dataObjectReporter;\r\n\r\n          _this._reportersControllers[dataObjectReporter.url] = chatController;\r\n\r\n          console.log('[ChatManager] chatController invitationsHandler: ',   chatController.invitationsHandler);\r\n\r\n          // process invitations to handle not received invitations\r\n          if (dataObjectReporter.invitations.length > 0) {\r\n            chatController.invitationsHandler.processInvitations(live, dataObjectReporter);\r\n          }\r\n\r\n          // If any invited User is disconnected let's wait until it is connected again\r\n          if (disconnected.length > 0) chatController.invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObjectReporter);\r\n\r\n          resolve(chatController);\r\n\r\n        }).catch(function(reason) {\r\n          reject(reason);\r\n        });\r\n\r\n      }).catch((reason) => {\r\n        console.log('[ChatManager.create] MyIdentity Error:', reason);\r\n        return reject(reason);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n   * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n   */\r\n  onInvitation(callback) {\r\n    let _this = this;\r\n    _this._onInvitation = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to join a Group Chat.\r\n   * @param  {URL.CommunicationURL} invitationURL  The Communication URL of the Group Chat to join that is provided in the invitation event\r\n   * @return {<Promise>ChatController}             It returns the ChatController object as a Promise\r\n   */\r\n  join(invitationURL, mutual = true, identity) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      let syncher = _this._syncher;\r\n      let myIdentity;\r\n\r\n      console.info('[ChatManager] ------------------------ Syncher subscribe ---------------------- \\n');\r\n      console.info('invitationURL', invitationURL);\r\n      _this.myIdentity(identity).then((identity) => {\r\n        myIdentity = identity;\r\n        let input = {\r\n          schema: _this._objectDescURL,\r\n          resource: invitationURL,\r\n          store: true,\r\n          p2p: false,\r\n          mutual: mutual,\r\n          domain_subscription: true,\r\n          identity: identity\r\n        };\r\n\r\n        if (_this.offline) input.offline = _this.offline;\r\n\r\n        return syncher.subscribe(input);\r\n\r\n      }).then(function(dataObjectObserver) {\r\n        console.info('Data Object Observer: ', dataObjectObserver);\r\n\r\n        let chatController = new chatManager_ChatController(syncher, _this.discovery, _this._domain, _this.search, myIdentity, _this);\r\n        resolve(chatController);\r\n\r\n        chatController.dataObjectObserver = dataObjectObserver;\r\n\r\n        _this._observersControllers[dataObjectObserver.url] = chatController;\r\n\r\n      }).catch(function(reason) {\r\n        reject(reason);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var chatManager_ChatManager = (ChatManager_ChatManager);\r\n\n// CONCATENATED MODULE: ./src/chatManager/Chat.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* The Group Chat API is used to control a Group Chat instance.\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\r\n\r\n//import { UserInfo } from './UserInfo';\r\n//import RegistrationStatus from '../discovery/RegistrationStatus';\r\n//import InvitationsHandler from './InvitationsHandler';\r\n\r\nclass Chat {\r\n\r\n  constructor(syncher, domain, identity, manager) {\r\n\r\n    if (!syncher) throw Error('Syncher is a necessary dependecy');\r\n//    if (!discovery) throw Error('Discover is a necessary dependecy');\r\n    if (!domain) throw Error('Domain is a necessary dependecy');\r\n//    if (!search) throw Error('Search is a necessary dependecy');\r\n\r\n    let _this = this;\r\n    _this._syncher = syncher;\r\n//    _this.discovery = discovery;\r\n//    _this.search = search;\r\n    _this.myIdentity = identity;\r\n    _this.controllerMode = 'reporter';\r\n    _this.child_cseq = 0;\r\n    _this.domain = domain;\r\n\r\n    _this._manager = manager;\r\n\r\n    const hypertyURL = syncher.owner;\r\n\r\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\r\n\r\n//    _this._invitationsHandler = new InvitationsHandler(hypertyURL);\r\n\r\n  }\r\n\r\n/*  get invitationsHandler() {\r\n    return this._invitationsHandler;\r\n  }*/\r\n\r\n  get url() {\r\n    return this.controllerMode === 'reporter' ? this.dataObjectReporter.url : this.dataObjectObserver.url;\r\n  }\r\n\r\n  set dataObjectReporter(dataObjectReporter) {\r\n\r\n    if (!dataObjectReporter) throw new Error('[ChatController] The data object reporter is necessary parameter ');\r\n    let _this = this;\r\n\r\n\r\n    _this.controllerMode = 'reporter';\r\n\r\n    // Handler to process received files\r\n\r\n    // dataObjectReporter.onResponse(function(event) {\r\n    //   console.log('[DataObjectReporter - onResponse]', event);\r\n    //   if (_this._onInvitationResponse) {\r\n    //     _this._onInvitationResponse(event);\r\n    //   }\r\n    //\r\n    // });\r\n\r\n    dataObjectReporter.onSubscription(function(event) {\r\n\r\n      switch (event.type) {\r\n        case 'subscribe': _this._onSubscribe(event); break;\r\n        case 'unsubscribe': _this._onUnsubscribe(event); break;\r\n      }\r\n    });\r\n\r\n    _this._setOnAddChildListener(dataObjectReporter);\r\n\r\n    dataObjectReporter.onRead((event) => {\r\n      event.accept();\r\n    });\r\n\r\n    dataObjectReporter.onExecute((event) => {\r\n      switch (event.method) {\r\n        case 'addUser':\r\n          _this.addUser(event.params[0]).then(() => {\r\n            event.accept();\r\n          }).catch(function(reason) {\r\n            console.error('Reason:', reason);\r\n            event.reject(reason);\r\n          });\r\n          break;\r\n          case 'removeUser':\r\n            _this.removeUser(event.params).then(() => {\r\n              event.accept();\r\n            }).catch(function(reason) {\r\n              console.error('Reason:', reason);\r\n              event.reject(reason);\r\n            });\r\n            break;\r\n        default: event.reject('[ChatController.onExecute] Chat method execution not accepted by Reporter');\r\n          break;\r\n      }\r\n    });\r\n\r\n    _this._dataObjectReporter = dataObjectReporter;\r\n\r\n  }\r\n\r\n  get dataObjectReporter() {\r\n    let _this = this;\r\n    return _this._dataObjectReporter;\r\n  }\r\n\r\n  get messages() {\r\n\r\n    return this.controllerMode === 'reporter' ? this._dataObjectReporter._childrenObjects : this._dataObjectObserver._childrenObjects;\r\n  }\r\n\r\n  set dataObjectObserver(dataObjectObserver) {\r\n    let _this = this;\r\n\r\n    _this.controllerMode = 'observer';\r\n\r\n    _this._dataObjectObserver = dataObjectObserver;\r\n\r\n    dataObjectObserver.onChange('*', function(event) {\r\n      console.info('[ChatManager.ChatController]Observer - onChange', event);\r\n\r\n      if (event.field.includes('participants')) {\r\n        switch (event.cType) {\r\n          case 'add':\r\n            if (_this._onUserAdded) _this._onUserAdded(event);\r\n            break;\r\n\r\n          case 'remove':\r\n            if (_this._onUserRemoved) _this._onUserRemoved(event);\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (_this._onChange) _this._onChange(event);\r\n\r\n    });\r\n\r\n    _this._setOnAddChildListener(dataObjectObserver);\r\n\r\n    // let childrens = dataObjectObserver.childrens;\r\n    // Object.keys(childrens).forEach((child) => {\r\n    //   if (_this._onMessage) _this._onMessage({\r\n    //     childId: child,\r\n    //     identity: childrens[child].identity,\r\n    //     value: childrens[child].data\r\n    //   });\r\n    // })\r\n\r\n  }\r\n\r\n  get dataObjectObserver() {\r\n    let _this = this;\r\n    return _this._dataObjectObserver;\r\n  }\r\n\r\n  _setOnAddChildListener(dataObject) {\r\n\r\n    let _this = this;\r\n\r\n    dataObject.onAddChild(function(child) {\r\n      _this.child_cseq +=1;\r\n      console.info('[ChatManager.ChatController._setOnAddChildListener] new Child received: ', child);\r\n\r\n      if (_this._onMessage) _this._onMessage(child);\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get dataObject() {\r\n    return this.controllerMode === 'reporter' ? this.dataObjectReporter : this.dataObjectObserver;\r\n  }\r\n\r\n  set closeEvent(event) {\r\n    let _this = this;\r\n    _this._closeEvent = event;\r\n\r\n    if (_this._onClose) _this._onClose(event);\r\n  }\r\n\r\n  get closeEvent() {\r\n    let _this = this;\r\n    return _this._closeEvent;\r\n  }\r\n\r\n\r\n\r\n  _onSubscribe(event) {\r\n\r\n    let dataObjectReporter = this._dataObjectReporter;\r\n\r\n    event.accept();\r\n\r\n\r\n    console.log('[ChatManager.ChatController.onSubscribe] event', event, dataObjectReporter.url);\r\n    console.log('[ChatManager.ChatController.onSubscribe] New user has subscribe this object: ', dataObjectReporter.data, event.identity);\r\n\r\n    let identity = JSON.parse(JSON.stringify(event.identity));\r\n\r\n    if (identity.hasOwnProperty('assertion')) {\r\n      delete identity.assertion\r\n    }\r\n\r\n    let userInfo = {\r\n      hypertyURL: event.url,\r\n      domain: event.domain,\r\n      identity: identity\r\n    }\r\n    let userURL = event.identity.userProfile.guid;\r\n\r\n    console.log('[ChatManager.ChatController.onSubscribe]  new participant', userInfo);\r\n    if (event.identity.legacy) {\r\n     userInfo.legacy = event.identity.legacy;\r\n    }\r\n\r\n    dataObjectReporter.data.participants[userURL] = userInfo;\r\n\r\n    console.log('[ChatManager.ChatController.onSubscribe] communicationObject OBJ chatcontroller', dataObjectReporter.data.participants);\r\n    console.log('[ChatManager.ChatController.onSubscribe - onSubscription] ', userInfo);\r\n    // console.log('[ChatManager.ChatController.onSubscribe - this._onUserAdded] ', this._onUserAdded);\r\n\r\n    if (this._onUserAdded) this._onUserAdded(userInfo);\r\n  }\r\n\r\n  _onUnsubscribe(event) {\r\n    let dataObjectReporter = this._dataObjectReporter;\r\n\r\n    console.log('[ChatManager.ChatController.onUnsubscribe] event', event, dataObjectReporter.url);\r\n\r\n    let participant = event.identity.userProfile;\r\n\r\n    console.log('[ChatManager.ChatController.onUnsubscribe]  participant left', participant);\r\n    if (event.identity.legacy) {\r\n      participant.legacy = event.identity.legacy;\r\n    }\r\n\r\n    delete dataObjectReporter.data.participants[participant.userURL];\r\n\r\n    console.log('[ChatManager.ChatController.onUnsubscribe - this._onUserRemoved] ', this.onUserRemoved);\r\n    if (this._onUserRemoved) this._onUserRemoved(participant);\r\n  }\r\n\r\n  /**\r\n   * This function is used to send a file.\r\n   * @param  {string}     file                        Is the file to be sent.\r\n   * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n   */\r\n  sendFile(file) {\r\n\r\n    let _this = this;\r\n    let mode = _this.controllerMode;\r\n    let dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let identity = {\r\n        userProfile: _this.myIdentity\r\n      };\r\n\r\n      dataObject.addHypertyResource('resources', 'file',  file, identity).then(function(resourceFile) {\r\n\r\n          let identity = {\r\n              userProfile: _this.myIdentity\r\n          };\r\n          let fileSentEvt = { value : resourceFile, identity: identity, resource: resourceFile};\r\n\r\n/*          let reporterStatus = new RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n\r\n          // recursive function to sync with chat reporter\r\n\r\n            let share2Reporter = function(file, subscriber, evt, status) {\r\n              let statusOfReporter = status;\r\n              file.sharingStatus.then(resolve(evt)).catch((result)=>{\r\n                console.log('[ChatManager.ChatController.sendFile] share failed: ', result);\r\n\r\n                statusOfReporter.onLive( subscriber, () => {\r\n                statusOfReporter.unsubscribeLive(subscriber);\r\n                file.share(true);\r\n                share2Reporter(file, subscriber, evt, statusOfReporter);\r\n                });\r\n                  //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n              });\r\n            }*/\r\n\r\n//            resourceFile.share(true).then(()=>{\r\n              resolve(fileSentEvt);\r\n//            });\r\n//            share2Reporter(resourceFile, _this._manager._hypertyURL, fileSentEvt, reporterStatus);\r\n        });\r\n    }).catch(function(reason) {\r\n      console.error('Reason:', reason);\r\n      reject(reason);\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * This function is used to send a chat message.\r\n   * @param  {string}     message                        Is the ChatMessage to be sent.\r\n   * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n   */\r\n  send(message, identity) {\r\n\r\n    let _this = this;\r\n    let mode = _this.controllerMode;\r\n    let dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n//      let _dataObjectChild;\r\n      _this.child_cseq += 1;\r\n      let msg = {\r\n\r\n/*        url: dataObject.data.url,\r\n        cseq: _this.child_cseq,\r\n        reporter: dataObject.data.reporter,\r\n        schema: dataObject.data.schema,\r\n        name: dataObject.data.name,\r\n        created : new Date().toJSON(),*/\r\n\r\n        type: 'chat',\r\n        content: message\r\n      }\r\n\r\n      let sender = identity ? identity : {\r\n        userProfile: _this.myIdentity\r\n      };\r\n\r\n      let input = {};\r\n      input.anonymous = true;\r\n\r\n\r\n      // TODO: change chatmessages to resource - chat, file\r\n      // TODO: change message to hypertyResource - https://github.com/reTHINK-project/dev-service-framework/tree/develop/docs/datamodel/data-objects/hyperty-resource\r\n      // TODO: handle with multiple resources - if the \"message\" will be different for each type of resources\r\n      dataObject.addChild(msg, sender, input).then(function(dataObjectChild) {\r\n        console.log('[ChatManager.ChatController][addChild - Chat Message]: ', dataObjectChild);\r\n        //resolve(dataObjectChild);\r\n\r\n        //TODO: move to separate function\r\n\r\n\r\n        let msg = {\r\n          childId: dataObjectChild._childId,\r\n          from: dataObjectChild._owner,\r\n          value: dataObjectChild.data,\r\n          type: 'create',\r\n          identity: sender\r\n        };\r\n\r\n/*        let reporterStatus = new RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n\r\n        // recursive function to sync with chat reporter\r\n\r\n          let share2Reporter = function(child, subscriber, msg, status) {\r\n            let statusOfReporter = status;\r\n            child.sharingStatus.then(resolve(msg)).catch((result)=>{\r\n\r\n                statusOfReporter.onLive( subscriber, () => {\r\n                  statusOfReporter.unsubscribeLive(subscriber);\r\n                  child.share(true);\r\n                  share2Reporter(child, subscriber, msg, statusOfReporter);\r\n                });\r\n                //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n            });\r\n          }*/\r\n\r\n//          share2Reporter(dataObjectChild, _this._manager._hypertyURL, msg, reporterStatus);\r\n//        dataObjectChild.share(true);\r\n          resolve(msg);\r\n\r\n\r\n        }).catch(function(reason) {\r\n        console.error('Reason:', reason);\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * [onChange description]\r\n   * @param  {Function} callback [description]\r\n   * @return {[type]}            [description]\r\n   */\r\n  onChange(callback) {\r\n    let _this = this;\r\n    _this._onChange = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to receive new messages.\r\n   * @param  {Function} callback Function to handle with new messages\r\n   * @return {Communication.ChatMessage} m\r\n   */\r\n  onMessage(callback) {\r\n    let _this = this;\r\n    _this._onMessage = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to receive typing events.\r\n   * @param  {Function} callback Function to handle typing event\r\n   */\r\n\r\n  onTyping(callback) {\r\n      if (this._dataObjectReporter) this._dataObjectReporter.onEvent((event)=>{\r\n        if (event.value === 'typing') {\r\n          callback();\r\n        }\r\n      });\r\n      else this._dataObjectObserver.onEvent((event)=>{\r\n        if (event.value === 'typing') {\r\n          callback();\r\n        } \r\n      });\r\n  }\r\n\r\n  /**\r\n   * This function is used to trigger typing events.\r\n   */\r\n\r\n  typing() {\r\n      if (this._dataObjectReporter) this._dataObjectReporter.sendEvent('typing');\r\n      else this._dataObjectObserver.sendEvent('typing');\r\n  }\r\n\r\n\r\n  /**\r\n   * [onUserAdded description]\r\n   * @param  {Function} callback [description]\r\n   * @return {[type]}            [description]\r\n   */\r\n  onUserAdded(callback) {\r\n    let _this = this;\r\n    _this._onUserAdded = callback;\r\n  }\r\n\r\n  /**\r\n   * When the an user was removed\r\n   * @param  {Function} callback Function handle with the removed user\r\n   * @return {[type]}            [description]\r\n   */\r\n  onUserRemoved(callback) {\r\n    let _this = this;\r\n    _this._onUserRemoved = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to receive requests to close the Group Chat instance.\r\n   * @return {DeleteEvent} The DeleteEvent fired by the Syncher when the Chat is closed.\r\n   */\r\n  onClose(callback) {\r\n    let _this = this;\r\n    _this._onClose = callback;\r\n  }\r\n\r\n  onResponse(callback) {\r\n    let _this = this;\r\n    _this._onResponse = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to add / invite new user on an existing Group Chat instance.\r\n   * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n   * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n   * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n   */\r\n/*  addUser(users) {\r\n\r\n    let _this = this;\r\n\r\n    let haveEmptyElements = (element) => {\r\n      console.log('Element:', element.length);\r\n      return element.length !== 0;\r\n    };\r\n\r\n    let notFoundElements = (element) => {\r\n      console.log('user not found: ', element);\r\n      return !(element instanceof String);\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (users.filter(haveEmptyElements).length === 0) {\r\n        return reject('Don\\'t have users to invite');\r\n      }\r\n\r\n      console.info('[ChatManager.ChatController.addUsers ]: ', users);\r\n\r\n      /*_this.search.users(users, domains, ['comm'], ['chat'])\r\n\r\n    .then((hypertiesIDs) => {\r\n\r\n      if (hypertiesIDs.filter(notFoundElements).length === 0) {\r\n        throw 'User(s) not found';\r\n      }\r\n\r\n      let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n        return hyperty.hypertyID;\r\n      });*/\r\n\r\n/*      let usersDiscovery = [];\r\n      let disconnected = [];\r\n      let live = {};\r\n\r\n      users.forEach((user) => {\r\n        let userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\r\n          usersDiscovery.push(userDiscoveryPromise);\r\n        });\r\n\r\n      Promise.all(usersDiscovery).then((userDiscoveryResults) => {\r\n        console.log('[ChatManager.ChatController.addUsers] Users Discovery Results->', userDiscoveryResults);\r\n\r\n        let selectedHyperties = [];\r\n\r\n         userDiscoveryResults.forEach((userDiscoveryResult) => {\r\n\r\n           userDiscoveryResult.forEach((discovered)=>{\r\n             if (discovered.data.status === 'live'){\r\n               selectedHyperties.push(discovered.data.hypertyID);\r\n               live[discovered.data.hypertyID] = discovered;\r\n             }\r\n             else if (disconnected.length < 5) disconnected.push(discovered);\r\n           });\r\n\r\n        });\r\n\r\n        console.info('[ChatManager.ChatController]------------------------ Syncher Create ---------------------- \\n');\r\n        console.info('[ChatManager.ChatController]Selected Hyperties: !!! ', selectedHyperties);\r\n        console.info(`Have ${selectedHyperties.length} users;`);\r\n//        console.info('[ChatManager] HypertiesIDs ', hypertiesIDs);\r\n\r\n        let dataObject = _this.controllerMode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n\r\n        if (disconnected.length > 0) _this._invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObject);\r\n\r\n        dataObject.inviteObservers(selectedHyperties);\r\n\r\n        if (dataObject.invitations.length > 0) _this._invitationsHandler.processInvitations(live, dataObject);\r\n\r\n        return;\r\n\r\n        })\r\n        .then(() => {\r\n          console.info('[ChatManager.ChatController]Are invited with success ' + users.length + ' users;');\r\n          resolve(true);\r\n\r\n\r\n\r\n        }).catch((reason) => {\r\n          console.error('An error occurred when trying to invite users;\\n', reason);\r\n          reject(reason);\r\n        });\r\n\r\n    });\r\n\r\n  }*/\r\n\r\n  /**\r\n   * This function is used to request the Reporter to add / invite new user on an existing Group Chat instance.\r\n   * Only Observers are allowed to use this function.\r\n   * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n   * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n   */\r\n/*  addUserReq(users) {\r\n\r\n    let _this = this;\r\n\r\n    //check is Observer and invoke observer.execute() with new promise\r\n    let haveEmptyElements = (element) => {\r\n      console.log('Element:', element.length);\r\n      return element.length !== 0;\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (users.filter(haveEmptyElements).length === 0) {\r\n        return reject('[ChatManager.ChatController.addUserReq] Don\\'t have users to add');\r\n      }\r\n      if (!_this.controllerMode === 'observer') {\r\n        return reject('[ChatManager.ChatController.addUserReq] only allowed to Chat Observer');\r\n\r\n      let addUser = _this.addUser(users);\r\n\r\n      if (_this._dataObjectObserver) {\r\n        addUser = _this._dataObjectObserver.execute('addUser', users);\r\n      }\r\n\r\n      addUser.then(() => {\r\n        console.info('[ChatManager.ChatController.addUserReq] Request accepted by Reporter ');\r\n        resolve(true);\r\n      }).catch((reason) => {\r\n        console.error('[ChatManager.ChatController.addUserReq] Request rejected by Reporter;\\n', reason);\r\n        reject(reason);\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n}*/\r\n\r\n  onInvitationResponse(callback) {\r\n    let _this = this;\r\n    _this._onInvitationResponse = callback;\r\n//    _this._invitationsHandler.invitationResponse = callback;\r\n  }\r\n\r\n\r\n  /**\r\n   * This function is used to remove a user from an existing Group Chat instance.\r\n   * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n   * @return {<Promise> boolean} Promise with the status\r\n   */\r\n\r\n  /**\r\n   * This function is used to remove a user from an existing Group Chat instance.\r\n   * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n   * @param  {URL.UserURL} user       User to be removed from the Group Chat that is identified with reTHINK User URL.\r\n   * @return {<Promise> boolean}      It returns as a Promise true if successfully removed or false otherwise.\r\n   */\r\n  removeUser(user) {\r\n\r\n    // TODO: implement the removeUser;\r\n    console.log('[ChatManager.ChatController]Not yet implemented: ', user);\r\n\r\n  }\r\n\r\n  /**\r\n   * This function is used to close an existing Group Chat instance.\r\n   * Only available to Chat Group Reporters i.e. the Hyperty instance that created the Group Chat.\r\n   * @return {<Promise>Boolean} It returns as a Promise true if successfully closed or false otherwise.\r\n   */\r\n  close(del = true) {\r\n    // TODO: the dataObjectReporter.delete should be a Promise;\r\n\r\n    let _this = this;\r\n    \r\n    return new Promise(function(resolve, reject) {\r\n      \r\n      if (_this.controllerMode === 'reporter') {\r\n        // reporter\r\n//        _this._invitationsHandler.cleanInvitations(_this.dataObjectReporter).then(() => {\r\n          if (!del) {\r\n            _this._manager.communicationObject.status = 'closed';\r\n              resolve(true);\r\n            }\r\n            else{\r\n\r\n              try {\r\n              \r\n                  delete _this._manager._reportersControllers[_this.dataObjectReporter.url];\r\n                _this.dataObjectReporter.delete();\r\n                resolve(true);\r\n                if (_this._onClose) _this._onClose({\r\n                  code: 200,\r\n                  desc: 'deleted',\r\n                  url: _this.dataObjectReporter.url\r\n                })\r\n              } catch (e) {\r\n                console.error(e);\r\n                reject(false);\r\n              }\r\n            }\r\n\r\n//          });\r\n\r\n      } else {\r\n        // observer\r\n        if(del){\r\n          try {\r\n            delete _this._manager._observersControllers[_this.dataObjectObserver.url];\r\n            _this.dataObjectObserver.unsubscribe();\r\n            resolve(true);\r\n          } catch (e) {\r\n            console.error(e);\r\n            reject(false);\r\n          }\r\n        }\r\n        else{\r\n          // TODO: send message \r\n          resolve(true);\r\n        } \r\n        \r\n      }\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var chatManager_Chat = (Chat);\r\n\n// CONCATENATED MODULE: ./src/chatManager/SimpleChatManager.js\n\r\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Service Framework\r\n//import IdentityManager from '../identityManager/IdentityManager';\r\n//import RegistrationStatus from '../discovery/RegistrationStatus';\r\n//import Discovery from '../discovery/Discovery';\r\n//import Syncher from '../syncher/Syncher';\r\n\r\n// Utils\r\n//import {divideURL} from '../utils/utils';\r\n//import Search from '../utils/Search';\r\n\r\n// Internals\r\n\r\n\r\n\r\n\r\n/**\r\n* Hyperty Simple Group Chat Manager API\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\r\nclass SimpleChatManager_SimpleChatManager {\r\n\r\n  constructor(myUrl, bus, configuration, syncher, factory) {\r\n    if (!myUrl) throw new Error('[SimpleChatManager.constructor] The myUrl is a needed parameter');\r\n    if (!bus) throw new Error('[SimpleChatManager.constructor] The MiniBus is a needed parameter');\r\n    if (!configuration) throw new Error('[SimpleChatManager.constructor] The configuration is a needed parameter');\r\n\r\n    let _this = this;\r\n    if (!syncher) {\r\n      syncher = factory.createSyncher(myUrl, bus, configuration);\r\n    }\r\n\r\n    _this._runtimeURL = configuration.runtimeURL;\r\n\r\n    let domain = factory.divideURL(_this._runtimeURL).domain;\r\n//    let discovery = factory.createDiscovery(myUrl, configuration.runtimeURL, bus);\r\n    let identityManager = factory.createIdentityManager(myUrl, configuration.runtimeURL, bus);\r\n\r\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\r\n\r\n    _this._reportersControllers = {};\r\n    _this._observersControllers = {};\r\n\r\n    _this._myUrl = myUrl;\r\n    _this._bus = bus;\r\n    _this._syncher = syncher;\r\n    _this._domain = domain;\r\n    _this._defaultStubTriggered = false;\r\n\r\n//    _this.discovery = discovery;\r\n    _this.identityManager = identityManager;\r\n    _this.currentIdentity;\r\n\r\n//    _this.search = factory.createSearch(discovery, identityManager);\r\n\r\n    _this.communicationObject = communicationObject;\r\n\r\n    _this.communicationChildren = communicationChildren;\r\n\r\n//    console.log('[SimpleChatManager] Discover ', discovery);\r\n    console.log('[SimpleChatManager] Identity Manager ', identityManager);\r\n\r\n\r\n  }\r\n\r\n  set offline(offline) {\r\n    this._offline = offline;\r\n  }\r\n\r\n  get offline() {\r\n    return this._offline ? this._offline : false;\r\n  }\r\n\r\n  set backup(backup) {\r\n    this._backup = backup;\r\n  }\r\n\r\n  get backup() {\r\n    return this._backup ? this._backup : false;\r\n  }\r\n\r\n  processNotification(event) {\r\n    let _this = this;\r\n    console.log('[SimpleChatManager.processNotification: ', event);\r\n\r\n    if (event.type === 'create') {\r\n\r\n      // TODO: replace the 100 for Message.Response\r\n      // event.ack(200);\r\n\r\n      if (_this._onInvitation) { _this._onInvitation(event); }\r\n    }\r\n\r\n    if (event.type === 'delete') {\r\n      // TODO: replace the 200 for Message.Response\r\n      event.ack(200);\r\n\r\n      if (_this._onNotification) { _this._onNotification(event); }\r\n\r\n      if ( _this._observersControllers[event.url]){\r\n        _this._observersControllers[event.url].closeEvent = event;\r\n\r\n        delete _this._observersControllers[event.url];\r\n\r\n        _this._observersControllers.closeEvent = event;\r\n\r\n        _this.communicationObject = communicationObject;\r\n\r\n      }\r\n\r\n\r\n/*\r\n      for (let url in this._reportersControllers) {\r\n        this._reportersControllers[url].close(event);\r\n      }\r\n\r\n      for (let url in this._observersControllers) {\r\n        this._observersControllers[url].close(event);\r\n      }*/\r\n\r\n    }\r\n  }\r\n\r\n  myIdentity(identity) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      console.info('[SimpleChatManager.myIdentity]');\r\n      if (identity) return resolve(identity);\r\n\r\n      if (_this._myUrl.includes('hyperty://')) {\r\n        _this.identityManager.discoverUserRegistered().then((identity) => {\r\n          _this.currentIdentity = identity;\r\n          resolve(identity);\r\n        }).catch(function(reason) {\r\n          reject(reason);\r\n        });\r\n      } else {\r\n        _this.identityManager.discoverIdentityPerIdP().then((identity) => {\r\n          _this.currentIdentity = identity;\r\n          resolve(identity);\r\n        }).catch(function(reason) {\r\n          reject(reason);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function is used to create a new Group Chat providing the name and the identifiers of users to be invited.\r\n   * @param  {string}                     name  Is a string to identify the Group Chat\r\n   * @param  {array<URL.HypertyURL>}         hyperties Array of hyperties to be invited to join the Group Chat. Users are identified with reTHINK User URL, like this format user://<ipddomain>/<user-identifier>\r\n   * @return {<Promise>ChatController}    A ChatController object as a Promise.\r\n   */\r\n  create(name, hyperties, extra = {}) {\r\n\r\n    let _this = this;\r\n    let syncher = _this._syncher;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      _this.communicationObject = communicationObject;\r\n      _this.communicationObject.cseq = 1;\r\n      _this.communicationObject.startingTime = new Date().toJSON();\r\n      _this.communicationObject.status =  CommunicationStatus.OPEN;\r\n\r\n      let myIdentity;\r\n\r\n      _this.myIdentity().then((identity) => {\r\n        myIdentity = identity;\r\n        console.log('[SimpleChatManager.create ] My Identity', identity);\r\n\r\n        // let url = _this.communicationObject.reporter;\r\n\r\n        let userInfo = new UserInfo_UserInfo(_this._myUrl, _this._domain, identity);\r\n\r\n        // Add my identity\r\n        _this.communicationObject.participants[identity.guid] = userInfo;\r\n\r\n        console.log('[SimpleChatManager.create ] participants: ', _this.communicationObject.participants);\r\n        console.log('[SimpleChatManager.create ] communicationObject', _this.communicationObject);\r\n\r\n\r\n          console.info('[SimpleChatManager] ---------------------- Syncher Create ---------------------- \\n');\r\n          console.info('[SimpleChatManager] Selected Hyperties: !!! ', hyperties);\r\n//          console.info(`Have ${hyperties.length} users;`);\r\n          let mutual = extra.mutual ? extra.mutual : true;\r\n\r\n          let input = Object.assign({resources: ['chat'], mutual: mutual}, extra);\r\n          delete input.name;\r\n\r\n          if (_this.offline) input.offline = _this.offline;\r\n          if (_this.backup) input.backup = _this.backup;\r\n\r\n          console.log('[SimpleChatManager] input data:', input);\r\n          return syncher.create(_this._objectDescURL, hyperties, _this.communicationObject, true, false, name, {}, input);\r\n        }).then(function(dataObjectReporter) {\r\n\r\n          console.info('[SimpleChatManager] 3. Return Create Data Object Reporter', dataObjectReporter);\r\n\r\n          let chat = new chatManager_Chat(syncher, _this._domain, myIdentity, _this);\r\n          chat.dataObjectReporter = dataObjectReporter;\r\n\r\n          _this._reportersControllers[dataObjectReporter.url] = chat;\r\n\r\n//          console.log('[SimpleChatManager] chat invitationsHandler: ',   chat.invitationsHandler);\r\n\r\n          // process invitations to handle not received invitations\r\n/*          if (dataObjectReporter.invitations.length > 0) {\r\n            chat.invitationsHandler.processInvitations(live, dataObjectReporter);\r\n          }\r\n\r\n          // If any invited User is disconnected let's wait until it is connected again\r\n          if (disconnected.length > 0) chat.invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObjectReporter);\r\n*/\r\n          resolve(chat);\r\n\r\n        }).catch(function(reason) {\r\n          reject(reason);\r\n        });\r\n\r\n      }).catch((reason) => {\r\n        console.log('[SimpleChatManager.create] MyIdentity Error:', reason);\r\n        return reject(reason);\r\n      });\r\n//    });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n   * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n   */\r\n  onInvitation(callback) {\r\n    let _this = this;\r\n    _this._onInvitation = callback;\r\n\r\n    _this._triggerDefaultStubDeployment();\r\n  }\r\n\r\n  // send message to trigger domain default stub to ensure incoming messages are received\r\n\r\n  _triggerDefaultStubDeployment(){\r\n    let pingMessage = { from: this._myUrl, to: this._domain, type: 'execute'  };\r\n    if (!this._defaultStubTriggered) this._bus.postMessage(pingMessage);\r\n    this._defaultStubTriggered = true;\r\n  }\r\n\r\n  /**\r\n   * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n   * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n   */\r\n  onNotification(callback) {\r\n    let _this = this;\r\n    _this._onNotification = callback;\r\n  }\r\n\r\n  /**\r\n   * This function is used to join a Group Chat.\r\n   * @param  {URL.CommunicationURL} invitationURL  The Communication URL of the Group Chat to join that is provided in the invitation event\r\n   * @return {<Promise>ChatController}             It returns the ChatController object as a Promise\r\n   */\r\n  join(invitationURL, mutual = false, identity) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      let syncher = _this._syncher;\r\n      let myIdentity;\r\n\r\n      console.info('[SimpleChatManager] ------------------------ Syncher subscribe ---------------------- \\n');\r\n      console.info('invitationURL', invitationURL);\r\n      _this.myIdentity(identity).then((identity) => {\r\n        myIdentity = identity;\r\n        let input = {\r\n          schema: _this._objectDescURL,\r\n          resource: invitationURL,\r\n          store: true,\r\n          p2p: false,\r\n          mutual: mutual,\r\n          domain_subscription: true,\r\n          identity: identity\r\n        };\r\n\r\n        if (_this.offline) input.offline = _this.offline;\r\n\r\n        return syncher.subscribe(input);\r\n\r\n      }).then(function(dataObjectObserver) {\r\n        console.info('Data Object Observer: ', dataObjectObserver);\r\n\r\n        let chat = new chatManager_Chat(syncher, _this._domain, myIdentity, _this);\r\n        resolve(chat);\r\n\r\n        chat.dataObjectObserver = dataObjectObserver;\r\n\r\n        _this._observersControllers[dataObjectObserver.url] = chat;\r\n\r\n      }).catch(function(reason) {\r\n        reject(reason);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var chatManager_SimpleChatManager = (SimpleChatManager_SimpleChatManager);\r\n\n// CONCATENATED MODULE: ./src/sandbox/SandboxFactory.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Internal component to instantiate framework functionalities.\r\n */\r\nclass SandboxFactory_SandboxFactory {\r\n  /* private\r\n  _components: <url: instance>\r\n  */\r\n\r\n  constructor(bus) {\r\n    let _this = this;\r\n    _this._bus = bus;\r\n    _this._divideURL = divideURL;\r\n\r\n  }\r\n\r\n  createSyncher(owner, bus, config) { \r\n    return new syncher_Syncher(owner, bus, config);\r\n   }\r\n\r\n   createIdentityManager(hypertyURL, runtimeURL, bus) { \r\n    let _this = this;\r\n    return new identity_IdentityManager(hypertyURL, runtimeURL, bus);\r\n   }\r\n\r\n   createDiscovery(hypertyURL, runtimeURL, bus) { \r\n    let _this = this;\r\n    return new discovery_Discovery(hypertyURL, runtimeURL, bus);\r\n   }\r\n\r\n   createSearch(discovery, identityManager) { \r\n    let _this = this;\r\n    return new utils_Search(discovery, identityManager);\r\n   }\r\n\r\n   createContextObserver(hypertyURL, bus, config, schemes) { \r\n    return new contextManager_ContextObserver(hypertyURL, bus, config, schemes, this);\r\n   }\r\n\r\n   createContextReporter(hypertyURL, bus, config) { \r\n    let _this = this;\r\n    return new contextManager_ContextReporter(hypertyURL, bus, config, this);\r\n   }\r\n\r\n   createNotificationHandler(bus) { \r\n    let _this = this;\r\n    return new syncher_NotificationHandler(bus);\r\n   }\r\n\r\n   createMessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile) { \r\n    return new identity_MessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile);\r\n   }\r\n\r\n   createChatManager(hypertyURL, bus, configuration, syncher) { \r\n    return new chatManager_ChatManager(hypertyURL, bus, configuration, syncher, this);\r\n   }\r\n\r\n   createChatController(syncher, discovery, domain, search, identity, manager) { \r\n    return new chatManager_ChatController(syncher, discovery, domain, search, identity, manager);\r\n   }\r\n\r\n   createSimpleChatManager(hypertyURL, bus, configuration, syncher) { \r\n    return new chatManager_SimpleChatManager(hypertyURL, bus, configuration, syncher, this);\r\n   }\r\n\r\n   createChat(syncher, domain, identity, manager) { \r\n    return new chatManager_Chat(syncher, domain, identity, manager);\r\n   }\r\n   get divideURL(){\r\n     return this._divideURL;\r\n   }\r\n\r\n   createRegistrationStatus(observer, runtimeURL, chatUrl, bus) {\r\n    return new discovery_RegistrationStatus(observer, runtimeURL, chatUrl, bus);\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n/* harmony default export */ var sandbox_SandboxFactory = (SandboxFactory_SandboxFactory);\r\n\n// CONCATENATED MODULE: ./src/sandbox/SandboxRegistry.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Base class to implement internal deploy manager of components.\r\n */\r\n\r\n\r\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Internal component registry of all sandboxes.\r\n * Process internal request's for component deploy.\r\n */\r\nclass SandboxRegistry_SandboxRegistry {\r\n  /* private\r\n  _components: <url: instance>\r\n  */\r\n\r\n  constructor(bus) {\r\n    let _this = this;\r\n\r\n    _this._bus = bus;\r\n    _this._factory = new sandbox_SandboxFactory(bus);\r\n    _this._components = {};\r\n\r\n    bus.addListener(SandboxRegistry_SandboxRegistry.InternalDeployAddress, (msg) => {\r\n      console.log('SandboxRegistry-RCV: ', msg);\r\n      // let responseMsg = {\r\n      //   id: msg.id, type: 'response', from: SandboxRegistry.InternalDeployAddress, to: SandboxRegistry.ExternalDeployAddress\r\n      // };\r\n\r\n      switch (msg.type) {\r\n        case 'create': _this._onDeploy(msg); break;\r\n        case 'delete': _this._onRemove(msg); break;\r\n      }\r\n    });\r\n  }\r\n\r\n  get components() { return this._components; }\r\n\r\n  _responseMsg(msg, code, value) {\r\n\r\n    let _this = this;\r\n\r\n    // let messageFactory = _this.messageFactory;\r\n\r\n    //FLOW-OUT: generic response message to external Sandbox (deploy and un-deploy responses)\r\n    let responseMsg = {\r\n      id: msg.id, type: 'response', from: SandboxRegistry_SandboxRegistry.InternalDeployAddress, to: SandboxRegistry_SandboxRegistry.ExternalDeployAddress\r\n    };\r\n\r\n    // Chanege the origin message, because the response;\r\n    // msg.from = SandboxRegistry.InternalDeployAddress;\r\n    // msg.to = SandboxRegistry.ExternalDeployAddress;\r\n\r\n    let body = {};\r\n    if (code) body.code = code;\r\n    if (value) body.desc = value;\r\n\r\n    responseMsg.body = body;\r\n\r\n    // return messageFactory.createResponse(msg, code, value);\r\n    return responseMsg;\r\n  }\r\n\r\n  //FLOW-IN: message from the runtime core Sandbox -> deployComponent\r\n  _onDeploy(msg) {\r\n    let _this = this;\r\n    let config = msg.body.config;\r\n    let componentURL = msg.body.url;\r\n    let sourceCode = msg.body.sourceCode;\r\n    let responseCode;\r\n    let responseDesc;\r\n\r\n    if (!_this._components.hasOwnProperty(componentURL)) {\r\n      try {\r\n      console.log('SandboxRegistry-onDeploy: ', msg);\r\n      _this._components[componentURL] = _this._create(componentURL, sourceCode, config, _this._factory );\r\n        responseCode = 200;\r\n      } catch (error) {\r\n        responseCode = 500;\r\n        responseDesc = error;\r\n      }\r\n    } else {\r\n      responseCode = 500;\r\n      responseDesc = 'Instance ' + componentURL + ' already exist!';\r\n    }\r\n\r\n    let responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\r\n    _this._bus.postMessage(responseMsg);\r\n  }\r\n\r\n  //FLOW-IN: message from the runtime core Sandbox -> removeComponent\r\n  _onRemove(msg) {\r\n    let _this = this;\r\n    let componentURL = msg.body.url;\r\n    let responseCode;\r\n    let responseDesc;\r\n\r\n    if (_this._components.hasOwnProperty(componentURL)) {\r\n      //remove component from the pool and all listeners\r\n      delete _this._components[componentURL];\r\n      _this._bus.removeAllListenersOf(componentURL);\r\n      responseCode = 200;\r\n    } else {\r\n      responseCode = 500;\r\n      responseDesc = 'Instance ' + componentURL + ' doesn\\'t exist!';\r\n    }\r\n\r\n    let responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\r\n\r\n    _this._bus.postMessage(responseMsg);\r\n  }\r\n\r\n  /**\r\n   * This method should be implemented by the internal sandbox code.\r\n   * @param  {ComponentURL} url URL used for the instance\r\n   * @param  {string} sourceCode Code of the component\r\n   * @param  {Config} config Configuration parameters\r\n   * @return {Object} Returns instance of the component or throw an error \"throw 'error message'\"\r\n   */\r\n  _create(url, sourceCode, config, factory) {\r\n    //implementation specific\r\n    /* example code:\r\n      eval(sourceCode);\r\n      return activate(url, _this._bus, config);\r\n    */\r\n  }\r\n}\r\n\r\nSandboxRegistry_SandboxRegistry.ExternalDeployAddress = 'hyperty-runtime://sandbox/external';\r\nSandboxRegistry_SandboxRegistry.InternalDeployAddress = 'hyperty-runtime://sandbox/internal';\r\n\r\n/* harmony default export */ var sandbox_SandboxRegistry = (SandboxRegistry_SandboxRegistry);\r\n\n// CONCATENATED MODULE: ./src/bus/Bus.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log system\r\n\r\nlet Bus_log = loglevel[\"getLogger\"]('Bus');\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.\r\n* Components that need a message system should receive this class as a dependency or extend it.\r\n* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener\r\n*/\r\nclass Bus {\r\n  /* private\r\n  _msgId: number;\r\n  _subscriptions: <url: MsgListener[]>\r\n\r\n  _responseTimeOut: number\r\n  _responseCallbacks: <url+id: (msg) => void>\r\n\r\n  */\r\n\r\n  constructor() {\r\n    let _this = this;\r\n    _this._msgId = 0;\r\n    _this._subscriptions = {};\r\n\r\n    _this._responseTimeOut = 15000; //default to 3s\r\n    _this._responseCallbacks = {};\r\n\r\n    _this._registerExternalListener();\r\n  }\r\n\r\n  /**\r\n  * Register listener to receive message when \"msg.to === url\".\r\n  * Special url \"*\" for default listener is accepted to intercept all messages.\r\n  * @param {URL} url Address to intercept, tha is in the message \"to\"\r\n  * @param {Listener} listener listener\r\n  * @return {MsgListener} instance of MsgListener\r\n  */\r\n  addListener(url, listener) {\r\n    let _this = this;\r\n\r\n    let item = new MsgListener(_this._subscriptions, url, listener);\r\n    let itemList = _this._subscriptions[url];\r\n    if (!itemList) {\r\n      itemList = [];\r\n      _this._subscriptions[url] = itemList;\r\n    }\r\n\r\n    itemList.push(item);\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Manually add a response listener. Only one listener per message ID should exist.\r\n   * ATENTION, there is no timeout for this listener.\r\n   * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.\r\n   * @param {URL} url Origin address of the message sent, \"msg.from\".\r\n   * @param {number} msgId Message ID that is returned from the postMessage.\r\n   * @param {Function} responseListener Callback function for the response\r\n   */\r\n  addResponseListener(url, msgId, responseListener) {\r\n    this._responseCallbacks[url + msgId] = responseListener;\r\n  }\r\n\r\n  /**\r\n   * Remove the response listener.\r\n   * @param {URL} url Origin address of the message sent, \"msg.from\".\r\n   * @param {number} msgId  Message ID that is returned from the postMessage\r\n   */\r\n  removeResponseListener(url, msgId) {\r\n    delete this._responseCallbacks[url + msgId];\r\n  }\r\n\r\n  /**\r\n   * Remove all existent listeners for the URL\r\n   * @param  {URL} url Address registered\r\n   */\r\n  removeAllListenersOf(url) {\r\n    delete this._subscriptions[url];\r\n  }\r\n\r\n  /**\r\n   * Helper method to bind listeners (in both directions) into other MiniBus target.\r\n   * @param  {URL} outUrl Outbound URL, register listener for url in direction \"this -> target\"\r\n   * @param  {URL} inUrl Inbound URL, register listener for url in direction \"target -> this\"\r\n   * @param  {MiniBus} target The other target MiniBus\r\n   * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.\r\n   */\r\n  bind(outUrl, inUrl, target) {\r\n    let _this = this;\r\n\r\n    let thisListn = _this.addListener(outUrl, (msg) => {\r\n      target.postMessage(msg);\r\n    });\r\n\r\n    let targetListn = target.addListener(inUrl, (msg) => {\r\n      _this.postMessage(msg);\r\n    });\r\n\r\n    return {\r\n      thisListener: thisListn,\r\n      targetListener: targetListn,\r\n      unbind: () => {\r\n        this.thisListener.remove();\r\n        this.targetListener.remove();\r\n      }\r\n    };\r\n  }\r\n\r\n  //publish on default listeners\r\n  _publishOnDefault(msg) {\r\n    //is there any \"*\" (default) listeners?\r\n    let itemList = this._subscriptions['*'];\r\n    if (itemList) {\r\n      this._publishOn(itemList, msg);\r\n    }\r\n  }\r\n\r\n  //publish on a subscription list.\r\n  _publishOn(itemList, msg) {\r\n    itemList.forEach((sub) => {\r\n      sub._callback(msg);\r\n    });\r\n  }\r\n\r\n  _responseCallback(inMsg, responseCallback, timeout = true) {\r\n    let _this = this;\r\n\r\n    //automatic management of response handlers\r\n    if (responseCallback) {\r\n      let responseId = inMsg.from + inMsg.id;\r\n      _this._responseCallbacks[responseId] = responseCallback;\r\n\r\n      if (timeout) {\r\n        setTimeout(() => {\r\n          let responseFun = _this._responseCallbacks[responseId];\r\n          delete _this._responseCallbacks[responseId];\r\n\r\n          if (responseFun) {\r\n            let errorMsg = {\r\n              id: inMsg.id, type: 'response',\r\n              body: { code: 408, desc: 'Response timeout!', value: inMsg }\r\n            };\r\n\r\n            responseFun(errorMsg);\r\n          }\r\n        }, _this._responseTimeOut);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n//TODO: provisional responses should reset timeout\r\n  _onResponse(msg) {\r\n    let _this = this;\r\n\r\n    if (msg.type === 'response') {\r\n      let responseId = msg.to + msg.id;\r\n      let responseFun = _this._responseCallbacks[responseId];\r\n\r\n      if (msg.body.code >= 200) { //if it's a provisional response, don't delete response listener\r\n        delete _this._responseCallbacks[responseId];\r\n      }\r\n\r\n      if (responseFun) {\r\n        responseFun(msg);\r\n        return true;\r\n      }\r\n\r\n\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  //receive messages from external interface\r\n  _onMessage(msg) {\r\n    let _this = this;\r\n\r\n    if (!_this._onResponse(msg)) {\r\n      let itemList = _this._subscriptions[msg.to];\r\n      if (itemList) {\r\n        _this._publishOn(itemList, msg);\r\n      } else {\r\n        _this._publishOnDefault(msg);\r\n      }\r\n    }\r\n  }\r\n\r\n  _genId(inMsg) {\r\n    //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?\r\n    //Global counter will not work, because there will be multiple MiniBus instances!\r\n    //Per URL, can be a lot of data to maintain!\r\n    //Maybe a counter per MiniBus instance. This is the assumed solution for now.\r\n    if (!inMsg.id || inMsg.id === 0) {\r\n      this._msgId++;\r\n      inMsg.id = this._msgId;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Send messages to local listeners, or if not exists to external listeners.\r\n  * It's has an optional mechanism for automatic management of response handlers.\r\n  * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).\r\n  * @param  {Message} msg Message to send. Message ID is automatically added to the message.\r\n  * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.\r\n  * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.\r\n  */\r\n  postMessage(inMsg, responseCallback) { }\r\n\r\n  /**\r\n   * Function to post messages with a number of retries in case timeouts occur.\r\n   * @param  {Message} msg Message to send. Message ID is automatically added to the message.\r\n   * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.\r\n   * @param  {integer} retries number of retries when timeouts occur\r\n   * @return {boolean} message delivery result;\r\n   */\r\n\r\n\r\n  postMessageWithRetries(msg, retries, callback) {\r\n\r\n    let _this = this;\r\n\r\n    let retry = 0;\r\n    //let timeout = true;\r\n\r\n    let sendMsg = function() {\r\n\r\n      return new Promise((resolve, reject) => {\r\n        _this.postMessage(msg, (reply) => {\r\n          if (reply.body.code === 408 || reply.body.code === 500) reject();\r\n          else {\r\n            Bus_log.info('[Bus.postMessageWithRetries] msg delivered: ', msg);\r\n            callback(reply);\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    let tryAgain = () => {\r\n      sendMsg().then(()=>{\r\n        //timeout = false;\r\n        return;\r\n      }, ()=>{\r\n        Bus_log.warn(`[Bus.postMessageWithRetries] Message Bounced (retry ${retry}): '`, msg);\r\n        if (retry++ < retries) {\r\n          tryAgain();\r\n          // setTimeout(() => { tryAgain(); }, 1000);\r\n        } else {\r\n          const error = `[Error] Message Bounced (delivery attempts ${retries}): '`;\r\n          throw new Error(error + msg);\r\n        }\r\n      });\r\n    };\r\n    tryAgain();\r\n  }\r\n\r\n  /**\r\n   * Not public available, used by the class extension implementation, to process messages from the public \"postMessage\" without a registered listener.\r\n   * Used to send the message to an external interface, like a WebWorker, IFrame, etc.\r\n   * @param  {Message.Message} msg Message\r\n   */\r\n  _onPostMessage(msg) { /*implementation will send message to external system*/ }\r\n\r\n  /**\r\n   * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.\r\n   * This method is called one time in the constructor to register external listeners.\r\n   * The implementation will probably call the \"_onMessage\" method to publish in the local listeners.\r\n   * DO NOT call \"postMessage\", there is a danger that the message enters in a cycle!\r\n   */\r\n  _registerExternalListener() { /*implementation will register external listener and call \"this._onMessage(msg)\" */ }\r\n\r\n}\r\n\r\nclass MsgListener {\r\n  /* private\r\n  _subscriptions: <string: MsgListener[]>;\r\n  _url: string;\r\n  _callback: (msg) => void;\r\n  */\r\n\r\n  constructor(subscriptions, url, callback) {\r\n    let _this = this;\r\n\r\n    _this._subscriptions = subscriptions;\r\n    _this._url = url;\r\n    _this._callback = callback;\r\n  }\r\n\r\n  get url() { return this._url; }\r\n\r\n  /**\r\n   * Remove this listener from the Bus\r\n   */\r\n  remove() {\r\n    let _this = this;\r\n\r\n    let subs = _this._subscriptions[_this._url];\r\n    if (subs) {\r\n      let index = subs.indexOf(_this);\r\n      subs.splice(index, 1);\r\n\r\n      //if there are no listeners, remove the subscription entirely.\r\n      if (subs.length === 0) {\r\n        delete _this._subscriptions[_this._url];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ var bus_Bus = (Bus);\r\n\n// CONCATENATED MODULE: ./src/bus/MiniBus.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Message BUS Interface is an extension of the Bus\r\n* It is used mainly in the internal sandbox routing.\r\n*/\r\nclass MiniBus_MiniBus extends bus_Bus {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Post a message for routing. Message is routed directly to the external routing _onPostMessage.\r\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\r\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\r\n   * @return {number}                  the Message id\r\n   */\r\n  postMessage(inMsg, responseCallback, timeout) {\r\n    let _this = this;\r\n\r\n    _this._genId(inMsg);\r\n    _this._responseCallback(inMsg, responseCallback, timeout);\r\n\r\n    //always send to external (to core MessageBus)\r\n    _this._onPostMessage(inMsg);\r\n\r\n    return inMsg.id;\r\n  }\r\n\r\n  //internal method used when a message is received by an external routing system\r\n  _onMessage(msg) {\r\n    let _this = this;\r\n\r\n    if (!_this._onResponse(msg)) {\r\n      let itemList = _this._subscriptions[msg.to];\r\n      if (itemList) {\r\n        _this._publishOn(itemList, msg);\r\n        if (!msg.to.startsWith('hyperty')) {\r\n          _this._publishOnDefault(msg);\r\n        }\r\n      } else {\r\n        _this._publishOnDefault(msg);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var bus_MiniBus = (MiniBus_MiniBus);\r\n\n// CONCATENATED MODULE: ./src/sandbox/Sandbox.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n\r\n\r\nlet SandboxType = {APP: 'app', NORMAL: 'normal', WINDOW: 'window'};\r\n\r\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Base class to implement external sandbox component\r\n */\r\nclass Sandbox_Sandbox extends bus_MiniBus {\r\n\r\n  constructor(capabilities) {\r\n\r\n    super();\r\n\r\n    let _this = this;\r\n\r\n    if (capabilities)      { _this.capabilities = capabilities; }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Deploy an instance of the component into the sandbox.\r\n   * @param  {string} componentSourceCode Component source code (Hyperty, ProtoStub, etc)\r\n   * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\r\n   * @param  {Config} configuration Config parameters of the component\r\n   * @return {Promise<string>} return deployed if successful, or any other string with an error\r\n   */\r\n  deployComponent(componentSourceCode, componentURL, configuration) {\r\n\r\n    let _this = this;\r\n\r\n    // let messageFactory = _this.messageFactory;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      //FLOW-OUT: deploy message for the internal SandboxRegistry -> _onDeploy\r\n      let deployMessage = {\r\n        type: 'create', from: sandbox_SandboxRegistry.ExternalDeployAddress, to: sandbox_SandboxRegistry.InternalDeployAddress,\r\n        body: { url: componentURL, sourceCode: componentSourceCode, config: configuration }\r\n      };\r\n\r\n      //send message into the sandbox internals and wait for reply\r\n      _this.postMessage(deployMessage, (reply) => {\r\n        if (reply.body.code === 200) {\r\n          //is this response complaint with the spec?\r\n          resolve('deployed');\r\n        } else {\r\n          reject(reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the instance of a previously deployed component.\r\n   * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\r\n   * @return {Promise<string>} return undeployed if successful, or any other string with an error\r\n   */\r\n  removeComponent(componentURL) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      //FLOW-OUT: un-deploy message for the internal SandboxRegistry -> _onRemove\r\n      let removeMessage = {\r\n        type: 'delete', from: sandbox_SandboxRegistry.ExternalDeployAddress, to: sandbox_SandboxRegistry.InternalDeployAddress,\r\n        body: { url: componentURL }\r\n      };\r\n\r\n      //send message into the sandbox internals and wait for reply\r\n      _this.postMessage(removeMessage, (reply) => {\r\n        if (reply.body.code === 200) {\r\n          //is this response complaint with the spec?\r\n          resolve('undeployed');\r\n        } else {\r\n          reject(reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Matches Sandbox capabilities against provided capabilities. Used to check if sandbox provides all required capabilities\r\n  * @param  {RuntimeCapabilities} constraints set of RuntimeCapabilities to match with.\r\n  * @return {boolean} return true if constraints are matched false otherwise\r\n   */\r\n\r\n  matches(constraints) {\r\n    let _this = this;\r\n\r\n    let filtered = Object.keys(constraints).filter((key) => {\r\n      return !(_this.capabilities[key] && _this.capabilities[key] === constraints[key]);\r\n    });\r\n\r\n    if (filtered.length === 0)      { return true; }    else      { return !(constraints[filtered]); }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var sandbox_Sandbox = (Sandbox_Sandbox);\r\n\n// CONCATENATED MODULE: ./src/allocation/AddressAllocation.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log system\r\n\r\nlet AddressAllocation_log = loglevel[\"getLogger\"]('address-allocation');\r\n\r\n\r\n\r\n\r\n// TODO: this could not be the best way to do a Singleton but at this moment it works;\r\n\r\nlet AddressAllocation_instance;\r\n\r\n/**\r\n * Class will ask to the message node for addresses\r\n */\r\nclass AddressAllocation_AddressAllocation {\r\n  /* private\r\n  _url: URL\r\n  _bus: MiniBus\r\n  */\r\n\r\n  /**\r\n   * Create an Address Allocation\r\n   * @param  {URL.URL}      url - url from who is sending the message\r\n   * @param  {MiniBus}      bus - MiniBus used for address allocation\r\n   */\r\n  constructor(url, bus, registry, subscriptionManager) {\r\n\r\n    if (!AddressAllocation_instance) {\r\n      this._url = url + '/address-allocation';\r\n      this._bus = bus;\r\n      this._registry = registry;\r\n      this._subscriptionManager = subscriptionManager;\r\n      AddressAllocation_instance = this;\r\n    } else {\r\n      return AddressAllocation_instance;\r\n    }\r\n  }\r\n\r\n  static get instance() {\r\n    if (!AddressAllocation_instance) {\r\n      throw new Error('The address allocation was not instantiated');\r\n    }\r\n\r\n    return AddressAllocation_instance\r\n  }\r\n\r\n  /**\r\n   * get the URL value\r\n   * @return {string} The url value;\r\n   */\r\n  get url() { return this._url; }\r\n\r\n\r\n  /**\r\n   *\r\n   * Ask for creation of a number of Hyperty addresses, to the domain message node.\r\n   *\r\n   * @param {Domain} domain - domain of the message node\r\n   * @param {Number} number - number of address to be allocated\r\n   * @param {Descriptor} info - descriptor to search for the hyperty (TODO:// this should be confirmed)\r\n   * @see https://github.com/reTHINK-project/specs/blob/master/datamodel/core/hyperty-catalogue/readme.md#catalogue-data-model\r\n   * @param {scheme} scheme - scheme of address to be created or reused, like: hyperty, comm, context, etc;\r\n   * @param {boolean|URL.HypertyURL} reuseURL - reuseURL is used to reuse the hypertyURL previously registred;\r\n   * @returns {Promise<Object, Error>} this is Promise and returns an object with the address information\r\n   *\r\n   * @memberOf AddressAllocation\r\n   */\r\n  create(domain, number, info, scheme, reuseURL) {\r\n\r\n    AddressAllocation_log.log('[AddressAllocation.create] info ', info);\r\n    //debugger;\r\n    if (reuseURL) {\r\n\r\n      if (typeof(reuseURL) === 'boolean') {\r\n\r\n        if (reuseURL) {\r\n          return this._reuseAllocatedAddress(domain, number, info, scheme, reuseURL);\r\n        } else {\r\n          return this._allocateNewAddress(domain, scheme, number, info);\r\n        }\r\n\r\n      }\r\n\r\n      if (typeof(reuseURL) === 'string' && isURL(reuseURL)) {\r\n        //return this._reuseAllocatedAddress(domain, number, info, scheme, reuseURL);\r\n        return new Promise((resolve, reject) => {\r\n          let value = { newAddress: false, address: [reuseURL] };\r\n          return resolve(value);\r\n        });\r\n      }\r\n\r\n    } else {\r\n      AddressAllocation_log.log('[AddressAllocation] - new address will be allocated');\r\n\r\n      // if there is no URL saved request a new URL\r\n      return this._allocateNewAddress(domain, scheme, number, info);\r\n    }\r\n\r\n  }\r\n\r\n  _reuseAllocatedAddress(domain, number, info, scheme, reuseURL) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      console.log('REUSETEST -  _reuseAllocatedAddress', domain, number, info, scheme, reuseURL);\r\n      this._registry.checkRegisteredURLs(info, reuseURL).then((urls) => {\r\n        console.log('REUSETEST -  registeredurls', urls);\r\n        if (urls) {\r\n          AddressAllocation_log.info('[AddressAllocation - ' + scheme + '] - Reuse URL');\r\n          let value = {newAddress: false, address: urls};\r\n          resolve(value);\r\n        } else {\r\n\r\n          if (typeof(reuseURL) === 'string') {\r\n            AddressAllocation_log.info('[AddressAllocation - reuseURL] - Object ' + reuseURL + ' not found');\r\n            reject('URL Not Found');\r\n          } else if (typeof(reuseURL) === 'boolean') {\r\n            this._allocateNewAddress(domain, scheme, number, info).then(resolve).catch(reject);\r\n          } else {\r\n            reject('URL Not Found');\r\n          }\r\n\r\n        }\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  _allocateNewAddress(domain, scheme, number, info) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let addresses = [];\r\n      var i;\r\n\r\n      for (i=0; i< number; i++) {\r\n        addresses.push(scheme+'://' + domain + '/' + generateGUID())\r\n      }\r\n\r\n      let result = {newAddress: true, address: addresses};\r\n\r\n      if (scheme === 'hyperty' ) {\r\n        if (info.hasOwnProperty('configuration') && info.configuration.hasOwnProperty('domain_routing') && !info.configuration.domain_routing) \r\n          resolve(result);\r\n        else {\r\n          _this._subscriptionManager.createSubscription(domain,addresses, _this._url).then(()=>{\r\n            resolve(result);\r\n          });\r\n\r\n        }\r\n      } else resolve(result);\r\n\r\n\r\n/*      let msg = {\r\n        type: 'create', from: this._url, to: 'domain://msg-node.' + domain + '/address-allocation',\r\n        body: {value: { number: number } }\r\n      };\r\n\r\n      if (scheme !== 'hyperty') msg.body.scheme = scheme;\r\n\r\n      log.info('[AddressAllocation - ' + scheme + '] - Request new URL');\r\n\r\n      this._bus.postMessage(msg, (reply) => {\r\n        if (reply.body.code === 200) {\r\n          let result = {newAddress: true, address: reply.body.value.allocated};\r\n          resolve(result);\r\n        } else {\r\n          reject(reply.body.desc);\r\n        }\r\n      });*/\r\n\r\n      });\r\n\r\n  }\r\n\r\n  /**\r\n  * Send a request to the domain message node, to deallocate one or more addresses\r\n  * @param  {Domain} domain - Domain of the message node.\r\n  * @param  {addresses} addresses to request the deallocation\r\n  * @returns {Promise}  the response by the message node\r\n  */\r\n  delete(domain, addresses) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      resolve(200);\r\n\r\n/*      let message = {\r\n        type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/address-allocation',\r\n        body: {childrenResources: addresses}\r\n      };\r\n\r\n      _this._bus.postMessage(message, (reply) => {\r\n        if (reply.body.code === 200) {\r\n          resolve(reply.body.code);\r\n        } else {\r\n          reject(reply.body.desc);\r\n        }\r\n      });*/\r\n    });\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ var allocation_AddressAllocation = (AddressAllocation_AddressAllocation);\r\n\n// CONCATENATED MODULE: ./src/registry/RegistryDataModel.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n/**\r\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\r\n*   Registry Data Model includes all Objects to be handled by the Registry functionality including\r\n*/\r\nclass RegistryDataModel {\r\n\r\n  constructor(id, url, descriptorURL, p2pRequester, startingTime, lastModified, status, stubs, stubsConfiguration) {\r\n    let _this = this;\r\n\r\n    _this._id = id;\r\n    _this._url = url;\r\n    _this._descriptorURL = descriptorURL;\r\n    _this._startingTime = startingTime;\r\n    _this._lastModified = lastModified;\r\n    _this._status = status;\r\n    _this._stubs = stubs;\r\n    _this._stubsConfiguration = stubsConfiguration;\r\n    _this._p2pRequester = p2pRequester;\r\n  }\r\n\r\n  get id() {\r\n    let _this = this;\r\n    return _this._id;\r\n  }\r\n\r\n  get url() {\r\n    let _this = this;\r\n    return _this._url;\r\n  }\r\n\r\n  get descriptorURL() {\r\n    let _this = this;\r\n    return _this._descriptorURL;\r\n  }\r\n\r\n  get p2pRequester() {\r\n    let _this = this;\r\n    return _this._p2pRequester;\r\n  }\r\n\r\n  get lastModified() {\r\n    let _this = this;\r\n    return _this._lastModified;\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var registry_RegistryDataModel = (RegistryDataModel);\r\n\n// CONCATENATED MODULE: ./src/registry/HypertyInstance.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n/**\r\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\r\n*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.\r\n*/\r\nclass HypertyInstance_HypertyInstance extends registry_RegistryDataModel {\r\n\r\n  constructor(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context, p2pHandler, p2pRequester, dataSchemes, resources, startingTime, lastModified) {\r\n    super(id, url, descriptorURL, p2pRequester, startingTime, lastModified);\r\n    let _this = this;\r\n    _this._descriptor = descriptor;\r\n    _this._hypertyURL = hypertyURL;\r\n    _this._user = user;\r\n    _this._guid = guid;\r\n    _this._runtime = runtime;\r\n    _this._context = context;\r\n    _this._p2pHandler = p2pHandler;\r\n    _this._dataSchemes = dataSchemes;\r\n    _this._resources = resources;\r\n  }\r\n\r\n  set user(identity) {\r\n    let _this = this;\r\n    _this.user = identity;\r\n  }\r\n\r\n  get user() {\r\n    let _this = this;\r\n    return _this._user;\r\n  }\r\n\r\n  get hypertyURL() {\r\n    let _this = this;\r\n    return _this._hypertyURL;\r\n  }\r\n\r\n  get descriptor() {\r\n    let _this = this;\r\n    return _this._descriptor;\r\n  }\r\n\r\n  get objectName() {\r\n    let _this = this;\r\n    return _this._descriptor._objectName;\r\n  }\r\n\r\n  get p2pHandler() {\r\n    let _this = this;\r\n    return _this._p2pHandler;\r\n  }\r\n\r\n  get dataSchemes() {\r\n    let _this = this;\r\n    return _this._dataSchemes;\r\n  }\r\n\r\n  get resources() {\r\n    let _this = this;\r\n    return _this._resources;\r\n  }\r\n\r\n  get runtimeURL() {\r\n    let _this = this;\r\n    return _this._runtime;\r\n  }\r\n}\r\n\r\n/* harmony default export */ var registry_HypertyInstance = (HypertyInstance_HypertyInstance);\r\n\n// CONCATENATED MODULE: ./src/registry/DomainRegistration.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet DomainRegistration_log = loglevel[\"getLogger\"]('Registry');\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* Runtime DomainRegistration Interface\r\n*/\r\nclass DomainRegistration_DomainRegistration {\r\n\r\n  /**\r\n  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.\r\n  * @param  {MessageBus}          messageBus                msgbus\r\n  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL\r\n  * @param  {DomainURL}           domain        remoteRegistry\r\n  */\r\n  constructor(runtimeURL, registryURL, domain, messageBus) {\r\n\r\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\r\n    if (!registryURL) throw new Error('registryURL is missing.');\r\n    if (!domain) throw new Error('domain is missing.');\r\n    if (!messageBus) throw new Error('messageBus is missing.');\r\n\r\n    let _this = this;\r\n\r\n    _this.registryURL = registryURL;\r\n    _this.runtimeURL = runtimeURL;\r\n    _this._registrationRetries = 5;// number of attempts to register Hyperties and DataObjects when errors occurs\r\n\r\n    // the expires in 3600, represents 1 hour\r\n    //the expires is in seconds, unit of measure received by the domain registry\r\n    _this.expiresTime = 3600;\r\n\r\n    _this._domain = domain;\r\n    _this._messageBus = messageBus;\r\n  }\r\n\r\n\r\n  /**\r\n  *  function to unregister an hypertyInstance in the Domain Registry\r\n  *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n  *\r\n  */\r\n  unregisterHyperty(hypertyInstance) {\r\n    let _this = this;\r\n\r\n      let message = { type: 'update', from: _this.registryURL,\r\n        to: 'domain://registry.' + _this._domain,\r\n        body: { resource: '/hyperty/' + hypertyInstance, value: 'disconnected', attribute: 'status' }};\r\n\r\n      _this._messageBus.postMessage(message, (reply) => {\r\n        DomainRegistration_log.log('[DomainRegistration] unregister hyperty Reply', reply);\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  *  function to unregister a Data Object in the Domain Registry\r\n  *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n  *\r\n  */\r\n  unregisterDataObject(url) {\r\n    let _this = this;\r\n\r\n    let message = { type: 'update', from: _this.registryURL,\r\n      to: 'domain://registry.' + _this._domain,\r\n      body: {\r\n        resource: url,\r\n        value: {\r\n          status: 'disconnected'\r\n        }\r\n      }};\r\n\r\n    _this._messageBus.postMessage(message, (reply) => {\r\n      DomainRegistration_log.log('[DomainRegistration] unregister dataObject Reply', reply);\r\n    });\r\n  }\r\n\r\n  /**\r\n  *  function to delete an dataObjectInstance in the Domain Registry\r\n  *  @param   {String}    name      DataObjectName\r\n  */\r\n  deleteDataObjectInstance(name) {\r\n    let _this = this;\r\n\r\n    let message = { type: 'delete', from: _this.registryURL,\r\n      to: 'domain://registry.' + _this._domain,\r\n      body: { value: {name: name}}};\r\n\r\n    _this._messageBus.postMessage(message, (reply) => {\r\n      DomainRegistration_log.log('[DomainRegistration] unregister dataObject Reply', reply);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Function to update an Hyperty\r\n  */\r\n  updateHypertyInstance(resource, value) {\r\n    let _this = this;\r\n\r\n    let message = { type: 'UPDATE', from: _this.registryURL,\r\n      to: 'domain://registry.' + _this._domain,\r\n      body: { resource: resource, value: value}};\r\n\r\n    _this._messageBus.post.postMessage(message, (reply) => {\r\n      // log.log('[Registry] Updated hyperty reply', reply);\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n  * To register a new Data Object in the Domain Registry.\r\n  * @param  {JSON}     registration                   registration data to be used\r\n  * @param  {boolean}     resume                     if this is just to update the registration with the resume of a data object\r\n  */\r\n\r\n  registerDataObject(registration, resume, p2pHandlerStub) {\r\n\r\n    let _this = this;\r\n\r\n    let p2pHandler;\r\n    let p2pRequester;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let dataScheme = [];\r\n      let filteredDataScheme = registration.url.split(':');\r\n      dataScheme.push(filteredDataScheme[0]);\r\n\r\n      if (Object.keys(p2pHandlerStub).length !== 0) {\r\n      p2pHandler = p2pHandlerStub[_this.runtimeURL].url;\r\n      p2pRequester = runtimeUtils.runtimeDescriptor.p2pRequesterStub;\r\n    }\r\n\r\n    registration.startingTime = registration.created;\r\n\r\n    delete registration.authorise;\r\n    delete registration.created;\r\n    delete registration.mutual;\r\n    delete registration.resume;\r\n\r\n    if (!registration.expires) registration.expires = _this.expiresTime;\r\n\r\n    registration.dataSchemes = dataScheme;\r\n\r\n    if (p2pHandler) {\r\n      registration.p2pHandler = p2pHandler;\r\n      registration.p2pRequester = p2pRequester;\r\n    }\r\n\r\n    registration.status = 'live';\r\n\r\n    let message;\r\n\r\n    if (!resume) {\r\n\r\n      DomainRegistration_log.log('[Registry.registerDataObject] registering new data object URL', registration);\r\n\r\n      message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this._domain, body: { value: registration, policy: 'policy' } };\r\n\r\n    } else {\r\n\r\n      DomainRegistration_log.log('[Registry.registerDataObject] registering previously registered data object URL', registration);\r\n\r\n      message = {\r\n        type: 'update',\r\n        to: 'domain://registry.' + _this._domain,\r\n        from: _this.registryURL,\r\n        body: { resource: registration.url, value: { status: 'live' } }\r\n      };\r\n\r\n    }\r\n\r\n    try {\r\n      _this._messageBus.postMessageWithRetries(message, _this._registrationRetries, (reply) => {\r\n        // log.log('[Registry.registerDataObject] ===> registerDataObject Reply: ', reply);\r\n        if (reply.body.code === 200) {\r\n          resolve(registration);\r\n        } else {\r\n          reject('error on register DataObject');\r\n        }\r\n      });\r\n    } catch (e) {\r\n      DomainRegistration_log.error(e);\r\n      reject(e);\r\n    }\r\n\r\n\r\n    //timer to keep the registration alive\r\n    // the time is defined by a little less than half of the expires time defined\r\n    let keepAliveTimer = setInterval(function () {\r\n\r\n      let message = {\r\n        type: 'update',\r\n        from: _this.registryURL,\r\n        to: 'domain://registry.' + _this._domain,\r\n        body: { resource: registration.url, value: { status: 'live' }, method: 'refresh' }\r\n      };\r\n\r\n      _this._messageBus.postMessage(message, (reply) => {\r\n        // log.log('[Registry.registerDataObject] KeepAlive Reply: ', reply);\r\n      });\r\n    }, (((registration.expires / 1.1) / 2) * 1000));\r\n\r\n  });\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n  * To register a new Hyperty in the Domain Registry.\r\n  * @param  {HypertyInstance}     hyperty            Hyperty to be registered\r\n  * @param  {boolean}     resume                     if this is just to update the registration with the resume of a data object\r\n  */\r\n\r\n\r\n  registerHyperty(hyperty, resume){\r\n\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n    let runtime = _this.runtimeURL;\r\n    let status = 'live';\r\n\r\n    //message to register the new hyperty, within the domain registry\r\n    let message;\r\n    let registrationExpires = _this.expiresTime;\r\n\r\n    let messageValue = {\r\n      user: hyperty.user.email,\r\n      descriptor: hyperty.descriptorURL,\r\n      url: hyperty.hypertyURL,\r\n      expires: registrationExpires,\r\n      resources: hyperty.resources,\r\n      dataSchemes: hyperty.dataSchemes,\r\n      runtime: runtime,\r\n      status: status\r\n    };\r\n\r\n    // set a different expires if defined in the hyperty configuration\r\n\r\n    if (hyperty.p2pHandler) {\r\n      messageValue.p2pHandler = hyperty.p2pHandler;\r\n      messageValue.p2pRequester = hyperty.p2pRequester;\r\n    }\r\n\r\n    // set a different expires value if configured in the Hyperty descriptor\r\n\r\n    if (hyperty.descriptor.configuration && hyperty.descriptor.configuration.expires) registrationExpires = hyperty.descriptor.configuration.expires;\r\n\r\n    if (!resume) {\r\n      // log.log('[Registry registerHyperty] registering new Hyperty URL', addressURL.address[0]);\r\n\r\n\r\n      // set a different expires if defined in the hyperty configuration\r\n\r\n\r\n      // log.log('[Registry registerHyperty] registering new Hyperty at domain registry ', messageValue);\r\n\r\n      message = {type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this._domain, body: {value: messageValue, policy: 'policy'}};\r\n\r\n    } else {\r\n      // log.log('[Registry registerHyperty] registering previously registered Hyperty URL', addressURL.address[0]);\r\n\r\n      message = {\r\n        type: 'update',\r\n        to: 'domain://registry.' + _this._domain,\r\n        from: _this.registryURL,\r\n        body: {resource: hyperty.hypertyURL, value: { status: 'live', user: hyperty.user.email }}\r\n      };\r\n\r\n      if (hyperty.p2pHandler) {\r\n        message.body.value.p2pHandler = hyperty.p2pHandler;\r\n        message.body.value.p2pRequester = hyperty.p2pRequester;\r\n      }\r\n    }\r\n\r\n    // log.log('[Registry registerHyperty] Hyperty registration at domain registry  - ', message);\r\n\r\n      try {\r\n        _this._messageBus.postMessageWithRetries(message, _this._registrationRetries, (reply) => {\r\n          // log.log('[Registry registerHyperty] Hyperty registration response: ', reply);\r\n\r\n          if (reply.body.code === 200) {\r\n            let result = { url: hyperty.hypertyURL};\r\n            if (hyperty.p2pHandler) {\r\n              result.p2pHandler = hyperty.p2pHandler;\r\n              result.p2pRequester = hyperty.p2pRequester;\r\n            }\r\n\r\n\r\n\r\n            resolve(result);\r\n          } else if (reply.body.code === 404) {\r\n            // log.log('[Registry registerHyperty] The update was not possible. Registering new Hyperty at domain registry');\r\n\r\n            message = {type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this._domain, body: {value: messageValue, policy: 'policy'}};\r\n\r\n            try {\r\n              _this._messageBus.postMessageWithRetries(message, _this._registrationRetries, (reply) =>{\r\n                // log.log('[Registry registerHyperty] Hyperty registration update response: ', reply);\r\n\r\n                if (reply.body.code === 200) {\r\n                  let result = { url: hyperty.hypertyURL};\r\n                  if (hyperty.p2pHandler) {\r\n                    result.p2pHandler = hyperty.p2pHandler;\r\n                    result.p2pRequester = hyperty.p2pRequester;\r\n                  }\r\n        \r\n                  resolve(result);\r\n\r\n                } else {\r\n                  throw new Error('Failed to register an Hyperty: ' + reply);\r\n                }\r\n\r\n              });\r\n            } catch (e) {\r\n              DomainRegistration_log.error(e);\r\n              reject(e);\r\n            }\r\n          } else {\r\n            throw new Error('Failed to register an Hyperty to domain: ', reply);\r\n          }\r\n\r\n        });\r\n\r\n      } catch (e) {\r\n        DomainRegistration_log.error(e);\r\n        reject(e);\r\n      }\r\n\r\n      //timer to keep the registration alive\r\n      // the time is defined by a little less than half of the expires time defined\r\n      let keepAliveTimer = setInterval(function() {\r\n\r\n        let message = {\r\n          type: 'update',\r\n          from: _this.registryURL,\r\n          to: 'domain://registry.' + _this._domain,\r\n          body: { resource: hyperty.hypertyURL, value: {status: 'live'}, method: 'refresh' }};\r\n\r\n        _this._messageBus.postMessage(message, (reply) => {\r\n          // log.log('[Registry registerHyperty] KeepAlive Reply: ', reply);\r\n        });\r\n      }, (((registrationExpires / 1.1) / 2) * 1000));\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var registry_DomainRegistration = (DomainRegistration_DomainRegistration);\r\n\n// CONCATENATED MODULE: ./src/registry/P2PConnectionResolve.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet P2PConnectionResolve_log = loglevel[\"getLogger\"]('P2PConnectionResolve');\r\n\r\n/**\r\n*   To process address resolution for p2p connections\r\n*/\r\nclass P2PConnectionResolve  {\r\n\r\n  constructor(registry) {\r\n    let _this = this;\r\n    _this._registry = registry;\r\n    _this._remoteP2PEntities = {}; // All remote entities and associated runtime url that are reachable with existing p2p connections\r\n\r\n  }\r\n\r\n\r\n  /**\r\n  * Verifies if remote Entity can be reached with a P2P Connection.\r\n  * @param  {URL.URL}        info           object URL\r\n  * @return {HypertyDataObjectInstance}  addressURL     return the Data Object instance registered URL, return undefined otherwise\r\n  */\r\n\r\n  checkP2P(msg) {\r\n\r\n    if (!msg.hasOwnProperty('to')) {\r\n      // throw Error('The p2p verification was failed');\r\n      return Promise.reject('The p2p verification was failed');\r\n    }\r\n\r\n    let scheme = msg.to.split('://')[0];\r\n\r\n    let comp = msg.to.split('://')[1].split('/')[2];\r\n\r\n    let url;\r\n\r\n    if (comp) url = msg.to.substring(0, msg.to.indexOf('/' + comp));\r\n    else url = msg.to;\r\n\r\n    let p2p = {};\r\n\r\n    if (msg.body && msg.body.p2p) p2p.p2p = msg.body.p2p;\r\n\r\n    if (msg.body && msg.body.p2pHandler && msg.body.p2pRequester) {\r\n      p2p.p2pHandler = msg.body.p2pHandler;\r\n      p2p.p2pRequester = msg.body.p2pRequester;\r\n      p2p.runtime = msg.body.p2pHandler.split('/p2phandler/')[0];\r\n    }\r\n\r\n    switch (scheme) {\r\n      case 'runtime':\r\n        return this.checkP2PRuntime(url, p2p);\r\n        break;\r\n      default:\r\n        return this.checkP2PEntity(url, p2p);\r\n        break;\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Verifies if remote Entity (Hyperty or Data Object) can be reached with a P2P Connection.\r\n  * @param  {string}        url           Remote Entity URL to be checked\r\n  * @param  {object}        p2p           p2p information to be used including ´runtime´ with remote Runtime URL, 'p2pHandler' remote P2P Handler Stub URL and p2pRequester with Catalogue URL of P2P Requester to be used\r\n  * @return {promise} registeredEntity     if p2p connection is possible it returns p2p information to be used in the connection, otherwise the promise is rejected\r\n  */\r\n\r\n  checkP2PEntity(url, p2p) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let remoteEntity = _this._remoteP2PEntities[url];\r\n\r\n      if (remoteEntity) resolve(remoteEntity);\r\n      else if (p2p.runtime) resolve(p2p); // use provided p2p if available in the message body\r\n      else if (p2p.p2p) { // otherwise look on Domain Registry\r\n\r\n        P2PConnectionResolve_log.log('[Registry - checkP2PEntity] - search in Domain Registry: ', url);\r\n\r\n        let message = {\r\n          type: 'read',\r\n          from: _this._registry.registryURL,\r\n          to: 'domain://registry.' + _this._registry._domain,\r\n          body: {\r\n            resource: url\r\n          }\r\n        };\r\n\r\n        _this._registry._messageBus.postMessage(message, (reply) => {\r\n          P2PConnectionResolve_log.log('[Registry - checkP2PEntity] Domain Registry reply', reply);\r\n          if ('value' in reply.body) {\r\n\r\n            //todo: store retrieved entity\r\n            let resolvedEntity = reply.body.value;\r\n\r\n            if (resolvedEntity.hasOwnProperty('p2pHandler')) {\r\n              resolve(resolvedEntity);\r\n            } else {\r\n              reject('[Registry checkP2PEntity] Hyperty found does not support P2P', reply.body.value);\r\n            }\r\n\r\n          } else {\r\n            reject('[Registry checkP2PEntity] Hyperty with P2PHandler not found', reply.body.code);\r\n          }\r\n        });\r\n      } else reject('[Registry checkP2PEntity] No P2P Connection available for ', url);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Verifies if remote Runtime can be reached with a P2P Connection.\r\n  * @param  {URL.URL}        runtimeURL           Runtime URL\r\n  * @return {Object}  p2pConnection    return the P2PConnection instance registered URL, return undefined otherwise\r\n  */\r\n\r\n  checkP2PRuntime(runtimeURL, p2p) {\r\n    let _this = this;\r\n\r\n    let registeredRuntime = {};\r\n\r\n    // look on locally stored p2p connections\r\n    return new Promise((resolve, reject) => {\r\n      if (_this._registry.p2pConnectionList[runtimeURL]) {\r\n        resolve({runtime: runtimeURL});\r\n      } else if ( p2p.runtime) {\r\n        registeredRuntime = p2p;\r\n        resolve(registeredRuntime);\r\n      } else reject('[Registry.P2PConnectionResolve.checkP2PRuntime] No P2P Connection found to ', runtimeURL);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * Verifies if remote Hyperty can be reached with a P2P Connection.\r\n  * @param  {JSON}        info           object or entity charateristics info\r\n  * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise\r\n  */\r\n\r\n  checkP2PHyperty(hypertyURL, p2p) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let hyperty;\r\n\r\n\r\n      // look on locally stored hyperties\r\n\r\n      for (let i in _this._registry.remoteHypertyList) {\r\n        hyperty = _this._registry.remoteHypertyList[i];\r\n\r\n        P2PConnectionResolve_log.log('[Registry - checkP2PHyperty] - for each Hyperty: ', hyperty);\r\n\r\n        // todo: change to \"hyperty.url\" to be aligned with hyperty instance data model spec\r\n\r\n        if (hyperty.hypertyID === hypertyURL) {\r\n\r\n          if (hyperty.hasOwnProperty('p2pHandler')) {\r\n            resolve(hyperty);\r\n          } else {\r\n            reject('[Registry checkP2PHyperty] Hyperty found does not support P2P', hyperty);\r\n          }\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (!hyperty && p2p.runtime) resolve(p2p); // use provided p2p if available in the message body\r\n      else if (!hyperty && p2p.p2p) { // otherwise look on Domain Registry\r\n\r\n        P2PConnectionResolve_log.log('[Registry - checkP2PHyperty] - search in Domain Registry: ', hyperty);\r\n\r\n        let message = {\r\n          type: 'read',\r\n          from: _this._registry.registryURL,\r\n          to: 'domain://registry.' + _this._registry._domain,\r\n          body: {\r\n            resource: hypertyURL\r\n          }\r\n        };\r\n\r\n        _this._registry._messageBus.postMessage(message, (reply) => {\r\n          P2PConnectionResolve_log.log('[Registry - checkP2PHyperty] Domain Registry reply', reply);\r\n          if ('value' in reply.body) {\r\n\r\n            //todo: store retrieved hyperty\r\n            let resolvedHyperty = reply.body.value;\r\n\r\n            _this._registry.remoteHypertyList.push(resolvedHyperty);\r\n\r\n            if (resolvedHyperty.hasOwnProperty('p2pHandler')) {\r\n              resolve(resolvedHyperty);\r\n            } else {\r\n              reject('[Registry checkP2PHyperty] Hyperty found does not support P2P', reply.body.value);\r\n            }\r\n\r\n          } else {\r\n            reject('[Registry checkP2PHyperty] Hyperty with P2PHandler not found', reply.body.code);\r\n          }\r\n        });\r\n      } else reject('[Registry checkP2PHyperty] No P2P Connection available for ', hypertyURL);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Verifies if remote Data Object can be reached with a P2P Connection.\r\n  * @param  {URL.URL}        DataObjectURL           object URL\r\n  * @return {HypertyDataObjectInstance}  addressURL     return the Data Object instance registered URL, return undefined otherwise\r\n  */\r\n\r\n  checkP2PDataObject(url, p2p) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // look on locally stored Remote Data Objects\r\n\r\n      let dataobject = _this._registry.remoteDataObjectList.filter((i) => {\r\n        return (_this._registry.remoteDataObjectList[i].url === url);\r\n      });\r\n\r\n      if (dataobject.length !== 0 && dataobject[0].p2pRequester) {\r\n        resolve(dataobject[0]);\r\n      } else if (dataobject.length !== 0) {\r\n        reject('[Registry checkP2PDataObject] Data Object found does not support P2P', dataobject[0]);\r\n      } else if (dataobject.length === 0 && p2p.runtime) resolve(p2p); // use provided p2p info if available in the message body\r\n      else if (dataobject.length && p2p.p2p) { // otherwise look on Domain Registry\r\n\r\n      // look on Domain Registry\r\n\r\n        let message = {\r\n          type: 'read',\r\n          from: _this._registry.registryURL,\r\n          to: 'domain://registry.' + _this._registry._domain,\r\n          body: {\r\n            resource: url\r\n          }\r\n        };\r\n\r\n        _this._registry._messageBus.postMessage(message, (reply) => {\r\n          P2PConnectionResolve_log.log('discover data object per url reply', reply);\r\n          if ('value' in reply.body) {\r\n\r\n            //todo: store retrieved hyperty\r\n            let resolvedDataObject = reply.body.value;\r\n\r\n            _this._registry.remoteDataObjectList.push(resolvedDataObject);\r\n\r\n            if (resolvedDataObject.p2pRequester) {\r\n              resolve(resolvedDataObject);\r\n            } else {\r\n              reject('[Registry checkP2PDataObject] Data Object found does not support P2P', reply.body.value);\r\n            }\r\n\r\n          } else {\r\n            reject('[Registry checkP2PDataObject] not found', reply.body.code);\r\n          }\r\n        });\r\n      } else reject('[Registry checkP2PDataObject] no P2P Connection found');\r\n    });\r\n  }\r\n\r\n  addRemoteP2PEntity(url, runtime) {\r\n    this._remoteP2PEntities[url] = runtime;\r\n  }\r\n\r\n  removeRemoteP2PEntity(url) {\r\n    delete this._remoteP2PEntities[url];\r\n  }\r\n\r\n  reconnectP2PRequester(p2pRequester) {\r\n    let _this = this;\r\n\r\n    P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] lets try to reconnect P2P Requester Stub: ', p2pRequester);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let remoteRuntime = p2pRequester.runtime;\r\n\r\n      let message = {\r\n        type: 'execute',\r\n        from: _this._registry.registryURL,\r\n        to: p2pRequester.url,\r\n        body: {\r\n          method: 'connect',\r\n          params: [p2pRequester.p2pHandler]\r\n        }\r\n      };\r\n\r\n      // lets prepare the p2pRequesterSTub reconnect by setting an observer to its status changes\r\n\r\n      _this._registry.watchingYou.observe('p2pRequesterStub', (change) => {\r\n\r\n        P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequesterStubs changed ' + _this._registry.p2pRequesterStub);\r\n\r\n        if (change.keypath.split('.')[0] === remoteRuntime && change.name === 'status') {\r\n          switch (change.newValue) {\r\n            case 'live':\r\n              P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequester is live ' + _this._registry.p2pRequesterStub[remoteRuntime]);\r\n              resolve(_this._registry.p2pRequesterStub[remoteRuntime].url);\r\n              break;\r\n            case 'failed':\r\n              P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequester reconnect failed ' + _this._registry.p2pRequesterStub[remoteRuntime]);\r\n              reject('P2P Requester reconnect failed');\r\n              break;\r\n            default:\r\n          }\r\n        }\r\n      });\r\n\r\n      //  stub load\r\n      _this._registry._messageBus.postMessage(message, (reply) => {\r\n        P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] reconnect request reply', reply);\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var registry_P2PConnectionResolve = (P2PConnectionResolve);\r\n\n// CONCATENATED MODULE: ./src/utils/WatchingYou.js\n\r\n\r\nclass WatchingYou {\r\n\r\n  constructor() {\r\n    this._watching = {};\r\n    this._observers = [];\r\n  }\r\n\r\n  watch(key, object, deep = false) {\r\n    if (deep) {\r\n      this._watching[key] = Object.deepObserve(object, (changes) => {\r\n        changes.every((change) => {\r\n          this._fireEvent(key, change);\r\n        });\r\n      });\r\n    } else {\r\n      this._watching[key] = Object.observe(object, (changes) => {\r\n        changes.every((change) => {\r\n          this._fireEvent(key, change);\r\n        });\r\n      });\r\n    }\r\n    return this._watching[key];\r\n  }\r\n\r\n  observe(key, callback) {\r\n    this._observers.push({key: key, callback: callback});\r\n  }\r\n\r\n  _fireEvent(key, change) {\r\n\r\n    this._observers.filter((observe) => {\r\n      return observe.key === key;\r\n    }).forEach((observe) => {\r\n      observe.callback(change);\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var utils_WatchingYou = (WatchingYou);\r\n\r\n/*let watchChanges = new WatchChanges();\r\nlet p2pRequesterStub = watchChanges.watch('p2p', {}, true);\r\nlet stub = watchChanges.watch('stub', {});\r\n\r\nwatchChanges.observe('p2p', (change) => {\r\n  console.log('p2pRequesterStub: ' + change.name + ' - ' + JSON.stringify(change.newValue));\r\n});\r\n\r\nwatchChanges.observe('p2p', (change) => {\r\n  console.log('p2pRequesterStub: ' + change.name + ' - ' + JSON.stringify(change.newValue));\r\n});\r\n\r\nwatchChanges.observe('stub', (change) => {\r\n  console.log('stub ' + change.name);\r\n});\r\n\r\np2pRequesterStub.a = {};\r\nstub.b = {name: 'vitor'};\r\np2pRequesterStub.a.name = 'Hello';\r\nstub.b = {name: 'vitor'};\r\np2pRequesterStub.a.age = '32';\r\np2pRequesterStub.a.name = 'World';*/\r\n\n// CONCATENATED MODULE: ./src/Utils.js\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/registry/Registry.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet Registry_log = loglevel[\"getLogger\"]('Registry');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import DiscoveryServiceFramework from './DiscoveryServiceFramework';\r\n\r\nconst STATUS = { CREATED: 'created', LIVE: 'live', DEPLOYING: 'deploying', DEPLOYED: 'deployed', PROGRESS: 'in-progress', DISCONNECTED: 'disconnected', FAILED: 'deployment-failed', DEAD: 'dead' };\r\n\r\n/*import IdentityManager from './IdentityManager';\r\nimport Discovery from './Discovery';*/\r\n\r\n/**\r\n* Runtime Registry Interface\r\n*/\r\nclass Registry_Registry {\r\n\r\n  /**\r\n  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL\r\n  * @param  {AppSandbox}          appSandbox            appSandbox\r\n  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue\r\n  * @param  {DomainURL}           remoteRegistry        remoteRegistry\r\n  * @param  {storageManager}      storageManager\r\n  */\r\n  constructor(runtimeURL, appSandbox, identityModule, runtimeCatalogue, runtimeCapabilities, storageManager, p2pHandlerURL, remoteRegistry) {\r\n\r\n    // how some functions receive the parameters for example:\r\n    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);\r\n    // registry.registerStub(sandbox, 'sp1');\r\n    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');\r\n    // registry.resolve('hyperty-runtime://sp1/123');\r\n\r\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\r\n    if (!storageManager) throw new Error('storageManager is missing.');\r\n\r\n    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/\r\n\r\n    let _this = this;\r\n\r\n    _this.registryURL = runtimeURL + '/registry/';\r\n    _this.appSandbox = appSandbox;\r\n    _this.runtimeURL = runtimeURL;\r\n    _this.p2pHandlerURL = p2pHandlerURL;\r\n    _this.runtimeCatalogue = runtimeCatalogue;\r\n    _this.remoteRegistry = remoteRegistry;\r\n    _this.idModule = identityModule;\r\n    _this.storageManager = storageManager;\r\n    _this.runtimeCapabilities = runtimeCapabilities;\r\n    _this.identifier = generateGUID();\r\n\r\n    _this.hypertiesListToRemove = {};\r\n    _this.hypertiesList = [];\r\n    _this.remoteHypertyList = [];\r\n    _this.remoteDataObjectList = [];\r\n    _this.idpLegacyProxyList = {};\r\n\r\n    _this.watchingYou = new utils_WatchingYou();\r\n    _this.p2pHandlerStub = {};\r\n    _this.p2pRequesterStub = _this.watchingYou.watch('p2pRequesterStub', {}, true);\r\n    _this.p2pConnectionList = _this.watchingYou.watch('p2pConnectionList', {}, true);\r\n    _this.p2pHandlerAssociation = {};\r\n\r\n    _this.protostubsList = _this.watchingYou.watch('protostubsList', {}, true);\r\n    _this.idpProxyList = _this.watchingYou.watch('idpProxyList', {}, true);\r\n    _this.dataObjectList = {};\r\n    _this.subscribedDataObjectList = {};\r\n    _this.sandboxesList = {sandbox: {}, appSandbox: {} };\r\n    _this.pepList = {};\r\n    _this.registries = {};\r\n\r\n    _this._domain = divideURL(_this.registryURL).domain;\r\n    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;\r\n    let p2pConnectionResolve = new registry_P2PConnectionResolve(_this);\r\n\r\n    _this._p2pConnectionResolve = p2pConnectionResolve;\r\n\r\n    _this._hypertyUrls = {};\r\n    _this._dataObjectUrls = {};\r\n  }\r\n\r\n  loadRegistry() {\r\n\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n      _this.storageManager.get('registry:HypertyURLs').then((urlsList) => {\r\n        if (urlsList) _this._hypertyUrls = urlsList;\r\n        _this.storageManager.get('registry:DataObjectURLs').then((urlsList) => {\r\n          if (urlsList) _this._dataObjectUrls = urlsList;\r\n          resolve();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  set loader(loader) {\r\n    let _this = this;\r\n    _this._loader = loader;\r\n  }\r\n\r\n  get loader() {\r\n    let _this = this;\r\n    return _this._loader;\r\n  }\r\n\r\n  /**\r\n  * return the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  get messageBus() {\r\n    let _this = this;\r\n    return _this._messageBus;\r\n  }\r\n\r\n  /**\r\n  * Set the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  set messageBus(messageBus) {\r\n    let _this = this;\r\n    _this._messageBus = messageBus;\r\n\r\n    _this._messageBus.addListener(_this.registryURL, function(msg) {\r\n\r\n      // log.log('[Registry listener] ', msg);\r\n\r\n      let isHyperty = utils_isHypertyURL(msg.from);\r\n      let hasCriteria = msg.body.hasOwnProperty('criteria');\r\n      let isURLResource;\r\n      let isUserResource;\r\n      let isHypertyResource;\r\n\r\n      if (msg.body.hasOwnProperty('resource') && msg.body.resource !== '.') {\r\n        isURLResource = isURL(msg.body.resource);\r\n        isUserResource = isUserURL(msg.body.resource);\r\n        isHypertyResource = utils_isHypertyURL(msg.body.resource);\r\n      }\r\n      let isDelete = msg.type === 'delete';\r\n      let hasName;\r\n      let hasUser;\r\n\r\n      if (msg.body.hasOwnProperty('value')) {\r\n        hasName = msg.body.value.hasOwnProperty('name');\r\n        hasUser = msg.body.value.hasOwnProperty('user');\r\n      }\r\n\r\n      if (msg.type === 'response') {\r\n        Registry_log.error('[Register listener] skipping ', msg);\r\n        return;\r\n      }\r\n\r\n      // msg sent by identity manager library\r\n      let userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);\r\n\r\n      let reply = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: {resource: userUrl}};\r\n      reply.body.code = (userUrl) ? 200 : 404;\r\n\r\n      _this._messageBus.postMessage(reply);\r\n\r\n    });\r\n\r\n    // Install AddressAllocation\r\n    let addressAllocation = allocation_AddressAllocation.instance;\r\n    _this.addressAllocation = addressAllocation;\r\n\r\n    _this._domainRegistration = new registry_DomainRegistration(_this.runtimeURL,_this.registryURL, _this._domain, messageBus);\r\n\r\n    // log.log('[Registry - AddressAllocation] - ', addressAllocation);\r\n  }\r\n\r\n\r\n  _getIdentityAssociated(type, hypertyURL) {\r\n    let _this = this;\r\n\r\n    for (let hyperty in _this.hypertiesList) {\r\n      let value = _this.hypertiesList[hyperty];\r\n\r\n      if (value._hypertyURL === hypertyURL) {\r\n        switch (type) {\r\n          case 'username':\r\n            return value._user.username;\r\n          case 'cn':\r\n            return value._user.cn;\r\n          case 'locale':\r\n            return value._user.locale;\r\n          case 'avatar':\r\n            return value._user.avatar;\r\n          case 'userURL':\r\n            return value._user.userURL;\r\n          case '.':\r\n            return value._user;\r\n          default:\r\n            return '';\r\n        }\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n  * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.\r\n  */\r\n  getAppSandbox() {\r\n    let _this = this;\r\n    return _this.appSandbox;\r\n  }\r\n\r\n  /**\r\n  * This function returns the user associated to the hyperty URL\r\n  * @param    {String}    hypertyURL      hyperty URL\r\n  * @return   {String}    userURL         user URL\r\n  */\r\n  getHypertyOwner(hypertyURL) {\r\n\r\n    let _this = this;\r\n    let userURL;\r\n\r\n    for (let index in _this.hypertiesList) {\r\n      let hyperty = _this.hypertiesList[index];\r\n\r\n      if (hyperty.hypertyURL === hypertyURL) {\r\n        return hyperty.user.userURL;\r\n      }\r\n    }\r\n    return userURL;\r\n  }\r\n\r\n  /**\r\n  * This function returns the user associated to the hyperty URL\r\n  * @param    {String}    dataObjectURL      dataObjectURL URL\r\n  * @return   {String}    userURL         user URL\r\n  */\r\n  getDataObjectReporter(dataObjectURL) {\r\n\r\n    let _this = this;\r\n    let DOurl = removePathFromURL(dataObjectURL);\r\n    for (let index in _this.dataObjectList) {\r\n      let dataObject = _this.dataObjectList[index];\r\n\r\n      if (dataObject.url === DOurl) {\r\n        return dataObject.reporter;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n  * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty\r\n  * @param    {String}    url      hyperty or dataObject URL\r\n  * @return   {String}    hypertyName     hyperty Name\r\n  */\r\n  getHypertyName(url) {\r\n    let _this = this;\r\n\r\n    let isHypertyURL = divideURL(url).type === 'hyperty';\r\n\r\n    //value to be returned in the end\r\n    let hypertyName;\r\n\r\n    //if is not an hyperty, check if is a dataObject and obtain his reporter\r\n    let hypertyURL = isHypertyURL ? url : _this.getReporterURLSynchonous(url);\r\n\r\n    for (let index in _this.hypertiesList) {\r\n      let hyperty = _this.hypertiesList[index];\r\n      if (hyperty.hypertyURL === hypertyURL) {\r\n        hypertyName = hyperty.objectName;\r\n        break;\r\n      }\r\n    }\r\n    return hypertyName;\r\n  }\r\n\r\n  /**\r\n  * function to return the reporterURL associated with the dataobject URL\r\n  * @param    {String}     dataObjectURL    dataObjectURL\r\n  * @return   {String}     reporterURL      reporterURL\r\n  */\r\n  getReporterURL(dataObjectURL) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let dataObject = _this.dataObjectList[dataObjectURL];\r\n\r\n      if (dataObject) {\r\n        resolve(dataObject.reporter);\r\n      } else {\r\n        reject('No reporter was found');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to return the reporterURL associated with the dataobject URL. no promise returned\r\n  * @param    {String}     dataObjectURL    dataObjectURL\r\n  * @return   {String}     reporterURL      reporterURL\r\n  */\r\n  getReporterURLSynchonous(dataObjectURL) {\r\n    let _this = this;\r\n\r\n    let dataObject = _this.dataObjectList[dataObjectURL];\r\n\r\n    return (dataObject) ? dataObject.reporter : undefined;\r\n  }\r\n\r\n  /**\r\n  * returns the hyperty URL that subscribed the dataObject\r\n  * @param    {String}     url            url format\r\n  * @return   {String}    Hyperty URL subscribed to the URL\r\n  */\r\n  getDataObjectSubscriberHyperty(url) {\r\n    let _this = this;\r\n\r\n    return _this.subscribedDataObjectList[url];\r\n  }\r\n\r\n  /**\r\n  * register a desired dataObject to subscribe\r\n  * @param    {String}    dataObjectURL      dataObject URL\r\n  */\r\n  registerSubscribedDataObject(dataObjectURL, hypertyURL) {\r\n    let _this = this;\r\n    if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {\r\n      _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Function to return the list of pre authorised users received in the creation of a data object\r\n  * @param    {String}            dataObjectURL    dataObjectURL\r\n  * @return   {Array<String>}     preAuth         List of pre authorised users\r\n  */\r\n  getPreAuthSubscribers(dataObjectURL) {\r\n    let _this = this;\r\n    let dataObject = _this.dataObjectList[dataObjectURL];\r\n    let preAuth = [];\r\n\r\n    if (dataObject) {\r\n      preAuth = dataObject.authorise;\r\n    }\r\n    return preAuth;\r\n  }\r\n\r\n  /**\r\n  * send requests to unregister all hyperties registered in domain registry\r\n  * @return   {Promise}     return a promise if the result of unregistration all hyperties\r\n  */\r\n  unregisterAllHyperties() {\r\n    let _this = this;\r\n\r\n    let unregisterResults = [];\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      for (let index in _this.hypertiesList) {\r\n        let hyperty = _this.hypertiesList[index];\r\n        let result = _this.unregisterHypertyInstance(hyperty.hypertyURL);\r\n        unregisterResults.push(result);\r\n      }\r\n\r\n      Promise.all(unregisterResults).then(() => {\r\n\r\n        resolve('successfully unregistered all hyperties');\r\n      }, error => { reject(error); });\r\n    });\r\n  }\r\n\r\n  /**\r\n  *  function to unregister an hypertyInstance in the Domain Registry\r\n  *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n  *\r\n  */\r\n  unregisterHypertyInstance(hypertyInstance) {\r\n    //TODO working but the user\r\n    let _this = this;\r\n\r\n    let closeMsg = { type: 'execute', from: _this.registryURL,\r\n      to: hypertyInstance,\r\n      body: { method: 'close' }};\r\n\r\n    // Send message to hyperty to close\r\n    _this._messageBus.postMessage(closeMsg, (reply) => {\r\n      Registry_log.log('[Registry.unregisterHypertyInstance] Close Reply', reply);\r\n\r\n      _this._domainRegistration.unregisterHyperty(hypertyInstance);\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  *  function to unregister a Data Object in the Domain Registry\r\n  *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n  *\r\n  */\r\n  unregisterDataObject(url) {\r\n    this._domainRegistration.unregisterDataObject(url);\r\n  }\r\n\r\n\r\n  /**\r\n  * register a new subscriber in the dataObject registered\r\n  * @param  {String}   dataObjectURL    dataObject URL\r\n  * @param  {String}   subscriberURL    subscriber URL\r\n  */\r\n  registerSubscriber(dataObjectURL, subscriberURL) {\r\n    let _this = this;\r\n    let dataObject = _this.dataObjectList[dataObjectURL];\r\n\r\n    if (dataObject) {\r\n\r\n      if (!dataObject.subscribers) dataObject.subscribers = [];\r\n\r\n      dataObject.subscribers.push(subscriberURL);\r\n      _this.dataObjectList[dataObjectURL] = dataObject;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * get the subscribers registered within a dataObject\r\n  * @param  {String}          dataObjectURL    dataObject URL\r\n  * @param  {Array<String>}   Substribers List\r\n  */\r\n  getDataObjectSubscribers(dataObjectURL) {\r\n    let _this = this;\r\n    let dataObject = _this.dataObjectList[dataObjectURL];\r\n\r\n    if (dataObject) {\r\n      return dataObject.subscribers;\r\n    } else {\r\n      throw 'No dataObject was found';\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.\r\n  * @param  {String}      identifier                  identifier\r\n  * @param  {String}      dataObjectschema            dataObjectschema\r\n  * @param  {String}      dataObjectUrl               dataObjectUrl\r\n  * @param {String}      dataObjectReporter           dataObjectReporter\r\n  * @param  {Array}     resources                     dataObject resources\r\n  * @param  {Array}     authorise                     list of pre authorised authorised IDs\r\n  */\r\n  //registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, resources, addressURL, authorise) {\r\n  registerDataObject(objectRegistration) {\r\n    let _this = this;\r\n\r\n    let registration = deepClone(objectRegistration);\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n\r\n      _this.dataObjectList[objectRegistration.url] = objectRegistration;\r\n\r\n//      _this.storageManager.get('registry:DataObjectURLs').then((urlsList) => {\r\n\r\n/*        if (!urlsList) {\r\n          urlsList = {};\r\n        }*/\r\n\r\n        //update the list with the new elements\r\n        _this._dataObjectUrls[objectRegistration.name + objectRegistration.schema + objectRegistration.resources + objectRegistration.reporter] = objectRegistration.url;\r\n\r\n        // step to obtain the list of all URL registered to updated with the new one.\r\n        _this.storageManager.set('registry:DataObjectURLs', 0, _this._dataObjectUrls).then(() => {\r\n\r\n          if (_this.isInterworkingProtoStub(registration.reporter)) {\r\n            registration.interworking = true;\r\n          }\r\n\r\n          let domainRegistration = true;\r\n\r\n          if (registration.hasOwnProperty(\"domain_registration\"))\r\n          domainRegistration = registration.domain_registration;\r\n\r\n          if (domainRegistration)\r\n            _this._domainRegistration.registerDataObject(registration,objectRegistration.resume, _this.p2pHandlerStub).then(( registered ) =>{ resolve(registered) });\r\n          else resolve(registration);\r\n\r\n        }).catch(function(reason) {\r\n          Registry_log.error('[Registry registerDataObject] Error: ', reason);\r\n          reject(reason);\r\n        });\r\n      });\r\n//    });\r\n  }\r\n\r\n\r\n  _getResourcesAndSchemes(descriptor) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve)=> {\r\n\r\n      let resources;\r\n\r\n      // check if the hyperty resources is a vector or a string\r\n      // TODO delete later when catalogue is fixed\r\n      if (typeof (descriptor.hypertyType) === 'string') {\r\n        resources = [];\r\n        resources.push(descriptor.hypertyType);\r\n      } else {\r\n        resources = descriptor.hypertyType;\r\n      }\r\n\r\n      let objName = descriptor.objectName;\r\n\r\n      let descriptorDataSchema = descriptor.dataObjects;\r\n      let dataSchemasArray = [];\r\n\r\n      //this will create a array with a Promise in each position\r\n      for (let index in descriptorDataSchema) {\r\n        dataSchemasArray.push(_this.runtimeCatalogue.getDataSchemaDescriptor(descriptorDataSchema[index]));\r\n      }\r\n\r\n      // as soon as the previous array is completed, this will wait for the resolve of all promises in the array\r\n      Promise.all(dataSchemasArray).then(function(dataSchemas) {\r\n\r\n        let filteredDataSchemas = [];\r\n        for (let index in dataSchemas) {\r\n          let dataSchema = dataSchemas[index];\r\n          filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme);\r\n        }\r\n\r\n        // log.log('[Registry] Hyperty Schemas', filteredDataSchemas);\r\n        // log.log('[Registry] Hyperty resources', resources);\r\n\r\n        resolve({resources: resources, dataSchema: filteredDataSchemas, name: objName});\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * method that returns previously registered Hyperty or DataObjects URLS, for given characteristics\r\n  * @param  {JSON}        info           object or hyperty charateristics info\r\n  * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise\r\n  */\r\n  checkRegisteredURLs(info, reuseURL) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n\r\n      let objectType = (info.reporter) ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';\r\n\r\n      if (typeof(reuseURL) === 'string') {\r\n        objectType = reuseURL && divideURL(reuseURL).type !== 'hyperty' ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';\r\n      }\r\n      //debugger;\r\n      _this.storageManager.get(objectType).then((urlsList) => {\r\n\r\n        if (!urlsList) {\r\n          urlsList = {};\r\n        }\r\n\r\n        if (typeof(reuseURL) === 'string') {\r\n          Registry_log.info('[Registry - checkRegisteredURLs] - look for ' + reuseURL + ' on ', urlsList);\r\n\r\n          let searchResult = Object.keys(urlsList).map((key) => {\r\n            let indexOf = urlsList[key].indexOf(reuseURL);\r\n            return urlsList[key][indexOf];\r\n          });\r\n\r\n          Registry_log.info('[Registry - checkRegisteredURLs] - found ' + searchResult.length + ' results on ', searchResult);\r\n          if (searchResult.length === 1) {\r\n            return resolve(searchResult);\r\n          } else {\r\n            return resolve(undefined);\r\n          }\r\n        }\r\n\r\n        if (objectType === 'registry:HypertyURLs') {\r\n          _this._getResourcesAndSchemes(info).then((value) => {\r\n            if (urlsList[value.resources + value.dataSchema + value.name]) {\r\n              // log.log('[Registry] reusage of hyperty URL');\r\n              return resolve(urlsList[value.resources + value.dataSchema + value.name]);\r\n            } else {\r\n              // log.log('[Registry] no hyperty URL was previously registered ');\r\n              return resolve(undefined);\r\n            }\r\n          });\r\n        } else {\r\n\r\n          let characteristics = info.name + info.schema + info.resources + info.reporter;\r\n\r\n          if (urlsList[characteristics]) {\r\n            // log.log('[Registry] reusage of dataObject URL');\r\n            if (typeof(urlsList[characteristics]) === 'string') {\r\n              let arrayToResolve = [];\r\n              arrayToResolve.push(urlsList[characteristics]);\r\n              return resolve(arrayToResolve);\r\n            } else {\r\n              return resolve(urlsList[characteristics]);\r\n            }\r\n          } else {\r\n            // log.log('[Registry] no dataObject URL was previously registered');\r\n            return resolve(undefined);\r\n          }\r\n        }\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n  * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.\r\n  * @param  {Sandbox}             sandbox               sandbox\r\n  * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor\r\n  * @param {object} IdpConstraint - constraints to be used when selecting the identity to be associated with the Hyperty including origin, idp, and idHint.\r\n  * @return {HypertyURL}          HypertyURL\r\n  */\r\n  registerHyperty(sandbox, importPath, descriptor, addressURL, IdpConstraint) {\r\n    let _this = this;\r\n\r\n    let hypertyCapabilities;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n\r\n      _this.idModule.getIdentityAssertion(IdpConstraint).then(function(result) {\r\n\r\n        let userProfile = result.userProfile;\r\n\r\n        // log.log('[Registry registerHyperty] userProfile', userProfile);\r\n\r\n        if (_this._messageBus === undefined) {\r\n          reject('[Registry registerHyperty] MessageBus is undefined');\r\n        } else {\r\n          //call check if the protostub exist: to be removed\r\n          /*  _this.resolve(domainUrl).then(function(a) {\r\n            // log.log('[Registry registerHyperty] stub to domain registry- ', a);*/\r\n\r\n//          _this.storageManager.get('registry:HypertyURLs').then((urlsList) => {\r\n\r\n        \r\n\r\n            // log.log('[Registry registerHyperty] storageManager] - ', urlsList);\r\n\r\n            _this._getResourcesAndSchemes(descriptor).then((value) => {\r\n\r\n              hypertyCapabilities = value;\r\n\r\n/*              if (!urlsList) {\r\n                urlsList = {};\r\n              }*/\r\n\r\n              _this._hypertyUrls[hypertyCapabilities.resources + hypertyCapabilities.dataSchema + hypertyCapabilities.name] = addressURL.address;\r\n              _this.storageManager.set('registry:HypertyURLs', 0, _this._hypertyUrls).then(() => {\r\n\r\n\r\n                //check whether the received sanbox e ApplicationSandbox or a normal sandbox\r\n                if (sandbox.type === 'app') {\r\n                  _this.sandboxesList.appSandbox[addressURL.address[0]] = sandbox;\r\n                } else if (sandbox.type === 'normal') {\r\n                  _this.sandboxesList.sandbox[addressURL.address[0]] = sandbox;\r\n                } else {\r\n                  reject('Wrong SandboxType');\r\n                }\r\n\r\n                let p2pHandler;\r\n                let p2pRequester;\r\n\r\n                if (Object.keys(_this.p2pHandlerStub).length !== 0) {\r\n                  p2pHandler = _this.p2pHandlerStub[_this.runtimeURL].url;\r\n                  p2pRequester = runtimeUtils.runtimeDescriptor.p2pRequesterStub;\r\n                }\r\n\r\n                let hyperty = new registry_HypertyInstance(_this.identifier, _this.registryURL, importPath, descriptor,\r\n                  addressURL.address[0], userProfile, 'guid', _this.runtimeURL, 'ctx', p2pHandler,\r\n                 p2pRequester, hypertyCapabilities.dataSchema, hypertyCapabilities.resources);\r\n\r\n                _this.hypertiesList.push(hyperty);\r\n\r\n                /*--- start here move p2p and domain registry related features to a separated function.-------..*/\r\n\r\n                let registrationAtdomain = true;\r\n\r\n                if ( descriptor.hasOwnProperty(\"configuration\") && descriptor.configuration.hasOwnProperty(\"domain_registration\")) {\r\n                  registrationAtdomain = descriptor.configuration.domain_registration;\r\n                  }\r\n\r\n                  if (registrationAtdomain) _this._domainRegistration.registerHyperty(hyperty, addressURL.newAddress).then((registered)=> {resolve(registered)});\r\n                  else resolve({ url: hyperty.hypertyURL});\r\n\r\n             /*------------------- END HERE MOVE DOMAIN REGISTRY ------------------*/\r\n              }).catch(function(reason) {\r\n                // log.log('[Registry registerHyperty] Error: ', reason);\r\n                reject(reason);\r\n              });\r\n            });\r\n//          });\r\n        }\r\n      }, function(err) {\r\n        reject('[Registry registerHyperty] ', err);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n  * To unregister a previously registered Hyperty\r\n  * @param  {HypertyURL}          HypertyURL url        url\r\n  */\r\n  unregisterHyperty(url) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let found = false;\r\n      let index = 0;\r\n\r\n      for\t(index = 0; index < _this.hypertiesList.length; index++) {\r\n        let hyperty = _this.hypertiesList[index];\r\n        if (hyperty !== undefined) {\r\n          if (hyperty.hypertyURL === url) {\r\n            found = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (found === false) {\r\n        reject('Hyperty not found');\r\n      } else {\r\n        delete _this.hypertiesList[index];\r\n        resolve('Hyperty successfully deleted');\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).\r\n  * @param  {DomainURL}           DomainURL            url\r\n  * @return {RuntimeURL}           RuntimeURL\r\n  */\r\n  discoverProtostub(url) {\r\n    if (!url) throw new Error('Parameter url needed');\r\n    let _this = this;\r\n\r\n    let dividedURL = divideURL(url);\r\n    let domainURL = dividedURL.domain;\r\n\r\n    if (_this.protostubsList.hasOwnProperty(domainURL) && _this.protostubsList[domainURL].status === STATUS.LIVE) {\r\n      return (_this.protostubsList[domainURL]);\r\n    } else {\r\n\r\n      _this.protostubsList[domainURL] = {\r\n        status: STATUS.DEPLOYING\r\n      };\r\n\r\n      throw new Error('[Registry - discoverProtoStub ] Message Node Protostub Not Found. Creating one');\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  * To discover protocol stubs available in the runtime for a certain remote runtime URL. If available, it returns the runtime url for the protocol stub that connects to the requested domain.\r\n  * Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).\r\n  * @param  {RuntimeURL}           RuntimeURL            url\r\n  * @return {p2pRequester}           RuntimeURL\r\n  */\r\n  discoverP2PStub(runtimeURL) {\r\n    let _this = this;\r\n\r\n    if (runtimeURL) {\r\n\r\n      if (_this.p2pRequesterStub.hasOwnProperty(runtimeURL) && _this.p2pRequesterStub[runtimeURL].status === STATUS.LIVE) {\r\n        return (_this.p2pRequesterStub[runtimeURL]);\r\n      } else {\r\n        _this.p2pRequesterStub[runtimeURL] = {\r\n          status: STATUS.CREATED\r\n        };\r\n\r\n        throw new Error('[Registry - discoverP2PStub ] P2P Requester Stub Not Found. Creating one');\r\n\r\n      }\r\n    } else {\r\n\r\n      if (_this.p2pHandlerStub.hasOwnProperty(_this.runtimeURL)) {\r\n        return (_this.p2pHandlerStub[_this.runtimeURL]);\r\n      } else {\r\n        _this.p2pHandlerStub[_this.runtimeURL] = {\r\n          status: STATUS.CREATED\r\n        };\r\n\r\n        throw new Error('[Registry - discoverP2PStub ] P2P Handler Stub Not Found.');\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\r\n   * @param  {Sandbox}       Sandbox\r\n   * @param  {stubID}        Domain or hyperty runtime to register the stub\r\n   * @param  {descriptorURL}     Catalogue URL of the Protostub descriptor\r\n   * @param  {descriptor}     Protostub descriptor\r\n   * @return {RuntimeProtoStubURL}\r\n   */\r\n  registerStub(sandbox, stubID, p2pConfig, descriptorURL, descriptor) {\r\n    let _this = this;\r\n\r\n    let _stubDescriptor = descriptor;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let runtimeProtoStubURL;\r\n\r\n      //check if messageBus is registered in registry or not\r\n      if (_this._messageBus === undefined) {\r\n        reject('MessageBus not found on registerStub');\r\n      }\r\n\r\n      Registry_log.info('[Registry - registerStub] - stubID ', stubID);\r\n\r\n      /* if (!stubID.indexOf('msg-node.')) {\r\n        stubID = stubID.substring(stubID.indexOf('.') + 1);\r\n      }*/\r\n\r\n      let P2PRequesterStub;\r\n\r\n      if (p2pConfig) {\r\n\r\n        if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {\r\n          runtimeProtoStubURL = _this.p2pHandlerURL;\r\n\r\n          _this.p2pHandlerStub[stubID] = {\r\n            url: runtimeProtoStubURL,\r\n            status: STATUS.CREATED\r\n          };\r\n\r\n          _this.p2pHandlerAssociation[_this.runtimeURL] = [];\r\n\r\n          _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\r\n          Registry_log.info('[Registry - registerStub - P2PHandlerStub] - ', stubID, ' - ', runtimeProtoStubURL);\r\n          resolve(_this.p2pHandlerStub[stubID]);\r\n        } else {\r\n          P2PRequesterStub = p2pConfig.p2pRequesterStub;\r\n          runtimeProtoStubURL = 'runtime://' + divideURL(p2pConfig.remoteRuntimeURL).domain + '/p2prequester/' + generateGUID();\r\n          Registry_log.info('[Registry - registerStub - P2PRequesterStub] - ', P2PRequesterStub, ' - ', runtimeProtoStubURL);\r\n\r\n          // to be clarified what is this p2pHandlerAssociation\r\n          _this.p2pHandlerAssociation[_this.runtimeURL].push(runtimeProtoStubURL);\r\n          _this.p2pRequesterStub[stubID] = {\r\n            url: runtimeProtoStubURL,\r\n            status: STATUS.CREATED\r\n          };\r\n\r\n          _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\r\n\r\n          //Setup P2P Requester path into MN\r\n\r\n          let msg = {\r\n            type: 'subscribe',\r\n            from: _this.registryURL,\r\n            to: 'domain://msg-node.' + _this._domain + '/sm',\r\n            body: {\r\n              subscribe: [runtimeProtoStubURL],\r\n              source: _this.registryURL\r\n            }\r\n          };\r\n\r\n          _this._messageBus.postMessage(msg, (reply) => {\r\n            // log.log('[Registry - register Stub] p2pRequester path setup: ', reply);\r\n          });\r\n\r\n          resolve(_this.p2pRequesterStub[stubID]);\r\n        }\r\n      } else {\r\n        console.log('[Registry - registerStub - Normal Stub] descriptor', descriptor);\r\n\r\n        if ( !typeof(descriptor) === 'string' && descriptor.hasOwnProperty('_interworking') && descriptor._interworking) {\r\n          runtimeProtoStubURL = 'runtime://' + stubID + '/protostub/' + 'scheme1';\r\n        } else {\r\n          runtimeProtoStubURL = 'runtime://' + stubID + '/protostub/' + generateGUID();\r\n        }\r\n\r\n        Registry_log.info('[Registry - registerStub - Normal Stub] - ', stubID);\r\n\r\n        // TODO: Optimize this\r\n        _this.protostubsList[stubID] = {\r\n          url: runtimeProtoStubURL,\r\n          status: STATUS.DEPLOYING\r\n        };\r\n\r\n        if (descriptorURL) {\r\n          _this.protostubsList[stubID].descriptorURL = descriptorURL;\r\n        }\r\n\r\n        if (_stubDescriptor && (_stubDescriptor.interworking)) {\r\n          _this.protostubsList[stubID].interworking = _stubDescriptor.interworking;\r\n        }\r\n\r\n        _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\r\n\r\n        resolve(_this.protostubsList[stubID]);\r\n      }\r\n\r\n      // resolve(runtimeProtoStubURL);\r\n\r\n      _this._messageBus.addListener(runtimeProtoStubURL + '/status', (msg) => {\r\n        _this._onProtostubStatusEvent(msg);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * To Process status events fired by protostubs\r\n  * @param  {Message}   message     Event Message\r\n  */\r\n\r\n  _onProtostubStatusEvent(msg) {\r\n\r\n    let _this = this;\r\n\r\n    // log.log('[Registry onProtostubStatusEvent]: ', msg);\r\n\r\n    let runtimeProtoStubURL = msg.from;\r\n\r\n    if (!msg.to.includes('/status')) {\r\n      Registry_log.error('[Registry onProtostubStatusEvent] Not Status Event: ', msg);\r\n      return;\r\n    } else {// broadcast Protostub status event to all Hyperties\r\n      let from =  msg.from;\r\n      msg.from = _this.runtimeURL;\r\n      msg.to = _this.runtimeURL+'/status';\r\n      msg.body.resource = from;\r\n      _this._messageBus.postMessage(msg);\r\n    }\r\n\r\n    // process status events from message node protostubs\r\n\r\n    if (runtimeProtoStubURL.includes('/protostub/')) {\r\n\r\n    // TODO: uncomment below when protostubs are updated with new status value \"live\"\r\n      Object.keys(_this.protostubsList).filter((key) => {\r\n        return _this.protostubsList[key].url === runtimeProtoStubURL;\r\n      }).map((key) => {\r\n        _this.protostubsList[key].status = msg.body.value;\r\n\r\n        // log.log('[Registry - onProtostubStatusEvent] - Protostub status: ', _this.protostubsList[key]);\r\n      });\r\n    } else { // process status events from p2p connections\r\n\r\n      if (msg.body.resource) {\r\n        let remoteRuntimeURL = msg.body.resource;\r\n\r\n        if (_this.p2pConnectionList[remoteRuntimeURL]) {\r\n          _this.p2pConnectionList[remoteRuntimeURL].status =  msg.body.value;\r\n          _this.p2pConnectionList[remoteRuntimeURL].url =  runtimeProtoStubURL;\r\n        } else {\r\n\r\n          let  p2pConnection = {\r\n            status: msg.body.value,\r\n            url: runtimeProtoStubURL\r\n          };\r\n\r\n          _this.p2pConnectionList[remoteRuntimeURL] =  p2pConnection;\r\n        }\r\n\r\n        // log.log('[Registry - onProtostubStatusEvent] - P2PConnection status: ', _this.p2pConnectionList[remoteRuntimeURL]);\r\n\r\n        // Update P2P Requester protostub if it is coming from there\r\n        if (runtimeProtoStubURL.includes('/p2prequester/')) {\r\n          _this.p2pRequesterStub[remoteRuntimeURL].status = msg.body.value;\r\n\r\n          // log.log('[Registry - onProtostubStatusEvent] - P2P Requester status: ', _this.p2pRequesterStub[remoteRuntimeURL]);\r\n        } else {\r\n          // if from P2PHandler with status disconencted, lets remove from p2pConnectionList\r\n          if (msg.body.value === 'disconnected') delete _this.p2pConnectionList[remoteRuntimeURL];\r\n        }\r\n\r\n      } else {\r\n        if (runtimeProtoStubURL.includes('/p2prequester/')) {\r\n          // It is an event from P2P Requester without mandatory \"resource\" field\r\n          Registry_log.error('[Registry onProtostubStatusEvent] resource missing: ', msg);\r\n          return;\r\n        } else {\r\n          // It is an event from P2P Handler\r\n          _this.p2pHandlerStub[_this.runtimeURL].status = msg.body.value;\r\n\r\n          // log.log('[Registry - onProtostubStatusEvent] - P2PHandler Stub status: ', _this.p2pHandlerStub[_this.runtimeURL]);\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  * To unregister a previously registered protocol stub\r\n  * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL\r\n  */\r\n  unregisterStub(hypertyRuntimeURL) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (_this.protostubsList.hasOwnProperty(hypertyRuntimeURL)) {\r\n        delete _this.protostubsList[hypertyRuntimeURL];\r\n        resolve('ProtostubURL removed');\r\n      } else {\r\n        reject('Error on unregisterStub: Hyperty not found');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\r\n   * @param {Sandbox}        Sandbox\r\n   * @param  {DomainURL}     DomainURL service provider domain\r\n   * @return {RuntimeIdpProxyURL}\r\n   */\r\n  registerIdpProxy(sandbox, domainURL) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let idpProxyStubURL;\r\n\r\n      //check if messageBus is registered in registry or not\r\n      if (_this._messageBus === undefined) {\r\n        reject('MessageBus not found on registerStub');\r\n      }\r\n\r\n      idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + generateGUID();\r\n\r\n      // TODO: Optimize this\r\n      _this.idpProxyList[domainURL] = {\r\n        url: idpProxyStubURL,\r\n        status: STATUS.DEPLOYING\r\n      };\r\n\r\n      _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox;\r\n\r\n      // sandbox.addListener('*', function(msg) {\r\n      //   _this._messageBus.postMessage(msg);\r\n      // });\r\n\r\n      resolve(idpProxyStubURL);\r\n\r\n      _this._messageBus.addListener(idpProxyStubURL + '/status', (msg) => {\r\n        _this._onIdpProxyStatusEvent(msg);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * To Process status events fired by Idp Proxies\r\n  * @param  {Message}   message     Event Message\r\n  */\r\n\r\n  _onIdpProxyStatusEvent(msg) {\r\n\r\n    let _this = this;\r\n\r\n    // log.log('[Registry onIdpProxyStatusEvent]: ', msg);\r\n\r\n    let idpProxyURL = msg.from;\r\n\r\n    if (!msg.to.includes('/status')) {\r\n      Registry_log.error('[Registry onIdpProxyStatusEvent] Not Status Event: ', msg);\r\n      return;\r\n    }\r\n\r\n    Object.keys(_this.idpProxyList).filter((key) => {\r\n      return _this.idpProxyList[key].url === idpProxyURL;\r\n    }).map((key) => {\r\n      _this.idpProxyList[key].status = msg.body.value;\r\n\r\n      // log.log('[Registry - onIdpProxyStatusEvent] - Idp Proxy status: ', _this.idpProxyList[key]);\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers\r\n  * @param  {DomainURL}           DomainURL            url\r\n  * @return {RuntimeURL}           RuntimeURL         idpProxyUrl\r\n  */\r\n  discoverIdpProxy(url) {\r\n    if (!url) throw new Error('Parameter url needed');\r\n    let _this = this;\r\n\r\n    let dividedURL = divideURL(url);\r\n    let domainURL = dividedURL.domain;\r\n\r\n    if (_this.idpProxyList.hasOwnProperty(domainURL) && _this.idpProxyList[domainURL].status === STATUS.LIVE) {\r\n      return (_this.idpProxyList[domainURL]);\r\n    } else {\r\n\r\n      _this.idpProxyList[domainURL] = {\r\n        status: STATUS.PROGRESS\r\n      };\r\n\r\n      throw new Error('[Registry - discoverIdpProxy ] Idp Proxy Not Found. Creating one');\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.\r\n  * @param  {Message.Message} postMessage postMessage\r\n  * @param  {HypertyURL}          HypertyURL            hyperty\r\n  * @return {HypertyRuntimeURL}   HypertyRuntimeURL\r\n  */\r\n  registerPEP(postMessage, hyperty) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve) {\r\n      //TODO check what parameter in the postMessage the pep is.\r\n      _this.pepList[hyperty] = postMessage;\r\n      resolve('PEP registered with success');\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * To unregister a previously registered protocol stub\r\n  * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL\r\n  */\r\n  unregisterPEP(HypertyRuntimeURL) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let result = _this.pepList[HypertyRuntimeURL];\r\n\r\n      if (result === undefined) {\r\n        reject('Pep Not found.');\r\n      } else {\r\n        resolve('PEP successfully removed.');\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * To discover sandboxes available in the runtime for a certain domain and a certain set of capabilities. Required by the runtime UA to avoid more than one sandbox for the same domain.\r\n  * @param  {DomainURL} DomainURL url\r\n  * @return {RuntimeSandbox}           RuntimeSandbox\r\n  */\r\n  getSandbox(url, constraints) {\r\n    if (!url) throw new Error('Parameter url needed');\r\n\r\n    // log.log('[Registry getSandbox] getSandbox for: ', url, ' and capabilities: ', constraints);\r\n\r\n    let _this = this;\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let request;\r\n\r\n      //first try to find the url in the appSandbox list\r\n      request = _this.sandboxesList.appSandbox[url];\r\n\r\n      //if no appSandbox was found, try to search in the normal sandboxes list\r\n      if (!request) {\r\n        request = _this.sandboxesList.sandbox[url];\r\n\r\n        if (!request) {\r\n\r\n          let domain;\r\n\r\n          if (url.includes('://')) {\r\n            domain = divideURL(url).domain;\r\n          } else {\r\n            domain = url;\r\n          }\r\n\r\n          // search in the sandboxes list for a entry containing the domain given\r\n          for (let sandbox in _this.sandboxesList.sandbox) {\r\n            //todo: uncomment sandbox constraints match condition with runtime sharing\r\n            if (sandbox.includes(domain) && _this.sandboxesList.sandbox[sandbox].matches(constraints)) {\r\n              const current = _this.sandboxesList.sandbox[sandbox];\r\n              const match = Object.keys(constraints).filter(constraint => {\r\n                return (constraint === 'browser' && current.type === SandboxType.NORMAL) ||\r\n                      (constraint === 'windowSanbox' && current.type === SandboxType.WINDOW);\r\n\r\n              }).length > 0 ? true : false;\r\n\r\n              if (match) { request = current; }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!request) {\r\n        reject('no sandbox found for: ' + url);\r\n      } else {\r\n        resolve(request);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  resolveNormalStub(url) {\r\n    // log.log('resolveNormalStub ' + url);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      //split the url to find the domainURL. deals with the url for example as:\r\n      //\"hyperty-runtime://sp1/protostub/123\",\r\n      let dividedURL = divideURL(url);\r\n      let domainUrl = dividedURL.domain;\r\n      let type = dividedURL.type;\r\n\r\n      if (url.includes(_this.runtimeURL) || url.includes('://sandbox/')) {\r\n        Registry_log.error('[Registry - resolve] URL to be resolved should have listeners ', url);\r\n        return reject('[Registry - resolve] URL to be resolved should have listeners ', url);\r\n      }\r\n\r\n      // resolve the domain protostub in case of a message to global registry\r\n      if (url.includes('global://registry')) {\r\n        domainUrl = _this._domain;\r\n      } else {\r\n        if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {\r\n          domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);\r\n        }\r\n      }\r\n\r\n      _this.isLegacy(url).then((isLegacy) => {\r\n\r\n        // if legacy it should resolve for <protocol>.<domain>\r\n        if (isLegacy && type !== 'domain-idp') {\r\n          domainUrl = type + '.' + getUserIdentityDomain(url);\r\n        }\r\n\r\n        Registry_log.info('[Registry.resolve] domainUrl:', domainUrl);\r\n\r\n        let registredComponent;\r\n\r\n        if (type === 'domain-idp') {\r\n          registredComponent  = _this.idpProxyList.hasOwnProperty(domainUrl) ? _this.idpProxyList[domainUrl] : false;\r\n        } else {\r\n          registredComponent  = _this.protostubsList.hasOwnProperty(domainUrl) ? _this.protostubsList[domainUrl] : false;\r\n        }\r\n\r\n        Registry_log.info('[Registry.resolve] registred:', registredComponent);\r\n\r\n        // TODO since the protostubs have other states this should be revised, because the status could change from DEPLOYED to LIVE\r\n        // TODO and this validation will trigger a new load of IDPProxy or Protostub;\r\n        if (registredComponent && registredComponent.hasOwnProperty('status') &&\r\n         (registredComponent.status === STATUS.DEPLOYED || registredComponent.status === STATUS.CREATED ||\r\n          registredComponent.status === STATUS.LIVE || registredComponent.status === STATUS.DISCONNECTED)) {\r\n          Registry_log.info('[Registry.resolve] Resolved: ', registredComponent.url, registredComponent.status);\r\n          resolve(registredComponent.url);\r\n        } else {\r\n          //todo: use switch-case to support other types of stubs\r\n          if (type === 'domain-idp') {\r\n\r\n            // The IdP Proxy does not exist, let's prepare its deployment by watching its status\r\n\r\n            _this.watchingYou.observe('idpProxyList', (change) => {\r\n\r\n              // log.log('[Registry - resolveNormalStub] idpProxyList changed ' + _this.idpProxyList);\r\n\r\n              let keypath = change.keypath;\r\n\r\n              if (keypath.includes('status'))\r\n                keypath = keypath.replace('.status', '');\r\n\r\n              if (keypath === domainUrl && change.name === 'status' && change.newValue === STATUS.CREATED) {\r\n                // log.log('[Registry - resolveNormalStub] idpProxyList is live ' + _this.idpProxyList[domainUrl]);\r\n                resolve(_this.idpProxyList[domainUrl].url);\r\n              }\r\n            });\r\n\r\n            if (!registredComponent || registredComponent.status === STATUS.FAILED ) {\r\n              // this process will load the idp proxy, because is not yet registered;\r\n              Registry_log.info('[Registry.resolveNormalStub] deploy new IDPProxy: ', domainUrl);\r\n              _this.loader.loadIdpProxy(domainUrl).then(() => {\r\n\r\n                Registry_log.info('[Registry.resolveNormalStub] IdP Proxy deployed: ', _this.idpProxyList[domainUrl]);\r\n\r\n              }).catch((reason) => {\r\n                Registry_log.error('[Registry.resolve] Error resolving Load IDPProxy: ', reason);\r\n                _this.idpProxyList[domainUrl].status = 'deployment-failed';\r\n                reject(reason);\r\n              });\r\n            }\r\n\r\n\r\n          } else {\r\n\r\n            // The protoStub does not exist, let's prepare its deployment by watching its status\r\n\r\n            _this.watchingYou.observe('protostubsList', (change) => {\r\n\r\n              // log.log('[Registry - resolveNormalStub] protostubsList changed ' + _this.protostubsList);\r\n\r\n              let keypath = change.keypath;\r\n\r\n              if (keypath.includes('status'))\r\n                keypath = keypath.replace('.status', '');\r\n\r\n              if (keypath === domainUrl && change.name === 'status' && change.newValue === STATUS.CREATED) {\r\n                // log.log('[Registry - resolve] protostub is live ' + _this.protostubsList[domainUrl]);\r\n                resolve(_this.protostubsList[domainUrl].url);\r\n              }\r\n            });\r\n\r\n            if (!registredComponent || registredComponent.status === STATUS.FAILED) {\r\n              // lets deploy the protostub\r\n              Registry_log.info('[Registry.resolve] trigger new ProtocolStub: ', domainUrl);\r\n              _this.loader.loadStub(domainUrl).then(() => {\r\n\r\n                // log.log('[Registry - resolveNormalStub] Stub deployed: ', _this.protostubsList[domainUrl]);\r\n              }).catch((reason) => {\r\n                Registry_log.error('[Registry.resolveNormalStub] Error resolving Load ProtocolStub: ', reason);\r\n                reject(reason);\r\n              });\r\n            }\r\n\r\n          }\r\n\r\n        }\r\n\r\n      }).catch((reason) => {\r\n        Registry_log.error('[Registry.resolve] Error resolving islegacy: ', reason);\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).\r\n  * @param  {URL.URL}  url       url\r\n  * @return {Promise<URL.URL>}                 Promise <URL.URL>\r\n  */\r\n  resolve(msg) {\r\n    Registry_log.info('[Registry - Resolve] -  ', msg);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let url = msg.to ? msg.to : msg;\r\n\r\n      let p2p = (msg.body && msg.body.p2p) ? msg.body.p2p : false;\r\n\r\n      // log.log('P2P: ', p2p, url);\r\n      // log.log('P2P - p2pHandlerStub: ', !_this.p2pHandlerStub[_this.runtimeURL], _this.p2pHandlerStub, _this.runtimeURL);\r\n      // log.log('P2P - isBackendServiceURL: ', isBackendServiceURL(url), isBackendServiceURL, url);\r\n      // log.log('P2P - includes runtimeURL: ', url.includes(_this.runtimeURL));\r\n      // log.log('P2P - includes p2phandler: ', url.includes('/p2phandler/'));\r\n      // log.log('P2P - includes p2prequester: ', url.includes('/p2prequester/'));\r\n\r\n      // Skip p2p procedure when not supported by the Runtime or for backend services\r\n\r\n      if (!_this.p2pHandlerStub[_this.runtimeURL] || isBackendServiceURL(url) || url.includes(_this.runtimeURL) || url.includes('/p2phandler/') || url.includes('/p2prequester/')) {\r\n\r\n        Registry_log.info('[Registry - resolve] - Resolve normal stub: ', _this.p2pHandlerStub, _this.runtimeURL, isBackendServiceURL(url), p2p, url);\r\n        _this.resolveNormalStub(url).then((returnURL) => {\r\n          resolve(returnURL);\r\n        });\r\n\r\n      } else {\r\n\r\n        Registry_log.info('[Registry - resolve] - checkP2P: ', p2p, url, _this._p2pConnectionResolve);\r\n        _this._p2pConnectionResolve.checkP2P(msg).then((registeredP2P) => {\r\n\r\n          // log.log('[Registry - resolve] found registered P2P: ', registeredP2P);\r\n\r\n          let p2pConnection = _this.p2pConnectionList[registeredP2P.runtime];\r\n\r\n          if (!p2pConnection) {\r\n            p2pConnection = registeredP2P;\r\n            _this.p2pConnectionList[registeredP2P.runtime] = p2pConnection;\r\n          }\r\n\r\n          switch (p2pConnection.status) {\r\n            case STATUS.LIVE:\r\n              msg.body.peer = registeredP2P.runtime;\r\n              resolve(p2pConnection.url, msg);\r\n              break;\r\n            case STATUS.CREATED: // p2p connection setup is ongoing, use MN Stub\r\n            case STATUS.PROGRESS:\r\n              _this.resolveNormalStub(url).then((returnURL) => {\r\n                resolve(returnURL);\r\n              });\r\n              break;\r\n            case STATUS.DISCONNECTED: // p2p connection stub was disconnected, let's ask to connect again\r\n              Registry_log.info('[Registry - Resolve] - p2pConnection is disconnected lets try to reconnect');\r\n              _this._p2pConnectionResolve.reconnectP2PRequester(p2pConnection).then((returnURL) => {\r\n                // log.log('[Registry - Resolve] - was reconnected with p2pRequesterStubt: ', returnURL);\r\n                resolve(returnURL);\r\n              }, (reason) => {\r\n                Registry_log.info('[Registry - Resolve] - Reason: ', reason);\r\n\r\n                _this.resolveNormalStub(url).then((returnURL) => {\r\n                  resolve(returnURL);\r\n                });\r\n              });\r\n              break;\r\n            default:\r\n\r\n              Registry_log.info('[Registry - resolve] - P2P: ', p2p);\r\n              if (!p2p) { // no p2p connection exists and the message sender does not ask one. Lets use the MN Stub\r\n                _this.resolveNormalStub(url).then((returnURL) => {\r\n                  resolve(returnURL);\r\n                });\r\n\r\n              } else {\r\n                _this._setupP2PRequester(registeredP2P).then((returnURL) => { // no p2p connection exists but the message sender is asking one. Lets try to setup one\r\n                  resolve(returnURL);\r\n                }, (reason) => {\r\n                  Registry_log.info('[Registry - Resolve] - Reason: ', reason);\r\n\r\n                  _this.resolveNormalStub(url).then((returnURL) => {\r\n                    resolve(returnURL);\r\n                  });\r\n                });\r\n              }\r\n              break;\r\n          }\r\n        }, (reason) => {\r\n          Registry_log.info('[Registry - Resolve] - Reason: ', reason);\r\n\r\n          _this.resolveNormalStub(url).then((returnURL) => {\r\n            resolve(returnURL);\r\n          });\r\n        });\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  _setupP2PRequester(input) {\r\n    let _this = this;\r\n\r\n    Registry_log.log('[Registry._setupP2PConnection] loadStub with p2pRequester: ', input);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let remoteRuntime = input.runtime;\r\n\r\n      let p2pConfig = { remoteRuntimeURL: remoteRuntime, p2pHandler: input.p2pHandler, p2pRequesterStub: true };\r\n\r\n      // lets prepare the p2pRequesterSTub deployment by setting an observer to its status changes\r\n\r\n      _this.watchingYou.observe('p2pRequesterStub', (change) => {\r\n\r\n        Registry_log.log('[Registry._setupP2PConnection] p2pRequesterStubs changed ' + _this.p2pRequesterStub);\r\n\r\n        if (change.keypath.split('.')[0] === remoteRuntime && change.name === 'status' && change.newValue === STATUS.LIVE) {\r\n          Registry_log.log('[Registry._setupP2PConnection] p2pRequester is live ' + _this.p2pRequesterStub[remoteRuntime]);\r\n          resolve(_this.p2pRequesterStub[remoteRuntime].url);\r\n        }\r\n      });\r\n\r\n      //  stub load\r\n      _this.loader.loadStub(input.p2pRequester, p2pConfig).then(() => {\r\n\r\n        Registry_log.log('[Registry._setupP2PConnection] p2pRequester deployed: ', _this.p2pRequesterStub[remoteRuntime]);\r\n\r\n\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * To verify if url is for a legacy service.\r\n  * @param  {URL.URL}  url      url\r\n  * @return {boolean}\r\n  */\r\n  isLegacy(url) {\r\n\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (url === _this._domain) {\r\n        return resolve(false);\r\n      }\r\n\r\n      Registry_log.log('[Registry] [Registry.Registry.isLegacy] ', url);\r\n\r\n      // TODO: to be defined in the runtime configuration\r\n      let nonLegacy = ['hyperty-runtime', 'domain', 'global', 'hyperty'];\r\n\r\n      let urlDivided = divideURL(url);\r\n\r\n      if (nonLegacy.indexOf(urlDivided.type) !== -1 || urlDivided.domain === _this._domain) {\r\n        return resolve(false);\r\n      }\r\n\r\n      // process User URLs\r\n      if (url.split('@').length > 1) {\r\n        let domain = urlDivided.domain;\r\n\r\n        // log.log('[Registry] [Registry.Registry.isLegacy] domain: ', domain);\r\n        if (_this.idpLegacyProxyList.hasOwnProperty(domain)) {\r\n\r\n          let result = _this.idpLegacyProxyList[domain];\r\n\r\n          if (result.interworking) {\r\n            return resolve(result.interworking);\r\n          } else {\r\n            return resolve(false);\r\n          }\r\n        }\r\n\r\n        _this._loader.descriptors.getIdpProxyDescriptor(domain).then((result) => {\r\n\r\n          // log.log('[Registry] [Registry.Registry.isLegacy] Legacy stub descriptor: ', result);\r\n\r\n          if (result.interworking) {\r\n            _this.idpLegacyProxyList[domain] = result;\r\n            resolve(result.interworking);\r\n          } else {\r\n            resolve(false);\r\n          }\r\n\r\n        }).catch((reason) => {\r\n          Registry_log.warn('problem loading idp proxy descriptor for domain:', domain, ' because ', reason);\r\n          reject(reason);\r\n        });\r\n      } else { // process protostub URLs\r\n        resolve(_this.isInterworkingProtoStub(url));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * To verify if URL is locally registered or not.\r\n  * @param  {URL.URL}  url      url\r\n  * @return {boolean}\r\n  */\r\n\r\n  isLocal(url) {\r\n\r\n    let runtimeScheme = ['hyperty-runtime', 'runtime'];\r\n    let hypertyScheme = ['hyperty'];\r\n    let urlScheme = url.split('://')[0];\r\n\r\n    // Process Runtime Core URLs.\r\n    // Messages originated from protostubs should also not include the runtimeURL in its URL.\r\n\r\n    if (runtimeScheme.indexOf(urlScheme) !== -1) {\r\n      return url.includes(this.runtimeURL);\r\n    }\r\n\r\n    // Process Hyperty URLs\r\n    // Todo: hypertiesList should be an object not an array\r\n\r\n    if (hypertyScheme.indexOf(urlScheme) !== -1) {\r\n\r\n      for (let index in this.hypertiesList) {\r\n        let hyperty = this.hypertiesList[index];\r\n        if (hyperty.hypertyURL === url) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    // Process Data Object URLs\r\n\r\n    if (url.includes('/subscription')) {\r\n      url = url.substring(0, url.indexOf('/subscription'));\r\n    }\r\n\r\n    let dataObject = this.dataObjectList[url];\r\n\r\n    if (dataObject) {\r\n      if (dataObject.interworking) {\r\n        return !dataObject.interworking;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n  * To verify if protostub is to interwork with a legacy domain.\r\n  * @param  {URL.URL}  runtimeProtostubURL      The runtime URL of the Protostub\r\n  * @return {boolean}\r\n  */\r\n\r\n  isInterworkingProtoStub(runtimeProtostubURL) {\r\n\r\n    let _this = this;\r\n\r\n    if (typeof runtimeProtostubURL === 'boolean') {\r\n      return false;\r\n    }\r\n\r\n    if (!(runtimeProtostubURL.includes('/protostub/'))) {\r\n      return false;\r\n    }\r\n\r\n    let filtered = Object.keys(_this.protostubsList).filter((key) => {\r\n      return _this.protostubsList[key].url === runtimeProtostubURL;\r\n    }).map((key) => {\r\n\r\n      if (_this.protostubsList[key].hasOwnProperty('interworking')) {\r\n        return _this.protostubsList[key].interworking;\r\n      } else {\r\n        return false;\r\n      }\r\n    })[0];\r\n\r\n    return filtered;\r\n  }\r\n}\r\n\r\n/* harmony default export */ var registry_Registry = (Registry_Registry);\r\n\n// CONCATENATED MODULE: ./src/runtime/runtimeConfiguration.js\nconst runtimeConfiguration_runtimeConfiguration = {\r\n\r\n  // TODO this should be changed with the definition used for indexeddb\r\n  // look at: https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\r\n  // Now we are using the definition for Dexie; (http://dexie.org/docs/Version/Version.stores())\r\n  storageSchemas: {\r\n    capabilities: {\r\n      capabilities: 'key,version,value'\r\n    },\r\n    subscriptions: {\r\n      subscriptions: 'key,version,value'\r\n    },\r\n    runtime: {\r\n      'runtime:URL': 'key,version,value',\r\n      'p2pHandler:URL': 'key,version,value'\r\n    },\r\n    registry: {\r\n      'registry:DataObjectURLs': 'key,version,value',\r\n      'registry:HypertyURLs': 'key,version,value'\r\n    },\r\n    cryptoManager: {\r\n      userAsymmetricKey: 'key,version,value',\r\n      dataObjectSessionKeys: 'key,version,value'\r\n    },\r\n    identity: {\r\n      accessTokens: 'key,version,value',\r\n      identities: 'userURL, userProfile.email, userProfile.userURL, userProfile.name'\r\n    },\r\n    runtimeCatalogue: {\r\n      runtimeCatalogue: '&cguid, accessControlPolicy, constraints, dataObjects, type, objectName, sourcePackage, version, url'\r\n    },\r\n    policy: {\r\n      'rethink:activePolicy': 'key,version,value',\r\n      'rethink:groups': 'key,version,value',\r\n      'rethink:userPolicies': 'key,version,value',\r\n      'rethink:spPolicies': 'key,version,value'\r\n    },\r\n    syncherManager: {\r\n      'syncherManager:ObjectURLs': 'key,version,value',\r\n      'remotes': 'key,version,value'\r\n    },\r\n    hypertyResources: {\r\n      hypertyResources: '&resourceURL, name, contentUrl, content, created, reporter, resourceType'\r\n    }\r\n  },\r\n\r\n  runtimeURLS: {\r\n    registry: {\r\n      prefix: 'hyperty-runtime://',\r\n      suffix: 'registry'\r\n    },\r\n    identityModule: {\r\n      prefix: 'hyperty-runtime://',\r\n      suffix: '/idm'\r\n    },\r\n    runtimeUA: {\r\n      prefix: 'hyperty-runtime://',\r\n      suffix: '/ua'\r\n    },\r\n    catalogue: {\r\n      prefix: 'hyperty-runtime://',\r\n      suffix: '/catalogue'\r\n    },\r\n    graphConnector: {\r\n      prefix: 'hyperty-runtime://',\r\n      suffix: '/graph'\r\n    },\r\n    syncManager: {\r\n      prefix: 'hyperty-runtime://',\r\n      suffix: '/sm'\r\n    }\r\n  },\r\n  catalogueURLs: {\r\n    protocolstub: {\r\n      prefix: 'https://',\r\n      suffix: ':8080/.well-known/protocolstub/',\r\n      fallback: 'https://%domain%:8080/.well-known/protocolstub/'\r\n    },\r\n    'idp-proxy': {\r\n      prefix: 'https://',\r\n      suffix: ':8080/.well-known/idp-proxy/',\r\n      fallback: 'https://%domain%:8080/.well-known/idp-proxy/'\r\n    }\r\n  },\r\n  msgNodeURL: {\r\n    prefix: 'domain://msg-node.',\r\n    suffix: '',\r\n    hypertyAddressAllocation: '/hyperty-address-allocation',\r\n    objectAddressAllocation: '/object-address-allocation',\r\n    subscriptionManagement: '/sm'\r\n  },\r\n  domainRegistryURL: {\r\n    prefix: 'domain://registry.',\r\n    suffix: ''\r\n  },\r\n  globalRegistryURL: 'global://registry.',\r\n  remoteStorage: 'https://admin:admin@backup.rethink.alticelabs.com'\r\n};\r\n\n// CONCATENATED MODULE: ./src/identity/Identities.js\n// Log System\r\n\r\nlet Identities_log = loglevel[\"getLogger\"]('IdentityModule');\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.\r\n*\r\n*/\r\nclass Identities_Identities {\r\n\r\n  constructor(type, storageManager) {\r\n    let _this = this;\r\n\r\n    _this._watchingYou = new utils_WatchingYou();\r\n\r\n    _this._storageManager = storageManager;\r\n    _this._guid;\r\n    _this._type = type;\r\n    _this._identities = {};\r\n    _this._accessTokens = _this.watchingYou.watch('accessTokens', {}, true);\r\n\r\n  }\r\n\r\n  reset() {\r\n    this._identities = {};\r\n    console.log(this);\r\n    this.currentIdentity = undefined;\r\n    this.defaultIdentity = undefined;\r\n  }\r\n\r\n  get identities() {\r\n    return this._identities;\r\n  }\r\n\r\n  get accessTokens() {\r\n    return this._accessTokens;\r\n  }\r\n\r\n  get watchingYou() {\r\n    return this._watchingYou;\r\n  }\r\n\r\n  set guid(guid) {\r\n    this._guid = guid;\r\n  }\r\n\r\n  get guid() {\r\n    return this._guid;\r\n  }\r\n\r\n  set defaultIdentity(identifier) {\r\n    if (this.identities[identifier]) this._defaultIdentity = identifier;\r\n    else throw new Error('[Identities.set defaultIdentity ] Error: identity does not exist here: ', identifier);\r\n  }\r\n\r\n  set currentIdentity(identifier) {\r\n    if (this.identities[identifier]) this._currentIdentity = identifier;\r\n    else throw '[Identities.set currentIdentity ] Error: identity does not exist here: ', identifier;\r\n  }\r\n\r\n  get defaultIdentity() {\r\n    if (this._defaultIdentity) return Object.assign({}, this.identities[this._defaultIdentity]);\r\n    else return false;\r\n  }\r\n\r\n  get currentIdentity() {\r\n    return Object.assign({}, this.identities[this._currentIdentity]);\r\n  }\r\n\r\n  get identifiers() {\r\n    return Object.keys(this._identities);\r\n  }\r\n\r\n  getIdentity(identifier) {\r\n    return Object.assign({}, this._identities[identifier]);\r\n  }\r\n\r\n  loadIdentities() {\r\n    let _this = this;\r\n    return new Promise((resolve) => {\r\n\r\n      _this._storageManager.get(null, null, 'identities').then((identities) => {\r\n\r\n        Identities_log.info('[Identities.Load Identities] identities: ', identities);\r\n\r\n        if (identities) {\r\n          _this._identities = identities;\r\n\r\n          // let's set as default identity the one that expires later\r\n\r\n          _this.identifiers.forEach((id) => {\r\n            let timeNow = secondsSinceEpoch();\r\n            let identity = _this._identities[id];\r\n            let expires = identity.expires;\r\n\r\n            //            if (!identity.hasOwnProperty('interworking')\r\n            //            || !identity.interworking) {\r\n            _this.defaultIdentity = id;\r\n\r\n            if (parseInt(expires) > timeNow) {\r\n              _this.defaultIdentity.expires = parseInt(expires);\r\n              _this.currentIdentity = id;\r\n            }\r\n\r\n          });\r\n        }\r\n\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  loadAccessTokens() {\r\n    let _this = this;\r\n    return new Promise((resolve) => {\r\n\r\n      _this._storageManager.get('accessTokens').then((accessTokens) => {\r\n\r\n        if (accessTokens) _this._accessTokens = accessTokens;\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  // to confirm if this function is required when the App constraints the identity selection\r\n\r\n  addIdentity(identity) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (_this._isValid(identity)) {\r\n        let id = identity.identifiers[0];\r\n        Object.assign(this._identities[id], identity);\r\n        this._storeIdentity(identity).then(() => {\r\n          this._identities[id].status = 'created';\r\n          resolve();\r\n        });\r\n      } else { reject('[Identities.addIdentity] invalid IdAssertion'); }\r\n    });\r\n\r\n  }\r\n\r\n  addAssertion(assertion) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (_this._isValid(assertion)) {\r\n        assertion.userProfile.guid = _this._guid;\r\n        let userUrl = assertion.userProfile.userURL;\r\n        if (!_this.identities[userUrl]) _this._identities[userUrl] = assertion;\r\n        else _this.identities[userUrl] = assertion;\r\n\r\n        _this._store().then(() => {\r\n          this._identities[userUrl].status = 'created';\r\n          if (_this.defaultIdentity == false) {\r\n            _this.defaultIdentity = userUrl;\r\n          }\r\n          resolve(assertion);\r\n        });\r\n      } else { reject('[Identities.addAssertion] invalid IdAssertion: ', assertion); }\r\n    });\r\n\r\n  }\r\n\r\n  removeIdentity(userUrl) {\r\n    let _this = this;\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n      delete _this.identities[userUrl];\r\n\r\n      _this._store().then(() => {\r\n        resolve();\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  addAccessToken(accessToken) {\r\n    let _this = this;\r\n    Identities_log.info('[Identities.addAccessToken] ', accessToken);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (_this._isValidAccessToken(accessToken)) {\r\n\r\n        //        let newAccessToken = deepClone(accessToken);\r\n\r\n        _this._accessTokens[accessToken.domain] = accessToken;\r\n\r\n        _this._storeAccessTokens().then(() => {\r\n          _this._accessTokens[accessToken.domain].status = 'created';\r\n          resolve(accessToken);\r\n        });\r\n      } else { reject('[Identities.addIdentity] invalid AccessToken: ', accessToken); }\r\n    });\r\n\r\n  }\r\n\r\n  setAccessTokenInProgress(domain) {\r\n\r\n    if (this._accessTokens[domain]) this._accessTokens[domain].status = 'in-progress';\r\n    else this._accessTokens[domain] = { status: 'in-progress' };\r\n  }\r\n\r\n  getAccessToken(domain, resources) {\r\n    let accessToken = this._accessTokens[domain];\r\n\r\n    if (!accessToken) { return undefined; } else if (\r\n      resources.every((i) => { return accessToken.resources.indexOf(i) != -1; })) { return this._accessTokens[domain]; } else { return new Error('[Identities.getAccessToken] Not found for ', domain); }\r\n\r\n  }\r\n\r\n  removeAccessToken(domain, resources) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n      let accessToken = this._accessTokens[domain];\r\n\r\n      if (!accessToken) { resolve(); } else if (\r\n        resources.every((i) => { \r\n          return accessToken.resources.indexOf(i) != -1; \r\n        })) {\r\n           delete this._accessTokens[domain]; \r\n           _this._storeAccessTokens().then(() => {\r\n            resolve();\r\n          });\r\n          } else { \r\n            resolve();\r\n          }\r\n  \r\n    });\r\n\r\n\r\n  }\r\n\r\n  updateAssertion(assertion) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n      let userUrl = assertion.userProfile.userURL;\r\n\r\n      if (!_this.identities[userUrl]) { return reject('[Identities.updateAssertion] Identity not found for ', userUrl); } else {\r\n        _this.identities[userUrl] = assertion;\r\n        _this._store().then(() => {\r\n          resolve();\r\n        });\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  updateAccessToken(accessToken) {\r\n    let _this = this;\r\n    Identities_log.info('[Identities.updateAccessToken] ', accessToken);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (_this._isValidAccessToken(accessToken)) {\r\n\r\n        _this._accessTokens[accessToken.domain].expires = accessToken.expires;\r\n        _this._accessTokens[accessToken.domain].accessToken = accessToken.accessToken;\r\n\r\n        _this._storeAccessTokens().then(() => {\r\n          _this._accessTokens[accessToken.domain].status = 'created';\r\n          resolve(accessToken);\r\n        });\r\n      } else { reject('[Identities.updateAccessToken] invalid AccessToken: ', accessToken); }\r\n    });\r\n\r\n  }\r\n\r\n  addIdAssertion(identifier, assertion, idp, scope) {\r\n    let _this = this;\r\n\r\n    let newIdAssertion = new IdAssertion(assertion, idp, scope);\r\n\r\n    _this.idAssertionList.push(newIdAssertion);\r\n  }\r\n\r\n  //TODO: complete with more verifications. To be moved to Identity?\r\n\r\n  _isValid(identity) {\r\n    if (!identity.hasOwnProperty('assertion')) {\r\n      return false;\r\n    }\r\n\r\n    let splitedAssertion = identity.assertion.split('.');\r\n    let assertionParsed;\r\n\r\n    //verify if the token contains the 3 components, or just the assertion\r\n    try {\r\n      if (splitedAssertion[1]) {\r\n        assertionParsed = decode(splitedAssertion[1]);\r\n      } else {\r\n        assertionParsed = decode(identity.assertion);\r\n      }\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n  _isValidAccessToken(accessToken) {\r\n\r\n    if (!accessToken.hasOwnProperty('accessToken')) {\r\n      return false;\r\n    }\r\n\r\n    if (!accessToken.hasOwnProperty('domain')) {\r\n      return false;\r\n    }\r\n\r\n    if (!(accessToken.hasOwnProperty('resources') && Array.isArray(accessToken.resources))) {\r\n      return false;\r\n    }\r\n\r\n\r\n    if (!(accessToken.hasOwnProperty('expires') && Number.isInteger(accessToken.expires))) {\r\n      return false;\r\n    }\r\n\r\n    if (!accessToken.hasOwnProperty('input')) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n  //TODO: add function to only set one new identity using the new indexed storage manager\r\n\r\n  _store() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      const store = Object.keys(this._identities).map((userURL) => {\r\n        return _this._storageManager.set(userURL, 0, this._identities[userURL], 'identities');\r\n      });\r\n\r\n      Promise.all(store).then(() => {\r\n        resolve();\r\n      }).catch(err => {\r\n        reject('On _sendReporterSessionKey from method storeIdentity error: ' + err);\r\n      });\r\n\r\n    });\r\n  }\r\n  _storeAccessTokens() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let accessTokens = deepClone(_this._accessTokens);\r\n\r\n      _this._storageManager.set('accessTokens', 0, accessTokens).then(() => {\r\n        resolve();\r\n      }).catch(err => {\r\n        reject('On _sendReporterSessionKey from method storeIdentity error: ' + err);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n}\r\n\r\n// move to Identity service framework?\r\n\r\nclass IdAssertion {\r\n\r\n  constructor(assertion, idp, userProfile) {\r\n    let _this = this;\r\n\r\n    _this._assertion = assertion;\r\n    _this._idp = idp;\r\n    _this._userProfile = userProfile;\r\n  }\r\n\r\n  get assertion() {\r\n    return this._assertion;\r\n  }\r\n\r\n  get idp() {\r\n    return this._idp;\r\n  }\r\n\r\n  get userProfile() {\r\n    return this._userProfile;\r\n  }\r\n\r\n}\r\n\r\nclass IdValidation {\r\n\r\n  constructor(identity, contents) {\r\n    let _this = this;\r\n    _this.identity = identity;\r\n    _this.contents = contents;\r\n  }\r\n\r\n  validates(identity, contents) {\r\n    //TODO implement the logic\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ var identity_Identities = (Identities_Identities);\r\n\n// CONCATENATED MODULE: ./src/identity/GuiFake.js\n// Log System\r\n\r\nlet GuiFake_log = loglevel[\"getLogger\"]('IdentityModule');\r\n\r\n/**\r\n* fake class for the gui to select the identity,\r\n* TODO replace with the proper identity GUI\r\n*\r\n*/\r\nclass GuiFake {\r\n\r\n  constructor(url, messageBus) {\r\n    GuiFake_log.log('FakeGUI_deployed');\r\n    let _this = this;\r\n\r\n    _this._url = url;\r\n    _this._waitTime = 10000;\r\n    _this._messageBus = messageBus;\r\n\r\n    _this._messageBus.addListener(_this._url, msg => {\r\n\r\n      if (msg.hasOwnProperty('type') &&\r\n          msg.type === 'create' &&\r\n          msg.body.hasOwnProperty('value') &&\r\n          msg.body.value.hasOwnProperty('identities') &&\r\n          msg.body.value.hasOwnProperty('idps')) {\r\n\r\n        let identities = msg.body.value.identities;\r\n        let idps = msg.body.value.idps;\r\n\r\n        let value;\r\n\r\n        if (identities[0] !== undefined) {\r\n          value = {type: 'identity', value: identities[0], code: 200};\r\n        } else {\r\n          value = {type: 'idp', value: idps[2].domain, code: 200};\r\n        }\r\n\r\n        let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\r\n\r\n        // to test on the identity side the listener without the timeout\r\n        // can represent the time the user takes to choose and identity\r\n        if (msg.body.value === 'wait') {\r\n\r\n          setTimeout(() => {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          }, _this._waitTime);\r\n        } else {\r\n          _this._messageBus.postMessage(replyMsg);\r\n        }\r\n      } else {\r\n        GuiFake_log.log('Ignoring messages not intended to FakeGUI.', msg);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var identity_GuiFake = (GuiFake);\r\n\n// CONCATENATED MODULE: ./src/identity/IdentityModule.js\n// Log System\r\n\r\nlet IdentityModule_log = loglevel[\"getLogger\"]('IdentityModule');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n*\r\n* The Identity Module (Id Module) is the component responsible for handling the\r\n* user identity and the association of this identity with the Hyperty instances,\r\n* in order to make Hyperty instances identifiable. The identity in the reTHINK project\r\n* is not fixed to a unique Identity Service Provider, but obtained through several\r\n* different Identity sources. With this approach, the Id Module provides to the user the\r\n* option to choose the preferred method for authentication.\r\n* This module will thus able to support multiple Identity acquisition methods,\r\n* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.\r\n* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,\r\n*  which can be used by the Identity Module to associate it with a Hyperty instance.\r\n*\r\n* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication\r\n* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction\r\n* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.\r\n*\r\n* When a request for a user identity is made using the method loginWithRP(identifier, scope),\r\n* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package\r\n* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token\r\n* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.\r\n* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint\r\n* on the Identity Provider Authorization Server, and after the validation is done,\r\n* an ID token is obtained with the information according to the scope required.\r\n* This ID token is then preserved in this module that can obtained through the getIdentities()\r\n* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.\r\n*\r\n*/\r\nclass IdentityModule_IdentityModule {\r\n\r\n  /**\r\n  * This is the constructor to initialise the Identity Module it does not require any input.\r\n  */\r\n  constructor(runtimeURL, runtimeCapabilities, storageManager, dataObjectsStorage, cryptoManager, runtimeCatalogue) {\r\n    let _this = this;\r\n\r\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\r\n    if (!storageManager) throw new Error('storageManager is missing');\r\n    if (!cryptoManager) throw new Error('cryptoManager is missing');\r\n    if (!runtimeCatalogue) throw new Error('runtimeCatalogue is missing');\r\n\r\n    _this._runtimeURL = runtimeURL;\r\n\r\n    _this._runtimeCatalogue = runtimeCatalogue;\r\n\r\n    _this.dataObjectsStorage = dataObjectsStorage;\r\n    _this._idmURL = _this._runtimeURL + '/idm';\r\n    _this._guiURL = _this._runtimeURL + '/identity-gui';\r\n    _this.runtimeCapabilities = runtimeCapabilities;\r\n\r\n    _this._domain = divideURL(_this._runtimeURL).domain;\r\n\r\n\r\n    //to store items with this format: {identity: identityURL, token: tokenID}\r\n    _this._identities = new identity_Identities('human', storageManager);\r\n\r\n    // to be reviewed: watchingYou identitiesList or identities?\r\n    //    _this.identitiesList = _this.watchingYou.watch('identitiesList', {}, true);\r\n    _this._crypto = cryptoManager;\r\n\r\n    /*    _this.emailsList = [];\r\n    let newIdentity = new Identity('guid', 'HUMAN');\r\n    _this.identity = newIdentity;\r\n    _this.currentIdentity;\r\n    _this.identities.defaultIdentity;*/\r\n\r\n    //stores the association of the dataObject and the Hyperty registered within\r\n    _this.dataObjectsIdentity = {}; // is this needed?\r\n\r\n    _this._listOfIdps = [];\r\n\r\n    // variable to know if the GUI is deployed to choose the identity. if the real GUI is not deployed, a fake gui is deployed instead.\r\n    _this.guiDeployed = false;\r\n\r\n  }\r\n\r\n  //******************* GET AND SET METHODS *******************\r\n\r\n  /**\r\n  * return the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  get messageBus() {\r\n    let _this = this;\r\n    return _this._messageBus;\r\n  }\r\n\r\n  /**\r\n  * Set the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  set messageBus(messageBus) {\r\n    let _this = this;\r\n    _this._messageBus = messageBus;\r\n    _this.addGUIListeners();\r\n  }\r\n\r\n  /**\r\n  * return the coreDiscovery component\r\n  * do we need this??\r\n  */\r\n  get coreDiscovery() {\r\n    let _this = this;\r\n    return _this._coreDiscovery;\r\n  }\r\n\r\n  /**\r\n  * Set the coreDiscovery component\r\n  * @param {coreDiscovery} coreDiscovery\r\n  */\r\n  set coreDiscovery(coreDiscovery) {\r\n    let _this = this;\r\n    _this._coreDiscovery = coreDiscovery;\r\n  }\r\n\r\n  /**\r\n  * return the registry in this idModule\r\n  * @param {registry}           registry\r\n  */\r\n  get registry() {\r\n    let _this = this;\r\n    return _this._registry;\r\n  }\r\n\r\n  /**\r\n  * Set the registry in this idModule\r\n  * @param {registry}     reg\r\n  */\r\n  set registry(registry) {\r\n    let _this = this;\r\n    _this._registry = registry;\r\n  }\r\n\r\n\r\n  //******************* IDENTITY RELEATED METHODS *******************\r\n  /**\r\n  * gets all the information from a given userURL\r\n  * @param  {String}  userURL     user url\r\n  * @return {JSON}    identity    identity bundle from the userURL\r\n  */\r\n  getIdentity(userURL) {\r\n    return this.identities.getIdentity(userURL);\r\n  }\r\n\r\n  /**\r\n  * Function to set the current Identity with a given Identity\r\n  * @param {Identity}        identity         identity\r\n  */\r\n\r\n  /*  setCurrentIdentity(identity) {\r\n    let _this = this;\r\n    _this.currentIdentity = identity;\r\n  }*/\r\n\r\n  /**\r\n  * Function to return all the identities registered within a session by a user.\r\n  * These identities are returned in an array containing a JSON package for each user identity.\r\n  * @return {Array<Identities>}         Identities\r\n  */\r\n  get identities() {\r\n    let _this = this;\r\n    return _this._identities;\r\n  }\r\n\r\n  set identities(identities) {\r\n    let _this = this;\r\n    _this._identities = identities;\r\n  }\r\n\r\n  get idps() {\r\n    return this._listOfIdps;\r\n  }\r\n\r\n  getIdentitiesToChoose() {\r\n    //    let identities = _this.identities.identifiers;\r\n\r\n    // let idps = [\r\n    //   { domain: 'google.com', type: 'idToken'},\r\n    //   { domain: 'microsoft.com', type: 'idToken'},\r\n    //   { domain: 'orange.fr', type: 'idToken'},\r\n    //   { domain: 'slack.com', type: 'Legacy'}\r\n    // ];\r\n\r\n    // todo: retrieve available idps from runtime catalogue\r\n    // todo: enable oauth idps\r\n    // let idps = [\r\n    //   { domain: 'google.com', type: 'idToken' },\r\n    //   { domain: 'microsoft.com', type: 'idToken' },\r\n    //   { domain: 'facebook.com', type: 'idToken' },\r\n    //   { domain: 'slack.com', type: 'idToken' }\r\n    // ];\r\n\r\n    return new Promise((resolve) => {\r\n      let prefix = runtimeConfiguration_runtimeConfiguration['catalogueURLs']['idp-proxy'].prefix;\r\n      let suffix = runtimeConfiguration_runtimeConfiguration['catalogueURLs']['idp-proxy'].suffix;\r\n\r\n      const url = prefix + this._domain + suffix;\r\n\r\n      Promise.all([\r\n        this.runtimeCapabilities.isAvailable('browser'),\r\n        this.runtimeCapabilities.isAvailable('node')])\r\n        .then((result) => {\r\n\r\n          const isBrowser = result[0];\r\n          const isNode = result[1];\r\n\r\n          const constraints = { constraints: {} };\r\n          constraints.constraints.node = isNode;\r\n          constraints.constraints.browser = isBrowser;\r\n\r\n          this._getAllIdps().then((idps) => {\r\n            const listOfIdps = idps.map(key => { return { domain: key, type: 'idToken' }; });\r\n            IdentityModule_log.info('[IdentityModule.getIdentityAssertion:getIdentitiesToChoose]', idps, listOfIdps);\r\n            this._listOfIdps = listOfIdps;\r\n            return resolve({ defaultIdentity: this.identities.defaultIdentity, identities: this.identities.identities, idps: listOfIdps });\r\n          });\r\n\r\n        });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _getAllIdps() {\r\n\r\n  let allUrl = 'https://' + this._domain + ':8080/.well-known/idp-proxy/all.json';\r\n\r\n  return new Promise(function(resolve, reject) {\r\n    fetch(allUrl).then(function(result) {\r\n/*    $.ajax({\r\n      url: hypertiesURL,\r\n      success: function(result) {*/\r\n\r\n\r\n        console.log(result);\r\n\r\n        result.json().then(function (idps) {\r\n          console.log(idps);\r\n/*          let response = [];\r\n        if (typeof hyperties === 'object') {\r\n          hyperties.forEach(function(key) {\r\n            response.push(key);\r\n          });\r\n        } else if (typeof hyperties === 'string') {\r\n          response = JSON.parse(hyperties);\r\n        }*/\r\n\r\n        resolve(idps['idps']);\r\n\r\n        })\r\n      },function(reason) {\r\n//      fail: function(reason) {\r\n        reject(reason);\r\n//        notification(reason, 'warn');\r\n      });\r\n  });    \r\n  }\r\n\r\n\r\n  /**\r\n  * Function to return the selected Identity within a session\r\n  * @return {Identity}        identity         identity\r\n  */\r\n  /*  getCurrentIdentity() {\r\n    let _this = this;\r\n    return _this.currentIdentity;\r\n  }*/\r\n\r\n  init(guid) {\r\n    let _this = this;\r\n    return new Promise((resolve) => {\r\n      _this._identities.loadIdentities().then(() => {\r\n\r\n        if (!guid) {\r\n          _this._crypto.getMyPublicKey().then((key) => {\r\n            let hash = _this._crypto.crypto._sha256(stringify(key)).then((hash) => {\r\n\r\n              guid = 'user-guid://' + hash;\r\n              _this.identities.guid = guid;\r\n              _this._identities.loadAccessTokens().then(() => {\r\n\r\n                resolve();\r\n              });\r\n            }).catch((error) => {\r\n              console.log('[IdentityModule] error', error);\r\n            });\r\n\r\n          });\r\n        } else {\r\n          _this.identities.guid = guid;\r\n          _this._identities.loadAccessTokens().then(() => {\r\n\r\n            resolve();\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * Function that fetch an identityAssertion from a user.\r\n  *\r\n  * @return {IdAssertion}              IdAssertion\r\n  */\r\n  getIdentityAssertion(identityBundle) {\r\n    IdentityModule_log.log('[IdentityModule.getIdentityAssertion:identityBundle]', identityBundle);\r\n    let _this = this;\r\n\r\n    return new Promise(function (resolve, reject) {\r\n\r\n      //CHECK whether is browser environment or nodejs\r\n      //if it is browser, then create a fake identity\r\n\r\n      _this.runtimeCapabilities.isAvailable('browser').then((result) => {\r\n        IdentityModule_log.log('runtime browser identity acquisition', result);\r\n\r\n        if (!result) return;\r\n\r\n        //todo: only idp should be mandatory when identityBundle exists\r\n\r\n        if (identityBundle &&\r\n          identityBundle.hasOwnProperty('idp')) {\r\n\r\n          let idp = identityBundle.idp;\r\n          let origin = identityBundle.hasOwnProperty('origin') ? identityBundle.origin : 'origin';\r\n          let idHint = identityBundle.hasOwnProperty('idHint') ? identityBundle.idHint : '';\r\n\r\n          if (_this.identities.defaultIdentity) {\r\n            let assertion = _this.identities.defaultIdentity;\r\n\r\n            if (assertion.expires > secondsSinceEpoch()) {\r\n              return resolve(assertion);\r\n            } else if (assertion.hasOwnProperty('refresh')) {\r\n              IdentityModule_log.log('[Identity.IdentityModule.getIdentityAssertion] refreshing assertion: ', assertion);\r\n\r\n              _this._refreshIdAssertion().then((newAssertion) => {\r\n                IdentityModule_log.log('[IdentityModule.getIdentityAssertion] refreshed assertion.', newAssertion);\r\n                return resolve(newAssertion);\r\n              }, (error) => {\r\n                IdentityModule_log.error('[IdentityModule.getIdentityAssertion] error on refresIdAssertion: ', error, ' Asking for a new IdAssertion.')\r\n                _this._getIdAssertionForDomain(origin, idp, idHint).then((assertion) => {\r\n                  resolve(assertion);\r\n                }, (error) => {\r\n                  reject(error);\r\n                });\r\n              });\r\n\r\n            } else {\r\n              _this._getIdAssertionForDomain(origin, idp, idHint).then((assertion) => {\r\n                resolve(assertion);\r\n              }, (error) => {\r\n                reject(error);\r\n              });\r\n            }\r\n          } else {\r\n            _this._getIdAssertionForDomain(origin, idp, idHint).then((assertion) => {\r\n              resolve(assertion);\r\n            }, (error) => {\r\n              reject(error);\r\n            });\r\n          }\r\n\r\n        } else if (_this.identities.defaultIdentity) {\r\n          let assertion = _this.identities.defaultIdentity;\r\n\r\n          if (assertion.expires > secondsSinceEpoch()) {\r\n            return resolve(assertion);\r\n          } else if (assertion.hasOwnProperty('refresh')) {\r\n            IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshing assertion: ', assertion);\r\n\r\n            _this._refreshIdAssertion(assertion).then((newAssertion) => {\r\n              IdentityModule_log.log('[IdentityModule.getIdentityAssertion] refreshed assertion.', newAssertion);\r\n              return resolve(newAssertion);\r\n\r\n            }, (error) => {\r\n              IdentityModule_log.error('[IdentityModule.getIdentityAssertion] error on refresIdAssertion: ', error, ' Asking for a new IdAssertion.')\r\n\r\n              _this.selectIdentityFromGUI().then((assertion) => {\r\n\r\n                IdentityModule_log.log('[IdentityModule] Identity selected from GUI.');\r\n\r\n                _this.identities.defaultIdentity = assertion.userProfile.userURL;\r\n                return resolve(assertion);\r\n\r\n              }, (err) => {\r\n                return reject(err);\r\n              });\r\n\r\n            });\r\n\r\n          } else {\r\n            _this.selectIdentityFromGUI().then((assertion) => {\r\n\r\n              IdentityModule_log.log('[IdentityModule] Identity selected from GUI.');\r\n\r\n              _this.identities.defaultIdentity = assertion.userProfile.userURL;\r\n              return resolve(assertion);\r\n\r\n            }, (err) => {\r\n              return reject(err);\r\n            });\r\n          }\r\n        } else {\r\n          _this.selectIdentityFromGUI().then((assertion) => {\r\n\r\n            IdentityModule_log.log('[IdentityModule] Identity selected from GUI.');\r\n\r\n            _this.identities.defaultIdentity = assertion.userProfile.userURL;\r\n            return resolve(assertion);\r\n\r\n          }, (err) => {\r\n            return reject(err);\r\n          });\r\n\r\n        }\r\n      }).catch(error => {\r\n        IdentityModule_log.error('Error on identity acquisition ', error);\r\n        return reject(error);\r\n      });\r\n\r\n      _this.runtimeCapabilities.isAvailable('node').then((result) => {\r\n        IdentityModule_log.log('node identity acquisition', result);\r\n\r\n        if (!result) return;\r\n\r\n        if (_this.identities.currentIdentity) {\r\n          //TODO verify whether the token is still valid or not.\r\n          // should be needed to make further requests, to obtain a valid token\r\n          return resolve(_this.identities.currentIdentity);\r\n        } else {\r\n          IdentityModule_log.log('getIdentityAssertion for nodejs');\r\n\r\n          let idp = { type: 'idp', value: 'nodejs-idp', code: 200, auth: false };\r\n          _this.callNodeJsGenerateMethods(idp.value, 'origin').then((value) => {\r\n            resolve(value);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n        }\r\n\r\n      }).catch(error => {\r\n        IdentityModule_log.error('Error on identity acquisition ', error);\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  _getIdAssertionForDomain(origin, idp, idHint) {\r\n\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this.selectIdentityForHyperty(origin, idp, idHint).then((assertion) => {\r\n        IdentityModule_log.log('[IdentityModule._getIdAssertionForDomain] Identity selected by hyperty.');\r\n        return resolve(assertion);\r\n      }, (err) => { // if it got an error then just select identity from GUI\r\n        // log.error('[IdentityModule] Could not select identity from hyperty.');\r\n\r\n        _this.selectIdentityFromGUI().then((newAssertion) => {\r\n          IdentityModule_log.log('[IdentityModule._getIdAssertionForDomain] Identity selected by hyperty.');\r\n          return resolve(newAssertion);\r\n        }, (err) => {\r\n          return reject(err);\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _refreshIdAssertion(assertion) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this.sendRefreshMessage(assertion).then((newAssertion) => {\r\n        IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshed assertion: ', newAssertion);\r\n        _this.identities.updateAssertion(newAssertion).then(() => {\r\n          resolve(newAssertion);\r\n        }, (err) => {\r\n          IdentityModule_log.error('[IdentityModule.getValidToken] error updating the assertion ', err);\r\n          reject(err);\r\n        });\r\n      }, (err) => {\r\n        IdentityModule_log.error('[IdentityModule.getValidToken] error refreshing the assertion ', err);\r\n        reject(err);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n  * Function to return all the users URLs registered within a session\r\n  * These users URLs are returned in an array of strings.\r\n  * @return {Array<String>}         users\r\n  */\r\n  getUsersIDs() {\r\n    /*  log.log('[getUsersIDs:emailFormat]', emailFormat);\r\n      log.log('getUsersIDs:emailFormat', emailFormat);\r\n      let _this = this;\r\n      let users = [];*/\r\n\r\n    //if request comes with the emailFormat option, then convert url to email format\r\n    /*    let converter = (emailFormat) ? getUserEmailFromURL : (value) => { return value; };\r\n\r\n    for (let index in _this.identities) {\r\n      let identity = _this.identities[index];\r\n      users.push(converter(identity.identity));\r\n    }*/\r\n\r\n    return this.identities.identifiers;\r\n  }\r\n\r\n  /**\r\n  * Function to remove an identity\r\n  * @param {String}    userURL      userURL\r\n  * @return {Promise}\r\n  */\r\n\r\n  deleteIdentity(userURL) {\r\n\r\n    return this.identities.removeIdentity(userURL);\r\n\r\n  }\r\n\r\n  /**\r\n  * Function to unregister an identity from the emailsList array and not show in to the GUI\r\n  * @param {String}    email      email\r\n  */\r\n  /*  unregisterIdentity(email) {\r\n    let _this = this;\r\n\r\n    for (let e in _this.emailsList) {\r\n      if (_this.emailsList[e] === email) {\r\n        _this.emailsList.splice(e, 1);\r\n      }\r\n    }\r\n  }*/\r\n\r\n  // to be used when runtime is not executed in a sandbox\r\n\r\n  listenShowAdmin(callback) {\r\n    this._showAdmin = callback;\r\n  }\r\n\r\n  /**\r\n  * Function that sends a request to the GUI using messages. Sends all identities registered and\r\n  * the Idps supported, and return the identity/idp received by the GUI\r\n  * @param {Array<identity>}  identities      list of identitiies\r\n  * @param {Array<String>}    idps            list of idps to authenticate\r\n  * @return {Promise}         returns a chosen identity or idp\r\n  */\r\n  requestIdentityToGUI(identities, idps) {\r\n    IdentityModule_log.log('[IdentityModule.requestIdentityToGUI:identities]', identities);\r\n    IdentityModule_log.log('[IdentityModule.requestIdentityToGUI:idps]', idps);\r\n\r\n    let _this = this;\r\n    return new Promise(function (resolve, reject) {\r\n\r\n      //condition to check if the real GUI is deployed. If not, deploys a fake gui\r\n      if (_this.guiDeployed === false) {\r\n        let guiFakeURL = _this._guiURL;\r\n        let guiFake = new identity_GuiFake(guiFakeURL, _this._messageBus);\r\n        _this.guiFake = guiFake;\r\n        _this.guiDeployed = true;\r\n      }\r\n\r\n      let message = {\r\n        type: 'create', to: _this._guiURL, from: _this._idmURL,\r\n        body: { value: { identities: identities, idps: idps } }\r\n      };\r\n\r\n      let callback = msg => {\r\n        _this._messageBus.removeResponseListener(_this._idmURL, msg.id);\r\n\r\n\r\n        // todo: to return the user URL and not the email or identifier\r\n\r\n        if (msg.body.code === 200) {\r\n          let selectedIdentity = msg.body;\r\n\r\n          IdentityModule_log.log('selectedIdentity: ', selectedIdentity.value);\r\n          resolve(selectedIdentity);\r\n        } else {\r\n          reject('error on requesting an identity to the GUI');\r\n        }\r\n      };\r\n\r\n      //postMessage with callback but without timeout\r\n      try {\r\n        _this._messageBus.postMessage(message, callback, false);\r\n      } catch (err) {\r\n        reject('In method callIdentityModuleFunc error: ' + err);\r\n      }\r\n    });\r\n  }\r\n\r\n  callNodeJsGenerateMethods(idp, origin) {\r\n    IdentityModule_log.log('[callNodeJsGenerateMethods:idp]', idp);\r\n    IdentityModule_log.log('[callNodeJsGenerateMethods:origin]', origin);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      //debugger;\r\n      let publicKey;\r\n\r\n      //let keyPair = nodeJSKeyPairPopulate;\r\n\r\n      //generates the RSA key pair\r\n      _this._crypto.getMyPublicKey().then(function (key) {\r\n\r\n        IdentityModule_log.log('[callNodeJsGenerateMethods:key]', key);\r\n\r\n        publicKey = stringify(key);\r\n\r\n        IdentityModule_log.log('[callNodeJsGenerateMethods] NO_URL');\r\n\r\n        return _this.generateAssertion(publicKey, origin, 'url', idp);\r\n\r\n      }).then(function (value) {\r\n        if (value) {\r\n          resolve(value);\r\n        } else {\r\n          reject('Error on obtaining Identity');\r\n        }\r\n      }).catch(function (err) {\r\n        IdentityModule_log.log(err);\r\n        reject(err);\r\n\r\n      });\r\n    });\r\n  }\r\n\r\n  callGenerateMethods(idp, origin) {\r\n    IdentityModule_log.log('[callGenerateMethods:idp]', idp);\r\n    IdentityModule_log.log('[callGenerateMethods:origin]', origin);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let publicKey;\r\n\r\n      //generates the RSA key pair\r\n      _this._crypto.getMyPublicKey().then(function (key) {\r\n\r\n        IdentityModule_log.log('[callGenerateMethods:key]', key);\r\n\r\n        publicKey = stringify(key);\r\n\r\n        //        userkeyPair = keyPair;\r\n        IdentityModule_log.log('generateAssertion:no_hint');\r\n        return _this.generateAssertion(publicKey, origin, '', idp);\r\n\r\n      }).then(function (url) {\r\n        _this.myHint = url;\r\n        IdentityModule_log.log('generateAssertion:hint');\r\n        return _this.generateAssertion(publicKey, origin, url, idp);\r\n\r\n      }).then(function (value) {\r\n        if (value) {\r\n          resolve(value);\r\n        } else {\r\n          reject('Error on obtaining Identity');\r\n        }\r\n      }).catch(function (err) {\r\n        IdentityModule_log.error(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  loginSelectedIdentity(publicKey, origin, idp, loginUrl) {\r\n    IdentityModule_log.log('[loginSelectedIdentity:publicKey]', publicKey);\r\n    IdentityModule_log.log('[loginSelectedIdentity:origin]', origin);\r\n    IdentityModule_log.log('[loginSelectedIdentity:idp]', idp);\r\n\r\n    //    log.log('[loginSelectedIdentity:keyPair]', keyPair);\r\n    IdentityModule_log.log('[loginSelectedIdentity:loginUrl]', loginUrl);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      IdentityModule_log.log('[IdentityModule] openPopup');\r\n      _this.callIdentityModuleFunc('openPopup', { urlreceived: loginUrl }).then((idCode) => {\r\n        return idCode;\r\n      }, (err) => {\r\n        IdentityModule_log.error('Error while logging in for the selected identity.');\r\n        return reject(err);\r\n      }).then((idCode) => {\r\n        _this.sendGenerateMessage(publicKey, origin, idCode, idp).then((newResponse) => {\r\n          if (newResponse.hasOwnProperty('assertion')) {\r\n            _this.identities.addAssertion(newResponse).then(result => {\r\n              resolve('Login was successfull');\r\n            }).catch(err => { reject('Login has failed:' + err); });\r\n          } else {\r\n            IdentityModule_log.error('Error while logging in for the selected identity.');\r\n            return reject('Could not generate a valid assertion for selected identity.');\r\n          }\r\n        }).catch(err => { reject('On loginSelectedIdentity from method sendGenerateMessage error:  ' + err); });\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  selectIdentityForHyperty(origin, idp, idHint) {\r\n    IdentityModule_log.log('[selectIdentityForHyperty:origin]', origin);\r\n    IdentityModule_log.log('[selectIdentityForHyperty:idp]', idp);\r\n    IdentityModule_log.log('[selectIdentityForHyperty:idHint]', idHint);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      //generates the RSA key pair\r\n      _this._crypto.getMyPublicKey().then(function (key) {\r\n        let publicKey = stringify(key);\r\n\r\n        _this.sendGenerateMessage(publicKey, origin, idHint, idp).then((response) => {\r\n          if (response.hasOwnProperty('assertion')) { // identity was logged in, just save it\r\n            _this.identities.addAssertion(response).then((value) => {\r\n              return resolve(response);\r\n            }, (err) => {\r\n              return reject(err);\r\n            });\r\n          } else if (response.hasOwnProperty('loginUrl')) { // identity was not logged in\r\n            _this.loginSelectedIdentity(publicKey, origin, idp, response.loginUrl).then((value) => {\r\n              return resolve(value);\r\n            }, (err) => {\r\n              return reject(err);\r\n            });\r\n          } else { // you should never get here, if you do then the IdP Proxy is not well implemented\r\n            // log.error('GenerateAssertion returned invalid response.');\r\n            IdentityModule_log.log('Proceeding by logging in.');\r\n            _this.callGenerateMethods(idp, origin).then((value) => {\r\n              return resolve(value);\r\n            }, (err) => {\r\n              return reject(err);\r\n            });\r\n          }\r\n        }).catch(err => { reject('On selectIdentityForHyperty from method sendGenerateMessage error:  ' + err); });\r\n      }).catch(err => { reject('On selectIdentityForHyperty from method generateRSAKeyPair error:  ' + err); });\r\n    });\r\n  }\r\n\r\n  selectIdentityFromGUI(origin) {\r\n    IdentityModule_log.log('[IdentityModule.selectIdentityFromGUI:origin]', origin);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.getIdentitiesToChoose().then((identitiesInfo) => {\r\n        return _this.requestIdentityToGUI(identitiesInfo.identities, identitiesInfo.idps);\r\n      }).then(value => {\r\n\r\n        if (value.type === 'identity') {\r\n\r\n          //  let chosenID = getUserURLFromEmail(value.value);\r\n          // hack while the user url is not returned from requestIdentityToGUI;\r\n\r\n          /*          let chosenID = 'user://' + _this.identities.currentIdentity.idp.domain + '/' + value.value;\r\n\r\n          _this.identities.defaultIdentity = _this.identities.currentIdentity;*/\r\n\r\n          // returns the identity info from the chosen id\r\n          //          if (_this.identities.currentIdentity) resolve(_this.identities.currentIdentity.assertion);\r\n          if (_this.identities.identities[value.value]) resolve(_this.identities.identities[value.value]);\r\n          else reject('[IdentityModule.selectIdentityFromGUI] identity not found: ', value.value);\r\n        } else if (value.type === 'idp') {\r\n\r\n          _this.callGenerateMethods(value.value, origin).then((value) => {\r\n            return resolve(value);\r\n          }, (err) => {\r\n            return reject(err);\r\n          });\r\n\r\n        } else {\r\n          return reject('error on GUI received message.');\r\n        }\r\n      }).catch(err => { reject('On selectIdentityFromGUI from method requestIdentityToGUI error:  ' + err); });\r\n    });\r\n  }\r\n\r\n\r\n  callIdentityModuleFunc(methodName, parameters, domain, resource) {\r\n    IdentityModule_log.log('[callIdentityModuleFunc:methodName]', methodName);\r\n    IdentityModule_log.log('[callIdentityModuleFunc:parameters]', parameters);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (_this._showAdmin) {\r\n        if (methodName === 'getAccessToken') {\r\n          _this._showAdmin(methodName, parameters.urlreceived, domain, resource).then((result) => {\r\n            resolve(result);\r\n          });\r\n        } else _this._showAdmin(methodName);\r\n      }\r\n      else {\r\n        let message = {\r\n          type: 'execute', to: _this._guiURL, from: _this._idmURL,\r\n          body: { resource: 'identity', method: methodName, params: parameters }\r\n        };\r\n\r\n        //post msg with callback but without timout\r\n        let callback = msg => {\r\n          _this._messageBus.removeResponseListener(_this._idmURL, msg.id);\r\n          let result = msg.body.value;\r\n          resolve(result);\r\n        };\r\n        try {\r\n\r\n          _this._messageBus.postMessage(message, callback, false);\r\n\r\n        } catch (err) {\r\n          reject('In method callIdentityModuleFunc error: ' + err);\r\n        }\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  //******************* TOKEN METHODS *******************\r\n  /**\r\n  * get a Token to be added to a message\r\n  * @param  {String}  fromURL     origin of the message\r\n  * @param  {String}  toURL     target of the messageok\r\n  * @return {JSON}    token    token to be added to the message\r\n  */\r\n  getToken(msg) {\r\n    let _this = this;\r\n    let fromURL = msg.from;\r\n    let toUrl = msg.to;\r\n    if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('source')) {\r\n      fromURL = msg.body.source;\r\n    }\r\n\r\n    if (msg.type === 'forward') {\r\n      fromURL = msg.body.from;\r\n    }\r\n\r\n    if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('subscriber')) {\r\n      fromURL = msg.body.subscriber;\r\n    }\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      IdentityModule_log.log('[IdentityModule.getToken] for msg ', msg);\r\n\r\n      //log.log('toUrl', toUrl);\r\n      _this.registry.isLegacy(toUrl).then(function (result) {\r\n        // log.log('[Identity.IdentityModule.getToken] isLEGACY: ', result);\r\n        if (result) {\r\n\r\n          _this._getAccessToken(msg).then((token) => {\r\n            IdentityModule_log.log('[IdentityModule.getToken] access token ', token);\r\n            resolve(deepClone(token));\r\n          }).catch(err => { reject('[IdentityModule.getToken] Access Token error ' + err); });\r\n        } else {\r\n          _this._getValidToken(fromURL).then((token) => {\r\n            resolve(token);\r\n          }).catch(err => { reject('On getToken from method _getValidToken error: ' + err); });\r\n        }\r\n      }).catch(err => { reject('On getToken from method isLegacy error: ' + err); });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n  * get an Id Token for a HypertyURL\r\n  * @param  {String}  hypertyURL     the Hyperty address\r\n  * @return {JSON}    token    Id token to be added to the message\r\n  */\r\n  getIdToken(hypertyURL) {\r\n    IdentityModule_log.info('getIdToken:hypertyURL ', hypertyURL);\r\n    let _this = this;\r\n    return new Promise(function (resolve, reject) {\r\n      let splitURL = hypertyURL.split('://');\r\n      let userURL;\r\n      if (splitURL[0] !== 'hyperty') { // it is a Data Object URL\r\n\r\n        _this._getHypertyFromDataObject(hypertyURL).then((returnedHypertyURL) => {\r\n\r\n          userURL = _this.registry.getHypertyOwner(returnedHypertyURL);\r\n\r\n          if (userURL) {\r\n            let identity = _this.identities.getIdentity(userURL);\r\n            if (identity) return resolve(identity);\r\n            else return reject('[IdentityModule.getIdToken] Identity not found for: ', userURL);\r\n          } else { return reject('[IdentityModule.getIdToken] User not found for hyperty: ', returnedHypertyURL); }\r\n        }).catch((reason) => {\r\n          IdentityModule_log.error('[IdentityModule.getIdToken] Error: ', reason);\r\n          reject(reason);\r\n        });\r\n      } else {\r\n        userURL = _this.registry.getHypertyOwner(hypertyURL);\r\n        if (userURL) {\r\n\r\n          let identity = _this.identities.getIdentity(userURL);\r\n          if (identity) return resolve(identity);\r\n          else return reject('[IdentityModule.getIdToken] Identity not found for: ', userURL);\r\n\r\n        } else { return reject('[IdentityModule.getIdToken] User not found for hyperty: ', userURL); }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * get an Access Token for an external API\r\n  * @param  {String}  url     the external url\r\n  * @return {JSON}    token    Access token to be added to the message\r\n  */\r\n  _getAccessToken(msg) {\r\n    let url = msg.to;\r\n\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n      if (!msg.hasOwnProperty('body')) {\r\n        return reject('[IdentityModule._getAccessToken] missing mandatory msg body: ', msg);\r\n      }\r\n      if (!msg.body.hasOwnProperty('value')) {\r\n        return reject('[IdentityModule._getAccessToken] missing mandatory msg body value: ', msg);\r\n      }\r\n      if (!msg.body.value.hasOwnProperty('resources')) {\r\n        return reject('[IdentityModule._getAccessToken] missing mandatory msg body value resources: ', msg);\r\n      }\r\n      let domainToCheck = divideURL(url).domain;\r\n\r\n      if (url.includes('protostub')) {\r\n        domainToCheck = domainToCheck.replace(domainToCheck.split('.')[0] + '.', '');\r\n      }\r\n\r\n      let resources = msg.body.value.resources;\r\n\r\n      _this._getAccessTokenForDomain(domainToCheck, resources).then((token) => {\r\n        resolve(token);\r\n      });\r\n\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  _getAccessTokenForDomain(domainToCheck, resources) {\r\n    let _this = this;\r\n    let token;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      try {\r\n        token = _this.identities.getAccessToken(domainToCheck, resources);\r\n      } catch (e) {\r\n        return reject('[IdentityModule._getAccessTokenForDomain] Access Token error ' + err);\r\n      }\r\n\r\n      if (!token) {\r\n        _this._getNewAccessToken(domainToCheck, resources).then((token) => {\r\n          IdentityModule_log.log('[Identity.IdentityModule._getAccessTokenForDomain] new Access Token ', token);\r\n          return resolve(token);\r\n        }).catch(err => { reject('[IdentityModule._getAccessTokenForDomain] on getNewAccessToken ' + err); });\r\n      } else if (token.status === 'in-progress') {\r\n        return resolve(_this._inProgressAccessToken(domainToCheck, resources));\r\n      } else {\r\n        let timeNow = secondsSinceEpoch();\r\n\r\n        IdentityModule_log.log('[Identity.IdentityModule._getAccessTokenForDomain] found  Access Token ', token);\r\n\r\n        if (timeNow >= token.expires) {\r\n          //        if (true) {\r\n          if (token.hasOwnProperty(\"refresh\")) {\r\n            _this._refreshAccessToken(deepClone(token)).then((newToken) => {\r\n              return resolve(_this.identities.updateAccessToken(newToken));\r\n            });\r\n          } else {\r\n            _this._revokeAccessToken(token, domainToCheck, resources).then(() => {\r\n              setTimeout(() => {\r\n                return _this._getNewAccessToken(domainToCheck, resources);\r\n\r\n              }, 1000);\r\n\r\n            });\r\n\r\n          } \r\n\r\n        } else return resolve(deepClone(token));\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n\r\n  _revokeAccessToken(token, domain, resources) {\r\n\r\n    let _this = this;\r\n\r\n    //    let domain = _this._resolveDomain(oldIdentity.idp);\r\n    //    let message;\r\n    //    let assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\r\n\r\n    IdentityModule_log.log('[IdentityModule._revokeAccessToken] to be revoked ', token);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n//      let domain = _this._resolveDomain(token.domain);\r\n      let message;\r\n\r\n      message = {\r\n        type: 'execute',\r\n        to: _this._resolveDomain(token.domain),\r\n        from: _this._idmURL,\r\n        body: {\r\n          method: 'revokeAccessToken',\r\n          params: { token: token }\r\n        }\r\n      };\r\n\r\n      IdentityModule_log.log('[IdentityModule._revokeAccessToken] revoke msg ', message);\r\n\r\n      try {\r\n        _this._messageBus.postMessage(message, (res) => {\r\n\r\n          let result = res.body.value;\r\n          if (result) _this._identities.removeAccessToken(domain, resources).then(()=>{\r\n            resolve(result);\r\n\r\n          });\r\n          resolve();\r\n        });\r\n      } catch (err) {\r\n        reject('In IdentityModule._revokeAccessToken on postMessage error: ' + err);\r\n      }\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  _inProgressAccessToken(domain, resources) {\r\n    this.identities.watchingYou.observe('accessTokens', (change) => {\r\n\r\n      IdentityModule_log.log('[IdentityModule._inProgressAccessToken] accessTokens changed ' + this.identities.accessTokens);\r\n\r\n      let keypath = change.keypath;\r\n\r\n      if (keypath.includes('status')) {\r\n        keypath = keypath.replace('.status', '');\r\n      }\r\n\r\n      if (keypath === domain && change.name === 'status' && change.newValue === 'created') {\r\n        // log.log('[Identity.IdentityModule.getToken] token is created ' + _this.identitiesList[domain]);\r\n        return (this.identities.getAccessToken(domain, resources));\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n  _getNewAccessToken(domain, resources) {\r\n    let _this = this;\r\n\r\n    return new Promise(function (resolve, reject) {\r\n\r\n      _this.identities.setAccessTokenInProgress(domain);\r\n\r\n      let message = {\r\n        type: 'execute',\r\n        to: _this._resolveDomain(domain),\r\n        from: _this._idmURL,\r\n        body: {\r\n          method: 'getAccessTokenAuthorisationEndpoint',\r\n          params: resources\r\n        }\r\n      };\r\n\r\n      //let's first get the authorisation URL from the Idp Proxy\r\n      _this._messageBus.postMessage(message, (res) => {\r\n        if (res.body.code > 299) {\r\n          return reject('[IdentityModule._getNewAccessToken] Error on getAccessTokenAuthorisationEndpoint from IdP Proxy: ', res.body.desc);\r\n        }\r\n\r\n        // let's ask the user for authorisation\r\n        _this.callIdentityModuleFunc('getAccessToken', { urlreceived: res.body.value }, domain, resources[0]).then((authorisation) => {\r\n          IdentityModule_log.log('[IdentityModule:callIdentityModuleFunc:openPopup] auhtorisation result: ', authorisation);\r\n\r\n          message.body.method = 'getAccessToken';\r\n          message.body.params = {\r\n            resources: resources,\r\n            login: authorisation\r\n          };\r\n\r\n          //wihtout callback to avoid timeout errors?\r\n\r\n          // let's ask Access Token from the Idp Proxy\r\n          _this._messageBus.postMessage(message, (res) => {\r\n            if (res.body.code > 299) return reject('[IdentityModule._getNewAccessToken] Error on getAccessToken from IdP Proxy: ', res.body.desc);\r\n\r\n            _this.identities.addAccessToken(res.body.value).then((token) => {\r\n              IdentityModule_log.info('[IdentityModule._getNewAccessToken] resolving token: ', token);\r\n              return resolve(res.body.value);\r\n\r\n            }, (err) => {\r\n              reject(err);\r\n            });\r\n          });\r\n        }, (err) => {\r\n          reject(err);\r\n        });\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n\r\n  _refreshAccessToken(outdatedToken) {\r\n    let _this = this;\r\n\r\n    //    let domain = _this._resolveDomain(oldIdentity.idp);\r\n    //    let message;\r\n    //    let assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\r\n\r\n    IdentityModule_log.log('IdentityModule._refreshAccessToken:outdatedToken', outdatedToken);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain = _this._resolveDomain(outdatedToken.domain);\r\n      let message;\r\n\r\n      message = { type: 'execute', to: domain, from: _this._idmURL, body: { method: 'refreshAccessToken', params: { token: outdatedToken } } };\r\n      try {\r\n        _this._messageBus.postMessage(message, (res) => {\r\n          let result = res.body.value;\r\n          resolve(result);\r\n        });\r\n      } catch (err) {\r\n        reject('In IdentityModule._refreshAccessToken on postMessage error: ' + err);\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  sendRefreshMessage(oldIdentity) {\r\n    let _this = this;\r\n\r\n    //    let domain = _this._resolveDomain(oldIdentity.idp);\r\n    //    let message;\r\n    //    let assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\r\n\r\n    IdentityModule_log.log('sendRefreshMessage:oldIdentity', oldIdentity);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let domain = _this._resolveDomain(oldIdentity.idp.domain);\r\n      let message;\r\n      let assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\r\n\r\n      IdentityModule_log.info('sendRefreshMessage:oldIdentity', oldIdentity);\r\n\r\n      message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'refreshAssertion', params: { identity: assertion } } };\r\n      try {\r\n        _this._messageBus.postMessage(message, (res) => {\r\n          if (res.body.code < 300) {\r\n            let result = res.body.value;\r\n            resolve(result);\r\n          } else resolve(oldIdentity);\r\n        });\r\n      } catch (err) {\r\n        reject('In sendRefreshMessage on postMessage error: ' + err);\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  getAccessToken(idpDomain, resources, login) {\r\n    IdentityModule_log.log('[getAccessToken:idpDomain]', idpDomain);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain = _this._resolveDomain(idpDomain);\r\n      let message;\r\n\r\n      message = {\r\n        type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'getAccessToken', params: { resources: resources, login: login } }\r\n      };\r\n      try {\r\n        _this._messageBus.postMessage(message, (res) => {\r\n\r\n          if (res.body.code < 299) {\r\n            let result = res.body.value;\r\n            resolve(result);\r\n          } else resolve(res.body);\r\n        });\r\n      } catch (err) {\r\n        reject('IdentityModule.In getAccessToken: ' + err);\r\n      }\r\n    });\r\n  }\r\n\r\n  getAccessTokenAuthorisationEndpoint(scope, idpDomain) {\r\n    IdentityModule_log.log('[getAccessTokenAuthorisationEndpoint:idpDomain]', idpDomain);\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain = _this._resolveDomain(idpDomain);\r\n      let message;\r\n\r\n      message = {\r\n        type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'getAccessTokenAuthorisationEndpoint', params: { resources: scope } }\r\n      };\r\n      try {\r\n        _this._messageBus.postMessage(message, (res) => {\r\n          let result = res.body.value;\r\n          resolve(result);\r\n        });\r\n      } catch (err) {\r\n        reject('In getAccessTokenAuthorisationEndpoint: ' + err);\r\n      }\r\n    });\r\n  }\r\n\r\n  sendGenerateMessage(contents, origin, usernameHint, idpDomain) {\r\n    IdentityModule_log.log('[sendGenerateMessage:contents]', contents);\r\n    IdentityModule_log.log('[sendGenerateMessage:origin]', origin);\r\n    IdentityModule_log.log('[sendGenerateMessage:usernameHint]', usernameHint);\r\n    IdentityModule_log.log('[sendGenerateMessage:idpDomain]', idpDomain);\r\n    IdentityModule_log.log('sendGenerateMessage_hint');\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain = _this._resolveDomain(idpDomain);\r\n      let message;\r\n\r\n      message = {\r\n        type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'generateAssertion', params: { contents: contents, origin: origin, usernameHint: usernameHint } }\r\n      };\r\n      try {\r\n        _this._messageBus.postMessage(message, (res) => {\r\n\r\n          if (res.body.code < 300) resolve(res.body.value);\r\n          else reject(res.body);\r\n        });\r\n      } catch (err) {\r\n        reject('In sendGenerateMessage: ' + err);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Requests the IdpProxy from a given Domain for an identityAssertion\r\n  *\r\n  * @param  {DOMString} contents     contents\r\n  * @param  {DOMString} origin       origin\r\n  * @param  {DOMString} usernameHint usernameHint\r\n  * @param  {JSON}      keyPair       user keyPair\r\n  * @return {IdAssertion}              IdAssertion\r\n  */\r\n  generateAssertion(contents, origin, usernameHint, idpDomain) {\r\n    IdentityModule_log.log('[generateAssertion:contents]', contents);\r\n    IdentityModule_log.log('[generateAssertion:origin]', origin);\r\n    IdentityModule_log.log('[generateAssertion:usernameHint]', usernameHint);\r\n\r\n    //    log.log('[generateAssertion:keyPair]', keyPair);\r\n    IdentityModule_log.log('[generateAssertion:idpDomain]', idpDomain);\r\n    let _this = this;\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      IdentityModule_log.log('[IdentityModule:sendGenerateMessage:sendGenerateMessage]', usernameHint);\r\n      _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then((result) => {\r\n\r\n        if (result) {\r\n\r\n          _this.identities.addAssertion(result).then((value) => {\r\n            resolve(result);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n\r\n        } else {\r\n          reject('error on obtaining identity information');\r\n        }\r\n\r\n      }, (error) => {\r\n        if (error.hasOwnProperty('description') && error.description.hasOwnProperty('loginUrl')) {\r\n          _this.callIdentityModuleFunc('login', { urlreceived: error.description.loginUrl }).then((value) => {\r\n            IdentityModule_log.log('[IdentityModule:callIdentityModuleFunc:openPopup]', usernameHint);\r\n\r\n            resolve(value);\r\n          }, (err) => {\r\n            reject(err);\r\n          });\r\n        } else {\r\n          IdentityModule_log.error('[IdentityModule:sendGenerateMessage] generate assertion with hint error ', error);\r\n          reject(error);\r\n        }\r\n      }).catch(err => { reject('On generateAssertion from method sendGenerateMessage error: ' + err); });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Requests the IdpProxy from a given Domain to validate an IdentityAssertion\r\n  * Returns a promise with the result from the validation.\r\n  * @param  {DOMString} assertion\r\n  * @param  {DOMString} origin       origin\r\n  * @return {Promise}         Promise         promise with the result from the validation\r\n  */\r\n  validateAssertion(assertion, origin, idpDomain) {\r\n    IdentityModule_log.log('[validateAssertion:assertion]', assertion);\r\n    IdentityModule_log.log('[validateAssertion:origin]', origin);\r\n    IdentityModule_log.log('[validateAssertion:idpDomain]', idpDomain);\r\n    let _this = this;\r\n\r\n    let domain = _this._resolveDomain(idpDomain);\r\n\r\n    let message = {\r\n      type: 'execute', to: domain, from: _this._idmURL, body: {\r\n        resource: 'identity', method: 'validateAssertion',\r\n        params: { assertion: assertion, origin: origin }\r\n      }\r\n    };\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      try {\r\n        _this._messageBus.postMessage(message, (result) => {\r\n          if (result.body.code === 200) {\r\n            resolve(result.body.value);\r\n          } else {\r\n            reject('error', result.body.code);\r\n          }\r\n        });\r\n      } catch (err) {\r\n        reject('On validateAssertion from method postMessage error: ' + err);\r\n      }\r\n    });\r\n  }\r\n\r\n  addGUIListeners() {\r\n    let _this = this;\r\n\r\n    _this._messageBus.addListener(_this._idmURL, (msg) => {\r\n      let funcName = msg.body.method;\r\n\r\n      IdentityModule_log.log('[IdentityModule:addGUIListeners]', msg, msg.body, funcName);\r\n\r\n      let returnedValue;\r\n\r\n      if (funcName === 'deployGUI') {\r\n        returnedValue = _this.deployGUI();\r\n      } else if (funcName === 'getIdentitiesToChoose') {\r\n        _this.getIdentitiesToChoose().then((result) => {\r\n          // if the function requested is not a promise\r\n          let value = { type: 'execute', value: result, code: 200 };\r\n          let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\r\n          }\r\n        });\r\n        return;\r\n\r\n      } else if (funcName === 'unregisterIdentity') {\r\n        let email = msg.body.params.email;\r\n        returnedValue = _this.unregisterIdentity(email);\r\n      } else if (funcName === 'getMyPublicKey') {\r\n        // because generateRSAKeyPair is a promise\r\n        // we have to send the message only after getting the key pair\r\n        _this._crypto.getMyPublicKey().then((pubKey) => {\r\n          pubKey = stringify(pubKey);\r\n          let value = { type: 'execute', value: pubKey, code: 200 };\r\n          let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners from if generateRSAKeyPair method postMessage error: ' + err);\r\n          }\r\n        });\r\n        return;\r\n      } else if (funcName === 'sendGenerateMessage') {\r\n        let contents = msg.body.params.contents;\r\n        let origin = msg.body.params.origin;\r\n        let usernameHint = msg.body.params.usernameHint;\r\n        let idpDomain = msg.body.params.idpDomain;\r\n        let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to };\r\n        _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then((returnedValue) => {\r\n          let value = { type: 'execute', value: returnedValue, code: 200 };\r\n          replyMsg.body = value;\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('IdentityModule.addGUIListeners sendGenerateMessage error: ' + err);\r\n          }\r\n\r\n        }, (err) => {\r\n          IdentityModule_log.info('IDPProxy generateAssertion reply error ' + err);\r\n          replyMsg.body = err;\r\n          _this._messageBus.postMessage(replyMsg);\r\n\r\n        });\r\n        return;\r\n      } else if (funcName === 'getAccessTokenAuthorisationEndpoint') {\r\n        let scope = msg.body.params.scope;\r\n        let idpDomain = msg.body.params.idpDomain;\r\n        _this.getAccessTokenAuthorisationEndpoint(scope, idpDomain).then((returnedValue) => {\r\n          let value = { type: 'execute', value: returnedValue, code: 200 };\r\n          let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners from if sendGenerateMessage method postMessage error: ' + err);\r\n          }\r\n\r\n        });\r\n        return;\r\n      } else if (funcName === 'addAccessToken') {\r\n        let accessToken = msg.body.params;\r\n\r\n        _this.identities.addAccessToken(accessToken).then((returnedValue) => {\r\n          let value = { type: 'execute', value: returnedValue, code: 200 };\r\n          let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\r\n          }\r\n\r\n        });\r\n        return;\r\n      } else if (funcName === 'getAccessToken') {\r\n\r\n        let domain = msg.body.params.idpDomain;\r\n        let resources = msg.body.params.resources;\r\n        let login = msg.body.params.login;\r\n        let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to };\r\n\r\n        _this.getAccessToken(domain, resources, login).then((returnedValue) => {\r\n          let value = { type: 'execute', value: returnedValue, code: 200 };\r\n          replyMsg.body = value;\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners from if sendGenerateMessage method postMessage error: ' + err);\r\n          }\r\n\r\n        }, (error) => {\r\n          try {\r\n            replyMsg.body = error;\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners from if sendGenerateMessage method postMessage error: ' + err);\r\n          }\r\n\r\n        });\r\n        return;\r\n      } else if (funcName === 'addAssertion') {\r\n        let result = msg.body.params;\r\n\r\n        //        let keyPair = msg.body.params.keyPair;\r\n        _this.identities.addAssertion(result).then((returnedValue) => {\r\n          let value = { type: 'execute', value: returnedValue, code: 200 };\r\n          let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\r\n          }\r\n\r\n        });\r\n        return;\r\n      } else if (funcName === 'refreshAccessToken') {\r\n        let domain = msg.body.params.domain;\r\n        let resources = msg.body.params.resources;\r\n\r\n        _this._getAccessTokenForDomain(domain, resources).then((token) => {\r\n          let replyMsg = {\r\n            id: msg.id,\r\n            type: 'response',\r\n            to: msg.from,\r\n            from: msg.to,\r\n            body: {\r\n              value: token.accessToken,\r\n              code: 200\r\n            }\r\n          };\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners for refreshAccessToken request: ' + err);\r\n          }\r\n\r\n        });\r\n        return;\r\n      } else if (funcName === 'unauthorise') {\r\n        let domain = msg.body.params.domain;\r\n        let resources = msg.body.params.resources;\r\n\r\n        try {\r\n          _this._revokeAccessToken(_this.identities.getAccessToken(domain, resources), domain, resources);\r\n        } catch (e) {\r\n          return reject('[IdentityModule.addGUIListeners] unauthorise error ' + err);\r\n        }\r\n\r\n          let replyMsg = {\r\n            id: msg.id,\r\n            type: 'response',\r\n            to: msg.from,\r\n            from: msg.to,\r\n            body: {\r\n              value: true,\r\n              code: 200\r\n            }\r\n          };\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            IdentityModule_log.error('On addGUIListeners for refreshAccessToken request: ' + err);\r\n          }\r\n\r\n        return;\r\n      }/*else if (funcName === 'selectIdentityForHyperty') {\r\n        let origin = msg.body.params.origin;\r\n        let idp = msg.body.params.idp;\r\n        let idHint = msg.body.params.idHint;\r\n        _this.selectIdentityForHyperty(origin, idp, idHint);\r\n        return;\r\n      }*/\r\n\r\n      // if the function requested is not a promise\r\n      let value = { type: 'execute', value: returnedValue, code: 200 };\r\n      let replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n      try {\r\n        _this._messageBus.postMessage(replyMsg);\r\n      } catch (err) {\r\n        IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  deployGUI() {\r\n    let _this = this;\r\n    _this.guiDeployed = true;\r\n  }\r\n\r\n  //******************* PRIVATE METHODS *******************\r\n  /**\r\n   * GetValidToken is for non legacy hyperties and verifies if the Token is still valid\r\n   * if the token is invalid it requests a new token\r\n   * @param  {String} hypertyURL hypertyURL\r\n   * @return {Promise}\r\n   */\r\n  _getValidToken(hypertyURL) {\r\n    IdentityModule_log.log('[IdentityModule._getValidToken]:hypertyURL', hypertyURL);\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.getIdToken(hypertyURL).then(function (assertion) {\r\n        IdentityModule_log.log('[IdentityModule._getValidToken] retrieved IdAssertion', assertion);\r\n        let timeNow = secondsSinceEpoch();\r\n\r\n        if (!assertion.hasOwnProperty('expires')) return resolve(assertion);\r\n\r\n        let expirationDate = assertion.expires;\r\n\r\n        /* if (completeId.hasOwnProperty('info')) {\r\n          if (completeId.info.hasOwnProperty('expires')) {\r\n            expirationDate = completeId.info.expires;\r\n          } else if (completeId.info.hasOwnProperty('tokenIDJSON')) {\r\n            expirationDate = completeId.info.tokenIDJSON.exp;\r\n          } else {\r\n            // throw 'The ID Token does not have an expiration time';\r\n            log.info('The ID Token does not have an expiration time');\r\n            resolve(assertion);\r\n          }\r\n        } else if (completeId.hasOwnProperty('infoToken') && completeId.infoToken.hasOwnProperty('exp')) {\r\n          expirationDate = completeId.infoToken.exp;\r\n        } else {\r\n          // throw 'The ID Token does not have an expiration time';\r\n          log.info('The ID Token does not have an expiration time');\r\n          resolve(assertion);\r\n        }*/\r\n\r\n        IdentityModule_log.log('[Identity.IdentityModule.getValidToken] Token expires in', expirationDate);\r\n        IdentityModule_log.log('[Identity.IdentityModule.getValidToken] time now:', timeNow);\r\n\r\n        if (timeNow >= expirationDate) {\r\n          //        if (timeNow >= 0) {\r\n          if (assertion.hasOwnProperty('refresh')) {\r\n            IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshing assertion: ', assertion);\r\n\r\n            _this.sendRefreshMessage(assertion).then((newAssertion) => {\r\n              IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshed assertion: ', newAssertion);\r\n              _this.identities.updateAssertion(newAssertion).then(() => {\r\n                resolve(newAssertion);\r\n              }, (err) => {\r\n                IdentityModule_log.error('[IdentityModule.getValidToken] error updating the assertion ', err);\r\n                reject(err);\r\n              });\r\n            }, (err) => {\r\n              IdentityModule_log.error('[IdentityModule.getValidToken] error refreshing the assertion ', err);\r\n              reject(err);\r\n            });\r\n          } else { // no refresh token available, user has to authenticate again to get a new assertion\r\n            // generate new idToken\r\n            _this.callGenerateMethods(assertion.idp.domain).then((value) => {\r\n              resolve(value);\r\n            }).catch(err => { reject('[IdentityModule.getValidToken] error when generating a new assertion ' + err); });\r\n          }\r\n        } else {\r\n          resolve(assertion);\r\n        }\r\n      }).catch(function (error) {\r\n        IdentityModule_log.error('[IdentityModule.getValidToken] error on getIdToken', error);\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * returns the reporter associated to the dataObject URL\r\n  * @param   {String}   dataObjectURL         dataObject url\r\n  * @return   {String}  reporter              dataObject url reporter\r\n  */\r\n  _getHypertyFromDataObject(dataObjectURL) {\r\n    IdentityModule_log.info('_getHypertyFromDataObject:dataObjectURL', dataObjectURL);\r\n    let _this = this;\r\n\r\n    return new Promise(function (resolve, reject) {\r\n\r\n      let splitedURL = divideURL(dataObjectURL);\r\n      let domain = splitedURL.domain;\r\n      let finalURL = parseMessageURL(dataObjectURL);\r\n\r\n      // check if is the creator of the hyperty\r\n      let reporterURL = _this.registry.getReporterURLSynchonous(finalURL);\r\n      IdentityModule_log.info('_getHypertyFromDataObject:reporterURL', reporterURL);\r\n\r\n      if (reporterURL) {\r\n        resolve(reporterURL);\r\n      } else {\r\n        // check if there is already an association from an hypertyURL to the dataObject\r\n        let storedReporterURL = _this.dataObjectsIdentity[finalURL];\r\n        IdentityModule_log.info('_getHypertyFromDataObject:storedReporterURL', storedReporterURL);\r\n\r\n        if (storedReporterURL) {\r\n          resolve(storedReporterURL);\r\n        } else {\r\n          // check if there is any hyperty that subscribed the dataObjectURL\r\n          let subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);\r\n          IdentityModule_log.info('_getHypertyFromDataObject:subscriberHyperty', subscriberHyperty);\r\n\r\n          if (subscriberHyperty) {\r\n            resolve(subscriberHyperty);\r\n          } else {\r\n            // search in domain registry for the hyperty associated to the dataObject\r\n            // search in case is a subscriber who wants to know the reporter\r\n            // To be reviewed in order to avoid the discovery transaction\r\n            _this._coreDiscovery.discoverDataObjectPerURL(finalURL, domain).then(dataObject => {\r\n              IdentityModule_log.info('_getHypertyFromDataObject:dataObject', dataObject);\r\n              _this.dataObjectsIdentity[finalURL] = dataObject.reporter;\r\n              IdentityModule_log.info('_getHypertyFromDataObject:dataObject.reporter', dataObject.reporter);\r\n              resolve(dataObject.reporter);\r\n            }, err => {\r\n              reject(err);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL\r\n  * @param {String}     idpDomain     idpDomain (Optional)\r\n  */\r\n  _resolveDomain(idpDomain) {\r\n    if (!idpDomain) {\r\n      return 'domain-idp://google.com';\r\n    } else {\r\n      return 'domain-idp://' + idpDomain;\r\n    }\r\n  }\r\n\r\n  /*\r\n    _secondsSinceEpoch() {\r\n      return Math.floor(Date.now() / 1000);\r\n    }*/\r\n}\r\n\r\n\r\n/* harmony default export */ var identity_IdentityModule = (IdentityModule_IdentityModule);\r\n\n// CONCATENATED MODULE: ./src/runtime/MsgBusHandlers.js\n/**\r\n *  Class where message bus handlers are built. To be used by the RuntimeUA to initialise the runtime UA.\r\n */\r\n\r\n//import { log as logLevels } from '../logLevels';\r\n\r\n// Log System\r\n\r\nlet MsgBusHandlers_log = loglevel[\"getLogger\"]('RuntimeUA');\r\n\r\nclass MsgBusHandlers {\r\n\r\n  constructor(pep, idm, crypto) {\r\n    if (!pep) throw Error('[MsgBusHandlers] pep input paramenter is mandatory');\r\n    if (!idm) throw Error('[MsgBusHandlers] idm input paramente is mandatory');\r\n    if (!crypto) throw Error('[MsgBusHandlers] crypto input paramente is mandatory');\r\n\r\n    this.policyEngine = pep;\r\n    this.identityManager = idm;\r\n    this.cryptoManager = crypto;\r\n  }\r\n\r\n  // Policy based access control for incoming messages\r\n\r\n  get pepInHandler() {\r\n    let _this = this;\r\n\r\n    return (ctx) => {\r\n      _this.policyEngine.authorise(ctx.msg, true).then((changedMgs) => {\r\n        ctx.msg = changedMgs;\r\n        ctx.next();\r\n      }).catch((reason) => {\r\n        MsgBusHandlers_log.error(reason);\r\n        ctx.fail(reason);\r\n      });\r\n    };\r\n\r\n  }\r\n\r\n  // Policy based access control for outgoing messages\r\n  get pepOutHandler() {\r\n    let _this = this;\r\n    return (ctx) => {\r\n      _this.policyEngine.authorise(ctx.msg, false).then((changedMgs) => {\r\n        ctx.msg = changedMgs;\r\n        ctx.next();\r\n      }).catch((reason) => {\r\n        MsgBusHandlers_log.error(reason);\r\n        ctx.fail(reason);\r\n      });\r\n    };\r\n  }\r\n\r\n  // Add Identity info to messages\r\n  get idmHandler() {\r\n    let _this = this;\r\n    return (ctx) => {\r\n      _this.identityManager.processMessage(ctx.msg).then((changedMgs) => {\r\n        ctx.msg = changedMgs;\r\n        ctx.next();\r\n      }).catch((reason) => {\r\n        MsgBusHandlers_log.error(reason);\r\n        ctx.fail(reason);\r\n      });\r\n    };\r\n  }\r\n\r\n  // encrypt messages\r\n\r\n  get encryptHandler() {\r\n    let _this = this;\r\n    return (ctx) => {\r\n      _this.cryptoManager.encryptMessage(ctx.msg).then((changedMgs) => {\r\n        ctx.msg = changedMgs;\r\n        ctx.next();\r\n      }).catch((reason) => {\r\n        MsgBusHandlers_log.error(reason);\r\n        ctx.fail(reason);\r\n      });\r\n    };\r\n\r\n  }\r\n\r\n  // decrypt messages\r\n\r\n  get decryptHandler() {\r\n    let _this = this;\r\n    return (ctx) => {\r\n      _this.cryptoManager.decryptMessage(ctx.msg).then((changedMgs) => {\r\n        ctx.msg = changedMgs;\r\n        ctx.next();\r\n      }).catch((reason) => {\r\n        MsgBusHandlers_log.warn(reason);\r\n        ctx.fail(reason);\r\n      });\r\n    };\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var runtime_MsgBusHandlers = (MsgBusHandlers);\r\n\n// CONCATENATED MODULE: ./src/identity/IdentityHandler.js\n/**\r\n* Provides an API to manage identities from msg bus pipeline\r\n* TODO: rename to something like IdentityPipelineHandler in order not to conflict with framework related IdentityHandler\r\n*/\r\n\r\n\r\n\r\n\r\nlet IdentityHandler_log = loglevel[\"getLogger\"]('IdentityHandler');\r\n\r\nclass IdentityHandler_IdentityHandler {\r\n\r\n  constructor(idm) {\r\n    let _this = this;\r\n\r\n    _this._idm = idm;\r\n\r\n  }\r\n\r\n  reset() {\r\n    console.log('IM reset');\r\n\r\n    // this._idm.identities.reset();\r\n    this._idm.identities = new identity_Identities(this._idm.identities._type, this._idm.identities._storageManager);\r\n    console.log(this._idm.identities);\r\n  }\r\n\r\n  _isToSetID(message) {\r\n    let schemasToIgnore = ['domain-idp', 'runtime', 'domain'];\r\n\r\n    let _from = message.from;\r\n\r\n    if (message.body && message.body.hasOwnProperty('source')) {\r\n      _from = message.body.source;\r\n    }\r\n\r\n    if (message.body && message.body.hasOwnProperty('subscriber')) {\r\n      _from = message.body.subscriber;\r\n    }\r\n\r\n    if (message.type === 'forward') {\r\n      return false;\r\n    }\r\n\r\n    if (message.type === 'event') {\r\n      return false;\r\n    }\r\n\r\n    // Signalling Messages between P2P Stubs don't have Identities. FFS\r\n    if (_from.includes('/p2prequester/') || _from.includes('/p2phandler/')) {\r\n      return false;\r\n    }\r\n\r\n\r\n    let splitFrom = (_from).split('://');\r\n    let fromSchema = splitFrom[0];\r\n    let isToIgnore = schemasToIgnore.indexOf(fromSchema) === -1;\r\n\r\n    return isToIgnore;\r\n  }\r\n\r\n  processMessage(message) {\r\n    IdentityHandler_log.log('[IdentityHandler.processMessage] ', message);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // skip messages that don't need identity tokens in the body\r\n\r\n      if (!this._isToSetID(message)) return resolve(message);\r\n\r\n      if (message.body && message.body.value && message.body.value.anonymous){\r\n        if (message.body.identity && message.body.identity.guid)\r\n          message.body.identity = { userProfile: { guid: message.body.identity.guid } };\r\n        else message.body.identity = { userProfile: { guid: 'anonymous' }  };\r\n        return resolve(message);\r\n  \r\n      }\r\n  \r\n\r\n      /*      let from = message.from;\r\n      let sourceURL = undefined;\r\n      if ( message.hasOwnProperty('body') && message.body.hasOwnProperty('source')) {\r\n        from = message.body.source;\r\n      }\r\n\r\n      if (message.type === 'forward') {\r\n        from = message.body.from;\r\n      }\r\n\r\n      if (message.hasOwnProperty('body') && message.body.hasOwnProperty('subscriber')) {\r\n        from = message.body.subscriber;\r\n      }*/\r\n\r\n      this._idm.getToken(message).then((identity) => {\r\n\r\n        if (!message.hasOwnProperty('body')) message.body = {};\r\n\r\n        message.body.identity = identity;\r\n        resolve(message);\r\n      }).catch((reason) => {\r\n        IdentityHandler_log.error(reason);\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ var identity_IdentityHandler = (IdentityHandler_IdentityHandler);\r\n\n// CONCATENATED MODULE: ./src/policy/ActionsService.js\nclass ActionsService {\r\n\r\n  constructor(context) {\r\n    this.context = context;\r\n  }\r\n\r\n  enforcePolicies(message, isIncomingMessage) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let policies = _this.context.getPolicies(message, isIncomingMessage);\r\n\r\n      if (policies !== undefined) {\r\n        if (policies.serviceProviderPolicy !== undefined) {\r\n          policies.serviceProviderPolicy.enforceActions(_this.context, message).then(messages => {\r\n            resolve(messages);\r\n          }, (error) => {\r\n            reject(error);\r\n          });\r\n        } else {\r\n          if (policies.userPolicy !== undefined) {\r\n            policies.userPolicy.enforceActions(_this.context, message).then(messages => {\r\n              resolve(messages);\r\n            }, (error) => {\r\n              reject(error);\r\n            });\r\n          } else {\r\n            resolve([message]);\r\n          }\r\n        }\r\n      } else {\r\n        resolve([message]);\r\n      }\r\n    });\r\n  }\r\n\r\n  forwardToID(message, email) {\r\n    let _this = this;\r\n    if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {\r\n        let splitTo = (message.to).split('://');\r\n        if (splitTo[0] !== 'runtime') {\r\n          _this.context.runtimeRegistry.discoverHypertyPerUser(email).then(result => {\r\n            message.to = result.hypertyURL;\r\n            message.body.via = undefined;\r\n            resolve(message);\r\n            _this.context.runtimeRegistry._messageBus.postMessage(message);\r\n          }, (error) => {\r\n            reject(error);\r\n          });\r\n        } else {\r\n          resolve(message);\r\n        }\r\n      } else {\r\n        resolve(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  forwardToHyperty(message, hypertyURL) {\r\n    let _this = this;\r\n    if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');\r\n\r\n    return new Promise((resolve) => {\r\n      if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {\r\n        let splitTo = (message.to).split('://');\r\n        if (splitTo[0] !== 'runtime') {\r\n          message.to = hypertyURL;\r\n          message.body.via = undefined;\r\n          resolve(message);\r\n          _this.context.runtimeRegistry._messageBus.postMessage(message);\r\n        } else {\r\n          resolve(message);\r\n        }\r\n      } else {\r\n        resolve(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  sendAutomaticMessage(message, text) {\r\n    let _this = this;\r\n    return new Promise((resolve) => {\r\n      let automaticMessage = {\r\n        from: message.to,\r\n        to: message.from,\r\n        body: {\r\n          value: text\r\n        },\r\n        type: message.type\r\n      };\r\n      resolve(message);\r\n      _this.context.runtimeRegistry._messageBus.postMessage(automaticMessage);\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var policy_ActionsService = (ActionsService);\r\n\n// CONCATENATED MODULE: ./src/policy/Operators.js\nclass Operators {\r\n\r\n  and(params) {\r\n    return params[0] && params[1];\r\n  }\r\n\r\n  between(params) {\r\n    let start = parseInt(params[0][0]);\r\n    let end = parseInt(params[0][1]);\r\n    let now = params[1];\r\n\r\n    if (end < start) {\r\n      now = (now < start) ? now += 2400 : now;\r\n      end += 2400;\r\n    }\r\n\r\n    return (now > start && now < end);\r\n  }\r\n\r\n  equals(params) {\r\n    return String(params[0]) === '*' || String(params[0]) === String(params[1]);\r\n  }\r\n\r\n  greaterThan(params) {\r\n    return params[1] > params[0];\r\n  }\r\n\r\n  in(params) {\r\n    return params[0].indexOf(params[1]) > -1;\r\n  }\r\n\r\n  lessThan(params) {\r\n    return params[1] < params[0];\r\n  }\r\n\r\n  not(params) {\r\n    return !params[0];\r\n  }\r\n\r\n  or(params) {\r\n    return params[0] || params[1];\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var policy_Operators = (Operators);\r\n\n// CONCATENATED MODULE: ./src/policy/PDP.js\n\r\n\r\n/**\r\n* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of\r\n* policies. The resource to be verified is specified in the first word of the 'condition' field of\r\n* a Policy object. The implementation that verifies if the message is compliant with a policy is\r\n* specified in a hashtable to allow dynamic definition of the implementation, providing\r\n* extensibility to the Policy Engine functionalities.\r\n*/\r\nclass PDP_PDP {\r\n\r\n  constructor(context) {\r\n    this.context = context;\r\n    this.operators = new policy_Operators();\r\n  }\r\n\r\n  evaluatePolicies(message, isIncomingMessage) {\r\n    let policies = this.context.getPolicies(message, isIncomingMessage);\r\n    let result = 'Not Applicable';\r\n    if (policies !== undefined) {\r\n      result = this.evaluatePolicy(message, policies.serviceProviderPolicy, isIncomingMessage);\r\n      if (result || result === 'Not Applicable') {\r\n        let userResult = this.evaluatePolicy(message, policies.userPolicy, isIncomingMessage);\r\n        if (userResult !== 'Not Applicable') {\r\n          result = userResult;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  evaluatePolicy(message, policy, isIncoming) {\r\n    let result = 'Not Applicable';\r\n    if (policy) {\r\n      result = policy.evaluateRules(this.context, message, isIncoming);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var policy_PDP = (PDP_PDP);\r\n\n// CONCATENATED MODULE: ./src/policy/combiningAlgorithms/AllowOverrides.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\r\n*/\r\nclass AllowOverrides {\r\n\r\n  /**\r\n  * Given an array of individual authorization decisions, prioritizes a positive one.\r\n  * @param    {boolean[]}   decisions\r\n  * @returns  {boolean}\r\n  */\r\n  combine(decisions) {\r\n    if (decisions.indexOf(true) !== -1) {\r\n      return true;\r\n    } else {\r\n      if (decisions.indexOf(false) !== -1) {\r\n        return false;\r\n      } else {\r\n        return 'Not Applicable';\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var combiningAlgorithms_AllowOverrides = (AllowOverrides);\r\n\n// CONCATENATED MODULE: ./src/policy/combiningAlgorithms/BlockOverrides.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\r\n*/\r\nclass BlockOverrides {\r\n\r\n  /**\r\n  * Given an array of individual authorisation decisions, prioritises a negative one.\r\n  * @param    {boolean[]}   decisions\r\n  * @returns  {boolean}\r\n  */\r\n  combine(decisions) {\r\n    if (decisions.indexOf(false) !== -1) {\r\n      return false;\r\n    } else {\r\n      if (decisions.indexOf(true) !== -1) {\r\n        return true;\r\n      } else {\r\n        return 'Not Applicable';\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var combiningAlgorithms_BlockOverrides = (BlockOverrides);\r\n\n// CONCATENATED MODULE: ./src/policy/combiningAlgorithms/FirstApplicable.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\r\n*/\r\nclass FirstApplicable {\r\n\r\n  /**\r\n  * Given an array of individual authorisation decisions, returns the first one different from 'Not Applicable', either positive or negative.\r\n  * @param    {boolean[]}     decisions\r\n  * @returns  {boolean}\r\n  */\r\n  combine(decisions) {\r\n    for (let i in decisions) {\r\n      if (decisions[i] !== 'Not Applicable') {\r\n        return decisions[i];\r\n      }\r\n    }\r\n    return 'Not Applicable';\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var combiningAlgorithms_FirstApplicable = (FirstApplicable);\r\n\n// CONCATENATED MODULE: ./src/policy/conditions/Condition.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n\r\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to represent a condition and evaluate its applicability.\r\n*/\r\nclass Condition_Condition {\r\n\r\n  /**\r\n  * Creates a new Condition.\r\n  * @class\r\n  * @param  {string}  attribute\r\n  * @param  {string}  operator\r\n  * @param  {*}       params\r\n  */\r\n  constructor(attribute, operator, params) {\r\n    this.attribute = attribute;\r\n    this.operator = operator;\r\n    this.params = params;\r\n    this.operators = new policy_Operators();\r\n  }\r\n\r\n  /**\r\n  * Verifies if the condition is applicable to the message. First, the system value that corresponds to the attribute is retrieved; then, that value is compared with the parameter specified in the condition by executing the operator implementation. If the operator is 'in' and the name of a group is given, then the array holding the members of the group is retrieved before the comparison.\r\n  * @param  {Object}    context   environment where the Policy Engine is being used\r\n  * @param  {Object}    message\r\n  */\r\n  isApplicable(context, message) {\r\n    context[this.attribute] = { message: message };\r\n    let value = context[this.attribute];\r\n    let tempParam;\r\n\r\n    if (this.operator === 'in') {\r\n      if (!(Array.isArray(this.params))) {\r\n        tempParam = context.getGroup(this.params, message.to);\r\n        return this.operators[this.operator]([tempParam, value]);\r\n      }\r\n    }\r\n\r\n    return this.operators[this.operator]([this.params, value]);\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var conditions_Condition = (Condition_Condition);\r\n\n// CONCATENATED MODULE: ./src/policy/conditions/SubscriptionCondition.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n\r\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to represent a subscription condition and evaluate its applicability.\r\n*/\r\nclass SubscriptionCondition_SubscriptionCondition extends conditions_Condition {\r\n\r\n  /**\r\n  * Creates a new SubscriptionCondition.\r\n  * @class\r\n  * @param  {string}  attribute\r\n  * @param  {string}  operator\r\n  * @param  {*}       params\r\n  */\r\n  constructor(attribute, operator, params) {\r\n    super(attribute, operator, params);\r\n  }\r\n\r\n  /**\r\n  * Verifies if the subscription condition is applicable to the message. First, verifies if the message is of the subscription type; second, verifies if the message is from a remote runtime to guarantee that the subscription is being validated in the destination runtime; third, verifies if the subscription preference is met.\r\n  * @param  {Object}    context   environment where the Policy Engine is being used\r\n  * @param  {Object}    message\r\n  */\r\n  isApplicable(context, message) {\r\n    let isSubscription = message.type === 'subscribe';\r\n    let isFromRemoteSM = context.isFromRemoteSM(message.from);\r\n    if (isSubscription & isFromRemoteSM) {\r\n      return super.isApplicable(context, message);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var conditions_SubscriptionCondition = (SubscriptionCondition_SubscriptionCondition);\r\n\n// CONCATENATED MODULE: ./src/policy/conditions/AdvancedCondition.js\n\r\n\r\n\r\n\r\nclass AdvancedCondition_AdvancedCondition {\r\n\r\n  constructor(condition) {\r\n    this.operators = new policy_Operators();\r\n    if (condition.operators !== undefined) {\r\n      condition = condition.condition;\r\n    }\r\n    condition = this.buildCondition(condition);\r\n    this.condition = condition;\r\n  }\r\n\r\n  buildCondition(condition) {\r\n    if (Array.isArray(condition[1])) {\r\n      condition[1] = this.buildCondition(condition[1]);\r\n    } else {\r\n      if (condition[1].attribute === 'subscription') {\r\n        condition[1] = new conditions_SubscriptionCondition(condition[1].attribute, condition[1].operator, condition[1].params);\r\n      } else {\r\n        condition[1] = new conditions_Condition(condition[1].attribute, condition[1].operator, condition[1].params);\r\n      }\r\n    }\r\n\r\n    if (condition[2] !== undefined) {\r\n      if (Array.isArray(condition[2])) {\r\n        condition[2] = this.buildCondition(condition[2]);\r\n      } else {\r\n        if (condition[2].attribute === 'subscription') {\r\n          condition[2] = new conditions_SubscriptionCondition(condition[2].attribute, condition[2].operator, condition[2].params);\r\n        } else {\r\n          condition[2] = new conditions_Condition(condition[2].attribute, condition[2].operator, condition[2].params);\r\n        }\r\n      }\r\n    }\r\n    return condition;\r\n  }\r\n\r\n  isApplicable(context, message, scope, target, operator, left, right) {\r\n    if (!operator) {\r\n      operator = this.condition[0];\r\n      left = this.condition[1];\r\n      right = this.condition[2];\r\n    }\r\n\r\n    while (!(left instanceof conditions_Condition) & !(left instanceof conditions_SubscriptionCondition) & (typeof left !== 'boolean')) {\r\n      left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);\r\n    }\r\n    if (right !== undefined) {\r\n      while (!(right instanceof conditions_Condition) & !(right instanceof conditions_SubscriptionCondition) & (typeof right !== 'boolean')) {\r\n        right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);\r\n      }\r\n    }\r\n\r\n    let resultLeft = (typeof left === 'boolean') ? left : left.isApplicable(context, message, scope, target);\r\n    let resultRight;\r\n    if (right !== undefined) {\r\n      resultRight = (typeof right === 'boolean') ? right : right.isApplicable(context, message, scope, target);\r\n    }\r\n    return this.operators[operator]([resultLeft, resultRight]);\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var conditions_AdvancedCondition = (AdvancedCondition_AdvancedCondition);\r\n\n// CONCATENATED MODULE: ./src/policy/Rule.js\n\r\n\r\n\r\n\r\n\r\nclass Rule_Rule {\r\n\r\n  constructor(decision, condition, scope, target, priority) {\r\n    this.decision = decision;\r\n    this.setCondition(condition);\r\n    this.priority = priority;\r\n    this.scope = scope;\r\n    this.target = target;\r\n  }\r\n\r\n  setCondition(condition) {\r\n    if (!(condition instanceof conditions_Condition || condition instanceof conditions_AdvancedCondition || condition instanceof conditions_AdvancedCondition)) {\r\n      let attribute = condition.attribute;\r\n      switch (attribute) {\r\n        case 'subscription':\r\n          this.condition = new conditions_AdvancedCondition(condition.attribute, condition.operator, condition.params);\r\n          break;\r\n        case undefined:\r\n          this.condition = new conditions_AdvancedCondition(condition);\r\n          break;\r\n        default:\r\n          this.condition = new conditions_Condition(condition.attribute, condition.operator, condition.params);\r\n      }\r\n    } else {\r\n      this.condition = condition;\r\n    }\r\n  }\r\n\r\n  evaluate(context, message, isIncoming) {\r\n    let field = (isIncoming) ? message.to : message.from;\r\n    let hypertyName;\r\n    switch (this.scope) {\r\n      case 'global':\r\n        break;\r\n\r\n      case 'hyperty':\r\n        if (isDataObjectURL(field)) {\r\n          let reporter = context.runtimeRegistry.getReporterURLSynchonous(removePathFromURL(field));\r\n          if (reporter !== undefined) {\r\n            hypertyName = context.runtimeRegistry.getHypertyName(reporter);\r\n          }\r\n        } else {\r\n          if (field.split('://')[0] === 'hyperty') {\r\n            hypertyName = context.runtimeRegistry.getHypertyName(removePathFromURL(field));\r\n          }\r\n        }\r\n        if (hypertyName === this.target) {\r\n          break;\r\n        }\r\n\r\n        return 'Not Applicable';\r\n\r\n      case 'identity':\r\n        let owner;\r\n\r\n        if (isDataObjectURL(field)) {\r\n          let reporter = context.runtimeRegistry.getReporterURLSynchonous(removePathFromURL(field));\r\n          owner = context.runtimeRegistry.getHypertyOwner(reporter);\r\n        } else {\r\n          if (field.split('://')[0] === 'hyperty') {\r\n            owner = context.runtimeRegistry.getHypertyOwner(removePathFromURL(field));\r\n          }\r\n        }\r\n        if (owner !== undefined) {\r\n          owner = getUserEmailFromURL(owner);\r\n        }\r\n        if (owner === this.target) {\r\n          break;\r\n        }\r\n\r\n        return 'Not Applicable';\r\n    }\r\n\r\n    if (this.condition.isApplicable(context, message, this.scope, this.target)) {\r\n      return this.decision;\r\n    } else {\r\n      return 'Not Applicable';\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ var policy_Rule = (Rule_Rule);\r\n\n// CONCATENATED MODULE: ./src/policy/Policy.js\n\r\n\r\n\r\n\r\n\r\nclass Policy_Policy {\r\n\r\n  constructor(key, rules, actions, combiningAlgorithm) {\r\n    if (!key) throw new Error('key is not defined');\r\n    if (!actions) throw new Error('actions are not defined');\r\n\r\n    this.actions = actions;\r\n    this.key = key;\r\n    this._setRules(rules);\r\n    this._setCombiningAlgorithm(combiningAlgorithm);\r\n  }\r\n\r\n  addAction(method, param) {\r\n    this.actions.push({ method: method, param: param });\r\n  }\r\n\r\n  createRule(decision, condition, scope, target, priority) {\r\n    if (priority === undefined) {\r\n      priority = this.getLastPriority() + 1;\r\n    }\r\n    let rule = new policy_Rule(decision, condition, scope, target, priority);\r\n    this.rules.push(rule);\r\n  }\r\n\r\n  deleteRule(rule) {\r\n    let indexToRemove = this.rules.indexOf(rule);\r\n    this.rules.splice(indexToRemove, 1);\r\n  }\r\n\r\n  enforceActions(context, message) {\r\n    return new Promise((resolve, reject) => {\r\n      let results = [];\r\n      if (this.actions.length !== 0) {\r\n        for (let i in this.actions) {\r\n          let result = context.pep.actionsService[this.actions[i].method](message, this.actions[i].param);\r\n          results.push(result);\r\n        }\r\n        Promise.all(results).then((messages) => {\r\n          resolve(messages);\r\n        }, error => {\r\n          reject(error);\r\n        });\r\n      } else {\r\n        resolve([message]);\r\n      }\r\n    });\r\n  }\r\n\r\n  evaluateRules(context, message, isIncoming) {\r\n    let results = [];\r\n    for (let i in this.rules) {\r\n      results.push(this.rules[i].evaluate(context, message, isIncoming));\r\n    }\r\n\r\n    return this.combiningAlgorithm.combine(results);\r\n  }\r\n\r\n  getLastPriority() {\r\n    let priorities = [];\r\n\r\n    if (this.rules.length !== 0) {\r\n      for (let i in this.rules) {\r\n        priorities.push(this.rules[i].priority);\r\n      }\r\n      return Math.max.apply(Math, priorities);\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  getRuleByPriority(priority) {\r\n    for (let i in this.rules) {\r\n      if (String(this.rules[i].priority) === String(priority)) {\r\n        return this.rules[i];\r\n      }\r\n    }\r\n    throw Error('Rule with priority ' + priority + ' does not exist!');\r\n  }\r\n\r\n  _setCombiningAlgorithm(combiningAlgorithm) {\r\n    if (!combiningAlgorithm) {\r\n      combiningAlgorithm = 'blockOverrides';\r\n    }\r\n    switch (combiningAlgorithm) {\r\n      case 'blockOverrides':\r\n        this.combiningAlgorithm = new combiningAlgorithms_BlockOverrides();\r\n        break;\r\n      case 'allowOverrides':\r\n        this.combiningAlgorithm = new combiningAlgorithms_AllowOverrides();\r\n        break;\r\n      case 'firstApplicable':\r\n        this.combiningAlgorithm = new combiningAlgorithms_FirstApplicable();\r\n        break;\r\n      default:\r\n        throw Error('Unknown algorithm: ' + combiningAlgorithm);\r\n    }\r\n  }\r\n\r\n  _setRules(rules) {\r\n    this.rules = [];\r\n\r\n    for (let i in rules) {\r\n      let rule = rules[i];\r\n      if (rule.priority === undefined) {\r\n        rule.priority = this.getLastPriority() + 1;\r\n      }\r\n      if (!(rule instanceof policy_Rule)) {\r\n        rule = new policy_Rule(rule.decision, rule.condition, rule.scope, rule.target, rule.priority);\r\n      }\r\n      this.rules.push(rule);\r\n    }\r\n  }\r\n\r\n  sortRules() {\r\n    return this.rules.sort(function(a, b) {\r\n      let x = a.priority; let y = b.priority;\r\n      return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var policy_Policy = (Policy_Policy);\r\n\n// CONCATENATED MODULE: ./src/policy/PEP.js\n// Log System\r\n\r\nlet PEP_log = loglevel[\"getLogger\"]('PEP');\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass PEP_PEP {\r\n\r\n  /**\r\n  * Creates a Policy Enforcement Point (PEP) instance\r\n  * @param    {Object}    context\r\n  */\r\n  constructor(context) {\r\n    let _this = this;\r\n\r\n    _this.pdp = new policy_PDP(context);\r\n    _this.actionsService = new policy_ActionsService(context);\r\n    _this.context = context;\r\n    context.pep = _this;\r\n\r\n    //TODO should be added a trigger to verify when the loadConfigurations is successfully completed\r\n    context.loadConfigurations();\r\n  }\r\n\r\n  /**\r\n  * return the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  get messageBus() {\r\n    let _this = this;\r\n    return _this.context.messageBus;\r\n  }\r\n\r\n  /**\r\n  * Set the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  set messageBus(messageBus) {\r\n    let _this = this;\r\n    _this.context.messageBus = messageBus;\r\n    _this.addGUIListeners();\r\n  }\r\n\r\n  addGUIListeners() {\r\n    let _this = this;\r\n\r\n    _this.context.messageBus.addListener(_this.context.pepURL, (msg) => {\r\n      let funcName = msg.body.method;\r\n\r\n      let returnedValue;\r\n      if (funcName === 'addToGroup') {\r\n        let groupName = msg.body.params.groupName;\r\n        let userEmail = msg.body.params.userEmail;\r\n        returnedValue = _this.context.addToGroup(groupName, userEmail);\r\n      } else if (funcName === 'createGroup') {\r\n        let groupName = msg.body.params.groupName;\r\n        returnedValue = _this.context.createGroup(groupName);\r\n      } else if (funcName === 'addPolicy') {\r\n        let source = msg.body.params.source;\r\n        let key = msg.body.params.key;\r\n        let policy = msg.body.params.policy;\r\n        let combiningAlgorithm = msg.body.params.combiningAlgorithm;\r\n        returnedValue = _this.addPolicy(source, key, policy, combiningAlgorithm);\r\n      } else if (funcName === 'deleteGroup') {\r\n        let groupName = msg.body.params.groupName;\r\n        returnedValue = _this.context.deleteGroup(groupName);\r\n      } else if (funcName === 'removePolicy') {\r\n        let source = msg.body.params.source;\r\n        let key = msg.body.params.key;\r\n        returnedValue = _this.removePolicy(source, key);\r\n      } else if (funcName === 'savePolicies') {\r\n        let source = msg.body.params.source;\r\n        returnedValue = _this.context.savePolicies(source);\r\n      } else if (funcName === 'userPolicies') {\r\n        returnedValue = _this.context.userPolicies;\r\n      } else if (funcName === 'activeUserPolicy') {\r\n        let userPolicy = msg.body.params.userPolicy;\r\n        if (userPolicy) { _this.context.activeUserPolicy = userPolicy; }\r\n        returnedValue = _this.context.activeUserPolicy;\r\n      } else if (funcName === 'userPolicy') {\r\n        let key = msg.body.params.key;\r\n        returnedValue = _this.context.userPolicies[key];\r\n      } else if (funcName === 'saveActivePolicy') {\r\n        returnedValue = _this.context.saveActivePolicy();\r\n      } else if (funcName === 'getMyEmails') {\r\n        returnedValue = _this.context.getMyEmails();\r\n      } else if (funcName === 'getMyHyperties') {\r\n        returnedValue = _this.context.getMyHyperties();\r\n      } else if (funcName === 'groups') {\r\n        returnedValue = _this.context.groups;\r\n      } else if (funcName === 'getGroupsNames') {\r\n        returnedValue = _this.context.getGroupsNames();\r\n      } if (funcName === 'removeFromGroup') {\r\n        let groupName = msg.body.params.groupName;\r\n        let userEmail = msg.body.params.userEmail;\r\n        returnedValue = _this.context.removeFromGroup(groupName, userEmail);\r\n      }\r\n\r\n      let value = {type: 'execute', value: returnedValue, code: 200};\r\n      let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\r\n      _this.context.messageBus.postMessage(replyMsg);\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Adds a policy to the Policy Enforcement Point (PEP). The policy can be created by the service\r\n  * provider or by the user.\r\n  * @param    {String}    source\r\n  * @param    {String}    key\r\n  * @param    {Object}    policy\r\n  */\r\n  addPolicy(source, key, policy, combiningAlgorithm) {\r\n    if (!source) throw new Error('source is not defined');\r\n    if (!key) throw new Error('key is not defined');\r\n\r\n    if (policy === undefined) {\r\n      policy = new policy_Policy(key, [], [], combiningAlgorithm);\r\n    } else {\r\n      if (!(policy instanceof policy_Policy)) {\r\n        policy = new policy_Policy(policy.key, policy.rules, policy.actions, policy.combiningAlgorithm);\r\n      }\r\n    }\r\n\r\n    switch (source) {\r\n      case 'SERVICE_PROVIDER':\r\n        this.context.savePolicies(source, policy, key);\r\n        break;\r\n      case 'USER':\r\n        this.context.userPolicies[key] = policy;\r\n        this.context.savePolicies(source);\r\n        break;\r\n      default:\r\n        throw Error('Unknown policy source: ' + source);\r\n    }\r\n  }\r\n\r\n  authorise(message, isIncoming) {\r\n    // log.log('[Policy.PEP Authorise] ', message);\r\n    // log.log(message);\r\n    if (!message) throw new Error('message is not defined');\r\n    if (!message.from) throw new Error('message.from is not defined');\r\n    if (!message.to) throw new Error('message.to is not defined');\r\n    if (!message.type) throw new Error('message.type is not defined');\r\n    message.body = message.body || {};\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      message.body = message.body || {};\r\n      let _this = this;\r\n\r\n      let result = _this.pdp.evaluatePolicies(message, isIncoming);\r\n      if (result === 'Not Applicable') {\r\n        result = _this.context.defaultBehaviour;\r\n        message.body.auth = false;\r\n      }\r\n      _this.actionsService.enforcePolicies(message, isIncoming).then(messages => {\r\n        for (let i in messages) {\r\n          message = messages[i];\r\n          if (result) {\r\n            message.body.auth = (message.body.auth === undefined) ? true : message.body.auth;\r\n            resolve(message);\r\n          } else {\r\n            let errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };\r\n            reject(errorMessage);\r\n          }\r\n        }\r\n      }, (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    });\r\n  }\r\n  authoriseSync(message) {\r\n    let result;\r\n    message.body = message.body || {};\r\n    result = this.pdp.evaluatePolicies(message, true);\r\n    if (result === 'Not Applicable') {\r\n      result = this.context.defaultBehaviour;\r\n    }\r\n    return result;\r\n\r\n  }\r\n\r\n  removePolicy(source, key) {\r\n    if (!source) throw new Error('source is not defined');\r\n    if (source !== '*' && !key) throw new Error('key is not defined');\r\n\r\n    switch (source) {\r\n      case '*':\r\n        this.context.serviceProviderPolicy = {};\r\n        this.context.userPolicies = {};\r\n        this.context.activeUserPolicy = undefined;\r\n        this.context.savePolicies('USER');\r\n        this.context.savePolicies('SERVICE_PROVIDER');\r\n        this.context.saveActivePolicy();\r\n        break;\r\n      case 'SERVICE_PROVIDER':\r\n        delete this.context.serviceProviderPolicy[key];\r\n        this.context.savePolicies();\r\n        break;\r\n      case 'USER':\r\n        delete this.context.userPolicies[key];\r\n        if (key === this.context.activeUserPolicy) {\r\n          this.context.activeUserPolicy = undefined;\r\n          this.context.saveActivePolicy();\r\n        }\r\n        this.context.savePolicies('USER');\r\n        break;\r\n      default:\r\n        throw Error('Unknown policy source: ' + source);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var policy_PEP = (PEP_PEP);\r\n\n// CONCATENATED MODULE: ./src/bus/Pipeline.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\nlet Pipeline_log = loglevel[\"getLogger\"]('Pipeline');\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.\r\n* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.\r\n*/\r\n\r\n\r\n\r\nclass Pipeline {\r\n  /* public\r\n    handlers: ((PipeContext) => void)[]\r\n    onFail: (error) => void\r\n  */\r\n\r\n  constructor(_onFail) {\r\n    let _this = this;\r\n\r\n    _this.handlers = [];\r\n    _this.onFail = _onFail;\r\n  }\r\n\r\n  /**\r\n   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.\r\n   * @param  {Message} msg       Message for the queue\r\n   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.\r\n   */\r\n  process(msg, onDeliver) {\r\n    let _this = this;\r\n\r\n    if (_this.handlers.length > 0) {\r\n      let iter = new Iterator(_this.handlers);\r\n      iter.next(new PipeContext(_this, iter, msg, onDeliver));\r\n    } else {\r\n      onDeliver(msg);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Wrapper around a message that adds actions that can be fired by any interceptor handler.\r\n* The Pipeline is asynchronous, so an handler should always call an action, the default one is \"next()\"\r\n*/\r\nclass PipeContext {\r\n  /* private\r\n    _inStop: boolean\r\n\r\n    _pipeline: Pipeline\r\n    _iter: Iterator\r\n    _msg: Message\r\n  */\r\n\r\n  constructor(pipeline, iter, msg, onDeliver) {\r\n    let _this = this;\r\n\r\n    _this._inStop = false;\r\n\r\n    _this._pipeline = pipeline;\r\n    _this._iter = iter;\r\n    _this._msg = msg;\r\n    _this._onDeliver = onDeliver;\r\n  }\r\n\r\n  get pipeline() { return this._pipeline; }\r\n\r\n  get msg() { return this._msg; }\r\n  set msg(inMsg) { this._msg = inMsg; }\r\n\r\n  /**\r\n   * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.\r\n   */\r\n  next() {\r\n    let _this = this;\r\n\r\n    if (!_this._inStop) {\r\n      if (_this._iter.hasNext) {\r\n        _this._iter.next(_this);\r\n      } else {\r\n        _this._onDeliver(_this._msg);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Proceed directly to the onDeliver handler, unless there was an error.\r\n   */\r\n  deliver() {\r\n    let _this = this;\r\n    if (!_this._inStop) {\r\n      _this._inStop = true;\r\n      _this._onDeliver(_this._msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark the context with an error and proceed to the onFail handler.\r\n   * @param  {[type]} error [description]\r\n   */\r\n  fail(error) {\r\n    let _this = this;\r\n\r\n    if (!_this._inStop) {\r\n      _this._inStop = true;\r\n      if (_this._pipeline.onFail) {\r\n        _this._pipeline.onFail(error);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nclass Iterator {\r\n  /* private\r\n    _index: number\r\n    _array: []\r\n  */\r\n\r\n  constructor(array) {\r\n    this._index = -1;\r\n    this._array = array;\r\n  }\r\n\r\n  get hasNext() {\r\n    return this._index < this._array.length - 1;\r\n  }\r\n\r\n  get next() {\r\n    this._index++;\r\n    return this._array[this._index];\r\n  }\r\n}\r\n\r\n/* harmony default export */ var bus_Pipeline = (Pipeline);\r\n\n// CONCATENATED MODULE: ./src/bus/MessageBus.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log system\r\n\r\nlet MessageBus_log = loglevel[\"getLogger\"]('MessageBus');\r\n\r\n\r\n\r\n\r\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Message BUS Interface is an extension of the Bus\r\n* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)\r\n*/\r\nclass MessageBus_MessageBus extends bus_Bus {\r\n  /* private\r\n  _registry: Registry\r\n  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }\r\n\r\n  _pipeline: Pipeline\r\n  */\r\n\r\n  //TODO: future optimization\r\n  //1. message batch processing with setInterval\r\n  //2. resolve default gateway/protostub with register.resolve\r\n\r\n  constructor(registry, runtimeUrl) {\r\n    super();\r\n    this._registry = registry;\r\n    this._forwards = {};\r\n    this._runtimeUrl = runtimeUrl;\r\n\r\n    this._pipelineIn = new bus_Pipeline((error) => {\r\n      MessageBus_log.error('PIPELINE-ERROR: ', JSON.stringify(error));\r\n    });\r\n\r\n    this._pipelineOut = new bus_Pipeline((error) => {\r\n      MessageBus_log.error('PIPELINE-ERROR: ', JSON.stringify(error));\r\n    });\r\n  }\r\n\r\n  get pipelineIn() { return this._pipelineIn; }\r\n\r\n  get pipelineOut() { return this._pipelineOut; }\r\n\r\n  /**\r\n   * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.\r\n   * External routing use the registry.resolve(..) method to decide the destination sandbox.\r\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\r\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\r\n   * @return {number}                  the Message id\r\n   */\r\n  postMessage(inMsg, responseCallback, timeout) {\r\n    MessageBus_log.info('onPOSTMessage: ', inMsg);\r\n    let _this = this;\r\n\r\n    let deliver = (msg) => {\r\n\r\n          _this._responseCallback(inMsg, responseCallback, timeout);\r\n\r\n          if (!_this._onResponse(msg)) {\r\n            let itemList = _this._subscriptions[msg.to];\r\n            if (itemList) {\r\n              //do not publish on default address, because of loopback cycle\r\n              _this._publishOn(itemList, msg);\r\n            } else if (!msg.to.includes(_this._runtimeUrl)) {\r\n              //if there is no listener, send to external interface\r\n              _this._onPostMessage(msg);\r\n            }\r\n          }\r\n    }\r\n\r\n    _this._genId(inMsg);\r\n\r\n    if (_this._isToProcess(inMsg)) {\r\n      let isIncoming = _this._isIncomingMessage(inMsg);\r\n\r\n      if (isIncoming) _this._pipelineIn.process(inMsg, deliver);\r\n      else _this._pipelineOut.process(inMsg, deliver);\r\n    } else deliver(inMsg);\r\n\r\n    return inMsg.id;\r\n\r\n  }\r\n\r\n\r\n  _isToProcess(message) {\r\n    let schemasToIgnore = ['domain', 'domain-idp', 'global', 'hyperty-runtime', 'runtime'];\r\n    let splitFrom = (message.from).split('://');\r\n    let fromSchema = splitFrom[0];\r\n    let splitTo = (message.to).split('://');\r\n    let toSchema =  splitTo[0];\r\n    let from = message.from;\r\n    let to = message.to;\r\n\r\n    // Signalling messages between P2P Stubs don't have to be verified. FFS\r\n\r\n    if (message.body && message.body.source) {\r\n      from = message.body.source;\r\n    }\r\n\r\n    if (message.body && message.body.subscriber) {\r\n      from = message.body.subscriber;\r\n    }\r\n\r\n    if (from.indexOf('/p2phandler/') !== -1 || from.indexOf('/p2prequester/') !== -1 || to.indexOf('/p2phandler/') !== -1 || to.indexOf('/p2prequester/') !== -1) {\r\n      return false;\r\n    }\r\n\r\n    if (this._registry.isLocal(from) && this._registry.isLocal(message.to))\r\n      return false;\r\n\r\n    if (message.from === fromSchema || message.to === toSchema || message.type === 'read' || message.type === 'response' || (message.from.includes('hyperty://') && message.type === 'delete')) {\r\n      return false;\r\n    } else {\r\n      return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;\r\n    }\r\n  }\r\n\r\n  _isIncomingMessage(message) {\r\n    let from;\r\n\r\n    if (message.type === 'forward') {\r\n      MessageBus_log.info('[MessageBus - isIncomingMessage] - message.type: ', message.type);\r\n      from = message.body.from;\r\n    } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('source') && message.body.source) {\r\n      MessageBus_log.info('[MessageBus - isIncomingMessage] - message.body.source: ', message.body.source);\r\n      from = message.body.source;\r\n    } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('subscriber') && message.body.subscriber) {\r\n      //TODO: this subscriber validation should not exist, because is outdated\r\n      //TODO: the syncher and syncher manager not following the correct spec;\r\n      MessageBus_log.info('[MessageBus - isIncomingMessage] - message.body.subscriber: ', message.body.subscriber);\r\n      from = message.body.subscriber;\r\n    }  else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('reporter') && message.body.reporter) {\r\n      //TODO: this subscriber validation should not exist, because is outdated\r\n      //TODO: the syncher and syncher manager not following the correct spec;\r\n      MessageBus_log.info('[MessageBus - isIncomingMessage] - message.body.reporter: ', message.body.reporter);\r\n      from = message.body.reporter;\r\n    } else {\r\n      MessageBus_log.info('[MessageBus - isIncomingMessage] - message.from ', message.from);\r\n      from = message.from;\r\n    }\r\n\r\n    MessageBus_log.info('[MessageBus - isIncomingMessage] - check if isLocal: ', from);\r\n    return !this._registry.isLocal(from);\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.\r\n   * This means, even if there is a listener for the address, it will also send the message to the external routing.\r\n   * @param {URL} from Publish address.\r\n   */\r\n  addPublish(from) {\r\n    let _this = this;\r\n\r\n    //verify if forward exist\r\n    let refCount = _this._forwards[from];\r\n    if (!refCount) {\r\n      let forwardListener = _this.addListener(from, (msg) => {\r\n        MessageBus_log.info('MB-PUBLISH: ( ' + from + ' )');\r\n        // hack to skip external routes for messages coming from external hosts \r\n        // and messages targeting internal core runtime components\r\n        if (!(msg.body && msg.body.source && msg.body.source.includes('/protostub/')) &&\r\n        !msg.to.includes(_this._runtimeUrl))\r\n          _this._onPostMessage(msg);\r\n      });\r\n\r\n      refCount = {\r\n        counter: 0,\r\n        fl: forwardListener,\r\n        remove: () => {\r\n          this.counter--;\r\n          if (this.counter === 0) {\r\n            this.fl.remove();\r\n            delete _this._forwards[from];\r\n          }\r\n        }\r\n      };\r\n\r\n     _this._forwards[from] = refCount;\r\n   }\r\n\r\n   refCount.counter++;\r\n   return refCount;\r\n  }\r\n\r\n  /**\r\n   * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.\r\n   * @param {URL} from Message destination, it's actually the field \"to\" of the message.\r\n   * @param {URL} to   Forward address.\r\n   */\r\n   addForward(from, to) {\r\n     let _this = this;\r\n\r\n     return _this.addListener(from, (msg) => {\r\n       MessageBus_log.info('MB-FORWARD: ( ' + from + ' to ' + to + ' )');\r\n       _this.forward(to, msg);\r\n     });\r\n   }\r\n\r\n   /**\r\n    * Just forward's a message to the forward address. Listeners should be available for the forward address.\r\n    * @param  {URL} url Forward address.\r\n    * @param  {Message} msg Message to forward\r\n    */\r\n   forward(url, msg) {\r\n     let _this = this;\r\n\r\n     let itemList = _this._subscriptions[url];\r\n     if (itemList) {\r\n       _this._publishOn(itemList, msg);\r\n     }\r\n   }\r\n\r\n   //default route, if there are no listeners available for a message destination.\r\n   _onPostMessage(msg) {\r\n     let _this = this;\r\n\r\n     //resolve external protostub...\r\n     _this._registry.resolve(msg).then((route, msg2route) => {\r\n       if (msg2route) _this.forward(route, msg2route);\r\n       else _this.forward(route, msg);\r\n     }).catch(function(e) {\r\n       MessageBus_log.error('RESOLVE-ERROR: ', e);\r\n     });\r\n   }\r\n}\r\n\r\n/* harmony default export */ var bus_MessageBus = (MessageBus_MessageBus);\r\n\n// CONCATENATED MODULE: ./src/cryptoManager/utf8.js\n// Marshals a string to Uint8Array.\r\nfunction encodeUTF8(s) {\r\n\tvar i = 0;\r\n\tvar bytes = new Uint8Array(s.length * 4);\r\n\tfor (var ci = 0; ci != s.length; ci++) {\r\n    try{\r\n      var xxx = s.charCodeAt(ci);\r\n    } catch (err){\r\n      console.log(err.message);\r\n      return;\r\n\r\n    }\r\n\t\tvar c = s.charCodeAt(ci);\r\n\t\tif (c < 128) {\r\n\t\t\tbytes[i++] = c;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (c < 2048) {\r\n\t\t\tbytes[i++] = c >> 6 | 192;\r\n\t\t} else {\r\n\t\t\tif (c > 0xd7ff && c < 0xdc00) {\r\n\t\t\t\tif (++ci == s.length) throw 'UTF-8 encode: incomplete surrogate pair';\r\n\t\t\t\tvar c2 = s.charCodeAt(ci);\r\n\t\t\t\tif (c2 < 0xdc00 || c2 > 0xdfff) throw 'UTF-8 encode: second char code 0x' + c2.toString(16) + ' at index ' + ci + ' in surrogate pair out of range';\r\n\t\t\t\tc = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\r\n\t\t\t\tbytes[i++] = c >> 18 | 240;\r\n\t\t\t\tbytes[i++] = c>> 12 & 63 | 128;\r\n\t\t\t} else { // c <= 0xffff\r\n\t\t\t\tbytes[i++] = c >> 12 | 224;\r\n\t\t\t}\r\n\t\t\tbytes[i++] = c >> 6 & 63 | 128;\r\n\t\t}\r\n\t\tbytes[i++] = c & 63 | 128;\r\n\t}\r\n\treturn bytes.subarray(0, i);\r\n}\r\n\r\n// Unmarshals an Uint8Array to string.\r\nfunction decodeUTF8(bytes) {\r\n\tvar s = '';\r\n\tvar i = 0;\r\n\twhile (i < bytes.length) {\r\n\t\tvar c = bytes[i++];\r\n\t\tif (c > 127) {\r\n\t\t\tif (c > 191 && c < 224) {\r\n\t\t\t\tif (i >= bytes.length) throw 'UTF-8 decode: incomplete 2-byte sequence';\r\n\t\t\t\tc = (c & 31) << 6 | bytes[i] & 63;\r\n\t\t\t} else if (c > 223 && c < 240) {\r\n\t\t\t\tif (i + 1 >= bytes.length) throw 'UTF-8 decode: incomplete 3-byte sequence';\r\n\t\t\t\tc = (c & 15) << 12 | (bytes[i] & 63) << 6 | bytes[++i] & 63;\r\n\t\t\t} else if (c > 239 && c < 248) {\r\n\t\t\t\tif (i+2 >= bytes.length) throw 'UTF-8 decode: incomplete 4-byte sequence';\r\n\t\t\t\tc = (c & 7) << 18 | (bytes[i] & 63) << 12 | (bytes[++i] & 63) << 6 | bytes[++i] & 63;\r\n\t\t\t} else throw 'UTF-8 decode: unknown multibyte start 0x' + c.toString(16) + ' at index ' + (i - 1);\r\n\t\t\t++i;\r\n\t\t}\r\n\r\n\t\tif (c <= 0xffff) s += String.fromCharCode(c);\r\n\t\telse if (c <= 0x10ffff) {\r\n\t\t\tc -= 0x10000;\r\n\t\t\ts += String.fromCharCode(c >> 10 | 0xd800)\r\n\t\t\ts += String.fromCharCode(c & 0x3FF | 0xdc00)\r\n\t\t} else throw 'UTF-8 decode: code point 0x' + c.toString(16) + ' exceeds UTF-16 reach';\r\n\t}\r\n\treturn s;\r\n}\r\n\n// CONCATENATED MODULE: ./src/cryptoManager/Crypto.js\n\r\n\r\nlet Crypto_log = loglevel[\"getLogger\"]('CryptoManager');\r\n\r\n/**\r\n* Class with the cryptographic functions for the authentication protocol\r\n*\r\n*/\r\nclass Crypto_Crypto {\r\n\r\n/**\r\n* Runtimefactory is passed in the costructor, because the nodeJS has a different crypto module\r\n* from the browser. RuntimeFactory provides a wrapper for the fuctions of nodeJS, so they can be\r\n* invoked browser like.\r\n*/\r\n  constructor(runtimeFactory) {\r\n    let _this = this;\r\n    typeof runtimeFactory.createWebcrypto === 'function' ? _this._crypto = runtimeFactory.createWebcrypto() : _this._crypto = crypto;\r\n  }\r\n\r\n  /**\r\n  * Performs a RSA encryption\r\n  * @param   {ArrayBuffer}    value    the public key\r\n  * @param   {BufferSource}    value    data to be encryped\r\n  * @return  {Uint8Array}   encrypted data\r\n  */\r\n  encryptRSA(pubKey, data) {\r\n    Crypto_log.log('encryptRSA:pubKey', pubKey);\r\n    Crypto_log.log('encryptRSA:data', data);\r\n\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function(publicKey) {\r\n\r\n        _this._crypto.subtle.encrypt(\r\n          {\r\n            name: 'RSA-OAEP'\r\n          },\r\n          publicKey, //from generateKey or importKey above\r\n          data //ArrayBuffer of data you want to encrypt\r\n        )\r\n          .then(function(encrypted) {\r\n          //returns an ArrayBuffer containing the encrypted data\r\n          // log.log('crypto-encryptRSA', new Uint8Array(encrypted));\r\n            resolve(new Uint8Array(encrypted));\r\n\r\n          }).catch(function(err) {\r\n          // log.log('crypto-encryptRSA', err);\r\n            reject(err);\r\n          });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Performs a RSA decryption\r\n  * @param   {ArrayBuffer}    value    the private key\r\n  * @param   {BufferSource}    value    data to be decrypted\r\n  * @return  {Uint8Array}   decrypted data\r\n  */\r\n  decryptRSA(privKey, data) {\r\n    Crypto_log.log('decryptRSA:privKey', privKey);\r\n    Crypto_log.log('decryptRSA:data', data);\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._importRSAdecryptKey(privKey).then(function(privateKey) {\r\n\r\n        _this._crypto.subtle.decrypt(\r\n          {\r\n            name: 'RSA-OAEP'\r\n          },\r\n          privateKey, //from generateKey or importKey above\r\n          data //ArrayBuffer of the data\r\n        )\r\n          .then(function(decrypted) {\r\n\r\n            let decryptedData = new Uint8Array(decrypted);\r\n\r\n            // log.log('crypto-decryptRSA', decryptedData);\r\n            resolve(decryptedData);\r\n\r\n          }).catch(function(err) {\r\n          // log.log('crypto-decryptRSA', err);\r\n            reject(err);\r\n          });\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Performs a RSA sign\r\n  * @param   {ArrayBuffer}    value    the private key\r\n  * @param   {BufferSource}    value    data to be signed\r\n  * @return  {Uint8Array}   data signature\r\n  */\r\n  signRSA(privKey, data) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._importRSAsignKey(privKey).then(function(privateKey) {\r\n\r\n        _this._crypto.subtle.sign(\r\n          {\r\n            name: 'RSASSA-PKCS1-v1_5'\r\n          },\r\n          privateKey, //from generateKey or importKey above\r\n          encodeUTF8(data) //ArrayBuffer of data you want to sign\r\n        )\r\n          .then(function(signature) {\r\n          //returns an ArrayBuffer containing the signature\r\n          // log.log('crypto-signRSA', new Uint8Array(signature));\r\n            resolve(new Uint8Array(signature));\r\n\r\n          }).catch(function(err) {\r\n          // log.log('crypto-signRSA', err);\r\n            reject(err);\r\n          });\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Performs a RSA signature verification\r\n  * @param   {ArrayBuffer}    value    the public key\r\n  * @param   {BufferSource}    value    data to be verified\r\n  * @return  {Boolean}   result of the signature verification\r\n  */\r\n  verifyRSA(pubKey, data, signature) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._importRSAverifyKey(pubKey).then(function(publicKey) {\r\n\r\n        _this._crypto.subtle.verify(\r\n          {\r\n            name: 'RSASSA-PKCS1-v1_5'\r\n          },\r\n          publicKey, //from generateKey or importKey above\r\n          signature, //ArrayBuffer of the signature\r\n          encodeUTF8(data) //ArrayBuffer of the data\r\n        )\r\n          .then(function(isvalid) {\r\n          //returns a boolean on whether the signature is true or not\r\n          // log.log('crypto-verifyRSA', isvalid);\r\n            resolve(isvalid);\r\n\r\n          }).catch(function(err) {\r\n          // log.log('crypto-verifyRSA', err);\r\n            reject(err);\r\n          });\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Performs a RSA signature verification\r\n  * @param   {ArrayBuffer}    value    the public key\r\n  * @param   {BufferSource}    value    data to be verified\r\n  * @return  {Boolean}   result of the signature verification\r\n  */\r\n  encryptAES(key, data, iv) {\r\n    Crypto_log.log('encryptAES:key', key);\r\n    Crypto_log.log('encryptAES:data', data);\r\n    Crypto_log.log('encryptAES:iv', iv);\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._importAESkey(key).then(function(aesKey) {\r\n\r\n        _this._crypto.subtle.encrypt(\r\n          {\r\n            name: 'AES-CBC',\r\n\r\n            //Don't re-use initialization vectors!\r\n            //Always generate a new iv every time your encrypt!\r\n            iv: iv\r\n          },\r\n          aesKey, //from generateKey or importKey above\r\n          encodeUTF8(data) //ArrayBuffer of data you want to encrypt\r\n        )\r\n          .then(function(encrypted) {\r\n          //returns an ArrayBuffer containing the encrypted data\r\n          // log.log('crypto-encryptAES', new Uint8Array(encrypted));\r\n            resolve(new Uint8Array(encrypted));\r\n\r\n          }).catch(function(err) {\r\n          // log.log('crypto-encryptAES', err);\r\n            reject(err);\r\n          });\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  decryptAES(key, data, iv) {\r\n    Crypto_log.log('decryptAES:key', key);\r\n    Crypto_log.log('decryptAES:data', data);\r\n    Crypto_log.log('decryptAES:iv', iv);\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._importAESkey(key).then(function(aesKey) {\r\n\r\n        _this._crypto.subtle.decrypt(\r\n          {\r\n            name: 'AES-CBC',\r\n            iv: iv\r\n          },\r\n          aesKey, //from generateKey or importKey above\r\n          data //ArrayBuffer of the data\r\n        )\r\n          .then(function(decrypted) {\r\n\r\n            let decodedData = decodeUTF8(new Uint8Array(decrypted));\r\n            Crypto_log.log('crypto-decryptAES', decodedData);\r\n            resolve(decodedData);\r\n\r\n          }).catch(function(err) {\r\n          // log.log('crypto-decryptAES', err);\r\n            reject(err);\r\n          });\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  * creates a hash using the HMAC algorithm\r\n  * @param  {byteArray}    key       key to be used in the hmac\r\n  * @param  {string}      data       information to be hashed\r\n  * @return  {byteArray}   signature  resulting hash\r\n  */\r\n  hashHMAC(key, data) {\r\n    Crypto_log.log('hashHMAC:key', key);\r\n    Crypto_log.log('hashHMAC:data', data);\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      if (typeof data != 'string') {\r\n        data = JSON.stringify(data);\r\n        Crypto_log.log('Converting hashHMAC inpured DATA');\r\n        Crypto_log.log('HHashHMAC:', data);\r\n      }\r\n\r\n\r\n      _this._importHMACkey(key).then(function(hmacKey) {\r\n\r\n        _this._crypto.subtle.sign(\r\n          {\r\n            name: 'HMAC'\r\n          },\r\n          hmacKey, //from generateKey or importKey above\r\n          encodeUTF8(data) //ArrayBuffer of data you want to sign\r\n        )\r\n          .then(function(signature) {\r\n            Crypto_log.log('HashHMAC signature:', new Uint8Array(signature));\r\n\r\n            // log.log('crypto-hashHMAC', signature);\r\n            //returns an ArrayBuffer containing the signature\r\n            resolve(new Uint8Array(signature));\r\n\r\n          }).catch(function(err) {\r\n            // log.log('crypto-hashHMAC', err);\r\n            reject(err);\r\n          });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * verifies an hash using the HMAC algorithm\r\n  * @param  {byteArray}    key       key to be used in the hmac\r\n  * @param  {string}      data       information to be hashed to compare\r\n  * @param  {byteArray}  signature   hash to compare with the received data\r\n  * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received\r\n  */\r\n  verifyHMAC(key, data, signature) {\r\n    Crypto_log.log('verifyHMAC:key', key);\r\n    Crypto_log.log('verifyHMAC:data', data);\r\n    Crypto_log.log('verifyHMAC:signature', signature);\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this._importHMACkey(key).then(function(hmacKey) {\r\n\r\n        if (typeof data != 'string') {\r\n          data = JSON.stringify(data);\r\n          Crypto_log.log('Converting verifyHMAC inputed DATA:', data);\r\n        }\r\n\r\n        _this._crypto.subtle.verify(\r\n          {\r\n            name: 'HMAC'\r\n          },\r\n          hmacKey, //from generateKey or importKey above\r\n          signature, //ArrayBuffer of the signature\r\n          encodeUTF8(data) //ArrayBuffer of the data\r\n        )\r\n          .then(function(isvalid) {\r\n          //returns a boolean on whether the signature is true or not\r\n          // log.log('crypto-verifyHMAC', isvalid);\r\n            Crypto_log.log('verifyHMAC result', isvalid);\r\n            (isvalid) ? resolve(isvalid) : reject(isvalid);\r\n\r\n          }).catch(function(err) {\r\n            Crypto_log.error('crypto-verifyHMAC', err);\r\n            reject(err);\r\n          });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * generates a RSA public/private key pair with a modulus length of 2048 bits\r\n  * @return  {JSON}   keyPair    json containing the public and private keys\r\n  */\r\n  generateRSAKeyPair() {\r\n    let _this = this;\r\n    let keyPair = {};\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._crypto.subtle.generateKey(\r\n        {\r\n          name: 'RSA-PSS',\r\n          modulusLength: 2048, //can be 1024, 2048, or 4096\r\n          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n          hash: {name: 'SHA-256'} //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\r\n        },\r\n        true, //whether the key is extractable (i.e. can be used in exportKey)\r\n        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\r\n\r\n      ).then(function(key) {\r\n        //returns a keypair object\r\n        // log.log(key);\r\n\r\n        _this._crypto.subtle.exportKey(\r\n          'spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\r\n          key.publicKey //can be a publicKey or privateKey, as long as extractable was true\r\n        ).then(function(publicKey) {\r\n          //returns the exported key data\r\n          keyPair.public  = new Uint8Array(publicKey);\r\n          return _this._crypto.subtle.exportKey(\r\n            'pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\r\n            key.privateKey //can be a publicKey or privateKey, as long as extractable was true\r\n          );\r\n        }).then(function(privateKey) {\r\n          keyPair.private  = new Uint8Array(privateKey);\r\n\r\n          // log.log('crypto-generateRSAKeyPair', keyPair);\r\n          resolve(keyPair);\r\n\r\n        }).catch(function(err) {\r\n          Crypto_log.error(err);\r\n          reject(err);\r\n        });\r\n\r\n      }).catch(function(err) {\r\n        Crypto_log.error(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Generates a 128 bit random value.\r\n  * @return {byteArray}  array    random value\r\n  */\r\n  generateIV() {\r\n    let _this = this;\r\n\r\n    let array = new  Uint8Array(16);\r\n    _this._crypto.getRandomValues(array);\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n  * Generates a 256 bit random value. 32 bits are extrated from the machine time,\r\n  * the remaining are generated randomly\r\n  * @return {byteArray}  array    random value\r\n  */\r\n  generateRandom() {\r\n    let _this = this;\r\n\r\n    let array = new  Uint8Array(32);\r\n    _this._crypto.getRandomValues(array);\r\n\r\n    let date = Date.now();\r\n\r\n    let dateEncoded = encodeUTF8(date.toString());\r\n\r\n    //extract the least significant 4 bytes in the date\r\n    let finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length);\r\n\r\n    // add in the first 4 bytes of the array the bytes extracted previously;\r\n    for (let i = 0; i < 4; i++) { array[i] = finalDate[i]; }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n  * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly\r\n  * @return {byteArray}  array    premaster secret key\r\n  */\r\n  generatePMS() {\r\n    let _this = this;\r\n\r\n    let array = new Uint8Array(48);\r\n    _this._crypto.getRandomValues(array);\r\n    return array;\r\n  }\r\n\r\n  /**\r\n  * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and\r\n  * two randoms\r\n  * @return {byteArray}  array    master secret key with 48 bytes\r\n  */\r\n  generateMasterSecret(hmacKey, data) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      let key = new Uint8Array(48);\r\n      let seed = data;\r\n\r\n      _this._digest(hmacKey).then((digestedKey) => {\r\n\r\n        _this.hashHMAC(digestedKey, seed).then(function(keypart0) {\r\n\r\n          //copy the first 32 bytes into the key\r\n          for (let i = 0; i < 32; i++) { key[i] = keypart0[i]; }\r\n          return _this.hashHMAC(digestedKey, seed + keypart0);\r\n\r\n        }).then(function(keypart1) {\r\n\r\n          //copy the first 16 bytes to the key remaining 16 bytes\r\n          for (let i = 0; i < 16; i++) { key[i + 32] = keypart1[i]; }\r\n\r\n          // log.log('crypto-generateMasterSecret', key);\r\n          resolve(key);\r\n\r\n        }).catch(function(err) {\r\n          // log.log('crypto-generateMasterSecret', err);\r\n          reject(err);\r\n        });\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  * generates both users MAC and encryption keys. generate as output an array\r\n  * with 4 byteArray each with 32 bytes\r\n  * @param  {byteArray}        secret       secret to be used in the HMAC function\r\n  * @param  {String}           data         information to be used as seed\r\n  * @return {Array<byteArray>} key          array with the information to generate keys\r\n  */\r\n  generateKeys(hmacKey, data) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let key = [];\r\n      let seed = data;\r\n\r\n      // iterate 4 times to obtain a 1024 key size\r\n      _this.hashHMAC(hmacKey, seed).then(function(keypart0) {\r\n        key.push(keypart0);\r\n        return _this.hashHMAC(hmacKey, seed + keypart0);\r\n\r\n      }).then(function(keypart1) {\r\n        key.push(keypart1);\r\n        return _this.hashHMAC(hmacKey, seed + keypart1);\r\n\r\n      }).then(function(keypart2) {\r\n        key.push(keypart2);\r\n        return _this.hashHMAC(hmacKey, seed + keypart2);\r\n\r\n      }).then(function(keypart3) {\r\n        key.push(keypart3);\r\n\r\n        // log.log('crypto-generateKeys', key);\r\n        resolve(key);\r\n\r\n      }).catch(function(err) {\r\n        // log.log('crypto-generateKeys', err);\r\n        reject(err);\r\n      });\r\n\r\n      // log.log(hmacKey, data);\r\n    });\r\n  }\r\n\r\n  _importRSAsignKey(privKey) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._crypto.subtle.importKey(\r\n        'pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\r\n        privKey,\r\n        {   //these are the algorithm options\r\n          name: 'RSASSA-PKCS1-v1_5',\r\n          hash: {name: 'SHA-256'} //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\r\n        },\r\n        true, //whether the key is extractable (i.e. can be used in exportKey)\r\n        ['sign'] //'verify' for public key import, 'sign' for private key imports\r\n      )\r\n        .then(function(privateKey) {\r\n        //returns a publicKey (or privateKey if you are importing a private key)\r\n        // log.log('crypto-_importRSAsignKey', privateKey);\r\n          resolve(privateKey);\r\n\r\n        }).catch(function(err) {\r\n          Crypto_log.error('crypto-_importRSAsignKey', err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  _importRSAverifyKey(pubKey) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._crypto.subtle.importKey(\r\n        'spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\r\n        pubKey,\r\n        {   //these are the algorithm options\r\n          name: 'RSASSA-PKCS1-v1_5',\r\n          hash: {name: 'SHA-256'} //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\r\n        },\r\n        true, //whether the key is extractable (i.e. can be used in exportKey)\r\n        ['verify'] //'verify' for public key import, 'sign' for private key imports\r\n      )\r\n        .then(function(publicKey) {\r\n        //returns a publicKey (or privateKey if you are importing a private key)\r\n        // log.log('crypto-_importRSAverifyKey', publicKey);\r\n          resolve(publicKey);\r\n\r\n        }).catch(function(err) {\r\n          Crypto_log.error('crypto-_importRSAverifyKey', err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  _importRSAencryptKey(pubKey) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._crypto.subtle.importKey(\r\n        'spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\r\n        pubKey,\r\n        {   //these are the algorithm options\r\n          name: 'RSA-OAEP',\r\n          hash: {name: 'SHA-256'} //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\r\n        },\r\n        true, //whether the key is extractable (i.e. can be used in exportKey)\r\n        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or\r\n        //'decrypt' or 'unwrapKey' for private key imports\r\n      )\r\n        .then(function(publicKey) {\r\n        //returns a publicKey (or privateKey if you are importing a private key)\r\n        // log.log('crypto-_importRSAencryptKey', publicKey);\r\n          resolve(publicKey);\r\n\r\n        }).catch(function(err) {\r\n          Crypto_log.error('crypto-_importRSAencryptKey', err.name);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  _importRSAdecryptKey(privKey) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._crypto.subtle.importKey(\r\n        'pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\r\n        privKey,\r\n        {   //these are the algorithm options\r\n          name: 'RSA-OAEP',\r\n          hash: {name: 'SHA-256'} //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\r\n        },\r\n        true, //whether the key is extractable (i.e. can be used in exportKey)\r\n        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or\r\n        //'decrypt' or 'unwrapKey' for private key imports\r\n      )\r\n        .then(function(privateKey) {\r\n        //returns a publicKey (or privateKey if you are importing a private key)\r\n        // log.log('crypto-_importRSAdecryptKey', privateKey);\r\n          resolve(privateKey);\r\n\r\n        }).catch(function(err) {\r\n          Crypto_log.error('crypto-_importRSAdecryptKey', err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  concatPMSwithRandoms(pms, toRandom, fromRandom) {\r\n\r\n    let finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length);\r\n\r\n    // add PremasterKey\r\n    for (let i = 0; i < pms.length; i++) {\r\n      finalKey[i] = pms[i];\r\n    }\r\n\r\n    //add to random\r\n    for (let i = 0; i < toRandom.length; i++) {\r\n      finalKey[i + pms.length] = pms[i];\r\n    }\r\n\r\n    //add from random\r\n    for (let i = 0; i < fromRandom.length; i++) {\r\n      finalKey[i + pms.length + toRandom.length] = pms[i];\r\n    }\r\n\r\n    return finalKey;\r\n  }\r\n\r\n  _generate256bitKey() {\r\n    let _this = this;\r\n    let array = new  Uint8Array(32);\r\n    _this._crypto.getRandomValues(array);\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n  * imports the secret to the HMAC function\r\n  * @param  {byteArray}   arrayBuffer     bytes to import as key\r\n  * @return {JSON}       key              key ready to be used in the HMAC cryptographic function\r\n  */\r\n  _importHMACkey(arrayBuffer) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this._digest(arrayBuffer).then((key) => {\r\n\r\n        _this._crypto.subtle.importKey(\r\n          'raw', //can be 'jwk' or 'raw'\r\n          key,\r\n          {   //this is the algorithm options\r\n            name: 'HMAC',\r\n            hash: {name: 'SHA-256'}, //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\r\n            length: 256 //optional, if you want your key length to differ from the hash function's block length\r\n          },\r\n          true, //whether the key is extractable (i.e. can be used in exportKey)\r\n          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\r\n        ).then(function(key) {\r\n          //returns the symmetric key\r\n          // log.log('crypto-_importHMACkey', key);\r\n          resolve(key);\r\n        })\r\n          .catch(function(err) {\r\n            reject(err);\r\n          });\r\n      });\r\n    });\r\n  }\r\n\r\n  _digest(value) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _this._crypto.subtle.digest(\r\n        {\r\n          name: 'SHA-256'\r\n        },\r\n        value //The data you want to hash as an ArrayBuffer\r\n      )\r\n        .then(function(hash) {\r\n        //returns the hash as an ArrayBuffer\r\n        // log.log('crypto-digest', new Uint8Array(hash));\r\n          resolve(new Uint8Array(hash));\r\n        })\r\n        .catch(function(err) {\r\n          Crypto_log.error(err);\r\n          reject(err);\r\n        });\r\n\r\n    });\r\n  }\r\n\r\n  _importAESkey(arrayBuffer) {\r\n    let _this = this;\r\n    return new Promise(function(resolve, reject) {\r\n      _this._crypto.subtle.importKey(\r\n        'raw', //can be 'jwk' or 'raw'\r\n        arrayBuffer,\r\n        {   //this is the algorithm options\r\n          name: 'AES-CBC'\r\n        },\r\n        true, //whether the key is extractable (i.e. can be used in exportKey)\r\n        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'\r\n      )\r\n        .then(function(key) {\r\n        //returns the symmetric key\r\n        // log.log('crypto-importAESkey', key);\r\n          resolve(key);\r\n        })\r\n        .catch(function(err) {\r\n          Crypto_log.error('crypto-importAESkey', err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  _sha256(str) {\r\n    let _this = this;\r\n    let buffer = new TextEncoder('utf-8').encode(str);\r\n    return _this._crypto.subtle.digest('SHA-256', buffer).then(function(hash) {\r\n      return _this._hex(hash);\r\n    });\r\n  }\r\n\r\n  _hex(buffer) {\r\n    let hexCodes = [];\r\n    let view = new DataView(buffer);\r\n    for (let i = 0; i < view.byteLength; i += 4) {\r\n      // Using getUint32 reduces the number of iterations needed (we process 4 bytes each time)\r\n      let value = view.getUint32(i)\r\n\r\n      let stringValue = value.toString(16)\r\n\r\n      let padding = '00000000'\r\n      let paddedValue = (padding + stringValue).slice(-padding.length)\r\n      hexCodes.push(paddedValue);\r\n    }\r\n\r\n    // Join all the hex strings into one\r\n    return hexCodes.join('');\r\n  }\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ var cryptoManager_Crypto = (Crypto_Crypto);\r\n\n// CONCATENATED MODULE: ./src/cryptoManager/CryptoManager.js\n// Log System\r\n\r\nlet CryptoManager_log = loglevel[\"getLogger\"]('CryptoManager');\r\n\r\n\r\n\r\n\r\n/**\r\n*  The Crypto Manager provides manages cryptographic features for the runtime including:\r\n*  - Mutual Authentication between peers\r\n*  - Crypto Keys\r\n*  - e2e encryption and decription of communication between Hyperties and dta objects\r\n*\r\n*/\r\nclass CryptoManager_CryptoManager {\r\n\r\n  /**\r\n  * This is the constructor to initialise the CryptoManager, it does not require any input.\r\n  * The init() must called in order to set mandatories attributes\r\n  */\r\n\r\n  constructor(storageManager) {\r\n    this.storageManager = storageManager;\r\n    this.userDefaultKeyRef = 'userAsymmetricKey';\r\n  }\r\n\r\n  init(runtimeURL, runtimeCapabilities, storageManager, dataObjectsStorage, registry, coreDiscovery, idm, runtimeFactory) {\r\n    let _this = this;\r\n\r\n    if (!runtimeURL) throw new Error('[] runtimeURL is missing.');\r\n    if (!storageManager) throw new Error('storageManager is missing');\r\n    if (!runtimeFactory) throw new Error('runtimeFactory is missing');\r\n\r\n    _this._runtimeURL = runtimeURL;\r\n    _this._cryptoManagerURL = _this._runtimeURL + '/cryptoManager';\r\n\r\n    //_this._myURL = _this._runtimeURL + '/crypto';\r\n    _this.storageManager = storageManager;\r\n    _this.dataObjectsStorage = dataObjectsStorage;\r\n    _this.runtimeCapabilities = runtimeCapabilities;\r\n\r\n    _this._runtimeFactory = runtimeFactory;\r\n    _this._domain = divideURL(_this._runtimeURL).domain;\r\n\r\n    _this.crypto = new cryptoManager_Crypto(_this._runtimeFactory);\r\n\r\n    // hashTable to store all the crypto information between two hyperties\r\n    _this.chatKeys = {};\r\n\r\n    // hashTable to store the symmetric keys to be used in the chat group\r\n    _this.dataObjectSessionKeys = {};\r\n\r\n    //failsafe to enable/disable all the criptographic functions\r\n    _this.isToUseEncryption = true;\r\n\r\n    _this._registry = registry;\r\n    _this._coreDiscovery = coreDiscovery;\r\n\r\n    _this._idm = idm;\r\n\r\n  }\r\n\r\n  //******************* GET AND SET METHODS *******************\r\n\r\n  /**\r\n  * return the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  get messageBus() {\r\n    let _this = this;\r\n    return _this._messageBus;\r\n  }\r\n\r\n  /**\r\n  * Set the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  set messageBus(messageBus) {\r\n    let _this = this;\r\n    _this._messageBus = messageBus;\r\n\r\n    _this.addCryptoGUIListeners();\r\n  }\r\n\r\n  /**\r\n  * return the coreDiscovery component\r\n  */\r\n  get coreDiscovery() {\r\n    let _this = this;\r\n    return _this._coreDiscovery;\r\n  }\r\n\r\n  /**\r\n  * return user's public key\r\n  */\r\n\r\n  /*  getMyPublicKey() {\r\n    // to be implemented\r\n\r\n    return new Promise((resolve)=> {\r\n      resolve('mypublickey');\r\n\r\n    });\r\n  }\r\n*/\r\n  /**\r\n  * Set the coreDiscovery component\r\n  * @param {coreDiscovery} coreDiscovery\r\n  */\r\n  set coreDiscovery(coreDiscovery) {\r\n    let _this = this;\r\n    _this._coreDiscovery = coreDiscovery;\r\n  }\r\n\r\n  /**\r\n  * return the registry in this idModule\r\n  * @param {registry}           registry\r\n  */\r\n  get registry() {\r\n    let _this = this;\r\n    return _this._registry;\r\n  }\r\n\r\n  /**\r\n  * Set the registry in this idModule\r\n  * @param {registry}     reg\r\n  */\r\n  set registry(registry) {\r\n    let _this = this;\r\n    _this._registry = registry;\r\n  }\r\n\r\n\r\n  // to be used to initialise IDM with SessionKeys used in previous session\r\n\r\n  loadSessionKeys() {\r\n    let _this = this;\r\n    return new Promise((resolve) => {\r\n\r\n      _this.storageManager.get('dataObjectSessionKeys').then((sessionKeys) => {\r\n        if (sessionKeys) _this.dataObjectSessionKeys = sessionKeys;\r\n        else _this.dataObjectSessionKeys = {};\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  _isFromRemoteSM(from) {\r\n    let splitFrom = from.split('://');\r\n    return splitFrom[0] === 'runtime' && from !== this._runtimeURL + '/sm';\r\n  }\r\n\r\n  addCryptoGUIListeners() {\r\n    //TODO: Change the GUI invocation of this method\r\n    let _this = this;\r\n\r\n    _this._messageBus.addListener(_this._cryptoManagerURL, (msg) => {\r\n      let funcName = msg.body.method;\r\n\r\n      //let returnedValue;\r\n      if (funcName === 'generateRSAKeyPair') {\r\n        _this._crypto.getMyPublicKey().then((key) => {\r\n          let value = {type: 'execute', value: key, code: 200};\r\n          let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\r\n          try {\r\n            _this._messageBus.postMessage(replyMsg);\r\n          } catch (err) {\r\n            CryptoManager_log.error('On addGUIListeners from if generateRSAKeyPair method postMessage error: ' + err);\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n\r\n  //******************* ENCRYPTION METHODS *******************\r\n  /**\r\n* Identifies the messages to be encrypted\r\n* @param {Message}    message\r\n* @returns {boolean}  returns true if the message requires encryption\r\n*/\r\n\r\n  _isToEncrypt(message) {\r\n    let _this = this;\r\n    CryptoManager_log.log('[CryptoManager._isToEncrypt]', message);\r\n    let isCreate = message.type === 'create';\r\n    let isFromHyperty = message.from.includes('hyperty://');\r\n    let isToHyperty = message.to.includes('hyperty://');\r\n    let isToDataObject = isDataObjectURL(message.to);\r\n    let reporter = _this.registry.getDataObjectReporter(message.to);\r\n\r\n    let doMutualAuthentication = message.hasOwnProperty('body') && message.body.hasOwnProperty('mutual') ? message.body.mutual\r\n    :  message.hasOwnProperty('body') && message.body.hasOwnProperty('value') && message.body.value.hasOwnProperty('mutual') ? message.body.value.mutual  : true;\r\n\r\n    if (!doMutualAuthentication) return false;\r\n    if (reporter !== null && utils_isLegacy(reporter)) {\r\n      return false;\r\n    }\r\n\r\n    //if is not to apply encryption, then returns resolve\r\n    if (!this.isToUseEncryption && !(message.type === 'handshake')) {\r\n      CryptoManager_log.info('not handshake: encryption disabled');\r\n      return false;\r\n    }\r\n\r\n    if (message.type === 'update') {\r\n      CryptoManager_log.info('update:encryption disabled');\r\n      return false;\r\n    }\r\n\r\n    if (message.type === 'forward') {\r\n      CryptoManager_log.info('forward:encryption disabled');\r\n      return false;\r\n    }\r\n\r\n    if (utils_isLegacy(message.to)) return false;\r\n\r\n    return ((isCreate && isFromHyperty && isToHyperty) || (isCreate && isFromHyperty && isToDataObject && doMutualAuthentication) || message.type === 'handshake' || (message.type === 'update' && doMutualAuthentication));\r\n  }\r\n\r\n\r\n  _isToDecrypt(message) {\r\n    let _this = this;\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // For sybscribe message let's start the mutualAuthentication\r\n      let isSubscription = message.type === 'subscribe';\r\n      let isFromRemoteSM = _this._isFromRemoteSM(message.from);\r\n      let mutual = message.body.hasOwnProperty('value') && message.body.value.hasOwnProperty('mutual') ? message.body.value.mutual : \r\n      message.body.hasOwnProperty('mutual') ? message.body.mutual : true;\r\n      //      let mutual = message.body.hasOwnProperty('mutual') ? message.body.mutual : false;\r\n\r\nif (isSubscription && isFromRemoteSM && mutual) {\r\n//  if (isSubscription && isFromRemoteSM ) {\r\n    CryptoManager_log.log('[CryptoManager._isToDecrypt] _doMutualAuthenticationPhase1');\r\n        console.log('[CryptoManager._isToDecrypt] ', message);\r\n        let reporter = _this.registry.getDataObjectReporter(message.to);\r\n        if (reporter !== null && utils_isLegacy(reporter)) {\r\n          return resolve(false);\r\n        }\r\n\r\n        _this._doMutualAuthenticationPhase1(message).then(() => {\r\n          resolve(false);\r\n        }, (error) => {\r\n          reject(error);\r\n        });\r\n\r\n//      } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('value') && typeof message.body.value === 'string') {\r\n      } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('value') && typeof message.body.value === 'string' && mutual) {\r\n        CryptoManager_log.log('[CryptoManager._isToDecrypt] true');\r\n        resolve(true);\r\n      } else {\r\n        CryptoManager_log.log('[CryptoManager._isToDecrypt] false');\r\n        resolve(false);\r\n      }\r\n\r\n    }).catch((error) => {\r\n      CryptoManager_log.error('[CryptoManager._isToDecrypt]', error);\r\n    });\r\n\r\n  }\r\n\r\n  encryptMessage(message) {\r\n    //log.info('encryptMessage:message', message);\r\n    let _this = this;\r\n\r\n    CryptoManager_log.log('encrypt message ');\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let isHandShakeType = message.type === 'handshake';\r\n\r\n      //if is not to apply encryption, then returns resolve\r\n      if (!_this._isToEncrypt(message)) {\r\n        // log.log('decryption disabled');\r\n        return resolve(message);\r\n      }\r\n\r\n      let dataObjectURL = parseMessageURL(message.to);\r\n\r\n      let isToDataObject = isDataObjectURL(dataObjectURL);\r\n      let isToLegacyIdentity = utils_isLegacy(message.to);\r\n      let isFromHyperty = divideURL(message.from).type === 'hyperty';\r\n      let isToHyperty = divideURL(message.to).type === 'hyperty';\r\n\r\n      if (message.type === 'update') {\r\n        CryptoManager_log.log('encrypt message: message type update');\r\n        return resolve(message);\r\n      }\r\n\r\n      if (isToLegacyIdentity) {\r\n        resolve(message);\r\n      } else if (isFromHyperty && isToHyperty) {\r\n        let userURL = _this._registry.getHypertyOwner(message.from);\r\n        if (userURL) {\r\n\r\n          // check if exists any keys between two users\r\n          let chatKeys = _this.chatKeys[message.from + '<->' + message.to];\r\n          if (!chatKeys) {\r\n            chatKeys = _this._newChatCrypto(message, userURL);\r\n\r\n            //log.log('createChatKey encrypt', message.from + message.to);\r\n            _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\r\n            message.body.handshakePhase = 'startHandShake';\r\n          }\r\n\r\n          if (chatKeys.authenticated && !isHandShakeType) {\r\n\r\n            let iv = _this.crypto.generateIV();\r\n            _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, stringify(message.body.value), iv).then(encryptedValue => {\r\n\r\n              let filteredMessage = _this._filterMessageToHash(message, stringify(message.body.value) +\r\n                                                                        stringify(iv), chatKeys.hypertyFrom.messageInfo);\r\n\r\n              _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(hash => {\r\n                //log.log('result of hash ', hash);\r\n                let value = {iv: encode(iv), value: encode(encryptedValue), hash: encode(hash)};\r\n                message.body.value = encode(value);\r\n\r\n                resolve(message);\r\n              });\r\n            });\r\n\r\n            // if is a handshake message, just resolve it\r\n          } else if (isHandShakeType) {\r\n            resolve(message);\r\n\r\n            // else, starts a new handshake protocol\r\n          } else {\r\n            _this._doHandShakePhase(message, chatKeys).then(function(value) {\r\n              _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;\r\n\r\n              _this._messageBus.postMessage(value.message);\r\n              reject('encrypt handshake protocol phase ');\r\n            });\r\n          }\r\n        } else {\r\n          reject('In encryptMessage: Hyperty owner URL was not found');\r\n        }\r\n\r\n      //if from hyperty to a dataObjectURL\r\n      } else if (isFromHyperty && isToDataObject) {\r\n\r\n        //log.log('dataObject value to encrypt: ', message.body.value);\r\n        //log.log('IdentityModule - encrypt from hyperty to dataobject ', message);\r\n\r\n        _this.storageManager.get('dataObjectSessionKeys').then((sessionKeys) => {\r\n          sessionKeys = chatkeysToArrayCloner(sessionKeys || {});\r\n          let dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\r\n\r\n          _this.dataObjectsStorage.getDataObject(dataObjectURL).then((isHypertyReporter) => {\r\n            //if no key exists, create a new one if is the reporter of dataObject\r\n            if (!dataObjectKey) {\r\n              // if the hyperty is the reporter of the dataObject then generates a session key\r\n              if (isHypertyReporter.reporter && isHypertyReporter.reporter === message.from) {\r\n\r\n                let sessionKey = _this.crypto.generateRandom();\r\n                _this.dataObjectSessionKeys[dataObjectURL] = {sessionKey: sessionKey, isToEncrypt: true};\r\n                let dataObjectSessionKeysClone = chatkeysToStringCloner(_this.dataObjectSessionKeys);\r\n\r\n                //TODO: check if this does not need to be stored\r\n                _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone).catch(err => {\r\n                  reject('On encryptMessage from method storageManager.set error: ' + err);\r\n                });\r\n                dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];\r\n              }\r\n            }\r\n\r\n            //check if there is already a session key for the chat room\r\n            if (dataObjectKey) {\r\n\r\n              // and if is to apply encryption, encrypt the messages\r\n              if (dataObjectKey.isToEncrypt) {\r\n                let iv = _this.crypto.generateIV();\r\n                let stringifiedIV = stringify(iv);\r\n                let stringifiedMessageBody = stringify(message.body.value);\r\n\r\n                _this.crypto.encryptAES(dataObjectKey.sessionKey, stringifiedMessageBody, iv).then(encryptedValue => {\r\n                  delete message.body.identity.assertion; //TODO: Check why assertion is comming on the message!\r\n                  delete message.body.identity.expires; //TODO: Check why expires is comming on the message!\r\n                  let filteredMessage = _this._filterMessageToHash(message, stringifiedMessageBody + stringifiedIV);\r\n\r\n                  _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(hash => {\r\n                    // log.log('hash ', hash);\r\n\r\n                    let newValue = {value: encode(encryptedValue), iv: encode(iv), hash: encode(hash)};\r\n\r\n                    message.body.value = stringify(newValue);\r\n                    resolve(message);\r\n                  });\r\n                });\r\n\r\n              // if not, just send the message\r\n              } else {\r\n                resolve(message);\r\n              }\r\n\r\n              // start the generation of a new session Key\r\n            } else {\r\n              reject('Data object key could not be defined: Failed to decrypt message ');\r\n            }\r\n          }).catch(err => { reject('On encryptMessage from method dataObjectsStorage.getDataObject error: ' + err); });\r\n        }).catch(err => { reject('On encryptMessage from method storageManager.get error: ' + err); });\r\n      }\r\n    });\r\n  }\r\n\r\n  encryptDataObject(dataObject, sender) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      CryptoManager_log.info('dataObject value to encrypt: ', dataObject);\r\n\r\n      let dataObjectURL = parseMessageURL(sender);\r\n\r\n      _this.storageManager.get('dataObjectSessionKeys').then((sessionKeys) => {\r\n        sessionKeys = chatkeysToArrayCloner(sessionKeys || {});\r\n        let dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\r\n\r\n        //check if there is already a session key for the chat room\r\n        if (dataObjectKey) {\r\n\r\n          // and if is to apply encryption, encrypt the messages\r\n          if (dataObjectKey.isToEncrypt) {\r\n            let iv = _this.crypto.generateIV();\r\n\r\n            _this.crypto.encryptAES(dataObjectKey.sessionKey, stringify(dataObject), iv).then(encryptedValue => {\r\n              let newValue = { value: encode(encryptedValue), iv: encode(iv) };\r\n\r\n              //log.log('encrypted dataObject', newValue);\r\n              return resolve(newValue);\r\n            }).catch(err => { reject('On encryptDataObject from method encryptAES error: ' + err); });\r\n\r\n          // if not, just send the message\r\n          } else {\r\n            CryptoManager_log.info('The dataObject is not encrypted');\r\n            return resolve(dataObject);\r\n          }\r\n\r\n          // start the generation of a new session Key\r\n        } else {\r\n          return reject('No dataObjectKey for this dataObjectURL:', dataObjectURL);\r\n        }\r\n      }).catch(err => { reject('On encryptDataObject from method storageManager.get error: ' + err); });\r\n    });\r\n  }\r\n\r\n  decryptMessage(message) {\r\n    let _this = this;\r\n\r\n    //  log.log('decryptMessage:message', message);\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      let isHandShakeType = message.type === 'handshake';\r\n\r\n      _this._isToDecrypt(message).then((isToDecrypt) => {\r\n\r\n        //if is not to apply encryption, then returns resolve\r\n        if (!isToDecrypt) return resolve(message);\r\n\r\n        let dataObjectURL = parseMessageURL(message.to);\r\n\r\n        let isToDataObject = isDataObjectURL(dataObjectURL);\r\n        let isFromHyperty = divideURL(message.from).type === 'hyperty';\r\n        let isToHyperty = divideURL(message.to).type === 'hyperty';\r\n\r\n        if (message.type === 'update') {\r\n          return resolve(message);\r\n        }\r\n\r\n        //is is hyperty to hyperty communication\r\n        if (isFromHyperty && isToHyperty) {\r\n          // log.log('decrypt hyperty to hyperty');\r\n          let userURL = _this._registry.getHypertyOwner(message.to);\r\n          if (userURL) {\r\n\r\n            let chatKeys = _this.chatKeys[message.to + '<->' + message.from];\r\n            if (!chatKeys) {\r\n              chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');\r\n              _this.chatKeys[message.to + '<->' + message.from] = chatKeys;\r\n            }\r\n\r\n            if (chatKeys.authenticated && !isHandShakeType) {\r\n              let value = decode(message.body.value);\r\n              let iv = decodeToUint8Array(value.iv);\r\n              let data = decodeToUint8Array(value.value);\r\n              let hash = decodeToUint8Array(value.hash);\r\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(decryptedData => {\r\n                // log.log('decrypted value ', decryptedData);\r\n                message.body.value = decryptedData;\r\n\r\n                let filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\r\n\r\n                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(result => {\r\n                  //log.log('result of hash verification! ', result);\r\n                  message.body.assertedIdentity = true;\r\n                  resolve(message);\r\n                });\r\n              });\r\n\r\n            } else if (isHandShakeType) {\r\n              _this._doHandShakePhase(message, chatKeys).then(function(value) {\r\n\r\n                //if it was started by doMutualAuthentication then ends the protocol\r\n                if (value === 'handShakeEnd') {\r\n                  //reject('decrypt handshake protocol phase');\r\n\r\n                  // if was started by a message, then resend that message\r\n                } else {\r\n                  _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;\r\n                  _this._messageBus.postMessage(value.message);\r\n\r\n                  //reject('decrypt handshake protocol phase ');\r\n                }\r\n              });\r\n            } else {\r\n              reject('wrong message do decrypt');\r\n            }\r\n          } else {\r\n            reject('error on decrypt message');\r\n          }\r\n\r\n          //if from hyperty to a dataObjectURL\r\n        } else if (isFromHyperty && isToDataObject) {\r\n          // log.log('dataObject value to decrypt: ', message.body);\r\n\r\n          _this.storageManager.get('dataObjectSessionKeys').then((sessionKeys) => {\r\n            sessionKeys = chatkeysToArrayCloner(sessionKeys || {});\r\n            let dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\r\n\r\n            if (dataObjectKey) {\r\n\r\n              //check if is to apply encryption\r\n              if (dataObjectKey.isToEncrypt) {\r\n                let parsedValue = parse(message.body.value);\r\n                let iv = decodeToUint8Array(parsedValue.iv);\r\n                let encryptedValue = decodeToUint8Array(parsedValue.value);\r\n                let hash = decodeToUint8Array(parsedValue.hash);\r\n\r\n                _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(decryptedValue => {\r\n                  let parsedValue = parse(decryptedValue);\r\n\r\n                  // log.log('decrypted Value,', parsedValue);\r\n                  message.body.value = parsedValue;\r\n\r\n                  let filteredMessage = _this._filterMessageToHash(message, stringify(parsedValue) + stringify(iv));\r\n\r\n                  _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, hash).then(result => {\r\n                    CryptoManager_log.log('Received message HMAC result', result);\r\n\r\n                    message.body.assertedIdentity = true;\r\n                    resolve(message);\r\n                  }).catch(err => { reject('Message HMAC is invalid: ' + err); });\r\n                });\r\n\r\n                //if not, just return the message\r\n              } else {\r\n                message.body.assertedIdentity = true;\r\n                resolve(message);\r\n              }\r\n\r\n            } else {\r\n              message.body.assertedIdentity = true;\r\n              resolve(message);\r\n\r\n              //reject('no sessionKey for chat room found');\r\n            }\r\n          });\r\n\r\n        } else {\r\n          reject('wrong message to decrypt');\r\n        }\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  decryptDataObject(dataObject, sender) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      //if is not to apply encryption, then returns resolve\r\n      if (!_this.isToUseEncryption) {\r\n        // log.log('decryption disabled');\r\n        return resolve(dataObject);\r\n      }\r\n\r\n      let dataObjectURL = parseMessageURL(sender);\r\n\r\n      // log.log('dataObject value to decrypt: ', dataObject);\r\n\r\n      _this.storageManager.get('dataObjectSessionKeys').then((sessionKeys) => {\r\n        sessionKeys = chatkeysToArrayCloner(sessionKeys);\r\n        let dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\r\n\r\n        if (dataObjectKey) {\r\n\r\n          //check if is to apply encryption\r\n          if (dataObjectKey.isToEncrypt) {\r\n            let iv = decodeToUint8Array(dataObject.iv);\r\n            let encryptedValue = decodeToUint8Array(dataObject.value);\r\n\r\n            _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(decryptedValue => {\r\n              let parsedValue = parse(decryptedValue);\r\n              let newValue = { value: parsedValue, iv: encode(iv) };\r\n\r\n              // log.log('decrypted dataObject,', newValue);\r\n\r\n              return resolve(newValue);\r\n            }).catch(err => { reject('On decryptDataObject from method encryptAES error: ' + err); });\r\n\r\n          //if not, just return the dataObject\r\n          } else {\r\n            // log.log('The dataObject is not encrypted');\r\n            return resolve(dataObject);\r\n          }\r\n\r\n        } else {\r\n          return reject('No dataObjectKey for this dataObjectURL:', dataObjectURL);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _doMutualAuthenticationPhase1(message) {\r\n    let _this = this;\r\n    return new Promise(function(resolve, reject) {\r\n      let to = message.to.split('/');\r\n\r\n      //let subsIndex = to.indexOf('subscription');\r\n      //let isDataObjectSubscription = subsIndex !== -1;\r\n      to.pop();\r\n      let dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];\r\n      _this._doMutualAuthenticationPhase2(dataObjectURL, message.body.subscriber).then(() => {\r\n        _this._registry.registerSubscriber(dataObjectURL, message.body.subscriber);\r\n        resolve();\r\n      }, (error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  _doMutualAuthenticationPhase2(sender, receiver) {\r\n    CryptoManager_log.info('doMutualAuthentication:sender ', sender);\r\n    CryptoManager_log.info('doMutualAuthentication:receiver ', receiver);\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let dataObjectURL;\r\n\r\n      // check if the sender is a dataObject and if so stores that value\r\n      let reporterURL = _this._registry.getReporterURLSynchonous(sender);\r\n      if (reporterURL) {\r\n        dataObjectURL = sender;\r\n        sender = reporterURL;\r\n      }\r\n\r\n      let msg = {\r\n        to: receiver,\r\n        from: sender,\r\n        callback: undefined,\r\n        body: {handshakePhase: 'startHandShake', ignore: 'ignoreMessage'}\r\n      };\r\n\r\n      if (!sender || !receiver) {\r\n        return reject('sender or receiver missing on doMutualAuthentication');\r\n      }\r\n\r\n      let chatKeys = _this.chatKeys[sender + '<->' + receiver];\r\n      let userURL = _this._registry.getHypertyOwner(sender);\r\n\r\n      if (userURL) {\r\n\r\n        if (!chatKeys) {\r\n          // callback to resolve when finish the mutual authentication\r\n          let resolved = function(value) {\r\n            // log.log('callback value:', value);\r\n            resolve(value);\r\n          };\r\n          msg.callback = resolved;\r\n          msg.dataObjectURL = dataObjectURL;\r\n\r\n          chatKeys = _this._newChatCrypto(msg, userURL);\r\n          _this.chatKeys[sender + '<->' + receiver] = chatKeys;\r\n        }\r\n\r\n        if (chatKeys.authenticated) {\r\n\r\n          let startSessionKeyExchange = {\r\n            to: sender,\r\n            from: receiver\r\n          };\r\n          chatKeys.dataObjectURL = dataObjectURL;\r\n          _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(value => {\r\n\r\n            _this._messageBus.postMessage(value.message);\r\n            resolve('exchange of chat sessionKey initiated');\r\n          }).catch(err => { reject('On doMutualAuthentication from method _sendReporterSessionKey error: ' + err); });\r\n        } else {\r\n          _this._doHandShakePhase(msg, chatKeys);\r\n        }\r\n      } else {\r\n        reject('Mutual authentication error: Hyperty owner could not be resolved');\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n  /**\r\n  * returns the reporter associated to the dataObject URL\r\n  * @param   {String}   dataObjectURL         dataObject url\r\n  * @return   {String}  reporter              dataObject url reporter\r\n  */\r\n  /*  _getHypertyFromDataObject(dataObjectURL) {\r\n    log.info('_getHypertyFromDataObject:dataObjectURL', dataObjectURL);\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let splitedURL = divideURL(dataObjectURL);\r\n      let domain = splitedURL.domain;\r\n      let finalURL = _this._parseMessageURL(dataObjectURL);\r\n\r\n      // check if is the creator of the hyperty\r\n      let reporterURL = _this.registry.getReporterURLSynchonous(finalURL);\r\n      log.info('_getHypertyFromDataObject:reporterURL', reporterURL);\r\n\r\n      if (reporterURL) {\r\n        resolve(reporterURL);\r\n      } else {\r\n        // check if there is already an association from an hypertyURL to the dataObject\r\n        let storedReporterURL = _this.dataObjectsIdentity[finalURL];\r\n        log.info('_getHypertyFromDataObject:storedReporterURL', storedReporterURL);\r\n\r\n        if (storedReporterURL) {\r\n          resolve(storedReporterURL);\r\n        } else {\r\n          // check if there is any hyperty that subscribed the dataObjectURL\r\n          let subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);\r\n          log.info('_getHypertyFromDataObject:subscriberHyperty', subscriberHyperty);\r\n\r\n          if (subscriberHyperty) {\r\n            resolve(subscriberHyperty);\r\n          } else {\r\n            // search in domain registry for the hyperty associated to the dataObject\r\n            // search in case is a subscriber who wants to know the reporter\r\n            _this._coreDiscovery.discoverDataObjectPerURL(finalURL, domain).then(dataObject => {\r\n              log.info('_getHypertyFromDataObject:dataObject', dataObject);\r\n              _this.dataObjectsIdentity[finalURL] = dataObject.reporter;\r\n              log.info('_getHypertyFromDataObject:dataObject.reporter', dataObject.reporter);\r\n              resolve(dataObject.reporter);\r\n            }, err => {\r\n              reject(err);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }*/\r\n\r\n  _sendReporterSessionKey(message, chatKeys) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];\r\n      let reporterSessionKeyMsg;\r\n      let valueToEncrypt;\r\n      let sessionKey;\r\n      let iv;\r\n      let value = {};\r\n\r\n      //if there is not yet a session Key, generates a new one\r\n      if (!sessionKeyBundle) {\r\n        sessionKey = _this.crypto.generateRandom();\r\n        _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = {sessionKey: sessionKey, isToEncrypt: true};\r\n\r\n        let dataObjectSessionKeysClone = chatkeysToStringCloner(_this.dataObjectSessionKeys);\r\n\r\n        _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone).catch(err => {\r\n          reject('On _sendReporterSessionKey from method storageManager.set(dataObjectSessionKeys...) error: ' + err);\r\n        });\r\n\r\n      } else {\r\n        sessionKey = sessionKeyBundle.sessionKey;\r\n      }\r\n\r\n      try {\r\n        valueToEncrypt = encode({value: encode(sessionKey), dataObjectURL: chatKeys.dataObjectURL});\r\n      } catch (err) {\r\n        return reject('On _sendReporterSessionKey from method storageManager.set error valueToEncrypt: ' + err);\r\n      }\r\n\r\n      iv = _this.crypto.generateIV();\r\n      value.iv = encode(iv);\r\n      _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(encryptedValue => {\r\n\r\n        reporterSessionKeyMsg = {\r\n          type: 'handshake',\r\n          to: message.from,\r\n          from: message.to,\r\n          body: {\r\n            handshakePhase: 'reporterSessionKey',\r\n            value: encode(encryptedValue)\r\n          }\r\n        };\r\n\r\n        let filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);\r\n\r\n        return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\r\n      }).then(hashedMessage => {\r\n        let valueWithHash = encode({value: reporterSessionKeyMsg.body.value, hash: encode(hashedMessage), iv: value.iv});\r\n\r\n        reporterSessionKeyMsg.body.value = valueWithHash;\r\n\r\n        resolve({message: reporterSessionKeyMsg, chatKeys: chatKeys});\r\n      }).catch(err => {\r\n        reject('On _sendReporterSessionKey from chained promises encryptAES error: ' + err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL\r\n  * @param {String}     idpDomain     idpDomain (Optional)\r\n  */\r\n  _resolveDomain(idpDomain) {\r\n    if (!idpDomain) {\r\n      return 'domain-idp://google.com';\r\n    } else {\r\n      return 'domain-idp://' + idpDomain;\r\n    }\r\n  }\r\n\r\n  _doHandShakePhase(message, chatKeys) {\r\n  // log('_doHandShakePhase:dataObject', message);\r\n  //\tlog('_doHandShakePhase:chatKeys', chatKeys);\r\n\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let handshakeType = message.body.handshakePhase;\r\n      let iv;\r\n      let hash;\r\n      let value = {};\r\n      let filteredMessage;\r\n      let privateKeyHolder;\r\n\r\n      CryptoManager_log.info('handshake phase: ', handshakeType);\r\n\r\n      switch (handshakeType) {\r\n\r\n        case 'startHandShake': {\r\n          chatKeys.keys.fromRandom = _this.crypto.generateRandom();\r\n          let startHandShakeMsg = {\r\n            type: 'handshake',\r\n            to: message.to,\r\n            from: message.from,\r\n            body: {\r\n              handshakePhase: 'senderHello',\r\n              value: encode(chatKeys.keys.fromRandom)\r\n            }\r\n          };\r\n          chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo);\r\n\r\n          // check if was the encrypt function or the mutual authentication that request the\r\n          // start of the handShakePhase.\r\n\r\n          if (chatKeys.initialMessage) {\r\n            resolve({message: startHandShakeMsg, chatKeys: chatKeys});\r\n          } else {\r\n            _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\r\n            _this._messageBus.postMessage(startHandShakeMsg);\r\n          }\r\n\r\n          break;\r\n\r\n        }\r\n        case 'senderHello': {\r\n\r\n          CryptoManager_log.log('senderHello');\r\n          chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);\r\n          chatKeys.keys.fromRandom = decodeToUint8Array(message.body.value);\r\n          chatKeys.keys.toRandom = _this.crypto.generateRandom();\r\n\r\n          let senderHelloMsg = {\r\n            type: 'handshake',\r\n            to: message.from,\r\n            from: message.to,\r\n            body: {\r\n              handshakePhase: 'receiverHello',\r\n              value: encode(chatKeys.keys.toRandom)\r\n            }\r\n          };\r\n          chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);\r\n          resolve({message: senderHelloMsg, chatKeys: chatKeys});\r\n\r\n          break;\r\n        }\r\n        case 'receiverHello': {\r\n\r\n          CryptoManager_log.log('receiverHello');\r\n          _this.getMyPrivateKey().then(privateKey =>{\r\n            privateKeyHolder = privateKey;\r\n\r\n            chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);\r\n\r\n            return _this._idm.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp.domain);\r\n          }).then((value) => {\r\n\r\n            //TODO remove later this verification as soon as all the IdP proxy are updated in the example\r\n            let encodedpublicKey = (typeof value.contents === 'string') ? value.contents : value.contents.nonce;\r\n\r\n            let receiverPublicKey = parseToUint8Array(encodedpublicKey);\r\n            let premasterSecret = _this.crypto.generatePMS();\r\n            let toRandom = message.body.value;\r\n            chatKeys.hypertyTo.assertion = message.body.identity.assertion;\r\n            chatKeys.hypertyTo.publicKey = receiverPublicKey;\r\n            chatKeys.hypertyTo.userID    = message.body.identity.userProfile.userURL;\r\n            chatKeys.keys.toRandom  = decodeToUint8Array(toRandom);\r\n            chatKeys.keys.premasterKey = premasterSecret;\r\n\r\n            let concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\r\n\r\n            return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\r\n\r\n            //generate the master key\r\n          }).then((masterKey) => {\r\n            chatKeys.keys.masterKey = masterKey;\r\n\r\n            return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\r\n\r\n            //generate the symmetric and hash keys\r\n          }).then((keys) => {\r\n\r\n            chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);\r\n            chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);\r\n            chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);\r\n            chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);\r\n            iv = _this.crypto.generateIV();\r\n            value.iv = encode(iv);\r\n\r\n            let messageStructure = {\r\n              type: 'handshake',\r\n              to: message.from,\r\n              from: message.to,\r\n              body: {\r\n                handshakePhase: 'senderCertificate'\r\n              }\r\n            };\r\n\r\n            // hash the value and the iv\r\n            filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\r\n            return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\r\n          }).then((hash) => {\r\n            value.hash = encode(hash);\r\n\r\n            //encrypt the data\r\n            return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);\r\n          }).then((encryptedData) => {\r\n            value.symetricEncryption = encode(encryptedData);\r\n\r\n            return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);\r\n\r\n          }).then((encryptedValue) => {\r\n            value.assymetricEncryption = encode(encryptedValue);\r\n\r\n            let messageStructure = {\r\n              type: 'handshake',\r\n              to: message.from,\r\n              from: message.to,\r\n              body: {\r\n                handshakePhase: 'senderCertificate'\r\n              }\r\n            };\r\n\r\n            let messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);\r\n            return _this.crypto.signRSA(privateKeyHolder, encode(chatKeys.handshakeHistory) + encode(messageToHash));\r\n          }).then(signature => {\r\n\r\n            value.signature = encode(signature);\r\n\r\n            let receiverHelloMsg = {\r\n              type: 'handshake',\r\n              to: message.from,\r\n              from: message.to,\r\n              body: {\r\n                handshakePhase: 'senderCertificate',\r\n                value: encode(value)\r\n              }\r\n            };\r\n            chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\r\n\r\n            resolve({message: receiverHelloMsg, chatKeys: chatKeys});\r\n\r\n          }, error => reject(error));\r\n\r\n          break;\r\n        }\r\n        case 'senderCertificate': {\r\n\r\n          CryptoManager_log.log('senderCertificate');\r\n\r\n          let receivedValue = decode(message.body.value);\r\n\r\n          _this.getMyPrivateKey().then(privateKey =>{\r\n            privateKeyHolder = privateKey;\r\n\r\n            return _this._idm.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp.domain);\r\n          }).then((value) => {\r\n            let encryptedPMS = decodeToUint8Array(receivedValue.assymetricEncryption);\r\n\r\n            //TODO remove later this verification as soon as all the IdP proxy are updated in the example\r\n            let encodedpublicKey = (typeof value.contents === 'string') ? value.contents : value.contents.nonce;\r\n\r\n            let senderPublicKey = parseToUint8Array(encodedpublicKey);\r\n            chatKeys.hypertyTo.assertion = message.body.identity.assertion;\r\n            chatKeys.hypertyTo.publicKey = senderPublicKey;\r\n            chatKeys.hypertyTo.userID    = message.body.identity.userProfile.userURL;\r\n\r\n            return _this.crypto.decryptRSA(privateKeyHolder, encryptedPMS);\r\n\r\n          }, (error) => {\r\n            // log.log(error);\r\n            reject('Error during authentication of identity: ', error.message);\r\n\r\n            //obtain the PremasterKey using the private key\r\n          }).then(pms => {\r\n\r\n            chatKeys.keys.premasterKey = new Uint8Array(pms);\r\n\r\n            let signature = decodeToUint8Array(receivedValue.signature);\r\n\r\n            let receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);\r\n\r\n            return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, encode(chatKeys.handshakeHistory) + encode(receivedmsgToHash), signature);\r\n\r\n            // validates the signature received\r\n          }).then(signValidationResult => {\r\n\r\n            //log.log('SenderCertificate - signature validation result ', signValidationResult);\r\n            let concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\r\n\r\n            return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\r\n\r\n            // generates the master keys from the Premaster key and the randoms\r\n          }).then(masterKey => {\r\n            chatKeys.keys.masterKey = masterKey;\r\n\r\n            return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\r\n\r\n            // generates the symmetric keys to be used in the symmetric encryption\r\n          }).then(keys => {\r\n            chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);\r\n            chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);\r\n            chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);\r\n            chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);\r\n            iv = decodeToUint8Array(receivedValue.iv);\r\n            let data = decodeToUint8Array(receivedValue.symetricEncryption);\r\n\r\n            return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);\r\n\r\n          }).then(decryptedData => {\r\n            // log.log('decryptedData', decryptedData);\r\n\r\n            chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);\r\n\r\n            let hashReceived = decodeToUint8Array(receivedValue.hash);\r\n\r\n            filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\r\n\r\n            return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);\r\n\r\n          }).then(verifiedHash  => {\r\n\r\n            // log.log('result of hash verification ', verifiedHash);\r\n            let receiverFinishedMessage = {\r\n              type: 'handshake',\r\n              to: message.from,\r\n              from: message.to,\r\n              body: {\r\n                handshakePhase: 'receiverFinishedMessage'\r\n              }\r\n            };\r\n            iv = _this.crypto.generateIV();\r\n            value.iv = encode(iv);\r\n\r\n            filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);\r\n\r\n            //log.log('TIAGO: doHandShakePhase verifiedHash');\r\n            return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\r\n          }).then(hash => {\r\n\r\n            value.hash = encode(hash);\r\n            return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);\r\n\r\n          }).then(encryptedValue => {\r\n            value.value = encode(encryptedValue);\r\n            let receiverFinishedMessage = {\r\n              type: 'handshake',\r\n              to: message.from,\r\n              from: message.to,\r\n              body: {\r\n                handshakePhase: 'receiverFinishedMessage',\r\n                value: encode(value)\r\n              }\r\n            };\r\n\r\n            chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);\r\n            chatKeys.authenticated = true;\r\n            resolve({message: receiverFinishedMessage, chatKeys: chatKeys});\r\n          }).catch(err => {\r\n            reject('On _doHandShakePhase from senderCertificate error: ' + err);\r\n          });\r\n\r\n          break;\r\n        }\r\n        case 'receiverFinishedMessage': {\r\n\r\n          chatKeys.authenticated = true;\r\n\r\n          value = decode(message.body.value);\r\n\r\n          iv = decodeToUint8Array(value.iv);\r\n          let data = decodeToUint8Array(value.value);\r\n          hash = decodeToUint8Array(value.hash);\r\n\r\n          _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(decryptedData => {\r\n            // log.log('decryptedData', decryptedData);\r\n            chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);\r\n\r\n            let filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\r\n            _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(result => {\r\n\r\n              // check if there was an initial message that was blocked and send it\r\n              if (chatKeys.initialMessage) {\r\n\r\n                let initialMessage = {\r\n                  type: 'create',\r\n                  to: message.from,\r\n                  from: message.to,\r\n                  body: {\r\n                    value: chatKeys.initialMessage.body.value\r\n                  }\r\n                };\r\n\r\n                resolve({message: initialMessage, chatKeys: chatKeys});\r\n\r\n                //sends the sessionKey to the subscriber hyperty\r\n              } else {\r\n                _this._sendReporterSessionKey(message, chatKeys).then(value => {\r\n\r\n                  resolve(value);\r\n                }).catch(err => {\r\n                  reject('On _doHandShakePhase from receiverFinishedMessage error: ' + err);\r\n                });\r\n              }\r\n            });\r\n          });\r\n\r\n          break;\r\n        }\r\n\r\n        case 'reporterSessionKey': {\r\n\r\n          CryptoManager_log.log('reporterSessionKey');\r\n\r\n          let valueIVandHash = decode(message.body.value);\r\n          hash = decodeToUint8Array(valueIVandHash.hash);\r\n          iv = decodeToUint8Array(valueIVandHash.iv);\r\n          let encryptedValue = decodeToUint8Array(valueIVandHash.value);\r\n          let parsedValue;\r\n          let sessionKey;\r\n          let dataObjectURL;\r\n          let receiverAcknowledgeMsg;\r\n\r\n          //log.log('[IdentityModule reporterSessionKey] - decryptAES: ', chatKeys.keys.hypertyToSessionKey, encryptedValue, iv);\r\n\r\n          _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(decryptedValue => {\r\n\r\n            parsedValue = decode(decryptedValue);\r\n            sessionKey = decodeToUint8Array(parsedValue.value);\r\n            dataObjectURL = parsedValue.dataObjectURL;\r\n\r\n            let messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);\r\n\r\n            return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);\r\n\r\n          }).then(hashResult => {\r\n\r\n\r\n            // log.log('hash successfully validated ', hashResult);\r\n\r\n            _this.dataObjectSessionKeys[dataObjectURL] =  {sessionKey: sessionKey, isToEncrypt: true};\r\n            let dataObjectSessionKeysClone = chatkeysToStringCloner(_this.dataObjectSessionKeys);\r\n            _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone).catch(err => {\r\n              reject('On _sendReporterSessionKey from method reporterSessionKey error: ' + err);\r\n            });\r\n\r\n            iv = _this.crypto.generateIV();\r\n            value.iv = encode(iv);\r\n\r\n            return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);\r\n          }).then(encryptedValue => {\r\n\r\n            receiverAcknowledgeMsg = {\r\n              type: 'handshake',\r\n              to: message.from,\r\n              from: message.to,\r\n              body: {\r\n                handshakePhase: 'receiverAcknowledge'\r\n              }\r\n            };\r\n\r\n            value.value = encode(encryptedValue);\r\n            let messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);\r\n\r\n            return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);\r\n          }).then(hashedMessage => {\r\n            let finalValue = encode({value: value.value, hash: encode(hashedMessage), iv: value.iv});\r\n\r\n            receiverAcknowledgeMsg.body.value = finalValue;\r\n            resolve({message: receiverAcknowledgeMsg, chatKeys: chatKeys});\r\n          }).catch(err => {\r\n            reject('On _doHandShakePhase from reporterSessionKey error: ' + err);\r\n          });\r\n\r\n          break;\r\n        }\r\n\r\n        case 'receiverAcknowledge': {\r\n\r\n          CryptoManager_log.log('receiverAcknowledge');\r\n\r\n          let receivedvalueIVandHash = decode(message.body.value);\r\n          let receivedHash = decodeToUint8Array(receivedvalueIVandHash.hash);\r\n          iv = decodeToUint8Array(receivedvalueIVandHash.iv);\r\n          let receivedEncryptedValue = decodeToUint8Array(receivedvalueIVandHash.value);\r\n\r\n          _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(decryptedValue => {\r\n\r\n            let filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);\r\n            return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);\r\n          }).then(hashResult => {\r\n            // log.log('hashResult ', hashResult);\r\n\r\n            let callback = chatKeys.callback;\r\n\r\n            if (callback) {\r\n              callback('handShakeEnd');\r\n            }\r\n            resolve('handShakeEnd');\r\n          }).catch(err => {\r\n            reject('On _doHandShakePhase from receiverAcknowledge error: ' + err);\r\n          });\r\n\r\n          break;\r\n        }\r\n\r\n        default:\r\n          reject(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * filter the messages to hash, by removing some fields not generated by the runtime core\r\n  * @param {Message}  message                     message\r\n  * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted\r\n  * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message\r\n  * @return {Message}  new message filtered\r\n  */\r\n  _filterMessageToHash(message, decryptedValue, identity) {\r\n\r\n    return {\r\n      type: message.type,\r\n      from: message.from,\r\n      to: message.to,\r\n      body: {\r\n        identity: identity || message.body.identity,\r\n        value: decryptedValue || message.body.value,\r\n        handshakePhase: message.body.handshakePhase\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n  * generates the initial structure for the keys between two users\r\n  * @param {JSON}    message              initial message that triggers the mutual authentication\r\n  * @param {String}  userURL              userURL\r\n  * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto\r\n  * @return {JSON} newChatCrypto  new JSON structure for the chat crypto\r\n  */\r\n  _newChatCrypto(message, userURL, receiver) {\r\n    let _this = this;\r\n\r\n    //check whether is the sender or the receiver to create a new chatCrypto\r\n    //to mantain consistency on the keys if the receiver create a new chatCrypto,\r\n    //then invert the fields\r\n    let from = (receiver) ? message.to : message.from;\r\n    let to = (receiver) ? message.from : message.to;\r\n\r\n    let userInfo = _this._idm.getIdentity(userURL);\r\n\r\n    let newChatCrypto =\r\n      {\r\n        hypertyFrom:\r\n        {\r\n          hyperty: from,\r\n          userID: userInfo.userProfile.userURL,\r\n\r\n          //privateKey: \"getMyPublicKey\",\r\n          //publicKey: \"getMyPrivateKey\",\r\n          assertion: userInfo.assertion,\r\n          messageInfo: userInfo\r\n        },\r\n        hypertyTo:\r\n        {\r\n          hyperty: to,\r\n          userID: undefined,\r\n          publicKey: undefined,\r\n          assertion: undefined\r\n        },\r\n        keys:\r\n        {\r\n          hypertyToSessionKey: undefined,\r\n          hypertyFromSessionKey: undefined,\r\n          hypertyToHashKey: undefined,\r\n          hypertyFromHashKey: undefined,\r\n          toRandom: undefined,\r\n          fromRandom: undefined,\r\n          premasterKey: undefined,\r\n          masterKey: undefined\r\n        },\r\n        handshakeHistory: {\r\n          senderHello: undefined,\r\n          receiverHello: undefined,\r\n          senderCertificate: undefined,\r\n          receiverFinishedMessage: undefined\r\n        },\r\n        initialMessage: (message.body.ignore) ? undefined : message,\r\n        callback: message.callback,\r\n        authenticated: false,\r\n        dataObjectURL: message.dataObjectURL\r\n      };\r\n\r\n    return newChatCrypto;\r\n  }\r\n\r\n  /**\r\n  * Retrieves a public keys given a user refrence. If no key is found,\r\n  generates a new key asymmetric key and retrieves the public keys.\r\n  * @param   {userRef}    String    user reference for the key pair\r\n  * @return  {Array}   public key\r\n  */\r\n  getMyPublicKey(userRef = this.userDefaultKeyRef) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.storageManager.get(userRef).then(storedKeyPair => {\r\n        if (storedKeyPair) {\r\n          return resolve(storedKeyPair.public);\r\n        }\r\n        _this._generateAndStoreNewAsymetricKey(userRef).then(generatedKeyPair => {\r\n          resolve(generatedKeyPair.public);\r\n        }).catch(err => {\r\n          CryptoManager_log.error('[getMyPublicKey:_generateAndStoreNewAsymetricKey:err]: ' + err.message);\r\n          reject(err);\r\n        });\r\n      }).catch(err => {\r\n        CryptoManager_log.error('[getMyPublicKey:storageManager:err]: ' + err.message);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Retrieves a private keys given a user refrence. If no key is found,\r\n  generates a new key asymmetric key and retrieves the private key.\r\n  * @param   {userRef}    String    user reference for the key pair\r\n  * @return  {Array}   private key\r\n  **/\r\n  getMyPrivateKey(userRef = this.userDefaultKeyRef) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.storageManager.get(userRef).then(storedKeyPair => {\r\n        if (storedKeyPair) {\r\n          return resolve(storedKeyPair.private);\r\n        }\r\n        _this._generateAndStoreNewAsymetricKey(userRef).then(generatedKeyPair => {\r\n          resolve(generatedKeyPair.private);\r\n        }).catch(err => {\r\n          CryptoManager_log.error('[getMyPrivateKey:_generateAndStoreNewAsymetricKey:err]: ' + err.message);\r\n          reject(err);\r\n        });\r\n      }).catch(err => {\r\n        CryptoManager_log.error('[getMyPrivateKey:storageManager:err]: ' + err.message);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n  * Generates a new key pair, stores and retrives the key pair.\r\n  * @param   {userRef}    String    user reference for the key pair\r\n  * @return  {Array}   private key\r\n  **/\r\n  _generateAndStoreNewAsymetricKey(userRef) {\r\n    let _this = this;\r\n    let keyPair = undefined;\r\n    return new Promise((resolve, reject) => {\r\n//      _this.crypto.generateRSAKeyPair().then(generatedKeyPair => {\r\n        let generatedKeyPair = {};\r\n        generatedKeyPair.private = generateGUID();\r\n        generatedKeyPair.public = generateGUID();\r\n        CryptoManager_log.log('_generateAndStoreNewAsymetricKey:userAsymmetricKeyGenerated', generatedKeyPair);\r\n        keyPair = generatedKeyPair;\r\n        _this.storageManager.set(userRef, 0, generatedKeyPair);\r\n//      }).then(storedReference => {\r\n//        log.log('_generateAndStoreNewAsymetricKey:userAsymmetricKeySuccess', storedReference);\r\n        resolve(keyPair);\r\n      }).catch(err => {\r\n        CryptoManager_log.error('[_generateAndStoreNewAsymetricKey:err]: ' + err.message);\r\n        reject(err);\r\n      });\r\n//    });\r\n  }\r\n\r\n}\r\n\r\n/*\r\nconst nodeJSKeyPairPopulate = { public: [48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 228, 43, 101, 12, 121, 7, 157, 71, 81, 58, 219, 32, 10, 108, 193, 179, 212, 116, 255, 59, 217, 32, 161, 201, 53, 171, 226, 199, 137, 202, 171, 60, 82, 53, 125, 62, 177, 126, 165, 24, 141, 30, 15, 226, 59, 107, 34, 7, 13, 149, 112, 125, 10, 230, 191, 156, 164, 177, 10, 185, 13, 66, 3, 217, 166, 244, 90, 119, 111, 27, 145, 104, 71, 189, 166, 226, 255, 133, 83, 151, 231, 101, 151, 89, 22, 19, 65, 154, 10, 53, 208, 218, 252, 219, 37, 50, 212, 86, 145, 107, 132, 90, 233, 202, 227, 108, 114, 141, 29, 73, 187, 31, 13, 234, 0, 232, 24, 191, 35, 149, 179, 138, 214, 159, 245, 162, 148, 221, 118, 17, 105, 89, 151, 146, 209, 55, 236, 61, 143, 233, 228, 10, 115, 8, 81, 197, 45, 123, 187, 223, 176, 254, 165, 69, 143, 29, 100, 114, 17, 130, 226, 223, 33, 11, 240, 81, 61, 172, 191, 157, 246, 202, 87, 131, 221, 88, 48, 127, 159, 119, 160, 152, 117, 61, 253, 174, 65, 214, 203, 218, 63, 50, 78, 160, 181, 221, 211, 128, 70, 178, 191, 170, 0, 13, 122, 173, 12, 203, 252, 4, 184, 225, 252, 7, 62, 96, 116, 15, 216, 158, 55, 85, 48, 16, 9, 206, 119, 74, 112, 243, 136, 84, 184, 223, 254, 101, 91, 61, 10, 91, 85, 192, 147, 144, 57, 29, 66, 238, 199, 244, 193, 194, 150, 232, 200, 107, 2, 3, 1, 0, 1],\r\n  private: [48, 130, 4, 191, 2, 1, 0, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 4, 169, 48, 130, 4, 165, 2, 1, 0, 2, 130, 1, 1, 0, 228, 43, 101, 12, 121, 7, 157, 71, 81, 58, 219, 32, 10, 108, 193, 179, 212, 116, 255, 59, 217, 32, 161, 201, 53, 171, 226, 199, 137, 202, 171, 60, 82, 53, 125, 62, 177, 126, 165, 24, 141, 30, 15, 226, 59, 107, 34, 7, 13, 149, 112, 125, 10, 230, 191, 156, 164, 177, 10, 185, 13, 66, 3, 217, 166, 244, 90, 119, 111, 27, 145, 104, 71, 189, 166, 226, 255, 133, 83, 151, 231, 101, 151, 89, 22, 19, 65, 154, 10, 53, 208, 218, 252, 219, 37, 50, 212, 86, 145, 107, 132, 90, 233, 202, 227, 108, 114, 141, 29, 73, 187, 31, 13, 234, 0, 232, 24, 191, 35, 149, 179, 138, 214, 159, 245, 162, 148, 221, 118, 17, 105, 89, 151, 146, 209, 55, 236, 61, 143, 233, 228, 10, 115, 8, 81, 197, 45, 123, 187, 223, 176, 254, 165, 69, 143, 29, 100, 114, 17, 130, 226, 223, 33, 11, 240, 81, 61, 172, 191, 157, 246, 202, 87, 131, 221, 88, 48, 127, 159, 119, 160, 152, 117, 61, 253, 174, 65, 214, 203, 218, 63, 50, 78, 160, 181, 221, 211, 128, 70, 178, 191, 170, 0, 13, 122, 173, 12, 203, 252, 4, 184, 225, 252, 7, 62, 96, 116, 15, 216, 158, 55, 85, 48, 16, 9, 206, 119, 74, 112, 243, 136, 84, 184, 223, 254, 101, 91, 61, 10, 91, 85, 192, 147, 144, 57, 29, 66, 238, 199, 244, 193, 194, 150, 232, 200, 107, 2, 3, 1, 0, 1, 2, 130, 1, 0, 103, 244, 137, 118, 116, 82, 14, 203, 102, 107, 253, 88, 12, 199, 222, 60, 243, 136, 86, 157, 74, 224, 190, 53, 113, 57, 157, 250, 49, 130, 96, 31, 252, 136, 152, 70, 143, 17, 215, 96, 103, 51, 18, 35, 141, 212, 210, 205, 9, 216, 83, 70, 245, 71, 138, 119, 112, 229, 164, 176, 9, 37, 81, 161, 193, 154, 68, 249, 115, 106, 201, 6, 12, 225, 144, 126, 141, 210, 141, 242, 128, 159, 221, 163, 222, 21, 233, 230, 167, 206, 59, 24, 250, 233, 81, 122, 102, 26, 6, 233, 72, 133, 47, 77, 155, 238, 86, 6, 139, 24, 131, 163, 179, 112, 48, 247, 142, 6, 207, 204, 173, 223, 140, 199, 150, 95, 123, 152, 202, 155, 131, 238, 62, 96, 133, 4, 217, 51, 121, 30, 38, 178, 189, 216, 44, 35, 241, 93, 7, 62, 90, 111, 216, 66, 209, 243, 128, 234, 141, 84, 135, 181, 13, 38, 220, 114, 245, 240, 178, 95, 220, 206, 11, 186, 234, 213, 66, 121, 83, 68, 89, 75, 46, 183, 145, 183, 147, 160, 215, 118, 198, 125, 181, 146, 30, 251, 58, 87, 47, 209, 237, 97, 24, 47, 179, 6, 110, 242, 99, 150, 226, 148, 198, 174, 146, 101, 213, 87, 178, 10, 223, 105, 18, 56, 53, 22, 212, 158, 170, 176, 51, 86, 145, 125, 124, 44, 9, 85, 19, 144, 246, 170, 78, 124, 30, 32, 12, 166, 174, 139, 77, 63, 173, 82, 10, 153, 2, 129, 129, 0, 248, 18, 143, 246, 137, 136, 145, 219, 178, 39, 27, 94, 64, 90, 47, 163, 114, 60, 63, 187, 131, 143, 244, 16, 42, 128, 231, 117, 92, 98, 219, 155, 62, 107, 252, 17, 245, 45, 160, 225, 103, 142, 72, 36, 193, 150, 235, 214, 175, 62, 212, 56, 45, 9, 0, 60, 114, 107, 134, 228, 204, 131, 131, 214, 94, 201, 148, 159, 99, 139, 181, 13, 119, 38, 30, 107, 166, 165, 203, 43, 34, 20, 207, 171, 32, 58, 167, 62, 196, 153, 103, 204, 213, 247, 48, 111, 227, 59, 95, 97, 194, 187, 53, 10, 247, 108, 58, 86, 28, 29, 113, 8, 110, 171, 220, 245, 11, 82, 233, 223, 91, 68, 166, 117, 174, 187, 62, 77, 2, 129, 129, 0, 235, 118, 2, 105, 239, 212, 30, 104, 157, 41, 109, 11, 248, 152, 22, 236, 97, 40, 153, 131, 228, 5, 86, 187, 113, 126, 144, 76, 141, 79, 110, 250, 146, 152, 49, 58, 156, 201, 176, 92, 189, 209, 30, 112, 108, 175, 204, 204, 247, 164, 46, 129, 239, 98, 127, 49, 145, 218, 63, 193, 124, 174, 18, 98, 201, 99, 154, 162, 138, 78, 159, 253, 3, 248, 3, 209, 36, 239, 193, 155, 193, 5, 19, 236, 37, 78, 118, 135, 250, 199, 7, 141, 248, 120, 36, 136, 93, 98, 174, 60, 18, 215, 93, 174, 107, 141, 116, 145, 167, 221, 210, 169, 247, 67, 254, 222, 161, 134, 63, 221, 90, 87, 42, 99, 227, 81, 173, 151, 2, 129, 129, 0, 133, 23, 168, 103, 83, 232, 146, 160, 181, 23, 40, 38, 204, 13, 214, 203, 49, 41, 195, 227, 189, 181, 8, 243, 119, 106, 75, 67, 250, 250, 10, 234, 98, 118, 26, 250, 35, 121, 132, 124, 10, 76, 26, 198, 165, 154, 108, 19, 117, 88, 23, 17, 192, 143, 184, 177, 181, 141, 157, 4, 185, 248, 193, 77, 204, 243, 7, 170, 240, 4, 111, 113, 183, 0, 27, 136, 20, 19, 149, 74, 33, 241, 218, 108, 236, 80, 171, 148, 16, 116, 97, 109, 83, 74, 88, 145, 94, 239, 102, 192, 19, 114, 207, 5, 128, 51, 111, 164, 237, 86, 154, 99, 52, 197, 62, 57, 182, 6, 152, 245, 61, 137, 58, 105, 159, 2, 84, 109, 2, 129, 129, 0, 226, 67, 111, 132, 95, 91, 101, 177, 63, 189, 44, 53, 193, 184, 92, 230, 223, 98, 133, 74, 209, 86, 52, 7, 65, 195, 206, 100, 81, 178, 144, 65, 167, 151, 42, 79, 89, 149, 18, 173, 188, 21, 244, 251, 49, 230, 41, 150, 153, 46, 35, 38, 231, 99, 174, 56, 115, 32, 215, 253, 85, 147, 108, 197, 147, 34, 236, 216, 222, 177, 57, 90, 136, 114, 207, 48, 46, 31, 90, 220, 18, 58, 143, 239, 111, 214, 27, 95, 6, 36, 53, 229, 62, 108, 45, 39, 1, 30, 47, 178, 56, 164, 206, 56, 42, 208, 46, 193, 61, 31, 147, 45, 147, 23, 187, 22, 50, 255, 111, 229, 132, 199, 152, 75, 142, 136, 209, 151, 2, 129, 129, 0, 165, 56, 232, 76, 55, 57, 240, 159, 92, 207, 220, 143, 130, 30, 57, 234, 251, 172, 171, 180, 54, 159, 229, 96, 246, 73, 112, 146, 75, 157, 242, 201, 161, 218, 37, 176, 35, 170, 50, 90, 148, 102, 191, 199, 239, 174, 78, 72, 67, 85, 199, 45, 149, 145, 132, 161, 212, 33, 157, 75, 216, 79, 39, 233, 18, 210, 255, 26, 72, 229, 239, 44, 12, 147, 158, 176, 192, 95, 126, 32, 175, 23, 226, 131, 139, 197, 175, 193, 62, 8, 151, 252, 68, 154, 94, 89, 189, 125, 90, 30, 36, 175, 73, 230, 194, 13, 233, 247, 123, 60, 241, 47, 171, 51, 189, 112, 111, 213, 141, 89, 70, 249, 236, 63, 236, 110, 115, 208]};\r\n*/\r\n\r\n/* harmony default export */ var cryptoManager_CryptoManager = (new CryptoManager_CryptoManager());\r\n\n// CONCATENATED MODULE: ./src/runtime/Loader.js\n// Log System\r\n\r\nlet Loader_log = loglevel[\"getLogger\"]('Loader');\r\n//import path from 'path';\r\n//import System from 'systemjs/dist/system';\r\n\r\n\r\n\r\n\r\nclass Loader_Loader {\r\n\r\n  constructor(runtimeURL, runtimeConfiguration, runtimeDescriptorsInstance) {\r\n    if (!runtimeConfiguration) throw Error('[Runtime.Loader] The descriptor need to know the runtime configuration');\r\n    if (!runtimeDescriptorsInstance) throw Error('[Runtime.Loader] The descriptor need to know the runtime Descriptor instance');\r\n\r\n    this.log = Loader_log;\r\n\r\n    this.runtimeConfiguration = runtimeConfiguration;\r\n    this.descriptors = runtimeDescriptorsInstance;\r\n    console.log(System);\r\n    console.log(allocation_AddressAllocation);\r\n//    System.noConflict();\r\n\r\n  }\r\n\r\n  /**\r\n   * Set runtime url\r\n   * @param  {string} value runtimeURL\r\n   */\r\n  set runtimeURL(value) {\r\n    this._runtimeURL = value;\r\n  }\r\n\r\n  /**\r\n   * Get runtime url\r\n   * @return {string} value runtimeURL\r\n   */\r\n  get runtimeURL() {\r\n    return this._runtimeURL;\r\n  }\r\n\r\n  /**\r\n   * Set Registry component\r\n   * @param  {Registry} value Registry Component\r\n   */\r\n  set registry(value) {\r\n    this._registry = value;\r\n\r\n    // Install AddressAllocation\r\n    let addressAllocation = allocation_AddressAllocation.instance;\r\n    this._addressAllocation = addressAllocation;\r\n\r\n    Loader_log.log('[Loader - AddressAllocation] - ', addressAllocation);\r\n  }\r\n\r\n  /**\r\n   * Get Registry component\r\n   * @return {Registry} Registry component\r\n   */\r\n  get registry() {\r\n    return this._registry;\r\n  }\r\n\r\n  /**\r\n   * Set Message Bus component\r\n   * @param  {MessageBus} value Message bus component\r\n   */\r\n  set messageBus(value) {\r\n    this._messagesBus = value;\r\n  }\r\n\r\n  /**\r\n   * Get Message Bus component\r\n   * @return {MessageBus} Message Bus component\r\n   */\r\n  get messageBus() {\r\n    return this._messagesBus;\r\n  }\r\n\r\n  /**\r\n   * Set Runtime Factory component\r\n   * @param  {runtimeFactory} value Factory includes the specific implementations for each environment\r\n   */\r\n  set runtimeFactory(value) {\r\n    this._runtimeFactory = value;\r\n  }\r\n\r\n  /**\r\n   * Get Runtime Factory component\r\n   * @return {runtimeFactory} Runtime Factory component\r\n   */\r\n  get runtimeFactory() {\r\n    return this._runtimeFactory;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Deploy Hyperty from Catalogue URL\r\n   *\r\n   * @see https://github.com/reTHINK-project/specs/tree/master/datamodel/core/address\r\n   *\r\n   * @param {URL.HypertyCatalogueURL} hypertyCatalogueURL - The Catalogue URL used to identify descriptors in the Catalogue.\r\n   * @param {boolean|URL.HypertyURL} [reuseURL=false] reuseURL - reuseURL is used to reuse the hypertyURL previously registred, by default the reuse is disabled;\r\n   * @param {URL} appURL - the app url origin address;\r\n   * @param {object} IdpConstraint - constraints to be used when selecting the identity to be associated with the Hyperty including origin, idp, and idHint.\r\n   * @returns {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\r\n   *\r\n   * @memberOf Loader\r\n   */\r\n  loadHyperty(hypertyClass, reuseURL = false, IdpConstraint, appURL) {\r\n\r\n    if (!this._readyToUse()) return false;\r\n    if (!hypertyClass) throw new Error('[Runtime.Loader] hypertyClass parameter is needed');\r\n\r\n\r\n    let _hypertyURL;\r\n    let _hypertySandbox;\r\n    let _hypertySourcePackage;\r\n    let haveError = false;\r\n    let instance = new hypertyClass();\r\n    let hyperty = instance.name;\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let errorReason = (reason) => {\r\n        Loader_log.info('[Runtime.Loader] Something failed on the deploy hyperty: ', reason);\r\n        reject(reason);\r\n      };\r\n  \r\n      let handleError = (reason) => {\r\n        haveError = true;\r\n        reject(reason);\r\n      };\r\n  \r\n      Loader_log.info('[Runtime.Loader.loadHyperty] ', hyperty);\r\n      let _hypertyDescriptor = instance.descriptor;\r\n\r\n      _hypertyDescriptor.dataObjects[0] = _hypertyDescriptor.dataObjects[0].replace('%domain%', this._registry._domain);\r\n\r\n      // at this point, we have completed \"step 2 and 3\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\r\n      Loader_log.info('[Runtime.Loader] 1: return hyperty descriptor: ', _hypertyDescriptor);\r\n\r\n\r\n      _hypertySandbox = this.registry.getAppSandbox();\r\n\r\n\r\n\r\n      let numberOfAddresses = 1;\r\n      //debugger;\r\n      this._addressAllocation.create(this._registry._domain, numberOfAddresses, _hypertyDescriptor, 'hyperty', reuseURL)\r\n      .then((addresses) => {\r\n        if (haveError) return false;\r\n        Loader_log.info('[Runtime.Loader] 6: return the addresses for the hyperty', addresses);\r\n\r\n        // Register hyperty\r\n        return this.registry.registerHyperty(_hypertySandbox, hyperty, _hypertyDescriptor, addresses, IdpConstraint);\r\n      }, handleError)\r\n      .then((registrationResult) => {\r\n        if (haveError) return false;\r\n        Loader_log.info('[Runtime.Loader] 7: registration result', registrationResult);\r\n\r\n        // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\r\n        _hypertyURL = registrationResult.url;\r\n\r\n        // Extend original hyperty configuration;\r\n        let configuration = {};\r\n        if (!emptyObject(_hypertyDescriptor.configuration)) {\r\n          try {\r\n            configuration = Object.assign({}, JSON.parse(_hypertyDescriptor.configuration));\r\n          } catch (e) {\r\n            configuration = _hypertyDescriptor.configuration;\r\n          }\r\n        }\r\n        configuration.runtimeURL = this._runtimeURL;\r\n\r\n        if (registrationResult.p2pHandler) {\r\n          configuration.p2pHandler = registrationResult.p2pHandler;\r\n          configuration.p2pRequester = registrationResult.p2pRequester;\r\n        }\r\n\r\n\r\n        // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\r\n\r\n        try {\r\n          //            return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);\r\n          return _hypertySandbox.deployComponent(instance, _hypertyURL, configuration);\r\n        } catch (e) {\r\n          Loader_log.info('[Runtime.Loader] Error on deploy component:', e);\r\n          reject(e);\r\n        }\r\n      }, handleError)\r\n      .then((deployComponentStatus) => {\r\n        if (haveError) return false;\r\n        Loader_log.info('[Runtime.Loader] 8: Deploy component status for hyperty: ', deployComponentStatus);\r\n\r\n        // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\r\n\r\n        // Add the message bus listener to the appSandbox or hypertSandbox;\r\n        this.messageBus.addListener(_hypertyURL, (msg) => {\r\n          _hypertySandbox.postMessage(msg);\r\n        });\r\n\r\n        // Add the message bus listener to the appSandbox or hypertSandbox;\r\n        this.messageBus.addListener(this.runtimeURL + '/status', (msg) => {\r\n          _hypertySandbox.postMessage(msg);\r\n        });\r\n\r\n        // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\r\n        let deployed = {\r\n          runtimeHypertyURL: _hypertyURL,\r\n          status: deployComponentStatus,\r\n          name: hyperty,\r\n          instance: instance\r\n        };\r\n\r\n        Loader_log.info('[Runtime.Loader] Hyperty deployed: ', deployed);\r\n        resolve(instance);\r\n\r\n        // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\r\n        Loader_log.info('[Runtime.Loader] ------------------ END ------------------------');\r\n      }, handleError)\r\n      .catch(errorReason);\r\n      });\r\n  }\r\n\r\n  /**\r\n  * Deploy Stub from Catalogue URL or domain url\r\n  * @param  {URL.URL}     protostubURL    Catalogue URL for the ProtoStub to be loaded or the domain to be target by the protostub\r\n  * @param  {Object}      p2pConfig       configuration of p2p\r\n  */\r\n  loadStub(protostubURL, p2pConfig) {\r\n\r\n    if (!this._readyToUse()) return false;\r\n    if (!protostubURL) throw new Error('[Runtime.Loader.loadStub]ProtoStub descriptor url parameter is needed');\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // to analyse if domain for p2pHandlers should be something else and not the default domain itself\r\n\r\n      let domain = divideURL(protostubURL).domain;\r\n\r\n      if (!domain) {\r\n        domain = protostubURL;\r\n      }\r\n\r\n      let _stubSandbox;\r\n      let _stubDescriptor;\r\n      let _runtimeProtoStubURL;\r\n      let _stubSourcePackage;\r\n      let haveError = false;\r\n      let stubId;\r\n      let stubInstance;\r\n\r\n      let errorReason = (reason) => {\r\n        Loader_log.info('[Runtime.Loader.loadStub]Something failed on the deploy of protocolstub: ', reason);\r\n        reject(reason);\r\n      };\r\n\r\n      let handleError = (reason) => {\r\n        haveError = true;\r\n        reject(reason);\r\n      };\r\n\r\n      // Discover Protocol Stub\r\n      let discoverStub;\r\n      let isP2PHandler = false;\r\n      let isP2PRequester = false;\r\n      let stubCapabilities = {};\r\n\r\n      Loader_log.info('[Runtime.Loader.loadStub] starting loading for ', protostubURL, ' with p2pconfig ', p2pConfig);\r\n      Loader_log.info('[Runtime.Loader.loadStub]Discover or Create a new ProtoStub for domain: ', domain);\r\n\r\n      // step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n      try {\r\n        if (p2pConfig) {\r\n\r\n          if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {\r\n            // step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            isP2PHandler = true;\r\n            stubId = this.runtimeURL;\r\n            discoverStub = this.registry.discoverP2PStub();\r\n          } else {\r\n            isP2PRequester = true;\r\n            let p2pHandlerRuntimeURL = p2pConfig.remoteRuntimeURL;\r\n            stubId = p2pHandlerRuntimeURL;\r\n\r\n            // step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n\r\n            // step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            discoverStub = this.registry.discoverP2PStub(p2pHandlerRuntimeURL);\r\n          }\r\n\r\n        } else {\r\n          // step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n          stubId = domain;\r\n          discoverStub = this.registry.discoverProtostub(domain);\r\n        }\r\n\r\n        // Is registed?\r\n        Loader_log.info('[Runtime.Loader.loadStub]1. Proto Stub Discovered for ', protostubURL, ': ', discoverStub);\r\n\r\n        // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n        resolve(discoverStub);\r\n        Loader_log.info(' [Runtime.Loader]------------------- END ---------------------------\\n');\r\n\r\n      } catch (reason) {\r\n\r\n        // is not registed?\r\n        Loader_log.info('[Runtime.Loader.loadStub]1. Proto Stub not found ' + reason);\r\n\r\n        // step 8 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n        this._load('protocolstub', protostubURL)\r\n//        this.descriptors.getStubDescriptor(protostubURL)\r\n\r\n          .then((instance) => {\r\n\r\n\r\n            if (haveError) return false;\r\n\r\n            // step 9 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            _stubDescriptor = instance.descriptor;\r\n            Loader_log.info('[Runtime.Loader.loadStub]2. return the ProtoStub descriptor ', _stubDescriptor);\r\n            stubInstance = instance;\r\n\r\n/*            let sourcePackageURL = stubDescriptor.sourcePackageURL;\r\n\r\n            if (sourcePackageURL === '/sourcePackage') {\r\n              return stubDescriptor.sourcePackage;\r\n            }*/\r\n\r\n            // step 10 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n//            return this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\r\n\r\n/*          }, handleError)\r\n          .catch(errorReason)\r\n          .then((stubSourcePackage) => {\r\n            if (haveError) return false;*/\r\n\r\n            // According to debug, it seems RuntimeCatalogue does not support yet constraints. It appears empty!!!!\r\n\r\n            if (_stubDescriptor && _stubDescriptor.constraints) {\r\n              stubCapabilities = _stubDescriptor.constraints;\r\n            }\r\n\r\n            // step 11 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            Loader_log.info('[Runtime.Loader.loadStub]3. return the ProtoStub Source Code');\r\n//            _stubSourcePackage = stubSourcePackage;\r\n\r\n            // this will return the sandbox or one promise to getSandbox;\r\n            // step 12 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            return this.registry.getSandbox(domain, stubCapabilities);\r\n          })\r\n          .then((stubSandbox) => {\r\n            if (haveError) return false;\r\n\r\n            // step 15 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            Loader_log.info('[Runtime.Loader.loadStub]4. if the sandbox is registered then return the sandbox ', stubSandbox);\r\n\r\n            _stubSandbox = stubSandbox;\r\n            return stubSandbox;\r\n          })\r\n          .catch((reason) => {\r\n            if (haveError) return false;\r\n\r\n            // step 13 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            Loader_log.info('[Runtime.Loader.loadStub]5. Sandbox was not found, creating a new one ', reason);\r\n\r\n            // check if the sandbox is registed for this stub descriptor url;\r\n\r\n\r\n            // step 14 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            return this._runtimeFactory.createSandbox(stubCapabilities).then((sandbox) => {\r\n              sandbox.addListener('*', (msg) => {\r\n                this.messageBus.postMessage(msg);\r\n              });\r\n\r\n              return sandbox;\r\n            });\r\n\r\n          })\r\n          .then((sandbox) => {\r\n            if (haveError) return false;\r\n\r\n            // step 16 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            Loader_log.info('[Runtime.Loader.loadStub]6. return the sandbox instance and register', sandbox, 'to domain ', domain);\r\n\r\n            _stubSandbox = sandbox;\r\n\r\n            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            return this.registry.registerStub(_stubSandbox, stubId, p2pConfig, protostubURL, _stubDescriptor);\r\n          }, handleError)\r\n          .then((runtimeProtoStub) => {\r\n            if (haveError) return false;\r\n\r\n            // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            Loader_log.info('[Runtime.Loader.loadStub] 7. return the runtime protostub url: ', runtimeProtoStub);\r\n\r\n            _runtimeProtoStubURL = runtimeProtoStub.url;\r\n\r\n            // Extend original hyperty configuration;\r\n            let configuration = {};\r\n            if (!emptyObject(_stubDescriptor.configuration)) {\r\n              try {\r\n                configuration = Object.assign({}, JSON.parse(_stubDescriptor.configuration));\r\n              } catch (e) {\r\n                configuration = _stubDescriptor.configuration;\r\n              }\r\n            }\r\n\r\n            if (p2pConfig) {\r\n              try {\r\n                configuration = Object.assign(configuration, JSON.parse(p2pConfig));\r\n              } catch (e) {\r\n                configuration = Object.assign(configuration, p2pConfig);\r\n              }\r\n            }\r\n\r\n            // required for protostub session\r\n\r\n            configuration.runtimeURL = this._runtimeURL;\r\n\r\n            // step 24 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            try {\r\n              // step 26 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n              Loader_log.info('[Runtime.Loader.loadStub] 8: adding sandbox listener to protostubURL : ', _runtimeProtoStubURL);\r\n\r\n              // step 27 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n              // Add the message bus listener\r\n              this.messageBus.addListener(_runtimeProtoStubURL, (msg) => {\r\n                _stubSandbox.postMessage(msg);\r\n              });\r\n\r\n              return _stubSandbox.deployComponent(stubInstance, _runtimeProtoStubURL, configuration);\r\n            } catch (e) {\r\n              Loader_log.error('[Runtime.Loader.loadStub] Error on deploy component:', e);\r\n              reject(e);\r\n            }\r\n          }, handleError)\r\n          .then(() => {\r\n            if (haveError) return false;\r\n\r\n\r\n            // step 28 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            let registeredStub;\r\n            if (p2pConfig) {\r\n              Loader_log.log('[Runtime.Loader.loadStub] p2pConfig: ', p2pConfig);\r\n\r\n              if (p2pConfig.hasOwnProperty('isHandlerStub')) registeredStub = this.registry.p2pHandlerStub[this._runtimeURL];\r\n              if (p2pConfig.hasOwnProperty('p2pRequesterStub')) registeredStub = this.registry.p2pRequesterStub[p2pConfig.remoteRuntimeURL];\r\n            } else {\r\n              registeredStub = this.registry.protostubsList[domain];\r\n            }\r\n\r\n            Loader_log.log('[Runtime.Loader.loadStub] Stub: ', registeredStub);\r\n            resolve(registeredStub);\r\n            Loader_log.info('[Runtime.Loader.loadStub]------------------- END ---------------------------\\n');\r\n          }, handleError)\r\n          .catch(errorReason);\r\n\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _load(type, url) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain;\r\n      let stub;\r\n\r\n      let originDividedURL = divideURL(this.runtimeURL);\r\n      let originDomain = originDividedURL.domain;\r\n      let loader = new System.constructor();\r\n      let dividedURL = divideURL(url);\r\n      domain = dividedURL.domain;\r\n      let path = dividedURL.identity;\r\n\r\n/*      let constraints = this.constraints;\r\n\r\n      constraints.constraints.onlyAccessToken = true;\r\n      constraints.constraints.onlyIdAssertionValidation = true;\r\n      console.log('LOG HERE', constraints);*/\r\n      if (url.includes('://')) {\r\n        domain = dividedURL.domain;\r\n        if (path) {\r\n          stub = path.substring(path.lastIndexOf('/') + 1);\r\n        } else {\r\n          stub = 'default';\r\n        }\r\n\r\n      } else if (type === 'idp-proxy') {\r\n        domain = originDomain;\r\n        stub = url;\r\n      } \r\n      else {\r\n        stub = 'default';\r\n        domain = url;\r\n      }\r\n\r\n      let resource = getConfigurationResources(this.runtimeConfiguration, 'catalogueURLs', type);\r\n\r\n      let ext = type === 'idp-proxy' ? '.idp.js' : '.ps.js';\r\n\r\n\r\n      let loadingUrl = resource.prefix + domain + resource.suffix + stub + ext;\r\n      Loader_log.log('[Loader._load] first import for ' + url);\r\n\r\n      loader.import(loadingUrl).then((result) => {\r\n\r\n        let instance = new result.default();\r\n        Loader_log.log('[Loader._load] first import result ' + instance.name);\r\n        loader.delete(loadingUrl);\r\n        resolve(instance);\r\n\r\n      }).catch(() => {\r\n\r\n/*        stub = domain;\r\n        domain = originDomain;\r\n\r\n        let loadingUrl2 = buildURL(this.runtimeConfiguration, 'catalogueURLs', type, stub, true);\r\n\r\n        log.log('[Loader._load] 2nd import for ' + loadingUrl2);\r\n\r\n        loader.import(loadingUrl2).then((result2) => {\r\n\r\n//          log.log('[Loader._load] 2nd import result ' + result2);\r\n\r\n        let instance2 = new result2.default();\r\n\r\n        log.log('[Loader._load] 2nd import result ' + instance2.name);\r\n        loader.delete(loadingUrl2);\r\n\r\n        resolve(instance2);\r\n      }).catch((reason) => {*/\r\n        reject(reason);\r\n      });\r\n    });\r\n\r\n//    });\r\n  }\r\n\r\n  /**\r\n  * Deploy idpProxy from Catalogue URL or domain url\r\n  * @param  {URL.URL}     domain          domain\r\n  */\r\n\r\n  loadIdpProxy(idpProxyURL) {\r\n\r\n    if (!this._readyToUse()) return false;\r\n    if (!idpProxyURL) throw new Error('[Runtime.Loader] IdpProxy descriptor url parameter is needed');\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain = divideURL(idpProxyURL).domain;\r\n\r\n      if (!domain) {\r\n        domain = idpProxyURL;\r\n      }\r\n\r\n      let _proxySandbox;\r\n      let _proxyDescriptor;\r\n      let _runtimeIdpProxyURL;\r\n      let _proxySourcePackage;\r\n      let haveError = false;\r\n      let idpProxy;\r\n\r\n      let errorReason = (reason) => {\r\n        Loader_log.info('[Runtime.Loader] Something failed on the deploy of IdpProxy: ', reason);\r\n        reject(reason);\r\n      };\r\n\r\n      let handleError = (reason) => {\r\n        haveError = true;\r\n        reject(reason);\r\n      };\r\n\r\n      // Discover IDPProxy\r\n      Loader_log.info('[Runtime.Loader] ------------------- IDP Proxy Deploy ---------------------------\\n');\r\n      Loader_log.info('[Runtime.Loader] Discover or Create a new IdpProxy for domain/URL: ', domain);\r\n\r\n      try {\r\n        let runtimeIdpProxyURL = this.registry.discoverIdpProxy(domain);\r\n\r\n        // Is registed?\r\n        Loader_log.info('[Runtime.Loader] 1. IDPProxy Discovered: ', runtimeIdpProxyURL);\r\n\r\n        // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n\r\n        let idpProxy = this.registry.idpProxyList[domain];\r\n        Loader_log.log('Deployed: ', idpProxy);\r\n\r\n        resolve(idpProxy);\r\n        Loader_log.info('[Runtime.Loader] ------------------- END ---------------------------\\n');\r\n      } catch (reason) {\r\n\r\n        // is not registed?\r\n        Loader_log.info('[Runtime.Loader] 1. IdpProxy not found:', reason);\r\n\r\n        // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n\r\n        // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n        // this.descriptors.getIdpProxyDescriptor(idpProxyURL)\r\n\r\n        this._load('idp-proxy',idpProxyURL)\r\n          .then((instance) => {\r\n\r\n            Loader_log.info('[Runtime.Loader] 2. Return the IDPProxy descriptor');\r\n\r\n            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            _proxyDescriptor = instance.descriptor;\r\n\r\n            idpProxy = instance;\r\n\r\n/*            let sourcePackageURL = proxyDescriptor.sourcePackageURL;\r\n\r\n            if (sourcePackageURL === '/sourcePackage') {\r\n              return proxyDescriptor.sourcePackage;\r\n            }\r\n\r\n            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            return this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\r\n          }, handleError)\r\n          .then((sourcePackage) => {\r\n            if (haveError) return false;\r\n            log.info('[Runtime.Loader] 3. return the IDPProxy source package');\r\n\r\n            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n\r\n            _proxySourcePackage = sourcePackage;\r\n\r\n            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;\r\n            let policy = true;\r\n            return policy;\r\n          }, handleError)\r\n          .then((policy) => {\r\n            if (haveError) return false;*/\r\n\r\n            // this will return the sandbox or one promise to getSandbox;\r\n            return this.registry.getSandbox(domain);\r\n          })\r\n          .then((proxySandbox) => {\r\n            if (haveError) return false;\r\n            Loader_log.info('[Runtime.Loader] 4. if the sandbox is registered then return the sandbox', proxySandbox);\r\n\r\n            _proxySandbox = proxySandbox;\r\n            return proxySandbox;\r\n          })\r\n          .catch((reason) => {\r\n            if (haveError) return false;\r\n            Loader_log.info('[Runtime.Loader] 5. Sandbox was not found, creating a new one', reason);\r\n\r\n            let proxyCapabilities = {};\r\n            if (_proxyDescriptor && _proxyDescriptor.hasOwnProperty('capabilities')) {\r\n              _proxyDescriptor = _proxyDescriptor.stubCapabilities;\r\n            }\r\n\r\n            return this._runtimeFactory.createSandbox(proxyCapabilities).then((sandbox) => {\r\n\r\n              sandbox.addListener('*', (msg) => {\r\n                this.messageBus.postMessage(msg);\r\n              });\r\n\r\n              return sandbox;\r\n            });\r\n          })\r\n          .then((sandbox) => {\r\n            if (haveError) return false;\r\n            Loader_log.info('[Runtime.Loader] 6. return the sandbox instance and register', sandbox, 'to domain ', domain);\r\n\r\n            _proxySandbox = sandbox;\r\n\r\n            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            return this.registry.registerIdpProxy(sandbox, domain);\r\n          }, handleError)\r\n          .then((runtimeIdpProxyURL) => {\r\n            if (haveError) return false;\r\n            Loader_log.info('[Runtime.Loader] 7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);\r\n\r\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n\r\n            _runtimeIdpProxyURL = runtimeIdpProxyURL;\r\n\r\n            // Extend original hyperty configuration;\r\n            let configuration = {};\r\n            if (!emptyObject(_proxyDescriptor.configuration)) {\r\n              try {\r\n                configuration = Object.assign({}, JSON.parse(_proxyDescriptor.configuration));\r\n              } catch (e) {\r\n                configuration = _proxyDescriptor.configuration;\r\n              }\r\n            }\r\n            configuration.runtimeURL = this._runtimeURL;\r\n\r\n            // Deploy Component step xxx\r\n            try {\r\n              // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n\r\n              // Add the message bus listener\r\n              this.messageBus.addListener(_runtimeIdpProxyURL, (msg) => {\r\n                _proxySandbox.postMessage(msg);\r\n              });\r\n\r\n              return _proxySandbox.deployComponent(idpProxy, runtimeIdpProxyURL, configuration);\r\n            } catch (e) {\r\n              Loader_log.info('[Runtime.Loader] Error on deploy component:', e);\r\n              reject(e);\r\n            }\r\n          }, handleError)\r\n          .then(() => {\r\n            if (haveError) return false;\r\n\r\n\r\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n\r\n            // Load Stub function resolved with success;\r\n            // let idpProxy = {\r\n            //   runtimeIdpProxyURL: _runtimeIdpProxyURL,\r\n            //   status: deployComponentStatus\r\n            // };\r\n\r\n            //this.registry.idpProxyList[domain].status = 'deployed';\r\n            let registeredIdpProxy = this.registry.idpProxyList[domain];\r\n\r\n            Loader_log.log('[Runtime.Loader.loadIdpProxy] 8: loaded: ', registeredIdpProxy);\r\n\r\n            resolve(registeredIdpProxy);\r\n            Loader_log.info('[Runtime.Loader.loadIdpProxy] ------------------- END ---------------------------\\n');\r\n\r\n          }, handleError)\r\n          .catch(errorReason);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  // Check if the loader is ready to load all components\r\n  _readyToUse() {\r\n\r\n    let status = false;\r\n\r\n    if (!this._runtimeURL) throw new Error('[Runtime.Loader] The loader need the runtime url address');\r\n    if (!this._messagesBus) throw new Error('[Runtime.Loader] The loader need the messageBus component');\r\n    if (!this._registry) throw new Error('[Runtime.Loader] The loader need the registry component');\r\n    if (!this._runtimeFactory) throw new Error('[Runtime.Loader] The loader need the runtime factory component');\r\n\r\n    status = true;\r\n    return status;\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var runtime_Loader = (Loader_Loader);\r\n\n// CONCATENATED MODULE: ./src/runtime/Storage.js\n\r\n\r\nlet storages = {};\r\n\r\nfunction Storage_storage(runtimeFactory, runtimeStatusUpdate) {\r\n  if (!runtimeFactory) throw new Error('The runtime factory is a needed parameter');\r\n\r\n  console.log('[Storage.storage] storageSchemas ', runtimeConfiguration_runtimeConfiguration.storageSchemas);\r\n\r\n  Object.keys(runtimeConfiguration_runtimeConfiguration.storageSchemas).forEach((key) => {\r\n\r\n    if (!storages.hasOwnProperty(key)) {\r\n      storages[key] = runtimeFactory.storageManager(key, runtimeConfiguration_runtimeConfiguration.storageSchemas[key], runtimeStatusUpdate);\r\n    }\r\n\r\n  });\r\n\r\n  return storages;\r\n}\r\n\r\nfunction createSyncDB(name, runtimeFactory, url = false) {\r\n  if (!name) throw new Error('[Runtime.Storage.createSyncDB] name is a needed parameter');\r\n  if (!runtimeFactory) throw new Error('[Runtime.Storage.createSyncDB] The runtime factory is a needed parameter');\r\n\r\n  let remote = url ? url : runtimeConfiguration_runtimeConfiguration.remoteStorage;\r\n\r\n  return runtimeFactory.syncStorageManager( name, remote );\r\n\r\n}\r\n\n// CONCATENATED MODULE: ./src/runtime/Descriptors.js\n\r\n\r\n\r\n\r\nlet Descriptors_log = loglevel[\"getLogger\"]('Descriptors');\r\n\r\nclass Descriptors_Descriptors {\r\n\r\n  constructor(runtimeURL, catalogue, runtimeConfiguration) {\r\n    if (!runtimeURL) throw Error('The descriptor need to know the runtime url to be used');\r\n    if (!catalogue) throw Error('The descriptor needs the catalogue instance');\r\n    if (!runtimeConfiguration) throw Error('The descriptor needs the runtime configuration');\r\n\r\n    this.log = Descriptors_log;\r\n\r\n    this.runtimeConfiguration = runtimeConfiguration;\r\n    this.runtimeURL = runtimeURL;\r\n    this.catalogue = catalogue;\r\n\r\n    this.constraints = runtimeUtils.runtimeCapabilities;\r\n  }\r\n\r\n  getHypertyDescriptor(hypertyURL) {\r\n    return this.catalogue.getHypertyDescriptor(hypertyURL, true, this.constraints);\r\n  }\r\n\r\n  getStubDescriptor(stubURL) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain;\r\n      let protostub;\r\n      let protoStubURL;\r\n\r\n      let originDividedURL = divideURL(this.runtimeURL);\r\n      let originDomain = originDividedURL.domain;\r\n\r\n      if (stubURL.includes('://')) {\r\n        let dividedURL = divideURL(stubURL);\r\n        domain = dividedURL.domain;\r\n        let path = dividedURL.identity;\r\n\r\n        if (path) {\r\n          protostub = path.substring(path.lastIndexOf('/') + 1);\r\n        } else {\r\n          protostub = 'default';\r\n        }\r\n\r\n      } else {\r\n        protostub = 'default';\r\n        domain = stubURL;\r\n      }\r\n\r\n      protoStubURL = buildURL(this.runtimeConfiguration, 'catalogueURLs', 'protocolstub', protostub);\r\n      if (domain !== this.runtimeConfiguration.domain) {\r\n        if (!stubURL.indexOf('https') || !stubURL.indexOf('hyperty-catalogue')) {\r\n          protoStubURL = stubURL;\r\n        } else {\r\n\r\n          // TODO: check how to load form different configuration domain\r\n          let resource = getConfigurationResources(this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');\r\n          protoStubURL = resource.prefix + domain + resource.suffix + protostub;\r\n        }\r\n      }\r\n\r\n      Descriptors_log.log('Load ProtocolStub for domain, ' + domain + ' : ', protoStubURL);\r\n      return this.catalogue.getStubDescriptor(protoStubURL, true, this.constraints).then((result) => {\r\n\r\n        resolve(result);\r\n\r\n      }).catch((error) => {\r\n\r\n        // log.log('Error: ', error);\r\n\r\n        protostub = domain;\r\n        domain = originDomain;\r\n\r\n        let resource = getConfigurationResources(this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');\r\n        protoStubURL = resource.prefix + domain + resource.suffix + protostub;\r\n\r\n        // log.log('Fallback -> Load Protocolstub for domain, ' + domain + ' : ', protostub);\r\n        return this.catalogue.getStubDescriptor(protoStubURL, true, this.constraints);\r\n      }).then((result) => {\r\n        resolve(result);\r\n      }).catch((reason) => {\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  getIdpProxyDescriptor(idpProxyURL) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let domain;\r\n      let idpproxy;\r\n\r\n      let originDividedURL = divideURL(this.runtimeURL);\r\n      let originDomain = originDividedURL.domain;\r\n      let constraints = this.constraints;\r\n\r\n      constraints.constraints.onlyAccessToken = true;\r\n      constraints.constraints.onlyIdAssertionValidation = true;\r\n      console.log('LOG HERE', constraints);\r\n      if (idpProxyURL.includes('://')) {\r\n        let dividedURL = divideURL(idpProxyURL);\r\n        domain = dividedURL.domain;\r\n        let path = dividedURL.identity;\r\n        if (path) {\r\n          idpproxy = path.substring(path.lastIndexOf('/') + 1);\r\n        } else {\r\n          idpproxy = 'default';\r\n        }\r\n\r\n      } else {\r\n        idpproxy = 'default';\r\n        domain = idpProxyURL;\r\n      }\r\n\r\n\r\n      let resource = getConfigurationResources(this.runtimeConfiguration, 'catalogueURLs', 'idpProxy');\r\n\r\n      idpProxyURL = resource.prefix + domain + resource.suffix + idpproxy;\r\n      // log.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);\r\n      return this.catalogue.getIdpProxyDescriptor(idpProxyURL, true, constraints).then((result) => {\r\n\r\n        resolve(result);\r\n\r\n      }).catch(() => {\r\n\r\n        idpproxy = domain;\r\n        domain = originDomain;\r\n\r\n        idpProxyURL = buildURL(this.runtimeConfiguration, 'catalogueURLs', 'idpProxy', idpproxy);\r\n\r\n        // log.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);\r\n        return this.catalogue.getIdpProxyDescriptor(idpProxyURL, true, constraints);\r\n      }).then((result) => {\r\n        resolve(result);\r\n      }).catch((reason) => {\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n  }\r\n}\r\n\r\n/* harmony default export */ var runtime_Descriptors = (Descriptors_Descriptors);\r\n\n// CONCATENATED MODULE: ./src/discovery/CoreDiscovery.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet CoreDiscovery_log = loglevel[\"getLogger\"]('CoreDiscovery');\r\n\r\n\r\n\r\n\r\n/**\r\n* Core Discovery interface\r\n* Class to allow applications to search for hyperties and DataObjects using the message bus\r\n*/\r\nclass CoreDiscovery_CoreDiscovery {\r\n\r\n  /**\r\n  * To initialise the Discovery, which will provide the support for hyperties to\r\n  * query users registered in outside the internal core.\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  * @param  {RuntimeURL}          runtimeURL            runtimeURL\r\n  * @param  {graphConnector}    graphConnector\r\n  */\r\n  constructor(runtimeURL, msgBus, graphConnector, runtimeFactory, registry) {\r\n    if (!runtimeFactory) throw Error('The catalogue needs the runtimeFactory');\r\n\r\n    let _this = this;\r\n    this._messageBus = msgBus;\r\n    _this.graphConnector = graphConnector;\r\n    _this.httpRequest = runtimeFactory.createHttpRequest();\r\n    _this.domain = divideURL(runtimeURL).domain;\r\n    _this.discoveryURL = runtimeURL + '/discovery/';\r\n    _this.registry = registry;\r\n\r\n    _this.messageBus.addListener(_this.discoveryURL, (msg) => {\r\n\r\n      _this.discoveryManager(msg).then(result =>{\r\n\r\n        //FLOW-OUT: message response\r\n        _this.messageBus.postMessage({\r\n          id: msg.id,\r\n          type: 'response',\r\n          from: msg.to,\r\n          to: msg.from,\r\n          body: {\r\n            code: 200,\r\n            value: result\r\n          }\r\n        });\r\n      })\r\n        .catch(function(err) {\r\n          let description;\r\n          let code;\r\n\r\n          if (err === 'GraphConnector') {\r\n            description = 'This search is not available at the moment. Try later.';\r\n            code = 500;\r\n          } else {\r\n            description = 'Not Found';\r\n            code = 404;\r\n          }\r\n\r\n          //FLOW-OUT: error message response\r\n          _this.messageBus.postMessage({\r\n            id: msg.id,\r\n            type: 'response',\r\n            from: msg.to,\r\n            to: msg.from,\r\n            body: {\r\n              code: code,\r\n              description: description\r\n            }\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the MessageBus.\r\n   */\r\n  get messageBus() {\r\n    return this._messageBus;\r\n  }\r\n\r\n  /**\r\n   * Sets the MessageBus.\r\n   * @param {MessageBus}           messageBus    The Message Bus.\r\n   */\r\n  set messageBus(messageBus) {\r\n    this._messageBus = messageBus;\r\n  }\r\n\r\n  /* function to decide what discovery method to call and later return the response msg  */\r\n  discoveryManager(msg) {\r\n    let _this = this;\r\n    let domain = divideURL(msg.from).domain;\r\n    let atributes = msg.body.resource.split('/').filter(Boolean);\r\n    let resources = [];\r\n    let dataSchemes = [];\r\n\r\n    CoreDiscovery_log.log('[CoreDiscovery.discoveryManager] received: ', msg);\r\n\r\n    if (msg.body.criteria) {\r\n      if (msg.body.criteria.resources) { resources = msg.body.criteria.resources; }\r\n      if (msg.body.criteria.dataSchemes) { dataSchemes = msg.body.criteria.dataSchemes; }\r\n    }\r\n\r\n    switch (atributes[1]) {\r\n      case 'user':\r\n        if (atributes[0] == 'hyperty') { return _this.discoverHyperties(msg.body.resource.split('user/')[1], dataSchemes, resources, msg.body.criteria.domain); } else { return _this.discoverDataObjects(msg.body.resource.split('user/')[1], dataSchemes, resources, msg.body.criteria.domain); }\r\n        break;\r\n\r\n      case 'url':\r\n        if (atributes[0] == 'hyperty') { return _this.discoverHypertyPerURL(msg.body.resource.split('url/')[1], msg.body.criteria.domain); } else { return _this.discoverDataObjectPerURL(msg.body.resource.split('url/')[1], msg.body.criteria.domain); }\r\n        break;\r\n      case 'name':\r\n        return _this.discoverDataObjectsPerName(msg.body.resource.split('name/')[1], dataSchemes, resources, msg.body.criteria.domain);\r\n        break;\r\n      case 'reporter':\r\n        return _this.discoverDataObjectsPerReporter(msg.body.resource.split('reporter/')[1], dataSchemes, resources, msg.body.criteria.domain);\r\n        break;\r\n      case 'guid':\r\n        if (typeof _this.graphConnector !== 'undefined' &&  _this.graphConnector !== null) {\r\n          if (atributes[0] == 'hyperty') { return _this.discoverHypertiesPerGUID(msg.body.resource.split('user-guid://')[1], dataSchemes, resources); } else { return _this.discoverDataObjectsPerGUID(msg.body.resource.split('user-guid://')[1], dataSchemes, resources); }\r\n          break;\r\n        } else {\r\n          return Promise.reject('GraphConnector');\r\n          break;\r\n        }\r\n      case 'userprofile':\r\n        if (typeof _this.graphConnector !== 'undefined' &&  _this.graphConnector !== null) {\r\n          if (atributes[0] == 'hyperty') { return _this.discoverHypertiesPerUserProfileData(msg.body.resource.split('userprofile/')[1], dataSchemes, resources); } else { return _this.discoverDataObjectsPerUserProfileData(msg.body.resource.split('userprofile/')[1], dataSchemes, resources); }\r\n          break;\r\n        } else {\r\n          return Promise.reject('GraphConnector');\r\n          break;\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverHypertiesPerUserProfileData(userIdentifier, dataSchemes, resources) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      //translate user identifier (e.g. email, name...) into the associated GUIDs\r\n      _this.discoverGUIDPerUserIdentifier(userIdentifier)\r\n        .then(function(guids) {\r\n\r\n          let hypertiesPromises = guids.map(function(guid) {\r\n\r\n            return new Promise(function(resolve, reject) {\r\n              _this.discoverHypertiesPerGUID(guid, dataSchemes, resources)\r\n                .then(function(hyperties) {\r\n                  resolve(hyperties);\r\n                })\r\n                .catch(function(err) {\r\n                  resolve([]);\r\n                });\r\n            });\r\n          });\r\n\r\n          Promise.all(hypertiesPromises)\r\n            .then(function(hypertiesResult) {\r\n\r\n              let hyperties = [].concat.apply([], hypertiesResult);\r\n\r\n              if (hyperties.length === 0) {\r\n                return reject('No hyperties were found');\r\n              }\r\n\r\n              resolve(hyperties);\r\n            });\r\n        })\r\n        .catch(function(err) {\r\n          return reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for DataObjects registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverDataObjectsPerUserProfileData(userIdentifier, dataSchemes, resources) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      //translate user identifier (e.g. email, name...) into the associated GUIDs\r\n      _this.discoverGUIDPerUserIdentifier(userIdentifier)\r\n        .then(function(guids) {\r\n\r\n          let dataObjectsPromises = guids.map(function(guid) {\r\n\r\n            return new Promise(function(resolve, reject) {\r\n              _this.discoverDataObjectsPerGUID(guid, dataSchemes, resources)\r\n                .then(function(dataObjects) {\r\n                  resolve(dataObjects);\r\n                })\r\n                .catch(function(err) {\r\n                  resolve([]);\r\n                });\r\n            });\r\n          });\r\n\r\n          Promise.all(dataObjectsPromises)\r\n            .then(function(dataObjectsResult) {\r\n\r\n              let dataObjects = [].concat.apply([], dataObjectsResult);\r\n\r\n              if (dataObjects.length === 0) {\r\n                return reject('No dataObjects were found');\r\n              }\r\n\r\n              resolve(dataObjects);\r\n            });\r\n        })\r\n        .catch(function(err) {\r\n          return reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n  * @param  {String}             guid\r\n  * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverHypertiesPerGUID(guid, dataSchemes, resources) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      //translate GUID into the user IDs to query the domain registry\r\n      _this.discoverUserIdsPerGUID(guid)\r\n        .then(function(uids) {\r\n\r\n        //translate user IDs into the associated hyperties registered in some domain\r\n          let hypertiesPromises = uids.map(function(uid) {\r\n            return new Promise(function(resolve, reject) {\r\n              _this.discoverHyperties(uid.uID, dataSchemes, resources, uid.domain)\r\n                .then(function(hyperties) {\r\n                  resolve(hyperties);\r\n                })\r\n                .catch(function(err) {\r\n                  resolve([]);\r\n                });\r\n            });\r\n          });\r\n\r\n          Promise.all(hypertiesPromises)\r\n            .then(function(hypertiesResult) {\r\n\r\n              let hyperties = [].concat.apply([], hypertiesResult);\r\n\r\n              if (hyperties.length === 0) {\r\n                return reject('No hyperties were found');\r\n              }\r\n\r\n              // log.log('Hyperties : ', hyperties);\r\n              resolve(hyperties);\r\n            });\r\n\r\n        })\r\n        .catch(function(err) {\r\n          return reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Advanced Search for DataObjects registered in domain registry associated with some GUID\r\n  * @param  {String}             guid\r\n  * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\r\n  discoverDataObjectsPerGUID(guid, dataSchemes, resources) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      //translate GUID into the user IDs to query the domain registry\r\n      _this.discoverUserIdsPerGUID(guid)\r\n        .then(function(uids) {\r\n\r\n        //translate user IDs into the associated dataObjects registered in some domain\r\n          let dataObjectPromises = uids.map(function(uid) {\r\n            return new Promise(function(resolve, reject) {\r\n              _this.discoverDataObjects(uid.uID, dataSchemes, resources, uid.domain)\r\n                .then(function(dataObjects) {\r\n                  resolve(dataObjects);\r\n                })\r\n                .catch(function(err) {\r\n                  resolve([]);\r\n                });\r\n            });\r\n          });\r\n\r\n          Promise.all(dataObjectPromises)\r\n            .then(function(dataObjectsResult) {\r\n\r\n              let dataObjects = [].concat.apply([], dataObjectsResult);\r\n\r\n              if (dataObjects.length === 0) {\r\n                return reject('No dataObjects were found');\r\n              }\r\n\r\n              // log.log('DataObjects : ', dataObjects);\r\n              resolve(dataObjects);\r\n            });\r\n\r\n        })\r\n        .catch(function(err) {\r\n          return reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for Hyperties registered in domain registry and associated with some user ID\r\n  * @param  {String}           user                  user identifier, either in url or email format\r\n  * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverHyperties(user, dataSchemes, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: 'domain://registry.' + activeDomain,\r\n      body: {\r\n\r\n      }\r\n    };\r\n\r\n    if (user.indexOf('user://') > -1) { msg.body.resource = user; } else { msg.body.resource = '/hyperty/idp-identifier/' + user; }\r\n\r\n    if (dataSchemes.length > 0) {\r\n      if (!msg.body.criteria) { msg.body.criteria = {}; }\r\n      msg.body.criteria.dataSchemes = dataSchemes;\r\n    }\r\n\r\n    if (resources.length > 0) {\r\n      if (!msg.body.criteria) { msg.body.criteria = {}; }\r\n      msg.body.criteria.resources = resources;\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      // log.log(\"[CoreDiscovery.discoverHyperties] sending msg \", msg);\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        // log.log(\"[CoreDiscovery.discoverHyperties] rcved reply \", reply);\r\n\r\n        if (reply.body.code === 200 || reply.body.code === 500) {\r\n          let hyperties = reply.body.value;\r\n\r\n          let finalHyperties = [];\r\n          for (var key in hyperties) finalHyperties.push(hyperties[key]);\r\n\r\n          if (finalHyperties.length > 0) {\r\n            // log.log(\"[CoreDiscovery.discoverHyperties] Hyperties Found: \", finalHyperties);\r\n            resolve(finalHyperties);\r\n          } else { return reject('No Hyperty was found'); }\r\n        } else { return reject('No Hyperty was found'); }\r\n\r\n        /*_this.registry.isLegacy(user).then((legacy) => {\r\n              if (legacy) resolve([{hypertyID: user }])\r\n              else return reject('No Hyperty was found');\r\n          });*/\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for DataObjects registered in domain registry and associated with some user ID\r\n  * @param  {String}           user                  user identifier, either in url or email format\r\n  * @param  {Array<string>}    dataSchemes (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObjects(user, dataSchemes, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n    let dataObjectsArray = [];\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      //translate user identifier (e.g. email, name...) into the associated hyperties\r\n      _this.discoverHyperties(user, [], [], activeDomain)\r\n        .then(function(hyperties) {\r\n\r\n          let finalHyperties = [];\r\n          for (var key in hyperties) finalHyperties.push(hyperties[key]);\r\n\r\n          //translate hyperties URLs into the associated dataObjects registered in some domain\r\n          let dataObjectsPromises = finalHyperties.map(function(hyperty) {\r\n            return new Promise(function(resolve, reject) {\r\n              _this.discoverDataObjectsPerReporter(hyperty.hypertyID, dataSchemes, resources, activeDomain)\r\n                .then(function(dataObject) {\r\n                  resolve(dataObject);\r\n                })\r\n                .catch(function(err) {\r\n                  resolve([]);\r\n                });\r\n            });\r\n          });\r\n\r\n          Promise.all(dataObjectsPromises)\r\n            .then(function(dataObjectsResult) {\r\n\r\n              let dataObjects = [].concat.apply([], dataObjectsResult);\r\n\r\n              dataObjects.forEach(function(dataObject) {\r\n                dataObjectsArray.push(dataObject);\r\n              });\r\n\r\n              let finalDataObjects = [];\r\n              for (var key in dataObjectsArray) finalDataObjects.push(dataObjectsArray[key]);\r\n\r\n              if (finalDataObjects.length === 0) {\r\n                return reject('No dataObjects were found');\r\n              }\r\n\r\n              // log.log('DataObjects Found: ', finalDataObjects);\r\n              resolve(finalDataObjects);\r\n            });\r\n\r\n        })\r\n        .catch(function(err) {\r\n          return reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about hyperties registered in domain registry, and\r\n  * return the hyperty information, if found.\r\n  * @param  {String}              url  dataObject URL\r\n  * @param  {String}            domain (Optional)\r\n  * @return {Promise}          Promise\r\n  */\r\n  discoverHypertyPerURL(url, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: 'domain://registry.' + activeDomain,\r\n      body: {\r\n        resource: url\r\n      }\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        if (reply.body.code !== 200 && reply.body.code !== 500) { return reject('No Hyperty was found'); }\r\n\r\n        let hyperty = reply.body.value;\r\n\r\n        if (hyperty) {\r\n          // log.log('Hyperty found: ', hyperty);\r\n          resolve(hyperty);\r\n        } else {\r\n          return reject('No Hyperty was found');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about dataObject registered in domain registry, and\r\n  * return the dataObject information, if found.\r\n  * @param  {String}              url  dataObject URL\r\n  * @param  {String}            domain (Optional)\r\n  * @return {Promise}          Promise\r\n  */\r\n  discoverDataObjectPerURL(url, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: 'domain://registry.' + activeDomain,\r\n      body: {\r\n        resource: url\r\n      }\r\n    };\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        let dataObject = reply.body.value;\r\n\r\n        if (dataObject) {\r\n          // log.log('DataObject found: ', dataObject);\r\n          resolve(dataObject);\r\n        } else {\r\n          return reject('DataObject not found');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Advanced Search for dataObjects registered in domain registry\r\n  * @param  {String}           name                  name of the dataObject\r\n  * @param  {Array<string>}    dataSchemes (Optional)     types of dataObject schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of dataObject resources\r\n  * @param  {String}           domain (Optional)     domain of the registry to search\r\n  */\r\n  discoverDataObjectsPerName(name, dataSchemes, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: 'domain://registry.' + activeDomain,\r\n      body: {\r\n        resource: name\r\n      }\r\n    };\r\n\r\n    if (dataSchemes.length > 0) {\r\n      if (!msg.body.criteria) { msg.body.criteria = {}; }\r\n      msg.body.criteria.dataSchemes = dataSchemes;\r\n    }\r\n\r\n    if (resources.length > 0) {\r\n      if (!msg.body.criteria) { msg.body.criteria = {}; }\r\n      msg.body.criteria.resources = resources;\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        let dataObjects = reply.body.value;\r\n\r\n        let finalDataObjects = [];\r\n        for (var key in dataObjects) finalDataObjects.push(dataObjects[key]);\r\n\r\n        if (finalDataObjects.length > 0) {\r\n          // log.log(\"DataObjects Found: \", finalDataObjects);\r\n          resolve(finalDataObjects);\r\n        } else {\r\n          return reject('No DataObject was found');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request about specific reporter dataObject registered in domain registry, and\r\n  * return the dataObjects from that reporter.\r\n  * @param  {String}           reporter                         dataObject reporter\r\n  * @param  {Array<string>}    scdataSchemeshema                (Optional)     types of dataObjects schemas\r\n  * @param  {Array<string>}    resources                        (Optional)  types of dataObjects resources\r\n  * @param  {String}           domain                           (Optional)\r\n  */\r\n  discoverDataObjectsPerReporter(reporter, dataSchemes, resources, domain) {\r\n    let _this = this;\r\n    let activeDomain;\r\n\r\n    activeDomain = (!domain) ? _this.domain : domain;\r\n\r\n    let msg = {\r\n      type: 'read',\r\n      from: _this.discoveryURL,\r\n      to: 'domain://registry.' + activeDomain,\r\n      body: {\r\n        resource: '/comm',\r\n        criteria: {\r\n          reporter: reporter\r\n        }\r\n      }\r\n    };\r\n\r\n    if (dataSchemes.length > 0) { msg.body.criteria.dataSchemes = dataSchemes; }\r\n\r\n    if (resources.length > 0) { msg.body.criteria.resources = resources; }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      _this.messageBus.postMessage(msg, (reply) => {\r\n\r\n        let dataObjects = reply.body.value;\r\n\r\n        let finalDataObjects = [];\r\n        for (var key in dataObjects) finalDataObjects.push(dataObjects[key]);\r\n\r\n        if (finalDataObjects.length > 0) {\r\n          // log.log(\"DataObjects Found: \", finalDataObjects);\r\n          resolve(finalDataObjects);\r\n        } else {\r\n          return reject('No DataObject was found');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request global registry about the user IDs associated with some GUID\r\n  * @param  {String}              guid\r\n  * @return {Promise}          Promise\r\n  */\r\n  discoverUserIdsPerGUID(guid) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      // log.log(\"GO graphConnector:\", guid);\r\n\r\n      _this.graphConnector.queryGlobalRegistry(guid)\r\n        .then(function(graphConnectorContactData) {\r\n\r\n        // log.log('Information returned from Global Registry: ', graphConnectorContactData);\r\n\r\n          if (typeof graphConnectorContactData === 'string' || !graphConnectorContactData) {\r\n            return reject('Unsuccessful discover userIDs by GUID');\r\n          } else {\r\n\r\n            let userids = graphConnectorContactData.userIDs;\r\n\r\n            if (userids.length === 0) { return reject('UserIDs not available'); }\r\n\r\n            resolve(userids);\r\n          }\r\n\r\n        })\r\n        .catch(function(err) {\r\n          return reject(err);\r\n        });\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n  * function to request discovery service about the GUID associated with some user identifier (eg email, name ...)\r\n  * @param  {String}            userIdentifier\r\n  * @return {Promise}           Promise\r\n  */\r\n  discoverGUIDPerUserIdentifier(userIdentifier) {\r\n    let _this = this;\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      let lookupURLDiscoveryService = 'https://rethink.tlabscloud.com/discovery/rest/discover/lookup?searchquery=';\r\n      _this.httpRequest.get(lookupURLDiscoveryService + userIdentifier)\r\n        .then(function(json) {\r\n        // log.log('discover GUID by user identifier', json);\r\n\r\n          let response = JSON.parse(json);\r\n          let filteredGuid = response.results.filter(function(x) {\r\n            return x.rethinkID != undefined;\r\n          });\r\n\r\n          if (filteredGuid.length === 0) { return reject('Unsuccessful discover GUID by user identifier'); }\r\n\r\n          let guids = filteredGuid.map(function(x) { return x.rethinkID; });\r\n\r\n          return resolve(guids);\r\n\r\n        })\r\n        .catch(function(err) {\r\n        // log.log(\"HTTP Request error: \", err);\r\n          return reject(err);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\n/* harmony default export */ var discovery_CoreDiscovery = (CoreDiscovery_CoreDiscovery);\r\n\n// CONCATENATED MODULE: ./src/store-objects/DataObjectsStorage.js\n// Log System\r\n\r\nlet DataObjectsStorage_log = loglevel[\"getLogger\"]('DataObjectsStorage');\r\n\r\n\r\n\r\n\r\n\r\nclass DataObjectsStorage_DataObjectsStorage {\r\n\r\n  constructor(storageManager, storedDataObjects = {}, factory, runtimeUrl) {\r\n    if (!storageManager) throw new Error('[Store Data Objects] - Needs the storageManager component');\r\n\r\n    this._storageManager = storageManager;\r\n\r\n    this._storeDataObject = storedDataObjects;\r\n\r\n    this._cache = {};\r\n\r\n    this._createSyncDB = createSyncDB; // to create Data Objects to be synched with remote storages\r\n    this._remotes = {}; // List of DO synched with remote storages\r\n    this._factory = factory;\r\n    this._table = 'syncherManager:ObjectURLs';\r\n    this._remoteStorageTable = 'dataObjectStorage';\r\n    this._remoteSchema = 'url';\r\n    this._runtimeUrl = runtimeUrl;\r\n  }\r\n\r\n  // load Data Objects synched with remote Storages\r\n\r\n  loadRemote(resume = false) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      let loading = [];\r\n      let synching = [];\r\n\r\n      _this._storageManager.get(null, null, 'remotes').then((remotes) => {\r\n\r\n        // in case we don't have any remotes locally stored\r\n        DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] remotes: ', remotes);\r\n        if (!remotes) resolve();\r\n\r\n        if (!resume) _this._remotes = remotes;\r\n\r\n        DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] loading: ', _this._remotes);\r\n\r\n        let remoteObjects = Object.keys(remotes);\r\n\r\n        // in case we don't have any remotes locally stored\r\n        if (remoteObjects.length === 0) resolve();\r\n\r\n        remoteObjects.forEach((db) => {\r\n          let table = 'do-' + db.split('/')[3];\r\n          _this._remotes[db] = createSyncDB(table, this._factory);\r\n          //            _this._remotes[remote] = createSyncDB(remote, _this._factory, 'remoteDataObjectStorage' );\r\n          loading.push(_this._remotes[db].get());\r\n        });\r\n\r\n        Promise.all(loading).then((remotes) => {\r\n          DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] loaded: ', remotes);\r\n          //TODO: init this._storeDataObject with loaded data objects\r\n          /*          Object.keys(remotes).forEach((remote) => {\r\n          \r\n                      synching.push(_this.sync(remote));\r\n                    });\r\n                    Promise.all(synching).then((dataObjs) => {*/\r\n\r\n          let dataObjs = remotes;\r\n\r\n          if (dataObjs.length === 0) resolve();\r\n\r\n          dataObjs.forEach((dO) => {\r\n\r\n            let dataObj = _this._remoteDoc2dataObject(dO);\r\n            //              Object.keys(dO).forEach((i) => {\r\n\r\n            DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] loaded remote ', dataObj);\r\n            //              if (dO[remote].isReporter) {\r\n            let type = this._getTypeOfObject(dataObj.isReporter);\r\n\r\n            if (!_this._storeDataObject) _this._storeDataObject = {};\r\n\r\n            if (!_this._storeDataObject.hasOwnProperty(type)) _this._storeDataObject[type] = {};\r\n\r\n            _this._storeDataObject[type][dataObj.url] = dataObj;\r\n\r\n            //             });\r\n            //            });\r\n            resolve(_this._storeDataObject);\r\n\r\n          }, (error) => { reject(error) });\r\n        });\r\n      }, (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      resolve();\r\n\r\n    });\r\n  }\r\n\r\n  // delete Data Objects synched with remote Storages\r\n\r\n  deleteRemotes() {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      let deleting = [];\r\n      let disconnecting = [];\r\n\r\n      _this._storageManager.get(null, null, 'remotes').then((remotes) => {\r\n\r\n        // in case we don't have any remotes locally stored\r\n        DataObjectsStorage_log.info('[StoreDataObjects.deleteRemotes] remotes: ', remotes);\r\n        if (!remotes) resolve();\r\n\r\n        let remoteObjects = Object.keys(_this._remotes);\r\n\r\n        // in case we don't have any remotes locally stored\r\n\r\n        if (remoteObjects.length === 0) resolve();\r\n\r\n        remoteObjects.forEach((db) => {\r\n          deleting.push(\r\n            _this._remotes[db].disconnect()\r\n          );\r\n          deleting.push(\r\n            _this._remotes[db].delete()\r\n          );\r\n        });\r\n\r\n        Promise.all(deleting).then(() => {\r\n          DataObjectsStorage_log.log('[StoreDataObjects.deleteRemotes] deleted.');\r\n\r\n          resolve();\r\n\r\n        }, (error) => { resolve(); });\r\n      });\r\n\r\n      resolve();\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @description should set the initial state of the dataObjectURL to be resumed if necessary;\r\n   *\r\n   * @param {DataObjectURL} url - dataObjectURL to be saved;\r\n   * @param {Boolean} isReporter - the object to be saved is a reporter\r\n   * @param {SchemaURL} schema - the schema url\r\n   * @param {String} status - the status of current dataObject\r\n   * @param {HypertyURL} reporter - the Reporter hypertyURL\r\n   * @param {Array<HypertyURL>} subscription - list of subscriptions\r\n   * @param {Array<DataObjectChild>} children - list of childs of dataObjectURL\r\n   * @param {Array<String>} childrens - list of childrens, like, 'chatmessage';\r\n   * @param {Array<UserURL} subscriberUser - list of subscribed users;\r\n   */\r\n\r\n  set(metadata) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let storeDataObject = this._storeDataObject ? this._storeDataObject : {};\r\n      let type = this._getTypeOfObject(metadata.isReporter);\r\n\r\n\r\n      if (!storeDataObject.hasOwnProperty(type)) storeDataObject[type] = {};\r\n\r\n      if (!storeDataObject[type].hasOwnProperty(metadata.url)) {\r\n        storeDataObject[type][metadata.url] = {};\r\n        storeDataObject[type][metadata.url].subscriptions = [];// TODO:do we need this?\r\n        storeDataObject[type][metadata.url].subscriberUsers = [];// TODO:do we need this?\r\n        storeDataObject[type][metadata.url].childrenObjects = {};\r\n        storeDataObject[type][metadata.url].data = {};\r\n      }\r\n\r\n      Object.assign(storeDataObject[type][metadata.url], metadata);\r\n      delete storeDataObject[type][metadata.url].subscriberUser;\r\n      delete storeDataObject[type][metadata.url].subscriberHyperty;\r\n\r\n      storeDataObject[type][metadata.url].backup = metadata.hasOwnProperty('backup') ? metadata.backup : false;\r\n\r\n      /*if (schema) storeDataObject[type][metadata.url].schema = schema;\r\n      if (status) storeDataObject[type][metadata.url].status = status;\r\n      if (childrenResources) storeDataObject[type][metadata.url].childrenResources = childrenResources;*/\r\n\r\n      if (metadata.subscriberHyperty && !metadata.isReporter) { // TODO: do we need this?\r\n        this._updateToArray(storeDataObject[type], metadata.url, 'subscriptions', metadata.subscriberHyperty);\r\n      }\r\n\r\n      //storeDataObject[type][metadata.url].owner = owner;\r\n\r\n      if (metadata.subscriberUser) { // TODO: do we need this?\r\n        if (storeDataObject[type][metadata.url].subscriberUsers.indexOf(metadata.subscriberUser)) {\r\n          this._updateToArray(storeDataObject[type], metadata.url, 'subscriberUsers', metadata.subscriberUser);\r\n        }\r\n      }\r\n\r\n      this._storeDataObject = storeDataObject;\r\n\r\n      let backup = metadata.hasOwnProperty('backup') ? metadata.backup : false;\r\n      let table = backup ? metadata.url : this._table;\r\n      //      let db = backup ? table.split('://')[1] : this._table;\r\n      let db = backup ? 'do-' + table.split('/')[3] : this._table;\r\n      if (backup && !this._remotes[metadata.url]) {\r\n        let schema = {};\r\n        schema[table] = this._remoteSchema;\r\n        this._remotes[metadata.url] = createSyncDB(db, this._factory);\r\n      }\r\n\r\n      // Save Data Object URL at remotes table to support resumes\r\n\r\n      if (backup) this._storageManager.set(table, 0, db, 'remotes');\r\n\r\n      let storage = backup ? this._remotes[table] : this._storageManager;\r\n\r\n      if (backup) {\r\n        // lets connect to remote storage to enable sync\r\n        storage.set(table, storeDataObject[type][metadata.url]).then(() => {\r\n          if (metadata.isReporter) storage.connect();\r\n          resolve(storeDataObject[type][metadata.url]);\r\n        }, (error) => {\r\n          DataObjectsStorage_log.error('[DataObjectStorage.set] failed to save into remote storage: ', error);\r\n          reject(error);\r\n        });\r\n      } else {\r\n        console.log('[DataObjectStorage.set] _storeDataObject before filter ', this._storeDataObject);\r\n        storage.set(db, 1, this._filterRemotes(this._storeDataObject), table).then(() => {\r\n          resolve(storeDataObject[type][metadata.url]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  // to filter Data Objects that are stored outside the ObjectURLs table\r\n\r\n  _filterRemotes(storeDataObject) {\r\n    let remotes = Object.keys(this._remotes);\r\n\r\n    let filtered = deepClone(storeDataObject);\r\n\r\n    console.log('[DataObjectStorage._filterRemotes] starting filtering ', filtered);\r\n\r\n    remotes.forEach((remote) => {\r\n      if (filtered['reporters'] && filtered['reporters'][remote]) {\r\n        delete filtered['reporters'][remote];\r\n        console.log('[DataObjectStorage._filterRemotes] filter updated ', filtered);\r\n      }\r\n      else delete filtered['observers'][remote];\r\n    });\r\n\r\n    console.log('[DataObjectStorage._filterRemotes] ', filtered);\r\n\r\n    return filtered;\r\n  }\r\n\r\n  // Initial Sync of Observer to avoid later mismatches with sync revisions\r\n  // OUtdated: not used anymore\r\n  /*\r\n    initialObserverSync(resource, backupRevision) {\r\n      // to be completed\r\n      let table = resource.split('/')[3];\r\n  \r\n      let _this = this;\r\n  \r\n      let options = {table: table, observer: true, baseRevision: backupRevision, syncedRevision: backupRevision};\r\n  \r\n      console.log('[DataObjectStorage.initialObserverSync] object: ', resource, ' revision ', backupRevision)\r\n  \r\n      _this._remotes[resource]options).then(()=> {\r\n  \r\n        console.log('[DataObjectStorage.initialObserverSync] connected ');\r\n  \r\n              setTimeout(function() {\r\n                _this._remotes[resource].disconnect().then(()=>{\r\n                  console.log('[DataObjectStorage.initialObserverSync] disconnected ');\r\n              },(error)=> {\r\n                log.error('[DataObjectStorage.initialObserverSync] Error disconnecting with remote storage');\r\n                reject(error);\r\n              });\r\n              }, 15000)\r\n  \r\n      }, (error) => {\r\n        log.error('[DataObjectStorage.initialObserverSync] Error connecting to remote storage');\r\n        reject(error)\r\n      });\r\n  \r\n    }*/\r\n\r\n  /**\r\n   * @description should save and update the current dataObject data information\r\n   *\r\n   * @param {Boolean} isReporter - the object to be saved is a reporter\r\n   * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\r\n   * @param {String} attribute - attribute inside the data which will be saved\r\n   * @param {any} data - value will be saved inside the attribute;\r\n   */\r\n  saveData(isReporter, resource, attribute, value, updateRuntimeStatus) {\r\n\r\n    let storeDataObject = this._storeDataObject;\r\n    let type = this._getTypeOfObject(isReporter);\r\n\r\n    if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\r\n      DataObjectsStorage_log.log('[StoreDataObjects - save data] - not saved');\r\n      return;\r\n    }\r\n\r\n    DataObjectsStorage_log.log('[StoreDataObjects - saveData] - ', isReporter, type, resource, attribute, value);\r\n\r\n    if (!storeDataObject[type][resource].hasOwnProperty('data')) {\r\n      storeDataObject[type][resource].data = {};\r\n    }\r\n\r\n    if (attribute) {\r\n      let data;\r\n      if (typeof value === 'object') data = deepClone(value);\r\n      else data = value;\r\n\r\n      utils_assign(storeDataObject[type][resource].data, attribute, data);\r\n    } else {\r\n      storeDataObject[type][resource].data = deepClone(value) || {};\r\n    }\r\n\r\n    this._storeDataObject = storeDataObject;\r\n    let db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\r\n    let storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager;\r\n    //    let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\r\n\r\n    if (storeDataObject[type][resource].backup) {// should we remove childrens?\r\n      return storage.set(db, storeDataObject[type][resource]);\r\n    } else {\r\n      return storage.set('syncherManager:ObjectURLs', 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\r\n    }\r\n\r\n  }\r\n\r\n  saveChildrens(isReporter, resource, attribute, value) {\r\n    let storeDataObject = this._storeDataObject;\r\n    let type = this._getTypeOfObject(isReporter);\r\n\r\n    if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\r\n      DataObjectsStorage_log.log('[StoreDataObjects - save childrens] - not saved');\r\n      return;\r\n    }\r\n\r\n    if (!storeDataObject[type][resource].hasOwnProperty('childrens')) {\r\n      storeDataObject[type][resource].childrenObjects = {};\r\n    }\r\n\r\n    /*    if (!storeDataObject[type][resource].childrenObjects.hasOwnProperty('resources')) {\r\n          storeDataObject[type][resource].childrenObjects.resources = {};\r\n        }*/\r\n\r\n    if (attribute) {\r\n      utils_assign(storeDataObject[type][resource].childrenObjects, attribute, deepClone(value));\r\n    } else {\r\n      storeDataObject[type][resource].childrenObjects = deepClone(value) || {};\r\n    }\r\n\r\n    this._storeDataObject = storeDataObject;\r\n    let db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\r\n    let storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager;\r\n    /*   let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\r\n       let data = storeDataObject[type][resource].backup ? storeDataObject[type][resource] : this._filterRemotes(storeDataObject);\r\n       storage.set(db, 1, data, table).then(() => {\r\n         return storeDataObject[type][resource];\r\n       });*/\r\n\r\n    if (storeDataObject[type][resource].backup) {\r\n\r\n      return storage.set(attribute, value).then(() => {\r\n        // backup child object if reporter is local\r\n        if (this._runtimeUrl === value.value.runtime)\r\n          storage.backup(attribute);\r\n\r\n      });\r\n    } else {\r\n      return storage.set('syncherManager:ObjectURLs', 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * @description should save and update the current dataObject information\r\n   *\r\n   * @param {Boolean} isReporter - the object to be saved is a reporter\r\n   * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\r\n   * @param {String} attribute - attribute inside the data which will be saved\r\n   * @param {any} data - value will be saved inside the attribute;\r\n   */\r\n  update(isReporter, resource, attribute, value, updateRuntimeStatus) {\r\n\r\n    let storeDataObject = this._storeDataObject;\r\n    let type = this._getTypeOfObject(isReporter);\r\n\r\n    if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\r\n      DataObjectsStorage_log.log('[StoreDataObjects - update] - not saved');\r\n      return;\r\n    }\r\n\r\n    DataObjectsStorage_log.log('[StoreDataObjects - update] - ', isReporter, type, resource, attribute, value);\r\n\r\n    if (storeDataObject[type] && storeDataObject[type][resource] && resource && attribute && value) {\r\n\r\n      if (attribute === 'subscriptions' || attribute === 'subscriberUsers') {\r\n        let update = true;\r\n\r\n        if (attribute === 'subscriptions') {\r\n          update = !this._isOwner(storeDataObject[type][resource], value);\r\n        }\r\n\r\n        if (update) this._updateToArray(storeDataObject[type], resource, attribute, value);\r\n\r\n      } else {\r\n        storeDataObject[type][resource][attribute] = value;\r\n      }\r\n\r\n      this._storeDataObject = storeDataObject;\r\n      let db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\r\n      let storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager;\r\n      /*      let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\r\n            let data = storeDataObject[type][resource].backup ? storeDataObject[type][resource] : this._filterRemotes(storeDataObject);\r\n            storage.set(db, 1, data, table, updateRuntimeStatus).then(() => {\r\n              return storeDataObject[type][resource];\r\n            });*/\r\n\r\n      if (storeDataObject[type][resource].backup) {//just update the attribute that is changing\r\n        return storage.set(db, storeDataObject[type][resource]);\r\n      } else {\r\n        return storage.set('syncherManager:ObjectURLs', 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description should delete stored information from the dataObject\r\n   *\r\n   * @param {Boolean} isReporter - the object to be saved is a reporter\r\n   * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\r\n   * @param {String} attribute - attribute inside the data which will be saved\r\n   * @param {any} data - value will be saved inside the attribute;\r\n   */\r\n  delete(isReporter, resource, attribute, value) {\r\n\r\n    let storeDataObject = this._storeDataObject;\r\n    let type = this._getTypeOfObject(isReporter);\r\n\r\n    if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\r\n      DataObjectsStorage_log.log('[StoreDataObjects - delete] - not saved');\r\n      return;\r\n    }\r\n\r\n    if (storeDataObject[type] && storeDataObject[type][resource] && resource && attribute && value) {\r\n\r\n      if (attribute === 'subscriptions' || attribute === 'subscriberUsers') {\r\n        this._removeFromArray(storeDataObject[type], resource, attribute, value);\r\n      } else {\r\n        delete storeDataObject[type][resource][attribute];\r\n      }\r\n\r\n      this._storeDataObject = storeDataObject;\r\n      let db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\r\n      let storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager;\r\n      /*     let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\r\n           let data = storeDataObject[type][resource].backup ? storeDataObject[type][resource] : this._filterRemotes(storeDataObject);\r\n           storage.set(db, 1, data, table);\r\n     \r\n           return storeDataObject[type][resource];*/\r\n\r\n      if (storeDataObject[type][resource].backup) {\r\n        return storage.set(db, storeDataObject[type][resource]);\r\n      } else {\r\n        return storage.set(db, 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Data Object from the storage\r\n   */\r\n\r\n  deleteResource(resource) {\r\n\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (resource) {\r\n        //        return this.getAll().then((storedDataObjects) => {\r\n        DataObjectsStorage_log.log('[DataObjectStorage.deleteResource] deleting: ', resource);\r\n\r\n        //          let this._storeDataObject = Object.assign(this._storeDataObject || {});\r\n\r\n        let backup;\r\n        let db;\r\n        let storage;\r\n\r\n        if (_this._storeDataObject.hasOwnProperty('observers') && _this._storeDataObject.observers.hasOwnProperty(resource)) {\r\n          backup = (_this._storeDataObject.observers[resource].backup) ? _this._storeDataObject.observers[resource].backup : false;\r\n\r\n          db = backup ? _this._storeDataObject.observers[resource].url : 'syncherManager:ObjectURLs';\r\n          storage = backup ? _this._remotes[db] : _this._storageManager;\r\n          delete _this._storeDataObject.observers[resource];\r\n        }\r\n\r\n        if (_this._storeDataObject.hasOwnProperty('reporters') && _this._storeDataObject.reporters.hasOwnProperty(resource)) {\r\n          backup = (_this._storeDataObject.reporters[resource].backup) ? _this._storeDataObject.reporters[resource].backup : false;\r\n\r\n          db = backup ? _this._storeDataObject.reporters[resource].url : 'syncherManager:ObjectURLs';\r\n          storage = backup ? _this._remotes[db] : _this._storageManager;\r\n          delete _this._storeDataObject.reporters[resource];\r\n        }\r\n\r\n        //          this._storeDataObject = this._storeDataObject;\r\n\r\n        if (backup && storage) {\r\n          storage.delete().then(() => {\r\n            DataObjectsStorage_log.log('[DataObjectStorage.deleteResource] deleting sync db ', resource);\r\n            delete _this._remotes[db];\r\n            delete _this._factory.databases['do-' + db.split('/')[3]];\r\n            delete _this._factory.storeManager['do-' + db.split('/')[3]];\r\n            _this._storageManager.delete(resource, null, 'remotes');\r\n          });\r\n        } else {\r\n          delete _this._factory.databases[db];\r\n          delete _this._factory.storeManager[db];\r\n          storage.set(db, 1, this._filterRemotes(_this._storeDataObject));\r\n        }\r\n\r\n\r\n        return resolve();\r\n\r\n        //        });\r\n\r\n      } else {\r\n        reject(new Error('[StoreDataObjects] - Can\\'t delete this ' + resource));\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /*  getAll() {\r\n  \r\n      let _this = this;\r\n  \r\n      return new Promise((resolve, reject) => {\r\n        _this._storeDataObject = this._storageManager.get('syncherManager:ObjectURLs').then((objects) => {\r\n          _this._storeDataObject = objects;\r\n          _this.loadRemote(true).then((storedObjects) => {\r\n            resolve(_this._storeDataObject);\r\n          });\r\n  \r\n        });\r\n  \r\n      });\r\n      //    return this._storageManager.get('syncherManager:ObjectURLs');\r\n    }*/\r\n\r\n  // To sync local storage with remote storage server\r\n\r\n  sync(resource) {\r\n    let _this = this;\r\n\r\n    console.log('[DataObjectStorage._sync] resource: ', resource);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (_this._remotes[resource]) {\r\n        _this._remotes[resource].get(resource, 'isReporter').then((isReporter) => {\r\n          _this._remotes[resource].get(resource, 'subscriptions').then((subscriptions) => {\r\n            _this._remotes[resource].sync().then(() => {\r\n              _this._remotes[resource].get().then((doc) => {\r\n                //          this._remotes[resource].get().then((dataObject)=>{\r\n                DataObjectsStorage_log.info('[DataObjectStorage.sync] returning synched DO: ', doc);\r\n  \r\n                //          if (!isReporter) _this._remotes[resource].disconnect();\r\n  \r\n                // to ensure local data object as the right value for isReporter\r\n                // remote data object should always have isReporter = true.\r\n                //doc[0].isReporter = isReporter;\r\n                let dO = _this._remoteDoc2dataObject(doc);\r\n  \r\n                dO.isReporter = isReporter;\r\n                dO.subscriptions = subscriptions;\r\n  \r\n                if (_this._storeDataObject.hasOwnProperty('observers') && _this._storeDataObject.observers.hasOwnProperty(resource)) {\r\n                  _this._storeDataObject.observers[resource] = dO;\r\n                }\r\n  \r\n                if (_this._storeDataObject.hasOwnProperty('reporters') && _this._storeDataObject.reporters.hasOwnProperty(resource)) {\r\n                  _this._storeDataObject.reporters[resource] = dO;\r\n                }\r\n                _this._remotes[resource].set(resource, dO).then(() => {\r\n                  resolve(dO);\r\n                });\r\n  \r\n              }, (error) => {\r\n                DataObjectsStorage_log.error('[DataObjectStorage.sync] Error ', error);\r\n                reject(error)\r\n              });\r\n            }, (error) => {\r\n              DataObjectsStorage_log.error('[DataObjectStorage.sync] Error ', error);\r\n              reject(error)\r\n            });\r\n  \r\n          });\r\n        });\r\n      } else {\r\n        let warning = resource + ' not found in local storage.'\r\n        DataObjectsStorage_log.warn('[DataObjectStorage.sync] warning ', warning);\r\n        reject(warning);\r\n\r\n      }\r\n\r\n  \r\n\r\n\r\n    });\r\n  }\r\n\r\n  _remoteDoc2dataObject(doc) {\r\n    if (doc.length > 1) {//has childrens\r\n      let dataObject = doc[doc.length - 1];\r\n\r\n      dataObject.childrenObjects = {};\r\n\r\n      let i;\r\n\r\n      for (i = 0; i < doc.length - 1; i++) {\r\n        dataObject.childrenObjects[doc[i]._id] = doc[i];\r\n      }\r\n\r\n      return dataObject;\r\n\r\n    } else return (doc[0]);\r\n\r\n  }\r\n\r\n  stopSync(resource) {\r\n\r\n    if (this._remotes[resource]) this._remotes[resource].disconnect();\r\n\r\n  }\r\n\r\n  /**\r\n* @description should look for a specific dataObjectURL\r\n*\r\n* @param {DataObjectURL} resource - the dataObjectURL will be searched\r\n*\r\n* @returns Promise<Object> object with the dataObject information;\r\n*/\r\n  getDataObject(resource) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      /*      this._remotes[resource].get().then((dataObject)=> {\r\n              return resolve(dataObject);\r\n            } , () => {\r\n              this._storageManager.get('syncherManager:ObjectURLs').then((storedDataObject) => {*/\r\n\r\n      let storedDataObject = this._storeDataObject;\r\n\r\n      let observers = storedDataObject.hasOwnProperty('observers') ? storedDataObject.observers : {};\r\n      let reporters = storedDataObject.hasOwnProperty('reporters') ? storedDataObject.reporters : {};\r\n\r\n      let currentReporter = Object.keys(reporters).find((value) => { return value === resource; });\r\n      let currentObserver = Object.keys(observers).find((value) => { return value === resource; });\r\n      let dataObject;\r\n\r\n      if (currentObserver) { dataObject = storedDataObject.observers[currentObserver]; }\r\n      if (currentReporter) { dataObject = storedDataObject.reporters[currentReporter]; }\r\n\r\n      DataObjectsStorage_log.info('[StoreDataObjects - getDataObject] - for observer: ', currentObserver);\r\n      DataObjectsStorage_log.info('[StoreDataObjects - getDataObject] - for reporters: ', currentReporter);\r\n\r\n      DataObjectsStorage_log.info('[StoreDataObjects - getDataObject] - resolve: ', dataObject);\r\n      return dataObject ? resolve(dataObject) : reject('No dataObject was found');\r\n\r\n      //        });\r\n\r\n      //      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * @description should get the dataObject information by the message\r\n   *\r\n   * @param {Object} msg - message would be analised to get the current dataObject information\r\n   * @param {Boolean} isReporter - the object to be saved is a reporter\r\n   *\r\n   * @returns Promise<object> should retun an object with the dataObject or null\r\n   */\r\n  getResourcesByCriteria(msg, isReporter) {\r\n\r\n    return new Promise((resolve) => {\r\n\r\n      let type = this._getTypeOfObject(isReporter);\r\n\r\n      //      this.getAll(isReporter).then((storedDataObjects) => {\r\n      let storedDataObjects = this._storeDataObject;\r\n\r\n      if (!storedDataObjects) {\r\n        DataObjectsStorage_log.log('[DataObjectsStorage.getResourcesByCriteria] don\\'t have stored data objects');\r\n        return resolve(null);\r\n      }\r\n\r\n      if (msg.body && msg.body.hasOwnProperty('resume') && !msg.body.resume) {\r\n        return resolve(null);\r\n      }\r\n\r\n      // check if the message have other criteria\r\n      // if not search for on the 'from' of the message.\r\n      let result = [];\r\n      let hasSubscription = this._hasSubscription(storedDataObjects[type], msg.from);\r\n      let isOwner = this._searchOwner(storedDataObjects[type], msg.from);\r\n      let isToProtoStubResume = this._checkProtostubResume(storedDataObjects, msg);\r\n      DataObjectsStorage_log.log('[StoredDataObjects - getResourcesByCriteria]:', storedDataObjects, msg, hasSubscription, isOwner);\r\n      if (msg.hasOwnProperty('from') && hasSubscription || isOwner || isToProtoStubResume) {\r\n        let resource;\r\n\r\n        if (isOwner) {\r\n          resource = this._getResourcesByOwner(storedDataObjects[type], msg.from);\r\n        } else {\r\n          resource = this._getResourcesBySubscription(storedDataObjects[type], msg.from);\r\n        }\r\n\r\n        let identityFoundData = [];\r\n        if (msg.body && msg.body.identity) identityFoundData = this._getResourcesByIdentity(storedDataObjects[type], msg.body.identity);\r\n\r\n        //TODO: remove schema since metadata already includes the schema?\r\n\r\n        let schemaFoundData = [];\r\n        if (msg.body && msg.body.schema) schemaFoundData = this._getResourcesBySchema(storedDataObjects[type], msg.body.schema);\r\n\r\n        let metadataFound = [];\r\n        if (msg.body && msg.body.value) {\r\n          let metadata = msg.body.value;\r\n          delete metadata.data;\r\n          metadataFound = this._getResourcesByMetadata(storedDataObjects[type], metadata);\r\n        }\r\n\r\n        let dataFound = [];\r\n        if (msg.body && msg.body.value && msg.body.value.data) dataFound = this._getResourcesByData(storedDataObjects[type], msg.body.value.data);\r\n\r\n        // you can pass as arrays as you want.. it will be merged in on place\r\n        // removed duplicates;\r\n        result = this._intersection(resource, identityFoundData, schemaFoundData, dataFound, metadataFound);\r\n\r\n        if (result.length == 0 && isToProtoStubResume && type == 'observers' && msg.from.split('protostub').length > 0) {\r\n          let storedObservers = storedDataObjects[type];\r\n          let fromDomain = divideURL(msg.from).domain;\r\n          if (storedObservers) {\r\n            Object.keys(storedObservers).filter((objectURL) => {\r\n              let subscriptions = storedObservers[objectURL].subscriptions;\r\n              let hasSubscription = false;\r\n              subscriptions.forEach(function (subscription) {\r\n                let subscriptionDomain = divideURL(subscription).domain;\r\n                if (subscriptionDomain == fromDomain) {\r\n                  result.push(objectURL);\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n        }\r\n      } else {\r\n        return resolve(null);\r\n      }\r\n\r\n      let init = {};\r\n      result.forEach((key) => {\r\n        let currentIsReporter = storedDataObjects[type][key];\r\n        init[key] = currentIsReporter;\r\n        return init;\r\n      });\r\n\r\n      DataObjectsStorage_log.log('[Store Data Objects] - ', init);\r\n\r\n      resolve(init);\r\n    });\r\n\r\n    //    });\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _getResourcesByIdentity(storedData, userURL) {\r\n    if (!storedData) return [];\r\n\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      return storedData[objectURL].subscriberUsers.filter((current) => {\r\n        return current === userURL;\r\n      }).length;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _getResourcesByOwner(storedData, owner) {\r\n    if (!storedData) return [];\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      return storedData[objectURL].reporter === owner;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _getResourcesBySubscription(storedData, subscription) {\r\n    if (!storedData) return [];\r\n\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      return storedData[objectURL].subscriptions.filter((current) => {\r\n        return current === subscription;\r\n      }).length;\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _getResourcesBySchema(storedData, schema) {\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      let currentObject = storedData[objectURL];\r\n      return Object.keys(currentObject).filter((key) => {\r\n        return key === 'schema' && currentObject[key] === schema;\r\n      }).length;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _getResourcesByMetadata(storedData, metadata) {\r\n    if (!metadata) return [];\r\n\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      let currentObject = storedData[objectURL];\r\n      return Object.keys(currentObject).filter((key) => {\r\n        // search on storeDataObjects for specific key provided from data;\r\n        return Object.keys(metadata).filter(searchFor => {\r\n          return key === searchFor && currentObject[key] === metadata[searchFor];\r\n        }).length;\r\n\r\n      }).length;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _getResourcesByData(storedData, data) {\r\n    if (!data) return [];\r\n\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      let currentObject = storedData[objectURL].hasOwnProperty('data') ? storedData[objectURL].data : {};\r\n      return Object.keys(currentObject).filter((key) => {\r\n        // search on storeDataObjects for specific key provided from data;\r\n        return Object.keys(data).filter(searchFor => {\r\n          return key === searchFor && currentObject[key] === data[searchFor];\r\n        }).length;\r\n\r\n      }).length;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _hasSubscription(storedData, subscription) {\r\n    if (!storedData) return false;\r\n\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      return storedData[objectURL].subscriptions.filter((current) => {\r\n        return current === subscription;\r\n      }).length;\r\n    }).length > 0 ? true : false;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _searchOwner(storedData, from) {\r\n    if (!storedData) return false;\r\n\r\n    return Object.keys(storedData).filter((objectURL) => {\r\n      return storedData[objectURL].reporter === from;\r\n    }).length > 0 ? true : false;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _checkProtostubResume(storedDataObjects, msg) {\r\n\r\n    //return msg.from.includes('protostub');\r\n\r\n        if (!storedDataObjects) return false;\r\n    \r\n        if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('value') && msg.body.value.hasOwnProperty('reporter')) {\r\n          let reporter = msg.body.value.reporter;\r\n          if (storedDataObjects.hasOwnProperty('reporters')) {\r\n            let reportersStored = storedDataObjects.reporters;\r\n            return Object.keys(reportersStored).filter((objectURL) => {\r\n              return reportersStored[objectURL].reporter === reporter;\r\n            }).length > 0 ? true : false;\r\n          } else {\r\n            return false;\r\n          }\r\n        } else if (storedDataObjects.hasOwnProperty('observers')) {\r\n          let storedObservers = storedDataObjects.observers;\r\n          let fromDomain = divideURL(msg.from).domain;\r\n    \r\n          return Object.keys(storedObservers).filter((objectURL) => {\r\n            let subscriptions = storedObservers[objectURL].subscriptions;\r\n            let hasSubscription = false;\r\n            subscriptions.forEach(function (subscription) {\r\n              let subscriptionDomain = divideURL(subscription).domain;\r\n              if (subscriptionDomain == fromDomain) {\r\n                hasSubscription = true;\r\n              }\r\n            });\r\n            if (hasSubscription) {\r\n              return true;\r\n            }\r\n          }).length > 0 ? true : false;\r\n        }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _isOwner(value, url) {\r\n    if (!value) return false;\r\n    return value.reporter === url ? true : false;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _intersection() {\r\n    let args = Array.from(arguments);\r\n\r\n    let result = args.reduce((first, second) => {\r\n      return first.concat(second);\r\n    }).filter((value, index, self) => {\r\n      return self.indexOf(value) === index;\r\n    });\r\n    DataObjectsStorage_log.log('DataObjectsStorage._intersection] Result an unique array of strings: ', result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _updateToArray(storeDataObject, resource, key, value) {\r\n    DataObjectsStorage_log.log('[DataObjectsStorage] - _updateToArray: ', storeDataObject, resource, key, value);\r\n    if (storeDataObject[resource][key].indexOf(value) === -1) storeDataObject[resource][key].push(value);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _removeFromArray(storeDataObject, resource, key, value) {\r\n    let indexOfValue = storeDataObject[resource][key].indexOf(value);\r\n    if (indexOfValue === -1) storeDataObject[resource][key].splice(indexOfValue, 1);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _hasValue(obj, key, value) {\r\n    return obj.hasOwnProperty(key) && obj[key] === value;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @todo documentation\r\n   */\r\n  _getTypeOfObject(isReporter) {\r\n    return isReporter ? 'reporters' : 'observers';\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var store_objects_DataObjectsStorage = (DataObjectsStorage_DataObjectsStorage);\r\n\n// CONCATENATED MODULE: ./src/utils/PromiseQueue.js\nclass PromiseQueue {\r\n\r\n  // TODO: Improve this Queuing\r\n  constructor(concurrency) {\r\n    this.flushing = false;\r\n    this.Promise = Promise;\r\n    this.concurrency = (typeof concurrency !== 'number') ? 1 : concurrency;\r\n    this.promises = [];\r\n    this.queue = [];\r\n    this.isProcessing = false;\r\n  }\r\n\r\n  done(cb) {\r\n    this.callback = cb;\r\n  }\r\n\r\n  add(promise) {\r\n    this.queue.push(promise);\r\n\r\n    if (!this.isProcessing) {\r\n      return this.queue.reduce((promiseChain, currentTask) => {\r\n        return promiseChain.then(chainResults => currentTask.then(currentResult => [...chainResults, currentResult]));\r\n      }, Promise.resolve([])).then(arrayOfResults => {\r\n        // Do something with all results\r\n        this.isProcessing = false;\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var utils_PromiseQueue = (PromiseQueue);\r\n\r\n\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResourcesStorage.js\n// Log System\r\n\r\nlet HypertyResourcesStorage_log = loglevel[\"getLogger\"]('HypertyResourcesStorage');\r\n\r\n\r\n\r\n\r\n\r\nclass HypertyResourcesStorage_HypertyResourcesStorage {\r\n\r\n  constructor(runtimeURL, bus, storageManager, hypertyResources) {\r\n\r\n    if (!storageManager) throw new Error('[HypertyResourcesStorage constructor] mandatory storageManager parameter missing');\r\n    if (!runtimeURL) throw new Error('[HypertyResourcesStorage constructor] mandatory runtimeURL parameter missing');\r\n    if (!bus) throw new Error('[HypertyResourcesStorage constructor] mandatory bus parameter missing');\r\n\r\n    let _this = this;\r\n\r\n    _this._bus = bus;\r\n\r\n    _this._storageLimit = 0.9; // the save storageLimit;\r\n\r\n    _this._url = runtimeURL + '/storage';\r\n\r\n    _this._storageManager = storageManager;\r\n\r\n    _this.promiseQueue = new utils_PromiseQueue();\r\n\r\n    _this._hypertyResources = hypertyResources;\r\n\r\n    bus.addListener(_this._url, (msg) => {\r\n      HypertyResourcesStorage_log.info('[HypertyResourcesStorage] Message RCV: ', msg);\r\n      switch (msg.type) {\r\n        case 'create': _this._onCreate(msg); break;\r\n        case 'read': _this._onRead(msg); break;\r\n        case 'delete': _this._onDelete(msg); break;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * check the available storage quota\r\n   *\r\n   * @memberof HypertyResourcesStorage\r\n   */\r\n  checkStorageQuota() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (this._availableQuota && this._usage) {\r\n        return resolve(availableSpace(this._usage, this._availableQuota));\r\n      }\r\n\r\n      if (navigator) {\r\n\r\n        navigator.storage.estimate().then((estimate) => {\r\n          this._availableQuota = estimate.quota;\r\n          this._usage = estimate.usage;\r\n          resolve(availableSpace(this._usage, this._availableQuota));\r\n\r\n        }).catch((reason) => {\r\n          HypertyResourcesStorage_log.error('[HypertyResourcesStorage] CheckStorageQuota error: ', reason);\r\n          reject(reason);\r\n        });\r\n\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * @description should save an HypertyResource contained in the body of a create message request;\r\n   *\r\n   * @param {string} message - message containing the hyperty resource to be stored\r\n   */\r\n\r\n  _onCreate(message) {\r\n\r\n    let _this = this;\r\n\r\n    if (!message.body || !message.body.value) throw new Error('[HypertyResourcesStorage._onCreate] mandatory message body value missing: ', message);\r\n\r\n    let content = message.body.value;\r\n    let contentURL = content.contentURL;\r\n    let resourceURL = '';\r\n\r\n    if (!contentURL) {\r\n\r\n      contentURL = [];\r\n      resourceURL = _this._url + '/' + generateGUID();\r\n\r\n    } else {\r\n      const currentURL = contentURL[0];\r\n      const resource = currentURL.substr(currentURL.lastIndexOf('/') + 1);\r\n      resourceURL = _this._url + '/' + resource;\r\n    }\r\n\r\n    if (!_this._hypertyResources.hasOwnProperty(resourceURL)) {\r\n\r\n      contentURL.push(resourceURL);\r\n      content.contentURL = contentURL;\r\n\r\n    }\r\n\r\n    this._hypertyResources[resourceURL] = content;\r\n\r\n    this.promiseQueue.add(this._toSave(resourceURL, message, content));\r\n\r\n  }\r\n\r\n  _toSave(resourceURL, message, content) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      const error = (reason) => {\r\n        let response = {\r\n          from: message.to,\r\n          to: message.from,\r\n          id: message.id,\r\n          type: 'response',\r\n          body: { value: resourceURL, code: 500, description: reason }\r\n        };\r\n\r\n        this._bus.postMessage(response);\r\n\r\n        return reject(reason);\r\n      };\r\n\r\n      this.checkStorageQuota().then((result) => {\r\n\r\n        if (content.size > result.quota) {\r\n          const msg = 'The storage do not have space to store that resource';\r\n          error(msg);\r\n          throw Error(msg);\r\n        }\r\n\r\n        const spaceAvailable = result.quota;\r\n        const allocated = result.usage + content.size;\r\n\r\n        if (result.percent >= this._storageLimit || allocated > spaceAvailable) {\r\n          return this._getOlderResources(content.size);\r\n        } else {\r\n          return true;\r\n        }\r\n\r\n      }).then(() => {\r\n        return this._storageManager.set(resourceURL, 1, content);\r\n      }).then(() => {\r\n\r\n        let response = {\r\n          from: message.to,\r\n          to: message.from,\r\n          id: message.id,\r\n          type: 'response',\r\n          body: { value: resourceURL, code: 200 }\r\n        };\r\n\r\n        this._bus.postMessage(response);\r\n\r\n        HypertyResourcesStorage_log.log('Success');\r\n\r\n        return resolve();\r\n\r\n      }).catch(error);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _getOlderResources(size) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this._storageManager.get().then((result) => {\r\n\r\n        const resources = Object.keys(result);\r\n\r\n        let total = 0;\r\n        const reduced = resources.sort((a, b) => result[a].created < result[b].created)\r\n          .reduce((previousResource, currentResource) => {\r\n            const current = this._hypertyResources[currentResource];\r\n\r\n            HypertyResourcesStorage_log.log('[HypertyResourcesStorage] _getOlderResources: ', total, size, currentResource, this._availableQuota);\r\n\r\n            if (total <= size) {\r\n              total += current.size;\r\n              previousResource.push(currentResource);\r\n            }\r\n\r\n            return previousResource;\r\n\r\n          }, []);\r\n\r\n        const deleting = reduced.map(key => this._storageManager.delete(key));\r\n\r\n        Promise.all(deleting).then(() => {\r\n          resolve(true);\r\n        }).catch((reason) => {\r\n          reject(reason);\r\n        });\r\n\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * @description should return an HypertyResource stored in the Storage Manager identified by the content url contained in the body of a read message request;\r\n   *\r\n   * @param {string} message - message containing the hyperty resource to be stored\r\n   */\r\n\r\n  _onRead(message) {\r\n\r\n    let _this = this;\r\n\r\n    if (!message.body || !message.body.resource) throw new Error('[HypertyResourcesStorage._onRead] mandatory message body resource missing: ', message);\r\n\r\n    let contentUrl = message.body.resource;\r\n\r\n    let response = {\r\n      from: message.to,\r\n      to: message.from,\r\n      id: message.id,\r\n      type: 'response',\r\n      body: {}\r\n    };\r\n\r\n    // let content = _this._hypertyResources[contentUrl];\r\n\r\n    HypertyResourcesStorage_log.info('[HypertyResourcesStorage._onRead] get resourceURL:', contentUrl);\r\n\r\n    this._storageManager.get('resourceURL', contentUrl).then((content) => {\r\n\r\n      HypertyResourcesStorage_log.info('[HypertyResourcesStorage._onRead] found content:', content);\r\n\r\n      if (content) {\r\n\r\n        if (content.resourceType === 'file') {\r\n          _this._onReadFile(response, content);\r\n        } else {\r\n          response.body.code = 200;\r\n          response.body.p2p = true;\r\n          response.body.value = content;\r\n          _this._bus.postMessage(response);\r\n        }\r\n\r\n      } else {\r\n        response.body.code = 404;\r\n        response.body.desc = 'Content Not Found for ' + contentUrl;\r\n        _this._bus.postMessage(response);\r\n\r\n      }\r\n\r\n    });\r\n\r\n    //response.body.code = 404;\r\n\r\n    //_this._hypertyResources[contentUrl] = message.body.value;\r\n\r\n\r\n  }\r\n\r\n  _onReadFile(response, resource) {\r\n    let _this = this;\r\n\r\n    let reader = new FileReader();\r\n\r\n    reader.onload = function(theFile) {\r\n\r\n      HypertyResourcesStorage_log.info('[FileHypertyResource.init] file loaded ', theFile);\r\n\r\n      response.body.code = 200;\r\n      response.body.p2p = true;\r\n      response.body.value = deepClone(resource);\r\n      response.body.value.content = theFile.target.result;\r\n      _this._bus.postMessage(response);\r\n    };\r\n\r\n    if (resource.mimetype.includes('text/')) {\r\n      reader.readAsText(resource.content);\r\n    } else {\r\n      const current = resource.content;\r\n\r\n      let blob;\r\n      if (Array.isArray(current)) {\r\n        blob = new Blob(current, { type: resource.mimetype});\r\n      } else {\r\n        blob = new Blob([current], { type: resource.mimetype});\r\n      }\r\n\r\n      reader.readAsArrayBuffer(blob);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description should delete an HypertyResource from the storage;\r\n   *\r\n   * @param {string} message - message containing the content URL of the hyperty resource to be deleted\r\n   */\r\n\r\n  _onDelete(message) {\r\n\r\n    let _this = this;\r\n\r\n    if (!message.body) throw new Error('[HypertyResourcesStorage._onDelete] mandatory message body missing: ', message);\r\n\r\n    if (message.body.resource) {\r\n      delete _this._hypertyResources[message.body.resource];\r\n    } else if (message.body.resources) {\r\n      message.body.resources.forEach((resource) => {\r\n        delete _this._hypertyResources[resource];\r\n      });\r\n    } else {\r\n      throw new Error('[HypertyResourcesStorage._onDelete] mandatory resource missing: ', message);\r\n    }\r\n\r\n    _this._storageManager.delete('resourceURL', message.body.resource).then(() => {\r\n      let response = {\r\n        from: message.to,\r\n        to: message.from,\r\n        id: message.id,\r\n        type: 'response',\r\n        body: { code: 200 }\r\n      };\r\n\r\n      _this._bus.postMessage(response);\r\n    }).catch((reason) => {\r\n      let response = {\r\n        from: message.to,\r\n        to: message.from,\r\n        id: message.id,\r\n        type: 'response',\r\n        body: { code: 400, description: reason }\r\n      };\r\n\r\n      _this._bus.postMessage(response);\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var hyperty_resource_HypertyResourcesStorage = (HypertyResourcesStorage_HypertyResourcesStorage);\r\n\n// CONCATENATED MODULE: ./src/syncher/Subscription.js\n// Log System\r\n\r\nlet Subscription_log = loglevel[\"getLogger\"]('SynSubscription');\r\n\r\nclass Subscription {\r\n\r\n  constructor(bus, owner, url, isReporter) {\r\n    let _this = this;\r\n    let childBaseURL = url + '/children/';\r\n    let changeURL = url + '/changes';\r\n\r\n    //process delete message\r\n    _this._deleteListener = bus.addListener(changeURL, (msg) => {\r\n      if (msg.type === 'delete') {\r\n        Subscription_log.log('Subscription-DELETE: ', msg);\r\n\r\n        //FLOW-OUT: message sent to all subscribers\r\n        let deleteMessageToHyperty = {\r\n          type: 'delete', from: msg.from, to: owner,\r\n          body: { identity: msg.body.identity, resource: url }\r\n        };\r\n\r\n        //send delete to hyperty\r\n        bus.postMessage(deleteMessageToHyperty, (reply) => {\r\n          Subscription_log.log('Subscription-DELETE-REPLY: ', reply);\r\n          if (reply.body.code === 200) {\r\n            _this._releaseListeners();\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    //add change publish address or forward\r\n    if (isReporter) {\r\n      _this._changeListener = bus.addPublish(changeURL);\r\n    } else {\r\n      _this._changeListener = bus.addForward(changeURL, owner);\r\n    }\r\n\r\n    _this._childrenListeners = [];\r\n//    log.log('[Subscription] - childID', childrens);\r\n//    childrens.forEach((child) => {\r\n//    let childId = childBaseURL + child;\r\n\r\n//      log.log('[Subscription] - childID', childBaseURL);\r\n\r\n      //add children publish address\r\n      let childrenForward = bus.addPublish(childBaseURL);\r\n      _this._childrenListeners.push(childrenForward);\r\n\r\n      //add self forward if an observer\r\n      if (!isReporter) {\r\n        let selfForward = bus.addForward(childBaseURL, owner);\r\n        _this._childrenListeners.push(selfForward);\r\n      }\r\n//    });\r\n  }\r\n\r\n  _releaseListeners() {\r\n    let _this = this;\r\n\r\n    _this._deleteListener.remove();\r\n\r\n    _this._changeListener.remove();\r\n\r\n    _this._childrenListeners.forEach((forward) => {\r\n      forward.remove();\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_Subscription = (Subscription);\r\n\n// CONCATENATED MODULE: ./src/syncher/ReporterObject.js\n// Log System\r\n\r\nlet ReporterObject_log = loglevel[\"getLogger\"]('ReporterObject');\r\n\r\n\r\n\r\n\r\n\r\nclass ReporterObject_ReporterObject {\r\n\r\n  constructor(parent, owner, url, childrens, offline) {\r\n    let _this = this;\r\n\r\n    _this._parent = parent;\r\n    _this._owner = owner;\r\n    _this._url = url;\r\n\r\n    _this._bus = parent._bus;\r\n\r\n    _this._domain = divideURL(url).domain;\r\n    _this._objSubscriptorURL = _this._url + '/subscription';\r\n\r\n    _this._subscriptions = {};\r\n    _this._childrens = childrens;\r\n    _this._childrenListeners = [];\r\n\r\n    _this._forwards = {};\r\n\r\n    _this._isToSaveData = false;\r\n\r\n    _this._allocateListeners();\r\n\r\n    _this._offline = offline ? offline : false;\r\n  }\r\n\r\n  get offline(){\r\n    return this._offline;\r\n  }\r\n\r\n  _allocateListeners() {\r\n    let _this = this;\r\n\r\n    //add subscription listener...\r\n    _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, (msg) => {\r\n      ReporterObject_log.info('[SyncherManager.ReporterObject received ]', msg);\r\n      switch (msg.type) {\r\n        case 'subscribe': _this._onRemoteSubscribe(msg); break;\r\n        case 'unsubscribe': _this._onRemoteUnSubscribe(msg); break;\r\n        case 'response': _this._onRemoteResponse(msg); break;\r\n        case 'forward': _this._onForwardedRemoteSubscribe(msg); break;\r\n      }\r\n    });\r\n\r\n    let changeURL = _this._url + '/changes';\r\n    _this._changeListener = _this._bus.addListener(changeURL, (msg) => {\r\n\r\n      ReporterObject_log.info('[SyncherManager.ReporterObject ] SyncherManager-' + changeURL + '-RCV: ', msg);\r\n\r\n      //do not save changes to backupRevision to avoid infinite loops\r\n      if (this._isToSaveData && msg.body.attribute ) {\r\n        let updateRuntimeStatus = msg.body.attribute !== 'backupRevision' ? true : false;\r\n        ReporterObject_log.log('[SyncherManager.ReporterObject ] SyncherManager - save data: ', msg);\r\n        _this._parent._dataObjectsStorage.update(true, _this._url, 'version', msg.body.version, updateRuntimeStatus);\r\n        _this._parent._dataObjectsStorage.update(true, _this._url, 'lastModified', msg.body.lastModified, updateRuntimeStatus);\r\n        _this._parent._dataObjectsStorage.saveData(true, _this._url, msg.body.attribute, msg.body.value, updateRuntimeStatus);\r\n      }\r\n    });\r\n  }\r\n\r\n  set isToSaveData(value) {\r\n    this._isToSaveData = value;\r\n  }\r\n\r\n  // To handle subscriptions sent while the reporter was offline ie forwarded by a Offline Subscription Manager service\r\n\r\n  _onForwardedRemoteSubscribe(msg) {\r\n    this._onRemoteSubscribe(msg.body);\r\n  }\r\n\r\n  _releaseListeners() {\r\n    let _this = this;\r\n\r\n    _this._subscriptionListener.remove();\r\n\r\n    _this._changeListener.remove();\r\n\r\n    _this._childrenListeners.forEach((cl) => {\r\n      cl.remove();\r\n    });\r\n\r\n    Object.keys(_this._forwards).forEach((key) => {\r\n      _this.forwardUnSubscribe(key);\r\n    });\r\n\r\n    //remove all subscriptions\r\n    Object.keys(_this._subscriptions).forEach((key) => {\r\n      _this._subscriptions[key]._releaseListeners();\r\n    });\r\n  }\r\n\r\n  resumeSubscriptions(subscriptions) {\r\n    let _this = this;\r\n\r\n    if (!subscriptions)\r\n      return;\r\n\r\n    Object.keys(subscriptions).forEach((key) => {\r\n      let hypertyURL = subscriptions[key];\r\n\r\n      ReporterObject_log.log('[SyncherManager.ReporterObject] - resume subscriptions', _this, hypertyURL, _this._childrens);\r\n\r\n      if (!_this._subscriptions[hypertyURL]) {\r\n        _this._subscriptions[hypertyURL] = new syncher_Subscription(_this._bus, _this._owner, _this._url, true);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object\r\n   * @param  {string} address - URL to register the listeners\r\n   * @return {Promise} Return Promise OK or error\r\n   */\r\n  forwardSubscribe(addresses) {\r\n    let _this = this;\r\n\r\n    //FLOW-OUT: message sent to the msg-node SubscriptionManager component\r\n    let nodeSubscribeMsg = {\r\n      type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\r\n      body: { resources: addresses, source: _this._owner }\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this._bus.postMessageWithRetries(nodeSubscribeMsg, 10, (reply) => {\r\n        ReporterObject_log.log('[SyncherManager.ReporterObject ]forward-subscribe-response(reporter): ', reply);\r\n        if (reply.body.code === 200) {\r\n          let newForward = _this._bus.addForward(_this._url, _this._owner);\r\n          _this._forwards[addresses[0]] = newForward;\r\n          resolve();\r\n        } else {\r\n          reject('Error on msg-node subscription: ' + reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward\r\n   * @param  {string} address - URL to un-register the listeners\r\n   */\r\n  forwardUnSubscribe(address) {\r\n    let _this = this;\r\n\r\n    _this._forwards[address].remove();\r\n    delete _this._forwards[address];\r\n\r\n    //FLOW-OUT: message sent to the msg-node SubscriptionManager component\r\n    let nodeUnSubscribeMsg = {\r\n      type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\r\n      body: { resources: [address], source: _this._owner }\r\n    };\r\n\r\n    _this._bus.postMessage(nodeUnSubscribeMsg);\r\n  }\r\n\r\n  /**\r\n   * Register listeners for a list of childrens. Public channels used to transmit messages.\r\n   * @param  {string[]} childrens - channels to register\r\n   * @return {Promise} Return Promise OK or error\r\n   */\r\n  addChildrens() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (_this._childrens.length === 0) {\r\n        resolve();\r\n        return;\r\n    }\r\n\r\n      let childBaseURL = _this._url + '/children/';\r\n      ReporterObject_log.log('[SyncherManager.ReporterObject - addChildrens] - childrens: ', childBaseURL);\r\n\r\n  /*    childrens.forEach((child) => {\r\n        _this._childrens.push(child);\r\n      });*/\r\n\r\n      /*\r\n      _this._childrens.forEach((child) => {\r\n        let childId = childBaseURL + child;\r\n\r\n        let selfForward = _this._bus.addForward(childId, owner);\r\n        _this._childrenListeners.push(selfForward);\r\n      });*/\r\n\r\n      let subscriptions = [];\r\n//      childrens.forEach((child) => subscriptions.push(childBaseURL + child));\r\n      subscriptions.push(childBaseURL );\r\n\r\n      //_this._storageSubscriptions[_this._objSubscriptorURL] = {url: _this._url, owner: _this._owner, childrens: _this._childrens};\r\n\r\n      //FLOW-OUT: message sent to the msg-node SubscriptionManager component\r\n      let nodeSubscribeMsg = {\r\n        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\r\n        body: { resources: subscriptions, source: _this._owner }\r\n      };\r\n\r\n      _this._bus.postMessage(nodeSubscribeMsg, (reply) => {\r\n        ReporterObject_log.log('[SyncherManager.ReporterObject ]node-subscribe-response(reporter):', reply);\r\n        if (reply.body.code === 200) {\r\n\r\n          //add children listeners on local ...\r\n          subscriptions.forEach((childURL) => {\r\n            let childListener = _this._bus.addListener(childURL, (msg) => {\r\n              //TODO: what todo here? Save childrens?\r\n              ReporterObject_log.log('[SyncherManager.ReporterObject received]', msg);\r\n\r\n\r\n              if (msg.type === 'create' && msg.to.includes('children') && this._isToSaveData) {\r\n\r\n                // if the value is not encrypted lets encrypt it\r\n                // todo: should be subject to some policy\r\n                let splitedReporterURL = splitObjectURL(msg.to);\r\n\r\n                let url = splitedReporterURL.url;\r\n\r\n                if (!msg.body.hasOwnProperty('mutual')) msg.body.mutual = true;\r\n\r\n                //remove false when mutualAuthentication is enabled\r\n                if (!(typeof msg.body.value === 'string') && msg.body.mutual) {\r\n\r\n                  ReporterObject_log.log('[SyncherManager.ReporterObject] encrypting received data ', msg.body.value);\r\n\r\n                  cryptoManager_CryptoManager.encryptDataObject(msg.body.value, url).then((encryptedValue)=>{\r\n                    ReporterObject_log.log('[SyncherManager.ReporterObject] encrypted data ',  encryptedValue);\r\n\r\n                    _this._storeChildObject(msg, JSON.stringify(encryptedValue));\r\n                  }).catch((reason) => {\r\n                    ReporterObject_log.warn('[SyncherManager._decryptChildrens] failed : ', reason, ' Storing unencrypted');\r\n                    _this._storeChildObject(msg, msg.body.value);\r\n                  });\r\n                } else {\r\n                  _this._storeChildObject(msg, msg.body.value);\r\n                }\r\n              }\r\n\r\n            });\r\n            _this._childrenListeners.push(childListener);\r\n\r\n            let selfForward = _this._bus.addForward(childURL, _this._owner);\r\n            _this._childrenListeners.push(selfForward);\r\n          });\r\n\r\n          resolve();\r\n        } else {\r\n          reject('Error on msg-node subscription: ' + reply.body.desc);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // store childObject\r\n\r\n  _storeChildObject(msg, data) {\r\n    let _this = this;\r\n\r\n    let splitedReporterURL = splitObjectURL(msg.to);\r\n\r\n    let url = splitedReporterURL.url;\r\n\r\n    let resource = splitedReporterURL.resource;\r\n    let value;\r\n    \r\n\r\n/*    if (msg.body.identity) {\r\n      value.identity = msg.body.identity;\r\n      delete value.identity.assertion;\r\n      delete value.identity.expires;\r\n    }*/\r\n\r\n    let objectURLResource = msg.body.resource;\r\n    let attribute = resource;\r\n\r\n    if (objectURLResource === 'heartbeat' ) value = data;\r\n    else value = {\r\n      identity: msg.body.identity,\r\n      value: data\r\n    };\r\n\r\n//    if (objectURLResource) attribute += '.' + objectURLResource;\r\n    if (objectURLResource) attribute = objectURLResource;\r\n\r\n    // this identity data is not needed to be stored\r\n\r\n\r\n    console.log('[SyncherManager.ReporterObject._storeChildObject] : ', url, attribute, value);\r\n\r\n    _this._parent._dataObjectsStorage.saveChildrens(true, url, attribute, value);\r\n  }\r\n\r\n  delete() {\r\n    let _this = this;\r\n    let domain = divideURL(_this._owner).domain;\r\n\r\n    //FLOW-OUT: message sent directly to all subscribers of the reporter\r\n    _this._bus.postMessage({\r\n      type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'\r\n    });\r\n\r\n    //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component\r\n    _this._bus.postMessage({\r\n      type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',\r\n      body: { resource: _this._url, childrenResources: _this._childrens }\r\n    });\r\n\r\n    _this._releaseListeners();\r\n    delete _this._parent._reporters[_this._url];\r\n  }\r\n\r\n  _onRemoteResponse(msg) {\r\n    let _this = this;\r\n\r\n    _this._bus.postMessage({\r\n      id: msg.id, type: 'response', from: msg.to, to: _this._url,\r\n      body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }\r\n    });\r\n  }\r\n\r\n  //FLOW-IN: message received from Syncher -> subscribe\r\n  _onRemoteSubscribe(msg) {\r\n    let _this = this;\r\n    let hypertyURL = msg.body.subscriber;\r\n\r\n    //validate if subscription already exists?\r\n    if (_this._subscriptions[hypertyURL]) {\r\n      // let errorMsg = {\r\n      //   id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\r\n      //   body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' +  hypertyURL + ') already exists!' }\r\n      // };\r\n      //\r\n      // _this._bus.postMessage(errorMsg);\r\n      // return;\r\n\r\n      // new version because of reusage\r\n      _this._subscriptions[hypertyURL]._releaseListeners();\r\n    }\r\n\r\n    //ask to subscribe to Syncher? (depends on the operation mode)\r\n    //TODO: get mode from object!\r\n    let mode = 'sub/pub';\r\n\r\n    if (mode === 'sub/pub') {\r\n      //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward\r\n      let forwardMsg = {\r\n        type: 'forward', from: _this._url, to: _this._owner,\r\n        body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }\r\n      };\r\n\r\n      //TODO: For Further Study\r\n      if (msg.body.hasOwnProperty('mutual')) forwardMsg.body.mutual = msg.body.mutual;\r\n\r\n      _this._bus.postMessage(forwardMsg, (reply) => {\r\n        ReporterObject_log.log('[SyncherManager.ReporterObject ]forward-reply: ', reply);\r\n        if (reply.body.code === 200) {\r\n          if (!_this._subscriptions[hypertyURL]) {\r\n            ReporterObject_log.log('[SyncherManager.ReporterObject] - _onRemoteSubscribe:', _this._childrens);\r\n            _this._subscriptions[hypertyURL] = new syncher_Subscription(_this._bus, _this._owner, _this._url, true);\r\n          }\r\n        }\r\n\r\n\r\n        // Store for each reporter hyperty the dataObject\r\n        let userURL;\r\n        if (msg.body.identity && msg.body.identity.userProfile.userURL) {\r\n          userURL = msg.body.identity.userProfile.userURL;\r\n          _this._parent._dataObjectsStorage.update(true, _this._url, 'subscriberUsers', userURL);\r\n        }\r\n\r\n        //TODO: mutual and sessionkeys updates were removed. FFS\r\n\r\n        /*        if (msg.body.hasOwnProperty('mutual')) {\r\n//          _this._parent._identityModule.updateIsToEncryptForDataObjectSessionKey(_this._url, msg.body.mutual).then(()=>{\r\n            _this._parent._dataObjectsStorage.update(true, _this._url, 'mutual', msg.body.mutual);\r\n//          });\r\n        }*/\r\n\r\n        _this._parent._dataObjectsStorage.update(true, _this._url, 'subscriptions', hypertyURL);\r\n\r\n        reply.body.owner = _this._owner;\r\n\r\n        //FLOW-OUT: subscription response sent (forward from internal Hyperty)\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: reply.body\r\n        });\r\n\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  //FLOW-IN: message received from remote ObserverObject -> removeSubscription\r\n  _onRemoteUnSubscribe(msg) {\r\n    let _this = this;\r\n    let unsubscriber = msg.body.source;\r\n\r\n    let subscription = _this._subscriptions[unsubscriber];\r\n    if (subscription) {\r\n      subscription._releaseListeners();\r\n      delete _this._subscriptions[unsubscriber];\r\n\r\n      let forwardMsg = {\r\n        type: 'forward', from: _this._url, to: _this._owner,\r\n        body: { type: msg.type, from: unsubscriber, to: _this._url, identity: msg.body.identity }\r\n      };\r\n\r\n\r\n      _this._bus.postMessage(forwardMsg);\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_ReporterObject = (ReporterObject_ReporterObject);\r\n\n// CONCATENATED MODULE: ./src/syncher/ObserverObject.js\n// Log System\r\n\r\nlet ObserverObject_log = loglevel[\"getLogger\"]('ObserverObject');\r\n\r\n\r\n\r\n\r\n\r\nclass ObserverObject_ObserverObject {\r\n\r\n  constructor(parent, url, childrens) {\r\n    let _this = this;\r\n\r\n    _this._parent = parent;\r\n    _this._url = url;\r\n    _this._childrens = childrens;\r\n\r\n    _this._bus = parent._bus;\r\n\r\n    _this._subscriptions = {};\r\n    _this._storageSubscriptions = {};\r\n    _this._childrenListeners = [];\r\n\r\n    this._isToSaveData = false;\r\n\r\n    let changeURL = _this._url + '/changes';\r\n    _this._changeListener = _this._bus.addListener(changeURL, (msg) => {\r\n\r\n      ObserverObject_log.log('[SyncherManager.ObserverObject ] SyncherManager-' + changeURL + '-RCV: ', msg);\r\n\r\n      //TODO: what todo here? Save changes?\r\n      if (this._isToSaveData && msg.body.attribute) {\r\n        ObserverObject_log.log('[SyncherManager.ObserverObject ] SyncherManager - save data: ', msg);\r\n        _this._parent._dataObjectsStorage.update(false, _this._url, 'version', msg.body.version);\r\n        _this._parent._dataObjectsStorage.update(false, _this._url, 'lastModified', msg.body.lastModified);\r\n        _this._parent._dataObjectsStorage.saveData(false, _this._url, msg.body.attribute, msg.body.value);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  set isToSaveData(value) {\r\n    this._isToSaveData = value;\r\n  }\r\n\r\n  _newSubscription(hyperty) {\r\n    let _this = this;\r\n\r\n    let subscription = _this._subscriptions[hyperty];\r\n    ObserverObject_log.log('[Observer Object - new subscription] - ',  _this._subscriptions, hyperty, _this._subscriptions.hasOwnProperty(hyperty));\r\n    if (!subscription) {\r\n      _this._subscriptions[hyperty] = new syncher_Subscription(_this._bus, hyperty, _this._url, false);\r\n    }\r\n  }\r\n\r\n  addSubscription(hyperty) {\r\n    let _this = this;\r\n\r\n    _this._newSubscription(hyperty);\r\n  }\r\n\r\n  addChildrens() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n      if (_this._childrens.length === 0) {\r\n        resolve();\r\n        return;\r\n    }\r\n\r\n      let childBaseURL = _this._url + '/children/';\r\n      ObserverObject_log.log('[SyncherManager.ObserverObject - addChildrens] - childrens: ', childBaseURL);\r\n\r\n//      childrens.forEach((child) => {\r\n\r\n        let childListener = _this._bus.addListener(childBaseURL, (msg) => {\r\n          //TODO: what todo here? Save childrens?\r\n          ObserverObject_log.log('[SyncherManager.ObserverObject received]', msg);\r\n\r\n          if (msg.type === 'create' && msg.to.includes('children') && this._isToSaveData) {\r\n            let splitedReporterURL = splitObjectURL(msg.to);\r\n\r\n            let url = splitedReporterURL.url;\r\n\r\n            if (!msg.body.hasOwnProperty('mutual')) msg.body.mutual = true;\r\n\r\n            //remove false when mutualAuthentication is enabled\r\n            if (!(typeof msg.body.value === 'string') && msg.body.mutual) {\r\n\r\n              ObserverObject_log.log('[SyncherManager.ObserverObject] encrypting received data ', msg.body.value);\r\n\r\n              cryptoManager_CryptoManager.encryptDataObject(msg.body.value, url).then((encryptedValue)=>{\r\n                ObserverObject_log.log('[SyncherManager.ObserverObject] encrypted data ',  encryptedValue);\r\n\r\n                _this._storeChildObject(msg, JSON.stringify(encryptedValue));\r\n              }).catch((reason) => {\r\n                ObserverObject_log.warn('[SyncherManager.ObserverObject._encryptChild] failed, storing unencrypted ', reason);\r\n                _this._storeChildObject(msg, msg.body.value);\r\n              });\r\n            } else {\r\n              _this._storeChildObject(msg, msg.body.value);\r\n            }\r\n          }\r\n\r\n          ObserverObject_log.log('[SyncherManager.ObserverObject children Listeners]', _this._childrenListeners, childListener);\r\n          if (_this._childrenListeners.indexOf(childListener) === -1) {\r\n            _this._childrenListeners.push(childListener);\r\n          }\r\n\r\n        });\r\n\r\n      });\r\n\r\n//    });\r\n  }\r\n\r\n  // store childObject\r\n\r\n  _storeChildObject(msg, data) {\r\n    let _this = this;\r\n\r\n    let splitedReporterURL = splitObjectURL(msg.to);\r\n\r\n    let url = splitedReporterURL.url;\r\n\r\n    let resource = splitedReporterURL.resource;\r\n    let value = {};\r\n\r\n/*    let value = {\r\n      identity: msg.body.identity,\r\n      value: data\r\n    };*/\r\n\r\n    // this identity data is not needed to be stored\r\n/*    delete value.identity.assertion;\r\n    delete value.identity.expires;*/\r\n\r\n    let objectURLResource = msg.body.resource;\r\n    let attribute = resource;\r\n\r\n    if (objectURLResource === 'heartbeat') {\r\n      value = data;\r\n    } else {\r\n      value.identity= msg.body.identity;\r\n      value.value = data;\r\n    } \r\n\r\n//    if (objectURLResource) attribute += '.' + objectURLResource;\r\n    if (objectURLResource) attribute = objectURLResource;\r\n\r\n    ObserverObject_log.log('[SyncherManager.ObserverObject._storeChildObject] : ', url, attribute, value);\r\n\r\n    _this._parent._dataObjectsStorage.saveChildrens(false, url, attribute, value);\r\n  }\r\n\r\n  removeSubscription(msg) {\r\n    let _this = this;\r\n\r\n    let hyperty = msg.from;\r\n\r\n    let domain = divideURL(hyperty).domain;\r\n    let objURLSubscription = _this._url + '/subscription';\r\n\r\n    let subscription = _this._subscriptions[hyperty];\r\n    if (subscription) {\r\n      //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe\r\n      _this._bus.postMessage({\r\n        type: 'unsubscribe', from: _this._parent._url, to: objURLSubscription,\r\n        body: { source: hyperty, identity: msg.body.identity }\r\n      });\r\n\r\n      //TODO: should I wait for response before unsubscribe on msg-node\r\n      //FLOW-OUT: message sent to msg-node SubscriptionManager component\r\n      _this._bus.postMessage({\r\n        type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/sm',\r\n        body: { resource: _this._url, resources: [_this._url + '/children/'] }\r\n      });\r\n\r\n      subscription._releaseListeners();\r\n      delete _this._subscriptions[hyperty];\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_ObserverObject = (ObserverObject_ObserverObject);\r\n\n// CONCATENATED MODULE: ./src/syncher/SyncherManager.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet SyncherManager_log = loglevel[\"getLogger\"]('SyncherManager');\r\n\r\n\r\n//import { schemaValidation } from '../utils/schemaValidation';\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Core Syncronization system.\r\n */\r\nclass SyncherManager_SyncherManager {\r\n  /* private\r\n  _url: URL\r\n  _bus: MiniBus\r\n  _registry: Registry\r\n  _allocator: AddressAllocation\r\n\r\n  _reporters: { ObjectURL: ReporterObject }\r\n  _observers: { ObjectURL: ObserverObject }\r\n  */\r\n\r\n  constructor(runtimeURL, bus, registry, catalog, storageManager, allocator, storeDataObjects, identityModule) {\r\n    if (!runtimeURL) throw new Error('[Syncher Manager] - needs the runtimeURL parameter');\r\n    if (!bus) throw new Error('[Syncher Manager] - needs the MessageBus instance');\r\n    if (!registry) throw new Error('[Syncher Manager] - needs the Registry instance');\r\n    if (!catalog) throw new Error('[Syncher Manager] - needs the RuntimeCatalogue instance');\r\n    if (!storageManager) throw new Error('[Syncher Manager] - need the storageManager instance');\r\n\r\n    let _this = this;\r\n\r\n    _this._bus = bus;\r\n    _this._registry = registry;\r\n    _this._catalog = catalog;\r\n    _this._storageManager = storageManager;\r\n    _this._identityModule = identityModule;\r\n\r\n    //TODO: these should be saved in persistence engine?\r\n    _this.runtimeURL = runtimeURL;\r\n    _this._url = runtimeURL + '/sm';\r\n    _this._objectURL = runtimeURL + '/object-allocation';\r\n\r\n    _this._reporters = {};\r\n    _this._observers = {};\r\n\r\n    _this._dataObjectsStorage = storeDataObjects;\r\n    console.log('[NOTSAVING] storeDataObjects', storeDataObjects);\r\n    //TODO: this should not be hardcoded!\r\n    _this._domain = divideURL(runtimeURL).domain;\r\n\r\n    if (allocator) {\r\n      _this._allocator = allocator;\r\n    } else {\r\n      _this._allocator = allocation_AddressAllocation.instance;\r\n    }\r\n\r\n    SyncherManager_log.log('[SyncherManager - AddressAllocation] - ', _this._allocator);\r\n\r\n    bus.addListener(_this._url, (msg) => {\r\n      SyncherManager_log.info('[SyncherManager] RCV: ', msg);\r\n      switch (msg.type) {\r\n        case 'create': _this._onCreate(msg); break;\r\n        case 'delete': _this._onDelete(msg); break;\r\n        case 'subscribe': _this._onLocalSubscribe(msg); break;\r\n        case 'unsubscribe': _this._onLocalUnSubscribe(msg); break;\r\n        case 'read': _this._onRead(msg); break;\r\n        case 'execute': _this._onExecute(msg); break;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  get url() { return this._url; }\r\n\r\n      //FLOW-IN: message received from Syncher -> read\r\n      _onExecute(msg) {\r\n\r\n        let _this = this;\r\n\r\n        let reply = {\r\n          type: 'response',\r\n          from: msg.to,\r\n          to: msg.from,\r\n          id: msg.id\r\n        }\r\n\r\n        SyncherManager_log.info('[SyncherManager.onExecute] new message', msg);\r\n\r\n        if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('method') && msg.body.hasOwnProperty('params')) {\r\n\r\n        switch (msg.body.method) {\r\n          case 'sync': _this._dataObjectsStorage.sync(msg.body.params[0], msg.body.params[1], false);\r\n           break;\r\n          case 'stopSync': _this._dataObjectsStorage.stopSync(msg.body.params[0]);\r\n           break;\r\n        }\r\n\r\n            reply.body = {\r\n              code: 200\r\n            };\r\n\r\n            _this._bus.postMessage(reply);\r\n          } else {\r\n          reply.body = {\r\n            code: 400,\r\n            desc: 'missing body or body method / params mandatory fields'\r\n          };\r\n\r\n          SyncherManager_log.error('[SyncherManager.onExecute] error. Missing body or body method / params mandatory fields', msg);\r\n\r\n          _this._bus.postMessage(reply);\r\n\r\n\r\n        }\r\n\r\n      }\r\n\r\n    //FLOW-IN: message received from Syncher -> read\r\n    _onRead(msg) {\r\n\r\n      let _this = this;\r\n\r\n      let reply = {\r\n        type: 'response',\r\n        from: msg.to,\r\n        to: msg.from,\r\n        id: msg.id\r\n      }\r\n      SyncherManager_log.info('[SyncherManager.onRead] new message', msg);\r\n\r\n      if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('resource')) {\r\n        _this._dataObjectsStorage.sync(msg.body.resource, true).then((dataObject)=>{\r\n          reply.body = {\r\n            code: 200,\r\n            value: dataObject\r\n          };\r\n\r\n          SyncherManager_log.info('[SyncherManager.onRead] found object: ', dataObject);\r\n\r\n          _this._bus.postMessage(reply);\r\n        }, (error)=>{\r\n          reply.body = {\r\n            code: 404,\r\n            desc: error\r\n          };\r\n\r\n          SyncherManager_log.warn('[SyncherManager.onRead] warning: ', error);\r\n\r\n          _this._bus.postMessage(reply);\r\n\r\n        });\r\n\r\n      } else {\r\n        reply.body = {\r\n          code: 400,\r\n          desc: 'missing body or body resource mandatory fields'\r\n        };\r\n\r\n        SyncherManager_log.error('[SyncherManager.onRead] error. Missing body or body resource mandatory fields', msg);\r\n\r\n        _this._bus.postMessage(reply);\r\n\r\n\r\n      }\r\n\r\n    }\r\n\r\n  //FLOW-IN: message received from Syncher -> create\r\n  _onCreate(msg) {\r\n\r\n    let from = msg.from;\r\n    let to = msg.to;\r\n    let _this = this;\r\n\r\n    // check if message is to save new childrenObjects in the local storage\r\n    // TODO: check if message is to store new child in the local storage and call storeChild. How to distinguish from others?\r\n\r\n    //debugger;\r\n    if (msg.body.attribute) { this._storeChildrens(msg); } else {\r\n\r\n      if (!msg.body.hasOwnProperty('resume') || (msg.body.hasOwnProperty('resume') && !msg.body.resume)) {\r\n\r\n        // check if this is an invitation message\r\n        if (msg.body.authorise) {\r\n          this._authorise(msg);\r\n          SyncherManager_log.info('[SyncherManager.onCreate - invite observers]', msg);\r\n        } else { // this is to create a new data object\r\n          SyncherManager_log.info('[SyncherManager.onCreate - Create New Object]', msg);\r\n          this._newCreate(msg);\r\n        }\r\n\r\n      } else {\r\n\r\n        // If from the hyperty side, call the resumeReporter we will have resume = true'\r\n        // so we will create an resumed object and will try to resume the object previously saved;\r\n        this._dataObjectsStorage.getResourcesByCriteria(msg, true).then((result) => {\r\n\r\n          SyncherManager_log.info('[SyncherManager - Create Resumed] - ResourcesByCriteria | Message: ', msg, ' result: ', result);\r\n\r\n          if (result && Object.keys(result).length > 0) {\r\n\r\n            let listOfReporters = [];\r\n\r\n            Object.keys(result).forEach((objURL) => {\r\n\r\n              listOfReporters.push(\r\n                  _this._resumeCreate(msg, result[objURL])\r\n                );\r\n            });\r\n\r\n            Promise.all(listOfReporters).then((resumedReporters) => {\r\n              SyncherManager_log.log('[SyncherManager - Create Resumed]', resumedReporters);\r\n\r\n              // TODO: shoud send the information if some object was failing;\r\n              let successfullyResumed = Object.values(resumedReporters).filter((reporter) => {\r\n                return reporter !== false;\r\n              });\r\n\r\n              SyncherManager_log.info('[SyncherManager.onCreate] returning resumed objects : ', successfullyResumed);\r\n\r\n              //FLOW-OUT: message response to Syncher -> create resume\r\n              this._bus.postMessage({\r\n                id: msg.id, type: 'response', from: to, to: from,\r\n                body: { code: 200, value: deepClone(successfullyResumed) }\r\n              });\r\n\r\n              /*successfullyResumed.forEach((reporter) => {\r\n                if (reporter.backup) {\r\n                  this._dataObjectsStorage.sync(reporter.url);\r\n                }\r\n              });*/\r\n\r\n            });\r\n\r\n          } else {\r\n            //forward to hyperty:\r\n            let reply = {};\r\n            reply.id = msg.id;\r\n            reply.from = msg.to;\r\n            reply.to = msg.from;\r\n            reply.type = 'response';\r\n            reply.body = {\r\n              code: 404,\r\n              desc: 'No data objects reporters to be resumed'\r\n            };\r\n            this._bus.postMessage(reply);\r\n          }\r\n\r\n        });\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  _storeChildrens(msg) {\r\n    let _this = this;\r\n\r\n    let resource = msg.body.resource;\r\n    let attribute = msg.body.attribute;\r\n\r\n    if (attribute === 'childrenObjects') {\r\n      _this._dataObjectsStorage.saveChildrens(false, resource, undefined, msg.body.value);\r\n    } else { _this._dataObjectsStorage.saveChildrens(true, resource, attribute, msg.body.value);\r\n       }\r\n\r\n  }\r\n\r\n  _newCreate(msg) {\r\n    let _this = this;\r\n\r\n    let owner = msg.from;\r\n    let domain = divideURL(msg.from).domain;\r\n\r\n    // if reporter is in a Interworking Protostub the runtime domain backend services will be used\r\n    if (_this._registry.isInterworkingProtoStub(msg.from)) {\r\n      domain = divideURL(_this.runtimeURL).domain;\r\n    }\r\n\r\n//    let domainRegistration = msg.body.value.hasOwnProperty('domain_registration') ? msg.body.value.domain_registration : true;\r\n    let domainRouting = msg.body.value.hasOwnProperty('domain_routing') ? msg.body.value.domain_routing : true;\r\n\r\n    // Process invitation message to observers\r\n\r\n    /*if (msg.body.authorise) {\r\n      _this._authorise(msg);\r\n      return;\r\n    }*/\r\n\r\n    //get schema from catalogue and parse -> (scheme, children)\r\n    _this._catalog.getDataSchemaDescriptor(msg.body.schema).then((descriptor) => {\r\n\r\n\r\n\r\n\r\n      let properties = descriptor.sourcePackage.sourceCode.properties;\r\n      let scheme = properties.scheme ? properties.scheme : 'resource';\r\n      let childrens = properties.childrens ? properties.childrens : [];\r\n\r\n      // Do schema validation\r\n      // TODO: check if is need to handle with the result of validation\r\n      //      schemaValidation(scheme, descriptor, msg.body.value);\r\n\r\n      let objectInfo = {\r\n        name: msg.body.value.name,\r\n        schema: msg.body.value.schema,\r\n        reporter: msg.body.value.reporter,\r\n        resources: msg.body.value.resources\r\n      };\r\n\r\n      // should resuse data object url if it passed\r\n      let reuseDataObject = msg.body.value.resource;\r\n      let numOfAddress = 1;\r\n\r\n      //debugger;\r\n      //request address allocation of a new object from the msg-node\r\n      //_this._allocator.create(domain, numOfAddress, objectInfo, scheme, reuseDataObject).then((allocated) => {\r\n      _this._allocator.create(domain, numOfAddress, objectInfo, scheme, reuseDataObject).then((allocated) => {\r\n\r\n        let objectRegistration = deepClone(msg.body.value);\r\n        objectRegistration.url = allocated.address[0];\r\n        objectRegistration.authorise = msg.body.authorise;\r\n        objectRegistration.childrens = childrens;\r\n\r\n        //objectRegistration.expires = 30;//TODO: get it from data object configuration description when present\r\n\r\n        delete objectRegistration.data;\r\n\r\n        SyncherManager_log.log('[SyncherManager._newCreate] ALLOCATOR CREATE:', allocated);\r\n\r\n        let subscriptionURL = objectRegistration.url + '/subscription';\r\n\r\n        SyncherManager_log.log('[SyncherManager._newCreate] Subscription URL', subscriptionURL);\r\n\r\n        //To register the dataObject in the runtimeRegistry\r\n        SyncherManager_log.info('[SyncherManager._newCreate] Register Object: ', objectRegistration);\r\n\r\n        //_this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, allocated, msg.body.authorise).then((resolve) => {\r\n        _this._registry.registerDataObject(objectRegistration).then((registeredObject) => {\r\n          SyncherManager_log.log('[SyncherManager._newCreate] DataObject successfully registered', registeredObject);\r\n\r\n          //all OK -> create reporter and register listeners\r\n          let reporter;\r\n\r\n\r\n          if (!this._reporters[objectRegistration.url]) {\r\n            let offline = objectRegistration.offline ? objectRegistration.offline : false;\r\n            reporter = new syncher_ReporterObject(_this, owner, objectRegistration.url, childrens, offline);\r\n          } else {\r\n            reporter = this._reporters[objectRegistration.url];\r\n          }\r\n\r\n          SyncherManager_log.log('[SyncherManager - new Create] - ', msg);\r\n\r\n          // Store for each reporter hyperty the dataObject\r\n          let userURL;\r\n          // let interworking = false;\r\n\r\n          if (msg.body.hasOwnProperty('identity') && msg.body.identity.userProfile && msg.body.identity.userProfile.userURL) {\r\n            userURL = msg.body.identity.userProfile.userURL;\r\n\r\n            // if (!userURL.includes('user://')) {\r\n            //   interworking = true;\r\n            // }\r\n          } else {\r\n            userURL = _this._registry.getHypertyOwner(msg.from);\r\n\r\n            // if (!userURL) {\r\n            //   interworking = true;\r\n            // }\r\n          }\r\n\r\n          // should we use the msg.body.value instead?\r\n\r\n          let metadata = deepClone(objectRegistration);\r\n          metadata.subscriberUser = userURL;\r\n          metadata.isReporter = true;\r\n\r\n          // Store the dataObject information\r\n\r\n          //if (!interworking) {\r\n\r\n          if (msg.body.hasOwnProperty('store') && msg.body.store) {\r\n            reporter.isToSaveData = true;\r\n            metadata.isToSaveData = true;\r\n            if (msg.body.value.data) {\r\n              metadata.data = deepClone(msg.body.value.data);\r\n//              _this._dataObjectsStorage.saveData(true, objectRegistration.url, null, msg.body.value.data); }\r\n//            _this._dataObjectsStorage.update(true, objectRegistration.url, 'isToSaveData', true);\r\n\r\n//            if (msg.body.value.data) { _this._dataObjectsStorage.saveData(true, objectRegistration.url, null, msg.body.value.data); }\r\n            }\r\n          }\r\n          _this._dataObjectsStorage.set(metadata).then((storeObject) => {\r\n\r\n            if (metadata.offline) { //register new DataObject at Offline Subscription Manager\r\n              msg.body.identity.guid = _this._identityModule._identities.guid;\r\n              let forward = {\r\n                from: msg.to,\r\n                to: metadata.offline + '/register',\r\n                type: 'forward',\r\n                body: msg\r\n              };\r\n\r\n              forward.body.body.resource = objectRegistration.url;\r\n\r\n              forward.body.body.value = metadata;\r\n\r\n              SyncherManager_log.log('[SyncherManager.newCreate] registering new object at offline manager ', forward);\r\n\r\n              _this._bus.postMessage(forward);\r\n\r\n\r\n            }\r\n          //}\r\n          let responseMsg = {\r\n            id: msg.id, type: 'response', from: msg.to, to: owner,\r\n            body: { code: 200, resource: objectRegistration.url, childrenResources: childrens }\r\n          };\r\n\r\n          // adding listeners to forward to reporter\r\n\r\n          if (domainRouting) {\r\n\r\n            reporter.forwardSubscribe([objectRegistration.url, subscriptionURL]).then(() => {\r\n              reporter.addChildrens().then(() => {\r\n                _this._reporters[objectRegistration.url] = reporter;\r\n\r\n\r\n                //FLOW-OUT: message response to Syncher -> create\r\n                _this._bus.postMessage(responseMsg);\r\n\r\n              });\r\n            });\r\n          } else {\r\n            reporter.addChildrens().then(() => {\r\n              _this._reporters[objectRegistration.url] = reporter;\r\n\r\n\r\n              //FLOW-OUT: message response to Syncher -> create\r\n              _this._bus.postMessage(responseMsg);\r\n\r\n            });\r\n\r\n          }\r\n          }, (error)=> {\r\n            SyncherManager_log.error(error);\r\n          });\r\n\r\n\r\n        }, function (error) {\r\n          SyncherManager_log.error(error);\r\n        });\r\n\r\n      });\r\n    }).catch((reason) => {\r\n      //FLOW-OUT: error message response to Syncher -> create\r\n      let responseMsg = {\r\n        id: msg.id, type: 'response', from: msg.to, to: owner,\r\n        body: { code: 500, desc: reason }\r\n      };\r\n\r\n      _this._bus.postMessage(responseMsg);\r\n    });\r\n\r\n  }\r\n\r\n  _resumeCreate(msg, storedObject) {\r\n\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n\r\n      let owner = msg.from;\r\n      let schema = storedObject.schema;\r\n      let resource = storedObject.url;\r\n      let domainRegistration = storedObject.hasOwnProperty('domain_registration') ? storedObject.domain_registration : true;\r\n      let initialData = storedObject.data;\r\n\r\n      SyncherManager_log.log('[SyncherManager] - resume create', msg, storedObject);\r\n\r\n      //get schema from catalogue and parse -> (scheme, children)\r\n      _this._catalog.getDataSchemaDescriptor(schema).then((descriptor) => {\r\n\r\n        let properties = descriptor.sourcePackage.sourceCode.properties;\r\n        let scheme = properties.scheme ? properties.scheme.constant : 'resource';\r\n        let childrens = properties.childrens ? properties.childrens : [];\r\n\r\n        SyncherManager_log.log('[SyncherManager] - getDataSchemaDescriptor: ', descriptor, childrens);\r\n\r\n        // Do schema validation\r\n        // TODO: check if is need to handle with the result of validation\r\n        //        schemaValidation(scheme, descriptor, initialData);\r\n\r\n\r\n        //all OK -> create reporter and register listeners\r\n        let reporter;\r\n        let offline;\r\n\r\n        if (!this._reporters[resource]) {\r\n          offline = storedObject.offline ? storedObject.offline : false;\r\n          reporter = new syncher_ReporterObject(_this, owner, resource, childrens, offline);\r\n        } else {\r\n          reporter = this._reporters[resource];\r\n        }\r\n\r\n        reporter.isToSaveData = storedObject.isToSaveData;\r\n\r\n        if (offline) { //update new DataObject at Offline Subscription Manager\r\n          let msg = {\r\n            from: _this._url,\r\n            to: offline + '/register',\r\n            type: 'update',\r\n            body: {}\r\n          };\r\n  \r\n          SyncherManager_log.log('[SyncherManager._resumeCreate] update object at offline manager ', msg);\r\n  \r\n          _this._bus.postMessage(msg);\r\n  \r\n  \r\n        }\r\n  \r\n\r\n        if (domainRegistration) {\r\n          reporter.forwardSubscribe([storedObject.url]).then(() => {\r\n            SyncherManager_log.log('[SyncherManager._resumeCreate] resumingReporterSubscription ', storedObject);\r\n            _this._resumeReporterSubscriptions(msg, storedObject, reporter, childrens, domainRegistration).then((resumeObject)=>{\r\n              SyncherManager_log.log('[SyncherManager._resumeCreate] resolved resumed object ', resumeObject);\r\n              resolve(resumeObject);\r\n            });\r\n        });\r\n      } else resolve(_this._resumeReporterSubscriptions(msg, storedObject, reporter, childrens, domainRegistration));\r\n\r\n        //  resolve();\r\n      }).catch((reason) => {\r\n        SyncherManager_log.error('[SyncherManager - resume create] - fail on getDataSchemaDescriptor: ', reason);\r\n        resolve(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  _resumeReporterSubscriptions(msg, storedObject, reporter, childrens, domainRegistration){\r\n    let _this = this;\r\n    let resource = storedObject.url;\r\n    let objectRegistration = deepClone(msg.body.value);\r\n    objectRegistration.url = storedObject.url;\r\n    objectRegistration.expires = storedObject.expires;\r\n    objectRegistration.domain_registration = domainRegistration;\r\n\r\n    delete objectRegistration.data;\r\n\r\n    return new Promise((resolve) => {\r\n\r\n\r\n    reporter.addChildrens().then(() => {\r\n\r\n      reporter.resumeSubscriptions(storedObject.subscriptions);\r\n\r\n      _this._reporters[resource] = reporter;\r\n\r\n      SyncherManager_log.info('[SyncherManager - resume create] - resolved resumed: ', storedObject);\r\n\r\n      return _this._decryptChildrens(storedObject, childrens);\r\n    }).then((decryptedObject) => {\r\n\r\n      SyncherManager_log.info('[SyncherManager._resumeReporterSubscriptions] Register Object: ', objectRegistration);\r\n      _this._registry.registerDataObject(objectRegistration).then((registered) => {\r\n        SyncherManager_log.log('[SyncherManager._resumeReporterSubscriptions] DataObject registration successfully updated', registered);\r\n        SyncherManager_log.log('[SyncherManager._resumeReporterSubscriptions] resolving object', decryptedObject);\r\n        resolve(decryptedObject);\r\n\r\n      });\r\n\r\n      // log.log('result of previous promise');\r\n    }).catch((reason) => {\r\n      SyncherManager_log.error('[SyncherManager - resume create] - fail on addChildrens: ', reason);\r\n      resolve(false);\r\n    });\r\n  });\r\n\r\n  }\r\n\r\n  // to decrypt DataChildObjects if they are encrypted\r\n\r\n  _decryptChildrens(encryptedObject, childrens) {\r\n    let _this = this;\r\n\r\n    let storedObject = deepClone(encryptedObject);\r\n    return new Promise((resolve) => {\r\n\r\n      if (!childrens) { resolve(storedObject); } else {\r\n        let childrensObj = Object.keys(storedObject.childrenObjects);\r\n\r\n        if (childrensObj.length === 0) {\r\n          resolve(storedObject);\r\n        }\r\n\r\n        childrens.forEach((children) => {\r\n\r\n//          let childObjects = storedObject.childrenObjects[children];\r\n          let childObjects = storedObject.childrenObjects;\r\n\r\n          SyncherManager_log.log('[SyncherManager._decryptChildrens] dataObjectChilds to decrypt ', childObjects);\r\n\r\n          let listOfDecryptedObjects = [];\r\n\r\n          Object.keys(childObjects).forEach((childId) => {\r\n            let child = childObjects[childId];\r\n            let owner = childId.split('#')[0];\r\n\r\n            if (typeof child.value === 'string') {\r\n\r\n              SyncherManager_log.log('[SyncherManager._decryptChildrens] createdBy ', owner, ' object: ', child.value);\r\n\r\n              let decrypted = cryptoManager_CryptoManager.decryptDataObject(JSON.parse(child.value), storedObject.url);\r\n\r\n              listOfDecryptedObjects.push(decrypted);\r\n            }\r\n          });\r\n\r\n          Promise.all(listOfDecryptedObjects).then((decryptedObjects) => {\r\n\r\n            SyncherManager_log.log('[SyncherManager._decryptChildrens] returning decrypted ', decryptedObjects);\r\n\r\n            decryptedObjects.forEach((decryptedObject) => {\r\n              const childId = decryptedObject.value.url;\r\n              storedObject.childrenObjects[childId].value = decryptedObject.value;\r\n            });\r\n\r\n            SyncherManager_log.log('[SyncherManager._decryptChildrens] storedObject ', storedObject);\r\n\r\n            resolve(storedObject);\r\n\r\n          }).catch((reason) => {\r\n            SyncherManager_log.warn('[SyncherManager._decryptChildrens] failed : ', reason);\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Process invitations to observers\r\n\r\n  _authorise(msg) {\r\n    let _this = this;\r\n\r\n    if (!msg.body.resource) {\r\n      throw new Error('[SyncherManager._authorise] invitation request without data object url:', msg);\r\n    }\r\n\r\n    let objSubscriptorURL = msg.body.resource + '/subscription';\r\n    let p2p = msg.body.p2p ? msg.body.p2p : false;\r\n\r\n    SyncherManager_log.log('[SyncherManager -  authorise] - ', msg);\r\n\r\n    if (msg.body.authorise) {\r\n      msg.body.authorise.forEach((hypertyURL) => {\r\n        //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification\r\n\r\n        _this._bus.postMessage({\r\n          type: 'create', from: objSubscriptorURL, to: hypertyURL,\r\n          body: { p2p: p2p, identity: msg.body.identity, source: msg.from, value: msg.body.value, schema: msg.body.schema }\r\n        }, (reply) => { // lets forward the invitation response\r\n          let response = {\r\n            from: msg.to,\r\n            to: msg.from,\r\n            id: msg.id,\r\n            type: reply.type,\r\n            body: reply.body\r\n          };\r\n\r\n          _this._bus.postMessage(response);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  //FLOW-IN: message received from DataObjectReporter -> delete\r\n  _onDelete(msg) {\r\n    let _this = this;\r\n\r\n    let objURL = msg.body.resource;\r\n\r\n    let object = _this._reporters[objURL];\r\n    if (object) {\r\n      //TODO: is there any policy verification before delete?\r\n\r\n      if (object.offline) { //register new DataObject at Offline Subscription Manager\r\n        let forward = {\r\n          from: msg.to,\r\n          to: object.offline + '/register',\r\n          type: 'forward',\r\n          body: msg\r\n        };\r\n\r\n        SyncherManager_log.log('[SyncherManager._onDelete] unregistering object from offline manager ', forward);\r\n\r\n        _this._bus.postMessage(forward);\r\n\r\n\r\n      }\r\n\r\n      object.delete();\r\n\r\n      this._dataObjectsStorage.deleteResource(objURL).then((result) => {\r\n\r\n\r\n        SyncherManager_log.log('[SyncherManager - onDelete] - deleteResource: ', result);\r\n\r\n        _this._registry.unregisterDataObject(objURL);\r\n\r\n\r\n        //TODO: unregister object?\r\n        _this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 200 }\r\n        });\r\n\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n\r\n  //FLOW-IN: message received from local Syncher -> subscribe\r\n  _onLocalSubscribe(msg) {\r\n    //debugger;\r\n\r\n    if (msg.body.hasOwnProperty('resume') && (msg.body.resume )) {\r\n      this._dataObjectsStorage.getResourcesByCriteria(msg, false).then((result) => {\r\n\r\n        SyncherManager_log.info('[SyncherManager.onLocalSubscribe. resume]: ', msg, ' result: ', result);\r\n  \r\n        if (result && Object.keys(result).length > 0) {\r\n  \r\n          let listOfObservers = [];\r\n  \r\n          // TODO: should reuse the stored information\r\n          Object.keys(result).forEach((objURL) => {\r\n            SyncherManager_log.log('[SyncherManager - resume Subscribe] - reuse current object url: ', result[objURL]);\r\n            listOfObservers.push(this._resumeSubscription(msg, result[objURL]));\r\n          });\r\n  \r\n          Promise.all(listOfObservers).then((resumedObservers) => {\r\n            SyncherManager_log.log('[SyncherManager - Observers Resumed]', resumedObservers);\r\n  \r\n            // TODO: shoud send the information if some object is failing;\r\n            let successfullyResumed = Object.values(resumedObservers).filter((observer) => {\r\n              return observer !== false;\r\n            });\r\n  \r\n            let response = {\r\n              id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n              body: { code: 200, value: successfullyResumed }\r\n            };\r\n  \r\n            SyncherManager_log.log('[SyncherManager - Observers Resumed] replying ', response);\r\n  \r\n            //FLOW-OUT: message response to Syncher -> create\r\n            this._bus.postMessage(response);\r\n  \r\n          });\r\n  \r\n       \r\n        } else {\r\n          //forward to hyperty:\r\n          let reply = {};\r\n          reply.id = msg.id;\r\n          reply.from = msg.to;\r\n          reply.to = msg.from;\r\n          reply.type = 'response';\r\n          reply.body = {\r\n            code: 404,\r\n            desc: 'No data objects observers to be resumed'\r\n          };\r\n          this._bus.postMessage(reply);\r\n        }\r\n  \r\n      });\r\n    } else {\r\n      SyncherManager_log.log('[SyncherManager.onLocalSubscribe - new Subscribe] - ', msg.body.schema, msg.body.resource);\r\n      this._newSubscription(msg);\r\n    }\r\n \r\n\r\n  }\r\n\r\n  _newSubscription(msg) {\r\n    let _this = this;\r\n\r\n    let objURL = msg.body.resource;\r\n\r\n    let hypertyURL = msg.from;\r\n    let domain = divideURL(objURL).domain;\r\n    let domainSubscription = msg.body.hasOwnProperty('domain_subscription') ? msg.body.domain_subscription : true;\r\n\r\n    let childBaseURL = objURL + '/children/';\r\n\r\n    //get schema from catalogue and parse -> (children)\r\n    _this._catalog.getDataSchemaDescriptor(msg.body.schema).then((descriptor) => {\r\n      let properties = descriptor.sourcePackage.sourceCode.properties;\r\n      let childrens = properties.childrens ? properties.childrens : [];\r\n\r\n      let subscriptions = [];\r\n      subscriptions.push(objURL + '/changes');\r\n\r\n//      childrens.forEach((child) => subscriptions.push(childBaseURL + child));\r\n      subscriptions.push(childBaseURL);\r\n\r\n      //children addresses\r\n\r\n      if (domainSubscription) {  //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\r\n      let nodeSubscribeMsg = {\r\n        type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\r\n        body: { identity: msg.body.identity, resources: subscriptions, source: hypertyURL }\r\n      };\r\n\r\n      //subscribe in msg-node\r\n      _this._bus.postMessage(nodeSubscribeMsg, (reply) => {\r\n        SyncherManager_log.log('node-subscribe-response(observer): ', reply);\r\n        console.log('REUSETEST SyncherManager - node-subscribe-response(observer): ', reply);\r\n        if (reply.body.code === 200) {\r\n          _this._newReporterSubscribe(msg, hypertyURL, objURL, childrens);\r\n        } else {\r\n          //listener rejected\r\n          _this._bus.postMessage({\r\n            id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\r\n            body: reply.body\r\n          });\r\n        }\r\n      });\r\n    } else _this._newReporterSubscribe(msg, hypertyURL, objURL, childrens);\r\n\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _newReporterSubscribe(msg, hypertyURL, objURL, childrens){\r\n\r\n    let _this = this;\r\n\r\n    let objURLSubscription = objURL + '/subscription';\r\n\r\n          //FLOW-OUT: reply with provisional response\r\n          _this._bus.postMessage({\r\n            id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\r\n            body: { code: 100, childrenResources: childrens, schema: msg.body.schema, resource: msg.body.resource }\r\n          });\r\n\r\n          //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\r\n          let objSubscribeMsg = {\r\n            type: 'subscribe', from: _this._url, to: objURLSubscription,\r\n            body: { identity: msg.body.identity, subscriber: hypertyURL }\r\n          };\r\n\r\n          //TODO: For Further Study\r\n          if (msg.body.hasOwnProperty('mutual')) objSubscribeMsg.body.mutual = msg.body.mutual;\r\n          SyncherManager_log.log('[SyncherManager._newSubscription]', objSubscribeMsg, msg);\r\n          console.log('REUSETEST SyncherManager - [SyncherManager._newSubscription]', objSubscribeMsg, msg);\r\n          //subscribe to reporter SM\r\n          _this._bus.postMessage(objSubscribeMsg, (reply) => {\r\n            SyncherManager_log.log('reporter-subscribe-response-new: ', reply);\r\n            console.log('REUSETEST SyncherManager - reporter-subscribe-response-new: ', reply);\r\n            if (reply.body.code === 200) _this._processSuccessfullSubscription(reply, hypertyURL, objURL, childrens, msg);\r\n            else if (msg.body.offline) _this._processOfflineSubscription(objSubscribeMsg, msg.body.offline, hypertyURL, objURL, childrens, msg);\r\n            else {\r\n              //TODO: send response back to Hyperty with error message received in the reply\r\n            }\r\n          });\r\n  }\r\n\r\n  _processOfflineSubscription(subscription, redirectTo, hypertyURL, objURL, childrens, msg) {\r\n    let _this = this;\r\n\r\n    let forward = {\r\n      from: subscription.from,\r\n      type: 'forward',\r\n      to: redirectTo,\r\n      body: subscription\r\n    };\r\n\r\n    console.log('[SyncherManager._processOfflineSubscription] forwading ', forward);\r\n\r\n    _this._bus.postMessage(forward, (reply) => {\r\n      SyncherManager_log.log('[SyncherManager._processOfflineSubscription] reply ', reply);\r\n      if (reply.body.code === 200) _this._processSuccessfullSubscription(reply, hypertyURL, objURL, childrens, msg);\r\n      else {\r\n        //TODO: send response back to Hyperty with error message received in the reply\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n\r\n  _processSuccessfullSubscription(reply, hypertyURL, objURL, childrens, msg) {\r\n\r\n    let _this = this;\r\n\r\n    SyncherManager_log.log('[SyncherManager._newSubscription] - observers: ', _this._observers, objURL, _this._observers[objURL]);\r\n    console.log('REUSETEST SyncherManager - 200 code[SyncherManager._newSubscription] - observers: ', _this._observers, objURL, _this._observers[objURL]);\r\n    let observer = _this._observers[objURL];\r\n    if (!observer) {\r\n      observer = new syncher_ObserverObject(_this, objURL, childrens);\r\n      SyncherManager_log.log('[SyncherManager._newSubscription] - observers: create new ObserverObject: ', observer);\r\n      _this._observers[objURL] = observer;\r\n\r\n      // register new hyperty subscription\r\n      observer.addSubscription(hypertyURL);\r\n\r\n      // add childrens and listeners to save data if necessary\r\n      observer.addChildrens();\r\n    }\r\n\r\n    let interworking = false;\r\n\r\n    //debugger;\r\n\r\n    // Store for each reporter hyperty the dataObject\r\n    let userURL;\r\n    if (msg.body.hasOwnProperty('identity') && msg.body.identity.userProfile && msg.body.identity.userProfile.userURL) {\r\n      userURL = msg.body.identity.userProfile.userURL;\r\n      if (!userURL.includes('user://')) {\r\n        interworking = true;\r\n      }\r\n    } else {\r\n      userURL = _this._registry.getHypertyOwner(msg.from);\r\n      if (!userURL) interworking = true;\r\n    }\r\n\r\n    let metadata = deepClone(reply.body.value);\r\n\r\n    // let childrenObjects = metadata.childrenObjects || {};\r\n\r\n    delete metadata.data;\r\n    delete metadata.childrenObjects;\r\n\r\n    metadata.childrens = childrens;\r\n    metadata.subscriberUser = userURL;\r\n    metadata.isReporter = false;\r\n    metadata.subscriberHyperty = hypertyURL;\r\n\r\n    if (!interworking) {\r\n      //_this._dataObjectsStorage.set(objURL, false, msg.body.schema, 'on', reply.body.owner, hypertyURL, childrens, userURL);\r\n      _this._dataObjectsStorage.set(metadata);\r\n      if ((metadata.hasOwnProperty('store') && metadata.store) || (metadata.hasOwnProperty('isToSaveData') && metadata.isToSaveData)) {\r\n        observer.isToSaveData = true;\r\n        _this._dataObjectsStorage.update(false, objURL, 'isToSaveData', true);\r\n        _this._dataObjectsStorage.saveData(false, objURL, null, reply.body.value.data);\r\n//                  if (childrens) _this._dataObjectsStorage.initialObserverSync(objURL, reply.body.value.data.backupRevision);\r\n      }\r\n    }\r\n\r\n    //forward to hyperty:\r\n    reply.id = msg.id;\r\n    reply.from = _this._url;\r\n    reply.to = hypertyURL;\r\n    reply.body.schema = msg.body.schema;\r\n    reply.body.resource = msg.body.resource;\r\n\r\n    //TODO: For Further Study\r\n    if (msg.body.hasOwnProperty('mutual')) reply.body.mutual = msg.body.mutual;\r\n    SyncherManager_log.log('[subscribe] - new subscription: ', msg, reply, observer);\r\n\r\n    this._bus.postMessage(reply);\r\n\r\n  }\r\n\r\n  _resumeSubscription(msg, storedObject) {\r\n\r\n    return new Promise((resolve) => {\r\n\r\n      let objURL = storedObject.url;\r\n      let schema = storedObject.schema;\r\n\r\n      let hypertyURL = msg.from;\r\n\r\n      // let objURLSubscription = objURL + '/subscription';\r\n\r\n      let childBaseURL = objURL + '/children/';\r\n\r\n      SyncherManager_log.log('[SyncherManager - ReuseSubscription] - objURL: ', objURL, ' - schema:', schema);\r\n\r\n      //get schema from catalogue and parse -> (children)\r\n      // TODO: remove this since children resources should be available in the DataObjectsStorage\r\n      this._catalog.getDataSchemaDescriptor(schema).then((descriptor) => {\r\n        let properties = descriptor.sourcePackage.sourceCode.properties;\r\n        let childrens = properties.childrens ? properties.childrens : [];\r\n\r\n        //children addresses\r\n        let subscriptions = [];\r\n        subscriptions.push(objURL + '/changes');\r\n//        childrens.forEach((child) => subscriptions.push(childBaseURL + child));\r\n        subscriptions.push(childBaseURL);\r\n\r\n        //FLOW-OUT: reply with provisional response\r\n        this._bus.postMessage({\r\n          id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\r\n          body: { code: 100, childrenResources: childrens, schema: schema, resource: objURL }\r\n        });\r\n\r\n        //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\r\n        /*let objSubscribeMsg = {\r\n          type: 'subscribe', from: this._url, to: objURLSubscription,\r\n          body: { subscriber: hypertyURL, identity: msg.body.identity }\r\n        };\r\n\r\n        //subscribe to reporter SM\r\n        this._bus.postMessage(objSubscribeMsg, (reply) => {*/\r\n\r\n        let observer = this._observers[objURL];\r\n        if (!observer) {\r\n          observer = new syncher_ObserverObject(this, objURL, childrens);\r\n          observer.isToSaveData = storedObject.isToSaveData;\r\n          this._observers[objURL] = observer;\r\n        }\r\n\r\n        //register new hyperty subscription\r\n        observer.addSubscription(hypertyURL);\r\n        observer.addChildrens();\r\n\r\n        // Object.assign(storedObject.data, reply.body.value.data);\r\n        // Object.assign(storedObject.childrens, reply.body.value.childrens);\r\n\r\n        //log.log('[subscribe] - resume subscription: ', msg, reply, storedObject, observer);\r\n\r\n        return this._decryptChildrens(storedObject, childrens);\r\n      }).then((decryptedObject) => {\r\n        // log.log('result of previous promise');\r\n        resolve(decryptedObject);\r\n      }).catch((reason) => {\r\n        SyncherManager_log.error('[SyncherManager - resume subscription] - fail on getDataSchemaDescriptor: ', reason);\r\n        resolve(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  //FLOW-IN: message received from local DataObjectObserver -> unsubscribe\r\n  _onLocalUnSubscribe(msg) {\r\n    let _this = this;\r\n\r\n    let hypertyURL = msg.from;\r\n    let objURL = msg.body.resource;\r\n\r\n    let observer = _this._observers[objURL];\r\n    if (observer) {\r\n      //TODO: is there any policy verification before delete?\r\n      observer.removeSubscription(msg);\r\n\r\n      //TODO: destroy object in the registry?\r\n      _this._bus.postMessage({\r\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n        body: { code: 200 }\r\n      });\r\n\r\n      this._dataObjectsStorage.deleteResource(objURL);\r\n\r\n      //TODO: remove Object if no more subscription?\r\n      delete _this._observers[objURL];\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var syncher_SyncherManager = (SyncherManager_SyncherManager);\r\n\n// CONCATENATED MODULE: ./src/subscriptionManager/Subscription.js\n// Log System\r\n\r\nlet subscriptionManager_Subscription_log = loglevel[\"getLogger\"]('Subscription');\r\n\r\nclass Subscription_Subscription {\r\n\r\n  constructor(bus, subscriber, resource) {\r\n    let _this = this;\r\n    _this._subscriber = subscriber;\r\n    _this.resource = resource;\r\n\r\n    subscriptionManager_Subscription_log.log('[SubscriptionManager.Subscription] new: ', subscriber, resource)\r\n\r\n    //add forward\r\n    _this._listener = bus.addForward(resource, subscriber);\r\n\r\n  }\r\n\r\n  _releaseListeners() {\r\n    let _this = this;\r\n\r\n    _this._listener.remove();\r\n\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var subscriptionManager_Subscription = (Subscription_Subscription);\r\n\n// CONCATENATED MODULE: ./src/subscriptionManager/SubscriptionManager.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n// Log System\r\n\r\nlet SubscriptionManager_log = loglevel[\"getLogger\"]('SubscriptionManager');\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author paulo-g-chainho@alticelabs.com\r\n * Subscription Manager used to manage routing paths at the runtime.\r\n */\r\n\r\nclass SubscriptionManager_SubscriptionManager {\r\n\r\n  constructor(runtimeURL, bus, storage) {\r\n    if (!runtimeURL) throw new Error('[SubscriptionManager] - needs the runtimeURL parameter');\r\n    if (!bus) throw new Error('[SubscriptionManager] - needs the MessageBus instance');\r\n\r\n    let _this = this;\r\n\r\n    _this._bus = bus;\r\n    _this._storage = storage;\r\n\r\n    _this._subscriptions = {};\r\n\r\n    _this._subscriptionsStorage = {};\r\n\r\n    //TODO: these should be saved in persistence engine?\r\n    _this.runtimeURL = runtimeURL;\r\n    _this._url = runtimeURL + '/subscriptions';\r\n\r\n    //TODO: this should not be hardcoded!\r\n    _this._domain = divideURL(runtimeURL).domain;\r\n\r\n    bus.addListener(_this._url, (msg) => {\r\n      SubscriptionManager_log.info('[SubscriptionManager] RCV: ', msg);\r\n      switch (msg.type) {\r\n        case 'subscribe': _this._onSubscribe(msg); break;\r\n        case 'unsubscribe': _this._onUnSubscribe(msg); break;\r\n        case 'read': _this._onRead(msg); break;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve) => {\r\n\r\n      _this._storage.get('subscriptions').then((subscriptions) => {\r\n        SubscriptionManager_log.log('[SubscriptionManager.init] resume subscriptions: ', subscriptions);\r\n        if (subscriptions) {\r\n\r\n          _this._subscriptionsStorage = subscriptions;\r\n\r\n          Object.values(subscriptions).forEach((subscription)=>{\r\n            _this.createSubscription(subscription.domain, subscription.resources, subscription.subscriber, subscription.identity);\r\n\r\n          });\r\n\r\n        }\r\n        resolve();\r\n      });\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n  get url() { return this._url; }\r\n\r\n\r\n  //message received to set a routing path\r\n  _onSubscribe(msg) {\r\n\r\n    let _this = this;\r\n\r\n    let resources = msg.body.resources;\r\n\r\n    let subscriber = msg.from;\r\n    let domain = divideURL(resources[0]).domain; //we are assuming resources are all from the same domain\r\n\r\n    let identity = msg.body.identity;\r\n\r\n    _this.createSubscription(domain, resources, subscriber, identity).then((reply)=>{\r\n      //forward to hyperty:\r\n      reply.id = msg.id;\r\n      reply.from = _this._url;\r\n      reply.to = subscriber;\r\n      reply.body = msg.body;\r\n      reply.body.code = 200;\r\n\r\n      SubscriptionManager_log.log('[SubscriptionManager] - craeteSubscription: ', msg, reply, subscriber);\r\n\r\n      _this._bus.postMessage(reply);\r\n\r\n\r\n      if (!_this._subscriptionsStorage[subscriber]) {\r\n\r\n\r\n        _this._subscriptionsStorage[subscriber] = {\r\n          domain: domain,\r\n          resources: resources,\r\n          subscriber: subscriber,\r\n          identity: identity\r\n        };\r\n\r\n      } else {\r\n        resources.forEach((resource) => {\r\n          if (!(_this._subscriptionsStorage[subscriber].resources.includes(resource))) {\r\n            _this._subscriptionsStorage[subscriber].resources.push(resource);\r\n          }\r\n        });\r\n      }\r\n\r\n      _this._storage.set('subscriptions', 1, _this._subscriptionsStorage);\r\n    });\r\n  }\r\n\r\n  createSubscription(domain, resources, subscriber, identity) {\r\n\r\n    let _this = this;\r\n    //debugger;\r\n    return new Promise((resolve) => {\r\n      //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\r\n\r\n      let nodeSubscribeMsg = {\r\n        type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\r\n        body: { identity: identity, resources: resources, source: subscriber }\r\n      };\r\n\r\n      //subscribe in msg-node\r\n      _this._bus.postMessage(nodeSubscribeMsg, (reply) => {\r\n        SubscriptionManager_log.log('[SubscriptionManager] node-subscribe-response: ', reply);\r\n\r\n        //if (reply.body.code === 200) {//TODO: uncomment when  MN replies with correct response body code\r\n\r\n        //TODO: support multiple routes for multiple resources\r\n\r\n        let subscription = _this._subscriptions[subscriber];\r\n        SubscriptionManager_log.log('[SubscriptionManager] - ',  _this._subscriptions, resources, _this._subscriptions.hasOwnProperty(subscriber));\r\n        if (!subscription) {\r\n          _this._subscriptions[subscriber] = {};\r\n        }\r\n\r\n        resources.forEach((resource)=>{\r\n          _this._subscriptions[subscriber][resource] = new subscriptionManager_Subscription(_this._bus, subscriber, resource);\r\n        });\r\n\r\n        resolve(reply);\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n\r\n  // message received to remove routing path\r\n  _onUnSubscribe(msg) {\r\n    let _this = this;\r\n\r\n    let unsubscriber = msg.from;\r\n    let resource = msg.body.resource;\r\n\r\n    if (_this._subscriptions[unsubscriber] && _this._subscriptions[unsubscriber][resource]) {\r\n      let domain = divideURL(resource).domain;\r\n      let subscription = _this._subscriptions[unsubscriber][resource];\r\n\r\n      //FLOW-OUT: message sent to msg-node SubscriptionManager component\r\n      _this._bus.postMessage({\r\n        type: 'unsubscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\r\n        body: { resources: [resource], source: unsubscriber }\r\n      });\r\n\r\n      subscription._releaseListeners();\r\n      delete _this._subscriptions[unsubscriber][resource];\r\n\r\n      if (_this._subscriptionsStorage[unsubscriber]) {\r\n        let i = _this._subscriptionsStorage[unsubscriber].resources.indexOf(resource);\r\n        if (i != -1) {\r\n          _this._subscriptionsStorage[unsubscriber].resources.splice(i, 1);\r\n        }\r\n        _this._storage.set('subscriptions', 1, _this._subscriptionsStorage);\r\n      }\r\n    }\r\n\r\n    _this._bus.postMessage({\r\n      id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n      body: { code: 200 }\r\n    });\r\n\r\n  }\r\n\r\n  //message received to read existing routing paths. At this point limited to read all existing routing paths set for one listener\r\n  _onRead(msg) {\r\n\r\n    let _this = this;\r\n\r\n    let listenerAddress = msg.body.resource;\r\n    let reply;\r\n\r\n    SubscriptionManager_log.log('[SubscriptionManager] - request to read Subscriptions: ', msg);\r\n\r\n    _this._storage.get('subscriptions').then((subscriptions)=>{\r\n      if (subscriptions && subscriptions[listenerAddress]) {\r\n        let resources = subscriptions[listenerAddress].resources;\r\n\r\n        reply = {\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 200, value: resources }\r\n        };\r\n\r\n      } else {\r\n        reply = {\r\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n          body: { code: 404, description: 'Not Found' }\r\n        };\r\n      }\r\n      _this._bus.postMessage(reply);\r\n    });\r\n  }\r\n}\r\n\r\n/* harmony default export */ var subscriptionManager_SubscriptionManager = (SubscriptionManager_SubscriptionManager);\r\n\n// CONCATENATED MODULE: ./src/policy/ReThinkCtx.js\n\r\n\r\nclass ReThinkCtx_ReThinkCtx {\r\n\r\n  constructor() {\r\n    this.defaultBehaviour = true;\r\n    this.groups = {};\r\n  }\r\n\r\n  get scheme() {\r\n    return this._scheme;\r\n  }\r\n\r\n  get date() {\r\n    return this._date;\r\n  }\r\n\r\n  get domain() {\r\n    return this._domain;\r\n  }\r\n\r\n  get type() {\r\n    return this._type;\r\n  }\r\n\r\n  get source() {\r\n    return this._source;\r\n  }\r\n\r\n  get time() {\r\n    return this._time;\r\n  }\r\n\r\n  get weekday() {\r\n    return this._weekday;\r\n  }\r\n\r\n  set scheme(params) {\r\n    let from = params.message.from;\r\n    if (isDataObjectURL(from)) {\r\n      this._scheme = divideURL(from).type;\r\n    } else {\r\n      this._scheme = undefined;\r\n    }\r\n  }\r\n\r\n  set date(now) {\r\n    let date = new Date();\r\n    let day = String(date.getDate());\r\n    if (day.length === 1) {\r\n      day = '0' + day;\r\n    }\r\n    let month = String(date.getMonth() + 1);\r\n    if (month.length === 1) {\r\n      month = '0' + month;\r\n    }\r\n    this._date = day + '/' + month + '/' + date.getFullYear();\r\n  }\r\n\r\n  set domain(params) {\r\n    if (params.message.body.identity !== undefined) {\r\n      this._domain = divideEmail(params.message.body.identity.userProfile.username).domain;\r\n    }\r\n  }\r\n\r\n  set type(params) {\r\n    let message = params.message;\r\n    if (message.body.value !== undefined) {\r\n      this._type = message.body.value.resourceType;\r\n    }\r\n  }\r\n\r\n  set source(params) {\r\n    if (params.message.body.identity !== undefined) {\r\n      this._source = params.message.body.identity.userProfile.username;\r\n    }\r\n  }\r\n\r\n  set time(now) {\r\n    now = new Date();\r\n    let minutes = String(now.getMinutes());\r\n    if (minutes.length === 1) {\r\n      minutes = '0' + minutes;\r\n    }\r\n    this._time = parseInt(String(now.getHours()) + minutes);\r\n  }\r\n\r\n  set weekday(now) {\r\n    this._weekday = String(new Date().getDay());\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var policy_ReThinkCtx = (ReThinkCtx_ReThinkCtx);\r\n\n// CONCATENATED MODULE: ./src/policy/context/RuntimeCoreCtx.js\n\r\nlet RuntimeCoreCtx_log = loglevel[\"getLogger\"]('PEP');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass RuntimeCoreCtx_RuntimeCoreCtx extends policy_ReThinkCtx {\r\n\r\n  constructor(runtimeURL, idModule, runtimeRegistry, storageManager, runtimeCapabilities) {\r\n    super();\r\n    this._runtimeURL = runtimeURL;\r\n    this._pepURL = this._runtimeURL + '/pep';\r\n    this._guiURL = this._runtimeURL + '/policy-gui';\r\n    this.idModule = idModule;\r\n    this.runtimeRegistry = runtimeRegistry;\r\n    this.activeUserPolicy = undefined;\r\n    this.serviceProviderPolicy = {};\r\n    this.userPolicies = {};\r\n    this.storageManager = storageManager;\r\n    this.runtimeCapabilities = runtimeCapabilities;\r\n  }\r\n\r\n  get pepURL() {\r\n    let _this = this;\r\n    return _this._pepURL;\r\n  }\r\n\r\n  get guiURL() {\r\n    let _this = this;\r\n    return _this._guiURL;\r\n  }\r\n\r\n  get runtimeURL() {\r\n    let _this = this;\r\n    return _this._runtimeURL;\r\n  }\r\n\r\n  /**\r\n  * return the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  get messageBus() {\r\n    let _this = this;\r\n    return _this._messageBus;\r\n  }\r\n\r\n  /**\r\n  * Set the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\r\n  set messageBus(messageBus) {\r\n    let _this = this;\r\n    _this._messageBus = messageBus;\r\n  }\r\n\r\n  get subscription() {\r\n    return this._subscription;\r\n  }\r\n\r\n  set subscription(params) {\r\n    this._subscription = params.message.body.subscriber;\r\n  }\r\n\r\n  loadConfigurations() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      console.log(_this.storageManager);\r\n\r\n      _this.storageManager.get('rethink:activePolicy').then((value) => {\r\n        _this.activeUserPolicy = value;\r\n\r\n        return _this.storageManager.get('rethink:groups');\r\n      }).then((groupInfo) => {\r\n        let groups = groupInfo;\r\n        _this.groups = (groups === undefined) ? {} : groups;\r\n\r\n        return _this.storageManager.get('rethink:spPolicies');\r\n      }).then((policiesInfo) => {\r\n        let spPolicies = policiesInfo;\r\n        _this.serviceProviderPolicy = (spPolicies === undefined) ? {} : spPolicies;\r\n\r\n        _this._loadUserPolicies().then(() => {\r\n          resolve();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  getPolicies(message, isIncomingMessage) {\r\n    let policies = {};\r\n\r\n    if (this.activeUserPolicy !== undefined) {\r\n      policies.userPolicy = this.userPolicies[this.activeUserPolicy];\r\n    }\r\n\r\n    policies.serviceProviderPolicy = this.getServiceProviderPolicy(message, isIncomingMessage);\r\n\r\n    return policies;\r\n  }\r\n\r\n  _isValidUpdate(message) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      if (message.from.split('://').length > 1) {\r\n        _this.idModule._getHypertyFromDataObject(message.from).then(hypertyURL => {\r\n          if (hypertyURL === message.body.source) {\r\n            resolve(message);\r\n          } else {\r\n            reject('The source of the message is not valid.');\r\n          }\r\n        }, (error) => {\r\n          reject(error);\r\n        });\r\n      } else {\r\n        resolve(message);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  getMyEmails() {\r\n    let identities = this.idModule.getIdentities();\r\n    let emails = [];\r\n\r\n    for (let i in identities) {\r\n      emails.push(getUserEmailFromURL(identities[i].identity));\r\n    }\r\n\r\n    return emails;\r\n  }\r\n\r\n  getMyHyperties() {\r\n    let hyperties = this.runtimeRegistry.hypertiesList;\r\n    let hypertiesNames = [];\r\n\r\n    for (let i in hyperties) {\r\n      let hypertyName = hyperties[i].objectName;\r\n      if (hypertiesNames.indexOf(hypertyName) === -1) {\r\n        hypertiesNames.push(hypertyName);\r\n      }\r\n    }\r\n\r\n    return hypertiesNames;\r\n  }\r\n\r\n  getServiceProviderPolicy(message, isIncoming) {\r\n    let policy;\r\n\r\n    if (isIncoming) {\r\n      let toHyperty = this.runtimeRegistry.getHypertyName(message.to);\r\n      policy = this.serviceProviderPolicy[toHyperty];\r\n    } else {\r\n      let fromHyperty = this.runtimeRegistry.getHypertyName(message.from);\r\n      policy = this.serviceProviderPolicy[fromHyperty];\r\n    }\r\n    return policy;\r\n  }\r\n\r\n\r\n  getURL(url) {\r\n    let splitURL = url.split('/');\r\n    return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\r\n  }\r\n\r\n\r\n  /**\r\n  * Creates a group with the given name.\r\n  * @param  {String}  groupName\r\n  */\r\n  _loadUserPolicies() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      _this.storageManager.get('rethink:userPolicies').then((value) => {\r\n        let policies = value;\r\n        if (policies !== undefined) {\r\n          for (let i in policies) {\r\n            this.pep.addPolicy('USER', i, policies[i]);\r\n          }\r\n        }\r\n        resolve();\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  _getLastComponentOfURL(url) {\r\n    let split = url.split('/');\r\n    return split[split.length - 1];\r\n  }\r\n\r\n  _getPoliciesJSON(policies) {\r\n    for (let i in policies) {\r\n      let combiningAlgorithm = policies[i].combiningAlgorithm;\r\n      if (combiningAlgorithm instanceof combiningAlgorithms_BlockOverrides) {\r\n        policies[i].combiningAlgorithm = 'blockOverrides';\r\n      } else {\r\n        if (combiningAlgorithm instanceof combiningAlgorithms_AllowOverrides) {\r\n          policies[i].combiningAlgorithm = 'allowOverrides';\r\n        } else {\r\n          if (combiningAlgorithm instanceof combiningAlgorithms_FirstApplicable) {\r\n            policies[i].combiningAlgorithm = 'firstApplicable';\r\n          } else {\r\n            policies[i].combiningAlgorithm = undefined;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return policies;\r\n  }\r\n\r\n  saveActivePolicy() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this.storageManager.set('rethink:activePolicy', 0, this.activeUserPolicy).then(() => {\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  saveGroups() {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this.storageManager.set('rethink:groups', 0, this.groups).then(() => {\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  savePolicies(source, policy, key) {\r\n    let policiesJson;\r\n\r\n    switch (source) {\r\n      case 'USER':\r\n        policiesJson = JSON.stringify(this.userPolicies);\r\n        policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));\r\n        this.storageManager.set('rethink:userPolicies', 0, policiesJson);\r\n        break;\r\n      case 'SERVICE_PROVIDER':\r\n        if (policy !== undefined & key !== undefined) {\r\n          this.serviceProviderPolicy[key] = policy;\r\n        }\r\n        policiesJson = JSON.stringify(this.serviceProviderPolicy);\r\n        policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));\r\n        this.storageManager.set('rethink:spPolicies', 0, policiesJson);\r\n        break;\r\n      default:\r\n        throw Error('Unknown policy source: ' + source);\r\n    }\r\n  }\r\n\r\n  getGroupsNames() {\r\n    let myGroups = this.groups;\r\n    let groupsNames = [];\r\n    if (myGroups !== undefined) {\r\n      for (let groupName in myGroups) {\r\n        groupsNames.push(groupName);\r\n      }\r\n    }\r\n    return groupsNames;\r\n  }\r\n\r\n  getGroup(groupName, destination) {\r\n    let members = [];\r\n\r\n    if (groupName === 'preauthorised') {\r\n      let dataObjectURL = destination.split('/');\r\n      dataObjectURL.pop();\r\n      dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];\r\n      members = this.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);\r\n    } else {\r\n      if (this.groups[groupName] !== undefined) {\r\n        members = this.groups[groupName];\r\n      }\r\n    }\r\n\r\n    return members;\r\n  }\r\n\r\n  /**\r\n  * Creates a group with the given name.\r\n  * @param  {String}  groupName\r\n  */\r\n  createGroup(groupName) {\r\n    this.groups[groupName] = [];\r\n    this.saveGroups();\r\n  }\r\n\r\n  deleteGroup(groupName) {\r\n    delete this.groups[groupName];\r\n    this.saveGroups();\r\n  }\r\n\r\n  /**\r\n  * Adds the given user email to the group with the given name.\r\n  * @param  {String}  userEmail\r\n  * @param  {String}  groupName\r\n  */\r\n  addToGroup(groupName, userEmail) {\r\n    let myGroups = this.groups;\r\n    if (myGroups[groupName] !== undefined) {\r\n      if (myGroups[groupName].indexOf(userEmail) === -1) {\r\n        myGroups[groupName].push(userEmail);\r\n        this.saveGroups();\r\n      }\r\n    } else {\r\n      throw Error('Group \"' + groupName + '\" does not exist!');\r\n    }\r\n  }\r\n\r\n  removeFromGroup(groupName, userEmail) {\r\n    let group = this.groups[groupName];\r\n\r\n    group.splice(group.indexOf(userEmail), 1);\r\n    this.saveGroups();\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var context_RuntimeCoreCtx = (RuntimeCoreCtx_RuntimeCoreCtx);\r\n\n// EXTERNAL MODULE: ./node_modules/tv4/tv4.js\nvar tv4 = __webpack_require__(90);\nvar tv4_default = /*#__PURE__*/__webpack_require__.n(tv4);\n\n// CONCATENATED MODULE: ./src/runtime-catalogue/RethinkObject.js\n/**\r\n * Copyright 2016 PT Inovação e Sistemas SA\r\n * Copyright 2016 INESC-ID\r\n * Copyright 2016 QUOBIS NETWORKS SL\r\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n * Copyright 2016 ORANGE SA\r\n * Copyright 2016 Deutsche Telekom AG\r\n * Copyright 2016 Apizee\r\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\n\r\nclass RethinkObject_RethinkObject {\r\n\r\n    /**\r\n     * Validates this RethinkObject against the provided schema.\r\n     *\r\n     * LIMITATIONS: The provided schema cannot contain references to other schemas, since they can't be resolved.\r\n     * @param schema - schema to validate against\r\n     * @returns {boolean} true if valid, false otherwise\r\n     */\r\n    validate(schema) {\r\n        // add schema itself so local references work\r\n        tv4_default.a.addSchema(schema.id, schema);\r\n\r\n        // JSON stringify -> parse needed to have proper validation\r\n        let result = tv4_default.a.validateMultiple(JSON.parse(JSON.stringify(this)), schema);\r\n\r\n        // delete error stacks to improve logging\r\n        result.errors.forEach((error) => {\r\n            delete error.stack;\r\n        });\r\n\r\n        // print more details about validation if it fails or schema contains $refs\r\n        if (!result.valid || (result.missing.length > 0)) {\r\n            console.warn(\"Object validation \" + (result.valid ? \"succeeded, but schema contained references:\" : \"failed:\"), JSON.stringify(result, null, 2));\r\n            console.log(\"Object:\", JSON.stringify(this, null, 2));\r\n        }\r\n        return result.valid;\r\n    }\r\n}\r\n\r\n\r\n/* harmony default export */ var runtime_catalogue_RethinkObject = (RethinkObject_RethinkObject);\r\n\r\n\n// CONCATENATED MODULE: ./src/runtime-catalogue/CatalogueDataObject.js\n/**\r\n * Copyright 2016 PT Inovação e Sistemas SA\r\n * Copyright 2016 INESC-ID\r\n * Copyright 2016 QUOBIS NETWORKS SL\r\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n * Copyright 2016 ORANGE SA\r\n * Copyright 2016 Deutsche Telekom AG\r\n * Copyright 2016 Apizee\r\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\n\r\n/**\r\n * @author alice.cheambe[at]fokus.fraunhofer.de\r\n * The CatalogueDataObject class is the representation of the reTHINK Catalogue Data Model\r\n */\r\nclass CatalogueDataObject_CatalogueDataObject extends runtime_catalogue_RethinkObject {\r\n    /**\r\n     * Creates the Catalogue Data Object\r\n     * @param guid - Global Unique identifier of the Catalogue Object (e.g. Hyperty descriptor, ProtocolStub descriptor,\r\n     * etc) enabling the same object to be stored and discovered in different Catalogues. That means, guid corresponds to\r\n     * [resource-type-id] per BNF of Resource Path. Couldn't we have problems with too long URL paths?\r\n     * @param type - indicates the type of Catalogue Data Object e.g. Hyperty, ProtocolStub, etc\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param objectName - human-understandable name of the catalogue object e.g. \"My Awesome Hyperty\"\r\n     * @param description - description of the source package\r\n     * @param language - the programming language used in the SourcePackage.SourceCode\r\n     * @param sourcePackageURL - A string containing the URL from where the source code package of the corresponding\r\n     * catalogue object, e.g. deployable packages containing executable code for Hyperties or ProtoStubs, can be downloaded\r\n     */\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL) {\r\n        super();\r\n        this._guid = guid;\r\n        this._type = type;\r\n        this._version = version;\r\n        this._objectName = objectName;\r\n        this._description = description;\r\n        this._language = language;\r\n        this._sourcePackageURL = sourcePackageURL;\r\n\r\n        this._signature = null;\r\n        this._sourcePackage = null;\r\n    }\r\n\r\n    // Getters\r\n    get guid() {\r\n        return this._guid;\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    get version() {\r\n        return this._version;\r\n    }\r\n\r\n    get objectName() {\r\n        return this._objectName;\r\n    }\r\n\r\n    get description() {\r\n        return this._description;\r\n    }\r\n\r\n    get language() {\r\n        return this._language;\r\n    }\r\n\r\n    get signature() {\r\n        return this._signature;\r\n    }\r\n\r\n    get sourcePackage() {\r\n        return this._sourcePackage;\r\n    }\r\n\r\n    get sourcePackageURL() {\r\n        return this._sourcePackageURL;\r\n    }\r\n\r\n\r\n    // Setters\r\n    /**\r\n     * Set the signature to enables integrity and authenticity verification\r\n     * @param signature\r\n     */\r\n    set signature(signature) {\r\n        if (signature)\r\n            this._signature = signature;\r\n    }\r\n\r\n    set sourcePackage(sourcePackage) {\r\n        if (sourcePackage)\r\n            this._sourcePackage = sourcePackage;\r\n    }\r\n\r\n    set guid(guid) {\r\n        if (guid)\r\n            this._guid = guid;\r\n    }\r\n\r\n    set type(type) {\r\n        if (type)\r\n            this._type = type;\r\n    }\r\n\r\n    set version(version) {\r\n        if (version) {\r\n            this._version = version;\r\n        }\r\n    }\r\n\r\n    set objectName(objectName) {\r\n        if (objectName)\r\n            this._objectName = objectName;\r\n    }\r\n\r\n    set description(description) {\r\n        if (description)\r\n            this._description = description;\r\n    }\r\n\r\n    set language(language) {\r\n        if (language)\r\n            this._language = language;\r\n    }\r\n\r\n    set sourcePackageURL(sourcePackageURL) {\r\n        if (sourcePackageURL)\r\n            this._sourcePackageURL = sourcePackageURL;\r\n    }\r\n}\r\n//Alice: removed POLICY_ENFORCER: 'policy_enforcer', DATA_SCHEMA: 'data_schema' from the list\r\n//wrt: https://github.com/reTHINK-project/dev-service-framework/blob/develop/docs/datamodel/core/hyperty-catalogue/readme.md#data-object-schema\r\nconst CatalogueObjectType = {\r\n    HYPERTY: 'hyperty', PROTOSTUB: 'protostub', HYPERTY_RUNTIME: 'hyperty_runtime',\r\n    HYPERTY_INTERCEPTOR: 'hyperty_inspector', HYPERTY_DATA_OBJECT: 'hyperty_data_object'\r\n};\r\nconst DataObjectSourceLanguage = {\r\n    JAVASCRIPT_ECMA6: 'javascript_ecma6', JAVASCRIPT_ECMA5: 'javascript_ecma5',\r\n    JSON_SCHEMA_V4: 'json_schema_v4', PYTHON: 'python', TYPESCRIPT: 'typescript'\r\n};\r\n/* harmony default export */ var runtime_catalogue_CatalogueDataObject = (CatalogueDataObject_CatalogueDataObject);\n// CONCATENATED MODULE: ./src/runtime-catalogue/SourcePackage.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n * Created by amo on 14/11/2015.\r\n */\r\nclass SourcePackage {\r\n    constructor(sourceCodeClassname, sourceCode) {\r\n        this._sourceCode = sourceCode;\r\n        this._sourceCodeClassname = sourceCodeClassname;\r\n\r\n        this._encoding = null;\r\n        this._signature = null;\r\n    }\r\n\r\n    get sourceCode() {\r\n        return this._sourceCode;\r\n    }\r\n\r\n    get sourceCodeClassname() {\r\n        return this._sourceCodeClassname;\r\n    }\r\n\r\n    get encoding() {\r\n        return this._encoding;\r\n    }\r\n\r\n    get signature() {\r\n        return this._signature;\r\n    }\r\n\r\n    set encoding(encoding) {\r\n        if (encoding)\r\n            this._encoding = encoding;\r\n    }\r\n\r\n    set signature(sign) {\r\n        if (sign)\r\n            this._signature = sign;\r\n    }\r\n\r\n    set sourceCode(sourceCode) {\r\n        if (sourceCode)\r\n            this._sourceCode = sourceCode;\r\n    }\r\n\r\n    set sourceCodeClassname(sourceCodeClassname) {\r\n        if (sourceCodeClassname)\r\n            this._sourceCodeClassname = sourceCodeClassname;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var runtime_catalogue_SourcePackage = (SourcePackage);\r\n\n// CONCATENATED MODULE: ./src/runtime-catalogue/HypertyDescriptor.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n * Created by amo on 14/11/2015.\r\n */\r\n\r\n\r\nclass HypertyDescriptor_HypertyDescriptor extends runtime_catalogue_CatalogueDataObject {\r\n\r\n    /**\r\n     *\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object enabling the same object to be\r\n     * stored and discovered in different Catalogues. Guid corresponds to <resource-type-id> per BNF of Resource Path.\r\n     * @param {CatalogueObjectType} catalogueType - \tIndicates the type of Catalogue Data Object\r\n     * @param {string} version\r\n     * @param {string} objectName\r\n     * @param {string} description\r\n     * @param {string} language\r\n     * @param {string} sourcePackageURL\r\n     * @param {HypertyResourceType[]} hypertyType A tag that identifies what type of hyperty is described in the object.\r\n     * @param {URL.HypertyCatalogueURLList} dataObjectUrls - It defines the Data Object Schemas supported by the Hyperty\r\n     * through a list of Catalogue URLs from where these schemas can be reached\r\n     */\r\n    constructor(guid, catalogueType, version, objectName, description, language, sourcePackageURL, hypertyType, dataObjectUrls) {\r\n        super(guid, catalogueType, version, objectName, description, language, sourcePackageURL);\r\n\r\n        this._configuration = {};\r\n        this._constraints = {};\r\n        this._policies = {};\r\n        this._messageSchema = null;\r\n\r\n        this._hypertyType = hypertyType;\r\n        this._dataObjects = dataObjectUrls;\r\n    }\r\n\r\n    get hypertyType() {\r\n        return this._hypertyType;\r\n    }\r\n\r\n    get dataObjects() {\r\n        return this._dataObjects;\r\n    }\r\n\r\n    get configuration() {\r\n        return this._configuration;\r\n    }\r\n\r\n    get constraints() {\r\n        return this._constraints;\r\n    }\r\n\r\n    get messageSchema() {\r\n        return this._messageSchema;\r\n    }\r\n\r\n    get policies() {\r\n        return this._policies;\r\n    }\r\n\r\n    set hypertyType(hType) {\r\n        if (hType)\r\n            this._hypertyType = hType;\r\n    }\r\n\r\n    set dataObjects(dataObjects) {\r\n        if (dataObjects)\r\n            this._dataObjects = dataObjects;\r\n    }\r\n\r\n    set configuration(configuration) {\r\n        if (configuration)\r\n            this._configuration = configuration;\r\n    }\r\n\r\n    set constraints(constraints) {\r\n        if (constraints)\r\n            this._constraints = constraints;\r\n    }\r\n\r\n    set messageSchema(messageSchema) {\r\n        if (messageSchema)\r\n            this._messageSchema = messageSchema;\r\n    }\r\n\r\n    set policies(policies) {\r\n        if (policies)\r\n            this._policies = policies;\r\n    }\r\n\r\n}\r\n\r\n\r\nconst RuntimeHypertyCapabilityType = {};\r\nconst HypertyType = {COMMUNICATOR: 'communicator', IDENTITY: 'identity', CONTEXT: 'context'};\r\nconst HypertyResourceType = {chat: 'CHAT', audio: 'Audio', video: 'Video', av: 'AV', screen:'SCREEN',\r\n    file: 'FILe', midi:'MIDI'};\r\n/* harmony default export */ var runtime_catalogue_HypertyDescriptor = (HypertyDescriptor_HypertyDescriptor);\n// CONCATENATED MODULE: ./src/runtime-catalogue/ProtocolStubDescriptor.js\n/**\r\n * Copyright 2016 PT Inovação e Sistemas SA\r\n * Copyright 2016 INESC-ID\r\n * Copyright 2016 QUOBIS NETWORKS SL\r\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n * Copyright 2016 ORANGE SA\r\n * Copyright 2016 Deutsche Telekom AG\r\n * Copyright 2016 Apizee\r\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\n/**\r\n * Created by amo on 14/11/2015.\r\n */\r\n\r\n\r\n\r\nclass ProtocolStubDescriptor_ProtocolStubDescriptor extends runtime_catalogue_CatalogueDataObject {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL, messageSchemas, configuration,\r\n                constraints, hypertyType, dataObjects, interworking, idpProxy, mutualAuthentication) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL);\r\n\r\n        this._messageSchemas = messageSchemas;\r\n\r\n        if (configuration)\r\n            this._configuration = configuration;\r\n        else\r\n            this._configuration = {};\r\n\r\n        if (constraints)\r\n            this._constraints = constraints;\r\n        else\r\n            this._constraints = {};\r\n\r\n        this._hypertyType = hypertyType;\r\n\r\n        if (dataObjects)\r\n            this._dataObjects = dataObjects;\r\n        else\r\n            this._dataObjects = [];\r\n        \r\n        this._interworking = interworking;\r\n        this._idpProxy = idpProxy;\r\n        this._mutualAuthentication = mutualAuthentication;\r\n\r\n    }\r\n\r\n    get messageSchemas() {\r\n        return this._messageSchemas;\r\n    }\r\n\r\n    get constraints() {\r\n        return this._constraints;\r\n    }\r\n\r\n    get configuration() {\r\n        return this._configuration;\r\n    }\r\n\r\n    set messageSchemas(messageSchemas) {\r\n        if (messageSchemas)\r\n            this._messageSchemas = messageSchemas;\r\n    }\r\n\r\n    set constraints(constraints) {\r\n        if (constraints)\r\n            this._constraints = constraints;\r\n    }\r\n\r\n    set configuration(configuration) {\r\n        if (configuration)\r\n            this._configuration = configuration;\r\n    }\r\n\r\n    get hypertyType() {\r\n        return this._hypertyType;\r\n    }\r\n\r\n    set hypertyType(value) {\r\n        this._hypertyType = value;\r\n    }\r\n\r\n    get dataObjects() {\r\n        return this._dataObjects;\r\n    }\r\n\r\n    set dataObjects(value) {\r\n        this._dataObjects = value;\r\n    }\r\n\r\n    get interworking() {\r\n        return this._interworking;\r\n    }\r\n\r\n    set interworking(value) {\r\n        this._interworking = value;\r\n    }\r\n\r\n    get idpProxy() {\r\n        return this._idpProxy;\r\n    }\r\n\r\n    set idpProxy(value) {\r\n        this._idpProxy = value;\r\n    }\r\n\r\n    get mutualAuthentication() {\r\n        return this._mutualAuthentication;\r\n    }\r\n\r\n    set mutualAuthentication(value) {\r\n        this._mutualAuthentication = value;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var runtime_catalogue_ProtocolStubDescriptor = (ProtocolStubDescriptor_ProtocolStubDescriptor);\n// CONCATENATED MODULE: ./src/runtime-catalogue/HypertyRuntimeDescriptor.js\n/**\r\n * Copyright 2016 PT Inovação e Sistemas SA\r\n * Copyright 2016 INESC-ID\r\n * Copyright 2016 QUOBIS NETWORKS SL\r\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n * Copyright 2016 ORANGE SA\r\n * Copyright 2016 Deutsche Telekom AG\r\n * Copyright 2016 Apizee\r\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\n/**\r\n * Created by amo on 14/11/2015.\r\n */\r\n\r\n\r\n\r\nclass HypertyRuntimeDescriptor_HypertyRuntimeDescriptor extends runtime_catalogue_CatalogueDataObject {\r\n\r\n    constructor(guid, catalogueType, version, objectName, description, language, sourcePackageURL, runtimeType,\r\n                hypertyCapabilities, protocolCapabilities, p2pHandlerStub, p2pRequesterStub) {\r\n        super(guid, catalogueType, version, objectName, description, language, sourcePackageURL);\r\n\r\n        this._runtimeType = runtimeType;\r\n\r\n        if (hypertyCapabilities)\r\n            this._hypertyCapabilities = hypertyCapabilities;\r\n        else\r\n            this._hypertyCapabilities = new RuntimeHypertyCapability(true, false, false, false, false);\r\n        if (protocolCapabilities)\r\n            this._protocolCapabilities = protocolCapabilities;\r\n        else\r\n            this._protocolCapabilities = new RuntimeProtocolCapability(true, false, true, false, false, false);\r\n\r\n        this._p2pHandlerStub = p2pHandlerStub;\r\n        this._p2pRequesterStub = p2pRequesterStub;\r\n    }\r\n\r\n    get runtimeType() {\r\n        return this._runtimeType;\r\n    }\r\n\r\n    get hypertyCapabilities() {\r\n        return this._hypertyCapabilities;\r\n    }\r\n\r\n    get protocolCapabilities() {\r\n        return this._hypertyCapabilities;\r\n    }\r\n\r\n    set runtimeType(runtimeType) {\r\n        if (runtimeType)\r\n            this._runtimeType = runtimeType;\r\n    }\r\n\r\n    set hypertyCapabilities(hypertyCapabilities) {\r\n        if (hypertyCapabilities)\r\n            this._hypertyCapabilities = hypertyCapabilities;\r\n    }\r\n\r\n    set protocolCapabilities(protocolCapabilities) {\r\n        if (protocolCapabilities)\r\n            this._protocolCapabilities = protocolCapabilities;\r\n    }\r\n\r\n    get p2pHandlerStub() {\r\n        return this._p2pHandlerStub;\r\n    }\r\n\r\n    set p2pHandlerStub(value) {\r\n        this._p2pHandlerStub = value;\r\n    }\r\n\r\n    get p2pRequesterStub() {\r\n        return this._p2pRequesterStub;\r\n    }\r\n\r\n    set p2pRequesterStub(value) {\r\n        this._p2pRequesterStub = value;\r\n    }\r\n}\r\n\r\n/**\r\n * A class representation of the capability set of the Runtime Hyperty\r\n */\r\nclass RuntimeHypertyCapability {\r\n    /**\r\n     * Creates an object of the Runtime Hyperty capability set\r\n     * @param {boolean} isWebRTCSupported\r\n     * @param {boolean} isMicSupported\r\n     * @param {boolean} isCameraSupported\r\n     * @param {boolean} isSensorSupported\r\n     * @param {boolean} isORTCSupported\r\n     */\r\n    constructor(isWebRTCSupported, isMicSupported, isCameraSupported, isSensorSupported, isORTCSupported) {\r\n        this._isWebRTC = isWebRTCSupported;\r\n        this._isMic = isMicSupported;\r\n        this._isCamera = isCameraSupported;\r\n        this._isSensor = isSensorSupported;\r\n        this._isORTC = isORTCSupported;\r\n    }\r\n\r\n    get isMic() {\r\n        return this._isMic;\r\n    }\r\n\r\n    get isCamera() {\r\n        return this._isCamera;\r\n    }\r\n\r\n    get isSensor() {\r\n        return this._isSensor;\r\n    }\r\n\r\n    get isWebRTC() {\r\n        return this._isWebRTC;\r\n    }\r\n\r\n    get isORTCS() {\r\n        return this._isORTC;\r\n    }\r\n\r\n    getCapabilitySet() {\r\n        return JSON.stringify(this);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * A class representation of the protocol capability set of the Runtime Hyperty\r\n */\r\nclass RuntimeProtocolCapability {\r\n\r\n    /**\r\n     * Creates an object of the runtime protocol capability\r\n     * @param {boolean} isHttp\r\n     * @param {boolean} isHttps\r\n     * @param {boolean} isWS\r\n     * @param {boolean} isWSS\r\n     * @param {boolean} isCoap\r\n     * @param {boolean} isDataChannel\r\n     */\r\n    constructor(isHttp, isHttps, isWS, isWSS, isCoap, isDataChannel) {\r\n        this._isHttp = isHttp;\r\n        this._isHttps = isHttps;\r\n        this._isWS = isWS;\r\n        this._isWSS = isWSS;\r\n        this._isCoap = isCoap;\r\n        this._isDataChannel = isDataChannel;\r\n    }\r\n\r\n    isHttp() {\r\n        return this._isHttp;\r\n    }\r\n\r\n    isHttps() {\r\n        return this._isHttps;\r\n    }\r\n\r\n    isWS() {\r\n        return this._isWS;\r\n    }\r\n\r\n    isSensorSupported() {\r\n        return this._isSensor;\r\n    }\r\n\r\n    isWSS() {\r\n        return this._isWSS;\r\n    }\r\n\r\n    isCoap() {\r\n        return this._isCoap;\r\n    }\r\n\r\n    isDataChannel() {\r\n        return this._isDataChannel;\r\n    }\r\n\r\n\r\n    getCapabilitySet() {\r\n        return JSON.stringify(this);\r\n    }\r\n}\r\n\r\nconst RuntimeType = {BROWSER: 'browser', STANDALONE: 'standalone', SERVER: 'server', GATEWAY: 'gateway'};\r\n\r\n/* harmony default export */ var runtime_catalogue_HypertyRuntimeDescriptor = (HypertyRuntimeDescriptor_HypertyRuntimeDescriptor);\r\n\n// CONCATENATED MODULE: ./src/runtime-catalogue/HypertyInterceptorDescriptor.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n * Created by pzu on 19.11.15.\r\n */\r\n\r\n\r\nclass HypertyInterceptorDescriptor_PolicyEnforcerDescriptor extends runtime_catalogue_CatalogueDataObject {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL, configuration, policies) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL);\r\n\r\n        this._configuration = configuration;\r\n        this._policies = policies;\r\n    }\r\n\r\n    get configuration() {\r\n        return this._configuration;\r\n    }\r\n\r\n    get policies() {\r\n        return this._policies;\r\n    }\r\n\r\n    set policies(policies) {\r\n        this._policies = policies;\r\n    }\r\n\r\n    set configuration(configuration) {\r\n        this._configuration = configuration;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var HypertyInterceptorDescriptor = (HypertyInterceptorDescriptor_PolicyEnforcerDescriptor);\n// CONCATENATED MODULE: ./src/runtime-catalogue/DataObjectSchema.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n/**\r\n * Created by pzu on 19.11.15.\r\n */\r\n\r\n\r\n\r\nclass DataObjectSchema_DataObjectSchema extends runtime_catalogue_CatalogueDataObject {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL);\r\n    }\r\n\r\n}\r\n\r\n\r\n//Children\r\nclass MessageDataObjectSchema extends DataObjectSchema_DataObjectSchema {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL);\r\n    }\r\n}\r\n\r\nclass HypertyDataObjectSchema extends DataObjectSchema_DataObjectSchema {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy, dataUrlScheme) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL);\r\n        this._accessControlPolicy = accessControlPolicy;\r\n        this._scheme = dataUrlScheme;\r\n    }\r\n}\r\n\r\n//Children\r\nclass CommunicationDataObjectSchema extends HypertyDataObjectSchema {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy);\r\n    }\r\n}\r\n\r\nclass ConnectionDataObjectSchema extends HypertyDataObjectSchema {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy);\r\n    }\r\n}\r\n\r\nclass IdentityDataObjectSchema extends HypertyDataObjectSchema {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy);\r\n    }\r\n}\r\n\r\nclass ContextDataObjectSchema extends HypertyDataObjectSchema {\r\n    constructor(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy) {\r\n        super(guid, type, version, objectName, description, language, sourcePackageURL, accessControlPolicy);\r\n    }\r\n}\r\n\r\nconst DataUrlScheme = {\r\n    COMM: 'COMM', CONNECTION: 'CONNECTION', CTXT: 'CTXT', IDENTITY: 'IDENTITY'\r\n};\r\n\r\n/* harmony default export */ var runtime_catalogue_DataObjectSchema = (DataObjectSchema_DataObjectSchema);\n// CONCATENATED MODULE: ./src/runtime-catalogue/CatalogueDataObjectFactory.js\n/**\r\n * Copyright 2016 PT Inovação e Sistemas SA\r\n * Copyright 2016 INESC-ID\r\n * Copyright 2016 QUOBIS NETWORKS SL\r\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n * Copyright 2016 ORANGE SA\r\n * Copyright 2016 Deutsche Telekom AG\r\n * Copyright 2016 Apizee\r\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass CatalogueDataObjectFactory_CatalogueDataObjectFactory {\r\n\r\n    /**\r\n     * Create CatalogueDataObject\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {CatalogueObjectType} type - Indicates the type of Catalogue Data Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object can be downloaded.\r\n     * @returns {CatalogueDataObject}\r\n     */\r\n    createCatalogueDataObject(guid, type, version, objectName, description, language, sourcePackageURL) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof type === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n        return new runtime_catalogue_CatalogueDataObject(guid, type, version, objectName, description, language, sourcePackageURL);\r\n    }\r\n\r\n    /**\r\n     * Create HypertyDescriptor\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object\r\n     * can be downloaded.\r\n     * @param {HypertyResourceType[]} hypertyType - An array of HypertyResourceType that identifies what type of hyperty\r\n     * resources are handled by the object.\r\n     * @param {URL.URLList} dataObjects - Defines the Data Object Schemas supported by the Hyperty through a list of Catalogue URLs from where these schemas can be reached.\r\n     * @returns {HypertyDescriptor}\r\n     */\r\n    createHypertyDescriptorObject(guid, version, objectName, description, language, sourcePackageURL, hypertyType,\r\n                                  dataObjects) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n            || typeof hypertyType === \"undefined\"\r\n            || typeof dataObjects === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n        return new runtime_catalogue_HypertyDescriptor(guid, CatalogueObjectType.HYPERTY, version, objectName, description,\r\n            language, sourcePackageURL, hypertyType, dataObjects);\r\n    }\r\n\r\n    /**\r\n     * Create ProtocolStubDescriptor\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object can be downloaded.\r\n     * @param {URL.URL} messageSchemas - Defines the Schema describing the Message Data Model used by the Hyperty through the Catalogue URL from where the Message schema can be reached. If not defined, by default it is assumed the standard Message Model is used.\r\n     * @param configuration - Data required to configure the ProtocolStub\r\n     * @param constraints - Describes capabilities required from the Hyperty Runtime in order to be able to execute the ProtocolStub\r\n     * @param hypertyType\r\n     * @param dataObjects\r\n     * @param interworking\r\n     * @param idpProxy\r\n     * @param mutualAuthentication\r\n     * @returns {ProtocolStubDescriptor}\r\n     */\r\n    createProtoStubDescriptorObject(guid, version, objectName, description, language, sourcePackageURL, messageSchemas,\r\n                                    configuration, constraints, hypertyType, dataObjects, interworking, idpProxy, mutualAuthentication) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n            || typeof messageSchemas === \"undefined\"\r\n            || typeof configuration === \"undefined\"\r\n            || typeof constraints === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n        return new runtime_catalogue_ProtocolStubDescriptor(guid, CatalogueObjectType.PROTOSTUB, version, objectName, description,\r\n            language, sourcePackageURL, messageSchemas, configuration, constraints, hypertyType, dataObjects, interworking, idpProxy, mutualAuthentication);\r\n    }\r\n\r\n    /**\r\n     * Create HypertyRuntimeDescriptor\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object can be downloaded.\r\n     * @param {RuntimeType}runtimeType\r\n     * @param {RuntimeHypertyCapabilities} hypertyCapabilities - Supported capabilities to execute Hyperties\r\n     * @param {RuntimeProtocolCapabilities} protocolCapabilities - Supported capabilities to execute Protocol Stubs\r\n     * @param p2pHandlerStub\r\n     * @param p2pRequesterStub\r\n     * @returns {HypertyRuntimeDescriptor} the data object of the Hyperty Runtime Descriptor\r\n     */\r\n    createHypertyRuntimeDescriptorObject(guid, version, objectName, description, language, sourcePackageURL,\r\n                                         runtimeType, hypertyCapabilities, protocolCapabilities, p2pHandlerStub, p2pRequesterStub) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n            || typeof runtimeType === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n\r\n        return new runtime_catalogue_HypertyRuntimeDescriptor(guid, CatalogueObjectType.HYPERTY_RUNTIME, version, objectName,\r\n            description, language, sourcePackageURL, runtimeType, hypertyCapabilities, protocolCapabilities, p2pHandlerStub, p2pRequesterStub);\r\n    }\r\n\r\n    /**\r\n     * Create Hyperty Interceptor Descriptor\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object can be downloaded.\r\n     * @param configuration\r\n     * @param policies\r\n     * @returns {PolicyEnforcerDescriptor}\r\n     */\r\n    createHypertyInterceptorDescriptorObject(guid, version, objectName, description, language, sourcePackageURL, configuration,\r\n                                             policies) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n\r\n        return new HypertyInterceptorDescriptor(guid, CatalogueObjectType.HYPERTY_INTERCEPTOR, version, objectName,\r\n            description, language, sourcePackageURL, configuration, policies);\r\n    }\r\n\r\n    /**\r\n     * Create DataObjectSchema which in effect is the MessageDataObjectSchema\r\n     * @deprecated Use either createMessageDataObjectSchema or createHypertyDataObjectSchema instead\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object can be downloaded.\r\n     * @returns {DataObjectSchema}\r\n     */\r\n    createDataObjectSchema(guid, version, objectName, description, language, sourcePackageURL) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n\r\n        return new DataObjectSchema_DataObjectSchema(guid, CatalogueObjectType.HYPERTY_DATA_OBJECT, version, objectName, description, language,\r\n            sourcePackageURL);\r\n    }\r\n\r\n    /**\r\n     * Create DataObjectSchema which in effect is the MessageDataObjectSchema\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object can be downloaded.\r\n     * @returns {DataObjectSchema}\r\n     */\r\n    createMessageDataObjectSchema(guid, version, objectName, description, language, sourcePackageURL) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n\r\n        return new DataObjectSchema_DataObjectSchema(guid, CatalogueObjectType.HYPERTY_DATA_OBJECT, version, objectName, description, language,\r\n            sourcePackageURL);\r\n    }\r\n\r\n    /**\r\n     * Create HypertyDataObjectSchema\r\n     * @param {string} guid - Catalogue Global Unique identifier of the Catalogue Object\r\n     * @param {string} version - Indicates the version of Catalogue Data\r\n     * @param {string} objectName - Human-understandable name of the catalogue object\r\n     * @param {string} description\r\n     * @param {DataObjectSourceLanguage} language - Programming language used in the SourcePackage\r\n     * @param {string} sourcePackageURL - URL from where the source code package of the corresponding catalogue object can be downloaded.\r\n     * @param {string} accessControlPolicy - policy rule to access object (see Reporter-Observer Comm pattern)\r\n     * @param {DataUrlScheme} scheme - identifies the data scheme (COMM, CONNECTION, CTXT or IDENTITY)\r\n     * @returns {DataObjectSchema}\r\n     */\r\n    createHypertyDataObjectSchema(guid, version, objectName, description, language, sourcePackageURL,\r\n                                  accessControlPolicy, scheme) {\r\n        if (\r\n            typeof guid === \"undefined\"\r\n            || typeof version === \"undefined\"\r\n            || typeof objectName === \"undefined\"\r\n            || typeof description === \"undefined\"\r\n            || typeof language === \"undefined\"\r\n            || typeof sourcePackageURL === \"undefined\"\r\n            || typeof scheme === \"undefined\"\r\n            || typeof accessControlPolicy === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n\r\n        if (scheme === DataUrlScheme.COMM)\r\n            return new CommunicationDataObjectSchema(guid, CatalogueObjectType.HYPERTY_DATA_OBJECT, version, objectName, description,\r\n                language, sourcePackageURL, scheme, accessControlPolicy);\r\n        else if (scheme === DataUrlScheme.CONNECTION)\r\n            return new ConnectionDataObjectSchema(guid, CatalogueObjectType.HYPERTY_DATA_OBJECT, version, objectName, description,\r\n                language, sourcePackageURL, scheme, accessControlPolicy);\r\n        else if (scheme === DataUrlScheme.CTXT)\r\n            return new ContextDataObjectSchema(guid, CatalogueObjectType.HYPERTY_DATA_OBJECT, version, objectName, description,\r\n                language, sourcePackageURL, scheme, accessControlPolicy);\r\n        else if (scheme === DataUrlScheme.IDENTITY)\r\n            return new IdentityDataObjectSchema(guid, CatalogueObjectType.HYPERTY_DATA_OBJECT, version, objectName, description,\r\n                language, sourcePackageURL, scheme, accessControlPolicy);\r\n    }\r\n\r\n    /**\r\n     * Create SourcePackage\r\n     * @param sourceCodeClassname - The Class-name of the SourceCode\r\n     * @param sourceCode - The source code of the catalogue object\r\n     * @returns {SourcePackage}\r\n     */\r\n    createSourcePackage(sourceCodeClassname, sourceCode) {\r\n        if (\r\n            typeof sourceCode === \"undefined\"\r\n            || typeof sourceCodeClassname === \"undefined\"\r\n        )\r\n            throw new Error(\"Invalid parameters!\");\r\n\r\n        return new runtime_catalogue_SourcePackage(sourceCodeClassname, sourceCode);\r\n\r\n    }\r\n}\r\n/* harmony default export */ var runtime_catalogue_CatalogueDataObjectFactory = (CatalogueDataObjectFactory_CatalogueDataObjectFactory);\r\n\n// CONCATENATED MODULE: ./src/runtime-catalogue/RuntimeCatalogue.js\n// Log System\r\n\r\nlet RuntimeCatalogue_log = loglevel[\"getLogger\"]('RuntimeCatalogue');\r\n\r\n\r\n\r\nclass RuntimeCatalogue_RuntimeCatalogue {\r\n\r\n  constructor(runtimeFactory, name, schema) {\r\n    if (!runtimeFactory) throw Error('The catalogue needs the runtimeFactory');\r\n\r\n    this._runtimeFactory = runtimeFactory;\r\n\r\n    this._factory = new runtime_catalogue_CatalogueDataObjectFactory();\r\n    this.httpRequest = runtimeFactory.createHttpRequest();\r\n    this.atob = runtimeFactory.atob ? runtimeFactory.atob : atob;\r\n\r\n    const storageName = name ? name : 'runtimeCatalogue';\r\n    const storageSchema = schema ? schema : '&cguid, accessControlPolicy, constraints, dataObjects, type, objectName, sourcePackage, version, url';\r\n\r\n    const schemas = {};\r\n    schemas[storageName] = storageSchema;\r\n\r\n    this.storageManager = runtimeFactory.storageManager(storageName, schemas);\r\n\r\n  }\r\n\r\n  /**\r\n     * Get a Catalogue Data Object (Descriptor) from a URL, and construct it using the provided function\r\n     * @param {String} descriptorURL - e.g. mydomain.com/.well-known/hyperty/MyHyperty\r\n     * @param {function} createFunc - e.g. createHyperty\r\n     * @param {boolean} [getFull] - whether or not to get descriptor with sourcePackage, or only the descriptor part\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise} - Promise that fulfills with the requested descriptor in the appropriate type.\r\n     * If constraints were provided, a descriptor is only returned if it meets the constraints, otherwise the promise will be rejected.\r\n     */\r\n    getDescriptor(descriptorURL, createFunc, getFull = true, constraints) {\r\n      RuntimeCatalogue_log.info('[RuntimeCatalogue] - getting descriptor from: ', descriptorURL, ' with constraints: ', constraints);\r\n\r\n      return new Promise ((resolve, reject)=>{\r\n        if (this._runtimeFactory.isOnline() ) {\r\n            resolve( this._getDescriptor(descriptorURL, createFunc, getFull, constraints));\r\n        } else {\r\n          this.storageManager.get('url', descriptorURL).then((descriptor) => {\r\n            console.log('[RuntimeCatalogue] saved offline descriptor ', descriptor);\r\n\r\n            if (descriptor) resolve(createFunc.apply(this, [descriptor, constraints]));\r\n            else resolve( this._getDescriptor(descriptorURL, createFunc, getFull, constraints));\r\n\r\n          });\r\n        } \r\n  \r\n      });\r\n\r\n    }\r\n\r\n    _getDescriptor(descriptorURL, createFunc, getFull = true, constraints) {\r\n\r\n    // some flags for optimization\r\n    // (later the descriptor will not be saved in case both of these booleans are true)\r\n    let isSavedDescriptor = false;\r\n    let isCompleteDescriptor = false;\r\n\r\n    // get raw descriptor\r\n    // first checks if descriptor is already in localStorage (based on cguid and version)\r\n    let descriptorPromise;\r\n    if (constraints != undefined) {\r\n      descriptorPromise = Promise.all([this.httpRequest.post(descriptorURL + '/version', {body: JSON.stringify(constraints)}), this.httpRequest.post(descriptorURL + '/cguid', {body: JSON.stringify(constraints)})])\r\n    } else {\r\n      descriptorPromise = Promise.all([this.httpRequest.get(descriptorURL + '/version'), this.httpRequest.get(descriptorURL + '/cguid')])\r\n    }\r\n    descriptorPromise = descriptorPromise.then(([version, cguid]) => {\r\n      RuntimeCatalogue_log.log('[RuntimeCatalogue.getDescriptor] - got version (' + version + ') and cguid (' + cguid + ') for descriptor ' + descriptorURL);\r\n\r\n      // check if same version is contained in localStorage\r\n      return this.storageManager.getVersion('cguid', cguid).then((dbVersion) => {\r\n        if (dbVersion >= version) {\r\n          RuntimeCatalogue_log.log('[RuntimeCatalogue.getDescriptor] local version is updated for ', descriptorURL);\r\n          isSavedDescriptor = true;\r\n          return this.storageManager.get('cguid', cguid);\r\n        } else {\r\n          RuntimeCatalogue_log.log('[RuntimeCatalogue.getDescriptor] local version not updated for ', descriptorURL, ' retrieving from remote catalogue ...');\r\n\r\n          // no saved copy, proceed with retrieving descriptor\r\n          let retrievePromise = constraints != undefined ? this.httpRequest.post(descriptorURL, {body: JSON.stringify(constraints)}) : this.httpRequest.get(descriptorURL);\r\n          return retrievePromise.then((descriptor) => {\r\n            descriptor = JSON.parse(descriptor);\r\n\r\n            //log.log(\"got descriptor:\", JSON.stringify(descriptor, null, 2));\r\n            if (descriptor['ERROR']) {\r\n              // TODO handle error properly\r\n              throw new Error(descriptor);\r\n            } else {\r\n              return descriptor;\r\n            }\r\n          });\r\n        }\r\n      })\r\n    }).catch((error) => {\r\n      let errorString = 'Unable to get descriptor for ' + descriptorURL + (constraints != undefined ? ' with constraints ' + constraints : '') + ': ' + error;\r\n      RuntimeCatalogue_log.error(errorString);\r\n      throw new Error(errorString);\r\n    });\r\n\r\n    let returnPromise = descriptorPromise;\r\n\r\n    // if getFull, attach sourcePackage\r\n    if (getFull) {\r\n      RuntimeCatalogue_log.log('adding promise to attach sourcePackage');\r\n      returnPromise = descriptorPromise.then((descriptor) => {\r\n        if (descriptor.sourcePackage) {\r\n          isCompleteDescriptor = true;\r\n          return descriptor;\r\n        } else {\r\n          isCompleteDescriptor = false;\r\n          return this.attachRawSourcePackage(descriptor);\r\n        }\r\n      })\r\n    }\r\n\r\n    // finally create object\r\n    returnPromise = returnPromise.then((descriptor) => {\r\n      // store if not saved before, or if full descriptor was requested and only partial descriptor was stored.\r\n      if (!isSavedDescriptor || (isSavedDescriptor && !isCompleteDescriptor && getFull)) {\r\n        descriptor.url = descriptorURL;\r\n        this.storageManager.set(descriptor.cguid, descriptor.version, descriptor);\r\n      }\r\n      return createFunc.apply(this, [descriptor, constraints]);\r\n    });\r\n\r\n    return returnPromise;\r\n  }\r\n\r\n  /**\r\n     * Uses the sourcePackageURL from the descriptor, requests the sourcePackage and attaches it to the descriptor.\r\n     * @param {CatalogueDataObject} descriptor\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise} - fulfills with complete descriptor\r\n     */\r\n  attachRawSourcePackage(descriptor, constraints) {\r\n    RuntimeCatalogue_log.log('attaching raw sourcePackage from:', descriptor.sourcePackageURL);\r\n    return new Promise((resolve, reject) => {\r\n      let retrievePromise = constraints != undefined ? this.httpRequest.post(descriptor.sourcePackageURL, {body: JSON.stringify(constraints)}) : this.httpRequest.get(descriptor.sourcePackageURL);\r\n      retrievePromise.then((sourcePackage) => {\r\n        sourcePackage = JSON.parse(sourcePackage);\r\n\r\n        //delete descriptor.sourcePackageURL;\r\n        //log.log(\"attaching sourcePackage:\", sourcePackage);\r\n        descriptor.sourcePackage = sourcePackage;\r\n        resolve(descriptor);\r\n      }).catch((reason) => {\r\n        reject(reason);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n     * Get HypertyDescriptor\r\n     * @param hypertyURL - e.g. mydomain.com/.well-known/hyperty/MyHyperty\r\n     * @param {boolean} [getFull] - boolean to decide to get the descriptor with the sourcePackage or (potentially) without\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise}\r\n     */\r\n  getHypertyDescriptor(hypertyURL, getFull = true, constraints) {\r\n    return this.getDescriptor(hypertyURL, this.createHyperty, getFull, constraints)\r\n  }\r\n\r\n  /**\r\n     * Get StubDescriptor\r\n     * @param stubURL - e.g. mydomain.com/.well-known/protostub/MyProtostub\r\n     * @param {boolean} [getFull] - boolean to decide to get the descriptor with the sourcePackage or (potentially) without\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise}\r\n     */\r\n  getStubDescriptor(stubURL, getFull = true, constraints) {\r\n    return this.getDescriptor(stubURL, this.createStub, getFull, constraints)\r\n  }\r\n\r\n  /**\r\n     * Get RuntimeDescriptor\r\n     * @param runtimeURL - e.g. mydomain.com/.well-known/runtime/MyRuntime\r\n     * @param {boolean} [getFull] - boolean to decide to get the descriptor with the sourcePackage or (potentially) without\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise}\r\n     */\r\n  getRuntimeDescriptor(runtimeURL, getFull = true, constraints) {\r\n    return this.getDescriptor(runtimeURL, this.createRuntimeDescriptor, getFull, constraints)\r\n  }\r\n\r\n  /**\r\n     * Get DataSchemaDescriptor\r\n     * @param dataSchemaURL - e.g. mydomain.com/.well-known/dataschema/MyDataSchema\r\n     * @param {boolean} [getFull] - boolean to decide to get the descriptor with the sourcePackage or (potentially) without\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise}\r\n     */\r\n  getDataSchemaDescriptor(dataSchemaURL, getFull = true, constraints) {\r\n\r\n    //    return this.getDescriptor(dataSchemaURL, this.createDataSchema, getFull, constraints)\r\n    return new Promise((resolve)=> {\r\n      let schema = dataSchemaURL.split('/dataschema/')[1];\r\n      RuntimeCatalogue_log.log('[RuntimeCatalogue.getDataSchemaDescriptor] schema ', schema);\r\n      let descriptor = {\r\n        sourcePackage: {\r\n          sourceCode: {\r\n            properties: {\r\n            }\r\n          }\r\n\r\n        }\r\n      };\r\n    //      let scheme = properties.scheme ? properties.scheme.co : [];\r\n  \r\n      switch (schema) {\r\n        case 'Context':\r\n        case 'ContextReporter':\r\n        case 'ContextObserver':\r\n          descriptor.sourcePackage.sourceCode.properties.scheme = 'context';\r\n          break;\r\n        case 'Connection':\r\n          descriptor.sourcePackage.sourceCode.properties.scheme = 'connection';\r\n          break;\r\n        case 'WalletData':\r\n          descriptor.sourcePackage.sourceCode.properties.scheme = 'walletData';\r\n          break;\r\n        case 'Communication':\r\n          descriptor.sourcePackage.sourceCode.properties.scheme = 'comm';\r\n          descriptor.sourcePackage.sourceCode.properties.childrens = ['resources'];\r\n          break;\r\n        case 'HelloWorldDataSchema':\r\n          descriptor.sourcePackage.sourceCode.properties.scheme = 'hello';\r\n          break;\r\n        default:\r\n          descriptor.sourcePackage.sourceCode.properties.scheme = 'resource';\r\n          descriptor.sourcePackage.sourceCode.properties.childrens = [];\r\n          break;\r\n      }\r\n      resolve(descriptor);\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n     * Get IDPProxyDescriptor\r\n     * @param idpProxyURL - e.g. mydomain.com/.well-known/idp-proxy/MyProxy\r\n     * @param {boolean} [getFull] - boolean to decide to get the descriptor with the sourcePackage or (potentially) without\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise}\r\n     */\r\n  getIdpProxyDescriptor(idpProxyURL, getFull = true, constraints) {\r\n    return this.getDescriptor(idpProxyURL, this.createIdpProxy, getFull, constraints)\r\n  }\r\n\r\n  /**\r\n     * Create HypertyDescriptor based on raw object that contains its attributes\r\n     * @param {JSON} rawHyperty\r\n     * @returns {HypertyDescriptor}\r\n     */\r\n  createHyperty(rawHyperty) {\r\n    //log.log(\"createHyperty:\", rawHyperty);\r\n    // create the descriptor\r\n    let hyperty = this._factory.createHypertyDescriptorObject(\r\n      rawHyperty['cguid'],\r\n      rawHyperty['version'],\r\n      rawHyperty['objectName'],\r\n      rawHyperty['description'],\r\n      rawHyperty['language'],\r\n      rawHyperty['sourcePackageURL'],\r\n      rawHyperty['type'] || rawHyperty['hypertyType'],\r\n      rawHyperty['dataObjects']\r\n    );\r\n\r\n    //log.log(\"factory returned:\", hyperty);\r\n\r\n    // optional fields\r\n    hyperty.configuration = rawHyperty['configuration'];\r\n    hyperty.constraints = rawHyperty['constraints'];\r\n    hyperty.messageSchema = rawHyperty['messageSchema'];\r\n    hyperty.policies = rawHyperty['policies'];\r\n    hyperty.signature = rawHyperty['signature'];\r\n\r\n    // parse and attach sourcePackage\r\n    let sourcePackage = rawHyperty['sourcePackage'];\r\n    if (sourcePackage) {\r\n      hyperty.sourcePackage = this.createSourcePackage(sourcePackage);\r\n    }\r\n\r\n    return hyperty;\r\n  }\r\n\r\n  /**\r\n     * Create ProtocolStubDescriptor based on raw object that contains its attributes\r\n     * @param rawStub\r\n     * @returns {ProtocolStubDescriptor}\r\n     */\r\n  createStub(rawStub) {\r\n    // log.log(\"creating stub descriptor based on: \", rawStub);\r\n\r\n    // create the descriptor\r\n    let stub = this._factory.createProtoStubDescriptorObject(\r\n      rawStub['cguid'],\r\n      rawStub['version'],\r\n      rawStub['objectName'],\r\n      rawStub['description'],\r\n      rawStub['language'],\r\n      rawStub['sourcePackageURL'],\r\n      rawStub['messageSchemas'],\r\n      rawStub['configuration'],\r\n      rawStub['constraints'],\r\n      rawStub['hypertyType'],\r\n      rawStub['dataObjects'],\r\n      rawStub['interworking'],\r\n      rawStub['idpProxy'],\r\n      rawStub['mutualAuthentication']\r\n    );\r\n\r\n    // optional fields\r\n    stub.signature = rawStub['signature'];\r\n\r\n    // parse and attach the sourcePackage\r\n    let sourcePackage = rawStub['sourcePackage'];\r\n    if (sourcePackage) {\r\n      stub.sourcePackage = this.createSourcePackage(sourcePackage);\r\n    }\r\n\r\n    return stub;\r\n  }\r\n\r\n  /**\r\n     * Create HypertyRuntimeDescriptor based on raw object that contains its attributes\r\n     * @param rawRuntime\r\n     * @returns {HypertyRuntimeDescriptor}\r\n     */\r\n  createRuntimeDescriptor(rawRuntime) {\r\n    // parse capabilities first\r\n    try {\r\n      rawRuntime['hypertyCapabilities'] = JSON.parse(rawRuntime['hypertyCapabilities']);\r\n      rawRuntime['protocolCapabilities'] = JSON.parse(rawRuntime['protocolCapabilities']);\r\n    } catch (e) {\r\n      // already json object\r\n    }\r\n\r\n    //log.log(\"creating runtime descriptor based on: \", rawRuntime);\r\n\r\n\r\n    // create the descriptor\r\n    let runtime = this._factory.createHypertyRuntimeDescriptorObject(\r\n      rawRuntime['cguid'],\r\n      rawRuntime['version'],\r\n      rawRuntime['objectName'],\r\n      rawRuntime['description'],\r\n      rawRuntime['language'],\r\n      rawRuntime['sourcePackageURL'],\r\n      rawRuntime['type'] || rawRuntime['runtimeType'],\r\n      rawRuntime['hypertyCapabilities'],\r\n      rawRuntime['protocolCapabilities'],\r\n      rawRuntime['p2pHandlerStub'],\r\n      rawRuntime['p2pRequesterStub']\r\n    );\r\n\r\n    // optional fields\r\n    runtime.signature = rawRuntime['signature'];\r\n\r\n    // parse and attach sourcePackage\r\n    let sourcePackage = rawRuntime['sourcePackage'];\r\n    if (sourcePackage) {\r\n      // log.log(\"runtime has sourcePackage:\", sourcePackage);\r\n      runtime.sourcePackage = this.createSourcePackage(sourcePackage);\r\n    }\r\n    return runtime;\r\n  }\r\n\r\n  /**\r\n     * Create DataObjectSchema based on raw object that contains its attributes\r\n     * @param rawSchema\r\n     * @returns {DataObjectSchema}\r\n     */\r\n  createDataSchema(rawSchema) {\r\n    //log.log(\"creating dataSchema based on: \", rawSchema);\r\n\r\n    let dataSchema;\r\n\r\n    //log.log('1. createMessageDataObjectSchema: ', rawSchema[\"accessControlPolicy\"]);\r\n    //log.log('2. createMessageDataObjectSchema: ', rawSchema[\"scheme\"]);\r\n    if (rawSchema['accessControlPolicy'] && rawSchema['scheme']) {\r\n      dataSchema = this._factory.createHypertyDataObjectSchema(\r\n        rawSchema['cguid'],\r\n        rawSchema['version'],\r\n        rawSchema['objectName'],\r\n        rawSchema['description'],\r\n        rawSchema['language'],\r\n        rawSchema['sourcePackageURL'],\r\n        rawSchema['accessControlPolicy'],\r\n        rawSchema['scheme']\r\n      )\r\n    } else {\r\n      //log.log('3. createMessageDataObjectSchema: ', rawSchema);\r\n      dataSchema = this._factory.createMessageDataObjectSchema(\r\n        rawSchema['cguid'],\r\n        rawSchema['version'],\r\n        rawSchema['objectName'],\r\n        rawSchema['description'],\r\n        rawSchema['language'],\r\n        rawSchema['sourcePackageURL']\r\n      )\r\n    }\r\n\r\n    // optional fields\r\n    dataSchema.signature = rawSchema['signature'];\r\n\r\n    // parse and attach sourcePackage\r\n    let sourcePackage = rawSchema['sourcePackage'];\r\n    if (sourcePackage) {\r\n      //log.log(\"dataSchema has sourcePackage:\", sourcePackage);\r\n      dataSchema.sourcePackage = this.createSourcePackage(sourcePackage);\r\n\r\n      try {\r\n        dataSchema.sourcePackage.sourceCode = JSON.parse(dataSchema.sourcePackage.sourceCode);\r\n      } catch (e) {\r\n        RuntimeCatalogue_log.log('DataSchema Source code is already parsed');\r\n      }\r\n\r\n      return dataSchema;\r\n\r\n    }\r\n\r\n    //log.log(\"created dataSchema descriptor object:\", dataSchema);\r\n    return dataSchema;\r\n  }\r\n\r\n  /**\r\n     * Create ProtocolStubDescriptor based on raw object that contains its attributes\r\n     * @param rawProxy\r\n     * @returns {ProtocolStubDescriptor}\r\n     */\r\n  createIdpProxy(rawProxy) {\r\n    // log.log(\"creating idpproxy descriptor based on: \", rawProxy);\r\n\r\n    // create the descriptor\r\n    let idpproxy = this._factory.createProtoStubDescriptorObject(\r\n      rawProxy['cguid'],\r\n      rawProxy['version'],\r\n      rawProxy['objectName'],\r\n      rawProxy['description'],\r\n      rawProxy['language'],\r\n      rawProxy['sourcePackageURL'],\r\n      rawProxy['messageSchemas'],\r\n      rawProxy['configuration'],\r\n      rawProxy['constraints'],\r\n      rawProxy['hypertyType'],\r\n      rawProxy['dataObjects'],\r\n      rawProxy['interworking'],\r\n      rawProxy['idpProxy'],\r\n      rawProxy['mutualAuthentication']\r\n    );\r\n\r\n    // optional fields\r\n    idpproxy.signature = rawProxy['signature'];\r\n\r\n    // parse and attach the sourcePackage\r\n    let sourcePackage = rawProxy['sourcePackage'];\r\n    if (sourcePackage) {\r\n      sourcePackage = this.createSourcePackage(sourcePackage);\r\n      idpproxy.sourcePackage = sourcePackage;\r\n    }\r\n\r\n    return idpproxy;\r\n  }\r\n\r\n  createSourcePackage(sp) {\r\n    //log.log(\"createSourcePackage:\", sp);\r\n\r\n    // check encoding\r\n    if (sp['encoding'] === 'base64') {\r\n      sp['sourceCode'] = this.atob(sp['sourceCode']);\r\n      sp['encoding'] = 'utf-8';\r\n    }\r\n\r\n    let sourcePackage = this._factory.createSourcePackage(sp['sourceCodeClassname'], sp['sourceCode']);\r\n    if (sp['encoding'])\r\n      sourcePackage.encoding = sp['encoding'];\r\n\r\n    if (sp['signature'])\r\n      sourcePackage.signature = sp['signature'];\r\n\r\n    return sourcePackage;\r\n  }\r\n\r\n  /**\r\n     * Get source Package from a URL\r\n     * @param sourcePackageURL - e.g. mydomain.com/.well-known/hyperty/MyHyperty/sourcePackage\r\n     * @returns {Promise}\r\n     */\r\n  getSourcePackageFromURL(sourcePackageURL) {\r\n    RuntimeCatalogue_log.log('getting sourcePackage from:', sourcePackageURL);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.httpRequest.get(sourcePackageURL).then((result) => {\r\n        //log.log(\"got raw sourcePackage:\", result);\r\n        if (result['ERROR']) {\r\n          // TODO handle error properly\r\n          reject(result);\r\n        } else {\r\n          result = JSON.parse(result);\r\n          let sourcePackage = this.createSourcePackage(result);\r\n          resolve(sourcePackage);\r\n        }\r\n      }).catch((reason) => {\r\n        reject(reason);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n     * Returns the sourceCode of a given descriptor\r\n     * @param {CatalogueDataObject} descriptor - Catalogue Object that was retrieved using e.g. getHypertyDescriptor()\r\n     * @returns {Promise}\r\n     */\r\n  getSourceCodeFromDescriptor(descriptor) {\r\n    return new Promise((resolve, reject) => {\r\n      if (descriptor.sourcePackage) {\r\n        //log.log(\"descriptor has sourcePackage\");\r\n        //log.log(\"returning sourceCode:\", descriptor.sourcePackage.sourceCode);\r\n        resolve(descriptor.sourcePackage.sourceCode);\r\n      } else {\r\n        this.storageManager.getVersion(descriptor.sourcePackageURL + '/sourceCode').then((dbVersion) => {\r\n          if (dbVersion >= descriptor.version) {\r\n            RuntimeCatalogue_log.log('returning cached version from storageManager');\r\n            this.storageManager.get(descriptor.sourcePackageURL + '/sourceCode').then((sourceCode) => {\r\n              resolve(sourceCode);\r\n            }).catch((reason) => {\r\n              reject(reason);\r\n            });\r\n          } else {\r\n            this.httpRequest.get(descriptor.sourcePackageURL + '/sourceCode').then((sourceCode) => {\r\n              if (sourceCode['ERROR']) {\r\n                // TODO handle error properly\r\n                reject(sourceCode);\r\n              } else {\r\n                this.storageManager.set(descriptor.sourcePackageURL + '/sourceCode', descriptor.version, sourceCode);\r\n                resolve(sourceCode);\r\n              }\r\n            }).catch((reason) => {\r\n              reject(reason);\r\n            });\r\n          }\r\n        }).catch((reason) => {\r\n          reject(reason);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n     * Returns the list of available catalogue objects for the given \"type URL\",\r\n     * i.e. a catalogue URL that specifies a type, but no catalogue object name.\r\n     * @param typeURL - URL pointing to the catalogue object type you want a list of available objects for,\r\n     * e.g. hyperty-catalogue://catalogue.fokus.fraunhofer.de/.well-known/idp-proxy\r\n     * @param {JSON} constraints - constraints object\r\n     * @returns {Promise} typeListPromise - Promise that fulfills with the list of available catalogue object names for the requested type,\r\n     * rejects on HTTP error or if the HTTP response is not in JSON.\r\n     * If constraints were provided, then the list only contains those objects that meet the constraints\r\n     */\r\n  getTypeList(typeURL, constraints) {\r\n    return new Promise((resolve, reject) => {\r\n      let requestPromise = constraints != undefined ? this.httpRequest.post(typeURL, {body: JSON.stringify(constraints)}) : this.httpRequest.get(typeURL);\r\n      requestPromise.then((typeList) => {\r\n        typeList = JSON.parse(typeList);\r\n        resolve(typeList);\r\n      }).catch((reason) => {\r\n        reject(reason);\r\n      });\r\n    });\r\n  }\r\n\r\n  set runtimeURL(runtimeURL) {\r\n    this._runtimeURL = runtimeURL;\r\n  }\r\n\r\n  get runtimeURL() {\r\n    return this._runtimeURL;\r\n  }\r\n\r\n  deleteFromPM(url) {\r\n    return this.storageManager.delete(url);\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ var runtime_catalogue_RuntimeCatalogue = (RuntimeCatalogue_RuntimeCatalogue);\r\n\n// CONCATENATED MODULE: ./src/runtime/RuntimeUA.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\r\n\r\n\r\n\r\n\r\n// Log System\r\n\r\nlet RuntimeUA_log = loglevel[\"getLogger\"]('RuntimeUA');\r\n\r\n//Main dependecies\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import GraphConnector from '../graphconnector/GraphConnector';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Runtime User Agent Interface will process all the dependecies of the core runtime;\r\n * @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n * @version 0.4.0\r\n *\r\n * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;\r\n * @property {RuntimeCatalogue} runtimeCatalogue - Catalogue of components can be installed;\r\n * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;\r\n * @property {IdentityModule} identityModule - Identity Module;\r\n * @property {PEP} policyEngine - Policy Engine Module;\r\n * @property {Registry} registry - Registry Module;\r\n * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)\r\n * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts\r\n * @property {CoreDiscovery} coreDiscovery - Discovery for discovery hyperties/dataObjects\r\n */\r\nclass RuntimeUA_RuntimeUA {\r\n\r\n  /**\r\n   * Create a new instance of Runtime User Agent\r\n   * @param {descriptor} runtimeDescriptor - pass all the hyperty runtime descriptor\r\n   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;\r\n   * @param {domain} domainURL - specify the domain base for the runtime;\r\n   */\r\n  constructor(runtimeDescriptor, runtimeFactory, domain) {\r\n    if (!runtimeDescriptor) throw new Error('The runtime descriptor is a needed parameter');\r\n    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');\r\n    if (!domain) throw new Error('You need the domain of runtime');\r\n\r\n    // Configuration object with information related with servers\r\n    this.runtimeConfiguration = Object.assign({ domain: domain }, runtimeConfiguration_runtimeConfiguration);\r\n    this.runtimeFactory = runtimeFactory;\r\n\r\n    this.log = RuntimeUA_log;\r\n    this.logLevels = loglevel_default.a;\r\n\r\n    if (runtimeDescriptor.p2pHandlerStub && typeof runtimeDescriptor.p2pHandlerStub === 'string' && runtimeDescriptor.p2pHandlerStub.includes('://')) {\r\n      this.p2p = true;\r\n    } else {\r\n      this.p2p = false;\r\n    }\r\n\r\n    runtimeUtils.runtimeDescriptor = runtimeDescriptor;\r\n    this.runtimeUtils = runtimeUtils;\r\n\r\n    this.storages = {};\r\n\r\n/*    if (typeof runtimeFactory.createRuntimeCatalogue === 'function') {\r\n      this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();\r\n    } else {\r\n      throw new Error('Check your Runtime Factory because it needs the Runtime Catalogue implementation');\r\n    }*/\r\n\r\n    this.runtimeCatalogue = new runtime_catalogue_RuntimeCatalogue(runtimeFactory);\r\n\r\n\r\n\r\n/*    if (typeof runtimeFactory.persistenceManager === 'function') {\r\n      this.persistenceManager = runtimeFactory.persistenceManager();\r\n    } else {\r\n      throw new Error('Check your Runtime Factory because it needs the Persistence Manager implementation');\r\n    }*/\r\n\r\n    if (typeof runtimeFactory.storageManager === 'function') {\r\n\r\n      this.storages = Storage_storage(runtimeFactory, this);\r\n\r\n    } else {\r\n      throw new Error('Check your Runtime Factory because it needs the Storage Manager implementation');\r\n    }\r\n\r\n    if (typeof runtimeFactory.runtimeCapabilities === 'function') {\r\n      this.runtimeCapabilities = runtimeFactory.runtimeCapabilities(this.storages.capabilities);\r\n    } else {\r\n      RuntimeUA_log.info('Check your RuntimeFactory because it needs the Runtime Capabilities implementation');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Intialize the installation of runtime\r\n   *\r\n   * @access public\r\n   * @return {Promise<Boolean, Error>} this is Promise and if the installation process happened without any problems returns true otherwise the error.\r\n   *\r\n   * @memberOf RuntimeUA\r\n   */\r\n  init(guid) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.domain = this.runtimeConfiguration.domain;\r\n\r\n\r\n      RuntimeUA_log.info('[RuntimeUA - init] Starting ');\r\n\r\n      try {\r\n        let getCapabilities = this.runtimeCapabilities.getRuntimeCapabilities();\r\n        let getRuntimeURL = this.storages.runtime.get('runtime:URL');\r\n        let getStoredDataObjects = this.storages.syncherManager.get('syncherManager:ObjectURLs');\r\n        let getHypertyStorageObjects = this.storages.hypertyResources.get();\r\n        let getP2PHandlerURL = this.storages.runtime.get('p2pHandler:URL');\r\n//        let getRemotes = this.storages.syncherManager.get('remotes');\r\n\r\n        Promise.all([getRuntimeURL, getCapabilities, getStoredDataObjects, getHypertyStorageObjects, getP2PHandlerURL]).then((results) => {\r\n\r\n          this.runtimeURL = results[0] ? results[0].runtimeURL : results[0];\r\n          if (!this.runtimeURL) {\r\n            this.runtimeURL = 'runtime://' + this.domain + '/' + generateGUID();\r\n            this.storages.runtime.set('runtime:URL', 1, { runtimeURL: this.runtimeURL });\r\n          }\r\n\r\n\r\n          this.capabilities = results[1];\r\n          Object.assign(runtimeUtils.runtimeCapabilities.constraints, results[1]);\r\n\r\n          this._dataObjectsStorage = new store_objects_DataObjectsStorage(this.storages.syncherManager, results[2] || {}, this.runtimeFactory, this.runtimeURL );\r\n\r\n          this._hypertyResources = results[3] || {};\r\n\r\n          this.p2pHandlerURL = results[4] ? results[4].p2pHandlerURL : results[4];\r\n          if (!this.p2pHandlerURL) {\r\n            this.p2pHandlerURL = this.runtimeURL + '/p2phandler/' + generateGUID();\r\n            RuntimeUA_log.info('[RuntimeUA - init] P2PHandlerURL: ', this.p2pHandlerURL);\r\n\r\n            this.storages.runtime.set('p2pHandler:URL', 1, { p2pHandlerURL: this.p2pHandlerURL });\r\n          }\r\n\r\n/*          log.info('[RuntimeUA - init] dataObjectsStorage remote load starting');\r\n          this._dataObjectsStorage.loadRemote().then(()=> {\r\n            log.info('[RuntimeUA - init] dataObjectsStorage remote load concluded');*/\r\n            return this._loadComponents(guid);\r\n\r\n//          });\r\n\r\n\r\n        }).then((status) => {\r\n          this._setNetworkStatusListeners();\r\n\r\n          this._hypertyResourcesStorage = new hyperty_resource_HypertyResourcesStorage(this.runtimeURL, this.messageBus, this.storages.hypertyResources, this._hypertyResources);\r\n\r\n          if (this.p2p) {\r\n            RuntimeUA_log.info('[RuntimeUA - init] load p2pHandler: ', status);\r\n            return this._loadP2PHandler();\r\n          } else {\r\n            RuntimeUA_log.info('[RuntimeUA - init] P2P not supported');\r\n            return ('P2P Not Supported');\r\n          }\r\n\r\n        }).then((result) => {\r\n          RuntimeUA_log.info('[runtime ua - init] - status: ', result);\r\n          resolve(true);\r\n        }, (reason) => {\r\n          RuntimeUA_log.error('ERROR: ', reason);\r\n          resolve(true);\r\n        });\r\n\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  _setNetworkStatusListeners() {\r\n\r\n    this.runtimeFactory.listenOnline( this._updateRuntimeStatus('online') );\r\n    this.runtimeFactory.listenOffline( this._updateRuntimeStatus('offline') );\r\n\r\n  }\r\n\r\n  _updateRuntimeStatus(event) {\r\n\r\n    let _this = this;\r\n\r\n    _this.messageBus.postMessage({\r\n      from: this.runtimeURL,\r\n      to: this.runtimeURL+'/status',\r\n      type: 'update',\r\n      body: event\r\n    });\r\n  }\r\n\r\n  _loadP2PHandler() {\r\n\r\n    return new Promise((resolve) => {\r\n\r\n      let runtimeDescriptor = runtimeUtils.runtimeDescriptor;\r\n      let p2pStubHandler = runtimeDescriptor.p2pHandlerStub;\r\n\r\n      let p2pConfig = {\r\n        isHandlerStub: true,\r\n        runtimeURL: this.runtimeURL\r\n      };\r\n\r\n      RuntimeUA_log.log('[RuntimeUA loadP2PHandler] P2PStubHandler: ', p2pStubHandler);\r\n\r\n      this.loader.loadStub(p2pStubHandler, p2pConfig).then((result) => {\r\n\r\n        let runtimeUAURL = this.runtimeURL + '/ua';\r\n        let msg = {\r\n          type: 'subscribe',\r\n          from: runtimeUAURL,\r\n          to: 'domain://msg-node.' + this.domain + '/sm',\r\n          body: {\r\n            subscribe: [result.url],\r\n            source: this.runtimeURL\r\n          }\r\n        };\r\n\r\n        this.messageBus.addListener(runtimeUAURL, (msg) => {\r\n          RuntimeUA_log.log('[runtime ua - listener] - receive msg: ', msg);\r\n        });\r\n\r\n        this.messageBus.postMessage(msg, (reply) => {\r\n          RuntimeUA_log.log('[runtime ua - postMessage] - reply: ', reply);\r\n        });\r\n\r\n        RuntimeUA_log.info('[runtime ua - p2p installation] - success: ', result);\r\n        resolve(true);\r\n      }).catch((reason) => {\r\n        RuntimeUA_log.info('[runtime ua - p2p installation] - fail: ', reason);\r\n        resolve(false);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @access private\r\n   * @return {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\r\n   *\r\n   * @memberOf RuntimeUA\r\n   */\r\n  _loadComponents(guid) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      try {\r\n\r\n        // Prepare the on instance to handle with the fallbacks and runtimeCatalogue;\r\n        this.descriptorInstance = new runtime_Descriptors(this.runtimeURL, this.runtimeCatalogue, this.runtimeConfiguration);\r\n\r\n        // Prepare the loader to load the hyperties, protostubs and idpproxy;\r\n        this.loader = new runtime_Loader(this.runtimeURL, this.runtimeConfiguration, this.descriptorInstance);\r\n\r\n        // Instantiate the identity Module\r\n        this.identityModule = new identity_IdentityModule(this.runtimeURL, this.runtimeCapabilities, this.storages.identity, this._dataObjectsStorage, cryptoManager_CryptoManager, this.runtimeCatalogue);\r\n\r\n        // Use the sandbox factory to create an AppSandbox;\r\n        // In the future can be decided by policyEngine if we need\r\n        // create a AppSandbox or not;\r\n        let appSandbox = this.runtimeFactory.createAppSandbox();\r\n\r\n        // Instantiate the Registry Module\r\n        this.registry = new registry_Registry(this.runtimeURL, appSandbox, this.identityModule, this.runtimeCatalogue, this.runtimeCapabilities, this.storages.registry, this.p2pHandlerURL);\r\n\r\n        // Set the loader to load Hyperties, Stubs and IdpProxies\r\n        this.registry.loader = this.loader;\r\n\r\n        // Instantiate the Message Bus\r\n        this.messageBus = new bus_MessageBus(this.registry, this.runtimeURL);\r\n\r\n        // Instanciate the SubscriptionManager;\r\n        this.subscriptionManager = new subscriptionManager_SubscriptionManager(this.runtimeURL, this.messageBus, this.storages.subscriptions);\r\n\r\n        // Prepare the address allocation instance;\r\n        this.addressAllocation = new allocation_AddressAllocation(this.runtimeURL, this.messageBus, this.registry, this.subscriptionManager);\r\n\r\n        // Instantiate the Policy Engine\r\n        this.policyEngine = new policy_PEP(new context_RuntimeCoreCtx(this.runtimeURL, this.identityModule, this.registry, this.storages.policy, this.runtimeCapabilities));\r\n\r\n        // Instantiate Discovery\r\n        this.coreDiscovery = new discovery_CoreDiscovery(this.runtimeURL, this.messageBus, this.graphConnector, this.runtimeFactory, this.registry);\r\n\r\n        // Instantiate the identityHandler\r\n        this.identityHandler = new identity_IdentityHandler(this.identityModule);\r\n\r\n        // initialise the CryptoManager\r\n        cryptoManager_CryptoManager.init(this.runtimeURL, this.runtimeCapabilities, this.storages.cryptoManager, this._dataObjectsStorage, this.registry, this.coreDiscovery, this.identityModule, this.runtimeFactory);\r\n\r\n        // Instantiate the Graph Connector\r\n//        this.graphConnector = process.env.MODE !== 'light' ? new GraphConnector(this.runtimeURL, this.messageBus, this.storageManager) : null;\r\n\r\n        this.handlers = new runtime_MsgBusHandlers(this.policyEngine, this.identityHandler, cryptoManager_CryptoManager);\r\n\r\n        // (un)comment bellow to not encrypt messages\r\n\r\n        this.messageBus.pipelineOut.handlers = [this.handlers.idmHandler, this.handlers.pepOutHandler];\r\n        this.messageBus.pipelineIn.handlers = [ this.handlers.pepInHandler];\r\n\r\n        // (un)comment bellow to encrypt messages\r\n\r\n//      this.messageBus.pipelineOut.handlers = [this.handlers.idmHandler, this.handlers.pepOutHandler, this.handlers.encryptHandler];\r\n//      this.messageBus.pipelineIn.handlers = [this.handlers.decryptHandler, this.handlers.pepInHandler];\r\n\r\n        // Add to App Sandbox the listener;\r\n        appSandbox.addListener('*', (msg) => {\r\n          this.messageBus.postMessage(msg);\r\n        });\r\n\r\n        cryptoManager_CryptoManager.messageBus = this.messageBus;\r\n\r\n        // Register messageBus on Registry\r\n        this.registry.messageBus = this.messageBus;\r\n\r\n        // Policy Engine\r\n        this.policyEngine.messageBus = this.messageBus;\r\n\r\n        // Register messageBus on IDM\r\n        this.identityModule.messageBus = this.messageBus;\r\n\r\n        // Register registry on IdentityModule\r\n        this.identityModule.registry = this.registry;\r\n\r\n        // Register coreDiscovery on IdentityModule\r\n        this.identityModule.coreDiscovery = this.coreDiscovery;\r\n\r\n        // Use sandbox factory to use specific methods\r\n        // and set the message bus to the factory\r\n        this.runtimeFactory.messageBus = this.messageBus;\r\n\r\n        // Instanciate the SyncherManager;\r\n        this.syncherManager = new syncher_SyncherManager(this.runtimeURL, this.messageBus, this.registry, this.runtimeCatalogue, this.storages.syncherManager, null, this._dataObjectsStorage, this.identityModule);\r\n\r\n\r\n        // Set into loader the needed components;\r\n        this.loader.runtimeURL = this.runtimeURL;\r\n        this.loader.messageBus = this.messageBus;\r\n        this.loader.registry = this.registry;\r\n        this.loader.runtimeCatalogue = this.runtimeCatalogue;\r\n        this.loader.runtimeFactory = this.runtimeFactory;\r\n\r\n        //Instantiate Discovery Lib for notification testing\r\n        // this.discovery = new Discovery(\"hyperty://localhost/test\", this.runtimeURL, this.messageBus);\r\n        // this.loadStub(\"localhost\");\r\n        // setTimeout(() => {\r\n        //   this.discovery.discoverHypertiesDO(\"user://google.com/openidtest20@gmail.com\")\r\n        //   .then(hyperties => {\r\n        //     hyperties.forEach(hyperty =>{\r\n        //       hyperty.onLive(() => log.log(`Notification from ${hyperty.data.hypertyID} changed to live`));\r\n        //       hyperty.onDisconnected(() => log.log(`Notification from ${hyperty.data.hypertyID} changed to disconnected`));\r\n        //     });\r\n        //   });\r\n        // }, 2000);\r\n\r\n\r\n        // this.subscriptionManager.init().then(()=>{\r\n        //   resolve(true);\r\n        // });\r\n\r\n        const prepareComponents = [];\r\n        prepareComponents.push(this.subscriptionManager.init());\r\n        prepareComponents.push(this.identityModule.init(guid));\r\n        prepareComponents.push(cryptoManager_CryptoManager.loadSessionKeys());\r\n        prepareComponents.push(this.registry.loadRegistry());\r\n        prepareComponents.push(this._dataObjectsStorage.loadRemote());\r\n\r\n        Promise.all(prepareComponents).then((result) => {\r\n          if (result.length === 5) {\r\n            resolve(true);\r\n          } else {\r\n            reject('[RuntimeUA._loadComponents] Error ] ', result);\r\n          }\r\n        }).catch((reason) => {\r\n          throw Error(reason);\r\n        });\r\n\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Deploy Hyperty from Catalogue URL\r\n   *\r\n   * @see https://github.com/reTHINK-project/specs/tree/master/datamodel/core/address\r\n   *\r\n   * @param {URL.HypertyCatalogueURL} hypertyCatalogueURL - The Catalogue URL used to identify descriptors in the Catalogue.\r\n   * @param {boolean|URL.HypertyURL} [reuseURL=false] reuseURL - reuseURL is used to reuse the hypertyURL previously registred, by default the reuse is disabled;\r\n   * @param {URL} appURL - the app url address; // TODO: improve this description;\r\n   * @returns {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\r\n   *\r\n   * @memberOf RuntimeUA\r\n   */\r\n  loadHyperty(hypertyCatalogueURL, reuseURL = false, appURL) {\r\n\r\n    if (!hypertyCatalogueURL) throw new Error('Hyperty descriptor url parameter is needed');\r\n    return this.loader.loadHyperty(hypertyCatalogueURL, reuseURL, appURL);\r\n\r\n  }\r\n\r\n  /**\r\n  * Deploy Stub from Catalogue URL or domain url\r\n  * @param  {URL.URL}     domain          domain\r\n  */\r\n  loadStub(protocolstubCatalogueURL) {\r\n\r\n    if (!protocolstubCatalogueURL) throw new Error('ProtoStub descriptor url parameter is needed');\r\n    return this.loader.loadStub(protocolstubCatalogueURL);\r\n\r\n  }\r\n\r\n  /**\r\n  * Deploy idpProxy from Catalogue URL or domain url\r\n  * @param  {URL.URL}     domain          domain\r\n  */\r\n  loadIdpProxy(ipdProxyCatalogueURL) {\r\n    RuntimeUA_log.log('ipdProxyCatalogueURL', ipdProxyCatalogueURL);\r\n\r\n    if (!ipdProxyCatalogueURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');\r\n    return this.loader.loadIdpProxy(ipdProxyCatalogueURL);\r\n  }\r\n\r\n  /**\r\n   * Used to close all the runtime; Unregister all hyperties;\r\n   * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;\r\n   */\r\n  close(logOut) {\r\n    console.log('Runtime core logout: ', logOut);\r\n    let _this = this;\r\n    if (logOut === true) {\r\n      this.identityHandler.reset();\r\n    }\r\n\r\n    RuntimeUA_log.info('Unregister all hyperties');\r\n    return new Promise(function (resolve, reject) {\r\n\r\n      _this.registry.unregisterAllHyperties().then(function (result) {\r\n        RuntimeUA_log.info('All the hyperties are unregisted with Success:', result);\r\n        resolve(true);\r\n      }).catch(function (reason) {\r\n        RuntimeUA_log.error('Failed to unregister the hyperties', reason);\r\n        reject(false);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Used to reset the runtime by deleting all data from the storage manager;\r\n   * @return {Promise<Boolean>} result of the reset method, with true or false to the operation success;\r\n   */\r\n  reset() {\r\n    console.log('RuntimeUA.Runtime core reset: ');\r\n\r\n    let reseting = [];\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      //TODO: delegate db reset operation to each component\r\n      //    this.identityManager.reset();\r\n\r\n      this._dataObjectsStorage.deleteRemotes().then(()=>{\r\n        return;\r\n      }).\r\n      then(() => {\r\n        this.storages.identity.get(false, false, 'identities').then((identities) => {\r\n          let identitiesKeys = Object.keys(identities);\r\n  \r\n          identitiesKeys.forEach((key) => {\r\n            reseting.push(this.storages.identity.delete(key, false, 'identities'));\r\n  \r\n          });\r\n  \r\n          reseting.push(this.storages.capabilities.delete('capabilities'));\r\n          reseting.push(this.storages.cryptoManager.delete('userAsymmetricKey'));\r\n          reseting.push(this.storages.hypertyResources.delete('hypertyResources'));\r\n          reseting.push(this.storages.identity.delete('accessTokens'));\r\n          reseting.push(this.storages.registry.delete('registry:DataObjectURLs'));\r\n          reseting.push(this.storages.registry.delete('registry:HypertyURLs'));\r\n          reseting.push(this.storages.runtime.delete('p2pHandler:URL'));\r\n          reseting.push(this.storages.runtime.delete('runtime:URL'));\r\n          //    reseting.push(this.storages.runtimeCatalogue.delete('runtimeCatalogue'));\r\n          reseting.push(this.storages.subscriptions.delete('subscriptions'));\r\n          reseting.push(this.storages.syncherManager.delete('syncherManager:ObjectURLs'));\r\n          reseting.push(this.storages.syncherManager.delete('remotes'));\r\n  \r\n          Promise.all(reseting).then((result) => {\r\n  \r\n            RuntimeUA_log.info('[RuntimeUA.reset] reset with Success:', result);\r\n            return resolve(true);\r\n          }).catch(function (reason) {\r\n            RuntimeUA_log.error('Failed to reset all DBs', reason);\r\n            resolve(false);\r\n          });\r\n        });\r\n      })\r\n\r\n    });\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ var runtime_RuntimeUA = __webpack_exports__[\"default\"] = (RuntimeUA_RuntimeUA);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///311\n")}]))}}});