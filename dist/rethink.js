// version: 0.17.0
// date: Mon Jun 24 2019 12:06:26 GMT+0100 (GMT+01:00)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


// version: 0.17.0
// date: Mon Jun 24 2019 12:06:26 GMT+0100 (GMT+01:00)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


!function(g,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("rethink",[],n):"object"==typeof exports?exports.rethink=n():g.rethink=n()}(window,function(){return function(g){var n={};function e(c){if(n[c])return n[c].exports;var I=n[c]={i:c,l:!1,exports:{}};return g[c].call(I.exports,I,I.exports,e),I.l=!0,I.exports}return e.m=g,e.c=n,e.d=function(g,n,c){e.o(g,n)||Object.defineProperty(g,n,{enumerable:!0,get:c})},e.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},e.t=function(g,n){if(1&n&&(g=e(g)),8&n)return g;if(4&n&&"object"==typeof g&&g&&g.__esModule)return g;var c=Object.create(null);if(e.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:g}),2&n&&"string"!=typeof g)for(var I in g)e.d(c,I,function(n){return g[n]}.bind(null,I));return c},e.n=function(g){var n=g&&g.__esModule?function(){return g.default}:function(){return g};return e.d(n,"a",n),n},e.o=function(g,n){return Object.prototype.hasOwnProperty.call(g,n)},e.p="",e(e.s=42)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return divideURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return emptyObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return secondsSinceEpoch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return deepClone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return removePathFromURL; });\n/* unused harmony export getUserURLFromEmail */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return getUserEmailFromURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return convertToUserURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return isDataObjectURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return isLegacy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return isURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return isUserURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return isHypertyURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return getConfigurationResources; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return buildURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return generateGUID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return getUserIdentityDomain; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return isBackendServiceURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return divideEmail; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"D\", function() { return splitObjectURL; });\n/* unused harmony export checkAttribute */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return parseAttributes; });\n/* unused harmony export isEmpty */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return chatkeysToStringCloner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return chatkeysToArrayCloner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return parseMessageURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return availableSpace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return encode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return decode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return decodeToUint8Array; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"E\", function() { return stringify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return parseToUint8Array; });\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * Support module with some functions will be useful\r\n * @module utils\r\n */\n\n/**\r\n * @typedef divideURL\r\n * @type Object\r\n * @property {string} type The type of URL\r\n * @property {string} domain The domain of URL\r\n * @property {string} identity The identity of URL\r\n */\n\n/**\r\n * Divide an url in type, domain and identity\r\n * @param  {URL.URL} url - url address\r\n * @return {divideURL} the result of divideURL\r\n */\nfunction divideURL(url) {\n  function recurse(value) {\n    var regex = /([a-zA-Z-]*)(:\\/\\/(?:\\.)?|:)([-a-zA-Z0-9@:%._+~#=]{2,256})([-a-zA-Z0-9@:%._+~#=/]*)/gi;\n    var subst = '$1,$3,$4';\n    var parts = value.replace(regex, subst).split(',');\n    return parts;\n  }\n\n  var parts = recurse(url); // If the url has no scheme\n\n  if (parts[0] === url && !parts[0].includes('@')) {\n    var _result = {\n      type: '',\n      domain: url,\n      identity: ''\n    };\n    console.warn('[DivideURL] DivideURL don\\'t support url without scheme. Please review your url address', url);\n    return _result;\n  } // check if the url has the scheme and includes an @\n\n\n  if (parts[0] === url && parts[0].includes('@')) {\n    var scheme = parts[0] === url ? 'smtp' : parts[0];\n    parts = recurse(scheme + '://' + parts[0]);\n  } // if the domain includes an @, divide it to domain and identity respectively\n\n\n  if (parts[1].includes('@')) {\n    parts[2] = parts[0] + '://' + parts[1];\n    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);\n  }\n  /*else if (parts[2].includes('/')) {\r\n  parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);\r\n  }*/\n\n\n  var result = {\n    type: parts[0],\n    domain: parts[1],\n    identity: parts[2]\n  };\n  return result;\n}\n/**\r\n * Check if an Object is empty\r\n * @param  {Object} object Object to be checked\r\n * @return {Boolean}       status of Object, empty or not (true|false);\r\n */\n\nfunction emptyObject(object) {\n  return Object.keys(object).length > 0 ? false : true;\n}\nfunction secondsSinceEpoch() {\n  return Math.floor(Date.now() / 1000);\n}\n/**\r\n * Make a COPY of the original data\r\n * @param  {Object}  obj - object to be cloned\r\n * @return {Object}\r\n */\n\nfunction deepClone(obj) {\n  //TODO: simple but inefficient JSON deep clone...\n  if (obj) return JSON.parse(JSON.stringify(obj));\n}\nfunction removePathFromURL(url) {\n  var splitURL = url.split('/');\n  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\n}\n/**\r\n * Obtains the user URL that corresponds to a given email\r\n * @param  {string} userEmail The user email\r\n * @return {URL.URL} userURL The user URL\r\n */\n\nfunction getUserURLFromEmail(userEmail) {\n  var indexOfAt = userEmail.indexOf('@');\n  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);\n}\n/**\r\n * Obtains the user email that corresponds to a given URL\r\n * @param  {URL.URL} userURL The user URL\r\n * @return {string} userEmail The user email\r\n */\n\nfunction getUserEmailFromURL(userURL) {\n  var url = divideURL(userURL);\n  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'\n}\n/**\r\n * Check if the user identifier is already in the URL format, if not, convert to URL format\r\n * @param  {string}   identifier  user identifier\r\n * @return {string}   userURL    the user URL\r\n */\n\nfunction convertToUserURL(identifier) {\n  // check if the identifier is already in the url format\n  if (identifier.substring(0, 7) === 'user://') {\n    var dividedURL = divideURL(identifier); //check if the url is well formated\n\n    if (dividedURL.domain && dividedURL.identity) {\n      return identifier;\n    } else {\n      throw 'userURL with wrong format';\n    } //if not, convert the user email to URL format\n\n  } else {\n    return getUserURLFromEmail(identifier);\n  }\n}\nfunction isDataObjectURL(url) {\n  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];\n  var splitURL = url.split('://');\n  var urlSchema = splitURL[0];\n  return schemasToIgnore.indexOf(urlSchema) === -1;\n}\nfunction isLegacy(url) {\n  if (url.split('@').length > 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isURL(url) {\n  return url.split('/').length >= 3;\n}\nfunction isUserURL(url) {\n  return divideURL(url).type === 'user';\n}\nfunction isHypertyURL(url) {\n  return divideURL(url).type === 'hyperty';\n}\n/**\r\n * get information relative each component configured on runtime configuration;\r\n * @param  {object} configuration object with all configuration\r\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\r\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\r\n * @return {object}               return an object with all configurations;\r\n */\n\nfunction getConfigurationResources(configuration, component, resource) {\n  var objectResource = configuration[component];\n  var resourceType = objectResource[resource];\n  return resourceType;\n}\n/**\r\n * Build a full url with the runtime configuration;\r\n * @param  {object} configuration object with all configuration\r\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\r\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\r\n * @param  {string} type          resource to get, like a hyperty name or protocolstub name;\r\n * @param  {boolean} useFallback  if true the function will check if have a fallback url;\r\n * @return {string}               partial url to contact the resource;\r\n */\n\nfunction buildURL(configuration, component, type, resource) {\n  var useFallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var objectResource = configuration[component];\n  var url;\n\n  if (!objectResource.hasOwnProperty(type)) {\n    throw Error('The configuration ' + JSON.stringify(objectResource, '', 2) + ' don\\'t have the ' + type + ' resource you are looking for');\n  }\n\n  var resourceType = objectResource[type];\n\n  if (type) {\n    var ext = type === 'idp-proxy' ? '.idp.js' : '.ps.js';\n    url = resourceType.prefix + configuration.domain + resourceType.suffix + resource;\n\n    if (resourceType.hasOwnProperty('fallback') && useFallback) {\n      if (resourceType.fallback.indexOf('%domain%')) {\n        url = resourceType.fallback.replace(/(%domain%)/g, configuration.domain) + resource + ext;\n      } else {\n        url = resourceType.fallback + resource;\n      }\n    }\n  } else {\n    url = resourceType.prefix + configuration.domain + resourceType.suffix;\n  } // console.log(url);\n\n\n  return url;\n}\n/**\r\n * Generate a Global Unique ID\r\n *\r\n * @returns String;\r\n */\n\nfunction generateGUID() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\nfunction getUserIdentityDomain(url) {\n  var dividedURL = divideURL(url);\n  var splitedDomain = dividedURL.domain.split('.');\n  var splitedLength = splitedDomain.length;\n\n  if (splitedLength == 1) {\n    return splitedDomain[splitedLength - 1];\n  }\n\n  var domain = splitedDomain[splitedLength - 2] + '.' + splitedDomain[splitedLength - 1];\n  return domain;\n}\n/**\r\n * Check if URL is from a backend service\r\n * @param  {string} url     URL to be processed\r\n * @return {boolean}\r\n */\n\nfunction isBackendServiceURL(url) {\n  var dividedURL = divideURL(url);\n  var splitedDomain = dividedURL.domain.split('.');\n  var backendSchemes = ['domain', 'global', 'domain-idp']; // should be defined in the runtime configuration\n\n  var backendSubDomains = ['registry', 'msg-node']; // should be defined in the runtime configuration\n\n  var subDomain;\n\n  if (splitedDomain.length > 1) {\n    subDomain = splitedDomain.filter(function (item) {\n      return backendSubDomains.indexOf(item) !== -1;\n    })[0];\n  }\n\n  if (subDomain && backendSubDomains.indexOf(subDomain) !== -1) {\n    return true;\n  }\n\n  if (dividedURL.type) {\n    return backendSchemes.indexOf(dividedURL.type) !== -1;\n  }\n\n  return false;\n}\nfunction divideEmail(email) {\n  var indexOfAt = email.indexOf('@');\n  var result = {\n    username: email.substring(0, indexOfAt),\n    domain: email.substring(indexOfAt + 1, email.length)\n  };\n  return result;\n}\nfunction assign(obj, keyPath, value) {\n  if (!obj) obj = {};\n  if (typeof keyPath === 'string') keyPath = parseAttributes(keyPath);\n  var lastKeyIndex = keyPath.length - 1;\n\n  for (var i = 0; i < lastKeyIndex; ++i) {\n    var key = keyPath[i];\n\n    if (!(key in obj)) {\n      obj[key] = {};\n    }\n\n    obj = obj[key];\n  }\n\n  obj[keyPath[lastKeyIndex]] = value;\n}\nfunction splitObjectURL(dataObjectURL) {\n  console.info('[utils - splitObjectURL]: ', dataObjectURL);\n  var splitedURL = dataObjectURL.split('/');\n  var url = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];\n  var resource = splitedURL[5];\n  var result = {\n    url: url,\n    resource: resource\n  };\n  console.info('[utils - splitObjectURL]: ', result);\n  return result;\n}\nfunction checkAttribute(path) {\n  var regex = /((([a-zA-Z]+):\\/\\/([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})\\/[a-zA-Z0-9.]+@[a-zA-Z0-9]+(-)?[a-zA-Z0-9]+(\\.)?[a-zA-Z0-9]{2,10}?\\.[a-zA-Z]{2,10})(.+(?=.identity))?/gm;\n  var list = [];\n  var _final = [];\n  var test = path.match(regex);\n\n  if (test == null) {\n    _final = path.split('.');\n  } else {\n    var m;\n\n    while ((m = regex.exec(path)) !== null) {\n      // This is necessary to avoid infinite loops with zero-width matches\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      } // The result can be accessed through the `m`-variable.\n\n\n      m.forEach(function (match, groupIndex) {\n        if (groupIndex === 0) {\n          list.push(match);\n        }\n      });\n    }\n\n    var result;\n    list.forEach(function (url) {\n      result = path.replace(url, '*-*');\n      _final = result.split('.').map(function (item) {\n        if (item === '*-*') {\n          return url;\n        }\n\n        return item;\n      });\n    });\n  }\n\n  console.log('[RuntimeCore.Utils.checkAttribute]', _final);\n  return _final;\n}\nfunction parseAttributes(path) {\n  var regex = /([0-9a-zA-Z][-\\w]*):\\/\\//g;\n  var string3 = 'identity';\n\n  if (!path.includes('://')) {\n    return path.split('.');\n  } else {\n    var string1 = path.split(regex)[0];\n    var array1 = string1.split('.');\n    var string2 = path.replace(string1, '');\n\n    if (path.includes(string3)) {\n      var array2 = string2.split(string3 + '.');\n      console.log('array2 ' + array2);\n      string2 = array2[0].slice('.', -1);\n      array2 = array2[1].split('.');\n      array1.push(string2, string3);\n      array1 = array1.concat(array2);\n    } else {\n      array1.push(string2);\n    }\n\n    return array1.filter(Boolean);\n  }\n}\nfunction isEmpty(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return JSON.stringify(obj) === JSON.stringify({});\n}\nfunction chatkeysToStringCloner(sessionKeys) {\n  var dataObjectSessionKeysClone = {};\n  var fields = Object.keys(sessionKeys);\n\n  if (fields) {\n    try {\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        dataObjectSessionKeysClone[field] = {};\n        dataObjectSessionKeysClone[field].sessionKey = sessionKeys[field].sessionKey.toString();\n        dataObjectSessionKeysClone[field].isToEncrypt = sessionKeys[field].isToEncrypt;\n      }\n    } catch (err) {\n      console.error('_chatkeysToStringCloner:err', err);\n    }\n  }\n\n  return dataObjectSessionKeysClone;\n}\nfunction chatkeysToArrayCloner(sessionKeys) {\n  var dataObjectSessionKeysClone = {};\n  var fields = Object.keys(sessionKeys);\n\n  if (fields) {\n    try {\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        dataObjectSessionKeysClone[field] = {};\n        var arrayValues = JSON.parse('[' + sessionKeys[field].sessionKey + ']');\n        dataObjectSessionKeysClone[field].sessionKey = new Uint8Array(arrayValues);\n        dataObjectSessionKeysClone[field].isToEncrypt = sessionKeys[field].isToEncrypt;\n      }\n    } catch (err) {\n      console.error('_chatkeysToArrayCloner:err', err);\n    }\n  }\n\n  return dataObjectSessionKeysClone;\n}\nfunction parseMessageURL(URL) {\n  var splitedToURL = URL.split('/');\n\n  if (splitedToURL.length <= 6) {\n    return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];\n  } else {\n    return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];\n  }\n}\nfunction availableSpace(usage, quota) {\n  var available = (usage / quota).toFixed(2);\n  return {\n    quota: quota,\n    usage: usage,\n    percent: Number(available)\n  };\n}\n/**\r\n* Encodes a JS object to base 64 encode\r\n* @param   {Object}    value    byteArray value\r\n* @return  {string}   encoded value\r\n*/\n\nfunction encode(value) {\n  try {\n    var stringValue = stringify(value);\n    return btoa(stringValue);\n  } catch (err) {\n    console.error('[Utils.encode:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n  * Decode a base64 string to object\r\n  * @param   {string_b64}    value    value encoded in base 64\r\n  * @return  {Object} decodedValue\r\n  */\n\nfunction decode(value) {\n  try {\n    return JSON.parse(atob(value));\n  } catch (err) {\n    console.log('[Utils.decode:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n* Decode a base64 string to Uint8Array\r\n* @param   {string_b64}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\n\nfunction decodeToUint8Array(value) {\n  try {\n    return new Uint8Array(decode(value));\n  } catch (err) {\n    console.error('[Utils.decodeToUint8Array:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n* Converts a JS object to string\r\n* NOTE: Special conversion for Uint8Arrays\r\n* @param   {Object}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\n\nfunction stringify(value) {\n  try {\n    var stringValue;\n\n    if (value.constructor === Uint8Array) {\n      stringValue = '[' + value.toString() + ']'; // the [] is for JSON.parse compatibility\n    } else {\n      stringValue = JSON.stringify(value);\n    }\n\n    return stringValue;\n  } catch (err) {\n    console.error('[Utils.stringify:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n* Converts a stringified object to object\r\n* @param   {String}    value    byteArray value\r\n* @return  {Object}   encoded value\r\n*/\n\nfunction parse(value) {\n  try {\n    return JSON.parse(value);\n  } catch (err) {\n    console.error('[Utils.parse:err]' + err);\n    console.trace();\n    console.error('That that cause the error:', value);\n    throw err;\n  }\n}\n/**\r\n* Converts a stringified object to object\r\n* @param   {String}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\n\nfunction parseToUint8Array(value) {\n  try {\n    return new Uint8Array(parse(value));\n  } catch (err) {\n    console.error('[Utils.parseToUint8Array:err]' + err);\n    throw err;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    "use strict";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    "use strict";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = "undefined";\n\n    var logMethods = [\n        "trace",\n        "debug",\n        "info",\n        "warn",\n        "error"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === \'function\') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === \'debug\') {\n            methodName = \'log\';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, \'log\');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn\'t present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = "loglevel";\n      if (name) {\n        storageKey += ":" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || \'silent\').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + "=" + levelName + ";";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + "=");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,\n          "ERROR": 4, "SILENT": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return "No console available for logging";\n              }\n          } else {\n              throw "log.setLevel() called with invalid level: " + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== "string" || name === "") {\n          throw new TypeError("You must supply a name when creating a logger.");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzPzNmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL2Jyb3dzZXIuanM/ZGUzZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgTXV0YXRpb24gPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcblxudmFyIHNjaGVkdWxlRHJhaW47XG5cbntcbiAgaWYgKE11dGF0aW9uKSB7XG4gICAgdmFyIGNhbGxlZCA9IDA7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uKG5leHRUaWNrKTtcbiAgICB2YXIgZWxlbWVudCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7XG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgfSk7XG4gICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsZW1lbnQuZGF0YSA9IChjYWxsZWQgPSArK2NhbGxlZCAlIDIpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoIWdsb2JhbC5zZXRJbW1lZGlhdGUgJiYgdHlwZW9mIGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgY2hhbm5lbCA9IG5ldyBnbG9iYWwuTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IG5leHRUaWNrO1xuICAgIHNjaGVkdWxlRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoJ2RvY3VtZW50JyBpbiBnbG9iYWwgJiYgJ29ucmVhZHlzdGF0ZWNoYW5nZScgaW4gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgdmFyIHNjcmlwdEVsID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0RWwub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBuZXh0VGljaygpO1xuXG4gICAgICAgIHNjcmlwdEVsLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIHNjcmlwdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0RWwpO1xuICAgICAgICBzY3JpcHRFbCA9IG51bGw7XG4gICAgICB9O1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHRFbCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlZHVsZURyYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2V0VGltZW91dChuZXh0VGljaywgMCk7XG4gICAgfTtcbiAgfVxufVxuXG52YXIgZHJhaW5pbmc7XG52YXIgcXVldWUgPSBbXTtcbi8vbmFtZWQgbmV4dFRpY2sgZm9yIGxlc3MgY29uZnVzaW5nIHN0YWNrIHRyYWNlc1xuZnVuY3Rpb24gbmV4dFRpY2soKSB7XG4gIGRyYWluaW5nID0gdHJ1ZTtcbiAgdmFyIGksIG9sZFF1ZXVlO1xuICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAobGVuKSB7XG4gICAgb2xkUXVldWUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9IFtdO1xuICAgIGkgPSAtMTtcbiAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICBvbGRRdWV1ZVtpXSgpO1xuICAgIH1cbiAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gIH1cbiAgZHJhaW5pbmcgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbW1lZGlhdGU7XG5mdW5jdGlvbiBpbW1lZGlhdGUodGFzaykge1xuICBpZiAocXVldWUucHVzaCh0YXNrKSA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICBzY2hlZHVsZURyYWluKCk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SandboxType; });\n/* harmony import */ var _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);\n/* harmony import */ var _bus_MiniBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n\nvar SandboxType = {\n  APP: \'app\',\n  NORMAL: \'normal\',\n  WINDOW: \'window\'\n};\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Base class to implement external sandbox component\r\n */\n\nvar Sandbox =\n/*#__PURE__*/\nfunction (_MiniBus) {\n  _inherits(Sandbox, _MiniBus);\n\n  function Sandbox(capabilities) {\n    var _this2;\n\n    _classCallCheck(this, Sandbox);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Sandbox).call(this));\n\n    var _this = _assertThisInitialized(_this2);\n\n    if (capabilities) {\n      _this.capabilities = capabilities;\n    }\n\n    return _this2;\n  }\n  /**\r\n   * Deploy an instance of the component into the sandbox.\r\n   * @param  {string} componentSourceCode Component source code (Hyperty, ProtoStub, etc)\r\n   * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\r\n   * @param  {Config} configuration Config parameters of the component\r\n   * @return {Promise<string>} return deployed if successful, or any other string with an error\r\n   */\n\n\n  _createClass(Sandbox, [{\n    key: "deployComponent",\n    value: function deployComponent(componentSourceCode, componentURL, configuration) {\n      var _this = this; // let messageFactory = _this.messageFactory;\n\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: deploy message for the internal SandboxRegistry -> _onDeploy\n        var deployMessage = {\n          type: \'create\',\n          from: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].ExternalDeployAddress,\n          to: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].InternalDeployAddress,\n          body: {\n            url: componentURL,\n            sourceCode: componentSourceCode,\n            config: configuration\n          }\n        }; //send message into the sandbox internals and wait for reply\n\n        _this.postMessage(deployMessage, function (reply) {\n          if (reply.body.code === 200) {\n            //is this response complaint with the spec?\n            resolve(\'deployed\');\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n    /**\r\n     * Remove the instance of a previously deployed component.\r\n     * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\r\n     * @return {Promise<string>} return undeployed if successful, or any other string with an error\r\n     */\n\n  }, {\n    key: "removeComponent",\n    value: function removeComponent(componentURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: un-deploy message for the internal SandboxRegistry -> _onRemove\n        var removeMessage = {\n          type: \'delete\',\n          from: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].ExternalDeployAddress,\n          to: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].InternalDeployAddress,\n          body: {\n            url: componentURL\n          }\n        }; //send message into the sandbox internals and wait for reply\n\n        _this.postMessage(removeMessage, function (reply) {\n          if (reply.body.code === 200) {\n            //is this response complaint with the spec?\n            resolve(\'undeployed\');\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n    /**\r\n    * Matches Sandbox capabilities against provided capabilities. Used to check if sandbox provides all required capabilities\r\n    * @param  {RuntimeCapabilities} constraints set of RuntimeCapabilities to match with.\r\n    * @return {boolean} return true if constraints are matched false otherwise\r\n     */\n\n  }, {\n    key: "matches",\n    value: function matches(constraints) {\n      var _this = this;\n\n      var filtered = Object.keys(constraints).filter(function (key) {\n        return !(_this.capabilities[key] && _this.capabilities[key] === constraints[key]);\n      });\n\n      if (filtered.length === 0) {\n        return true;\n      } else {\n        return !constraints[filtered];\n      }\n    }\n  }]);\n\n  return Sandbox;\n}(_bus_MiniBus__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);\n\n/* harmony default export */ __webpack_exports__["b"] = (Sandbox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL3NyYy9zYW5kYm94L1NhbmRib3guanM/NzU2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcbmltcG9ydCBTYW5kYm94UmVnaXN0cnkgZnJvbSAnLi9TYW5kYm94UmVnaXN0cnknO1xyXG5pbXBvcnQgTWluaUJ1cyBmcm9tICcuLi9idXMvTWluaUJ1cyc7XHJcblxyXG5cclxuZXhwb3J0IGxldCBTYW5kYm94VHlwZSA9IHtBUFA6ICdhcHAnLCBOT1JNQUw6ICdub3JtYWwnLCBXSU5ET1c6ICd3aW5kb3cnfTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiAqIEJhc2UgY2xhc3MgdG8gaW1wbGVtZW50IGV4dGVybmFsIHNhbmRib3ggY29tcG9uZW50XHJcbiAqL1xyXG5jbGFzcyBTYW5kYm94IGV4dGVuZHMgTWluaUJ1cyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhcGFiaWxpdGllcykge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoY2FwYWJpbGl0aWVzKSAgICAgIHsgX3RoaXMuY2FwYWJpbGl0aWVzID0gY2FwYWJpbGl0aWVzOyB9XHJcblxyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlcGxveSBhbiBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IGludG8gdGhlIHNhbmRib3guXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBjb21wb25lbnRTb3VyY2VDb2RlIENvbXBvbmVudCBzb3VyY2UgY29kZSAoSHlwZXJ0eSwgUHJvdG9TdHViLCBldGMpXHJcbiAgICogQHBhcmFtICB7VVJMfSBjb21wb25lbnRVUkwgSHlwZXJ0eSwgUHJvdG9TdHViLCBvciBhbnkgb3RoZXIgY29tcG9uZW50IGFkZHJlc3MuXHJcbiAgICogQHBhcmFtICB7Q29uZmlnfSBjb25maWd1cmF0aW9uIENvbmZpZyBwYXJhbWV0ZXJzIG9mIHRoZSBjb21wb25lbnRcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IHJldHVybiBkZXBsb3llZCBpZiBzdWNjZXNzZnVsLCBvciBhbnkgb3RoZXIgc3RyaW5nIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICBkZXBsb3lDb21wb25lbnQoY29tcG9uZW50U291cmNlQ29kZSwgY29tcG9uZW50VVJMLCBjb25maWd1cmF0aW9uKSB7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICAvLyBsZXQgbWVzc2FnZUZhY3RvcnkgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAvL0ZMT1ctT1VUOiBkZXBsb3kgbWVzc2FnZSBmb3IgdGhlIGludGVybmFsIFNhbmRib3hSZWdpc3RyeSAtPiBfb25EZXBsb3lcclxuICAgICAgbGV0IGRlcGxveU1lc3NhZ2UgPSB7XHJcbiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IFNhbmRib3hSZWdpc3RyeS5FeHRlcm5hbERlcGxveUFkZHJlc3MsIHRvOiBTYW5kYm94UmVnaXN0cnkuSW50ZXJuYWxEZXBsb3lBZGRyZXNzLFxyXG4gICAgICAgIGJvZHk6IHsgdXJsOiBjb21wb25lbnRVUkwsIHNvdXJjZUNvZGU6IGNvbXBvbmVudFNvdXJjZUNvZGUsIGNvbmZpZzogY29uZmlndXJhdGlvbiB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvL3NlbmQgbWVzc2FnZSBpbnRvIHRoZSBzYW5kYm94IGludGVybmFscyBhbmQgd2FpdCBmb3IgcmVwbHlcclxuICAgICAgX3RoaXMucG9zdE1lc3NhZ2UoZGVwbG95TWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAvL2lzIHRoaXMgcmVzcG9uc2UgY29tcGxhaW50IHdpdGggdGhlIHNwZWM/XHJcbiAgICAgICAgICByZXNvbHZlKCdkZXBsb3llZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgdGhlIGluc3RhbmNlIG9mIGEgcHJldmlvdXNseSBkZXBsb3llZCBjb21wb25lbnQuXHJcbiAgICogQHBhcmFtICB7VVJMfSBjb21wb25lbnRVUkwgSHlwZXJ0eSwgUHJvdG9TdHViLCBvciBhbnkgb3RoZXIgY29tcG9uZW50IGFkZHJlc3MuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm4gdW5kZXBsb3llZCBpZiBzdWNjZXNzZnVsLCBvciBhbnkgb3RoZXIgc3RyaW5nIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50VVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIC8vRkxPVy1PVVQ6IHVuLWRlcGxveSBtZXNzYWdlIGZvciB0aGUgaW50ZXJuYWwgU2FuZGJveFJlZ2lzdHJ5IC0+IF9vblJlbW92ZVxyXG4gICAgICBsZXQgcmVtb3ZlTWVzc2FnZSA9IHtcclxuICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogU2FuZGJveFJlZ2lzdHJ5LkV4dGVybmFsRGVwbG95QWRkcmVzcywgdG86IFNhbmRib3hSZWdpc3RyeS5JbnRlcm5hbERlcGxveUFkZHJlc3MsXHJcbiAgICAgICAgYm9keTogeyB1cmw6IGNvbXBvbmVudFVSTCB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvL3NlbmQgbWVzc2FnZSBpbnRvIHRoZSBzYW5kYm94IGludGVybmFscyBhbmQgd2FpdCBmb3IgcmVwbHlcclxuICAgICAgX3RoaXMucG9zdE1lc3NhZ2UocmVtb3ZlTWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAvL2lzIHRoaXMgcmVzcG9uc2UgY29tcGxhaW50IHdpdGggdGhlIHNwZWM/XHJcbiAgICAgICAgICByZXNvbHZlKCd1bmRlcGxveWVkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogTWF0Y2hlcyBTYW5kYm94IGNhcGFiaWxpdGllcyBhZ2FpbnN0IHByb3ZpZGVkIGNhcGFiaWxpdGllcy4gVXNlZCB0byBjaGVjayBpZiBzYW5kYm94IHByb3ZpZGVzIGFsbCByZXF1aXJlZCBjYXBhYmlsaXRpZXNcclxuICAqIEBwYXJhbSAge1J1bnRpbWVDYXBhYmlsaXRpZXN9IGNvbnN0cmFpbnRzIHNldCBvZiBSdW50aW1lQ2FwYWJpbGl0aWVzIHRvIG1hdGNoIHdpdGguXHJcbiAgKiBAcmV0dXJuIHtib29sZWFufSByZXR1cm4gdHJ1ZSBpZiBjb25zdHJhaW50cyBhcmUgbWF0Y2hlZCBmYWxzZSBvdGhlcndpc2VcclxuICAgKi9cclxuXHJcbiAgbWF0Y2hlcyhjb25zdHJhaW50cykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhjb25zdHJhaW50cykuZmlsdGVyKChrZXkpID0+IHtcclxuICAgICAgcmV0dXJuICEoX3RoaXMuY2FwYWJpbGl0aWVzW2tleV0gJiYgX3RoaXMuY2FwYWJpbGl0aWVzW2tleV0gPT09IGNvbnN0cmFpbnRzW2tleV0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PT0gMCkgICAgICB7IHJldHVybiB0cnVlOyB9ICAgIGVsc2UgICAgICB7IHJldHVybiAhKGNvbnN0cmFpbnRzW2ZpbHRlcmVkXSk7IH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTYW5kYm94O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBO0FBQ0E7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7Ozs7O0FBSUE7Ozs7O0FBRUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFQQTtBQVNBO0FBRUE7Ozs7Ozs7Ozs7O0FBT0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBRkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7Ozs7QUF0RkE7QUFDQTtBQXlGQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _SandboxFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Base class to implement internal deploy manager of components.\r\n */\n\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Internal component registry of all sandboxes.\r\n * Process internal request's for component deploy.\r\n */\n\nvar SandboxRegistry =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _components: <url: instance>\r\n  */\n  function SandboxRegistry(bus) {\n    _classCallCheck(this, SandboxRegistry);\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._factory = new _SandboxFactory__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](bus);\n    _this._components = {};\n    bus.addListener(SandboxRegistry.InternalDeployAddress, function (msg) {\n      console.log('SandboxRegistry-RCV: ', msg); // let responseMsg = {\n      //   id: msg.id, type: 'response', from: SandboxRegistry.InternalDeployAddress, to: SandboxRegistry.ExternalDeployAddress\n      // };\n\n      switch (msg.type) {\n        case 'create':\n          _this._onDeploy(msg);\n\n          break;\n\n        case 'delete':\n          _this._onRemove(msg);\n\n          break;\n      }\n    });\n  }\n\n  _createClass(SandboxRegistry, [{\n    key: \"_responseMsg\",\n    value: function _responseMsg(msg, code, value) {\n      var _this = this; // let messageFactory = _this.messageFactory;\n      //FLOW-OUT: generic response message to external Sandbox (deploy and un-deploy responses)\n\n\n      var responseMsg = {\n        id: msg.id,\n        type: 'response',\n        from: SandboxRegistry.InternalDeployAddress,\n        to: SandboxRegistry.ExternalDeployAddress\n      }; // Chanege the origin message, because the response;\n      // msg.from = SandboxRegistry.InternalDeployAddress;\n      // msg.to = SandboxRegistry.ExternalDeployAddress;\n\n      var body = {};\n      if (code) body.code = code;\n      if (value) body.desc = value;\n      responseMsg.body = body; // return messageFactory.createResponse(msg, code, value);\n\n      return responseMsg;\n    } //FLOW-IN: message from the runtime core Sandbox -> deployComponent\n\n  }, {\n    key: \"_onDeploy\",\n    value: function _onDeploy(msg) {\n      var _this = this;\n\n      var config = msg.body.config;\n      var componentURL = msg.body.url;\n      var sourceCode = msg.body.sourceCode;\n      var responseCode;\n      var responseDesc;\n\n      if (!_this._components.hasOwnProperty(componentURL)) {\n        try {\n          console.log('SandboxRegistry-onDeploy: ', msg);\n          _this._components[componentURL] = _this._create(componentURL, sourceCode, config, _this._factory);\n          responseCode = 200;\n        } catch (error) {\n          responseCode = 500;\n          responseDesc = error;\n        }\n      } else {\n        responseCode = 500;\n        responseDesc = 'Instance ' + componentURL + ' already exist!';\n      }\n\n      var responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\n\n      _this._bus.postMessage(responseMsg);\n    } //FLOW-IN: message from the runtime core Sandbox -> removeComponent\n\n  }, {\n    key: \"_onRemove\",\n    value: function _onRemove(msg) {\n      var _this = this;\n\n      var componentURL = msg.body.url;\n      var responseCode;\n      var responseDesc;\n\n      if (_this._components.hasOwnProperty(componentURL)) {\n        //remove component from the pool and all listeners\n        delete _this._components[componentURL];\n\n        _this._bus.removeAllListenersOf(componentURL);\n\n        responseCode = 200;\n      } else {\n        responseCode = 500;\n        responseDesc = 'Instance ' + componentURL + ' doesn\\'t exist!';\n      }\n\n      var responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\n\n      _this._bus.postMessage(responseMsg);\n    }\n    /**\r\n     * This method should be implemented by the internal sandbox code.\r\n     * @param  {ComponentURL} url URL used for the instance\r\n     * @param  {string} sourceCode Code of the component\r\n     * @param  {Config} config Configuration parameters\r\n     * @return {Object} Returns instance of the component or throw an error \"throw 'error message'\"\r\n     */\n\n  }, {\n    key: \"_create\",\n    value: function _create(url, sourceCode, config, factory) {//implementation specific\n\n      /* example code:\r\n        eval(sourceCode);\r\n        return activate(url, _this._bus, config);\r\n      */\n    }\n  }, {\n    key: \"components\",\n    get: function get() {\n      return this._components;\n    }\n  }]);\n\n  return SandboxRegistry;\n}();\n\nSandboxRegistry.ExternalDeployAddress = 'hyperty-runtime://sandbox/external';\nSandboxRegistry.InternalDeployAddress = 'hyperty-runtime://sandbox/internal';\n/* harmony default export */ __webpack_exports__[\"a\"] = (SandboxRegistry);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_0__["getLogger"](\'RegistrationStatus\');\n\n/**\r\n* The RegistrationStatus lib allows to monitor registration status of an Hyperty or Data Object\r\n*\r\n*/\n\nvar RegistrationStatus =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * @param {URL} url URL address of the entity to be monitored\r\n  * @param {URL} runtimeURL the current URL of the Runtime Instance used\r\n  * @param {HypertyURL} owner the URL of the Hyperty instance that is using this lib\r\n  * @param {MiniBus} owner the URL of the Hyperty instance that is using this lib\r\n  *\r\n  */\n  function RegistrationStatus(url, runtimeURL, owner, msgBus) {\n    _classCallCheck(this, RegistrationStatus);\n\n    this._registryObjectURL = url;\n    this._runtimeURL = runtimeURL;\n    this._domain = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[/* divideURL */ "k"])(runtimeURL).domain;\n    this._discoveredObjectURL = owner;\n    this._messageBus = msgBus;\n    this._subscriptionSet = false;\n    this._subscribers = {\n      live: {},\n      disconnected: {}\n    };\n  }\n\n  _createClass(RegistrationStatus, [{\n    key: "onLive",\n    value: function onLive(subscriber, callback) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._subscriptionSet) {\n          _this._subscribe().then(function () {\n            _this._subscribers.live[subscriber] = callback;\n            resolve();\n          })["catch"](function (err) {\n            return reject(err);\n          });\n        } else {\n          _this._subscribers.live[subscriber] = callback;\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: "onDisconnected",\n    value: function onDisconnected(subscriber, callback) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2._subscriptionSet) {\n          _this2._subscribe().then(function () {\n            _this2._subscribers.disconnected[subscriber] = callback;\n            resolve();\n          })["catch"](function (err) {\n            return reject(err);\n          });\n        } else {\n          _this2._subscribers.disconnected[subscriber] = callback;\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: "_subscribe",\n    value: function _subscribe() {\n      var _this3 = this;\n\n      var msg = {\n        type: \'subscribe\',\n        from: this._discoveredObjectURL,\n        to: this._runtimeURL + \'/subscriptions\',\n        body: {\n          resources: [this._registryObjectURL + \'/registration\']\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this3._messageBus.postMessage(msg, function (reply) {\n          log.log("[DiscoveredObject.subscribe] ".concat(_this3._registryObjectURL, " rcved reply "), reply);\n\n          if (reply.body.code === 200) {\n            _this3._generateListener(_this3._registryObjectURL + \'/registration\');\n\n            _this3._subscriptionSet = true;\n            resolve();\n          } else {\n            log.error(\'Error subscribing \', _this3._registryObjectURL);\n            reject(\'Error subscribing \' + _this3._registryObjectURL);\n          }\n        });\n      });\n    }\n  }, {\n    key: "_generateListener",\n    value: function _generateListener(notificationURL) {\n      var _this4 = this;\n\n      this._messageBus.addListener(notificationURL, function (msg) {\n        log.log("[DiscoveredObject.notification] ".concat(_this4._registryObjectURL, ": "), msg);\n\n        _this4._processNotification(msg);\n      });\n    }\n  }, {\n    key: "_processNotification",\n    value: function _processNotification(msg) {\n      var _this5 = this;\n\n      var status = msg.body.value;\n      setTimeout(function () {\n        // Hack to give time for onLive Hyperties to get ready. To be removed when Hyperty State machaine is implemented\n        Object.keys(_this5._subscribers[status]).forEach(function (subscriber) {\n          return _this5._subscribers[status][subscriber]();\n        });\n      }, 5000);\n    }\n  }, {\n    key: "_unsubscribe",\n    value: function _unsubscribe() {\n      var _this6 = this;\n\n      var msg = {\n        type: \'unsubscribe\',\n        from: this._discoveredObjectURL,\n        to: this._runtimeURL + \'/subscriptions\',\n        body: {\n          resource: this._registryObjectURL + \'/registration\'\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this6._messageBus.postMessage(msg, function (reply) {\n          log.log("[DiscoveredObject.unsubscribe] ".concat(_this6._registryObjectURL, " rcved reply "), reply);\n\n          if (reply.body.code === 200) {\n            resolve();\n          } else {\n            log.error(\'Error unsubscribing \', _this6._registryObjectURL);\n            reject(\'Error unsubscribing \' + _this6._registryObjectURL);\n          }\n        });\n      });\n    }\n  }, {\n    key: "unsubscribeLive",\n    value: function unsubscribeLive(subscriber) {\n      var _this7 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (subscriber in _this7._subscribers.live) {\n          //TODO: unsubscribe outside this condition\n          delete _this7._subscribers.live[subscriber];\n        }\n\n        if (_this7._areSubscriptionsEmpty()) {\n          _this7._unsubscribe().then(function () {\n            return resolve();\n          })["catch"](function (err) {\n            return reject(err);\n          });\n        } else {\n          resolve();\n        }\n        /*  } else {\r\n            reject(`${subscriber} doesn\'t subscribe onLive for ${this._registryObjectURL}`);\r\n          }*/\n\n      });\n    }\n  }, {\n    key: "unsubscribeDisconnected",\n    value: function unsubscribeDisconnected(subscriber) {\n      var _this8 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (subscriber in _this8._subscribers.disconnected) {\n          delete _this8._subscribers.disconnected[subscriber];\n\n          if (_this8._areSubscriptionsEmpty()) {\n            _this8._unsubscribe().then(function () {\n              return resolve();\n            })["catch"](function (err) {\n              return reject(err);\n            });\n          } else {\n            resolve();\n          }\n        } else {\n          reject("".concat(subscriber, " doesn\'t subscribe onDisconnected for ").concat(_this8._registryObjectURL));\n        }\n      });\n    }\n  }, {\n    key: "_areSubscriptionsEmpty",\n    value: function _areSubscriptionsEmpty() {\n      return Object.keys(this._subscribers.live).length === 0 && Object.keys(this._subscribers.disconnected).length === 0;\n    }\n  }]);\n\n  return RegistrationStatus;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (RegistrationStatus);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL3NyYy9kaXNjb3ZlcnkvUmVnaXN0cmF0aW9uU3RhdHVzLmpzPzdjODUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuLy8gTG9nIFN5c3RlbVxyXG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnbG9nbGV2ZWwnO1xyXG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignUmVnaXN0cmF0aW9uU3RhdHVzJyk7XHJcblxyXG5pbXBvcnQgeyBkaXZpZGVVUkwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG4vKipcclxuKiBUaGUgUmVnaXN0cmF0aW9uU3RhdHVzIGxpYiBhbGxvd3MgdG8gbW9uaXRvciByZWdpc3RyYXRpb24gc3RhdHVzIG9mIGFuIEh5cGVydHkgb3IgRGF0YSBPYmplY3RcclxuKlxyXG4qL1xyXG5jbGFzcyBSZWdpc3RyYXRpb25TdGF0dXMge1xyXG5cclxuICAvKipcclxuICAqIEBwYXJhbSB7VVJMfSB1cmwgVVJMIGFkZHJlc3Mgb2YgdGhlIGVudGl0eSB0byBiZSBtb25pdG9yZWRcclxuICAqIEBwYXJhbSB7VVJMfSBydW50aW1lVVJMIHRoZSBjdXJyZW50IFVSTCBvZiB0aGUgUnVudGltZSBJbnN0YW5jZSB1c2VkXHJcbiAgKiBAcGFyYW0ge0h5cGVydHlVUkx9IG93bmVyIHRoZSBVUkwgb2YgdGhlIEh5cGVydHkgaW5zdGFuY2UgdGhhdCBpcyB1c2luZyB0aGlzIGxpYlxyXG4gICogQHBhcmFtIHtNaW5pQnVzfSBvd25lciB0aGUgVVJMIG9mIHRoZSBIeXBlcnR5IGluc3RhbmNlIHRoYXQgaXMgdXNpbmcgdGhpcyBsaWJcclxuICAqXHJcbiAgKi9cclxuXHJcbiAgY29uc3RydWN0b3IodXJsLCBydW50aW1lVVJMLCBvd25lciwgbXNnQnVzKSB7XHJcbiAgICB0aGlzLl9yZWdpc3RyeU9iamVjdFVSTCA9IHVybDtcclxuICAgIHRoaXMuX3J1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xyXG4gICAgdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKHJ1bnRpbWVVUkwpLmRvbWFpbjtcclxuICAgIHRoaXMuX2Rpc2NvdmVyZWRPYmplY3RVUkwgPSBvd25lcjtcclxuICAgIHRoaXMuX21lc3NhZ2VCdXMgPSBtc2dCdXM7XHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25TZXQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3N1YnNjcmliZXJzID0ge1xyXG4gICAgICBsaXZlOiB7fSxcclxuICAgICAgZGlzY29ubmVjdGVkOiB7fVxyXG4gICAgfTtcclxuICB9XHJcblxyXG5cclxuICBvbkxpdmUoc3Vic2NyaWJlciwgY2FsbGJhY2spIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgaWYgKCF0aGlzLl9zdWJzY3JpcHRpb25TZXQpIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmUoKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuX3N1YnNjcmliZXJzLmxpdmVbc3Vic2NyaWJlcl0gPSBjYWxsYmFjaztcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlcnMubGl2ZVtzdWJzY3JpYmVyXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbkRpc2Nvbm5lY3RlZChzdWJzY3JpYmVyLCBjYWxsYmFjaykge1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBpZiAoIXRoaXMuX3N1YnNjcmlwdGlvblNldCkge1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmliZSgpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fc3Vic2NyaWJlcnMuZGlzY29ubmVjdGVkW3N1YnNjcmliZXJdID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmliZXJzLmRpc2Nvbm5lY3RlZFtzdWJzY3JpYmVyXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc3Vic2NyaWJlKCkge1xyXG5cclxuICAgIGNvbnN0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3N1YnNjcmliZScsXHJcbiAgICAgIGZyb206IHRoaXMuX2Rpc2NvdmVyZWRPYmplY3RVUkwsXHJcbiAgICAgIHRvOiB0aGlzLl9ydW50aW1lVVJMICsgJy9zdWJzY3JpcHRpb25zJyxcclxuICAgICAgYm9keToge1xyXG4gICAgICAgIHJlc291cmNlczogW3RoaXMuX3JlZ2lzdHJ5T2JqZWN0VVJMICsgJy9yZWdpc3RyYXRpb24nXVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICB0aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgbG9nLmxvZyhgW0Rpc2NvdmVyZWRPYmplY3Quc3Vic2NyaWJlXSAke3RoaXMuX3JlZ2lzdHJ5T2JqZWN0VVJMfSByY3ZlZCByZXBseSBgLCByZXBseSk7XHJcblxyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgdGhpcy5fZ2VuZXJhdGVMaXN0ZW5lcih0aGlzLl9yZWdpc3RyeU9iamVjdFVSTCArICcvcmVnaXN0cmF0aW9uJyk7XHJcbiAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25TZXQgPSB0cnVlO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsb2cuZXJyb3IoJ0Vycm9yIHN1YnNjcmliaW5nICcsIHRoaXMuX3JlZ2lzdHJ5T2JqZWN0VVJMKTtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igc3Vic2NyaWJpbmcgJyArIHRoaXMuX3JlZ2lzdHJ5T2JqZWN0VVJMKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfZ2VuZXJhdGVMaXN0ZW5lcihub3RpZmljYXRpb25VUkwpIHtcclxuXHJcbiAgICB0aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKG5vdGlmaWNhdGlvblVSTCwgKG1zZykgPT4ge1xyXG4gICAgICBsb2cubG9nKGBbRGlzY292ZXJlZE9iamVjdC5ub3RpZmljYXRpb25dICR7dGhpcy5fcmVnaXN0cnlPYmplY3RVUkx9OiBgLCBtc2cpO1xyXG4gICAgICB0aGlzLl9wcm9jZXNzTm90aWZpY2F0aW9uKG1zZyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9wcm9jZXNzTm90aWZpY2F0aW9uKG1zZykge1xyXG4gICAgY29uc3Qgc3RhdHVzID0gbXNnLmJvZHkudmFsdWU7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcblxyXG4gICAgICAvLyBIYWNrIHRvIGdpdmUgdGltZSBmb3Igb25MaXZlIEh5cGVydGllcyB0byBnZXQgcmVhZHkuIFRvIGJlIHJlbW92ZWQgd2hlbiBIeXBlcnR5IFN0YXRlIG1hY2hhaW5lIGlzIGltcGxlbWVudGVkXHJcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3N1YnNjcmliZXJzW3N0YXR1c10pLmZvckVhY2goXHJcbiAgICAgICAgc3Vic2NyaWJlciA9PiB0aGlzLl9zdWJzY3JpYmVyc1tzdGF0dXNdW3N1YnNjcmliZXJdKClcclxuICAgICAgKTtcclxuXHJcbiAgICB9LCA1MDAwKTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgX3Vuc3Vic2NyaWJlKCkge1xyXG5cclxuICAgIGNvbnN0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJyxcclxuICAgICAgZnJvbTogdGhpcy5fZGlzY292ZXJlZE9iamVjdFVSTCxcclxuICAgICAgdG86IHRoaXMuX3J1bnRpbWVVUkwgKyAnL3N1YnNjcmlwdGlvbnMnLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgcmVzb3VyY2U6IHRoaXMuX3JlZ2lzdHJ5T2JqZWN0VVJMICsgJy9yZWdpc3RyYXRpb24nXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIHRoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICBsb2cubG9nKGBbRGlzY292ZXJlZE9iamVjdC51bnN1YnNjcmliZV0gJHt0aGlzLl9yZWdpc3RyeU9iamVjdFVSTH0gcmN2ZWQgcmVwbHkgYCwgcmVwbHkpO1xyXG5cclxuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbG9nLmVycm9yKCdFcnJvciB1bnN1YnNjcmliaW5nICcsIHRoaXMuX3JlZ2lzdHJ5T2JqZWN0VVJMKTtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3IgdW5zdWJzY3JpYmluZyAnICsgdGhpcy5fcmVnaXN0cnlPYmplY3RVUkwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVuc3Vic2NyaWJlTGl2ZShzdWJzY3JpYmVyKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgaWYgKHN1YnNjcmliZXIgaW4gdGhpcy5fc3Vic2NyaWJlcnMubGl2ZSkge1xyXG5cclxuICAgICAgICAgIC8vVE9ETzogdW5zdWJzY3JpYmUgb3V0c2lkZSB0aGlzIGNvbmRpdGlvblxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpYmVycy5saXZlW3N1YnNjcmliZXJdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5fYXJlU3Vic2NyaXB0aW9uc0VtcHR5KCkpIHtcclxuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHJlc29sdmUoKSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KGAke3N1YnNjcmliZXJ9IGRvZXNuJ3Qgc3Vic2NyaWJlIG9uTGl2ZSBmb3IgJHt0aGlzLl9yZWdpc3RyeU9iamVjdFVSTH1gKTtcclxuICAgICAgICB9Ki9cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdW5zdWJzY3JpYmVEaXNjb25uZWN0ZWQoc3Vic2NyaWJlcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIGlmIChzdWJzY3JpYmVyIGluIHRoaXMuX3N1YnNjcmliZXJzLmRpc2Nvbm5lY3RlZCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpYmVycy5kaXNjb25uZWN0ZWRbc3Vic2NyaWJlcl07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9hcmVTdWJzY3JpcHRpb25zRW1wdHkoKSkge1xyXG4gICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKVxyXG4gICAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxyXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWplY3QoYCR7c3Vic2NyaWJlcn0gZG9lc24ndCBzdWJzY3JpYmUgb25EaXNjb25uZWN0ZWQgZm9yICR7dGhpcy5fcmVnaXN0cnlPYmplY3RVUkx9YCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2FyZVN1YnNjcmlwdGlvbnNFbXB0eSgpIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9zdWJzY3JpYmVycy5saXZlKS5sZW5ndGggPT09IDBcclxuICAgICAgJiYgT2JqZWN0LmtleXModGhpcy5fc3Vic2NyaWJlcnMuZGlzY29ubmVjdGVkKS5sZW5ndGggPT09IDA7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cmF0aW9uU3RhdHVzO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7Ozs7O0FBSUE7OztBQUVBOzs7Ozs7O0FBUUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUpBO0FBU0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFFQTs7O0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQVNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUdBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUVBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = argsArray;\n\nfunction argsArray(fun) {\n  return function () {\n    var len = arguments.length;\n    if (len) {\n      var args = [];\n      var i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9hcmdzYXJyYXkvaW5kZXguanM/ZGQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gYXJnc0FycmF5O1xuXG5mdW5jdGlvbiBhcmdzQXJyYXkoZnVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGxlbikge1xuICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgIHZhciBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuLmNhbGwodGhpcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmdW4uY2FsbCh0aGlzLCBbXSk7XG4gICAgfVxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _Bus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Message BUS Interface is an extension of the Bus\r\n* It is used mainly in the internal sandbox routing.\r\n*/\n\nvar MiniBus =\n/*#__PURE__*/\nfunction (_Bus) {\n  _inherits(MiniBus, _Bus);\n\n  function MiniBus() {\n    _classCallCheck(this, MiniBus);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MiniBus).call(this));\n  }\n  /**\r\n   * Post a message for routing. Message is routed directly to the external routing _onPostMessage.\r\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\r\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a "Timeout".\r\n   * @return {number}                  the Message id\r\n   */\n\n\n  _createClass(MiniBus, [{\n    key: "postMessage",\n    value: function postMessage(inMsg, responseCallback, timeout) {\n      var _this = this;\n\n      _this._genId(inMsg);\n\n      _this._responseCallback(inMsg, responseCallback, timeout); //always send to external (to core MessageBus)\n\n\n      _this._onPostMessage(inMsg);\n\n      return inMsg.id;\n    } //internal method used when a message is received by an external routing system\n\n  }, {\n    key: "_onMessage",\n    value: function _onMessage(msg) {\n      var _this = this;\n\n      if (!_this._onResponse(msg)) {\n        var itemList = _this._subscriptions[msg.to];\n\n        if (itemList) {\n          _this._publishOn(itemList, msg);\n\n          if (!msg.to.startsWith(\'hyperty\')) {\n            _this._publishOnDefault(msg);\n          }\n        } else {\n          _this._publishOnDefault(msg);\n        }\n      }\n    }\n  }]);\n\n  return MiniBus;\n}(_Bus__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);\n\n/* harmony default export */ __webpack_exports__["a"] = (MiniBus);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL3NyYy9idXMvTWluaUJ1cy5qcz9kOWFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuaW1wb3J0IEJ1cyBmcm9tICcuL0J1cyc7XHJcblxyXG4vKipcclxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiogTWVzc2FnZSBCVVMgSW50ZXJmYWNlIGlzIGFuIGV4dGVuc2lvbiBvZiB0aGUgQnVzXHJcbiogSXQgaXMgdXNlZCBtYWlubHkgaW4gdGhlIGludGVybmFsIHNhbmRib3ggcm91dGluZy5cclxuKi9cclxuY2xhc3MgTWluaUJ1cyBleHRlbmRzIEJ1cyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBvc3QgYSBtZXNzYWdlIGZvciByb3V0aW5nLiBNZXNzYWdlIGlzIHJvdXRlZCBkaXJlY3RseSB0byB0aGUgZXh0ZXJuYWwgcm91dGluZyBfb25Qb3N0TWVzc2FnZS5cclxuICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBpbk1zZyAgICAgICAgICAgIEpTT04gd2l0aCBtYW5kYXRvcnkgTWVzc2FnZSBzdHJ1Y3R1cmUge2lkLCB0eXBlLCBmcm9tLCB0b31cclxuICAgKiBAcGFyYW0gIHtDYWxsYmFja30gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBjYWxsYmFjayBpZiBhIHJlc3BvbnNlIGlzIGV4cGVjdGVkIGZyb20gdGhlIHJlcXVlc3QuIEEgcmVzcG9uc2Ugd2lsbCBiZSBhbHdheXMgc2VudCwgZXZlbiBpZiBpdCBpcyBhIFwiVGltZW91dFwiLlxyXG4gICAqIEByZXR1cm4ge251bWJlcn0gICAgICAgICAgICAgICAgICB0aGUgTWVzc2FnZSBpZFxyXG4gICAqL1xyXG4gIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrLCB0aW1lb3V0KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9nZW5JZChpbk1zZyk7XHJcbiAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjaywgdGltZW91dCk7XHJcblxyXG4gICAgLy9hbHdheXMgc2VuZCB0byBleHRlcm5hbCAodG8gY29yZSBNZXNzYWdlQnVzKVxyXG4gICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UoaW5Nc2cpO1xyXG5cclxuICAgIHJldHVybiBpbk1zZy5pZDtcclxuICB9XHJcblxyXG4gIC8vaW50ZXJuYWwgbWV0aG9kIHVzZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgYnkgYW4gZXh0ZXJuYWwgcm91dGluZyBzeXN0ZW1cclxuICBfb25NZXNzYWdlKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHtcclxuICAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbbXNnLnRvXTtcclxuICAgICAgaWYgKGl0ZW1MaXN0KSB7XHJcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcclxuICAgICAgICBpZiAoIW1zZy50by5zdGFydHNXaXRoKCdoeXBlcnR5JykpIHtcclxuICAgICAgICAgIF90aGlzLl9wdWJsaXNoT25EZWZhdWx0KG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIF90aGlzLl9wdWJsaXNoT25EZWZhdWx0KG1zZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNaW5pQnVzO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTtBQUVBOzs7Ozs7QUFLQTs7Ozs7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQUVBO0FBRUE7Ozs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQXZDQTtBQUNBO0FBMENBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log system\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_0__["getLogger"](\'Bus\');\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.\r\n* Components that need a message system should receive this class as a dependency or extend it.\r\n* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener\r\n*/\n\nvar Bus =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _msgId: number;\r\n  _subscriptions: <url: MsgListener[]>\r\n    _responseTimeOut: number\r\n  _responseCallbacks: <url+id: (msg) => void>\r\n    */\n  function Bus() {\n    _classCallCheck(this, Bus);\n\n    var _this = this;\n\n    _this._msgId = 0;\n    _this._subscriptions = {};\n    _this._responseTimeOut = 15000; //default to 3s\n\n    _this._responseCallbacks = {};\n\n    _this._registerExternalListener();\n  }\n  /**\r\n  * Register listener to receive message when "msg.to === url".\r\n  * Special url "*" for default listener is accepted to intercept all messages.\r\n  * @param {URL} url Address to intercept, tha is in the message "to"\r\n  * @param {Listener} listener listener\r\n  * @return {MsgListener} instance of MsgListener\r\n  */\n\n\n  _createClass(Bus, [{\n    key: "addListener",\n    value: function addListener(url, listener) {\n      var _this = this;\n\n      var item = new MsgListener(_this._subscriptions, url, listener);\n      var itemList = _this._subscriptions[url];\n\n      if (!itemList) {\n        itemList = [];\n        _this._subscriptions[url] = itemList;\n      }\n\n      itemList.push(item);\n      return item;\n    }\n    /**\r\n     * Manually add a response listener. Only one listener per message ID should exist.\r\n     * ATENTION, there is no timeout for this listener.\r\n     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.\r\n     * @param {URL} url Origin address of the message sent, "msg.from".\r\n     * @param {number} msgId Message ID that is returned from the postMessage.\r\n     * @param {Function} responseListener Callback function for the response\r\n     */\n\n  }, {\n    key: "addResponseListener",\n    value: function addResponseListener(url, msgId, responseListener) {\n      this._responseCallbacks[url + msgId] = responseListener;\n    }\n    /**\r\n     * Remove the response listener.\r\n     * @param {URL} url Origin address of the message sent, "msg.from".\r\n     * @param {number} msgId  Message ID that is returned from the postMessage\r\n     */\n\n  }, {\n    key: "removeResponseListener",\n    value: function removeResponseListener(url, msgId) {\n      delete this._responseCallbacks[url + msgId];\n    }\n    /**\r\n     * Remove all existent listeners for the URL\r\n     * @param  {URL} url Address registered\r\n     */\n\n  }, {\n    key: "removeAllListenersOf",\n    value: function removeAllListenersOf(url) {\n      delete this._subscriptions[url];\n    }\n    /**\r\n     * Helper method to bind listeners (in both directions) into other MiniBus target.\r\n     * @param  {URL} outUrl Outbound URL, register listener for url in direction "this -> target"\r\n     * @param  {URL} inUrl Inbound URL, register listener for url in direction "target -> this"\r\n     * @param  {MiniBus} target The other target MiniBus\r\n     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.\r\n     */\n\n  }, {\n    key: "bind",\n    value: function bind(outUrl, inUrl, target) {\n      var _this2 = this;\n\n      var _this = this;\n\n      var thisListn = _this.addListener(outUrl, function (msg) {\n        target.postMessage(msg);\n      });\n\n      var targetListn = target.addListener(inUrl, function (msg) {\n        _this.postMessage(msg);\n      });\n      return {\n        thisListener: thisListn,\n        targetListener: targetListn,\n        unbind: function unbind() {\n          _this2.thisListener.remove();\n\n          _this2.targetListener.remove();\n        }\n      };\n    } //publish on default listeners\n\n  }, {\n    key: "_publishOnDefault",\n    value: function _publishOnDefault(msg) {\n      //is there any "*" (default) listeners?\n      var itemList = this._subscriptions[\'*\'];\n\n      if (itemList) {\n        this._publishOn(itemList, msg);\n      }\n    } //publish on a subscription list.\n\n  }, {\n    key: "_publishOn",\n    value: function _publishOn(itemList, msg) {\n      itemList.forEach(function (sub) {\n        sub._callback(msg);\n      });\n    }\n  }, {\n    key: "_responseCallback",\n    value: function _responseCallback(inMsg, responseCallback) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var _this = this; //automatic management of response handlers\n\n\n      if (responseCallback) {\n        var responseId = inMsg.from + inMsg.id;\n        _this._responseCallbacks[responseId] = responseCallback;\n\n        if (timeout) {\n          setTimeout(function () {\n            var responseFun = _this._responseCallbacks[responseId];\n            delete _this._responseCallbacks[responseId];\n\n            if (responseFun) {\n              var errorMsg = {\n                id: inMsg.id,\n                type: \'response\',\n                body: {\n                  code: 408,\n                  desc: \'Response timeout!\',\n                  value: inMsg\n                }\n              };\n              responseFun(errorMsg);\n            }\n          }, _this._responseTimeOut);\n        }\n      }\n    } //TODO: provisional responses should reset timeout\n\n  }, {\n    key: "_onResponse",\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      if (msg.type === \'response\') {\n        var responseId = msg.to + msg.id;\n        var responseFun = _this._responseCallbacks[responseId];\n\n        if (msg.body.code >= 200) {\n          //if it\'s a provisional response, don\'t delete response listener\n          delete _this._responseCallbacks[responseId];\n        }\n\n        if (responseFun) {\n          responseFun(msg);\n          return true;\n        }\n      }\n\n      return false;\n    } //receive messages from external interface\n\n  }, {\n    key: "_onMessage",\n    value: function _onMessage(msg) {\n      var _this = this;\n\n      if (!_this._onResponse(msg)) {\n        var itemList = _this._subscriptions[msg.to];\n\n        if (itemList) {\n          _this._publishOn(itemList, msg);\n        } else {\n          _this._publishOnDefault(msg);\n        }\n      }\n    }\n  }, {\n    key: "_genId",\n    value: function _genId(inMsg) {\n      //TODO: how do we manage message ID\'s? Should it be a global runtime counter, or per URL address?\n      //Global counter will not work, because there will be multiple MiniBus instances!\n      //Per URL, can be a lot of data to maintain!\n      //Maybe a counter per MiniBus instance. This is the assumed solution for now.\n      if (!inMsg.id || inMsg.id === 0) {\n        this._msgId++;\n        inMsg.id = this._msgId;\n      }\n    }\n    /**\r\n    * Send messages to local listeners, or if not exists to external listeners.\r\n    * It\'s has an optional mechanism for automatic management of response handlers.\r\n    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).\r\n    * @param  {Message} msg Message to send. Message ID is automatically added to the message.\r\n    * @param  {Function} responseCallback Optional parameter, if the developer what\'s automatic response management.\r\n    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.\r\n    */\n\n  }, {\n    key: "postMessage",\n    value: function postMessage(inMsg, responseCallback) {}\n    /**\r\n     * Function to post messages with a number of retries in case timeouts occur.\r\n     * @param  {Message} msg Message to send. Message ID is automatically added to the message.\r\n     * @param  {Function} responseCallback Optional parameter, if the developer what\'s automatic response management.\r\n     * @param  {integer} retries number of retries when timeouts occur\r\n     * @return {boolean} message delivery result;\r\n     */\n\n  }, {\n    key: "postMessageWithRetries",\n    value: function postMessageWithRetries(msg, retries, callback) {\n      var _this = this;\n\n      var retry = 0; //let timeout = true;\n\n      var sendMsg = function sendMsg() {\n        return new Promise(function (resolve, reject) {\n          _this.postMessage(msg, function (reply) {\n            if (reply.body.code === 408 || reply.body.code === 500) reject();else {\n              log.info(\'[Bus.postMessageWithRetries] msg delivered: \', msg);\n              callback(reply);\n              resolve();\n            }\n          });\n        });\n      };\n\n      var tryAgain = function tryAgain() {\n        sendMsg().then(function () {\n          //timeout = false;\n          return;\n        }, function () {\n          log.warn("[Bus.postMessageWithRetries] Message Bounced (retry ".concat(retry, "): \'"), msg);\n\n          if (retry++ < retries) {\n            tryAgain(); // setTimeout(() => { tryAgain(); }, 1000);\n          } else {\n            var error = "[Error] Message Bounced (delivery attempts ".concat(retries, "): \'");\n            throw new Error(error + msg);\n          }\n        });\n      };\n\n      tryAgain();\n    }\n    /**\r\n     * Not public available, used by the class extension implementation, to process messages from the public "postMessage" without a registered listener.\r\n     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.\r\n     * @param  {Message.Message} msg Message\r\n     */\n\n  }, {\n    key: "_onPostMessage",\n    value: function _onPostMessage(msg) {}\n    /*implementation will send message to external system*/\n\n    /**\r\n     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.\r\n     * This method is called one time in the constructor to register external listeners.\r\n     * The implementation will probably call the "_onMessage" method to publish in the local listeners.\r\n     * DO NOT call "postMessage", there is a danger that the message enters in a cycle!\r\n     */\n\n  }, {\n    key: "_registerExternalListener",\n    value: function _registerExternalListener() {\n      /*implementation will register external listener and call "this._onMessage(msg)" */\n    }\n  }]);\n\n  return Bus;\n}();\n\nvar MsgListener =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _subscriptions: <string: MsgListener[]>;\r\n  _url: string;\r\n  _callback: (msg) => void;\r\n  */\n  function MsgListener(subscriptions, url, callback) {\n    _classCallCheck(this, MsgListener);\n\n    var _this = this;\n\n    _this._subscriptions = subscriptions;\n    _this._url = url;\n    _this._callback = callback;\n  }\n\n  _createClass(MsgListener, [{\n    key: "remove",\n\n    /**\r\n     * Remove this listener from the Bus\r\n     */\n    value: function remove() {\n      var _this = this;\n\n      var subs = _this._subscriptions[_this._url];\n\n      if (subs) {\n        var index = subs.indexOf(_this);\n        subs.splice(index, 1); //if there are no listeners, remove the subscription entirely.\n\n        if (subs.length === 0) {\n          delete _this._subscriptions[_this._url];\n        }\n      }\n    }\n  }, {\n    key: "url",\n    get: function get() {\n      return this._url;\n    }\n  }]);\n\n  return MsgListener;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (Bus);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * EventEmitter\r\n * All classes which extends this, can have addEventListener and trigger events;\r\n */\nvar EventEmitter =\n/*#__PURE__*/\nfunction () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n  }\n\n  _createClass(EventEmitter, [{\n    key: "addEventListener",\n\n    /**\r\n     * addEventListener listen for an eventType\r\n     * @param  {string}         eventType - listening for this type of event\r\n     * @param  {Function}       cb        - callback function will be executed when the event it is invoked\r\n     */\n    value: function addEventListener(eventType, cb) {\n      var _this = this;\n\n      _this[eventType] = cb;\n    }\n    /**\r\n     * Invoke the eventType\r\n     * @param  {string} eventType - event will be invoked\r\n     * @param  {object} params - parameters will be passed to the addEventListener\r\n     */\n\n  }, {\n    key: "trigger",\n    value: function trigger(eventType, params) {\n      var _this = this;\n\n      if (_this[eventType]) {\n        _this[eventType](params);\n      }\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (EventEmitter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvRXZlbnRFbWl0dGVyLmpzPzhhOGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG4vKipcclxuICogRXZlbnRFbWl0dGVyXHJcbiAqIEFsbCBjbGFzc2VzIHdoaWNoIGV4dGVuZHMgdGhpcywgY2FuIGhhdmUgYWRkRXZlbnRMaXN0ZW5lciBhbmQgdHJpZ2dlciBldmVudHM7XHJcbiAqL1xyXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xyXG5cclxuICAvKipcclxuICAgKiBhZGRFdmVudExpc3RlbmVyIGxpc3RlbiBmb3IgYW4gZXZlbnRUeXBlXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgIGV2ZW50VHlwZSAtIGxpc3RlbmluZyBmb3IgdGhpcyB0eXBlIG9mIGV2ZW50XHJcbiAgICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgIGNiICAgICAgICAtIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgaXQgaXMgaW52b2tlZFxyXG4gICAqL1xyXG4gIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzW2V2ZW50VHlwZV0gPSBjYjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludm9rZSB0aGUgZXZlbnRUeXBlXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB3aWxsIGJlIGludm9rZWRcclxuICAgKiBAcGFyYW0gIHtvYmplY3R9IHBhcmFtcyAtIHBhcmFtZXRlcnMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGFkZEV2ZW50TGlzdGVuZXJcclxuICAgKi9cclxuICB0cmlnZ2VyKGV2ZW50VHlwZSwgcGFyYW1zKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmIChfdGhpc1tldmVudFR5cGVdKSB7XHJcbiAgICAgIF90aGlzW2V2ZW50VHlwZV0ocGFyYW1zKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBOzs7O0FBSUE7Ozs7Ozs7Ozs7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUlBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){eval("(function (factory) {\n    if (true) {\n        // Node/CommonJS\n        module.exports = factory();\n    } else { var glob; }\n}(function (undefined) {\n\n    'use strict';\n\n    /*\n     * Fastest md5 implementation around (JKM md5).\n     * Credits: Joseph Myers\n     *\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n     * @see http://jsperf.com/md5-shootout/7\n     */\n\n    /* this function is much faster,\n      so if possible we use it. Some IEs\n      are the only ones I know of that\n      need the idiotic second function,\n      generated by an if clause.  */\n    var add32 = function (a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    },\n        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n\n    function cmn(q, a, b, x, s, t) {\n        a = add32(add32(a, q), add32(x, t));\n        return add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    function md5cycle(x, k) {\n        var a = x[0],\n            b = x[1],\n            c = x[2],\n            d = x[3];\n\n        a += (b & c | ~b & d) + k[0] - 680876936 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[1] - 389564586 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[2] + 606105819 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[4] - 176418897 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[7] - 45705983 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[10] - 42063 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[13] - 40341101 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n\n        a += (b & d | c & ~d) + k[1] - 165796510 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[11] + 643717713 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[0] - 373897302 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[5] - 701558691 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[10] + 38016083 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[15] - 660478335 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[4] - 405537848 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[9] + 568446438 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[3] - 187363961 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[2] - 51403784 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n\n        a += (b ^ c ^ d) + k[5] - 378558 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[14] - 35309556 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[7] - 155497632 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[13] + 681279174 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[0] - 358537222 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[3] - 722521979 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[6] + 76029189 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[9] - 640364487 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[12] - 421815835 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[15] + 530742520 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[2] - 995338651 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n\n        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;\n        b  = (b << 21 | b >>> 11) + c | 0;\n\n        x[0] = a + x[0] | 0;\n        x[1] = b + x[1] | 0;\n        x[2] = c + x[2] | 0;\n        x[3] = d + x[3] | 0;\n    }\n\n    function md5blk(s) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    function md5blk_array(a) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n    }\n\n    function md51(s) {\n        var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n        return state;\n    }\n\n    function md51_array(a) {\n        var n = a.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n        // containing the last element of the parent array if the sub array specified starts\n        // beyond the length of the parent array - weird.\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n        }\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n\n        return state;\n    }\n\n    function rhex(n) {\n        var s = '',\n            j;\n        for (j = 0; j < 4; j += 1) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n\n    function hex(x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n            x[i] = rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    // In some cases the fast add32 function cannot be used..\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\n        add32 = function (x, y) {\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n            return (msw << 16) | (lsw & 0xFFFF);\n        };\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * ArrayBuffer slice polyfill.\n     *\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\n     */\n\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\n        (function () {\n            function clamp(val, length) {\n                val = (val | 0) || 0;\n\n                if (val < 0) {\n                    return Math.max(val + length, 0);\n                }\n\n                return Math.min(val, length);\n            }\n\n            ArrayBuffer.prototype.slice = function (from, to) {\n                var length = this.byteLength,\n                    begin = clamp(from, length),\n                    end = length,\n                    num,\n                    target,\n                    targetArray,\n                    sourceArray;\n\n                if (to !== undefined) {\n                    end = clamp(to, length);\n                }\n\n                if (begin > end) {\n                    return new ArrayBuffer(0);\n                }\n\n                num = end - begin;\n                target = new ArrayBuffer(num);\n                targetArray = new Uint8Array(target);\n\n                sourceArray = new Uint8Array(this, begin, num);\n                targetArray.set(sourceArray);\n\n                return target;\n            };\n        })();\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * Helpers.\n     */\n\n    function toUtf8(str) {\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        return str;\n    }\n\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n        var length = str.length,\n           buff = new ArrayBuffer(length),\n           arr = new Uint8Array(buff),\n           i;\n\n        for (i = 0; i < length; i += 1) {\n            arr[i] = str.charCodeAt(i);\n        }\n\n        return returnUInt8Array ? arr : buff;\n    }\n\n    function arrayBuffer2Utf8Str(buff) {\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\n    }\n\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\n        var result = new Uint8Array(first.byteLength + second.byteLength);\n\n        result.set(new Uint8Array(first));\n        result.set(new Uint8Array(second), first.byteLength);\n\n        return returnUInt8Array ? result : result.buffer;\n    }\n\n    function hexToBinaryString(hex) {\n        var bytes = [],\n            length = hex.length,\n            x;\n\n        for (x = 0; x < length - 1; x += 2) {\n            bytes.push(parseInt(hex.substr(x, 2), 16));\n        }\n\n        return String.fromCharCode.apply(String, bytes);\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation.\n     *\n     * Use this class to perform an incremental md5, otherwise use the\n     * static methods instead.\n     */\n\n    function SparkMD5() {\n        // call reset to init the instance\n        this.reset();\n    }\n\n    /**\n     * Appends a string.\n     * A conversion will be applied if an utf8 string is detected.\n     *\n     * @param {String} str The string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.append = function (str) {\n        // Converts the string to utf8 bytes if necessary\n        // Then append as binary\n        this.appendBinary(toUtf8(str));\n\n        return this;\n    };\n\n    /**\n     * Appends a binary string.\n     *\n     * @param {String} contents The binary string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n\n        var length = this._buff.length,\n            i;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n        }\n\n        this._buff = this._buff.substring(i - 64);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            i,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.reset = function () {\n        this._buff = '';\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.prototype.getState = function () {\n        return {\n            buff: this._buff,\n            length: this._length,\n            hash: this._hash\n        };\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.setState = function (state) {\n        this._buff = state.buff;\n        this._length = state.length;\n        this._hash = state.hash;\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other additional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.prototype.destroy = function () {\n        delete this._hash;\n        delete this._buff;\n        delete this._length;\n    };\n\n    /**\n     * Finish the final calculation based on the tail.\n     *\n     * @param {Array}  tail   The tail (will be modified)\n     * @param {Number} length The length of the remaining buffer\n     */\n    SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n            tmp,\n            lo,\n            hi;\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(this._hash, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Do the final computation based on the tail and length\n        // Beware that the final length may not fit in 32 bits so we take care of that\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._hash, tail);\n    };\n\n    /**\n     * Performs the md5 hash on a string.\n     * A conversion will be applied if utf8 string is detected.\n     *\n     * @param {String}  str The string\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hash = function (str, raw) {\n        // Converts the string to utf8 bytes if necessary\n        // Then compute it using the binary function\n        return SparkMD5.hashBinary(toUtf8(str), raw);\n    };\n\n    /**\n     * Performs the md5 hash on a binary string.\n     *\n     * @param {String}  content The binary string\n     * @param {Boolean} raw     True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation for array buffers.\n     *\n     * Use this class to perform an incremental md5 ONLY for array buffers.\n     */\n    SparkMD5.ArrayBuffer = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n    /**\n     * Appends an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array to be appended\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n            length = buff.length,\n            i;\n\n        this._length += arr.byteLength;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n        }\n\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            i,\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\n        var state = SparkMD5.prototype.getState.call(this);\n\n        // Convert buffer to a string\n        state.buff = arrayBuffer2Utf8Str(state.buff);\n\n        return state;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n        // Convert string to buffer\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n\n        return SparkMD5.prototype.setState.call(this, state);\n    };\n\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\n    /**\n     * Performs the md5 hash on an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array buffer\n     * @param {Boolean}     raw True to get the raw string, false to get the hex one\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr)),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    return SparkMD5;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* Core IdentityManager interface\r\n* Class to allow applications to search for Identities registered in runtime-core\r\n*/\n\nvar IdentityManager =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * To initialise the IdentityManager, which will provide the support for hyperties to\r\n  * query about identities registered\r\n  * @param  {String}          owner            owner\r\n  * @param  {String}          runtimeURL            runtimeURL\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  */\n  function IdentityManager(owner, runtimeURL, msgBus) {\n    _classCallCheck(this, IdentityManager);\n\n    var _this = this;\n\n    _this.messageBus = msgBus;\n    _this.domain = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[/* divideURL */ \"k\"])(owner).domain;\n    _this.owner = owner;\n    _this.runtimeURL = runtimeURL;\n  }\n  /**\r\n  * Function to query the runtime registry about the identity to which the hyperty was associated\r\n  * @param {String}       type (Optional)         type of user info required\r\n  * @param {String}       owner (Optional)   owner to search for\r\n  * @return {Promise}     userURL       userURL associated to the hyperty\r\n  */\n\n\n  _createClass(IdentityManager, [{\n    key: \"discoverUserRegistered\",\n    value: function discoverUserRegistered(type, hyperty) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var activeHypertyURL; // if any type of search is selected query for that type, otherwise query for default user info\n\n        var searchType = type ? type : '.';\n\n        if (!hyperty) {\n          activeHypertyURL = _this.owner;\n        } else {\n          activeHypertyURL = hyperty;\n        }\n\n        var msg = {\n          type: 'read',\n          from: activeHypertyURL,\n          to: _this.runtimeURL + '/registry/',\n          body: {\n            resource: searchType,\n            criteria: activeHypertyURL\n          }\n        };\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          var userURL = reply.body.resource;\n\n          if (userURL && reply.body.code === 200) {\n            resolve(userURL);\n          } else {\n            reject('code: ' + reply.body.code + ' No user was found');\n          }\n        });\n      });\n    }\n    /**\r\n    * Function to query the Identity Module about authenticated identities from a certain domain\r\n    * @param {String}       idp idp domain of the identity to be discovered\r\n    * @return {Promise}     identity\r\n    */\n\n  }, {\n    key: \"discoverIdentityPerIdP\",\n    value: function discoverIdentityPerIdP(idp) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          type: 'read',\n          from: this.owner,\n          to: _this.runtimeURL + '/idm',\n          body: {\n            resource: idp,\n            criteria: 'idp'\n          }\n        };\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            resolve(reply.body.value);\n          } else {\n            reject(reply.body.code + ' ' + reply.body.desc);\n          }\n        });\n      });\n    }\n  }]);\n\n  return IdentityManager;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (IdentityManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvaWRlbnRpdHkvSWRlbnRpdHlNYW5hZ2VyLmpzPzE2MzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5pbXBvcnQge2RpdmlkZVVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqXHJcbiogQ29yZSBJZGVudGl0eU1hbmFnZXIgaW50ZXJmYWNlXHJcbiogQ2xhc3MgdG8gYWxsb3cgYXBwbGljYXRpb25zIHRvIHNlYXJjaCBmb3IgSWRlbnRpdGllcyByZWdpc3RlcmVkIGluIHJ1bnRpbWUtY29yZVxyXG4qL1xyXG5jbGFzcyBJZGVudGl0eU1hbmFnZXIge1xyXG5cclxuICAvKipcclxuICAqIFRvIGluaXRpYWxpc2UgdGhlIElkZW50aXR5TWFuYWdlciwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG9cclxuICAqIHF1ZXJ5IGFib3V0IGlkZW50aXRpZXMgcmVnaXN0ZXJlZFxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICBvd25lciAgICAgICAgICAgIG93bmVyXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMXHJcbiAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSAgICAgICAgICBtc2didXMgICAgICAgICAgICAgICAgbXNnYnVzXHJcbiAgKi9cclxuICBjb25zdHJ1Y3Rvcihvd25lciwgcnVudGltZVVSTCwgbXNnQnVzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMubWVzc2FnZUJ1cyA9IG1zZ0J1cztcclxuXHJcbiAgICBfdGhpcy5kb21haW4gPSBkaXZpZGVVUkwob3duZXIpLmRvbWFpbjtcclxuICAgIF90aGlzLm93bmVyID0gb3duZXI7XHJcbiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gcXVlcnkgdGhlIHJ1bnRpbWUgcmVnaXN0cnkgYWJvdXQgdGhlIGlkZW50aXR5IHRvIHdoaWNoIHRoZSBoeXBlcnR5IHdhcyBhc3NvY2lhdGVkXHJcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgICAgdHlwZSAoT3B0aW9uYWwpICAgICAgICAgdHlwZSBvZiB1c2VyIGluZm8gcmVxdWlyZWRcclxuICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgICBvd25lciAoT3B0aW9uYWwpICAgb3duZXIgdG8gc2VhcmNoIGZvclxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgIHVzZXJVUkwgICAgICAgdXNlclVSTCBhc3NvY2lhdGVkIHRvIHRoZSBoeXBlcnR5XHJcbiAgKi9cclxuICBkaXNjb3ZlclVzZXJSZWdpc3RlcmVkKHR5cGUsIGh5cGVydHkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgbGV0IGFjdGl2ZUh5cGVydHlVUkw7XHJcblxyXG4gICAgICAvLyBpZiBhbnkgdHlwZSBvZiBzZWFyY2ggaXMgc2VsZWN0ZWQgcXVlcnkgZm9yIHRoYXQgdHlwZSwgb3RoZXJ3aXNlIHF1ZXJ5IGZvciBkZWZhdWx0IHVzZXIgaW5mb1xyXG4gICAgICBsZXQgc2VhcmNoVHlwZSA9ICh0eXBlKSA/IHR5cGUgOiAnLic7XHJcblxyXG4gICAgICBpZiAoIWh5cGVydHkpIHtcclxuICAgICAgICBhY3RpdmVIeXBlcnR5VVJMID0gX3RoaXMub3duZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWN0aXZlSHlwZXJ0eVVSTCA9IGh5cGVydHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBtc2cgPSB7XHJcbiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBhY3RpdmVIeXBlcnR5VVJMLCB0bzogX3RoaXMucnVudGltZVVSTCArICcvcmVnaXN0cnkvJywgYm9keTogeyByZXNvdXJjZTogc2VhcmNoVHlwZSwgY3JpdGVyaWE6IGFjdGl2ZUh5cGVydHlVUkx9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCB1c2VyVVJMID0gcmVwbHkuYm9keS5yZXNvdXJjZTtcclxuXHJcbiAgICAgICAgaWYgKHVzZXJVUkwgJiYgcmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIHJlc29sdmUodXNlclVSTCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnY29kZTogJyArIHJlcGx5LmJvZHkuY29kZSArICcgTm8gdXNlciB3YXMgZm91bmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHF1ZXJ5IHRoZSBJZGVudGl0eSBNb2R1bGUgYWJvdXQgYXV0aGVudGljYXRlZCBpZGVudGl0aWVzIGZyb20gYSBjZXJ0YWluIGRvbWFpblxyXG4gICogQHBhcmFtIHtTdHJpbmd9ICAgICAgIGlkcCBpZHAgZG9tYWluIG9mIHRoZSBpZGVudGl0eSB0byBiZSBkaXNjb3ZlcmVkXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgaWRlbnRpdHlcclxuICAqL1xyXG5cclxuICBkaXNjb3ZlcklkZW50aXR5UGVySWRQKGlkcCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBsZXQgbXNnID0ge1xyXG4gICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogdGhpcy5vd25lciwgdG86IF90aGlzLnJ1bnRpbWVVUkwgKyAnL2lkbScsIGJvZHk6IHsgcmVzb3VyY2U6IGlkcCwgY3JpdGVyaWE6ICdpZHAnfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmNvZGUgKyAnICcgKyByZXBseS5ib2R5LmRlc2MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IElkZW50aXR5TWFuYWdlcjtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7QUFFQTs7Ozs7QUFJQTs7O0FBRUE7Ozs7Ozs7QUFPQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFEQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n//import IdentityManager from '../identityManager/IdentityManager';\n//import Syncher from '../syncher/Syncher.js';\n//import Discovery from '../discovery/Discovery.js';\n//import {divideURL} from '../utils/utils';\n//import Search from '../utils/Search';\n\n/**\r\n* Context Observer;\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n*/\n\nvar ContextObserver =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ContextObserver, _EventEmitter);\n\n  function ContextObserver(hypertyURL, bus, configuration, contextResourceTypes, factory, syncher) {\n    var _this2;\n\n    _classCallCheck(this, ContextObserver);\n\n    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\n    if (!bus) throw new Error('The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('The configuration is a needed parameter ');\n    if (!factory) throw new Error('The factory is a needed parameter ');\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ContextObserver).call(this));\n\n    var _this = _assertThisInitialized(_this2);\n\n    _this._contextResourceTypes = contextResourceTypes;\n    _this._url = hypertyURL;\n    _this._discoverUsersPromises = {}; // object with promises executed at discoverUsers function\n\n    _this._observePromises = {}; // object with promises executed at observe function\n    //let identityManager = new IdentityManager(hypertyURL, configuration.runtimeURL, bus);\n\n    console.log('[ContextObserver] started with hypertyURL->', hypertyURL);\n    _this._domain = factory.divideURL(configuration.runtimeURL).domain;\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + _this._domain + '/.well-known/dataschema/Context';\n    _this._users2observe = [];\n    _this._observers = {};\n    _this2._syncher = syncher ? syncher : factory.createSyncher(hypertyURL, bus, configuration);\n    var discovery = factory.createDiscovery(hypertyURL, configuration.runtimeURL, bus);\n    _this._discovery = discovery;\n    _this._discoveries = {}; //list of discovered objects\n    //_this.identityManager = identityManager;\n    //_this.search = new Search(discovery, identityManager);\n\n    window.discovery = _this._discovery;\n    return _this2;\n  }\n\n  _createClass(ContextObserver, [{\n    key: \"start\",\n    value: function start(resumedContext, disconnectedCallBack) {\n      var _this = this;\n\n      console.log('[ContextObserver.start] ');\n      return new Promise(function (resolve, reject) {\n        _this._syncher.resumeObservers({\n          store: true\n        }).then(function (observers) {\n          var observersList = Object.keys(observers);\n\n          if (observersList.length > 0) {\n            console.log('[ContextObserver.start] resuming: ', observers);\n            /*observersList.forEach((i)=>{\r\n            _this._users2observe.push(new UserAvailabilityController(observers[i]));\r\n            });*/\n\n            _this._observers = observers;\n            resolve(observers);\n            observersList.forEach(function (observer) {\n              var Context = observers[observer]; // By default resumed context is set with resumedContext.\n\n              if (resumedContext) context.data.values = resumedContext; // Context will will be updated with value synchronized with reporter if connected\n\n              Context.sync(); //Add listener to be notified when reporter is abruptly disconnected\n\n              if (disconnectedCallBack) Context.onDisconnected(disconnectedCallBack);\n            });\n          } else {\n            resolve(false);\n          }\n        })[\"catch\"](function (reason) {\n          console.info('[ContextObserver] Resume Observer failed | ', reason);\n          resolve(false);\n        });\n      })[\"catch\"](function (reason) {\n        reject('[ContextObserver] Start failed | ', reason);\n      });\n    }\n  }, {\n    key: \"resumeDiscoveries\",\n    value: function resumeDiscoveries() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._discovery.resumeDiscoveries().then(function (discoveries) {\n          console.log('[ContextObserver._resumeDiscoveries] found: ', discoveries);\n          discoveries.forEach(function (discovery) {\n            if (discovery.data.resources && discovery.data.resources[0] === _this._contextResourceTypes[0]) {\n              console.log('[ContextObserver._resumeDiscoveries] resuming: ', discovery);\n\n              if (discovery.data.status === 'live') {\n                // previously discovered object is now live\n                resolve([discovery.data]);\n                discovery.unsubscribeLive(_this._url);\n              } else {\n                // previously discovered object is still disconnected\n                discovery.onLive(_this._url, function () {\n                  console.log('[ContextObserver._resumeDiscoveries] disconnected Hyperty is back to live', discovery);\n                  resolve([discovery.data]);\n                  discovery.unsubscribeLive(_this._url);\n                });\n              }\n            }\n          });\n        });\n      })[\"catch\"](function (reason) {\n        reject('[ContextObserver] resumeDiscoveries failed | ', reason);\n      });\n    }\n  }, {\n    key: \"onResumeObserver\",\n    value: function onResumeObserver(callback) {\n      var _this = this;\n\n      _this._onResumeObserver = callback;\n    }\n  }, {\n    key: \"discoverUsers\",\n    value: function discoverUsers(email, domain) {\n      var _this = this;\n\n      var user = email + '@' + domain;\n\n      if (!_this._discoverUsersPromises[user]) {\n        _this._discoverUsersPromises[user] = new Promise(function (resolve, reject) {\n          _this._discovery.discoverHypertiesDO(email, ['context'], _this._contextResourceTypes, domain).then(function (hyperties) {\n            //_this.search.users([email], [domain], ['context'], ['Context_context']).then(function(a) {\n            console.log('[ContextObserver.discoverUsers] discovery result->', hyperties);\n            var discovered = [];\n            var disconnected = [];\n            hyperties.forEach(function (hyperty) {\n              _this._discoveries[hyperty.data.hypertyID] = hyperty;\n\n              if (hyperty.data.status === 'live') {\n                discovered.push(hyperty.data);\n              } else {\n                disconnected.push(hyperty);\n              }\n            });\n\n            if (discovered.length > 0) {\n              console.log('[ContextObserver.discoverUsers] returning discovered hyperties data->', discovered);\n              resolve(discovered);\n            } else if (disconnected.length > 0) {\n              console.log('[ContextObserver.discoverUsers] disconnected Hyperties ', disconnected); //resolve([]);\n\n              disconnected[0].onLive(_this._url, function () {\n                console.log('[ContextObserver.discoverUsers] disconnected Hyperty is back to live', disconnected[0]);\n                discovered.push(disconnected[0].data);\n                resolve(discovered);\n                disconnected[0].unsubscribeLive(_this._url);\n              });\n            }\n          });\n        });\n      }\n\n      return _this._discoverUsersPromises[user];\n    }\n    /**\r\n     * This function is used to start the user Context observation for a certain user Context reporter\r\n     * @param  {DiscoveredObject} hyperty       Hyperty to be observed.\r\n     * @return {<Promise> DataObjectObserver}      It returns as a Promise the UserAvailability Data Object Observer.\r\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe(hyperty) {\n      var domainSubscription = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _this = this;\n\n      if (!_this._observePromises[hyperty.hypertyID]) {\n        _this._observePromises[hyperty.hypertyID] = new Promise(function (resolve, reject) {\n          //check if we are already observing it\n          _this._users2observe.forEach(function (Context) {\n            if (Context._reporter === hyperty.hypertyID) return resolve(Context);\n          });\n\n          _this._discovery.discoverDataObjectsPerReporter(hyperty.hypertyID, ['context'], _this._contextResourceTypes, _this._domain).then(function (dataObjects) {\n            console.log('[ContextObserver.discoverAvailability] discovered context objects ', dataObjects);\n            var last = 0;\n            var url;\n            dataObjects.forEach(function (dataObject) {\n              if (dataObject.hasOwnProperty('lastModified') && dataObject.hasOwnProperty('url') && Date.parse(dataObject.lastModified) > last) {\n                last = dataObject.lastModified;\n                url = dataObject.url; //console.log('URL DATA Object', url);\n              }\n            });\n\n            if (last != 0 && url) {\n              resolve(_this._subscribeContext(hyperty, url, domainSubscription));\n            } else {\n              reject('[ContextObserver.observe] discovered DataObjecs are invalid', dataObjects);\n            }\n          });\n        });\n      }\n\n      return _this._observePromises[hyperty.hypertyID];\n    }\n  }, {\n    key: \"_subscribeContext\",\n    value: function _subscribeContext(hyperty, url) {\n      var domainSubscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var _this = this; // avoid duplicated subscriptions\n\n\n      return new Promise(function (resolve, reject) {\n        _this._users2observe.forEach(function (Context) {\n          if (Context.url === url) return resolve(Context);\n        });\n\n        var input = {\n          schema: _this._objectDescURL,\n          resource: url,\n          store: null,\n          p2p: null,\n          mutual: null,\n          domain_subscription: domainSubscription\n        };\n\n        _this._syncher.subscribe(input).then(function (Context) {\n          console.log('[ContextObserver._subscribeContext] observer object', Context); //let newUserAvailability = new UserAvailabilityController(Context, userID);\n\n          _this._users2observe.push(Context); // When Object is disconnected set user Context status as unavailable\n\n\n          Context.onDisconnected(function () {\n            console.log('[ContextObserver.onDisconnected]: ', Context);\n            Context.data.values[0].value = 'unavailable';\n            Context.sync();\n          });\n          resolve(Context);\n        });\n      });\n    }\n  }, {\n    key: \"_discoverAndSubscribeLegacyUsers\",\n    value: function _discoverAndSubscribeLegacyUsers(name) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._discovery.discoverDataObjectsPerName(name).then(function (result) {\n          console.log('[ContextObserver._discoverAndSubscribeLegacyUsers] All DataObjects Result', result);\n          result.forEach(function (obj) {\n            if (obj.status === 'live') {\n              console.log('Live obj', obj);\n\n              if (!obj.hypertyID) {\n                obj.hypertyID = obj.reporter;\n              }\n\n              _this._subscribeContext(obj.schema, obj.url).then(function (resultSubscribe) {\n                console.log('[ContextObserver._discoverAndSubscribeLegacyUsers] _subscribeContext', resultSubscribe);\n                return resolve(resultSubscribe);\n              });\n            }\n          });\n        })[\"catch\"](function (err) {\n          console.log('error ', err);\n        });\n      });\n    }\n    /**\r\n    * This function is used to stop the user Context observation for a certain user\r\n    * @param  {string} Context       the UserAvailability Data Object Observer URL to be unobserved.\r\n    */\n\n  }, {\n    key: \"unobserve\",\n    value: function unobserve(Context) {\n      var _this = this;\n\n      _this._users2observe.forEach(function (user, index) {\n        if (user.url === Context) {\n          user.unsubscribe();\n\n          _this._users2observe.splice(index, 1);\n        }\n      });\n    }\n  }]);\n\n  return ContextObserver;\n}(_utils_EventEmitter__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ContextObserver);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29udGV4dE1hbmFnZXIvQ29udGV4dE9ic2VydmVyLmpzP2NjZjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgSWRlbnRpdHlNYW5hZ2VyIGZyb20gJy4uL2lkZW50aXR5TWFuYWdlci9JZGVudGl0eU1hbmFnZXInO1xyXG4vL2ltcG9ydCBTeW5jaGVyIGZyb20gJy4uL3N5bmNoZXIvU3luY2hlci5qcyc7XHJcbi8vaW1wb3J0IERpc2NvdmVyeSBmcm9tICcuLi9kaXNjb3ZlcnkvRGlzY292ZXJ5LmpzJztcclxuLy9pbXBvcnQge2RpdmlkZVVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLy9pbXBvcnQgU2VhcmNoIGZyb20gJy4uL3V0aWxzL1NlYXJjaCc7XHJcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vdXRpbHMvRXZlbnRFbWl0dGVyJztcclxuXHJcbi8qKlxyXG4qIENvbnRleHQgT2JzZXJ2ZXI7XHJcbiogQGF1dGhvciBQYXVsbyBDaGFpbmhvIFtwYXVsby1nLWNoYWluaG9AYWx0aWNlbGFicy5jb21dXHJcbiovXHJcblxyXG5jbGFzcyBDb250ZXh0T2JzZXJ2ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihoeXBlcnR5VVJMLCBidXMsIGNvbmZpZ3VyYXRpb24sIGNvbnRleHRSZXNvdXJjZVR5cGVzLCBmYWN0b3J5LCBzeW5jaGVyKSB7XHJcbiAgICBpZiAoIWh5cGVydHlVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIGh5cGVydHlVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7XHJcbiAgICBpZiAoIWJ1cykgdGhyb3cgbmV3IEVycm9yKCdUaGUgTWluaUJ1cyBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcclxuICAgIGlmICghY29uZmlndXJhdGlvbikgdGhyb3cgbmV3IEVycm9yKCdUaGUgY29uZmlndXJhdGlvbiBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIgJyk7XHJcbiAgICBpZiAoIWZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIGZhY3RvcnkgaXMgYSBuZWVkZWQgcGFyYW1ldGVyICcpO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fY29udGV4dFJlc291cmNlVHlwZXMgPSBjb250ZXh0UmVzb3VyY2VUeXBlcztcclxuICAgIF90aGlzLl91cmwgPSBoeXBlcnR5VVJMO1xyXG4gICAgX3RoaXMuX2Rpc2NvdmVyVXNlcnNQcm9taXNlcyA9IHt9OyAvLyBvYmplY3Qgd2l0aCBwcm9taXNlcyBleGVjdXRlZCBhdCBkaXNjb3ZlclVzZXJzIGZ1bmN0aW9uXHJcbiAgICBfdGhpcy5fb2JzZXJ2ZVByb21pc2VzID0ge307IC8vIG9iamVjdCB3aXRoIHByb21pc2VzIGV4ZWN1dGVkIGF0IG9ic2VydmUgZnVuY3Rpb25cclxuXHJcblxyXG4gICAgLy9sZXQgaWRlbnRpdHlNYW5hZ2VyID0gbmV3IElkZW50aXR5TWFuYWdlcihoeXBlcnR5VVJMLCBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwsIGJ1cyk7XHJcbiAgICBjb25zb2xlLmxvZygnW0NvbnRleHRPYnNlcnZlcl0gc3RhcnRlZCB3aXRoIGh5cGVydHlVUkwtPicsIGh5cGVydHlVUkwpO1xyXG4gICAgX3RoaXMuX2RvbWFpbiA9IGZhY3RvcnkuZGl2aWRlVVJMKGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCkuZG9tYWluO1xyXG4gICAgX3RoaXMuX29iamVjdERlc2NVUkwgPSAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJyArIF90aGlzLl9kb21haW4gKyAnLy53ZWxsLWtub3duL2RhdGFzY2hlbWEvQ29udGV4dCc7XHJcblxyXG4gICAgX3RoaXMuX3VzZXJzMm9ic2VydmUgPSBbXTtcclxuICAgIF90aGlzLl9vYnNlcnZlcnMgPSB7fTtcclxuXHJcbiAgICB0aGlzLl9zeW5jaGVyID0gc3luY2hlciA/IHN5bmNoZXIgOiBmYWN0b3J5LmNyZWF0ZVN5bmNoZXIoaHlwZXJ0eVVSTCwgYnVzLCBjb25maWd1cmF0aW9uKTtcclxuXHJcbiAgICBsZXQgZGlzY292ZXJ5ID0gZmFjdG9yeS5jcmVhdGVEaXNjb3ZlcnkoaHlwZXJ0eVVSTCwgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMLCBidXMpO1xyXG4gICAgX3RoaXMuX2Rpc2NvdmVyeSA9IGRpc2NvdmVyeTtcclxuXHJcbiAgICBfdGhpcy5fZGlzY292ZXJpZXMgPSB7fTsgLy9saXN0IG9mIGRpc2NvdmVyZWQgb2JqZWN0c1xyXG4gICAgLy9fdGhpcy5pZGVudGl0eU1hbmFnZXIgPSBpZGVudGl0eU1hbmFnZXI7XHJcbiAgICAvL190aGlzLnNlYXJjaCA9IG5ldyBTZWFyY2goZGlzY292ZXJ5LCBpZGVudGl0eU1hbmFnZXIpO1xyXG4gICAgd2luZG93LmRpc2NvdmVyeSA9IF90aGlzLl9kaXNjb3Zlcnk7XHJcbiAgfVxyXG5cclxuXHJcbiAgc3RhcnQocmVzdW1lZENvbnRleHQsIGRpc2Nvbm5lY3RlZENhbGxCYWNrKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgY29uc29sZS5sb2coJ1tDb250ZXh0T2JzZXJ2ZXIuc3RhcnRdICcpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIF90aGlzLl9zeW5jaGVyLnJlc3VtZU9ic2VydmVycyh7c3RvcmU6IHRydWV9KS50aGVuKChvYnNlcnZlcnMpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IG9ic2VydmVyc0xpc3QgPSBPYmplY3Qua2V5cyhvYnNlcnZlcnMpO1xyXG5cclxuICAgICAgICBpZiAob2JzZXJ2ZXJzTGlzdC5sZW5ndGggID4gMCkge1xyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbQ29udGV4dE9ic2VydmVyLnN0YXJ0XSByZXN1bWluZzogJywgb2JzZXJ2ZXJzKTtcclxuXHJcbiAgICAgICAgICAvKm9ic2VydmVyc0xpc3QuZm9yRWFjaCgoaSk9PntcclxuICAgICAgICAgIF90aGlzLl91c2VyczJvYnNlcnZlLnB1c2gobmV3IFVzZXJBdmFpbGFiaWxpdHlDb250cm9sbGVyKG9ic2VydmVyc1tpXSkpO1xyXG4gICAgICAgIH0pOyovXHJcbiAgICAgICAgICBfdGhpcy5fb2JzZXJ2ZXJzID0gb2JzZXJ2ZXJzO1xyXG5cclxuICAgICAgICAgIHJlc29sdmUob2JzZXJ2ZXJzKTtcclxuXHJcbiAgICAgICAgICBvYnNlcnZlcnNMaXN0LmZvckVhY2goKG9ic2VydmVyKSA9PntcclxuICAgICAgICAgICAgbGV0IENvbnRleHQgPSBvYnNlcnZlcnNbb2JzZXJ2ZXJdO1xyXG5cclxuICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCByZXN1bWVkIGNvbnRleHQgaXMgc2V0IHdpdGggcmVzdW1lZENvbnRleHQuXHJcbiAgICAgICAgICAgIGlmIChyZXN1bWVkQ29udGV4dCkgY29udGV4dC5kYXRhLnZhbHVlcyA9IHJlc3VtZWRDb250ZXh0O1xyXG5cclxuICAgICAgICAgICAgLy8gQ29udGV4dCB3aWxsIHdpbGwgYmUgdXBkYXRlZCB3aXRoIHZhbHVlIHN5bmNocm9uaXplZCB3aXRoIHJlcG9ydGVyIGlmIGNvbm5lY3RlZFxyXG4gICAgICAgICAgICBDb250ZXh0LnN5bmMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vQWRkIGxpc3RlbmVyIHRvIGJlIG5vdGlmaWVkIHdoZW4gcmVwb3J0ZXIgaXMgYWJydXB0bHkgZGlzY29ubmVjdGVkXHJcbiAgICAgICAgICAgIGlmIChkaXNjb25uZWN0ZWRDYWxsQmFjaykgQ29udGV4dC5vbkRpc2Nvbm5lY3RlZChkaXNjb25uZWN0ZWRDYWxsQmFjayk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCdbQ29udGV4dE9ic2VydmVyXSBSZXN1bWUgT2JzZXJ2ZXIgZmFpbGVkIHwgJywgcmVhc29uKTtcclxuICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgfSk7XHJcbiAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgIHJlamVjdCgnW0NvbnRleHRPYnNlcnZlcl0gU3RhcnQgZmFpbGVkIHwgJywgcmVhc29uKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVzdW1lRGlzY292ZXJpZXMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIF90aGlzLl9kaXNjb3ZlcnkucmVzdW1lRGlzY292ZXJpZXMoKS50aGVuKChkaXNjb3ZlcmllcykgPT4ge1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnW0NvbnRleHRPYnNlcnZlci5fcmVzdW1lRGlzY292ZXJpZXNdIGZvdW5kOiAnLCBkaXNjb3Zlcmllcyk7XHJcblxyXG4gICAgICAgIGRpc2NvdmVyaWVzLmZvckVhY2goKGRpc2NvdmVyeSkgPT57XHJcblxyXG4gICAgICAgICAgaWYgKGRpc2NvdmVyeS5kYXRhLnJlc291cmNlcyAmJiBkaXNjb3ZlcnkuZGF0YS5yZXNvdXJjZXNbMF0gPT09IF90aGlzLl9jb250ZXh0UmVzb3VyY2VUeXBlc1swXSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0NvbnRleHRPYnNlcnZlci5fcmVzdW1lRGlzY292ZXJpZXNdIHJlc3VtaW5nOiAnLCBkaXNjb3ZlcnkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpc2NvdmVyeS5kYXRhLnN0YXR1cyA9PT0gJ2xpdmUnKSB7IC8vIHByZXZpb3VzbHkgZGlzY292ZXJlZCBvYmplY3QgaXMgbm93IGxpdmVcclxuICAgICAgICAgICAgICByZXNvbHZlKFtkaXNjb3ZlcnkuZGF0YV0pO1xyXG4gICAgICAgICAgICAgIGRpc2NvdmVyeS51bnN1YnNjcmliZUxpdmUoX3RoaXMuX3VybCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIHByZXZpb3VzbHkgZGlzY292ZXJlZCBvYmplY3QgaXMgc3RpbGwgZGlzY29ubmVjdGVkXHJcbiAgICAgICAgICAgICAgZGlzY292ZXJ5Lm9uTGl2ZShfdGhpcy5fdXJsLCAoKT0+e1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tDb250ZXh0T2JzZXJ2ZXIuX3Jlc3VtZURpc2NvdmVyaWVzXSBkaXNjb25uZWN0ZWQgSHlwZXJ0eSBpcyBiYWNrIHRvIGxpdmUnLCBkaXNjb3ZlcnkpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShbZGlzY292ZXJ5LmRhdGFdKTtcclxuICAgICAgICAgICAgICAgIGRpc2NvdmVyeS51bnN1YnNjcmliZUxpdmUoX3RoaXMuX3VybCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgIHJlamVjdCgnW0NvbnRleHRPYnNlcnZlcl0gcmVzdW1lRGlzY292ZXJpZXMgZmFpbGVkIHwgJywgcmVhc29uKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25SZXN1bWVPYnNlcnZlcihjYWxsYmFjaykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLl9vblJlc3VtZU9ic2VydmVyID0gY2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuXHJcbiAgZGlzY292ZXJVc2VycyhlbWFpbCwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuXHJcbiAgICBsZXQgdXNlciA9IGVtYWlsICsgJ0AnICsgZG9tYWluO1xyXG5cclxuICAgIGlmICghX3RoaXMuX2Rpc2NvdmVyVXNlcnNQcm9taXNlc1t1c2VyXSkge1xyXG4gICAgICBfdGhpcy5fZGlzY292ZXJVc2Vyc1Byb21pc2VzW3VzZXJdID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICAgIF90aGlzLl9kaXNjb3ZlcnkuZGlzY292ZXJIeXBlcnRpZXNETyhlbWFpbCwgWydjb250ZXh0J10sIF90aGlzLl9jb250ZXh0UmVzb3VyY2VUeXBlcywgZG9tYWluKS50aGVuKGh5cGVydGllcyA9PntcclxuICAgICAgICAgIC8vX3RoaXMuc2VhcmNoLnVzZXJzKFtlbWFpbF0sIFtkb21haW5dLCBbJ2NvbnRleHQnXSwgWydDb250ZXh0X2NvbnRleHQnXSkudGhlbihmdW5jdGlvbihhKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0NvbnRleHRPYnNlcnZlci5kaXNjb3ZlclVzZXJzXSBkaXNjb3ZlcnkgcmVzdWx0LT4nLCBoeXBlcnRpZXMpO1xyXG4gICAgICAgICAgbGV0IGRpc2NvdmVyZWQgPSBbXTtcclxuICAgICAgICAgIGxldCBkaXNjb25uZWN0ZWQgPSBbXTtcclxuICAgICAgICAgIGh5cGVydGllcy5mb3JFYWNoKGh5cGVydHkgPT57XHJcbiAgICAgICAgICAgIF90aGlzLl9kaXNjb3Zlcmllc1toeXBlcnR5LmRhdGEuaHlwZXJ0eUlEXSA9IGh5cGVydHk7XHJcbiAgICAgICAgICAgIGlmIChoeXBlcnR5LmRhdGEuc3RhdHVzID09PSAnbGl2ZScpIHtcclxuICAgICAgICAgICAgICBkaXNjb3ZlcmVkLnB1c2goaHlwZXJ0eS5kYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBkaXNjb25uZWN0ZWQucHVzaChoeXBlcnR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgIGlmIChkaXNjb3ZlcmVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tDb250ZXh0T2JzZXJ2ZXIuZGlzY292ZXJVc2Vyc10gcmV0dXJuaW5nIGRpc2NvdmVyZWQgaHlwZXJ0aWVzIGRhdGEtPicsIGRpc2NvdmVyZWQpO1xyXG4gICAgICAgICAgICByZXNvbHZlKGRpc2NvdmVyZWQpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChkaXNjb25uZWN0ZWQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0NvbnRleHRPYnNlcnZlci5kaXNjb3ZlclVzZXJzXSBkaXNjb25uZWN0ZWQgSHlwZXJ0aWVzICcsIGRpc2Nvbm5lY3RlZCk7XHJcblxyXG4gICAgICAgICAgICAvL3Jlc29sdmUoW10pO1xyXG5cclxuICAgICAgICAgICAgZGlzY29ubmVjdGVkWzBdLm9uTGl2ZShfdGhpcy5fdXJsLCAoKT0+e1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQ29udGV4dE9ic2VydmVyLmRpc2NvdmVyVXNlcnNdIGRpc2Nvbm5lY3RlZCBIeXBlcnR5IGlzIGJhY2sgdG8gbGl2ZScsIGRpc2Nvbm5lY3RlZFswXSk7XHJcblxyXG4gICAgICAgICAgICAgIGRpc2NvdmVyZWQucHVzaChkaXNjb25uZWN0ZWRbMF0uZGF0YSk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShkaXNjb3ZlcmVkKTtcclxuICAgICAgICAgICAgICBkaXNjb25uZWN0ZWRbMF0udW5zdWJzY3JpYmVMaXZlKF90aGlzLl91cmwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX3RoaXMuX2Rpc2NvdmVyVXNlcnNQcm9taXNlc1t1c2VyXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBzdGFydCB0aGUgdXNlciBDb250ZXh0IG9ic2VydmF0aW9uIGZvciBhIGNlcnRhaW4gdXNlciBDb250ZXh0IHJlcG9ydGVyXHJcbiAgICogQHBhcmFtICB7RGlzY292ZXJlZE9iamVjdH0gaHlwZXJ0eSAgICAgICBIeXBlcnR5IHRvIGJlIG9ic2VydmVkLlxyXG4gICAqIEByZXR1cm4gezxQcm9taXNlPiBEYXRhT2JqZWN0T2JzZXJ2ZXJ9ICAgICAgSXQgcmV0dXJucyBhcyBhIFByb21pc2UgdGhlIFVzZXJBdmFpbGFiaWxpdHkgRGF0YSBPYmplY3QgT2JzZXJ2ZXIuXHJcbiAgICovXHJcblxyXG4gIG9ic2VydmUoaHlwZXJ0eSwgZG9tYWluU3Vic2NyaXB0aW9uID0gdHJ1ZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGlmICghX3RoaXMuX29ic2VydmVQcm9taXNlc1toeXBlcnR5Lmh5cGVydHlJRF0pIHtcclxuICAgICAgX3RoaXMuX29ic2VydmVQcm9taXNlc1toeXBlcnR5Lmh5cGVydHlJRF0gPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgLy9jaGVjayBpZiB3ZSBhcmUgYWxyZWFkeSBvYnNlcnZpbmcgaXRcclxuICAgICAgICBfdGhpcy5fdXNlcnMyb2JzZXJ2ZS5mb3JFYWNoKChDb250ZXh0KSA9PiB7XHJcbiAgICAgICAgICBpZiAoQ29udGV4dC5fcmVwb3J0ZXIgPT09IGh5cGVydHkuaHlwZXJ0eUlEKSByZXR1cm4gcmVzb2x2ZShDb250ZXh0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgX3RoaXMuX2Rpc2NvdmVyeS5kaXNjb3ZlckRhdGFPYmplY3RzUGVyUmVwb3J0ZXIoaHlwZXJ0eS5oeXBlcnR5SUQsIFsnY29udGV4dCddLCBfdGhpcy5fY29udGV4dFJlc291cmNlVHlwZXMsICBfdGhpcy5fZG9tYWluKS50aGVuKGZ1bmN0aW9uKGRhdGFPYmplY3RzKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0NvbnRleHRPYnNlcnZlci5kaXNjb3ZlckF2YWlsYWJpbGl0eV0gZGlzY292ZXJlZCBjb250ZXh0IG9iamVjdHMgJywgZGF0YU9iamVjdHMpO1xyXG4gICAgICAgICAgbGV0IGxhc3QgPSAwO1xyXG4gICAgICAgICAgbGV0IHVybDtcclxuXHJcbiAgICAgICAgICBkYXRhT2JqZWN0cy5mb3JFYWNoKChkYXRhT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0Lmhhc093blByb3BlcnR5KCdsYXN0TW9kaWZpZWQnKSAmJiBkYXRhT2JqZWN0Lmhhc093blByb3BlcnR5KCd1cmwnKSAmJiBEYXRlLnBhcnNlKGRhdGFPYmplY3QubGFzdE1vZGlmaWVkKSA+IGxhc3QpIHtcclxuICAgICAgICAgICAgICBsYXN0ID0gZGF0YU9iamVjdC5sYXN0TW9kaWZpZWQ7XHJcbiAgICAgICAgICAgICAgdXJsID0gZGF0YU9iamVjdC51cmw7XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdVUkwgREFUQSBPYmplY3QnLCB1cmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmIChsYXN0ICE9IDAgJiYgdXJsKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuX3N1YnNjcmliZUNvbnRleHQoaHlwZXJ0eSwgdXJsLCBkb21haW5TdWJzY3JpcHRpb24pKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdCgnW0NvbnRleHRPYnNlcnZlci5vYnNlcnZlXSBkaXNjb3ZlcmVkIERhdGFPYmplY3MgYXJlIGludmFsaWQnLCBkYXRhT2JqZWN0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF90aGlzLl9vYnNlcnZlUHJvbWlzZXNbaHlwZXJ0eS5oeXBlcnR5SURdO1xyXG4gIH1cclxuXHJcbiAgX3N1YnNjcmliZUNvbnRleHQoaHlwZXJ0eSwgdXJsLCBkb21haW5TdWJzY3JpcHRpb24gPSB0cnVlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIC8vIGF2b2lkIGR1cGxpY2F0ZWQgc3Vic2NyaXB0aW9uc1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgX3RoaXMuX3VzZXJzMm9ic2VydmUuZm9yRWFjaCgoQ29udGV4dCkgPT4ge1xyXG4gICAgICAgIGlmIChDb250ZXh0LnVybCA9PT0gdXJsKSByZXR1cm4gcmVzb2x2ZShDb250ZXh0KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBsZXQgaW5wdXQgPSB7XHJcbiAgICAgICAgc2NoZW1hOiBfdGhpcy5fb2JqZWN0RGVzY1VSTCxcclxuICAgICAgICByZXNvdXJjZTogdXJsLFxyXG4gICAgICAgIHN0b3JlOiBudWxsLFxyXG4gICAgICAgIHAycDogbnVsbCxcclxuICAgICAgICBtdXR1YWw6IG51bGwsXHJcbiAgICAgICAgZG9tYWluX3N1YnNjcmlwdGlvbjogZG9tYWluU3Vic2NyaXB0aW9uXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfdGhpcy5fc3luY2hlci5zdWJzY3JpYmUoaW5wdXQpLnRoZW4oKENvbnRleHQpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnW0NvbnRleHRPYnNlcnZlci5fc3Vic2NyaWJlQ29udGV4dF0gb2JzZXJ2ZXIgb2JqZWN0JywgQ29udGV4dCk7XHJcblxyXG4gICAgICAgIC8vbGV0IG5ld1VzZXJBdmFpbGFiaWxpdHkgPSBuZXcgVXNlckF2YWlsYWJpbGl0eUNvbnRyb2xsZXIoQ29udGV4dCwgdXNlcklEKTtcclxuXHJcbiAgICAgICAgX3RoaXMuX3VzZXJzMm9ic2VydmUucHVzaChDb250ZXh0KTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiBPYmplY3QgaXMgZGlzY29ubmVjdGVkIHNldCB1c2VyIENvbnRleHQgc3RhdHVzIGFzIHVuYXZhaWxhYmxlXHJcbiAgICAgICAgQ29udGV4dC5vbkRpc2Nvbm5lY3RlZCgoKT0+e1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1tDb250ZXh0T2JzZXJ2ZXIub25EaXNjb25uZWN0ZWRdOiAnLCBDb250ZXh0KTtcclxuXHJcbiAgICAgICAgICBDb250ZXh0LmRhdGEudmFsdWVzWzBdLnZhbHVlID0gJ3VuYXZhaWxhYmxlJztcclxuICAgICAgICAgIENvbnRleHQuc3luYygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXNvbHZlKENvbnRleHQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2Rpc2NvdmVyQW5kU3Vic2NyaWJlTGVnYWN5VXNlcnMobmFtZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgX3RoaXMuX2Rpc2NvdmVyeS5kaXNjb3ZlckRhdGFPYmplY3RzUGVyTmFtZShuYW1lKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdbQ29udGV4dE9ic2VydmVyLl9kaXNjb3ZlckFuZFN1YnNjcmliZUxlZ2FjeVVzZXJzXSBBbGwgRGF0YU9iamVjdHMgUmVzdWx0JywgcmVzdWx0KTtcclxuICAgICAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgIGlmIChvYmouc3RhdHVzID09PSAnbGl2ZScpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xpdmUgb2JqJywgb2JqKTtcclxuICAgICAgICAgICAgaWYgKCFvYmouaHlwZXJ0eUlEKSB7XHJcbiAgICAgICAgICAgICAgb2JqLmh5cGVydHlJRCA9IG9iai5yZXBvcnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlQ29udGV4dChvYmouc2NoZW1hLCBvYmoudXJsKS50aGVuKGZ1bmN0aW9uKHJlc3VsdFN1YnNjcmliZSkge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbQ29udGV4dE9ic2VydmVyLl9kaXNjb3ZlckFuZFN1YnNjcmliZUxlZ2FjeVVzZXJzXSBfc3Vic2NyaWJlQ29udGV4dCcsIHJlc3VsdFN1YnNjcmliZSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0U3Vic2NyaWJlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciAnLCBlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBzdG9wIHRoZSB1c2VyIENvbnRleHQgb2JzZXJ2YXRpb24gZm9yIGEgY2VydGFpbiB1c2VyXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gQ29udGV4dCAgICAgICB0aGUgVXNlckF2YWlsYWJpbGl0eSBEYXRhIE9iamVjdCBPYnNlcnZlciBVUkwgdG8gYmUgdW5vYnNlcnZlZC5cclxuICovXHJcblxyXG4gIHVub2JzZXJ2ZShDb250ZXh0KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl91c2VyczJvYnNlcnZlLmZvckVhY2goKHVzZXIsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmICh1c2VyLnVybCA9PT0gQ29udGV4dCkge1xyXG4gICAgICAgIHVzZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICBfdGhpcy5fdXNlcnMyb2JzZXJ2ZS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dE9ic2VydmVyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7QUFLQTs7Ozs7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFoQ0E7QUFpQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7Ozs7QUFHQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBOzs7Ozs7OztBQU1BO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTs7OztBQTVSQTtBQUNBO0FBK1JBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_EventEmitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Service Framework\n//import Syncher from '../syncher/Syncher';\n// Utils\n //import {divideURL} from '../utils/utils.js';\n// import availability from './availability.js';\n\n/**\r\n* Context Reporter;\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n*/\n\nvar ContextReporter =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ContextReporter, _EventEmitter);\n\n  function ContextReporter(hypertyURL, bus, configuration, factory, syncher) {\n    var _this2;\n\n    _classCallCheck(this, ContextReporter);\n\n    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\n    if (!bus) throw new Error('The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('The configuration is a needed parameter');\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ContextReporter).call(this, hypertyURL, bus, configuration));\n\n    var _this = _assertThisInitialized(_this2);\n\n    console.info('[ContextReporter] started with url: ', hypertyURL);\n    _this2.syncher = syncher ? syncher : factory.createSyncher(hypertyURL, bus, configuration); //    this.discovery = new Discovery(hypertyURL, bus);\n\n    _this2.domain = factory.divideURL(configuration.runtimeURL).domain;\n    _this2.contexts = {};\n    _this2.contextDescURL = 'hyperty-catalogue://catalogue.' + _this2.domain + '/.well-known/dataschema/Context'; //    this.heartbeat = [];\n\n    _this2.syncher.onNotification(function (event) {\n      var _this = _assertThisInitialized(_this2);\n\n      _this.onNotification(event);\n    }); //TODO: uncomment when used with service framework develop branch\n\n\n    _this2.syncher.onClose(function (event) {\n      console.log('[ContextReporter.onClose]');\n\n      var _this = _assertThisInitialized(_this2);\n\n      _this.setStatus(event.id, 'unavailable');\n\n      event.ack();\n    });\n\n    return _this2;\n  } //TODO: move to User availability Reporter or to abstract HypertyContextReporter\n\n\n  _createClass(ContextReporter, [{\n    key: \"start\",\n    value: function start() {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3.syncher.resumeReporters({\n          store: true\n        }).then(function (reporters) {\n          var reportersList = Object.keys(reporters);\n\n          if (reportersList.length > 0) {\n            console.log('[ContextReporter.start] resuming ', reporters[reportersList[0]]); // set availability to available\n\n            _this.contexts = reporters; //TODO:\n\n            reportersList.forEach(function (context) {\n              _this._onSubscription(_this.contexts[context]);\n            });\n            resolve(_this.contexts);\n          } else {\n            console.log('[ContextReporter.start] nothing to resume ', reporters);\n            resolve(false);\n          }\n        })[\"catch\"](function (reason) {\n          console.error('[ContextReporter] Resume failed | ', reason);\n        });\n      })[\"catch\"](function (reason) {\n        reject('[ContextReporter] Start failed | ', reason);\n      });\n    }\n  }, {\n    key: \"processNotification\",\n    value: function processNotification(event) {\n      var _this = this;\n\n      console.log('[ContextReporter.processNotification: ', event);\n      event.ack();\n    }\n    /**\r\n     * This function is used to create a new status object syncher\r\n     * @param  {URL.UserURL} contacts List of Users\r\n     * @return {Promise}\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(id, init, resources) {\n      var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'myContext';\n      var reporter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var reuseURL = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n      //debugger;\n      var _this = this;\n\n      var input;\n      return new Promise(function (resolve, reject) {\n        if (!reporter && !reuseURL) {\n          input = {\n            resources: resources,\n            expires: 30\n          };\n        } else if (reporter && !reuseURL) {\n          input = {\n            resources: resources,\n            expires: 30,\n            reporter: reporter\n          };\n        } else if (!reporter && reuseURL) {\n          input = {\n            resources: resources,\n            expires: 30,\n            reuseURL: reuseURL\n          };\n        } else {\n          input = {\n            resources: resources,\n            expires: 30,\n            reuseURL: reuseURL,\n            reporter: reporter\n          };\n        }\n\n        console.info('[ContextReporter.create] lets create a new User availability Context Object ', input);\n\n        _this.syncher.create(_this.contextDescURL, [], init, true, false, name, null, input).then(function (context) {\n          _this.contexts[id] = context;\n\n          _this._onSubscription(context);\n\n          resolve(context);\n        })[\"catch\"](function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"_onSubscription\",\n    value: function _onSubscription(context) {\n      context.onSubscription(function (event) {\n        console.info('[ContextReporter._onSubscription] accepting: ', event);\n        event.accept();\n      });\n    }\n  }, {\n    key: \"setContext\",\n    value: function setContext(id, newContext) {\n      var _this = this;\n\n      console.log('THIS [ContextReporter.setContext] before change :', _this.contexts[id]);\n      console.log('[ContextReporter.setContext] before change :', _this.contexts[id].data); //    _this.contexts[id].data.values[0].value = newContext;\n\n      _this.contexts[id].data.values = newContext;\n      console.debug('[ContextReporter.setContext] after change :', _this.contexts[id].data);\n\n      _this.trigger(id + '-context-update', newContext);\n    }\n  }]);\n\n  return ContextReporter;\n}(_utils_EventEmitter_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ContextReporter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./src/syncher/Syncher.js + 10 modules\nvar Syncher = __webpack_require__(18);\n\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/syncher/NotificationHandler.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* The Notitification Handler is used to handle notifications not processed by the syncher when running in a sandbox.\r\n*/\n\n\nvar NotificationHandler_NotificationHandler =\n/*#__PURE__*/\nfunction () {\n  function NotificationHandler(bus) {\n    _classCallCheck(this, NotificationHandler);\n\n    if (!bus) throw Error('[NotificationHandler Constructor] bus input is mandatory');\n    this._bus = bus;\n    this._onNotificationHandler = {};\n  }\n\n  _createClass(NotificationHandler, [{\n    key: \"onNotification\",\n    value: function onNotification(scheme, callback) {\n      this._onNotificationHandler[scheme] = callback;\n    }\n  }, {\n    key: \"onCreate\",\n    value: function onCreate(msg) {\n      var _this = this; //  let resource = msg.from.slice(0, -13); //remove \"/subscription\" from the URL\n\n\n      var resource = msg.body.hasOwnProperty('resource') ? msg.body.resource : msg.from.slice(0, -13);\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(resource);\n      var domain = dividedURL.domain;\n      var scheme = resource.split('://')[0];\n\n      var _error = function error(reason) {\n        _this._bus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 400,\n            desc: 'Bad Request: ' + reason\n          }\n        });\n      };\n\n      if (!msg.body.hasOwnProperty('source')) {\n        _error('Missing source');\n      }\n\n      if (!msg.body.hasOwnProperty('schema')) {\n        _error('Missing schema');\n      }\n\n      if (!msg.body.hasOwnProperty('value')) {\n        _error('Missing value');\n      }\n\n      if (!msg.body.hasOwnProperty('identity')) {\n        _error('Missing identity');\n      }\n\n      var event = {\n        type: msg.type,\n        from: msg.body.source,\n        url: resource,\n        domain: domain,\n        schema: msg.body.schema,\n        value: msg.body.value,\n        identity: msg.body.identity,\n        to: msg.to,\n        via: msg.body.via,\n        ack: function ack(type) {\n          var lType = 200;\n\n          if (type) {\n            lType = type;\n          } //send ack response message\n\n\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: lType\n            }\n          });\n        },\n        error: function error(reason) {\n          _error(reason);\n        }\n      };\n\n      if (_this._onNotificationHandler[scheme]) {\n        console.info('[NotificationHandler] NOTIFICATION-EVENT: ', event);\n\n        _this._onNotificationHandler[scheme](event);\n      }\n    }\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(msg) {\n      var _this = this; //remove \"/subscription\" from the URL\n\n\n      var resource = msg.body.resource;\n      var object = _this._observers[resource];\n      var unsubscribe = {\n        from: _this.owner,\n        to: _this._subURL,\n        id: msg.id,\n        type: 'unsubscribe',\n        body: {\n          resource: msg.body.resource\n        }\n      };\n\n      _this._bus.postMessage(unsubscribe);\n\n      delete _this._observers[resource];\n\n      if (object) {\n        var event = {\n          type: msg.type,\n          url: resource,\n          identity: msg.body.identity,\n          ack: function ack(type) {\n            var lType = 200;\n\n            if (type) {\n              lType = type;\n            } //TODO: any other different options for the release process, like accept but nor release local?\n\n\n            if (lType === 200) {\n              object[\"delete\"]();\n            } //send ack response message\n\n\n            _this._bus.postMessage({\n              id: msg.id,\n              type: 'response',\n              from: msg.to,\n              to: msg.from,\n              body: {\n                code: lType,\n                source: _this._owner\n              }\n            });\n          }\n        };\n\n        if (_this._onNotificationHandler) {\n          log.log('NOTIFICATION-EVENT: ', event);\n\n          _this._onNotificationHandler(event);\n        }\n      } else {\n        _this._bus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 404,\n            source: _this._owner\n          }\n        });\n      }\n    }\n  }]);\n\n  return NotificationHandler;\n}();\n\n/* harmony default export */ var syncher_NotificationHandler = (NotificationHandler_NotificationHandler);\n// EXTERNAL MODULE: ./src/identity/IdentityManager.js\nvar IdentityManager = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./src/discovery/Discovery.js + 1 modules\nvar Discovery = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./src/discovery/RegistrationStatus.js\nvar RegistrationStatus = __webpack_require__(7);\n\n// CONCATENATED MODULE: ./src/utils/Search.js\nfunction Search_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Search_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Search_createClass(Constructor, protoProps, staticProps) { if (protoProps) Search_defineProperties(Constructor.prototype, protoProps); if (staticProps) Search_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Search =\n/*#__PURE__*/\nfunction () {\n  function Search(discovery, identityManager) {\n    Search_classCallCheck(this, Search);\n\n    if (!discovery) throw new Error('The discovery component is a needed parameter');\n    if (!identityManager) throw new Error('The identityManager component is a needed parameter');\n\n    var _this = this;\n\n    _this.discovery = discovery;\n    _this.identityManager = identityManager;\n  }\n\n  Search_createClass(Search, [{\n    key: \"myIdentity\",\n    value: function myIdentity() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.identityManager.discoverUserRegistered().then(function (result) {\n          resolve(result);\n        })[\"catch\"](function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"hyperties\",\n    value: function hyperties(users, schemes, resources) {\n      var globalFlag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    } //TODO: reuse users or the other way around\n\n    /**\r\n     * List of usersURL to search\r\n     * @param  {array<URL.userURL>}  users List of UserUR, like this format user://<ipddomain>/<user-identifier>\r\n     * @return {Promise}\r\n     */\n\n  }, {\n    key: \"users\",\n    value: function users(usersURLs, providedDomains, schemes, resources) {\n      var globalFlag = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (!usersURLs) throw new Error('You need to provide a list of users');\n      if (!providedDomains) throw new Error('You need to provide a list of domains');\n      if (!resources) throw new Error('You need to provide a list of resources');\n      if (!schemes) throw new Error('You need to provide a list of schemes');\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        console.info('[Search] Users: ', usersURLs, usersURLs.length);\n        console.info('[Search] Domains: ', providedDomains, providedDomains.length);\n\n        if (usersURLs.length === 0) {\n          console.info('Don\\'t have users to discovery');\n          resolve(usersURLs);\n        } else {\n          var getUsers = [];\n          usersURLs.forEach(function (userURL, index) {\n            var currentDomain = providedDomains[index];\n            console.info('[Search] Search user ' + userURL + ' for provided domain:', currentDomain);\n\n            if (!globalFlag) {\n              getUsers.push(_this.discovery.discoverHyperties(userURL, schemes, resources, currentDomain));\n            } else {\n              getUsers.push(_this.discovery.discoverHypertiesPerUserProfileData(userURL, schemes, resources));\n            }\n          });\n          console.info('Requests promises: ', getUsers);\n          Promise.all(getUsers.map(function (promise) {\n            return promise.then(function (hyperty) {\n              return hyperty;\n            }, function (error) {\n              return error;\n            });\n          })).then(function (hyperties) {\n            console.info('[Search] Hyperties from new Discovery', hyperties);\n            var result = hyperties.map(function (hyperty) {\n              if (hyperty.hasOwnProperty('hypertyID')) return hyperty;\n              var recent = Object.keys(hyperty).reduceRight(function (a, b) {\n                var hypertyDate = new Date(hyperty[b].lastModified);\n                var hypertyDateP = new Date(hyperty[a].lastModified);\n\n                if (hypertyDateP.getTime() < hypertyDate.getTime()) {\n                  return b;\n                }\n\n                return a;\n              });\n              return hyperty[recent];\n            });\n            var clean = result.filter(function (hyperty) {\n              return hyperty.hasOwnProperty('hypertyID');\n            });\n            console.log('Requests result: ', clean);\n            hyperties.forEach(function (entry) {\n              if (entry !== 'No Hyperty was found') {\n                return resolve(clean);\n              }\n            });\n            reject('No Hyperty was found');\n          })[\"catch\"](function (reason) {\n            console.error(reason);\n            resolve(usersURLs);\n          });\n        }\n      });\n    }\n  }]);\n\n  return Search;\n}();\n\n/* harmony default export */ var utils_Search = (Search);\n// EXTERNAL MODULE: ./src/contextManager/ContextObserver.js\nvar ContextObserver = __webpack_require__(15);\n\n// EXTERNAL MODULE: ./src/contextManager/ContextReporter.js\nvar ContextReporter = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./src/identity/UserProfile.js\nfunction UserProfile_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n* The UserProfile according to User Identity Data Model\r\n*/\nvar UserProfile = function UserProfile(username, userURL, picture, name, locale, profile) {\n  UserProfile_classCallCheck(this, UserProfile);\n\n  if (username) {\n    this.preferred_username = username;\n  }\n\n  if (picture) {\n    this.picture = picture;\n  }\n\n  if (name) {\n    this.name = name;\n  }\n\n  if (locale) {\n    this.locale = locale;\n  }\n\n  if (userURL) {\n    this.userURL = userURL;\n  }\n\n  if (profile) Object.assign(this, profile);\n};\n\n/* harmony default export */ var identity_UserProfile = (UserProfile);\n// CONCATENATED MODULE: ./src/identity/MessageBodyIdentity.js\nfunction MessageBodyIdentity_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n* The Identity info to be added to Message.Body.Identity\r\n*/\n\n\nvar MessageBodyIdentity_MessageBodyIdentity = function MessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile) {\n  MessageBodyIdentity_classCallCheck(this, MessageBodyIdentity);\n\n  if (!idp) throw new Error('IDP should be a parameter');\n  if (!username) throw new Error('username should be a parameter');\n  this.idp = idp;\n\n  if (assertion) {\n    this.assertion = assertion;\n  }\n\n  this.userProfile = new identity_UserProfile(username, userURL, picture, name, locale, profile);\n};\n\n/* harmony default export */ var identity_MessageBodyIdentity = (MessageBodyIdentity_MessageBodyIdentity);\n// CONCATENATED MODULE: ./src/chatManager/communication.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\nvar CommunicationStatus = {\n  OPEN: 'open',\n  PENDING: 'pending',\n  CLOSED: 'closed',\n  PAUSED: 'paused',\n  FAILED: 'failed'\n};\nvar communicationObject = {\n  startingTime: '',\n  status: '',\n  participants: {}\n};\nvar communicationChildren = {\n  \"parent\": \"communication\",\n  \"listener\": \"resources\",\n  \"type\": \"HypertyResource\"\n};\n/*\r\nexport let communicationObject = {\r\n  id: '',\r\n  name: '',\r\n  owner: '',\r\n  scheme: 'comm',\r\n  startingTime: '',\r\n  lastModified: '',\r\n  duration: '',\r\n  status: '',\r\n  participants: []\r\n};\r\n*/\n// CONCATENATED MODULE: ./src/chatManager/InvitationsHandler.js\nfunction InvitationsHandler_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction InvitationsHandler_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction InvitationsHandler_createClass(Constructor, protoProps, staticProps) { if (protoProps) InvitationsHandler_defineProperties(Constructor.prototype, protoProps); if (staticProps) InvitationsHandler_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* To manage Group Chat Invitations\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n* @version 0.1.0\r\n*/\n// TODO: have an instance per ChatController\nvar InvitationsHandler =\n/*#__PURE__*/\nfunction () {\n  function InvitationsHandler(hypertyURL) {\n    InvitationsHandler_classCallCheck(this, InvitationsHandler);\n\n    if (!hypertyURL) throw Error('hypertyURL is a necessary dependecy');\n\n    var _this = this;\n\n    _this._hypertyURL = hypertyURL;\n    _this._pending = {}; // All pending invitations\n  }\n\n  InvitationsHandler_createClass(InvitationsHandler, [{\n    key: \"inviteDisconnectedHyperties\",\n\n    /**\r\n     * This function is used to handle notifications for disconnected Hy+erties.\r\n     * @param  {DiscoveredObject[]}    disconnected  array of discovered hyperties that are disconnected\r\n     * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n     */\n    value: function inviteDisconnectedHyperties(disconnected, dataObjectReporter) {\n      var _this = this;\n\n      console.log('[GroupChatManager.InvitationsHandler.inviteDisconnectedHyperties] lets invite ', disconnected);\n      disconnected.forEach(function (disconnectedHyperty) {\n        if (!_this._pending[dataObjectReporter]) {\n          _this._pending[dataObjectReporter] = {};\n        }\n\n        _this._pending[dataObjectReporter][disconnectedHyperty.data.hypertyID] = disconnectedHyperty;\n        disconnectedHyperty.onLive(_this._hypertyURL, function () {\n          console.log('[GroupChatManager.create] disconnected Hyperty is back to live', disconnectedHyperty);\n          dataObjectReporter.inviteObservers([disconnectedHyperty.data.hypertyID]);\n          disconnectedHyperty.unsubscribeLive(_this._hypertyURL);\n          delete _this._pending[dataObjectReporter][disconnectedHyperty.data.hypertyID];\n        });\n      });\n    }\n    /**\r\n     * This function is used to process sent invitations. In case invitations are not acknowledge by recipient it will be handled as a disconnected hyperty\r\n     * @param  {DiscoveredObject[]}    live  array of discovered hyperties that are or were live\r\n     * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n     */\n\n  }, {\n    key: \"processInvitations\",\n    value: function processInvitations(live, dataObjectReporter) {\n      var _this2 = this;\n\n      var _this = this;\n\n      var invitations = dataObjectReporter.invitations || [];\n      console.log('[GroupChatManager.InvitationsHandler.processInvitations] waiting for replies ', invitations, this._invitationsResponse);\n      invitations.forEach(function (invitation) {\n        invitation.then(function (result) {\n          console.log('[GroupChatManager.InvitationsHandler.processInvitations] - OK: ', result, _this2._invitationsResponse);\n\n          if (_this2._invitationsResponse) {\n            _this2._invitationsResponse(result);\n          }\n        })[\"catch\"](function (result) {\n          console.log('[GroupChatManager.InvitationsHandler.processInvitations] - NOT OK: ', result, _this2._invitationsResponse);\n\n          if (_this2._invitationsResponse) {\n            _this2._invitationsResponse(result);\n          }\n\n          _this.inviteDisconnectedHyperties([live[result.invited]], dataObjectReporter);\n        });\n      });\n    }\n  }, {\n    key: \"resumeDiscoveries\",\n    value: function resumeDiscoveries(discoveryEngine, groupChat) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var live = {};\n        var liveHyperties = [];\n        var disconnected = [];\n        var unsubscriptonPromises = [];\n        discoveryEngine.resumeDiscoveries().then(function (discoveries) {\n          console.log('[GroupChatManager.InvitationsHandler.resumeDiscoveries] found: ', discoveries);\n          discoveries.forEach(function (discovery) {\n            if (discovery.data.resources && discovery.data.resources[0] === 'chat') {\n              console.log('[GroupChatManager.InvitationsHandler.resumeDiscoveries] resuming: ', discovery);\n\n              if (discovery.data.status === 'live') {\n                // previously discovered object is now live\n                live[discovery.data.hypertyID] = discovery;\n                liveHyperties.push(discovery.data.hypertyID);\n                unsubscriptonPromises.push(discovery.unsubscribeLive(_this._hypertyURL));\n              } else {\n                // previously discovered object is still disconnected\n                disconnected.push(discovery);\n              }\n            }\n          });\n          if (disconnected.length > 0) _this.inviteDisconnectedHyperties(disconnected, groupChat);\n\n          if (Object.keys(live).length > 0) {\n            groupChat.inviteObservers(liveHyperties);\n            if (groupChat.invitations.length > 0) _this.processInvitations(live, groupChat);\n            Promise.all(unsubscriptonPromises).then(function () {\n              resolve();\n            });\n          } else resolve();\n        });\n      })[\"catch\"](function (reason) {\n        reject('[GroupChatManager.InvitationsHandler.resumeDiscoveries] failed | ', reason);\n      });\n    }\n    /**\r\n     * This function is used to remove and clean all pending invitations.\r\n     * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n     * @return {Promise} return a promise when all unsubscriptons for pending invitations are finished\r\n     */\n\n  }, {\n    key: \"cleanInvitations\",\n    value: function cleanInvitations(dataObjectReporter) {\n      var _this = this;\n\n      var chatInvitations = _this._pending[dataObjectReporter];\n      console.log('[GroupChatManager.InvitationsHandler.cleanInvitations] ', chatInvitations);\n\n      if (chatInvitations) {\n        return new Promise(function (resolve, reject) {\n          var pendingInvitations = Object.keys(chatInvitations);\n          var unsubscriptonPromises = [];\n          pendingInvitations.forEach(function (invitation) {\n            unsubscriptonPromises.push(chatInvitations[invitation].unsubscribeLive(_this._hypertyURL));\n          });\n          Promise.all(pendingInvitations).then(function () {\n            resolve();\n          });\n        });\n      } else return Promise.resolve();\n    }\n  }, {\n    key: \"invitationResponse\",\n    set: function set(callback) {\n      this._invitationsResponse = callback;\n    }\n  }]);\n\n  return InvitationsHandler;\n}();\n\n/* harmony default export */ var chatManager_InvitationsHandler = (InvitationsHandler);\n// CONCATENATED MODULE: ./src/chatManager/ChatController.js\nfunction ChatController_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ChatController_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ChatController_createClass(Constructor, protoProps, staticProps) { if (protoProps) ChatController_defineProperties(Constructor.prototype, protoProps); if (staticProps) ChatController_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* The Group Chat API is used to control a Group Chat instance.\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n//import { UserInfo } from './UserInfo';\n\n\n\nvar ChatController_ChatController =\n/*#__PURE__*/\nfunction () {\n  function ChatController(syncher, discovery, domain, search, identity, manager) {\n    ChatController_classCallCheck(this, ChatController);\n\n    if (!syncher) throw Error('Syncher is a necessary dependecy');\n    if (!discovery) throw Error('Discover is a necessary dependecy');\n    if (!domain) throw Error('Domain is a necessary dependecy');\n    if (!search) throw Error('Search is a necessary dependecy');\n\n    var _this = this;\n\n    _this._syncher = syncher;\n    _this.discovery = discovery;\n    _this.search = search;\n    _this.myIdentity = identity;\n    _this.controllerMode = 'reporter';\n    _this.child_cseq = 0;\n    _this.domain = domain;\n    _this._manager = manager;\n    var hypertyURL = syncher.owner;\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\n    _this._invitationsHandler = new chatManager_InvitationsHandler(hypertyURL);\n  }\n\n  ChatController_createClass(ChatController, [{\n    key: \"_setOnAddChildListener\",\n    value: function _setOnAddChildListener(dataObject) {\n      var _this = this;\n\n      dataObject.onAddChild(function (child) {\n        _this.child_cseq += 1;\n        console.info('[ChatManager.ChatController._setOnAddChildListener] new Child received: ', child);\n        if (_this._onMessage) _this._onMessage(child);\n      });\n    }\n  }, {\n    key: \"_onSubscribe\",\n    value: function _onSubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      event.accept();\n      console.log('[ChatManager.ChatController.onSubscribe] event', event, dataObjectReporter.url);\n      console.log('[ChatManager.ChatController.onSubscribe] New user has subscribe this object: ', dataObjectReporter.data, event.identity);\n      var identity = JSON.parse(JSON.stringify(event.identity));\n\n      if (identity.hasOwnProperty('assertion')) {\n        delete identity.assertion;\n      }\n\n      var userInfo = {\n        hypertyURL: event.url,\n        domain: event.domain,\n        identity: identity\n      };\n      var userURL = event.identity.userProfile.guid;\n      console.log('[ChatManager.ChatController.onSubscribe]  new participant', userInfo);\n\n      if (event.identity.legacy) {\n        userInfo.legacy = event.identity.legacy;\n      }\n\n      dataObjectReporter.data.participants[userURL] = userInfo;\n      console.log('[ChatManager.ChatController.onSubscribe] communicationObject OBJ chatcontroller', dataObjectReporter.data.participants);\n      console.log('[ChatManager.ChatController.onSubscribe - onSubscription] ', userInfo); // console.log('[ChatManager.ChatController.onSubscribe - this._onUserAdded] ', this._onUserAdded);\n\n      if (this._onUserAdded) this._onUserAdded(userInfo);\n    }\n  }, {\n    key: \"_onUnsubscribe\",\n    value: function _onUnsubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      console.log('[ChatManager.ChatController.onUnsubscribe] event', event, dataObjectReporter.url);\n      var participant = event.identity.userProfile;\n      console.log('[ChatManager.ChatController.onUnsubscribe]  participant left', participant);\n\n      if (event.identity.legacy) {\n        participant.legacy = event.identity.legacy;\n      }\n\n      delete dataObjectReporter.data.participants[participant.userURL];\n      console.log('[ChatManager.ChatController.onUnsubscribe - this._onUserRemoved] ', this.onUserRemoved);\n      if (this._onUserRemoved) this._onUserRemoved(participant);\n    }\n    /**\r\n     * This function is used to send a file.\r\n     * @param  {string}     file                        Is the file to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(file) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        var identity = {\n          userProfile: _this.myIdentity\n        };\n        dataObject.addHypertyResource('resources', 'file', file, identity).then(function (resourceFile) {\n          var identity = {\n            userProfile: _this.myIdentity\n          };\n          var fileSentEvt = {\n            value: resourceFile,\n            identity: identity,\n            resource: resourceFile\n          };\n          var reporterStatus = new RegistrationStatus[\"a\" /* default */](dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus); // recursive function to sync with chat reporter\n\n          var share2Reporter = function share2Reporter(file, subscriber, evt, status) {\n            var statusOfReporter = status;\n            file.sharingStatus.then(resolve(evt))[\"catch\"](function (result) {\n              console.log('[ChatManager.ChatController.sendFile] share failed: ', result);\n              statusOfReporter.onLive(subscriber, function () {\n                statusOfReporter.unsubscribeLive(subscriber);\n                file.share(true);\n                share2Reporter(file, subscriber, evt, statusOfReporter);\n              }); //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\n            });\n          };\n\n          share2Reporter(resourceFile, _this._manager._hypertyURL, fileSentEvt, reporterStatus);\n        });\n      })[\"catch\"](function (reason) {\n        console.error('Reason:', reason);\n        reject(reason);\n      });\n    }\n    /**\r\n     * This function is used to send a chat message.\r\n     * @param  {string}     message                        Is the ChatMessage to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(message, identity) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        //      let _dataObjectChild;\n        _this.child_cseq += 1;\n        var msg = {\n          /*        url: dataObject.data.url,\r\n                  cseq: _this.child_cseq,\r\n                  reporter: dataObject.data.reporter,\r\n                  schema: dataObject.data.schema,\r\n                  name: dataObject.data.name,\r\n                  created : new Date().toJSON(),*/\n          type: 'chat',\n          content: message\n        };\n        var sender = identity ? identity : {\n          userProfile: _this.myIdentity\n        }; // TODO: change chatmessages to resource - chat, file\n        // TODO: change message to hypertyResource - https://github.com/reTHINK-project/dev-service-framework/tree/develop/docs/datamodel/data-objects/hyperty-resource\n        // TODO: handle with multiple resources - if the \"message\" will be different for each type of resources\n\n        dataObject.addChild(msg, sender).then(function (dataObjectChild) {\n          console.log('[ChatManager.ChatController][addChild - Chat Message]: ', dataObjectChild); //resolve(dataObjectChild);\n          //TODO: move to separate function\n\n          var msg = {\n            childId: dataObjectChild._childId,\n            from: dataObjectChild._owner,\n            value: dataObjectChild.data,\n            type: 'create',\n            identity: sender\n          };\n          var reporterStatus = new RegistrationStatus[\"a\" /* default */](dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus); // recursive function to sync with chat reporter\n\n          var share2Reporter = function share2Reporter(child, subscriber, msg, status) {\n            var statusOfReporter = status;\n            child.sharingStatus.then(resolve(msg))[\"catch\"](function (result) {\n              statusOfReporter.onLive(subscriber, function () {\n                statusOfReporter.unsubscribeLive(subscriber);\n                child.share(true);\n                share2Reporter(child, subscriber, msg, statusOfReporter);\n              }); //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\n            });\n          };\n\n          share2Reporter(dataObjectChild, _this._manager._hypertyURL, msg, reporterStatus);\n        })[\"catch\"](function (reason) {\n          console.error('Reason:', reason);\n          reject(reason);\n        });\n      });\n    }\n    /**\r\n     * [onChange description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      var _this = this;\n\n      _this._onChange = callback;\n    }\n    /**\r\n     * This function is used to receive new messages.\r\n     * @param  {Function} callback Function to handle with new messages\r\n     * @return {Communication.ChatMessage} m\r\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      var _this = this;\n\n      _this._onMessage = callback;\n    }\n    /**\r\n     * [onUserAdded description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserAdded\",\n    value: function onUserAdded(callback) {\n      var _this = this;\n\n      _this._onUserAdded = callback;\n    }\n    /**\r\n     * When the an user was removed\r\n     * @param  {Function} callback Function handle with the removed user\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserRemoved\",\n    value: function onUserRemoved(callback) {\n      var _this = this;\n\n      _this._onUserRemoved = callback;\n    }\n    /**\r\n     * This function is used to receive requests to close the Group Chat instance.\r\n     * @return {DeleteEvent} The DeleteEvent fired by the Syncher when the Chat is closed.\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      var _this = this;\n\n      _this._onClose = callback;\n    }\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      var _this = this;\n\n      _this._onResponse = callback;\n    }\n    /**\r\n     * This function is used to add / invite new user on an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n  }, {\n    key: \"addUser\",\n    value: function addUser(users) {\n      var _this = this;\n\n      var haveEmptyElements = function haveEmptyElements(element) {\n        console.log('Element:', element.length);\n        return element.length !== 0;\n      };\n\n      var notFoundElements = function notFoundElements(element) {\n        console.log('user not found: ', element);\n        return !(element instanceof String);\n      };\n\n      return new Promise(function (resolve, reject) {\n        if (users.filter(haveEmptyElements).length === 0) {\n          return reject('Don\\'t have users to invite');\n        }\n\n        console.info('[ChatManager.ChatController.addUsers ]: ', users);\n        /*_this.search.users(users, domains, ['comm'], ['chat'])\r\n        .then((hypertiesIDs) => {\r\n          if (hypertiesIDs.filter(notFoundElements).length === 0) {\r\n          throw 'User(s) not found';\r\n        }\r\n          let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n          return hyperty.hypertyID;\r\n        });*/\n\n        var usersDiscovery = [];\n        var disconnected = [];\n        var live = {};\n        users.forEach(function (user) {\n          var userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\n\n          usersDiscovery.push(userDiscoveryPromise);\n        });\n        Promise.all(usersDiscovery).then(function (userDiscoveryResults) {\n          console.log('[ChatManager.ChatController.addUsers] Users Discovery Results->', userDiscoveryResults);\n          var selectedHyperties = [];\n          userDiscoveryResults.forEach(function (userDiscoveryResult) {\n            userDiscoveryResult.forEach(function (discovered) {\n              if (discovered.data.status === 'live') {\n                selectedHyperties.push(discovered.data.hypertyID);\n                live[discovered.data.hypertyID] = discovered;\n              } else if (disconnected.length < 5) disconnected.push(discovered);\n            });\n          });\n          console.info('[ChatManager.ChatController]------------------------ Syncher Create ---------------------- \\n');\n          console.info('[ChatManager.ChatController]Selected Hyperties: !!! ', selectedHyperties);\n          console.info(\"Have \".concat(selectedHyperties.length, \" users;\")); //        console.info('[ChatManager] HypertiesIDs ', hypertiesIDs);\n\n          var dataObject = _this.controllerMode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n          if (disconnected.length > 0) _this._invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObject);\n          dataObject.inviteObservers(selectedHyperties);\n          if (dataObject.invitations.length > 0) _this._invitationsHandler.processInvitations(live, dataObject);\n          return;\n        }).then(function () {\n          console.info('[ChatManager.ChatController]Are invited with success ' + users.length + ' users;');\n          resolve(true);\n        })[\"catch\"](function (reason) {\n          console.error('An error occurred when trying to invite users;\\n', reason);\n          reject(reason);\n        });\n      });\n    }\n    /**\r\n     * This function is used to request the Reporter to add / invite new user on an existing Group Chat instance.\r\n     * Only Observers are allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n  }, {\n    key: \"addUserReq\",\n    value: function addUserReq(users) {\n      var _this = this; //check is Observer and invoke observer.execute() with new promise\n\n\n      var haveEmptyElements = function haveEmptyElements(element) {\n        console.log('Element:', element.length);\n        return element.length !== 0;\n      };\n\n      return new Promise(function (resolve, reject) {\n        if (users.filter(haveEmptyElements).length === 0) {\n          return reject('[ChatManager.ChatController.addUserReq] Don\\'t have users to add');\n        }\n\n        if (!_this.controllerMode === 'observer') {\n          return reject('[ChatManager.ChatController.addUserReq] only allowed to Chat Observer');\n\n          var addUser = _this.addUser(users);\n\n          if (_this._dataObjectObserver) {\n            addUser = _this._dataObjectObserver.execute('addUser', users);\n          }\n\n          addUser.then(function () {\n            console.info('[ChatManager.ChatController.addUserReq] Request accepted by Reporter ');\n            resolve(true);\n          })[\"catch\"](function (reason) {\n            console.error('[ChatManager.ChatController.addUserReq] Request rejected by Reporter;\\n', reason);\n            reject(reason);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"onInvitationResponse\",\n    value: function onInvitationResponse(callback) {\n      var _this = this;\n\n      _this._onInvitationResponse = callback;\n      _this._invitationsHandler.invitationResponse = callback;\n    }\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @return {<Promise> boolean} Promise with the status\r\n     */\n\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param  {URL.UserURL} user       User to be removed from the Group Chat that is identified with reTHINK User URL.\r\n     * @return {<Promise> boolean}      It returns as a Promise true if successfully removed or false otherwise.\r\n     */\n\n  }, {\n    key: \"removeUser\",\n    value: function removeUser(user) {\n      // TODO: implement the removeUser;\n      console.log('[ChatManager.ChatController]Not yet implemented: ', user);\n    }\n    /**\r\n     * This function is used to close an existing Group Chat instance.\r\n     * Only available to Chat Group Reporters i.e. the Hyperty instance that created the Group Chat.\r\n     * @return {<Promise>Boolean} It returns as a Promise true if successfully closed or false otherwise.\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var del = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      // TODO: the dataObjectReporter.delete should be a Promise;\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this.controllerMode === 'reporter') {\n          // reporter\n          _this._invitationsHandler.cleanInvitations(_this.dataObjectReporter).then(function () {\n            if (!del) {\n              _this._manager.communicationObject.status = 'closed';\n              resolve(true);\n            } else {\n              try {\n                delete _this._manager._reportersControllers[_this.dataObjectReporter.url];\n\n                _this.dataObjectReporter[\"delete\"]();\n\n                resolve(true);\n                if (_this._onClose) _this._onClose({\n                  code: 200,\n                  desc: 'deleted',\n                  url: _this.dataObjectReporter.url\n                });\n              } catch (e) {\n                console.error(e);\n                reject(false);\n              }\n            }\n          });\n        } else {\n          // observer\n          if (del) {\n            try {\n              delete _this._manager._observersControllers[_this.dataObjectObserver.url];\n\n              _this.dataObjectObserver.unsubscribe();\n\n              resolve(true);\n            } catch (e) {\n              console.error(e);\n              reject(false);\n            }\n          } else {\n            // TODO: send message \n            resolve(true);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"invitationsHandler\",\n    get: function get() {\n      return this._invitationsHandler;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter.url : this.dataObjectObserver.url;\n    }\n  }, {\n    key: \"dataObjectReporter\",\n    set: function set(dataObjectReporter) {\n      if (!dataObjectReporter) throw new Error('[ChatController] The data object reporter is necessary parameter ');\n\n      var _this = this;\n\n      _this.controllerMode = 'reporter'; // Handler to process received files\n      // dataObjectReporter.onResponse(function(event) {\n      //   console.log('[DataObjectReporter - onResponse]', event);\n      //   if (_this._onInvitationResponse) {\n      //     _this._onInvitationResponse(event);\n      //   }\n      //\n      // });\n\n      dataObjectReporter.onSubscription(function (event) {\n        switch (event.type) {\n          case 'subscribe':\n            _this._onSubscribe(event);\n\n            break;\n\n          case 'unsubscribe':\n            _this._onUnsubscribe(event);\n\n            break;\n        }\n      });\n\n      _this._setOnAddChildListener(dataObjectReporter);\n\n      dataObjectReporter.onRead(function (event) {\n        event.accept();\n      });\n      dataObjectReporter.onExecute(function (event) {\n        switch (event.method) {\n          case 'addUser':\n            _this.addUser(event.params[0]).then(function () {\n              event.accept();\n            })[\"catch\"](function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          case 'removeUser':\n            _this.removeUser(event.params).then(function () {\n              event.accept();\n            })[\"catch\"](function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          default:\n            event.reject('[ChatController.onExecute] Chat method execution not accepted by Reporter');\n            break;\n        }\n      });\n      _this._dataObjectReporter = dataObjectReporter;\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectReporter;\n    }\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this._dataObjectReporter._childrenObjects : this._dataObjectObserver._childrenObjects;\n    }\n  }, {\n    key: \"dataObjectObserver\",\n    set: function set(dataObjectObserver) {\n      var _this = this;\n\n      _this.controllerMode = 'observer';\n      _this._dataObjectObserver = dataObjectObserver;\n      dataObjectObserver.onChange('*', function (event) {\n        console.info('[ChatManager.ChatController]Observer - onChange', event);\n\n        if (event.field.includes('participants')) {\n          switch (event.cType) {\n            case 'add':\n              if (_this._onUserAdded) _this._onUserAdded(event);\n              break;\n\n            case 'remove':\n              if (_this._onUserRemoved) _this._onUserRemoved(event);\n              break;\n          }\n        }\n\n        if (_this._onChange) _this._onChange(event);\n      });\n\n      _this._setOnAddChildListener(dataObjectObserver); // let childrens = dataObjectObserver.childrens;\n      // Object.keys(childrens).forEach((child) => {\n      //   if (_this._onMessage) _this._onMessage({\n      //     childId: child,\n      //     identity: childrens[child].identity,\n      //     value: childrens[child].data\n      //   });\n      // })\n\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectObserver;\n    }\n  }, {\n    key: \"dataObject\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter : this.dataObjectObserver;\n    }\n  }, {\n    key: \"closeEvent\",\n    set: function set(event) {\n      var _this = this;\n\n      _this._closeEvent = event;\n      if (_this._onClose) _this._onClose(event);\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._closeEvent;\n    }\n  }]);\n\n  return ChatController;\n}();\n\n/* harmony default export */ var chatManager_ChatController = (ChatController_ChatController);\n// CONCATENATED MODULE: ./src/chatManager/UserInfo.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction UserInfo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\nvar UserInfo_UserInfo = function UserInfo(hypertyURL, domain, identity) {\n  var _ref;\n\n  UserInfo_classCallCheck(this, UserInfo);\n\n  var completeIdentity = Object(utils[\"i\" /* deepClone */])(identity);\n\n  if (!identity.hasOwnProperty('userProfile')) {\n    completeIdentity['userProfile'] = identity;\n  }\n\n  return _ref = {\n    hypertyURL: hypertyURL,\n    domain: domain\n  }, _defineProperty(_ref, \"domain\", domain), _defineProperty(_ref, \"identity\", completeIdentity), _ref;\n};\n// CONCATENATED MODULE: ./src/chatManager/ChatManager.js\nfunction ChatManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ChatManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ChatManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) ChatManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) ChatManager_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Service Framework\n//import IdentityManager from '../identityManager/IdentityManager';\n//import RegistrationStatus from '../discovery/RegistrationStatus';\n//import Discovery from '../discovery/Discovery';\n//import Syncher from '../syncher/Syncher';\n// Utils\n//import {divideURL} from '../utils/utils';\n//import Search from '../utils/Search';\n// Internals\n\n\n\n/**\r\n* Hyperty Group Chat Manager API (HypertyChat)\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n\nvar ChatManager_ChatManager =\n/*#__PURE__*/\nfunction () {\n  function ChatManager(myUrl, bus, configuration, syncher, factory) {\n    ChatManager_classCallCheck(this, ChatManager);\n\n    if (!myUrl) throw new Error('[ChatManager.constructor] The myUrl is a needed parameter');\n    if (!bus) throw new Error('[ChatManager.constructor] The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('[ChatManager.constructor] The configuration is a needed parameter');\n\n    var _this = this;\n\n    if (!syncher) {\n      syncher = factory.createSyncher(myUrl, bus, configuration);\n    }\n\n    _this._runtimeURL = configuration.runtimeURL;\n    var domain = factory.divideURL(_this._runtimeURL).domain;\n    var discovery = factory.createDiscovery(myUrl, configuration.runtimeURL, bus);\n    var identityManager = factory.createIdentityManager(myUrl, configuration.runtimeURL, bus);\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\n    _this._reportersControllers = {};\n    _this._observersControllers = {};\n    _this._myUrl = myUrl;\n    _this._bus = bus;\n    _this._syncher = syncher;\n    _this._domain = domain;\n    _this.discovery = discovery;\n    _this.identityManager = identityManager;\n    _this.currentIdentity;\n    _this.search = factory.createSearch(discovery, identityManager);\n    _this.communicationObject = communicationObject;\n    _this.communicationChildren = communicationChildren;\n    console.log('[ChatManager] Discover ', discovery);\n    console.log('[ChatManager] Identity Manager ', identityManager);\n  }\n\n  ChatManager_createClass(ChatManager, [{\n    key: \"processNotification\",\n    value: function processNotification(event) {\n      var _this = this;\n\n      console.log('[ChatManager.processNotification: ', event);\n\n      if (event.type === 'create') {\n        // TODO: replace the 100 for Message.Response\n        // event.ack(200);\n        if (_this._onInvitation) {\n          _this._onInvitation(event);\n        }\n      }\n\n      if (event.type === 'delete') {\n        // TODO: replace the 200 for Message.Response\n        event.ack(200);\n        _this._observersControllers[event.url].closeEvent = event;\n        delete _this._observersControllers[event.url];\n        _this._observersControllers.closeEvent = event;\n        _this.communicationObject = communicationObject;\n\n        for (var url in this._reportersControllers) {\n          this._reportersControllers[url].close(event);\n        }\n\n        for (var _url in this._observersControllers) {\n          this._observersControllers[_url].close(event);\n        }\n      }\n    }\n  }, {\n    key: \"myIdentity\",\n    value: function myIdentity(identity) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        console.info('[ChatManager.myIdentity]');\n        if (identity) return resolve(identity);\n\n        if (_this._myUrl.includes('hyperty://')) {\n          _this.identityManager.discoverUserRegistered().then(function (identity) {\n            resolve(identity);\n          })[\"catch\"](function (reason) {\n            reject(reason);\n          });\n        } else {\n          _this.identityManager.discoverIdentityPerIdP().then(function (identity) {\n            resolve(identity);\n          })[\"catch\"](function (reason) {\n            reject(reason);\n          });\n        }\n      });\n    }\n    /**\r\n     * This function is used to create a new Group Chat providing the name and the identifiers of users to be invited.\r\n     * @param  {string}                     name  Is a string to identify the Group Chat\r\n     * @param  {array<URL.userURL>}         users Array of users to be invited to join the Group Chat. Users are identified with reTHINK User URL, like this format user://<ipddomain>/<user-identifier>\r\n     * @return {<Promise>ChatController}    A ChatController object as a Promise.\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name, users) {\n      var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _this = this;\n\n      var syncher = _this._syncher;\n      return new Promise(function (resolve, reject) {\n        _this.communicationObject = communicationObject;\n        _this.communicationObject.cseq = 1;\n        _this.communicationObject.startingTime = new Date().toJSON();\n        _this.communicationObject.status = CommunicationStatus.OPEN;\n        var myIdentity;\n\n        _this.myIdentity().then(function (identity) {\n          myIdentity = identity;\n          console.log('[ChatManager.create ] My Identity', identity); // let url = _this.communicationObject.reporter;\n\n          var userInfo = new UserInfo_UserInfo(_this._myUrl, _this._domain, identity); // Add my identity\n\n          _this.communicationObject.participants[identity.guid] = userInfo;\n          console.log('[ChatManager.create ] participants: ', _this.communicationObject.participants);\n          console.log('[ChatManager.create ] communicationObject', _this.communicationObject);\n          console.info('[ChatManager.create] searching ' + users); //let usersSearch = _this.search.users(users, domains, ['comm'], ['chat']);\n\n          var usersDiscovery = [];\n          var disconnected = [];\n          var live = {};\n          users.forEach(function (user) {\n            var userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\n\n            usersDiscovery.push(userDiscoveryPromise); //if (user.user.includes('://')) mutual = false;\n          });\n          Promise.all(usersDiscovery).then(function (userDiscoveryResults) {\n            console.log('[ChatManager.create] Users Discovery Results->', userDiscoveryResults);\n            var selectedHyperties = [];\n            userDiscoveryResults.forEach(function (userDiscoveryResult) {\n              userDiscoveryResult.forEach(function (discovered) {\n                if (discovered.data.status === 'live') {\n                  selectedHyperties.push(discovered.data.hypertyID);\n                  live[discovered.data.hypertyID] = discovered;\n                } else {\n                  // To control the number of subscriptions to disconnected devices\n                  if (disconnected.length < 5) {\n                    disconnected.push(discovered);\n                  }\n                }\n              });\n            });\n            /*        return usersSearch;\r\n            }).then((hypertiesIDs) => {\r\n            let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n            return hyperty.hypertyID;\r\n            }); */\n\n            console.info('[ChatManager] ---------------------- Syncher Create ---------------------- \\n');\n            console.info('[ChatManager] Selected Hyperties: !!! ', selectedHyperties);\n            console.info(\"Have \".concat(selectedHyperties.length, \" users;\"));\n            var mutual = extra.mutual ? extra.mutual : true;\n            var input = Object.assign({\n              resources: ['chat'],\n              mutual: mutual\n            }, extra);\n            delete input.name;\n            if (_this.offline) input.offline = _this.offline;\n            console.info('[ChatManager] input data:', input);\n            return syncher.create(_this._objectDescURL, selectedHyperties, _this.communicationObject, true, false, name, {}, input);\n          }).then(function (dataObjectReporter) {\n            console.info('[ChatManager] 3. Return Create Data Object Reporter', dataObjectReporter);\n            var chatController = new chatManager_ChatController(syncher, _this.discovery, _this._domain, _this.search, myIdentity, _this);\n            chatController.dataObjectReporter = dataObjectReporter;\n            _this._reportersControllers[dataObjectReporter.url] = chatController;\n            console.log('[ChatManager] chatController invitationsHandler: ', chatController.invitationsHandler); // process invitations to handle not received invitations\n\n            if (dataObjectReporter.invitations.length > 0) {\n              chatController.invitationsHandler.processInvitations(live, dataObjectReporter);\n            } // If any invited User is disconnected let's wait until it is connected again\n\n\n            if (disconnected.length > 0) chatController.invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObjectReporter);\n            resolve(chatController);\n          })[\"catch\"](function (reason) {\n            reject(reason);\n          });\n        })[\"catch\"](function (reason) {\n          console.log('[ChatManager.create] MyIdentity Error:', reason);\n          return reject(reason);\n        });\n      });\n    }\n    /**\r\n     * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n     * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n     */\n\n  }, {\n    key: \"onInvitation\",\n    value: function onInvitation(callback) {\n      var _this = this;\n\n      _this._onInvitation = callback;\n    }\n    /**\r\n     * This function is used to join a Group Chat.\r\n     * @param  {URL.CommunicationURL} invitationURL  The Communication URL of the Group Chat to join that is provided in the invitation event\r\n     * @return {<Promise>ChatController}             It returns the ChatController object as a Promise\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(invitationURL) {\n      var mutual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var identity = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var syncher = _this._syncher;\n        var myIdentity;\n        console.info('[ChatManager] ------------------------ Syncher subscribe ---------------------- \\n');\n        console.info('invitationURL', invitationURL);\n\n        _this.myIdentity(identity).then(function (identity) {\n          myIdentity = identity;\n          var input = {\n            schema: _this._objectDescURL,\n            resource: invitationURL,\n            store: true,\n            p2p: false,\n            mutual: mutual,\n            domain_subscription: true,\n            identity: identity\n          };\n          if (_this.offline) input.offline = _this.offline;\n          return syncher.subscribe(input);\n        }).then(function (dataObjectObserver) {\n          console.info('Data Object Observer: ', dataObjectObserver);\n          var chatController = new chatManager_ChatController(syncher, _this.discovery, _this._domain, _this.search, myIdentity, _this);\n          resolve(chatController);\n          chatController.dataObjectObserver = dataObjectObserver;\n          _this._observersControllers[dataObjectObserver.url] = chatController;\n        })[\"catch\"](function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"offline\",\n    set: function set(offline) {\n      this._offline = offline;\n    },\n    get: function get() {\n      return this._offline ? this._offline : false;\n    }\n  }]);\n\n  return ChatManager;\n}();\n\n/* harmony default export */ var chatManager_ChatManager = (ChatManager_ChatManager);\n// CONCATENATED MODULE: ./src/chatManager/Chat.js\nfunction Chat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Chat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Chat_createClass(Constructor, protoProps, staticProps) { if (protoProps) Chat_defineProperties(Constructor.prototype, protoProps); if (staticProps) Chat_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* The Group Chat API is used to control a Group Chat instance.\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n//import { UserInfo } from './UserInfo';\n//import RegistrationStatus from '../discovery/RegistrationStatus';\n//import InvitationsHandler from './InvitationsHandler';\nvar Chat =\n/*#__PURE__*/\nfunction () {\n  function Chat(syncher, domain, identity, manager) {\n    Chat_classCallCheck(this, Chat);\n\n    if (!syncher) throw Error('Syncher is a necessary dependecy'); //    if (!discovery) throw Error('Discover is a necessary dependecy');\n\n    if (!domain) throw Error('Domain is a necessary dependecy'); //    if (!search) throw Error('Search is a necessary dependecy');\n\n    var _this = this;\n\n    _this._syncher = syncher; //    _this.discovery = discovery;\n    //    _this.search = search;\n\n    _this.myIdentity = identity;\n    _this.controllerMode = 'reporter';\n    _this.child_cseq = 0;\n    _this.domain = domain;\n    _this._manager = manager;\n    var hypertyURL = syncher.owner;\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication'; //    _this._invitationsHandler = new InvitationsHandler(hypertyURL);\n  }\n  /*  get invitationsHandler() {\r\n      return this._invitationsHandler;\r\n    }*/\n\n\n  Chat_createClass(Chat, [{\n    key: \"_setOnAddChildListener\",\n    value: function _setOnAddChildListener(dataObject) {\n      var _this = this;\n\n      dataObject.onAddChild(function (child) {\n        _this.child_cseq += 1;\n        console.info('[ChatManager.ChatController._setOnAddChildListener] new Child received: ', child);\n        if (_this._onMessage) _this._onMessage(child);\n      });\n    }\n  }, {\n    key: \"_onSubscribe\",\n    value: function _onSubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      event.accept();\n      console.log('[ChatManager.ChatController.onSubscribe] event', event, dataObjectReporter.url);\n      console.log('[ChatManager.ChatController.onSubscribe] New user has subscribe this object: ', dataObjectReporter.data, event.identity);\n      var identity = JSON.parse(JSON.stringify(event.identity));\n\n      if (identity.hasOwnProperty('assertion')) {\n        delete identity.assertion;\n      }\n\n      var userInfo = {\n        hypertyURL: event.url,\n        domain: event.domain,\n        identity: identity\n      };\n      var userURL = event.identity.userProfile.guid;\n      console.log('[ChatManager.ChatController.onSubscribe]  new participant', userInfo);\n\n      if (event.identity.legacy) {\n        userInfo.legacy = event.identity.legacy;\n      }\n\n      dataObjectReporter.data.participants[userURL] = userInfo;\n      console.log('[ChatManager.ChatController.onSubscribe] communicationObject OBJ chatcontroller', dataObjectReporter.data.participants);\n      console.log('[ChatManager.ChatController.onSubscribe - onSubscription] ', userInfo); // console.log('[ChatManager.ChatController.onSubscribe - this._onUserAdded] ', this._onUserAdded);\n\n      if (this._onUserAdded) this._onUserAdded(userInfo);\n    }\n  }, {\n    key: \"_onUnsubscribe\",\n    value: function _onUnsubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      console.log('[ChatManager.ChatController.onUnsubscribe] event', event, dataObjectReporter.url);\n      var participant = event.identity.userProfile;\n      console.log('[ChatManager.ChatController.onUnsubscribe]  participant left', participant);\n\n      if (event.identity.legacy) {\n        participant.legacy = event.identity.legacy;\n      }\n\n      delete dataObjectReporter.data.participants[participant.userURL];\n      console.log('[ChatManager.ChatController.onUnsubscribe - this._onUserRemoved] ', this.onUserRemoved);\n      if (this._onUserRemoved) this._onUserRemoved(participant);\n    }\n    /**\r\n     * This function is used to send a file.\r\n     * @param  {string}     file                        Is the file to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(file) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        var identity = {\n          userProfile: _this.myIdentity\n        };\n        dataObject.addHypertyResource('resources', 'file', file, identity).then(function (resourceFile) {\n          var identity = {\n            userProfile: _this.myIdentity\n          };\n          var fileSentEvt = {\n            value: resourceFile,\n            identity: identity,\n            resource: resourceFile\n          };\n          /*          let reporterStatus = new RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n          \r\n                    // recursive function to sync with chat reporter\r\n          \r\n                      let share2Reporter = function(file, subscriber, evt, status) {\r\n                        let statusOfReporter = status;\r\n                        file.sharingStatus.then(resolve(evt)).catch((result)=>{\r\n                          console.log('[ChatManager.ChatController.sendFile] share failed: ', result);\r\n          \r\n                          statusOfReporter.onLive( subscriber, () => {\r\n                          statusOfReporter.unsubscribeLive(subscriber);\r\n                          file.share(true);\r\n                          share2Reporter(file, subscriber, evt, statusOfReporter);\r\n                          });\r\n                            //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n                        });\r\n                      }*/\n          //            resourceFile.share(true).then(()=>{\n\n          resolve(fileSentEvt); //            });\n          //            share2Reporter(resourceFile, _this._manager._hypertyURL, fileSentEvt, reporterStatus);\n        });\n      })[\"catch\"](function (reason) {\n        console.error('Reason:', reason);\n        reject(reason);\n      });\n    }\n    /**\r\n     * This function is used to send a chat message.\r\n     * @param  {string}     message                        Is the ChatMessage to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(message, identity) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        //      let _dataObjectChild;\n        _this.child_cseq += 1;\n        var msg = {\n          /*        url: dataObject.data.url,\r\n                  cseq: _this.child_cseq,\r\n                  reporter: dataObject.data.reporter,\r\n                  schema: dataObject.data.schema,\r\n                  name: dataObject.data.name,\r\n                  created : new Date().toJSON(),*/\n          type: 'chat',\n          content: message\n        };\n        var sender = identity ? identity : {\n          userProfile: _this.myIdentity\n        };\n        var input = {};\n        input.anonymous = true; // TODO: change chatmessages to resource - chat, file\n        // TODO: change message to hypertyResource - https://github.com/reTHINK-project/dev-service-framework/tree/develop/docs/datamodel/data-objects/hyperty-resource\n        // TODO: handle with multiple resources - if the \"message\" will be different for each type of resources\n\n        dataObject.addChild(msg, sender, input).then(function (dataObjectChild) {\n          console.log('[ChatManager.ChatController][addChild - Chat Message]: ', dataObjectChild); //resolve(dataObjectChild);\n          //TODO: move to separate function\n\n          var msg = {\n            childId: dataObjectChild._childId,\n            from: dataObjectChild._owner,\n            value: dataObjectChild.data,\n            type: 'create',\n            identity: sender\n          };\n          /*        let reporterStatus = new RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n          \r\n                  // recursive function to sync with chat reporter\r\n          \r\n                    let share2Reporter = function(child, subscriber, msg, status) {\r\n                      let statusOfReporter = status;\r\n                      child.sharingStatus.then(resolve(msg)).catch((result)=>{\r\n          \r\n                          statusOfReporter.onLive( subscriber, () => {\r\n                            statusOfReporter.unsubscribeLive(subscriber);\r\n                            child.share(true);\r\n                            share2Reporter(child, subscriber, msg, statusOfReporter);\r\n                          });\r\n                          //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n                      });\r\n                    }*/\n          //          share2Reporter(dataObjectChild, _this._manager._hypertyURL, msg, reporterStatus);\n          //        dataObjectChild.share(true);\n\n          resolve(msg);\n        })[\"catch\"](function (reason) {\n          console.error('Reason:', reason);\n          reject(reason);\n        });\n      });\n    }\n    /**\r\n     * [onChange description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      var _this = this;\n\n      _this._onChange = callback;\n    }\n    /**\r\n     * This function is used to receive new messages.\r\n     * @param  {Function} callback Function to handle with new messages\r\n     * @return {Communication.ChatMessage} m\r\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      var _this = this;\n\n      _this._onMessage = callback;\n    }\n    /**\r\n     * This function is used to receive typing events.\r\n     * @param  {Function} callback Function to handle typing event\r\n     */\n\n  }, {\n    key: \"onTyping\",\n    value: function onTyping(callback) {\n      if (this._dataObjectReporter) this._dataObjectReporter.onEvent(function (event) {\n        if (event.value === 'typing') {\n          callback();\n        }\n      });else this._dataObjectObserver.onEvent(function (event) {\n        if (event.value === 'typing') {\n          callback();\n        }\n      });\n    }\n    /**\r\n     * This function is used to trigger typing events.\r\n     */\n\n  }, {\n    key: \"typing\",\n    value: function typing() {\n      if (this._dataObjectReporter) this._dataObjectReporter.sendEvent('typing');else this._dataObjectObserver.sendEvent('typing');\n    }\n    /**\r\n     * [onUserAdded description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserAdded\",\n    value: function onUserAdded(callback) {\n      var _this = this;\n\n      _this._onUserAdded = callback;\n    }\n    /**\r\n     * When the an user was removed\r\n     * @param  {Function} callback Function handle with the removed user\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserRemoved\",\n    value: function onUserRemoved(callback) {\n      var _this = this;\n\n      _this._onUserRemoved = callback;\n    }\n    /**\r\n     * This function is used to receive requests to close the Group Chat instance.\r\n     * @return {DeleteEvent} The DeleteEvent fired by the Syncher when the Chat is closed.\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      var _this = this;\n\n      _this._onClose = callback;\n    }\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      var _this = this;\n\n      _this._onResponse = callback;\n    }\n    /**\r\n     * This function is used to add / invite new user on an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n    /*  addUser(users) {\r\n    \r\n        let _this = this;\r\n    \r\n        let haveEmptyElements = (element) => {\r\n          console.log('Element:', element.length);\r\n          return element.length !== 0;\r\n        };\r\n    \r\n        let notFoundElements = (element) => {\r\n          console.log('user not found: ', element);\r\n          return !(element instanceof String);\r\n        };\r\n    \r\n        return new Promise(function(resolve, reject) {\r\n    \r\n          if (users.filter(haveEmptyElements).length === 0) {\r\n            return reject('Don\\'t have users to invite');\r\n          }\r\n    \r\n          console.info('[ChatManager.ChatController.addUsers ]: ', users);\r\n    \r\n          /*_this.search.users(users, domains, ['comm'], ['chat'])\r\n    \r\n        .then((hypertiesIDs) => {\r\n    \r\n          if (hypertiesIDs.filter(notFoundElements).length === 0) {\r\n            throw 'User(s) not found';\r\n          }\r\n    \r\n          let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n            return hyperty.hypertyID;\r\n          });*/\n\n    /*      let usersDiscovery = [];\r\n          let disconnected = [];\r\n          let live = {};\r\n    \r\n          users.forEach((user) => {\r\n            let userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\r\n              usersDiscovery.push(userDiscoveryPromise);\r\n            });\r\n    \r\n          Promise.all(usersDiscovery).then((userDiscoveryResults) => {\r\n            console.log('[ChatManager.ChatController.addUsers] Users Discovery Results->', userDiscoveryResults);\r\n    \r\n            let selectedHyperties = [];\r\n    \r\n             userDiscoveryResults.forEach((userDiscoveryResult) => {\r\n    \r\n               userDiscoveryResult.forEach((discovered)=>{\r\n                 if (discovered.data.status === 'live'){\r\n                   selectedHyperties.push(discovered.data.hypertyID);\r\n                   live[discovered.data.hypertyID] = discovered;\r\n                 }\r\n                 else if (disconnected.length < 5) disconnected.push(discovered);\r\n               });\r\n    \r\n            });\r\n    \r\n            console.info('[ChatManager.ChatController]------------------------ Syncher Create ---------------------- \\n');\r\n            console.info('[ChatManager.ChatController]Selected Hyperties: !!! ', selectedHyperties);\r\n            console.info(`Have ${selectedHyperties.length} users;`);\r\n    //        console.info('[ChatManager] HypertiesIDs ', hypertiesIDs);\r\n    \r\n            let dataObject = _this.controllerMode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n    \r\n            if (disconnected.length > 0) _this._invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObject);\r\n    \r\n            dataObject.inviteObservers(selectedHyperties);\r\n    \r\n            if (dataObject.invitations.length > 0) _this._invitationsHandler.processInvitations(live, dataObject);\r\n    \r\n            return;\r\n    \r\n            })\r\n            .then(() => {\r\n              console.info('[ChatManager.ChatController]Are invited with success ' + users.length + ' users;');\r\n              resolve(true);\r\n    \r\n    \r\n    \r\n            }).catch((reason) => {\r\n              console.error('An error occurred when trying to invite users;\\n', reason);\r\n              reject(reason);\r\n            });\r\n    \r\n        });\r\n    \r\n      }*/\n\n    /**\r\n     * This function is used to request the Reporter to add / invite new user on an existing Group Chat instance.\r\n     * Only Observers are allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n    /*  addUserReq(users) {\r\n    \r\n        let _this = this;\r\n    \r\n        //check is Observer and invoke observer.execute() with new promise\r\n        let haveEmptyElements = (element) => {\r\n          console.log('Element:', element.length);\r\n          return element.length !== 0;\r\n        };\r\n    \r\n        return new Promise(function(resolve, reject) {\r\n    \r\n          if (users.filter(haveEmptyElements).length === 0) {\r\n            return reject('[ChatManager.ChatController.addUserReq] Don\\'t have users to add');\r\n          }\r\n          if (!_this.controllerMode === 'observer') {\r\n            return reject('[ChatManager.ChatController.addUserReq] only allowed to Chat Observer');\r\n    \r\n          let addUser = _this.addUser(users);\r\n    \r\n          if (_this._dataObjectObserver) {\r\n            addUser = _this._dataObjectObserver.execute('addUser', users);\r\n          }\r\n    \r\n          addUser.then(() => {\r\n            console.info('[ChatManager.ChatController.addUserReq] Request accepted by Reporter ');\r\n            resolve(true);\r\n          }).catch((reason) => {\r\n            console.error('[ChatManager.ChatController.addUserReq] Request rejected by Reporter;\\n', reason);\r\n            reject(reason);\r\n          });\r\n        }\r\n    \r\n      });\r\n    \r\n    }*/\n\n  }, {\n    key: \"onInvitationResponse\",\n    value: function onInvitationResponse(callback) {\n      var _this = this;\n\n      _this._onInvitationResponse = callback; //    _this._invitationsHandler.invitationResponse = callback;\n    }\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @return {<Promise> boolean} Promise with the status\r\n     */\n\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param  {URL.UserURL} user       User to be removed from the Group Chat that is identified with reTHINK User URL.\r\n     * @return {<Promise> boolean}      It returns as a Promise true if successfully removed or false otherwise.\r\n     */\n\n  }, {\n    key: \"removeUser\",\n    value: function removeUser(user) {\n      // TODO: implement the removeUser;\n      console.log('[ChatManager.ChatController]Not yet implemented: ', user);\n    }\n    /**\r\n     * This function is used to close an existing Group Chat instance.\r\n     * Only available to Chat Group Reporters i.e. the Hyperty instance that created the Group Chat.\r\n     * @return {<Promise>Boolean} It returns as a Promise true if successfully closed or false otherwise.\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var del = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      // TODO: the dataObjectReporter.delete should be a Promise;\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this.controllerMode === 'reporter') {\n          // reporter\n          //        _this._invitationsHandler.cleanInvitations(_this.dataObjectReporter).then(() => {\n          if (!del) {\n            _this._manager.communicationObject.status = 'closed';\n            resolve(true);\n          } else {\n            try {\n              delete _this._manager._reportersControllers[_this.dataObjectReporter.url];\n\n              _this.dataObjectReporter[\"delete\"]();\n\n              resolve(true);\n              if (_this._onClose) _this._onClose({\n                code: 200,\n                desc: 'deleted',\n                url: _this.dataObjectReporter.url\n              });\n            } catch (e) {\n              console.error(e);\n              reject(false);\n            }\n          } //          });\n\n        } else {\n          // observer\n          if (del) {\n            try {\n              delete _this._manager._observersControllers[_this.dataObjectObserver.url];\n\n              _this.dataObjectObserver.unsubscribe();\n\n              resolve(true);\n            } catch (e) {\n              console.error(e);\n              reject(false);\n            }\n          } else {\n            // TODO: send message \n            resolve(true);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter.url : this.dataObjectObserver.url;\n    }\n  }, {\n    key: \"dataObjectReporter\",\n    set: function set(dataObjectReporter) {\n      if (!dataObjectReporter) throw new Error('[ChatController] The data object reporter is necessary parameter ');\n\n      var _this = this;\n\n      _this.controllerMode = 'reporter'; // Handler to process received files\n      // dataObjectReporter.onResponse(function(event) {\n      //   console.log('[DataObjectReporter - onResponse]', event);\n      //   if (_this._onInvitationResponse) {\n      //     _this._onInvitationResponse(event);\n      //   }\n      //\n      // });\n\n      dataObjectReporter.onSubscription(function (event) {\n        switch (event.type) {\n          case 'subscribe':\n            _this._onSubscribe(event);\n\n            break;\n\n          case 'unsubscribe':\n            _this._onUnsubscribe(event);\n\n            break;\n        }\n      });\n\n      _this._setOnAddChildListener(dataObjectReporter);\n\n      dataObjectReporter.onRead(function (event) {\n        event.accept();\n      });\n      dataObjectReporter.onExecute(function (event) {\n        switch (event.method) {\n          case 'addUser':\n            _this.addUser(event.params[0]).then(function () {\n              event.accept();\n            })[\"catch\"](function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          case 'removeUser':\n            _this.removeUser(event.params).then(function () {\n              event.accept();\n            })[\"catch\"](function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          default:\n            event.reject('[ChatController.onExecute] Chat method execution not accepted by Reporter');\n            break;\n        }\n      });\n      _this._dataObjectReporter = dataObjectReporter;\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectReporter;\n    }\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this._dataObjectReporter._childrenObjects : this._dataObjectObserver._childrenObjects;\n    }\n  }, {\n    key: \"dataObjectObserver\",\n    set: function set(dataObjectObserver) {\n      var _this = this;\n\n      _this.controllerMode = 'observer';\n      _this._dataObjectObserver = dataObjectObserver;\n      dataObjectObserver.onChange('*', function (event) {\n        console.info('[ChatManager.ChatController]Observer - onChange', event);\n\n        if (event.field.includes('participants')) {\n          switch (event.cType) {\n            case 'add':\n              if (_this._onUserAdded) _this._onUserAdded(event);\n              break;\n\n            case 'remove':\n              if (_this._onUserRemoved) _this._onUserRemoved(event);\n              break;\n          }\n        }\n\n        if (_this._onChange) _this._onChange(event);\n      });\n\n      _this._setOnAddChildListener(dataObjectObserver); // let childrens = dataObjectObserver.childrens;\n      // Object.keys(childrens).forEach((child) => {\n      //   if (_this._onMessage) _this._onMessage({\n      //     childId: child,\n      //     identity: childrens[child].identity,\n      //     value: childrens[child].data\n      //   });\n      // })\n\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectObserver;\n    }\n  }, {\n    key: \"dataObject\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter : this.dataObjectObserver;\n    }\n  }, {\n    key: \"closeEvent\",\n    set: function set(event) {\n      var _this = this;\n\n      _this._closeEvent = event;\n      if (_this._onClose) _this._onClose(event);\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._closeEvent;\n    }\n  }]);\n\n  return Chat;\n}();\n\n/* harmony default export */ var chatManager_Chat = (Chat);\n// CONCATENATED MODULE: ./src/chatManager/SimpleChatManager.js\nfunction SimpleChatManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SimpleChatManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SimpleChatManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) SimpleChatManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) SimpleChatManager_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Service Framework\n//import IdentityManager from '../identityManager/IdentityManager';\n//import RegistrationStatus from '../discovery/RegistrationStatus';\n//import Discovery from '../discovery/Discovery';\n//import Syncher from '../syncher/Syncher';\n// Utils\n//import {divideURL} from '../utils/utils';\n//import Search from '../utils/Search';\n// Internals\n\n\n\n/**\r\n* Hyperty Simple Group Chat Manager API\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n\nvar SimpleChatManager_SimpleChatManager =\n/*#__PURE__*/\nfunction () {\n  function SimpleChatManager(myUrl, bus, configuration, syncher, factory) {\n    SimpleChatManager_classCallCheck(this, SimpleChatManager);\n\n    if (!myUrl) throw new Error('[SimpleChatManager.constructor] The myUrl is a needed parameter');\n    if (!bus) throw new Error('[SimpleChatManager.constructor] The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('[SimpleChatManager.constructor] The configuration is a needed parameter');\n\n    var _this = this;\n\n    if (!syncher) {\n      syncher = factory.createSyncher(myUrl, bus, configuration);\n    }\n\n    _this._runtimeURL = configuration.runtimeURL;\n    var domain = factory.divideURL(_this._runtimeURL).domain; //    let discovery = factory.createDiscovery(myUrl, configuration.runtimeURL, bus);\n\n    var identityManager = factory.createIdentityManager(myUrl, configuration.runtimeURL, bus);\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\n    _this._reportersControllers = {};\n    _this._observersControllers = {};\n    _this._myUrl = myUrl;\n    _this._bus = bus;\n    _this._syncher = syncher;\n    _this._domain = domain;\n    _this._defaultStubTriggered = false; //    _this.discovery = discovery;\n\n    _this.identityManager = identityManager;\n    _this.currentIdentity; //    _this.search = factory.createSearch(discovery, identityManager);\n\n    _this.communicationObject = communicationObject;\n    _this.communicationChildren = communicationChildren; //    console.log('[SimpleChatManager] Discover ', discovery);\n\n    console.log('[SimpleChatManager] Identity Manager ', identityManager);\n  }\n\n  SimpleChatManager_createClass(SimpleChatManager, [{\n    key: \"processNotification\",\n    value: function processNotification(event) {\n      var _this = this;\n\n      console.log('[SimpleChatManager.processNotification: ', event);\n\n      if (event.type === 'create') {\n        // TODO: replace the 100 for Message.Response\n        // event.ack(200);\n        if (_this._onInvitation) {\n          _this._onInvitation(event);\n        }\n      }\n\n      if (event.type === 'delete') {\n        // TODO: replace the 200 for Message.Response\n        event.ack(200);\n\n        if (_this._onNotification) {\n          _this._onNotification(event);\n        }\n\n        if (_this._observersControllers[event.url]) {\n          _this._observersControllers[event.url].closeEvent = event;\n          delete _this._observersControllers[event.url];\n          _this._observersControllers.closeEvent = event;\n          _this.communicationObject = communicationObject;\n        }\n        /*\r\n              for (let url in this._reportersControllers) {\r\n                this._reportersControllers[url].close(event);\r\n              }\r\n        \r\n              for (let url in this._observersControllers) {\r\n                this._observersControllers[url].close(event);\r\n              }*/\n\n      }\n    }\n  }, {\n    key: \"myIdentity\",\n    value: function myIdentity(identity) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        console.info('[SimpleChatManager.myIdentity]');\n        if (identity) return resolve(identity);\n\n        if (_this._myUrl.includes('hyperty://')) {\n          _this.identityManager.discoverUserRegistered().then(function (identity) {\n            _this.currentIdentity = identity;\n            resolve(identity);\n          })[\"catch\"](function (reason) {\n            reject(reason);\n          });\n        } else {\n          _this.identityManager.discoverIdentityPerIdP().then(function (identity) {\n            _this.currentIdentity = identity;\n            resolve(identity);\n          })[\"catch\"](function (reason) {\n            reject(reason);\n          });\n        }\n      });\n    }\n    /**\r\n     * This function is used to create a new Group Chat providing the name and the identifiers of users to be invited.\r\n     * @param  {string}                     name  Is a string to identify the Group Chat\r\n     * @param  {array<URL.HypertyURL>}         hyperties Array of hyperties to be invited to join the Group Chat. Users are identified with reTHINK User URL, like this format user://<ipddomain>/<user-identifier>\r\n     * @return {<Promise>ChatController}    A ChatController object as a Promise.\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name, hyperties) {\n      var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _this = this;\n\n      var syncher = _this._syncher;\n      return new Promise(function (resolve, reject) {\n        _this.communicationObject = communicationObject;\n        _this.communicationObject.cseq = 1;\n        _this.communicationObject.startingTime = new Date().toJSON();\n        _this.communicationObject.status = CommunicationStatus.OPEN;\n        var myIdentity;\n\n        _this.myIdentity().then(function (identity) {\n          myIdentity = identity;\n          console.log('[SimpleChatManager.create ] My Identity', identity); // let url = _this.communicationObject.reporter;\n\n          var userInfo = new UserInfo_UserInfo(_this._myUrl, _this._domain, identity); // Add my identity\n\n          _this.communicationObject.participants[identity.guid] = userInfo;\n          console.log('[SimpleChatManager.create ] participants: ', _this.communicationObject.participants);\n          console.log('[SimpleChatManager.create ] communicationObject', _this.communicationObject);\n          console.info('[SimpleChatManager] ---------------------- Syncher Create ---------------------- \\n');\n          console.info('[SimpleChatManager] Selected Hyperties: !!! ', hyperties); //          console.info(`Have ${hyperties.length} users;`);\n\n          var mutual = extra.mutual ? extra.mutual : true;\n          var input = Object.assign({\n            resources: ['chat'],\n            mutual: mutual\n          }, extra);\n          delete input.name;\n          if (_this.offline) input.offline = _this.offline;\n          if (_this.backup) input.backup = _this.backup;\n          console.log('[SimpleChatManager] input data:', input);\n          return syncher.create(_this._objectDescURL, hyperties, _this.communicationObject, true, false, name, {}, input);\n        }).then(function (dataObjectReporter) {\n          console.info('[SimpleChatManager] 3. Return Create Data Object Reporter', dataObjectReporter);\n          var chat = new chatManager_Chat(syncher, _this._domain, myIdentity, _this);\n          chat.dataObjectReporter = dataObjectReporter;\n          _this._reportersControllers[dataObjectReporter.url] = chat; //          console.log('[SimpleChatManager] chat invitationsHandler: ',   chat.invitationsHandler);\n          // process invitations to handle not received invitations\n\n          /*          if (dataObjectReporter.invitations.length > 0) {\r\n                      chat.invitationsHandler.processInvitations(live, dataObjectReporter);\r\n                    }\r\n          \r\n                    // If any invited User is disconnected let's wait until it is connected again\r\n                    if (disconnected.length > 0) chat.invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObjectReporter);\r\n          */\n\n          resolve(chat);\n        })[\"catch\"](function (reason) {\n          reject(reason);\n        });\n      })[\"catch\"](function (reason) {\n        console.log('[SimpleChatManager.create] MyIdentity Error:', reason);\n        return reject(reason);\n      }); //    });\n    }\n    /**\r\n     * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n     * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n     */\n\n  }, {\n    key: \"onInvitation\",\n    value: function onInvitation(callback) {\n      var _this = this;\n\n      _this._onInvitation = callback;\n\n      _this._triggerDefaultStubDeployment();\n    } // send message to trigger domain default stub to ensure incoming messages are received\n\n  }, {\n    key: \"_triggerDefaultStubDeployment\",\n    value: function _triggerDefaultStubDeployment() {\n      var pingMessage = {\n        from: this._myUrl,\n        to: this._domain,\n        type: 'execute'\n      };\n      if (!this._defaultStubTriggered) this._bus.postMessage(pingMessage);\n      this._defaultStubTriggered = true;\n    }\n    /**\r\n     * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n     * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n     */\n\n  }, {\n    key: \"onNotification\",\n    value: function onNotification(callback) {\n      var _this = this;\n\n      _this._onNotification = callback;\n    }\n    /**\r\n     * This function is used to join a Group Chat.\r\n     * @param  {URL.CommunicationURL} invitationURL  The Communication URL of the Group Chat to join that is provided in the invitation event\r\n     * @return {<Promise>ChatController}             It returns the ChatController object as a Promise\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(invitationURL) {\n      var mutual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var identity = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var syncher = _this._syncher;\n        var myIdentity;\n        console.info('[SimpleChatManager] ------------------------ Syncher subscribe ---------------------- \\n');\n        console.info('invitationURL', invitationURL);\n\n        _this.myIdentity(identity).then(function (identity) {\n          myIdentity = identity;\n          var input = {\n            schema: _this._objectDescURL,\n            resource: invitationURL,\n            store: true,\n            p2p: false,\n            mutual: mutual,\n            domain_subscription: true,\n            identity: identity\n          };\n          if (_this.offline) input.offline = _this.offline;\n          return syncher.subscribe(input);\n        }).then(function (dataObjectObserver) {\n          console.info('Data Object Observer: ', dataObjectObserver);\n          var chat = new chatManager_Chat(syncher, _this._domain, myIdentity, _this);\n          resolve(chat);\n          chat.dataObjectObserver = dataObjectObserver;\n          _this._observersControllers[dataObjectObserver.url] = chat;\n        })[\"catch\"](function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"offline\",\n    set: function set(offline) {\n      this._offline = offline;\n    },\n    get: function get() {\n      return this._offline ? this._offline : false;\n    }\n  }, {\n    key: \"backup\",\n    set: function set(backup) {\n      this._backup = backup;\n    },\n    get: function get() {\n      return this._backup ? this._backup : false;\n    }\n  }]);\n\n  return SimpleChatManager;\n}();\n\n/* harmony default export */ var chatManager_SimpleChatManager = (SimpleChatManager_SimpleChatManager);\n// CONCATENATED MODULE: ./src/sandbox/SandboxFactory.js\nfunction SandboxFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SandboxFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SandboxFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) SandboxFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) SandboxFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * Internal component to instantiate framework functionalities.\r\n */\n\nvar SandboxFactory_SandboxFactory =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _components: <url: instance>\r\n  */\n  function SandboxFactory(bus) {\n    SandboxFactory_classCallCheck(this, SandboxFactory);\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._divideURL = utils[\"k\" /* divideURL */];\n  }\n\n  SandboxFactory_createClass(SandboxFactory, [{\n    key: \"createSyncher\",\n    value: function createSyncher(owner, bus, config) {\n      return new Syncher[\"a\" /* default */](owner, bus, config);\n    }\n  }, {\n    key: \"createIdentityManager\",\n    value: function createIdentityManager(hypertyURL, runtimeURL, bus) {\n      var _this = this;\n\n      return new IdentityManager[\"a\" /* default */](hypertyURL, runtimeURL, bus);\n    }\n  }, {\n    key: \"createDiscovery\",\n    value: function createDiscovery(hypertyURL, runtimeURL, bus) {\n      var _this = this;\n\n      return new Discovery[\"a\" /* default */](hypertyURL, runtimeURL, bus);\n    }\n  }, {\n    key: \"createSearch\",\n    value: function createSearch(discovery, identityManager) {\n      var _this = this;\n\n      return new utils_Search(discovery, identityManager);\n    }\n  }, {\n    key: \"createContextObserver\",\n    value: function createContextObserver(hypertyURL, bus, config, schemes) {\n      return new ContextObserver[\"a\" /* default */](hypertyURL, bus, config, schemes, this);\n    }\n  }, {\n    key: \"createContextReporter\",\n    value: function createContextReporter(hypertyURL, bus, config) {\n      var _this = this;\n\n      return new ContextReporter[\"a\" /* default */](hypertyURL, bus, config, this);\n    }\n  }, {\n    key: \"createNotificationHandler\",\n    value: function createNotificationHandler(bus) {\n      var _this = this;\n\n      return new syncher_NotificationHandler(bus);\n    }\n  }, {\n    key: \"createMessageBodyIdentity\",\n    value: function createMessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile) {\n      return new identity_MessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile);\n    }\n  }, {\n    key: \"createChatManager\",\n    value: function createChatManager(hypertyURL, bus, configuration, syncher) {\n      return new chatManager_ChatManager(hypertyURL, bus, configuration, syncher, this);\n    }\n  }, {\n    key: \"createChatController\",\n    value: function createChatController(syncher, discovery, domain, search, identity, manager) {\n      return new chatManager_ChatController(syncher, discovery, domain, search, identity, manager);\n    }\n  }, {\n    key: \"createSimpleChatManager\",\n    value: function createSimpleChatManager(hypertyURL, bus, configuration, syncher) {\n      return new chatManager_SimpleChatManager(hypertyURL, bus, configuration, syncher, this);\n    }\n  }, {\n    key: \"createChat\",\n    value: function createChat(syncher, domain, identity, manager) {\n      return new chatManager_Chat(syncher, domain, identity, manager);\n    }\n  }, {\n    key: \"createRegistrationStatus\",\n    value: function createRegistrationStatus(observer, runtimeURL, chatUrl, bus) {\n      return new RegistrationStatus[\"a\" /* default */](observer, runtimeURL, chatUrl, bus);\n    }\n  }, {\n    key: \"divideURL\",\n    get: function get() {\n      return this._divideURL;\n    }\n  }]);\n\n  return SandboxFactory;\n}();\n\n/* harmony default export */ var sandbox_SandboxFactory = __webpack_exports__[\"a\"] = (SandboxFactory_SandboxFactory);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/proxy-observe/index.js\nvar proxy_observe = __webpack_require__(26);\n\n// CONCATENATED MODULE: ./src/syncher/ProxyObject.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar objectType = {\n  ARRAY: '[object Array]',\n  OBJECT: '[object Object]'\n};\n/**\r\n * @access private\r\n * Main class that maintains a JSON object, and observes changes in this object, recursively.\r\n * Internal objects and arrays are also observed.\r\n */\n\nvar ProxyObject_SyncObject =\n/*#__PURE__*/\nfunction () {\n  function SyncObject(initialData) {\n    _classCallCheck(this, SyncObject);\n\n    var _this = this;\n\n    _this._observers = [];\n    _this._filters = {};\n    this._data = initialData || {};\n\n    this._internalObserve(this._data);\n  }\n\n  _createClass(SyncObject, [{\n    key: \"observe\",\n    value: function observe(callback) {\n      this._observers.push(callback);\n    }\n  }, {\n    key: \"find\",\n    value: function find(path) {\n      var list = Object(utils[\"y\" /* parseAttributes */])(path);\n      return this._findWithSplit(list);\n    }\n  }, {\n    key: \"findBefore\",\n    value: function findBefore(path) {\n      var result = {};\n      var list = Object(utils[\"y\" /* parseAttributes */])(path);\n      result.last = list.pop();\n      result.obj = this._findWithSplit(list);\n      return result;\n    }\n  }, {\n    key: \"_findWithSplit\",\n    value: function _findWithSplit(list) {\n      var obj = this._data;\n      list.forEach(function (value) {\n        obj = obj[value];\n      });\n      return obj;\n    }\n  }, {\n    key: \"_internalObserve\",\n    value: function _internalObserve(object) {\n      var _this2 = this;\n\n      var handler = function handler(changeset) {\n        changeset.every(function (change) {\n          _this2._onChanges(change);\n        });\n      };\n\n      this._data = Object.deepObserve(object, handler);\n    }\n  }, {\n    key: \"_fireEvent\",\n    value: function _fireEvent(event) {\n      this._observers.forEach(function (callback) {\n        callback(event);\n      });\n    }\n  }, {\n    key: \"_onChanges\",\n    value: function _onChanges(change) {\n      var obj = change.object;\n      var objType;\n\n      if (obj.constructor === Object) {\n        objType = ObjectType.OBJECT;\n      }\n\n      if (obj.constructor === Array) {\n        objType = ObjectType.ARRAY;\n      }\n\n      var fieldString = change.keypath; // console.log('Field:', fieldString);\n      // console.log('type:', change.type);\n      //let oldValue = change.oldValue;\n\n      var newValue = obj[change.name]; // console.info(change.type + ' | Field: ' + fieldString + ' | New Value:', JSON.stringify(newValue), fieldString.includes('length'));\n\n      if (change.type === 'update' && !fieldString.includes('.length')) {\n        this._fireEvent({\n          cType: ChangeType.UPDATE,\n          oType: objType,\n          field: fieldString,\n          data: newValue\n        });\n      }\n\n      if (change.type === 'add') {\n        this._fireEvent({\n          cType: ChangeType.ADD,\n          oType: objType,\n          field: fieldString,\n          data: newValue\n        });\n      }\n\n      if (change.type === 'delete') {\n        this._fireEvent({\n          cType: ChangeType.REMOVE,\n          oType: objType,\n          field: fieldString\n        });\n      }\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }]);\n\n  return SyncObject;\n}();\n\nvar ChangeType = {\n  UPDATE: 'update',\n  ADD: 'add',\n  REMOVE: 'remove'\n};\nvar ObjectType = {\n  OBJECT: 'object',\n  ARRAY: 'array'\n};\n/* harmony default export */ var ProxyObject = (ProxyObject_SyncObject);\n// CONCATENATED MODULE: ./src/syncher/DataObjectChild.js\nfunction DataObjectChild_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObjectChild_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObjectChild_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObjectChild_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObjectChild_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar log = loglevel[\"getLogger\"]('DataObjectChild');\n\n\n/**\r\n * The class returned from the DataObject addChildren call or from onAddChildren if remotely created.\r\n */\n\nvar DataObjectChild_DataObjectChild\n/* implements SyncStatus */\n=\n/*#__PURE__*/\nfunction () {\n  /* private\r\n    ----event handlers----\r\n  _onResponseHandler: (event) => void\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the DataObject.addChild\r\n   */\n  function DataObjectChild(input) {\n    DataObjectChild_classCallCheck(this, DataObjectChild);\n\n    var _this = this;\n\n    function throwMandatoryParmMissingError(par) {\n      throw '[DataObjectChild] ' + par + ' mandatory parameter is missing';\n    }\n\n    input.parent ? _this._parent = input.parent : throwMandatoryParmMissingError('parent');\n    input.url ? _this._url = input.url : throwMandatoryParmMissingError('url');\n    input.created ? _this._created = input.created : throwMandatoryParmMissingError('created');\n    input.reporter ? _this._reporter = input.reporter : throwMandatoryParmMissingError('reporter');\n    input.runtime ? _this._runtime = input.runtime : throwMandatoryParmMissingError('runtime');\n    input.schema ? _this._schema = input.schema : throwMandatoryParmMissingError('schema');\n    input.parentObject ? _this._parentObject = input.parentObject : throwMandatoryParmMissingError('parentObject');\n    if (input.name) _this._name = input.name;\n    if (input.description) _this._description = input.description;\n    if (input.tags) _this._tags = input.tags;\n    if (input.resources) _this._resources = input.resources;\n    if (input.observerStorage) _this._observerStorage = input.observerStorage;\n    if (input.publicObservation) _this._publicObservation = input.publicObservation;\n    _this._childId = input.url;\n\n    if (input.data) {\n      _this._syncObj = new ProxyObject(input.data);\n    } else {\n      _this._syncObj = new ProxyObject({});\n    }\n\n    log.log('[DataObjectChild -  Constructor] - ', _this._syncObj);\n    _this._bus = _this._parentObject._bus;\n    _this._owner = _this._parentObject._owner;\n\n    _this._allocateListeners();\n\n    _this._metadata = input; // delete _this._metadata.data;\n\n    delete _this._metadata.parentObject;\n    _this._sharingStatus = false;\n  }\n\n  DataObjectChild_createClass(DataObjectChild, [{\n    key: \"share\",\n\n    /**\r\n     * This function is used to share the child Object among authorised Hyperties\r\n     * @param  {boolean}     reporter  If true the child object is only shared to Parent reporter\r\n     * @return {Promise<JSON>}        It returns a promise with the sharing results.\r\n     */\n    value: function share(toReporter) {\n      var _this = this;\n\n      _this._sharingStatus = new Promise(function (resolve, reject) {\n        var to;\n        var reporter = toReporter;\n\n        if (reporter) {\n          to = _this.metadata.parent;\n        } else to = _this.metadata.parent + '/children/';\n\n        var childValue = _this.metadata;\n        childValue.data = _this.data; //FLOW-OUT: this message will be sent directly to a resource child address: MessageBus\n\n        var requestMsg = {\n          type: 'create',\n          from: _this.metadata.reporter,\n          to: to,\n          body: {\n            resource: childValue.url,\n            value: childValue\n          }\n        };\n\n        if (_this.identity) {\n          requestMsg.body.identity = _this.identity;\n        } //to be used to disable mutual authentication for legacy users\n\n\n        if (_this._parentObject.data.hasOwnProperty('mutual')) requestMsg.body.mutual = _this._parentObject.data.mutual;\n\n        if (_this._parentObject.metadata.reporter === _this.metadata.reporter) {\n          _this._bus.postMessage(Object(utils[\"i\" /* deepClone */])(requestMsg));\n\n          return resolve();\n        } else {\n          var callback = function callback(reply) {\n            if (reply.to === _this._reporter) {\n              _this._bus.removeResponseListener(requestMsg.from, reply.id);\n\n              log.log('[Syncher.DataObjectChild.share] Parent reporter reply ', reply);\n              var result = {\n                code: reply.body && reply.body.code ? reply.body.code : 500,\n                desc: reply.body && reply.body.desc ? reply.body.desc : 'Unknown'\n              };\n\n              if (reply.body.code < 300) {\n                return resolve(result);\n              } else return reject(result);\n            }\n          };\n\n          var id = _this._bus.postMessage(Object(utils[\"i\" /* deepClone */])(requestMsg), callback, false);\n\n          setTimeout(function () {\n            // If Reporter does  not reply the promise is rejected\n            _this._bus.removeResponseListener(requestMsg.from, id);\n\n            var result = {\n              code: 408,\n              desc: 'timout'\n            };\n            return reject(result);\n          }, 3000);\n        }\n      });\n    }\n    /**\r\n       * This function is used to share the child Object among authorised Hyperties\r\n       * @param  {boolean}     reporter  If true the child object is only shared to Parent reporter\r\n       * @return {Promise<JSON>}        It returns a promise with the sharing results.\r\n       */\n\n  }, {\n    key: \"store\",\n    value: function store() {\n      var _this = this;\n\n      var child = {};\n      var key = _this.metadata.children + '.' + _this.metadata.url;\n      child.value = _this.metadata;\n      child.identity = _this.identity;\n      var msg = {\n        from: _this.metadata.reporter,\n        to: _this._parentObject._syncher._subURL,\n        type: 'create',\n        body: {\n          resource: _this.metadata.parent,\n          attribute: key,\n          value: child\n        }\n      };\n      log.log('[DataObjectChild.store]:', msg);\n\n      _this._bus.postMessage(msg);\n    }\n  }, {\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      var _this = this; //this is only needed for children reporters\n\n\n      if (_this._reporter === _this._owner) {\n        _this._listener = _this._bus.addListener(_this._reporter, function (msg) {\n          if (msg.type === 'response' && msg.id === _this._msgId) {\n            log.log('DataObjectChild.onResponse:', msg);\n\n            _this._onResponse(msg);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      if (_this._listener) {\n        _this._listener.remove();\n      }\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      _this._releaseListeners(); //TODO: send delete message ?\n      // nothing to be done\n      // return new Promise((resolve) => {\n      //   log.log('[DataObjectChild.delete]');\n      //   resolve();\n      // });\n\n    }\n    /**\r\n     * All Metadata about the Child Data Object\r\n     * @type {Object} -\r\n     */\n\n  }, {\n    key: \"onChange\",\n\n    /**\r\n     * Register the change listeners sent by the reporter child\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n    value: function onChange(callback) {\n      this._syncObj.observe(function (event) {\n        log.log('[DataObjectChild - observer] - ', event);\n        callback(event);\n      });\n    }\n    /**\r\n     * Setup the callback to process response notifications of the creates\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      this._onResponseHandler = callback;\n    } //FLOW-IN: message received from a remote DataObject -> _onChildCreate\n\n  }, {\n    key: \"_onResponse\",\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      var event = {\n        type: msg.type,\n        url: msg.body.source,\n        code: msg.body.code\n      };\n\n      if (_this._onResponseHandler) {\n        _this._onResponseHandler(event);\n      }\n    }\n  }, {\n    key: \"shareable\",\n    get: function get() {\n      var shareable = this.metadata;\n      shareable.data = this.data;\n      return shareable;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n    /**\r\n     * Children ID generated on addChildren. Unique identifier\r\n     * @type {URL} - URL of the format <HypertyURL>#<numeric-sequence>\r\n     */\n\n  }, {\n    key: \"childId\",\n    get: function get() {\n      return this._childId;\n    }\n    /**\r\n     * Data Structure to be synchronized.\r\n     * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n     */\n\n  }, {\n    key: \"sharingStatus\",\n    get: function get() {\n      return this._sharingStatus;\n    }\n    /**\r\n      * Data Structure to be synchronized.\r\n      * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n      */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._syncObj.data;\n    }\n    /**\r\n     * Set for this dataObjectChild an identity\r\n     * @method identity\r\n     * @param  {Identity} identity identity from who created the message\r\n     */\n\n  }, {\n    key: \"identity\",\n    set: function set(identity) {\n      this._identity = identity;\n    }\n    /**\r\n     * Get for this dataObjectChild an identity\r\n     * @method identity\r\n     * @return {Identity} identity from who created the message\r\n     */\n    ,\n    get: function get() {\n      return this._identity;\n    }\n  }]);\n\n  return DataObjectChild;\n}();\n\n/* harmony default export */ var syncher_DataObjectChild = (DataObjectChild_DataObjectChild);\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResource.js\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction HypertyResource_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction HypertyResource_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HypertyResource_createClass(Constructor, protoProps, staticProps) { if (protoProps) HypertyResource_defineProperties(Constructor.prototype, protoProps); if (staticProps) HypertyResource_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\n// Log System\n\nvar HypertyResource_log = loglevel[\"getLogger\"]('HypertyResource');\n\n\n\nvar HypertyResource_HypertyResource =\n/*#__PURE__*/\nfunction (_DataObjectChild) {\n  _inherits(HypertyResource, _DataObjectChild);\n\n  /**\r\n  * HypertyResource constructor\r\n  *\r\n  * @param  {URL} localRuntimeURL RuntimeURL of local runtime\r\n  * @param  {URL} input.owner HypertyURL of the Hyperty handling this resource\r\n  * @param  {URL} input.runtime Runtime URL where this resource is hosted\r\n  * @param  {Bus} input.bus sandbox message bus\r\n  * @param  {DataObject} input.parent Parent Data Object where the HypertyResource is handled as a child\r\n  * @param  {Boolean} isSender indicates if parent is Reporter or an Observer\r\n  * @param  {Array} input optional input parameters\r\n  */\n  function HypertyResource(isSender, input) {\n    var _this2;\n\n    HypertyResource_classCallCheck(this, HypertyResource);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HypertyResource).call(this, input));\n\n    var _this = _assertThisInitialized(_this2);\n\n    _this.arraybufferSizeLimit = 5242880; //above this limit content is not saved as ArrayBuffer\n\n    _this._isSender = isSender;\n    _this._localStorageURL = _this._parentObject._syncher._runtimeUrl + '/storage';\n    return _this2;\n  }\n\n  HypertyResource_createClass(HypertyResource, [{\n    key: \"save\",\n\n    /*\r\n    set parent(parent) {\r\n      let _this = this;\r\n      _this._parent = parent;\r\n    }*/\n    value: function save() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          from: _this._owner,\n          to: _this._localStorageURL,\n          type: 'create',\n          body: {\n            value: Object(utils[\"i\" /* deepClone */])(_this._metadata)\n          }\n        };\n\n        var callback = function callback(reply) {\n          HypertyResource_log.info('[HypertyResource.save] reply: ', reply);\n\n          _this._bus.removeResponseListener(_this._owner, reply.id);\n\n          if (reply.body.code === 200) {\n            if (reply.body.value) {\n              if (!_this._metadata.contentURL) _this._metadata.contentURL = [];\n\n              _this._metadata.contentURL.push(reply.body.value);\n            }\n\n            resolve();\n          } else reject(reply.body.code + ' ' + reply.body.desc);\n        };\n\n        msg.body.value.content = _this._content;\n\n        _this._bus.postMessage(msg, callback, false);\n      });\n    }\n    /**\r\n    * Function to Read HypertyResource\r\n    *\r\n    * @param  {} callback callback to be called with progress information in terms of percentage\r\n    * @return  {Promise}  input optional input parameters\r\n    */\n\n  }, {\n    key: \"read\",\n    value: function read(callback) {\n      var _this = this;\n\n      HypertyResource_log.info('[HypertyResource.read] ', this);\n      return new Promise(function (resolve, reject) {\n        if (_this.content) {\n          resolve(_this);\n        } else {\n          //TODO: use an iteration to get online runtime storages when some are offline\n          var storage = _this._getBestContentURL(_this._metadata.contentURL);\n\n          HypertyResource_log.log('Storage:', storage);\n          var msg = {\n            from: _this._owner,\n            to: storage.url,\n            type: 'read',\n            body: {\n              resource: storage.url + '/' + storage.resource,\n              p2p: true\n            }\n          };\n\n          if (_this.metadata.p2pRequester && _this.metadata.p2pHandler) {\n            msg.body.p2pRequester = _this.metadata.p2pRequester;\n            msg.body.p2pHandler = _this.metadata.p2pHandler;\n          } // get the resource first on the Local Hyperty Resource Storage;\n\n\n          _this._getBestResource(msg, callback).then(function (reply) {\n            HypertyResource_log.info('[HypertyResource] - get locally the resource:', reply);\n            resolve(_this);\n          })[\"catch\"](function (reply) {\n            HypertyResource_log.warn('[HypertyResource] - get locally the resource fail', reply); // Generate new message to not use the same id of the last one;\n\n            var msg = {\n              from: _this._owner,\n              to: storage.remoteURL,\n              type: 'read',\n              body: {\n                resource: storage.remoteURL + '/' + storage.resource,\n                p2p: true\n              }\n            };\n\n            if (_this.metadata.p2pRequester && _this.metadata.p2pHandler) {\n              msg.body.p2pRequester = _this.metadata.p2pRequester;\n              msg.body.p2pHandler = _this.metadata.p2pHandler;\n            } // get the resource on the Remote Hyperty Resource Storage;\n\n\n            _this._getBestResource(msg, callback).then(function (reply) {\n              HypertyResource_log.warn('[HypertyResource] - get remotely the resource', reply);\n              resolve(_this);\n            })[\"catch\"](function (reply) {\n              HypertyResource_log.warn('[HypertyResource] - get remotely the resource fail', reply);\n              reject(reply.body.code + ' ' + reply.body.desc);\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_getBestResource\",\n    value: function _getBestResource(msg, inProgressCallback) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var waitForResponse = setTimeout(function () {\n          // If Reporter does  not reply the promise is rejected\n          _this._bus.removeResponseListener(_this._owner, id);\n\n          msg.body.code = 408;\n          msg.body.desc = 'Response timeout';\n          return reject(msg);\n        }, 3000);\n\n        var callback = function callback(reply) {\n          HypertyResource_log.log('[HypertyResource.read] reply: ', reply);\n          var id = reply.id;\n          clearTimeout(waitForResponse);\n\n          switch (reply.body.code) {\n            case 200:\n              _this._content = reply.body.value.content; // save locally if not too big\n\n              if (reply.body.value.size < _this.arraybufferSizeLimit) {\n                _this.save();\n              }\n\n              _this._bus.removeResponseListener(_this._owner, id);\n\n              resolve(reply);\n              break;\n\n            case 183:\n              inProgressCallback(reply.body.value);\n              break;\n\n            default:\n              _this._bus.removeResponseListener(_this._owner, id);\n\n              reject(reply);\n              break;\n          }\n        };\n\n        var id = _this._bus.postMessage(msg, callback, false);\n      });\n    } // Remove Hyperty from the local storage\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      HypertyResource_log.info('[HypertyResource.delete]', _this.metadata);\n      var msg = {\n        from: _this._owner,\n        to: _this._localStorageURL,\n        type: 'delete',\n        body: {\n          resources: _this.metadata.contentURL\n        }\n      };\n      return new Promise(function (resolve) {\n        _this._bus.postMessage(msg, function (reply) {\n          if (reply.body.code < 300) resolve(true);else resolve(false);\n        });\n      });\n    }\n  }, {\n    key: \"_getBestContentURL\",\n    value: function _getBestContentURL(contentURLList) {\n      var _this = this;\n\n      var contentURL = contentURLList[0];\n      var splitedResource = contentURL.substr(contentURL.lastIndexOf('/') + 1);\n      var url = _this._localStorageURL; // contentURL.substr(0, contentURL.lastIndexOf('/'));\n\n      var remoteResource = contentURL.substr(0, contentURL.lastIndexOf('/'));\n      return {\n        url: url,\n        resource: splitedResource,\n        remoteURL: remoteResource\n      };\n    }\n  }, {\n    key: \"resourceType\",\n    get: function get() {\n      var _this = this;\n\n      return _this.metadata.resourceType;\n    }\n  }, {\n    key: \"mimetype\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.type;\n    }\n  }, {\n    key: \"content\",\n    get: function get() {\n      var _this = this;\n\n      return _this._content;\n    }\n  }, {\n    key: \"contentURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.contentURL;\n    }\n  }, {\n    key: \"shareable\",\n    get: function get() {\n      var _this = this;\n\n      var shareable = _get(_getPrototypeOf(HypertyResource.prototype), \"metadata\", this);\n\n      shareable.resourceType = _this.resourceType;\n      return shareable;\n    }\n  }]);\n\n  return HypertyResource;\n}(syncher_DataObjectChild);\n\n/* harmony default export */ var hyperty_resource_HypertyResource = (HypertyResource_HypertyResource);\n// CONCATENATED MODULE: ./src/utils/ImageTools.js\nfunction ImageTools_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ImageTools_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ImageTools_createClass(Constructor, protoProps, staticProps) { if (protoProps) ImageTools_defineProperties(Constructor.prototype, protoProps); if (staticProps) ImageTools_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar hasBlobConstructor = typeof Blob !== 'undefined' && function () {\n  try {\n    return Boolean(new Blob());\n  } catch (e) {\n    return false;\n  }\n}();\n\nvar hasArrayBufferViewSupport = hasBlobConstructor && typeof Uint8Array !== 'undefined' && function () {\n  try {\n    return new Blob([new Uint8Array(100)]).size === 100;\n  } catch (e) {\n    return false;\n  }\n}();\n\nvar hasToBlobSupport = typeof HTMLCanvasElement !== \"undefined\" ? HTMLCanvasElement.prototype.toBlob : false;\nvar hasBlobSupport = hasToBlobSupport || typeof Uint8Array !== 'undefined' && typeof ArrayBuffer !== 'undefined' && typeof atob !== 'undefined';\nvar hasReaderSupport = typeof FileReader !== 'undefined' || typeof URL !== 'undefined';\n\nvar ImageTools =\n/*#__PURE__*/\nfunction () {\n  function ImageTools() {\n    ImageTools_classCallCheck(this, ImageTools);\n  }\n\n  ImageTools_createClass(ImageTools, null, [{\n    key: \"resize\",\n    value: function resize(file, maxDimensions, callback) {\n      if (typeof maxDimensions === 'function') {\n        callback = maxDimensions;\n        maxDimensions = {\n          width: 640,\n          height: 480\n        };\n      }\n\n      var maxWidth = maxDimensions.width;\n      var maxHeight = maxDimensions.height;\n\n      if (!ImageTools.isSupported() || !file.type.match(/image.*/)) {\n        callback(file, false);\n        return false;\n      }\n\n      if (file.type.match(/image\\/gif/)) {\n        // Not attempting, could be an animated gif\n        callback(file, false); // TODO: use https://github.com/antimatter15/whammy to convert gif to webm\n\n        return false;\n      }\n\n      var image = document.createElement('img');\n\n      image.onload = function (imgEvt) {\n        var width = image.width;\n        var height = image.height;\n        var isTooLarge = false;\n\n        if (width >= height && width > maxDimensions.width) {\n          // width is the largest dimension, and it's too big.\n          height *= maxDimensions.width / width;\n          width = maxDimensions.width;\n          isTooLarge = true;\n        } else if (height > maxDimensions.height) {\n          // either width wasn't over-size or height is the largest dimension\n          // and the height is over-size\n          width *= maxDimensions.height / height;\n          height = maxDimensions.height;\n          isTooLarge = true;\n        }\n\n        if (!isTooLarge) {\n          // early exit; no need to resize\n          callback(file, false);\n          return;\n        }\n\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(image, 0, 0, width, height);\n\n        if (hasToBlobSupport) {\n          canvas.toBlob(function (blob) {\n            callback(blob, true);\n          }, file.type);\n        } else {\n          var blob = ImageTools._toBlob(canvas, file.type);\n\n          callback(blob, true);\n        }\n      };\n\n      ImageTools._loadImage(image, file);\n\n      return true;\n    }\n  }, {\n    key: \"_toBlob\",\n    value: function _toBlob(canvas, type) {\n      var dataURI = canvas.toDataURL(type);\n      var dataURIParts = dataURI.split(',');\n      var byteString;\n\n      if (dataURIParts[0].indexOf('base64') >= 0) {\n        // Convert base64 to raw binary data held in a string:\n        byteString = atob(dataURIParts[1]);\n      } else {\n        // Convert base64/URLEncoded data component to raw binary data:\n        byteString = decodeURIComponent(dataURIParts[1]);\n      }\n\n      var arrayBuffer = new ArrayBuffer(byteString.length);\n      var intArray = new Uint8Array(arrayBuffer);\n\n      for (var i = 0; i < byteString.length; i += 1) {\n        intArray[i] = byteString.charCodeAt(i);\n      }\n\n      var mimeString = dataURIParts[0].split(':')[1].split(';')[0];\n      var blob = null;\n\n      if (hasBlobConstructor) {\n        blob = new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], {\n          type: mimeString\n        });\n      } else {\n        var bb = new BlobBuilder();\n        bb.append(arrayBuffer);\n        blob = bb.getBlob(mimeString);\n      }\n\n      return blob;\n    }\n  }, {\n    key: \"_loadImage\",\n    value: function _loadImage(image, file, callback) {\n      if (typeof URL === 'undefined') {\n        var reader = new FileReader();\n\n        reader.onload = function (evt) {\n          image.src = evt.target.result;\n\n          if (callback) {\n            callback();\n          }\n        };\n\n        reader.readAsDataURL(file);\n      } else {\n        image.src = URL.createObjectURL(file);\n\n        if (callback) {\n          callback();\n        }\n      }\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof HTMLCanvasElement !== 'undefined' && hasBlobSupport && hasReaderSupport;\n    }\n  }]);\n\n  return ImageTools;\n}();\n\n\n// CONCATENATED MODULE: ./src/hyperty-resource/FileHypertyResource.js\nfunction FileHypertyResource_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { FileHypertyResource_typeof = function _typeof(obj) { return typeof obj; }; } else { FileHypertyResource_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return FileHypertyResource_typeof(obj); }\n\nfunction FileHypertyResource_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction FileHypertyResource_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction FileHypertyResource_createClass(Constructor, protoProps, staticProps) { if (protoProps) FileHypertyResource_defineProperties(Constructor.prototype, protoProps); if (staticProps) FileHypertyResource_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction FileHypertyResource_possibleConstructorReturn(self, call) { if (call && (FileHypertyResource_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return FileHypertyResource_assertThisInitialized(self); }\n\nfunction FileHypertyResource_getPrototypeOf(o) { FileHypertyResource_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FileHypertyResource_getPrototypeOf(o); }\n\nfunction FileHypertyResource_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction FileHypertyResource_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) FileHypertyResource_setPrototypeOf(subClass, superClass); }\n\nfunction FileHypertyResource_setPrototypeOf(o, p) { FileHypertyResource_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FileHypertyResource_setPrototypeOf(o, p); }\n\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\n// Log System\n\nvar FileHypertyResource_log = loglevel[\"getLogger\"]('FileHypertyResource');\n\n\n\n\nvar FileHypertyResource_FileHypertyResource =\n/*#__PURE__*/\nfunction (_HypertyResource) {\n  FileHypertyResource_inherits(FileHypertyResource, _HypertyResource);\n\n  /**\r\n  * FileHypertyResource constructor\r\n  *\r\n  * @param  {URL} owner HypertyURL of the Hyperty handling this resource\r\n  * @param  {URL} runtime Runtime URL where this resource is hosted\r\n  * @param  {Bus} bus sandbox message bus\r\n  * @param  {DataObject} parent Parent Data Object where the HypertyResource is handled as a child\r\n  * @param  {File} file file to be encoded as HypertyResource\r\n  * @param  {Boolean} isReporter indicates if parent is Reporter or an Observer\r\n  * @param  {Array} input optional input parameters\r\n  */\n  function FileHypertyResource(isSender, input) {\n    var _this2;\n\n    FileHypertyResource_classCallCheck(this, FileHypertyResource);\n\n    _this2 = FileHypertyResource_possibleConstructorReturn(this, FileHypertyResource_getPrototypeOf(FileHypertyResource).call(this, isSender, input));\n\n    var _this = FileHypertyResource_assertThisInitialized(_this2);\n\n    _this.metadata.resourceType = 'file';\n    return _this2;\n  }\n\n  FileHypertyResource_createClass(FileHypertyResource, [{\n    key: \"init\",\n    value: function init(file) {\n      var _this = this;\n\n      if (!file) throw new Error('[FileHypertyResource.constructor] missing mandatory *file* input ');\n      return new Promise(function (resolve, reject) {\n        _this._metadata.name = file.name;\n        _this._metadata.lastModified = file.lastModified;\n        _this._metadata.size = file.size;\n        _this._metadata.mimetype = file.type;\n        FileHypertyResource_log.log('[FileHypertyResource.init] file: ', file);\n\n        if (_this._isSender) {\n          var mimetype = file.type.split('/')[0];\n\n          switch (mimetype) {\n            case 'image':\n              _this._getImagePreview(file).then(function (preview) {\n                _this._metadata.preview = preview;\n                _this._content = file;\n                resolve();\n              });\n\n              break;\n\n            default:\n              _this._content = file;\n              resolve();\n              break;\n          } // if too big lets store as File and asArray Buffer\n          //  if (file.size > _this.arraybufferSizeLimit) {\n\n          /*  } else {\r\n                let reader = new FileReader();\r\n                reader.onload = function(theFile) {\r\n                  log.log('[FileHypertyResource.init] file loaded ', theFile);\r\n                  _this._content = theFile.target.result;\r\n                resolve();\r\n                }\r\n                reader.readAsArrayBuffer(file);\r\n              }*/\n\n        } else {\n          _this._content = file.content;\n          if (file.preview) _this._metadata.preview = file.preview;\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: \"_getImagePreview\",\n    value: function _getImagePreview(image) {\n      var reader = new FileReader();\n      return new Promise(function (resolve, reject) {\n        ImageTools.resize(image, {\n          width: 100,\n          // maximum width\n          height: 100 // maximum height\n\n        }, function (blob, didItResize) {\n          // didItResize will be true if it managed to resize it, otherwise false (and will return the original file as 'blob')\n          if (didItResize) {\n            reader.readAsDataURL(blob);\n\n            reader.onload = function (theImage) {\n              resolve(theImage.target.result);\n            };\n          } else {\n            FileHypertyResource_log.warn('[FileHypertyResource._getImagePreview] unable to create image preview from original image ');\n            resolve(undefined);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"toMessage\",\n\n    /**\r\n    * Share file as a data object child of a data object parent\r\n    *\r\n    * @param  {string} children Data Object Parent children name where the file is shared\r\n    */\n\n    /*  share(children) {\r\n        let _this = this;\r\n    \r\n        return new Promise(function(resolve, reject) {\r\n          //to be improved and adapted\r\n    \r\n          if (!_this._isSender) return reject('[FileHypertyResource.share] Observers can not share files');\r\n    \r\n          let file2share = _this._metadata;\r\n          file2share.type = _this._type;\r\n    \r\n          _this._parent.addChild(children, file2share).then(function(dataObjectChild) {\r\n            log.log('[FileHypertyResource.share] object child: ', dataObjectChild);\r\n    \r\n            let sharedFile = dataObjectChild.data;\r\n    \r\n            resolve(sharedFile);\r\n    \r\n          }).catch(function(reason) {\r\n            log.error('Reason:', reason);\r\n            reject(reason);\r\n          });\r\n    \r\n        });\r\n    \r\n      }*/\n\n    /**\r\n    * Returns file content optimised to be displayed in a message line\r\n    *\r\n    * @param  {string} children Data Object Parent children name where the file is shared\r\n    */\n    value: function toMessage() {//TODO: to be implemented. It should return HTML with img attribute as a thumbnail plus the name.\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.name;\n    }\n  }, {\n    key: \"preview\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.preview;\n    }\n  }]);\n\n  return FileHypertyResource;\n}(hyperty_resource_HypertyResource);\n\n/* harmony default export */ var hyperty_resource_FileHypertyResource = (FileHypertyResource_FileHypertyResource);\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResourceFactory.js\nfunction HypertyResourceFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction HypertyResourceFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HypertyResourceFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) HypertyResourceFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) HypertyResourceFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\n\n\nvar HypertyResourceFactory_HypertyResourceFactory =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * HypertyResourceFactory constructor\r\n  *\r\n  */\n  function HypertyResourceFactory() {\n    HypertyResourceFactory_classCallCheck(this, HypertyResourceFactory);\n  }\n\n  HypertyResourceFactory_createClass(HypertyResourceFactory, [{\n    key: \"createHypertyResource\",\n    value: function createHypertyResource(isSender, type, metadata) {\n      var newHypertyResource;\n\n      switch (type) {\n        case 'file':\n          newHypertyResource = new hyperty_resource_FileHypertyResource(isSender, metadata);\n          break;\n\n        default:\n          throw new Error('[HypertyResourceFactory.createHypertyResource] not supported type: ', type);\n          break;\n      }\n\n      return newHypertyResource;\n    }\n  }, {\n    key: \"createHypertyResourceWithContent\",\n    value: function createHypertyResourceWithContent(isSender, type, content, metadata) {\n      var newHypertyResource;\n      return new Promise(function (resolve) {\n        switch (type) {\n          case 'file':\n            newHypertyResource = new hyperty_resource_FileHypertyResource(isSender, metadata);\n            break;\n\n          default:\n            reject();\n            break;\n        }\n\n        newHypertyResource.init(content).then(function () {\n          return newHypertyResource.save(); // skip save?\n        }).then(function () {\n          resolve(newHypertyResource);\n        });\n      });\n    }\n  }]);\n\n  return HypertyResourceFactory;\n}();\n\n/* harmony default export */ var hyperty_resource_HypertyResourceFactory = (HypertyResourceFactory_HypertyResourceFactory);\n// CONCATENATED MODULE: ./src/syncher/DataObject.js\nfunction DataObject_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DataObject_typeof = function _typeof(obj) { return typeof obj; }; } else { DataObject_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DataObject_typeof(obj); }\n\nfunction DataObject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObject_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObject_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObject_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar DataObject_log = loglevel[\"getLogger\"]('DataObject');\n\n //import HeartBeat from './HeartBeat';\n\n\n\n/**\r\n * Main extension class for observers and reporters, with common properties and methods.\r\n * Children management is common for observers and reporters.\r\n */\n\nvar DataObject_DataObject =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _version: number\r\n    _owner: HypertyURL\r\n  _url: ObjectURL\r\n  _schema: Schema\r\n  _bus: MiniBus\r\n  _status: on | paused\r\n  _syncObj: SyncData\r\n    _children: { id: DataObjectChild }\r\n  _childrenListener: [MsgListener]\r\n    ----event handlers----\r\n  _onAddChildHandler: (event) => void\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's\r\n   */\n  function DataObject(input) {\n    DataObject_classCallCheck(this, DataObject);\n\n    var _this = this;\n\n    function throwMandatoryParmMissingError(par) {\n      throw '[DataObject] ' + par + ' mandatory parameter is missing';\n    }\n\n    input.syncher ? _this._syncher = input.syncher : throwMandatoryParmMissingError('syncher');\n    input.url ? _this._url = input.url : throwMandatoryParmMissingError('url');\n    input.created ? _this._created = input.created : throwMandatoryParmMissingError('created');\n    input.reporter ? _this._reporter = input.reporter : throwMandatoryParmMissingError('reporter');\n    input.runtime ? _this._runtime = input.runtime : throwMandatoryParmMissingError('runtime');\n    input.schema ? _this._schema = input.schema : throwMandatoryParmMissingError('schema');\n    input.name ? _this._name = input.name : throwMandatoryParmMissingError('name');\n    _this._status = input.status;\n\n    if (input.data) {\n      _this._syncObj = new ProxyObject(input.data);\n    } else {\n      _this._syncObj = new ProxyObject({});\n    }\n\n    _this._childrens = input.childrens; //TODO: For Further Study\n\n    _this._mutual = input.mutual;\n    _this._version = 0;\n    _this._childId = 1;\n    _this._childrenListener; //bus listener for children\n\n    _this._onAddChildrenHandler; //Hyperty side handlers to process child objects created by remote Hyperties\n\n    _this._resumed = input.resume;\n\n    if (input.resume) {\n      _this._version = input.version;\n    }\n\n    _this._owner = input.syncher._owner;\n    _this._bus = input.syncher._bus;\n    if (input.description) _this._description = input.description;\n    if (input.tags) _this._tags = input.tags;\n    if (input.resources) _this._resources = input.resources;\n    if (input.observerStorage) _this._observerStorage = input.observerStorage;\n    if (input.publicObservation) _this._publicObservation = input.publicObservation;\n    _this._metadata = Object.assign(input); //    console.log('[DataObject] mutual ', _this._metadata.mutual);\n\n    if (!input.hasOwnProperty('resume') || input.hasOwnProperty('resume') && !input.resume) {\n      _this._metadata.lastModified = _this._metadata.created;\n    }\n\n    delete _this._metadata.data;\n    delete _this._metadata.syncher;\n    delete _this._metadata.authorise;\n    _this._hypertyResourceFactory = new hyperty_resource_HypertyResourceFactory();\n    _this._childrenObjects = {};\n    _this._sharedChilds = []; //childObjects that were not sent yet to Reporters\n\n    /*    if (input.backup && _this._childrens) {\r\n          let lastHeartbeat = (input.hasOwnProperty('childrenObjects') && input.childrenObjects.hasOwnProperty('heartbeat'))\r\n            ? input.childrenObjects.heartbeat : 0;\r\n          _this._heartBeat = new HeartBeat(_this._bus, _this._owner, _this._syncher._runtimeUrl, this, 15, lastHeartbeat);\r\n          if (_this._resumed) _this._heartBeat.start(true, _this.metadata.isReporter);\r\n          else _this._heartBeat.start(false, _this.metadata.isReporter);\r\n    \r\n        }*/\n  }\n\n  DataObject_createClass(DataObject, [{\n    key: \"_getLastChildId\",\n    value: function _getLastChildId() {\n      var _this = this;\n\n      var childIdInt = 0;\n      var childIdString = _this._owner + '#' + childIdInt;\n      Object.keys(_this._childrens).filter(function (key) {\n        if (_this._childrens[key].childId > childIdString) {\n          childIdString = _this._childrens[key].childId;\n        }\n      });\n      return childIdInt = Number(childIdString.split('#')[1]);\n    }\n  }, {\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      var _this2 = this;\n\n      var _this = this;\n\n      var childBaseURL = _this._url + '/children/';\n      DataObject_log.log('[Data Object - AllocateListeners] - ', _this._childrens);\n\n      if (_this._childrens) {\n        //      _this._childrens.forEach((child) => {\n        var childURL = childBaseURL;\n\n        var listener = _this._bus.addListener(childURL, function (msg) {\n          //ignore msg sent by himself\n          if (msg.from !== _this2._owner) {\n            console.log('DataObject-Children-RCV: ', msg);\n\n            switch (msg.type) {\n              case 'create':\n                _this._onChildCreate(msg);\n\n                break;\n\n              case 'event':\n                _this._onEvent(msg);\n\n                break;\n\n              case 'delete':\n                DataObject_log.log(msg);\n                break;\n\n              default:\n                _this._changeChildren(msg);\n\n                break;\n            }\n          } //        });\n\n\n          _this._childrenListener = listener;\n        });\n      }\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      if (_this._childrenListener) {\n        _this._childrenListener.remove();\n\n        Object.keys(_this._childrenObjects).forEach(function (child) {\n          /*      if (children === 'resources') {\r\n                  Object.keys(_this._childrenObjects[children]).forEach((child) => {\r\n                    _this._childrenObjects[children][child]._releaseListeners();\r\n                  });\r\n                } else {*/\n          _this._childrenObjects[child]._releaseListeners(); //      }\n\n        });\n      }\n    }\n    /**\r\n     * Sync Data Object Observer with last version of Data Object Reporter. Useful for Resumes\r\n     * remove since hyperties can directly use syncher read?\r\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      var _this = this;\n\n      DataObject_log.info('[DataObject.sync] synchronising ');\n      return new Promise(function (resolve, reject) {\n        var criteria = {}; //      if (this.metadata.backupRevision) criteria.backupRevision = this.metadata.backupRevision;\n\n        _this._syncher.read(_this._metadata.url, criteria).then(function (value) {\n          console.log('[DataObject.sync] value to sync: ', value);\n          Object.assign(_this.data, Object(utils[\"i\" /* deepClone */])(value.data));\n          _this._version = value.version;\n          _this._metadata.lastModified = value.lastModified; //TODO: check first if there are new childrenObjects to avoid overhead\n\n          if (value.childrenObjects) {\n            _this.resumeChildrens(value.childrenObjects); //          _this._storeChildrens();\n\n\n            resolve(true);\n          } else resolve(true);\n          /*if (value.version != _this._version) {\r\n            log.info('[DataObject.sync] updating existing data: ', _this.data);\r\n              Object.assign(_this.data || {}, deepClone(value.data));\r\n              _this._metadata = deepClone(value);\r\n              delete _this._metadata.data;\r\n              _this._version = value.version;\r\n            } else {\r\n            log.info('[DataObject.sync] existing data is updated: ', value);\r\n          }*/\n\n        })[\"catch\"](function (reason) {\n          DataObject_log.info('[DataObject.sync] sync failed: ', reason);\n          resolve(false);\n        });\n      });\n    }\n    /**\r\n     *\r\n     */\n\n  }, {\n    key: \"resumeChildrens\",\n    value: function resumeChildrens(childrens) {\n      var _this3 = this;\n\n      var _this = this;\n\n      var childIdString = this._owner.split('/')[3] + '#' + this._childId; //setup childrens data from subscription\n      //    Object.keys(childrens).forEach((childrenResource) => {\n      //      let children = childrens[childrenResource];\n\n\n      var children = childrens; //_this._childrenObjects[childrenResource] = {};\n\n      Object.keys(children).forEach(function (childId) {\n        var newChild = false;\n        /*        if (!_this._childrenObjects.hasOwnProperty(childrenResource))\r\n                  _this._childrenObjects[childrenResource] = {};*/\n        // check if it is the last heartbeat\n\n        if (childId === 'heartbeat') {//          _this._heartBeat.onNewHeartbeat(children[childId].value);\n          //          _this._heartBeat.start(true);\n        } else if (children[childId].hasOwnProperty('value') && children[childId].value.resourceType && !_this._childrenObjects.hasOwnProperty(childId)) {\n          _this._childrenObjects[childId] = _this._resumeHypertyResource(children[childId]);\n          newChild = true;\n        } else if (!_this._childrenObjects.hasOwnProperty(childId)) {\n          _this._childrenObjects[childId] = _this._resumeChild(children[childId]);\n          DataObject_log.log('[DataObject.resumeChildrens] new DataObjectChild: ', _this._childrenObjects[childId]);\n          newChild = true;\n        }\n\n        if (newChild && childId > childIdString) {\n          childIdString = childId;\n          DataObject_log.log('[DataObjectReporter.resumeChildrens] - resuming: ', _this3._childrenObjects[childId]);\n        }\n      }); //    });\n\n      this._childId = Number(childIdString.split('#')[1]);\n    }\n  }, {\n    key: \"_resumeChild\",\n    value: function _resumeChild(input) {\n      var _this = this;\n\n      var childInput = input.value;\n      childInput.parentObject = _this;\n      childInput.parent = _this._url;\n      var child = new syncher_DataObjectChild(childInput);\n      child.identity = input.identity;\n      var event = {\n        type: 'create',\n        from: child.reporter,\n        url: child.parent,\n        value: child.data,\n        childId: child.url,\n        identity: child.identity,\n        child: child\n      };\n\n      if (child.resourceType) {\n        event.resource = child;\n      }\n\n      if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\n      return child;\n    }\n  }, {\n    key: \"_resumeHypertyResource\",\n    value: function _resumeHypertyResource(input) {\n      var _this = this;\n\n      var childInput = input.value;\n      childInput.parentObject = _this;\n      childInput.parent = _this._url;\n\n      var hypertyResource = _this._hypertyResourceFactory.createHypertyResource(false, childInput.resourceType, childInput);\n\n      hypertyResource.identity = input.identity;\n      var event = {\n        type: 'create',\n        from: hypertyResource.reporter,\n        url: hypertyResource.parent,\n        value: hypertyResource.data,\n        childId: hypertyResource.url,\n        identity: hypertyResource.identity,\n        child: hypertyResource\n      };\n\n      if (hypertyResource.resourceType) {\n        event.resource = hypertyResource;\n      }\n\n      if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\n      return hypertyResource;\n    }\n    /**\r\n     * All Metadata about the Data Object\r\n     * @type {Object} -\r\n     */\n\n  }, {\n    key: \"pause\",\n\n    /**\r\n     * @ignore\r\n     */\n    value: function pause() {\n      //TODO: this feature needs more analise\n      throw 'Not implemented';\n    }\n    /**\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      //TODO: this feature needs more analise\n      throw 'Not implemented';\n    }\n    /**\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      //TODO: should remove the subscription and send message unsubscribe?\n      throw 'Not implemented';\n    }\n    /**\r\n     * Create and add a DataObjectChild to a children collection.\r\n     * @param {JSON} initialData - Initial data of the child\r\n     * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n     * @param  {SyncChildMetadata} input - (optional) All additional metadata about the DataObjectChild.\r\n     * @return {Promise<DataObjectChild>} - Return Promise to a new DataObjectChild.\r\n     */\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(initialData, identity, input) {\n      var _this = this;\n\n      var newChild; //returns promise, in the future, the API may change to asynchronous call\n\n      return new Promise(function (resolve) {\n        var msgChildPath = _this._url + '/children/';\n\n        var childInput = _this._getChildInput(input);\n\n        childInput.data = initialData; //      childInput.children = children;\n\n        newChild = new syncher_DataObjectChild(childInput);\n        if (identity) newChild.identity = identity;\n        newChild.share();\n        console.log('[DataObject.addChild] added ', newChild);\n        newChild.onChange(function (event) {\n          _this._onChange(event, {\n            path: msgChildPath,\n            childId: childInput.url\n          });\n        }); //     if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n        _this._childrenObjects[childInput.url] = newChild;\n        resolve(newChild);\n      });\n    }\n  }, {\n    key: \"_deleteChildrens\",\n    value: function _deleteChildrens() {\n      var _this = this;\n\n      var deletePromises = [];\n      return new Promise(function (resolve) {\n        if (_this.childrens) {\n          DataObject_log.log('[DataObject.deleteChildrens]', _this.childrens);\n          var child;\n\n          for (child in _this.childrens) {\n            //          let child;\n\n            /*          if (children === 'resources') {\r\n                        for (child in _this.childrens[children]) {\r\n                          let childObj = _this.childrens[children][child];\r\n                          log.log('[DataObject._deleteChildrens] child',childObj);\r\n                          if (childObj.metadata.hasOwnProperty('resourceType'))\r\n                            deletePromises.push(_this.childrens[children][child].delete());\r\n                        }\r\n                       } else {*/\n            var childObj = _this.childrens[child];\n            DataObject_log.log('[DataObject._deleteChildrens] child', childObj);\n            if (childObj.metadata.hasOwnProperty('resourceType')) deletePromises.push(_this.childrens[child][\"delete\"]());\n          } //        }\n\n\n          DataObject_log.log('[DataObject._deleteChildrens] promises ', deletePromises);\n\n          if (deletePromises.length > 0) {\n            Promise.all(deletePromises).then(function () {\n              resolve('[DataObject._deleteChildrens] done');\n            });\n          } else resolve('[DataObject._deleteChildrens] nothing to delete');\n        }\n      });\n    }\n  }, {\n    key: \"_getChildInput\",\n    value: function _getChildInput(input) {\n      var _this = this;\n\n      var childInput = Object.assign({}, input);\n      _this._childId++; //removing domain from childId to avoid backup issues with '.'\n\n      var start = Math.floor(Date.now());\n      console.log('[DataObject._getChildInput] start ', start);\n      childInput.url = start + '-' + _this._owner.split('/')[3] + '#' + _this._childId;\n      childInput.parentObject = _this;\n      childInput.reporter = _this._owner;\n      childInput.created = new Date().toISOString();\n      childInput.runtime = _this._syncher._runtimeUrl;\n      childInput.p2pHandler = _this._syncher._p2pHandler;\n      childInput.p2pRequester = _this._syncher._p2pRequester;\n      childInput.schema = _this._schema;\n      childInput.parent = _this.url;\n      childInput.mutual = _this.metadata.mutual; //    console.log('[DataObject._getChildInput] mutual ', childInput.mutual);\n\n      return childInput;\n    }\n  }, {\n    key: \"addHypertyResource\",\n    value: function addHypertyResource(type, resource, identity, input) {\n      var _this = this; //returns promise, in the future, the API may change to asynchronous call\n\n\n      return new Promise(function (resolve) {\n        var hypertyResource;\n        var msgChildPath = _this._url + '/children/';\n\n        var childInput = _this._getChildInput(input); //      childInput.children = children;\n\n\n        _this._hypertyResourceFactory.createHypertyResourceWithContent(true, type, resource, childInput).then(function (resource) {\n          hypertyResource = resource;\n          if (identity) hypertyResource.identity = identity;\n          hypertyResource.share();\n          DataObject_log.log('[DataObject.addHypertyResource] added ', hypertyResource);\n          hypertyResource.onChange(function (event) {\n            _this._onChange(event, {\n              path: msgChildPath,\n              childId: hypertyResource.childId\n            });\n          }); //        if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n          _this._childrenObjects[hypertyResource.childId] = hypertyResource;\n          resolve(hypertyResource);\n        });\n      });\n    }\n    /**\r\n     * Setup the callback to process create and delete of childrens.\r\n     * @param {function(event: MsgEvent)} callback\r\n     * TODO: add childrenId to support different handlers per children\r\n     */\n\n  }, {\n    key: \"onAddChild\",\n    value: function onAddChild(callback) {\n      this._onAddChildrenHandler = callback;\n    }\n    /**\r\n     * Setup the callback to process events from Data Objects.\r\n     * @param {function(event: DataObjectEvent)} callback\r\n     */\n\n  }, {\n    key: \"onEvent\",\n    value: function onEvent(callback) {\n      this._onEventHandler = callback;\n    }\n    /**\r\n     * Send Data Object Events.\r\n     * @param {function(event: DataObjectEvent)} callback\r\n     */\n\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event) {\n      var msgEvent = {\n        from: this._owner,\n        to: this._url + '/children/',\n        type: 'event',\n        body: {\n          value: event\n        }\n      };\n\n      this._bus.postMessage(msgEvent);\n    } //FLOW-IN: event received from a remote DataObject\n\n  }, {\n    key: \"_onEvent\",\n    value: function _onEvent(msg) {\n      var _this = this;\n\n      var event = {\n        from: msg.from,\n        value: msg.body.value,\n        identity: msg.body.identity\n      };\n      if (_this._onEventHandler) _this._onEventHandler(event);\n    } //FLOW-IN: message received from a remote DataObject -> addChild\n\n  }, {\n    key: \"_onChildCreate\",\n    value: function _onChildCreate(msg) {\n      var _this = this; //    console.log('[DataObject._onChildCreate] receivedBy ' + _this._owner + ' : ', msg);\n      // if this is an heartbeat msg foward it to heatbeat handler\n\n\n      if (msg.body.resource === 'heartbeat') {//      console.log('[DataObject._onChildCreate] new heartbeat received ' + msg.body.value);\n        //      this._heartBeat.onNewHeartbeat(msg.body.value);\n      } else {\n        console.log('[DataObject._onChildCreate] new child receivedBy ' + _this._owner + ' : ', msg);\n        var response = {\n          from: msg.to,\n          to: msg.from,\n          type: 'response',\n          id: msg.id,\n          body: {\n            code: 100\n          }\n        };\n\n        _this._bus.postMessage(response);\n\n        if (msg.body.value.resourceType) {\n          _this._onHypertyResourceAdded(msg);\n        } else _this._onChildAdded(msg);\n      }\n    }\n  }, {\n    key: \"_onChildAdded\",\n    value: function _onChildAdded(msg) {\n      var _this = this;\n\n      var childInput = Object(utils[\"i\" /* deepClone */])(msg.body.value);\n      childInput.parentObject = _this; //    let children = childInput.children;\n\n      var newChild = new syncher_DataObjectChild(childInput);\n      newChild.identity = msg.body.identity; //    if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n      _this._childrenObjects[childInput.url] = newChild;\n      if (msg.to === _this.metadata.url) newChild.store();\n\n      _this._hypertyEvt(msg, newChild);\n    }\n  }, {\n    key: \"_onHypertyResourceAdded\",\n    value: function _onHypertyResourceAdded(msg) {\n      var _this = this;\n\n      var input = msg.body.value;\n      var hypertyResource; //    let children = input.children;\n\n      input.parentObject = _this;\n      hypertyResource = _this._hypertyResourceFactory.createHypertyResource(false, input.resourceType, input);\n      hypertyResource.identity = msg.body.identity; //    if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n      _this._childrenObjects[hypertyResource.childId] = hypertyResource;\n\n      _this._hypertyEvt(msg, hypertyResource); // locally store messages that are directly sent to the hyperty\n      // ie to sync with messages sent when offline\n\n\n      if (msg.to === _this.metadata.url) hypertyResource.store();\n    }\n  }, {\n    key: \"_hypertyEvt\",\n    value: function _hypertyEvt(msg, child) {\n      var _this = this;\n\n      var event = {\n        type: msg.type,\n        from: msg.from,\n        url: msg.to,\n        value: child.data,\n        childId: child.url,\n        identity: msg.body.identity,\n        child: child\n      };\n\n      if (child.resourceType) {\n        event.resource = child;\n      }\n\n      if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\n    } //send delta messages to subscriptions\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(event, childInfo) {\n      var _this = this;\n\n      _this._metadata.lastModified = new Date().toISOString();\n      _this._version++;\n\n      if (_this._status === 'live') {\n        //FLOW-OUT: this message will be sent directly to a resource changes address: MessageBus\n        var changeMsg = {\n          type: 'update',\n          from: _this._url,\n          to: _this._url + '/changes',\n          body: {\n            version: _this._version,\n            source: _this._owner,\n            attribute: event.field,\n            lastModified: _this._metadata.lastModified\n          }\n        };\n        DataObject_log.log('[DataObject - _onChange] - ', event, childInfo, changeMsg);\n\n        if (event.oType === ObjectType.OBJECT) {\n          if (event.cType !== ChangeType.REMOVE) {\n            changeMsg.body.value = Object(utils[\"i\" /* deepClone */])(event.data);\n          }\n        } else {\n          changeMsg.body.attributeType = event.oType;\n          changeMsg.body.value = event.data;\n\n          if (event.cType !== ChangeType.UPDATE) {\n            changeMsg.body.operation = event.cType;\n          }\n        } //childInfo must have (path, childId)\n\n\n        if (childInfo) {\n          changeMsg.to = childInfo.path;\n          changeMsg.body.resource = childInfo.childId;\n        } //TODO: For Further Study\n\n\n        if (!_this.data._mutual) changeMsg.body.mutual = _this._mutual;\n\n        _this._bus.postMessage(changeMsg);\n      }\n    } //FLOW-IN: delta message received from a remote DataObjectReporter or DataObjectChild when changing data\n\n  }, {\n    key: \"_changeObject\",\n    value: function _changeObject(syncObj, msg) {\n      var _this = this; //TODO: update version ?\n      //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?\n      //will we need to confirm the reception ?\n\n\n      if (_this._version + 1 <= msg.body.version) {\n        _this._version = msg.body.version;\n        var path = msg.body.attribute;\n        var value;\n        if (DataObject_typeof(msg.body.value) === 'object') value = Object(utils[\"i\" /* deepClone */])(msg.body.value);else value = msg.body.value;\n        var findResult = syncObj.findBefore(path);\n\n        if (msg.body.lastModified) {\n          _this._metadata.lastModified = msg.body.lastModified;\n        } else {\n          _this._metadata.lastModified = new Date().toISOString();\n        }\n\n        if (msg.body.attributeType === ObjectType.ARRAY) {\n          if (msg.body.operation === ChangeType.ADD) {\n            var arr = findResult.obj;\n            var index = findResult.last;\n            Array.prototype.splice.apply(arr, [index, 0].concat(value));\n          } else if (msg.body.operation === ChangeType.REMOVE) {\n            var _arr = findResult.obj;\n            var _index = findResult.last;\n\n            _arr.splice(_index, value);\n          } else {\n            findResult.obj[findResult.last] = value; // UPDATE\n          }\n        } else {\n          if (msg.body.hasOwnProperty('value')) {\n            findResult.obj[findResult.last] = value; // UPDATE or ADD\n          } else {\n            delete findResult.obj[findResult.last]; // REMOVE\n          }\n        }\n      } else {\n        //TODO: how to handle unsynchronized versions?\n        DataObject_log.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');\n      }\n    } //FLOW-IN: message received from a remote DataObjectChild when changing data\n\n  }, {\n    key: \"_changeChildren\",\n    value: function _changeChildren(msg) {\n      var _this = this;\n\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(msg.to);\n      var identity = dividedURL.identity; //    const resource = identity ? identity.substring(identity.lastIndexOf('/') + 1) : undefined;\n\n      var childId = msg.body.resource;\n      var children = _this._childrenObjects[childId];\n      DataObject_log.log('Change children: ', _this._owner, msg, resource);\n\n      if (children) {\n        _this._changeObject(children._syncObj, msg);\n      } else {\n        DataObject_log.warn('No children found for: ', childId);\n      }\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n    /**\r\n     * Object URL of reporter or observer\r\n     * @type {ObjectURL}\r\n     */\n\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._url;\n    }\n    /**\r\n     * Object schema URL (this field is not yet stable, and is subsject to change)\r\n     * @type {SchemaURL}\r\n     */\n\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._schema;\n    }\n    /**\r\n     * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)\r\n     * @type {Status} - Enum of: on | paused\r\n     */\n\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this._status;\n    }\n    /**\r\n     * Data structure to be synchronized.\r\n     * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._syncObj.data;\n    }\n    /**\r\n     * All created children's since the subscription, doesn't contain all children's since reporter creation.\r\n     * @type {Object<ChildId, DataObjectChild>}\r\n     */\n\n  }, {\n    key: \"childrens\",\n    get: function get() {\n      return this._childrenObjects;\n    }\n  }]);\n\n  return DataObject;\n}();\n\n/* harmony default export */ var syncher_DataObject = (DataObject_DataObject);\n// CONCATENATED MODULE: ./src/syncher/DataObjectReporter.js\nfunction DataObjectReporter_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DataObjectReporter_typeof = function _typeof(obj) { return typeof obj; }; } else { DataObjectReporter_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DataObjectReporter_typeof(obj); }\n\nfunction DataObjectReporter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObjectReporter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObjectReporter_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObjectReporter_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObjectReporter_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction DataObjectReporter_possibleConstructorReturn(self, call) { if (call && (DataObjectReporter_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return DataObjectReporter_assertThisInitialized(self); }\n\nfunction DataObjectReporter_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction DataObjectReporter_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { DataObjectReporter_get = Reflect.get; } else { DataObjectReporter_get = function _get(target, property, receiver) { var base = DataObjectReporter_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return DataObjectReporter_get(target, property, receiver || target); }\n\nfunction DataObjectReporter_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = DataObjectReporter_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction DataObjectReporter_getPrototypeOf(o) { DataObjectReporter_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return DataObjectReporter_getPrototypeOf(o); }\n\nfunction DataObjectReporter_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) DataObjectReporter_setPrototypeOf(subClass, superClass); }\n\nfunction DataObjectReporter_setPrototypeOf(o, p) { DataObjectReporter_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return DataObjectReporter_setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar DataObjectReporter_log = loglevel[\"getLogger\"]('DataObjectReporter');\n\n\n/**\r\n * The class returned from the Syncher create call.\r\n * To be used as a reporter point, changes will be submited to DataObjectObserver instances.\r\n */\n\nvar DataObjectReporter_DataObjectReporter =\n/*#__PURE__*/\nfunction (_DataObject) {\n  DataObjectReporter_inherits(DataObjectReporter, _DataObject);\n\n  /* private\r\n  _subscriptions: <hypertyUrl: { status: string } }>\r\n    ----event handlers----\r\n  _onSubscriptionHandler: (event) => void\r\n  _onResponseHandler: (event) => void\r\n  _onReadHandler: (event) => void\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher.create method\r\n   */\n  //constructor(syncher, url, created, reporter, runtime, schema, name, initialStatus, initialData, childrens, mutual = true, resumed = false, description, tags, resources, observerStorage, publicObservation) {\n  function DataObjectReporter(input) {\n    var _this2;\n\n    DataObjectReporter_classCallCheck(this, DataObjectReporter);\n\n    _this2 = DataObjectReporter_possibleConstructorReturn(this, DataObjectReporter_getPrototypeOf(DataObjectReporter).call(this, input));\n\n    var _this = DataObjectReporter_assertThisInitialized(_this2);\n\n    _this._subscriptions = {};\n\n    _this._syncObj.observe(function (event) {\n      DataObjectReporter_log.log('[Syncher.DataObjectReporter] ' + _this.url + ' publish change: ', event);\n\n      _this._onChange(event);\n    });\n\n    _this._allocateListeners();\n\n    _this.invitations = []; // array of promises with pending invitations\n\n    _this._childrenSizeThreshold = 50000; // to be used when replying to sync requests to ensure each response msg is not too large\n\n    return _this2;\n  }\n\n  DataObjectReporter_createClass(DataObjectReporter, [{\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      DataObjectReporter_get(DataObjectReporter_getPrototypeOf(DataObjectReporter.prototype), \"_allocateListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._objectListener = _this._bus.addListener(_this._url, function (msg) {\n        DataObjectReporter_log.log('[Syncher.DataObjectReporter] listener ' + _this._url + ' Received: ', msg);\n\n        switch (msg.type) {\n          case 'response':\n            _this._onResponse(msg);\n\n            break;\n\n          case 'read':\n            _this._onRead(msg);\n\n            break;\n\n          case 'execute':\n            _this._onExecute(msg);\n\n            break;\n\n          case 'create':\n            _this._onChildCreate(msg);\n\n            break;\n          // to create child objects that were sent whenn offline\n        }\n      });\n      _this._runtimeStatusListener = _this._bus.addListener(_this._syncher._runtimeUrl + '/status', function (evt) {\n        console.log('[Syncher.DataObjectReporter] runtime status event received ' + evt);\n        /*      if (evt.body && evt.body.resource && evt.body.resource === _this._url && \r\n                evt.body.value && evt.body.value.backupRevision ) {\r\n                  // broadcast backupRevision update\r\n        \r\n                  _this.data.backupRevision = evt.body.value.backupRevision;\r\n                  console.log('[Syncher.DataObjectReporter] DO updated with backup revision ' + _this.data.backupRevision);\r\n                }*/\n      });\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      DataObjectReporter_get(DataObjectReporter_getPrototypeOf(DataObjectReporter.prototype), \"_releaseListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._objectListener.remove();\n    }\n    /**\r\n     * Send invitations (create messages) to hyperties, observers list.\r\n     * @param  {HypertyURL[]} observers List of Hyperty URL's\r\n     */\n\n  }, {\n    key: \"inviteObservers\",\n    value: function inviteObservers(observers, p2p) {\n      var _this = this; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\n      // TODO: remove value and add resources? should similar to 1st create\n\n\n      var toInvite = observers; // let invitePromises = [];\n\n      /*  observers.forEach((observer)=> {\r\n        if (!_this.invitations[observer]) {\r\n          toInvite.push(observer);\r\n          _this.invitations[observer] = observer;\r\n        }\r\n      });*/\n\n      if (toInvite.length > 0) {\n        DataObjectReporter_log.log('[Syncher.DataObjectReporter] InviteObservers ', toInvite, _this._metadata);\n        toInvite.forEach(function (observer) {\n          var invitation = new Promise(function (resolve, reject) {\n            var inviteMsg = {\n              type: 'create',\n              from: _this._syncher._owner,\n              to: _this._syncher._subURL,\n              body: {\n                resume: false,\n                resource: _this._url,\n                schema: _this._schema,\n                value: _this._metadata,\n                authorise: [observer]\n              }\n            };\n            if (p2p) inviteMsg.body.p2p = p2p;\n            if (!_this.data.mutual) inviteMsg.body.mutual = _this.data.mutual;\n\n            _this._bus.postMessage(inviteMsg, function (reply) {\n              DataObjectReporter_log.log('[Syncher.DataObjectReporter] Invitation reply ', reply);\n              var result = {\n                invited: observer,\n                code: reply.body && reply.body.code ? reply.body.code : 500,\n                desc: reply.body && reply.body.desc ? reply.body.desc : 'Unknown'\n              };\n              if (result.code < 300) resolve(result);\n              /*            else if (result.code >= 300) {\r\n                            if (_this.metadata.offline) {\r\n                              resolve(_this._processOfflineInvitation(inviteMsg));\r\n                            }*/\n              else reject(result); //            } \n            });\n          });\n\n          _this.invitations.push(invitation);\n        }); //      return(invitePromises);\n      }\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      if (_this._heartBeat) _this._heartBeat.stop();\n\n      _this._deleteChildrens().then(function (result) {\n        DataObjectReporter_log.log(result); //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onDelete\n\n        var deleteMsg = {\n          type: 'delete',\n          from: _this._owner,\n          to: _this._syncher._subURL,\n          body: {\n            resource: _this._url\n          }\n        };\n\n        _this._bus.postMessage(deleteMsg, function (reply) {\n          DataObjectReporter_log.log('DataObjectReporter-DELETE: ', reply);\n\n          if (reply.body.code === 200) {\n            _this._releaseListeners();\n\n            delete _this._syncher._reporters[_this._url]; //_this._syncObj.unobserve();\n\n            _this._syncObj = {};\n          }\n        });\n      });\n    }\n    /**\r\n     * Subscriptions requested and accepted to this reporter\r\n     * @type {Object<HypertyURL, SyncSubscription>}\r\n     */\n\n  }, {\n    key: \"onSubscription\",\n\n    /**\r\n     * Setup the callback to process subscribe and unsubscribe notifications\r\n     * @param {function(event: MsgEvent)} callback function to receive events\r\n     */\n    value: function onSubscription(callback) {\n      this._onSubscriptionHandler = callback;\n    }\n    /**\r\n     * Setup the callback to process response notifications of the create's\r\n     * @param {function(event: MsgEvent)} callback function to receive events\r\n     */\n\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      this._onResponseHandler = callback;\n    }\n    /**\r\n     * Setup the callback to process read notifications\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onRead\",\n    value: function onRead(callback) {\n      this._onReadHandler = callback;\n    }\n    /**\r\n     * Setup the callback to process execute notifications\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onExecute\",\n    value: function onExecute(callback) {\n      this._onExecuteHandler = callback;\n    } //FLOW-IN: message received from parent Syncher -> _onForward\n\n  }, {\n    key: \"_onForward\",\n    value: function _onForward(msg) {\n      var _this = this;\n\n      DataObjectReporter_log.log('DataObjectReporter-RCV: ', msg);\n\n      switch (msg.body.type) {\n        case 'subscribe':\n          _this._onSubscribe(msg);\n\n          break;\n\n        case 'unsubscribe':\n          _this._onUnSubscribe(msg);\n\n          break;\n      }\n    } //FLOW-IN: message received from this -> _onForward: emitted by a remote Syncher -> subscribe\n\n  }, {\n    key: \"_onSubscribe\",\n    value: function _onSubscribe(msg) {\n      var _this = this;\n\n      var hypertyUrl = msg.body.from;\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(hypertyUrl);\n      var domain = dividedURL.domain;\n      var mutual = true;\n      if (msg.body.hasOwnProperty('mutual') && !msg.body.mutual) mutual = false;\n      console.log('[DataObjectReporter._onSubscribe]', msg, domain, dividedURL);\n      var event = {\n        type: msg.body.type,\n        url: hypertyUrl,\n        domain: domain,\n        identity: msg.body.identity,\n        nutual: mutual,\n        accept: function accept() {\n          //create new subscription\n          var sub = {\n            url: hypertyUrl,\n            status: 'live'\n          };\n          _this._subscriptions[hypertyUrl] = sub;\n\n          if (_this.metadata.subscriptions) {\n            _this.metadata.subscriptions.push(sub.url);\n          }\n\n          var msgValue = Object(utils[\"i\" /* deepClone */])(_this._metadata);\n          msgValue.data = Object(utils[\"i\" /* deepClone */])(_this.data);\n          msgValue.version = _this._version; //process and send childrens data\n          // let childrenValues = {};\n          //\n          // if (_this._childrenObjects) {\n          //   Object.keys(_this._childrenObjects).forEach((childrenId) => {\n          //     let childrenData = _this._childrenObjects[childrenId];\n          //     childrenValues[childrenId] = deepClone(childrenData);\n          //   });\n          //   msgValue.childrenObjects = childrenValues;\n          // }\n\n          var sendMsg = {\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 200,\n              schema: _this._schema,\n              value: msgValue\n            }\n          }; //TODO: For Further Study\n\n          if (msg.body.hasOwnProperty('mutual') && !msg.body.mutual) {\n            sendMsg.body.mutual = msg.body.mutual; // TODO: remove?\n\n            _this.data.mutual = false;\n          }\n\n          if (_this._heartBeat) {\n            sendMsg.body.value.childrenObjects = {};\n            sendMsg.body.value.childrenObjects.heartbeat = _this._heartBeat.heartbeat;\n          }\n\n          console.log('[DataObjectReporter._onSubscribe.accept] sending response: ', sendMsg); //send ok response message\n\n          _this._bus.postMessage(sendMsg);\n\n          return sub;\n        },\n        reject: function reject(reason) {\n          //send reject response message\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 403,\n              desc: reason\n            }\n          });\n        }\n      };\n\n      if (_this._onSubscriptionHandler) {\n        DataObjectReporter_log.log('SUBSCRIPTION-EVENT: ', event);\n\n        _this._onSubscriptionHandler(event);\n      }\n    } //FLOW-IN: message received from this -> _onForward: emitted by a remote DataObjectObserver -> unsubscribe\n\n  }, {\n    key: \"_onUnSubscribe\",\n    value: function _onUnSubscribe(msg) {\n      var _this = this;\n\n      var hypertyUrl = msg.body.from;\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(hypertyUrl);\n      var domain = dividedURL.domain;\n      DataObjectReporter_log.log('[DataObjectReporter._onUnSubscribe]', msg, domain, dividedURL); //let sub = _this._subscriptions[hypertyUrl];\n\n      delete _this._subscriptions[hypertyUrl];\n      delete _this.invitations[hypertyUrl];\n      var event = {\n        type: msg.body.type,\n        url: hypertyUrl,\n        domain: domain,\n        identity: msg.body.identity\n      }; // TODO: check if the _onSubscriptionHandler it is the same of the subscriptions???\n\n      if (_this._onSubscriptionHandler) {\n        DataObjectReporter_log.log('UN-SUBSCRIPTION-EVENT: ', event);\n\n        _this._onSubscriptionHandler(event);\n      }\n    } //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> _onRemoteCreate -> event.ack\n\n  }, {\n    key: \"_onResponse\",\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      var event = {\n        type: msg.type,\n        url: msg.from,\n        code: msg.body.code\n      };\n\n      if (_this._onResponseHandler) {\n        DataObjectReporter_log.log('RESPONSE-EVENT: ', event);\n\n        _this._onResponseHandler(event);\n      }\n    } //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> read\n\n  }, {\n    key: \"_onRead\",\n    value: function _onRead(msg) {\n      var _this = this;\n\n      var childrensSize = JSON.stringify(_this.childrensJSON).length;\n      var largeObject = childrensSize > _this._childrenSizeThreshold ? true : false;\n      var event = {\n        type: msg.type,\n        url: msg.from,\n        accept: function accept() {\n          if (largeObject) _this._syncReplyForLargeData(msg);else _this._syncReply(msg);\n        },\n        reject: function reject(reason) {\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 401,\n              desc: reason\n            }\n          });\n        }\n      }; // if the requester is an authorised observer, the data object is responded otherwise an event is triggered\n\n      var subscriptions = [];\n\n      if (_this.metadata.subscriptions) {\n        subscriptions = _this.metadata.subscriptions;\n      } else if (_this._subscriptions) {\n        subscriptions = Object.keys(_this._subscriptions).map(function (key) {\n          return _this._subscriptions[key].url;\n        });\n      }\n\n      if (subscriptions.indexOf(msg.from) != -1) {\n        if (largeObject) _this._syncReplyForLargeData(msg);else _this._syncReply(msg);\n      } else if (_this._onReadHandler) {\n        DataObjectReporter_log.log('READ-EVENT: ', event);\n\n        _this._onReadHandler(event);\n      }\n    }\n  }, {\n    key: \"_syncReply\",\n    value: function _syncReply(msg) {\n      var _this = this;\n\n      var objectValue = Object(utils[\"i\" /* deepClone */])(_this.metadata);\n      objectValue.data = Object(utils[\"i\" /* deepClone */])(_this.data);\n      objectValue.childrenObjects = Object(utils[\"i\" /* deepClone */])(_this.childrensJSON);\n      objectValue.version = _this._version;\n      var response = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 200,\n          value: objectValue\n        }\n      };\n\n      _this._bus.postMessage(response);\n    } // This function is only used if the data object to be synched has childrenOjects too large\n\n  }, {\n    key: \"_syncReplyForLargeData\",\n    value: function _syncReplyForLargeData(msg) {\n      //set attribute with number of spllited messages\n      var _this = this; // lets set the initial message with no childObjects\n\n\n      var objectValue = Object(utils[\"i\" /* deepClone */])(_this.metadata);\n      objectValue.data = Object(utils[\"i\" /* deepClone */])(_this.data);\n      objectValue.version = _this._version;\n      delete objectValue.childrenObjects;\n      var children;\n      var values = []; // array of values to be sent in separated responses\n\n      var childrenValue = {}; // value to be used in each response\n\n      for (child in _this._childrenObjects) {\n        //      let child;\n        childrenValue[child] = {}; //      for (child in _this._childrenObjects[children]) {\n\n        if (JSON.stringify(childrenValue).length > _this._childrenSizeThreshold) {\n          //childrenValue big enough to be sent in a response message\n          values.push(childrenValue); //          childrenValue = {};\n          //          childrenValue[child] = {};\n        }\n\n        childrenValue[child] = {};\n        childrenValue[child].value = _this._childrenObjects[child].metadata;\n        childrenValue[child].identity = _this._childrenObjects[child].identity; //      }\n      }\n\n      values.push(childrenValue);\n      objectValue.responses = values.length + 1; //number of responses to be sent\n\n      var initialResponse = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 100,\n          value: objectValue\n        }\n      };\n\n      _this._bus.postMessage(initialResponse);\n\n      values.forEach(function (value) {\n        var response = Object(utils[\"i\" /* deepClone */])(initialResponse);\n        response.body.value = value;\n        response.body.value.responses = objectValue.responses;\n        setTimeout(function () {\n          _this._bus.postMessage(response);\n        }, 50); // should put a timeout?\n      });\n    } // Execute request received\n\n  }, {\n    key: \"_onExecute\",\n    value: function _onExecute(msg) {\n      var _this = this;\n\n      if (!msg.body.method) throw '[DataObjectReporter._onExecute] method missing ', msg;\n      var response = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 200\n        }\n      };\n      var event = {\n        type: msg.type,\n        url: msg.from,\n        method: msg.body.method,\n        params: msg.body.params,\n        accept: function accept() {\n          _this._bus.postMessage(response);\n        },\n        reject: function reject(reason) {\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 401,\n              desc: reason\n            }\n          });\n        }\n      };\n\n      if (_this._onExecuteHandler) {\n        DataObjectReporter_log.log('[DataObjectReporter] EXECUTE-EVENT: ', event);\n\n        _this._onExecuteHandler(event);\n      }\n    }\n  }, {\n    key: \"subscriptions\",\n    get: function get() {\n      return this._subscriptions;\n    }\n  }, {\n    key: \"childrensJSON\",\n    get: function get() {\n      var _this = this;\n\n      var childrens = {}; //    let children;\n      //    for (children in _this._childrenObjects) {\n\n      var child; //      childrens[children] = {};\n\n      for (child in _this._childrenObjects) {\n        childrens[child] = {};\n        childrens[child].value = _this._childrenObjects[child].metadata;\n        childrens[child].identity = _this._childrenObjects[child].identity;\n      } //    }\n\n\n      return childrens;\n    }\n  }]);\n\n  return DataObjectReporter;\n}(syncher_DataObject\n/* implements SyncStatus */\n);\n\n/* harmony default export */ var syncher_DataObjectReporter = (DataObjectReporter_DataObjectReporter);\n// CONCATENATED MODULE: ./src/syncher/DataObjectObserver.js\nfunction DataObjectObserver_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DataObjectObserver_typeof = function _typeof(obj) { return typeof obj; }; } else { DataObjectObserver_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DataObjectObserver_typeof(obj); }\n\nfunction DataObjectObserver_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObjectObserver_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObjectObserver_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObjectObserver_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObjectObserver_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction DataObjectObserver_possibleConstructorReturn(self, call) { if (call && (DataObjectObserver_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return DataObjectObserver_assertThisInitialized(self); }\n\nfunction DataObjectObserver_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction DataObjectObserver_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { DataObjectObserver_get = Reflect.get; } else { DataObjectObserver_get = function _get(target, property, receiver) { var base = DataObjectObserver_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return DataObjectObserver_get(target, property, receiver || target); }\n\nfunction DataObjectObserver_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = DataObjectObserver_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction DataObjectObserver_getPrototypeOf(o) { DataObjectObserver_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return DataObjectObserver_getPrototypeOf(o); }\n\nfunction DataObjectObserver_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) DataObjectObserver_setPrototypeOf(subClass, superClass); }\n\nfunction DataObjectObserver_setPrototypeOf(o, p) { DataObjectObserver_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return DataObjectObserver_setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar DataObjectObserver_log = loglevel[\"getLogger\"]('DataObjectObserver');\n\n\nvar FilterType = {\n  ANY: 'any',\n  START: 'start',\n  EXACT: 'exact'\n};\n/**\r\n * The class returned from the Syncher subscribe call.\r\n * To be used as an observation point from a DataObjectReporter change.\r\n */\n\nvar DataObjectObserver_DataObjectObserver =\n/*#__PURE__*/\nfunction (_DataObject) {\n  DataObjectObserver_inherits(DataObjectObserver, _DataObject);\n\n  /* private\r\n  _changeListener: MsgListener\r\n    ----event handlers----\r\n  _filters: {<filter>: {type: <start, exact>, callback: <function>} }\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher.subscribe method\r\n   */\n  //TODO: For Further Study\n  function DataObjectObserver(input) {\n    var _this2;\n\n    DataObjectObserver_classCallCheck(this, DataObjectObserver);\n\n    //todo: check why\n    //input.initialData = input.initialData.data;\n    _this2 = DataObjectObserver_possibleConstructorReturn(this, DataObjectObserver_getPrototypeOf(DataObjectObserver).call(this, input));\n\n    var _this = DataObjectObserver_assertThisInitialized(_this2);\n\n    _this._version = input.version;\n    _this._filters = {};\n\n    _this._syncObj.observe(function (event) {\n      _this._onFilter(event);\n    });\n\n    _this._allocateListeners();\n\n    return _this2;\n  }\n  /**\r\n   * Sync Data Object Observer with last version of Data Object Reporter. Useful for Resumes\r\n   */\n\n\n  DataObjectObserver_createClass(DataObjectObserver, [{\n    key: \"sync\",\n    value: function sync() {\n      var _this = this;\n\n      DataObjectObserver_log.info('[DataObjectObserver_sync] synchronising ');\n      return new Promise(function (resolve, reject) {\n        var criteria = {}; //      if (this.metadata.backupRevision) criteria.backupRevision = this.metadata.backupRevision;\n\n        _this._syncher.read(_this._metadata.url, criteria).then(function (value) {\n          DataObjectObserver_log.info('[DataObjectObserver_sync] value to sync: ', value);\n          Object.assign(_this.data, Object(utils[\"i\" /* deepClone */])(value.data));\n          _this._version = value.version;\n          _this._metadata.lastModified = value.lastModified; //TODO: check first if there are new childrenObjects to avoid overhead\n\n          if (value.childrenObjects) {\n            _this.resumeChildrens(value.childrenObjects);\n\n            _this._storeChildrens();\n\n            resolve(true);\n          } else resolve(true);\n          /*if (value.version != _this._version) {\r\n            log.info('[DataObjectObserver_sync] updating existing data: ', _this.data);\r\n              Object.assign(_this.data || {}, deepClone(value.data));\r\n              _this._metadata = deepClone(value);\r\n              delete _this._metadata.data;\r\n              _this._version = value.version;\r\n            } else {\r\n            log.info('[DataObjectObserver_sync] existing data is updated: ', value);\r\n          }*/\n\n        })[\"catch\"](function (reason) {\n          DataObjectObserver_log.info('[DataObjectObserver_sync] sync failed: ', reason);\n          resolve(false);\n        });\n      });\n    }\n  }, {\n    key: \"_storeChildrens\",\n    value: function _storeChildrens() {\n      var _this = this;\n\n      var childrens = {}; //TODO: to be sent to HypertyResourceStorage when ready to handle Chat Messages\n\n      Object.keys(_this._childrenObjects).forEach(function (childId) {\n        var children = _this._childrenObjects; //      childrens[childrenResource] = {};\n        //      Object.keys(children).forEach((childId) => {\n\n        childrens[childId] = {};\n        childrens[childId].value = children[childId].metadata;\n        childrens[childId].identity = children[childId].identity; //      });\n      });\n      var msg = {\n        from: _this._owner,\n        to: _this._syncher._subURL,\n        type: 'create',\n        body: {\n          resource: _this._url,\n          attribute: 'childrenObjects',\n          value: childrens\n        }\n      };\n\n      _this._bus.postMessage(msg);\n    }\n  }, {\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      DataObjectObserver_get(DataObjectObserver_getPrototypeOf(DataObjectObserver.prototype), \"_allocateListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._changeListener = _this._bus.addListener(_this._url + '/changes', function (msg) {\n        if (msg.type === 'update') {\n          DataObjectObserver_log.log('DataObjectObserver-' + _this._url + '-RCV: ', msg);\n\n          _this._changeObject(_this._syncObj, msg);\n        }\n      });\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      DataObjectObserver_get(DataObjectObserver_getPrototypeOf(DataObjectObserver.prototype), \"_releaseListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._changeListener.remove();\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      if (_this._heartBeat) _this._heartBeat.stop();\n\n      _this._deleteChildrens().then(function () {\n        _this.unsubscribe();\n\n        _this._releaseListeners();\n\n        delete _this._syncher._observers[_this._url];\n      });\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this = this; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalUnSubscribe\n\n\n      var unSubscribeMsg = {\n        type: 'unsubscribe',\n        from: _this._owner,\n        to: _this._syncher._subURL,\n        body: {\n          resource: _this._url\n        }\n      };\n\n      _this._bus.postMessage(unSubscribeMsg, function (reply) {\n        DataObjectObserver_log.log('DataObjectObserver-UNSUBSCRIBE: ', reply);\n\n        if (reply.body.code === 200) {\n          _this._releaseListeners();\n\n          delete _this._syncher._observers[_this._url];\n        }\n      });\n    }\n    /**\r\n     * Register the change listeners sent by the reporter\r\n     * @param {string} filter - Filter that identifies the field (separated dot path). Accepts * at the end for a more unrestricted filtering.\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(filter, callback) {\n      var key = filter;\n      var filterObj = {\n        type: FilterType.EXACT,\n        callback: callback\n      };\n      var idx = filter.indexOf('*');\n\n      if (idx === filter.length - 1) {\n        if (idx === 0) {\n          filterObj.type = FilterType.ANY;\n        } else {\n          filterObj.type = FilterType.START;\n          key = filter.substr(0, filter.length - 1);\n        }\n      }\n\n      this._filters[key] = filterObj;\n    }\n  }, {\n    key: \"_onFilter\",\n    value: function _onFilter(event) {\n      var _this = this;\n\n      Object.keys(_this._filters).forEach(function (key) {\n        var filter = _this._filters[key];\n\n        if (filter.type === FilterType.ANY) {\n          //match anything\n          filter.callback(event);\n        } else if (filter.type === FilterType.START) {\n          //if starts with filter...\n          if (event.field.indexOf(key) === 0) {\n            filter.callback(event);\n          }\n        } else if (filter.type === FilterType.EXACT) {\n          //exact match\n          if (event.field === key) {\n            filter.callback(event);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"onDisconnected\",\n    value: function onDisconnected(callback) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3._subscribeRegistration().then(function () {\n          _this3._onDisconnected = callback;\n          resolve();\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_subscribeRegistration\",\n    value: function _subscribeRegistration() {\n      var _this4 = this;\n\n      var msg = {\n        type: 'subscribe',\n        from: this._owner,\n        to: this._syncher._runtimeUrl + '/subscriptions',\n        body: {\n          resources: [this._url + '/registration']\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this4._bus.postMessage(msg, function (reply) {\n          DataObjectObserver_log.log(\"[DataObjectObserver._subscribeRegistration] \".concat(_this4._url, \" rcved reply \"), reply);\n\n          if (reply.body.code === 200) {\n            _this4._generateListener(_this4._url + '/registration');\n\n            resolve();\n          } else {\n            DataObjectObserver_log.error('Error subscribing registration status for ', _this4._url);\n            reject('Error subscribing registration status for ' + _this4._url);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_generateListener\",\n    value: function _generateListener(notificationURL) {\n      var _this = this;\n\n      _this._bus.addListener(notificationURL, function (msg) {\n        DataObjectObserver_log.log(\"[DataObjectObserver.registrationNotification] \".concat(_this._url, \": \"), msg);\n\n        if (msg.body.value && msg.body.value === 'disconnected' && _this._onDisconnected) {\n          DataObjectObserver_log.log(\"[DataObjectObserver] \".concat(_this._url, \": was disconnected \"), msg);\n\n          _this._onDisconnected();\n        }\n      });\n    }\n    /**\r\n     * Requests the reporter to execute a method on the data object\r\n     * @param {string} method - Name of the function to be executed.\r\n     * @param {array} params - array of parameters for the requested function\r\n     * @return {promise}\r\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(method, params) {\n      var _this5 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          type: 'execute',\n          from: _this5._owner,\n          to: _this._url,\n          body: {\n            method: method,\n            params: params\n          }\n        };\n\n        _this._bus.postMessage(msg, function (reply) {\n          DataObjectObserver_log.log(\"[DataObjectObserver.execute] \".concat(_this._url, \" rcved reply \"), reply);\n\n          if (reply.body.code === 200) {\n            resolve();\n          } else {\n            DataObjectObserver_log.warn(\"[DataObjectObserver.execute] execution of method \".concat(method, \" was reject by reporter\"));\n            reject(\"[DataObjectObserver.execute] execution of method \".concat(method, \" was reject by reporter\"));\n          }\n        });\n      });\n    }\n  }]);\n\n  return DataObjectObserver;\n}(syncher_DataObject\n/* implements SyncStatus */\n);\n\n/* harmony default export */ var syncher_DataObjectObserver = (DataObjectObserver_DataObjectObserver);\n// CONCATENATED MODULE: ./src/syncher/DataProvisional.js\nfunction DataProvisional_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataProvisional_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataProvisional_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataProvisional_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataProvisional_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * @access private\r\n * This class is responsible for collecting delta changes in remote objects, before the response of subscription reach the observer.\r\n * It's used in Syncher -> subscribe. The flow is defined as:\r\n * 1. (observer) --subscribe--\x3e (reporter)\r\n * 2. (observer) <--delta updates-- (reporter)\r\n * 3. (observer) <--subscribe response-- (reporter)\r\n * This means that there could be delta updates transferred before the subscription confirmation.\r\n * Since there is no DataObjectObserver before the ubscription confirmation, there should be some other object collecting the updates.\r\n * Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\r\n */\n// Log System\n\nvar DataProvisional_log = loglevel[\"getLogger\"]('DataProvisional');\n\nvar DataProvisional =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _childrenListeners: [MsgListener]\r\n  _listener: MsgListener\r\n    _changes: []\r\n  */\n  function DataProvisional(owner, url, bus, children) {\n    DataProvisional_classCallCheck(this, DataProvisional);\n\n    var _this = this;\n\n    _this._owner = owner;\n    _this._url = url;\n    _this._bus = bus;\n    _this._children = children;\n    _this._changes = [];\n\n    _this._allocateListeners();\n  }\n\n  DataProvisional_createClass(DataProvisional, [{\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      var _this = this;\n\n      _this._listener = _this._bus.addListener(_this._url, function (msg) {\n        DataProvisional_log.log('DataProvisional-' + _this._url + '-RCV: ', msg);\n\n        _this._changes.push(msg);\n      });\n      /*\r\n      _this._childrenListeners = [];\r\n      if (_this._children) {\r\n        let childBaseURL = url + '/children/';\r\n        _this._children.forEach((child) => {\r\n          let childURL = childBaseURL + child;\r\n          let listener = _this._bus.addListener(childURL, (msg) => {\r\n            //ignore msg sent by himself\r\n            if (msg.from !== owner) {\r\n              log.log(msg);\r\n            }\r\n          });\r\n            _this._childrenListeners.push(listener);\r\n        });\r\n      }*/\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._listener.remove();\n      /*_this._childrenListeners.forEach((listener) => {\r\n        listener.remove();\r\n      });*/\n\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(observer) {\n      var _this = this;\n\n      _this._changes.forEach(function (change) {\n        observer._changeObject(observer._syncObj, change);\n      });\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this._children;\n    }\n  }]);\n\n  return DataProvisional;\n}();\n\n/* harmony default export */ var syncher_DataProvisional = (DataProvisional);\n// CONCATENATED MODULE: ./src/syncher/Syncher.js\nfunction Syncher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Syncher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Syncher_createClass(Constructor, protoProps, staticProps) { if (protoProps) Syncher_defineProperties(Constructor.prototype, protoProps); if (staticProps) Syncher_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar Syncher_log = loglevel[\"getLogger\"]('Syncher');\n\n\n\n\n/**\r\n* The main class for the syncher package.\r\n* The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.\r\n* Main functionality is to create reporters and to subscribe to existing ones.\r\n*/\n\nvar Syncher_Syncher =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _owner: URL\r\n  _bus: MiniBus\r\n    _subURL: URL\r\n    _reporters: <url: DataObjectReporter>\r\n  _observers: <url: DataObjectObserver>\r\n  _provisionals: <url: DataProvisional>\r\n    ----event handlers----\r\n  _onNotificationHandler: (event) => void\r\n  _onResume: (event) => void\r\n  */\n\n  /**\r\n  * Constructor that should be used by the Hyperty owner\r\n  * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.\r\n  * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.\r\n  * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.\r\n  */\n  function Syncher(owner, bus, config) {\n    Syncher_classCallCheck(this, Syncher);\n\n    var _this = this;\n\n    _this._owner = owner;\n    _this._bus = bus;\n    _this._subURL = config.runtimeURL + '/sm';\n    _this._runtimeUrl = config.runtimeURL;\n    _this._p2pHandler = config.p2pHandler;\n    _this._p2pRequester = config.p2pRequester;\n    _this._reporters = {};\n    _this._observers = {};\n    _this._provisionals = {};\n    bus.addListener(owner, function (msg) {\n      //ignore msg sent by himself\n      if (msg.from !== owner) {\n        Syncher_log.info('[Syncher] Syncher-RCV: ', msg, _this);\n\n        switch (msg.type) {\n          case 'forward':\n            _this._onForward(msg);\n\n            break;\n\n          case 'create':\n            _this._onRemoteCreate(msg);\n\n            break;\n\n          case 'delete':\n            _this._onRemoteDelete(msg);\n\n            break;\n\n          case 'execute':\n            _this._onExecute(msg);\n\n            break;\n        }\n      }\n    });\n  }\n  /**\r\n  * The owner of the Syncher and all created reporters.\r\n  * @type {HypertyURL}\r\n  */\n\n\n  Syncher_createClass(Syncher, [{\n    key: \"create\",\n\n    /**\r\n    * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.\r\n    * @param  {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\r\n    * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription\r\n    * @param  {JSON} initialData - Initial data of the reporter\r\n    * @param  {boolean} store - (Optional) if true, object will be stored by the runtime\r\n    * @param  {boolean} p2p - (Optional) if true, data synchronisation stream will use p2p connection as much as possible\r\n    * @param  {string} name - (Optional) the name of the dataobject\r\n    * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n    * @param  {SyncMetadata} input - (optional) all metadata required to sunc the Data Object.\r\n    * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP\r\n    */\n    value: function create(schema, observers, initialData) {\n      var store = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var p2p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'no name';\n      var identity = arguments.length > 6 ? arguments[6] : undefined;\n      var input = arguments.length > 7 ? arguments[7] : undefined;\n      if (!schema) throw Error('[Syncher - Create] - You need specify the data object schema');\n      if (!observers) throw Error('[Syncher - Create] -The observers should be defined');\n\n      var _this = this;\n\n      input = input || {};\n      var createInput = Object.assign({}, input);\n      createInput.p2p = p2p;\n      createInput.store = store;\n      createInput.schema = schema;\n      createInput.authorise = observers;\n      createInput.p2pHandler = _this._p2pHandler;\n      createInput.p2pRequester = _this._p2pRequester;\n      initialData ? createInput.data = Object(utils[\"i\" /* deepClone */])(initialData) : createInput.data = {};\n      createInput.name = name.length === 0 ? 'no name' : name;\n      createInput.reporter = input.hasOwnProperty('reporter') && typeof input.reporter !== 'boolean' ? input.reporter : _this._owner;\n      createInput.resume = false;\n\n      if (input) {\n        createInput.mutual = input.hasOwnProperty('mutual') ? input.mutual : false;\n        createInput.name = input.hasOwnProperty('name') ? input.name : createInput.name;\n      } else {\n        createInput.mutual = false;\n      }\n\n      if (input.hasOwnProperty('reuseURL')) {\n        createInput.resource = input.reuseURL;\n      }\n\n      if (identity) {\n        createInput.identity = identity;\n      } //Object.assign(createInput, {resume: false});\n      //debugger;\n      //    console.log('[syncher - create] - create Reporter - createInput: ', createInput);\n\n\n      return _this._create(createInput);\n    }\n    /**\r\n    * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.\r\n    * @param  {Object} criteria - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n    * @return {Promise<DataObjectReporter>[]} Return a promise with a list of DataObjectReporter to be resumed;\r\n    */\n\n  }, {\n    key: \"resumeReporters\",\n    value: function resumeReporters(criteria) {\n      var _this = this;\n\n      Syncher_log.log('[syncher - create] - resume Reporter - criteria: ', criteria);\n      Object.assign(criteria, {\n        resume: true\n      });\n      return _this._resumeCreate(criteria);\n    }\n    /**\r\n    * Request a subscription to an existent reporter object.\r\n    * @param {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\r\n    * @param {ObjectURL} objURL - Address of the existent reporter object to be observed\r\n    * @param {Boolean} [store=false] - Save the subscription on the Syncher Manager for further resume (Default is false)\r\n    * @param {Boolean} [p2p=false] - Info about if should use p2p connection (Default is false)\r\n    * @param {Boolean} [mutual=true] - Info about if messages of this object should be encrypted (Default is true)\r\n    * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.\r\n    */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(input) {\n      /*  let _this = this;\r\n        let criteria = {};\r\n          criteria.p2p = p2p;\r\n        criteria.store = store;\r\n        criteria.schema = schema;\r\n        criteria.domain_subscription = domain_subscription;\r\n          criteria.resource = objURL;\r\n        if (identity)      { criteria.identity = identity; }\r\n          //TODO: For Further Study\r\n        criteria.mutual = mutual;\r\n          log.log('[syncher - subscribe] - subscribe criteria: ', criteria);\r\n          Object.assign(criteria, {resume: false});*/\n      return this._subscribe(input);\n    }\n    /**\r\n    * Request a subscription to an existent reporter object.\r\n    * @param {criteria} criteria - Information to discovery the observer object\r\n    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.\r\n    */\n\n  }, {\n    key: \"resumeObservers\",\n    value: function resumeObservers(criteria) {\n      var _this = this;\n\n      var _criteria = criteria || {};\n\n      Object.assign(_criteria, {\n        resume: true\n      });\n      return _this._resumeSubscribe(_criteria);\n    }\n    /**\r\n    * Request a read action on the reporter object\r\n    * @param {ObjectURL} objURL - URL of the reporter object to be read\r\n    * @return {Promise<Object>} Return Promise to last available data of the reporter\r\n    */\n\n  }, {\n    key: \"read\",\n    value: function read(objURL, criteria) {\n      var _this = this;\n\n      console.log('[Syncher.read] ', objURL);\n      return new Promise(function (resolve, reject) {\n        // in case the object is synched in a remote storage, lets sync with it\n        //      if (_this._observers[objURL] && _this._observers[objURL].metadata.hasOwnProperty('backup') && _this._observers[objURL].metadata.backup) {\n        var readMsg = {\n          type: 'read',\n          from: _this._owner,\n          to: _this._subURL,\n          body: {\n            resource: objURL\n          }\n        };\n        if (criteria) readMsg.body.criteria = criteria;\n\n        var callback = function callback(reply) {\n          resolve(reply.body.value);\n        };\n\n        _this._bus.postMessage(readMsg, callback, false);\n        /*     } else {\r\n               _this._readReporter(objURL).then((result)=> {\r\n               resolve(result);\r\n             });\r\n           }*/\n\n      });\n    }\n    /*  _readCallBack(reply, resolve,reject) {\r\n        let _this = this;\r\n    \r\n          console.log('[Syncher.read] reply: ', reply);\r\n    \r\n          let childrens = {};\r\n          let value = {};\r\n          let n = 0;\r\n    \r\n          if (reply.body.code < 300) {\r\n            if (!reply.body.value.hasOwnProperty('responses')) {\r\n              _this._bus.removeResponseListener(reply.from, reply.id);\r\n              resolve(reply.body.value);\r\n            } else { //data object is sent in separated messages\r\n              if (n === 0) { //initial response without childrens\r\n                value = reply.body.value;\r\n                ++n;\r\n              } else { // received response contains childrens\r\n                delete reply.body.value.responses;\r\n                let children;\r\n                for (children in reply.body.value) {\r\n                  if (!childrens.hasOwnProperty(children)) childrens[children] = {};\r\n                  Object.assign(childrens[children], reply.body.value[children]);\r\n                }\r\n                ++n;\r\n                if (n === value.responses) {\r\n                  value.childrenObjects = childrens;\r\n                  delete value.responses;\r\n                  _this._bus.removeResponseListener(reply.from, reply.id);\r\n                  resolve(value);\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n    \r\n          reject(reply.body.desc);\r\n          }\r\n    \r\n      }*/\n\n  }, {\n    key: \"_readReporter\",\n    value: function _readReporter(objURL) {\n      var _this = this; //FLOW-OUT: this message will be sent directly to reporter object (maybe there is no listener available, so it will be resolved with MessageBus -> resolve)\n      //will reach the remote object in DataObjectReporter -> _onRead\n\n\n      var readMsg = {\n        type: 'read',\n        from: _this._owner,\n        to: objURL\n      };\n      return new Promise(function (resolve, reject) {\n        _this._bus.postMessage(readMsg, function (reply) {\n          return _this._readCallBack(reply, resolve, reject);\n        }, false);\n      });\n    }\n    /**\r\n    * Setup the callback to process create and delete events of remove Reporter objects.\r\n    * This is releated to the messagens sent by create to the observers Hyperty array.\r\n    * @param {function(event: MsgEvent)} callback\r\n    */\n\n  }, {\n    key: \"onNotification\",\n    value: function onNotification(callback) {\n      this._onNotificationHandler = callback;\n    }\n    /**\r\n    * Setup the callback to process close events from the runtime.\r\n    * @param {function(event: MsgEvent)} callback\r\n    */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this._onClose = callback;\n    }\n  }, {\n    key: \"_create\",\n    value: function _create(input) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var reporterInput = Object.assign({}, input);\n        var resume = input.resume;\n        reporterInput.created = new Date().toISOString();\n        reporterInput.runtime = _this._runtimeUrl;\n        var requestValue = Object(utils[\"i\" /* deepClone */])(reporterInput);\n        delete requestValue.p2p;\n        delete requestValue.store;\n        delete requestValue.observers;\n        delete requestValue.identity; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\n        //debugger;\n\n        var requestMsg = {\n          type: 'create',\n          from: _this._owner,\n          to: _this._subURL,\n          body: {\n            resume: resume,\n            value: requestValue\n          }\n        };\n        requestMsg.body.schema = reporterInput.schema;\n        if (reporterInput.p2p) requestMsg.body.p2p = reporterInput.p2p;\n        if (reporterInput.store) requestMsg.body.store = reporterInput.store;\n        if (reporterInput.identity) requestMsg.body.identity = reporterInput.identity;\n        console.log('[syncher._create]: ', reporterInput, requestMsg); //request create to the allocation system. Can be rejected by the PolicyEngine.\n\n        _this._bus.postMessage(requestMsg, function (reply) {\n          Syncher_log.log('[syncher - create] - create-response: ', reply);\n\n          if (reply.body.code === 200) {\n            //reporter creation accepted\n            reporterInput.url = reply.body.resource;\n            /*          if (reply.body.p2pHandler) reporterInput.p2pHandler = reply.body.p2pHandler;\r\n                      if (reply.body.p2pRequester) reporterInput.p2pRequester = reply.body.p2pRequester;*/\n\n            reporterInput.status = 'live'; // pch: do we ned this?\n\n            reporterInput.syncher = _this;\n            reporterInput.childrens = reply.body.childrenResources;\n            var newObj = _this._reporters[reporterInput.url];\n\n            if (!newObj) {\n              newObj = new syncher_DataObjectReporter(reporterInput);\n              _this._reporters[reporterInput.url] = newObj;\n            }\n\n            newObj.inviteObservers(input.authorise, input.p2p);\n            resolve(newObj);\n          } else {\n            //reporter creation rejected\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_resumeCreate\",\n    value: function _resumeCreate(criteria) {\n      var _this2 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var resume = criteria.resume; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\n\n        var requestMsg = {\n          type: 'create',\n          from: _this._owner,\n          to: _this._subURL,\n          body: {\n            resume: resume\n          }\n        };\n        Syncher_log.log('[syncher - create]: ', criteria, requestMsg);\n\n        if (criteria) {\n          requestMsg.body.value = criteria;\n\n          if (criteria.hasOwnProperty('reporter')) {\n            requestMsg.body.value.reporter = criteria.reporter;\n          } else {\n            requestMsg.body.value.reporter = _this._owner;\n          }\n        }\n\n        if (criteria.p2p) requestMsg.body.p2p = criteria.p2p;\n        if (criteria.store) requestMsg.body.store = criteria.store;\n        if (criteria.observers) requestMsg.body.authorise = criteria.observers;\n        if (criteria.identity) requestMsg.body.identity = criteria.identity;\n        Syncher_log.log('[syncher._resumeCreate] - resume message: ', requestMsg); //debugger;\n        //request create to the allocation system. Can be rejected by the PolicyEngine.\n\n        _this._bus.postMessage(requestMsg, function (reply) {\n          Syncher_log.log('[syncher._resumeCreate] - create-resumed-response: ', reply);\n\n          if (reply.body.code === 200) {\n            //debugger;\n            var listOfReporters = reply.body.value;\n\n            for (var index in listOfReporters) {\n              var dataObject = listOfReporters[index]; //reporter creation accepted\n\n              dataObject.data = Object(utils[\"i\" /* deepClone */])(dataObject.data) || {};\n\n              if (dataObject.childrenObjects) {\n                dataObject.childrenObjects = Object(utils[\"i\" /* deepClone */])(dataObject.childrenObjects);\n              }\n\n              dataObject.mutual = false;\n              dataObject.resume = true;\n              dataObject.status = 'live'; // pch: do we ned this?\n\n              dataObject.syncher = _this;\n              Syncher_log.log('[syncher._resumeCreate] - create-resumed-dataObjectReporter', dataObject);\n              var newObj = new syncher_DataObjectReporter(dataObject);\n\n              if (dataObject.childrenObjects) {\n                newObj.resumeChildrens(dataObject.childrenObjects);\n              }\n\n              _this._reporters[dataObject.url] = newObj;\n            }\n\n            resolve(_this._reporters);\n            if (_this2._onReportersResume) _this2._onReportersResume(_this2._reporters);\n          } else if (reply.body.code === 404) {\n            resolve({});\n          } else {\n            //reporter creation rejected\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(input) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe\n        var subscribeMsg = {\n          type: 'subscribe',\n          from: _this._owner,\n          to: _this._subURL,\n          body: input\n        }; // Hyperty request to be an Observer\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer\n        // Resume Subscriptions for the same Hyperty URL\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url\n        // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url\n\n        /*      if (input) {\r\n                if (input.hasOwnProperty('p2p')) subscribeMsg.body.p2p = input.p2p;\r\n                if (input.hasOwnProperty('store')) subscribeMsg.body.store = input.store;\r\n                if (input.hasOwnProperty('schema')) subscribeMsg.body.schema = input.schema;\r\n                if (input.hasOwnProperty('identity')) subscribeMsg.body.identity = input.identity;\r\n                if (input.hasOwnProperty('resource')) subscribeMsg.body.resource = input.resource;\r\n                if (input.hasOwnProperty('domain_subscription')) subscribeMsg.body.domain_subscription = input.domain_subscription;\r\n              }\r\n              \r\n        \r\n              subscribeMsg.body.resume = input.resume;\r\n        \r\n              //TODO: For Further Study\r\n              if (input.hasOwnProperty('mutual')) subscribeMsg.body.mutual = input.mutual;*/\n\n        Syncher_log.log('[syncher_subscribe] - subscribe message: ', input, subscribeMsg); //request subscription\n        //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\n        //for more info see the DataProvisional class documentation.\n\n        var msgId = _this._bus.postMessage(subscribeMsg);\n\n        _this._bus.addResponseListener(_this._owner, msgId, function (reply) {\n          Syncher_log.log('[syncher] - subscribe-response: ', reply);\n          var objURL = reply.body.resource;\n          var newProvisional = _this._provisionals[objURL];\n          delete _this._provisionals[objURL];\n          if (newProvisional) newProvisional._releaseListeners();\n\n          if (reply.body.code < 200) {\n            Syncher_log.log('[syncher] - new DataProvisional: ', reply.body.childrenResources, objURL);\n            newProvisional = new syncher_DataProvisional(_this._owner, objURL, _this._bus, reply.body.childrenResources);\n            _this._provisionals[objURL] = newProvisional;\n          } else if (reply.body.code === 200) {\n            Syncher_log.log('[syncher] - new Data Object Observer: ', reply, _this._provisionals);\n            var observerInput = reply.body.value;\n            observerInput.syncher = _this;\n            observerInput.p2p = input.p2p;\n            observerInput.store = input.store;\n            observerInput.identity = input.identity;\n            observerInput.resume = false; // todo: For Further Study\n\n            observerInput.mutual = input.mutual; //observerInput.children = newProvisional.children;\n            //TODO: mutual For Further Study\n\n            var newObj = _this._observers[objURL];\n\n            if (!newObj) {\n              newObj = new syncher_DataObjectObserver(observerInput);\n              _this._observers[objURL] = newObj;\n            } else {\n              newObj.sync();\n            }\n\n            Syncher_log.log('[syncher] - new Data Object Observer already exist: ', newObj);\n\n            _this._bus.removeResponseListener(_this._owner, msgId);\n\n            resolve(newObj);\n\n            if (newProvisional) {\n              newProvisional.apply(newObj);\n            }\n          } else {\n            _this._bus.removeResponseListener(_this._owner, msgId);\n\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n    /*\r\n      _processOfflineSubscription(subscription, redirectTo) {\r\n        let _this = this;\r\n    \r\n        let forward = {\r\n          from: subscription.from,\r\n          type: 'forward',\r\n          to: redirectTo,\r\n          body: subscription\r\n        };\r\n    \r\n        console.log('[Syncher._processOfflineSubscription] forwading ', forward);\r\n    \r\n        _this._bus.postMessage(forward);\r\n    \r\n        let result = {\r\n          code: 302,\r\n          desc: \"Found \" + redirectTo\r\n        };\r\n    \r\n        return(result);\r\n    \r\n      }*/\n\n  }, {\n    key: \"_resumeSubscribe\",\n    value: function _resumeSubscribe(criteria) {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe\n        var subscribeMsg = {\n          type: 'subscribe',\n          from: _this._owner,\n          to: _this._subURL,\n          body: {}\n        }; // Hyperty request to be an Observer\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer\n        // Resume Subscriptions for the same Hyperty URL\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url\n        // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url\n\n        if (criteria) {\n          if (criteria.hasOwnProperty('p2p')) subscribeMsg.body.p2p = criteria.p2p;\n          if (criteria.hasOwnProperty('store')) subscribeMsg.body.store = criteria.store;\n          if (criteria.hasOwnProperty('schema')) subscribeMsg.body.schema = criteria.schema;\n          if (criteria.hasOwnProperty('identity')) subscribeMsg.body.identity = criteria.identity;\n          if (criteria.hasOwnProperty('resource')) subscribeMsg.body.resource = criteria.resource;\n        }\n\n        subscribeMsg.body.resume = criteria.resume; //TODO: For Further Study\n\n        var mutual = criteria.mutual;\n        if (criteria.hasOwnProperty('mutual')) subscribeMsg.body.mutual = mutual;\n        console.log('[syncher] - subscribe message: ', criteria, subscribeMsg); //request subscription\n        //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\n        //for more info see the DataProvisional class documentation.\n\n        _this._bus.postMessage(subscribeMsg, function (reply) {\n          console.log('[syncher] - subscribe-resumed-response: ', reply);\n          var objURL = reply.body.resource;\n          var newProvisional = _this._provisionals[objURL];\n          delete _this._provisionals[objURL];\n          if (newProvisional) newProvisional._releaseListeners();\n\n          if (reply.body.code < 200) {\n            // todo: check if this is needed for the resume\n            Syncher_log.log('[syncher] - resume new DataProvisional: ', reply, objURL);\n            newProvisional = new syncher_DataProvisional(_this._owner, objURL, _this._bus, reply.body.childrenResources);\n            _this._provisionals[objURL] = newProvisional;\n          } else if (reply.body.code === 200) {\n            var listOfObservers = reply.body.value;\n\n            for (var index in listOfObservers) {\n              var dataObject = listOfObservers[index];\n              console.log('[syncher] - Resume Object Observer: ', reply, dataObject, _this._provisionals);\n\n              if (dataObject.childrenObjects) {\n                dataObject.childrenObjects = Object(utils[\"i\" /* deepClone */])(dataObject.childrenObjects);\n              }\n\n              dataObject.data = Object(utils[\"i\" /* deepClone */])(dataObject.data) || {};\n              dataObject.resume = true;\n              dataObject.syncher = _this; //TODO: mutual For Further Study\n\n              console.log('[syncher._resumeSubscribe] - create new dataObject: ', dataObject);\n              var newObj = new syncher_DataObjectObserver(dataObject);\n\n              if (dataObject.childrenObjects) {\n                newObj.resumeChildrens(dataObject.childrenObjects);\n              }\n\n              Syncher_log.log('[syncher._resumeSubscribe] - new dataObject', newObj);\n              _this._observers[newObj.url] = newObj;\n\n              if (_this._provisionals[newObj.url]) {\n                _this._provisionals[newObj.url].apply(newObj);\n              } //lets sync with Reporter\n              // it was commented to let hyperties decide when to sync\n              //newObj.sync();\n\n            }\n\n            resolve(_this._observers);\n            if (_this3._onObserversResume) _this3._onObserversResume(_this._observers);\n          } else if (reply.body.code === 404) {\n            resolve({});\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    } //FLOW-IN: message received from a local runtime ReporterObject -> _onRemoteSubscribe\n\n  }, {\n    key: \"_onForward\",\n    value: function _onForward(msg) {\n      var _this = this;\n\n      var reporter = _this._reporters[msg.body.to];\n\n      reporter._onForward(msg);\n    } //FLOW-IN: message received from a remote Syncher -> create (this is actually an invitation to subscribe)\n\n  }, {\n    key: \"_onRemoteCreate\",\n    value: function _onRemoteCreate(msg) {\n      var _this = this;\n\n      var resource = msg.from.slice(0, -13); //remove \"/subscription\" from the URL\n\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(resource);\n      var domain = dividedURL.domain;\n      var event = {\n        type: msg.type,\n        from: msg.body.source,\n        url: resource,\n        domain: domain,\n        schema: msg.body.schema,\n        value: msg.body.value,\n        identity: msg.body.identity,\n        ack: function ack(type) {\n          var lType = 200;\n\n          if (type) {\n            lType = type;\n          } //send ack response message\n\n\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: lType\n            }\n          });\n        }\n      };\n\n      if (_this._onNotificationHandler) {\n        Syncher_log.info('[Syncher] NOTIFICATION-EVENT: ', event);\n\n        _this._onNotificationHandler(event);\n      }\n    } //FLOW-IN: message received from a remote DataObjectReporter -> delete\n\n  }, {\n    key: \"_onRemoteDelete\",\n    value: function _onRemoteDelete(msg) {\n      var _this = this; //remove \"/subscription\" from the URL\n\n\n      var resource = msg.body.resource;\n      var object = _this._observers[resource];\n      var unsubscribe = {\n        from: _this.owner,\n        to: _this._subURL,\n        id: msg.id,\n        type: 'unsubscribe',\n        body: {\n          resource: msg.body.resource\n        }\n      };\n\n      _this._bus.postMessage(unsubscribe);\n\n      delete _this._observers[resource];\n      var event = {\n        type: msg.type,\n        url: resource,\n        identity: msg.body.identity,\n        ack: function ack(type) {\n          var lType = 200;\n\n          if (type) {\n            lType = type;\n          } //TODO: any other different options for the release process, like accept but nor release local?\n\n\n          if (lType === 200 && object) {\n            object[\"delete\"]();\n          } //send ack response message\n\n\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: lType,\n              source: _this._owner\n            }\n          });\n        }\n      }; //    if (object) {\n\n      if (_this._onNotificationHandler) {\n        Syncher_log.log('NOTIFICATION-EVENT: ', event);\n\n        _this._onNotificationHandler(event);\n      }\n      /*    } else {\r\n            _this._bus.postMessage({\r\n              id: msg.id, type: 'response', from: msg.to, to: msg.from,\r\n              body: { code: 404, source: _this._owner }\r\n            });\r\n          }*/\n\n    } // close event received from runtime registry\n\n  }, {\n    key: \"_onExecute\",\n    value: function _onExecute(msg) {\n      var _this = this;\n\n      var reply = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 200\n        }\n      };\n\n      if ((msg.from === _this._runtimeUrl + '/registry/' || msg.from === _this._runtimeUrl + '/registry') && msg.body && msg.body.method && msg.body.method === 'close' && _this._onClose) {\n        var event = {\n          type: 'close',\n          ack: function ack(type) {\n            if (type) {\n              reply.body.code = type;\n            } //send ack response message\n\n\n            _this._bus.postMessage(reply);\n          }\n        };\n        Syncher_log.info('[Syncher] Close-EVENT: ', event);\n\n        _this._onClose(event);\n      } else {\n        _this._bus.postMessage(reply);\n      }\n    }\n    /**\r\n    * Callback system to trigger the resumed reporters\r\n    * @param  {Function} callback - function callback which will be invoked\r\n    * @return {Object<URL, DataObjectReporter>} Return one object with all resumed reporters;\r\n    */\n\n  }, {\n    key: \"onReportersResume\",\n    value: function onReportersResume(callback) {\n      this._onReportersResume = callback;\n    }\n    /**\r\n    * Callback system to trigger the resumed observers\r\n    * @param  {Function} callback - function callback which will be invoked\r\n    * @return {Object<URL, DataObjectObserver>} Return one object with all resumed observers;\r\n    */\n\n  }, {\n    key: \"onObserversResume\",\n    value: function onObserversResume(callback) {\n      this._onObserversResume = callback;\n    }\n  }, {\n    key: \"owner\",\n    get: function get() {\n      return this._owner;\n    }\n    /**\r\n    * All owned reporters, the ones that were created by a create\r\n    * @type {Object<URL, DataObjectReporter>}\r\n    */\n\n  }, {\n    key: \"reporters\",\n    get: function get() {\n      return this._reporters;\n    }\n    /**\r\n    * All owned observers, the ones that were created by a local subscription\r\n    * @type {Object<URL, DataObjectObserver>}\r\n    */\n\n  }, {\n    key: \"observers\",\n    get: function get() {\n      return this._observers;\n    }\n  }]);\n\n  return Syncher;\n}();\n\n/* harmony default export */ var syncher_Syncher = __webpack_exports__[\"a\"] = (Syncher_Syncher);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/discovery/RegistrationStatus.js\nvar RegistrationStatus = __webpack_require__(7);\n\n// CONCATENATED MODULE: ./src/discovery/DiscoveredObject.js\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n//import {divideURL, convertToUserURL} from '../utils/utils';\n\n/**\r\n* Discovered Object interface\r\n*/\n\nvar DiscoveredObject =\n/*#__PURE__*/\nfunction (_RegistrationStatus) {\n  _inherits(DiscoveredObject, _RegistrationStatus);\n\n  _createClass(DiscoveredObject, [{\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }]);\n\n  function DiscoveredObject(data, runtimeURL, discoveryURL, msgBus, discovery) {\n    var _this2;\n\n    _classCallCheck(this, DiscoveredObject);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DiscoveredObject).call(this, data.hypertyID || data.url, runtimeURL, discoveryURL, msgBus));\n    _this2._data = data;\n    _this2._discovery = discovery;\n    return _this2;\n  }\n  /**\r\n  * function to check the status of the DiscoveredObject.\r\n  * Depending on existing subscribers it may trigger onLive or onDisconnected events.\r\n  *\r\n  */\n\n\n  _createClass(DiscoveredObject, [{\n    key: \"check\",\n    value: function check() {\n      // query DR for the status and call processNotification with msg received\n      var _this = this;\n\n      var message = {\n        body: {}\n      };\n\n      if (_this._discoveredObjectURL.startsWith('hyperty://')) {\n        _this._discovery.discoverHypertyPerURL(_this._discoveredObjectURL).then(function (registration) {\n          message.body.status = registration.status;\n\n          _this._processNotification(message);\n        });\n      } else {\n        _this._discovery.discoverDataObjectsPerURL(_this._discoveredObjectURL).then(function (registration) {\n          message.body.status = registration.status;\n\n          _this._processNotification(message);\n        });\n      }\n    }\n  }]);\n\n  return DiscoveredObject;\n}(RegistrationStatus[\"a\" /* default */]);\n\n/* harmony default export */ var discovery_DiscoveredObject = (DiscoveredObject);\n// CONCATENATED MODULE: ./src/discovery/Discovery.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction Discovery_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Discovery_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Discovery_createClass(Constructor, protoProps, staticProps) { if (protoProps) Discovery_defineProperties(Constructor.prototype, protoProps); if (staticProps) Discovery_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar log = loglevel[\"getLogger\"]('Discovery');\n\n\n/**\r\n* Core Discovery interface\r\n* Class to allow applications to search for hyperties and DataObjects using the message bus\r\n*/\n\nvar Discovery_Discovery =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * To initialise the HypertyDiscover, which will provide the support for hyperties to\r\n  * query users registered in outside the internal core.\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  * @param  {RuntimeURL}          runtimeURL            runtimeURL\r\n  */\n  function Discovery(hypertyURL, runtimeURL, msgBus) {\n    Discovery_classCallCheck(this, Discovery);\n\n    var _this = this;\n\n    _this.messageBus = msgBus;\n    _this.runtimeURL = runtimeURL;\n    _this.domain = Object(utils[\"k\" /* divideURL */])(hypertyURL).domain;\n    _this.discoveryURL = hypertyURL;\n  }\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\n\n\n  Discovery_createClass(Discovery, [{\n    key: \"_isLegacyUser\",\n    value: function _isLegacyUser(userIdentifier) {\n      if (userIdentifier.includes(':') && !userIdentifier.includes('user://')) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerUserProfileData\",\n    value: function discoverHypertiesPerUserProfileData(userIdentifier, schema, resources) {\n      var _this = this;\n\n      var filteredHyperties = [];\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/userprofile/' + userIdentifier\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._isLegacyUser(userIdentifier)) {\n          // todo: to reomve when discovery of legcay users are supported\n          _this.messageBus.postMessage(msg, function (reply) {\n            if (reply.body.code === 200) {\n              reply.body.value.map(function (hyperty) {\n                if (hyperty.hypertyID != _this.discoveryURL) filteredHyperties.push(hyperty);\n              });\n              if (filteredHyperties.length === 0) resolve([]);else {\n                log.log(\"[Discovery.discoverHypertiesPerUserProfileData] Reply log: \", filteredHyperties);\n                resolve(filteredHyperties);\n              }\n            } else {\n              log.warn(\"[Discovery.discoverHypertiesPerUserProfileData] Error Reply for \" + userIdentifier + \" Reason: \", reply.body.description);\n              resolve([]);\n            }\n          });\n        } else {\n          resolve([{\n            hypertyID: userIdentifier,\n            status: 'live'\n          }]);\n        }\n      });\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * returns DiscoveredObject\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerUserProfileDataDO\",\n    value: function discoverHypertiesPerUserProfileDataDO(userIdentifier, schema, resources) {\n      var _this2 = this,\n          _arguments = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this2.discoverHypertiesPerUserProfileData.apply(_this2, _toConsumableArray(_arguments)).then(function (hyperties) {\n          resolve(_this2._convertToDiscoveredObject(hyperties));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for DataObjects registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerUserProfileData\",\n    value: function discoverDataObjectsPerUserProfileData(userIdentifier, schema, resources) {\n      var _this = this;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/userprofile/' + userIdentifier\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._isLegacyUser(userIdentifier)) {\n          // todo: to reomve when discovery of legcay users are supported\n          _this.messageBus.postMessage(msg, function (reply) {\n            if (reply.body.code === 200) {\n              log.log(\"Reply log: \", reply.body.value);\n              resolve(reply.body.value);\n            } else {\n              log.warn(\"[Discovery.discoverDataObjectsPerUserProfileData] Error Reply for \" + userIdentifier + \" Reason: \", reply.body.description);\n              resolve([]);\n            }\n          });\n        } else {\n          resolve([{\n            hypertyID: userIdentifier,\n            status: 'live'\n          }]);\n        }\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerUserProfileDataDO\",\n    value: function discoverDataObjectsPerUserProfileDataDO(guidURL, schema, resources) {\n      var _this3 = this,\n          _arguments2 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this3.discoverDataObjectsPerUserProfileData.apply(_this3, _toConsumableArray(_arguments2)).then(function (registryObjects) {\n          return resolve(_this3._convertToDiscoveredObject(registryObjects));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerGUID\",\n    value: function discoverHypertiesPerGUID(guidURL, schema, resources) {\n      var _this = this;\n\n      var filteredHyperties = [];\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/guid/' + guidURL\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            reply.body.value.map(function (hyperty) {\n              if (hyperty.hypertyID != _this.discoveryURL) filteredHyperties.push(hyperty);\n            });\n            if (filteredHyperties.length === 0) reject('No Hyperty was found');else {\n              log.log(\"Reply log: \", filteredHyperties);\n              resolve(filteredHyperties);\n            }\n          } else {\n            log.warn(\"[Discovery.discoverHypertiesPerGUID] Error Reply for \" + guidURL + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n    * returns DiscoveredObject\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerGUIDDO\",\n    value: function discoverHypertiesPerGUIDDO(guidURL, schema, resources) {\n      var _this4 = this,\n          _arguments3 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this4.discoverHypertiesPerGUID.apply(_this4, _toConsumableArray(_arguments3)).then(function (hyperties) {\n          resolve(_this4._convertToDiscoveredObject(hyperties));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for DataObjects registered in domain registry associated with some GUID\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerGUID\",\n    value: function discoverDataObjectsPerGUID(guidURL, schema, resources) {\n      var _this = this;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/guid/' + guidURL\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectsPerGUID] Error Reply for \" + guidURL + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerGUIDDO\",\n    value: function discoverDataObjectsPerGUIDDO(guidURL, schema, resources) {\n      var _this5 = this,\n          _arguments4 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this5.discoverDataObjectsPerGUID.apply(_this5, _toConsumableArray(_arguments4)).then(function (registryObjects) {\n          return resolve(_this5._convertToDiscoveredObject(registryObjects));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /** Advanced Search for Hyperties registered in domain registry\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverHyperties\",\n    value: function discoverHyperties(user, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      var filteredHyperties = [];\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/user/' + user\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._isLegacyUser(user)) {\n          // todo: to reomve when discovery of legcay users are supported\n          _this.messageBus.postMessage(msg, function (reply) {\n            if (reply.body.code === 200 || reply.body.code === 500) {\n              reply.body.value.map(function (hyperty) {\n                if (hyperty.hypertyID != _this.discoveryURL) filteredHyperties.push(hyperty);\n              });\n              /*            if(filteredHyperties.length === 0)\r\n                            reject('No Hyperty was found');\r\n                          else {*/\n\n              log.log(\"[Discovery.discoverHyperties] Reply : \", filteredHyperties);\n              resolve(filteredHyperties); //            }\n            } else {\n              log.warn(\"[Discovery.discoverHyperties] Error Reply for \" + user + \" Reason: \", reply.body.description);\n              resolve(filteredHyperties);\n            }\n          });\n        } else {\n          resolve([{\n            hypertyID: user,\n            status: 'live'\n          }]);\n        }\n      });\n    }\n    /** Advanced Search for Hyperties registered in domain registry,\r\n    *returns DiscoveredObject\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverHypertiesDO\",\n    value: function discoverHypertiesDO(user, schema, resources, domain) {\n      var _this6 = this,\n          _arguments5 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this6.discoverHyperties.apply(_this6, _toConsumableArray(_arguments5)).then(function (hyperties) {\n          resolve(_this6._convertToDiscoveredObject(hyperties));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /** Advanced Search for DataObjects registered in domain registry\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjects\",\n    value: function discoverDataObjects(user, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/user/' + user\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjects] Error Reply for \" + user + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsDO\",\n    value: function discoverDataObjectsDO(user, schema, resources, domain) {\n      var _this7 = this,\n          _arguments6 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this7.discoverDataObjects.apply(_this7, _toConsumableArray(_arguments6)).then(function (registryObjects) {\n          return resolve(_this7._convertToDiscoveredObject(registryObjects));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about hyperties registered in domain registry, and\r\n    * return the hyperty information, if found.\r\n    * @param  {String}              url  hyperty URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertyPerURL\",\n    value: function discoverHypertyPerURL(url, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/url/' + url,\n          criteria: {\n            domain: activeDomain\n          }\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverHypertyPerURL] Error Reply for \" + url + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about hyperties registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              url  hyperty URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertyPerURLDO\",\n    value: function discoverHypertyPerURLDO(url, domain) {\n      var _this8 = this,\n          _arguments7 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this8.discoverHypertyPerURL.apply(_this8, _toConsumableArray(_arguments7)).then(function (hyperty) {\n          return resolve(new discovery_DiscoveredObject(hyperty, _this8.runtimeURL, _this8.discoveryURL, _this8.messageBus, _this8));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * return the dataObject information, if found.\r\n    * @param  {String}              url  dataObject URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectPerURL\",\n    value: function discoverDataObjectPerURL(url, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/url/' + url,\n          criteria: {\n            domain: activeDomain\n          }\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectPerURL] Error Reply for \" + url + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              url  dataObject URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectPerURLDO\",\n    value: function discoverDataObjectPerURLDO(url, domain) {\n      var _this9 = this,\n          _arguments8 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this9.discoverDataObjectPerURL.apply(_this9, _toConsumableArray(_arguments8)).then(function (registryObject) {\n          return resolve(new discovery_DiscoveredObject(registryObject, _this9.runtimeURL, _this9.discoveryURL, _this9.messageBus, _this9));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about an dataObjects registered in domain registry with a given name, and\r\n    * return the dataObjects information, if found.\r\n    * @param  {String}              name  dataObject URL\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerName\",\n    value: function discoverDataObjectsPerName(name, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/name/' + name\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectsPerName] Error Reply for \" + name + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              name  dataObject URL\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerNameDO\",\n    value: function discoverDataObjectsPerNameDO(name, schema, resources, domain) {\n      var _this10 = this,\n          _arguments9 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this10.discoverDataObjectsPerName.apply(_this10, _toConsumableArray(_arguments9)).then(function (registryObjects) {\n          return resolve(_this10._convertToDiscoveredObject(registryObjects));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about specific reporter dataObject registered in domain registry, and\r\n    * return the dataObjects from that reporter.\r\n    * @param  {String}           reporter     dataObject reporter\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain       (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerReporter\",\n    value: function discoverDataObjectsPerReporter(reporter, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/reporter/' + reporter\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectsPerName] Error Reply for \" + reporter + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              name  dataObject URL\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerReporterDO\",\n    value: function discoverDataObjectsPerReporterDO(reporter, schema, resources, domain) {\n      var _this11 = this,\n          _arguments10 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this11.discoverDataObjectsPerReporter.apply(_this11, _toConsumableArray(_arguments10)).then(function (registryObjects) {\n          return resolve(_this11._convertToDiscoveredObject(registryObjects));\n        })[\"catch\"](function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"_convertToDiscoveredObject\",\n    value: function _convertToDiscoveredObject(registryObjects) {\n      var _this12 = this;\n\n      return registryObjects.map(function (registryObject) {\n        return new discovery_DiscoveredObject(registryObject, _this12.runtimeURL, _this12.discoveryURL, _this12.messageBus, _this12);\n      });\n    }\n    /** Advanced Search for dataObjects registered in domain registry\r\n    * @deprecated Deprecated. Use discoverDataObjectsPerName instead\r\n    * @param  {String}           name                  name of the dataObject\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObject schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObject resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObject\",\n    value: function discoverDataObject(name, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain; //let userIdentifier = convertToUserURL(user);\n\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: name,\n          criteria: {\n            resources: resources,\n            dataSchemes: schema\n          }\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          log.log('[Discovery]', reply);\n\n          if (reply.body.code > 299) {\n            log.warn(\"[Discovery.discoverDataObject] Error Reply for \" + name + \" Reason: \", reply.body.description);\n            return resolve([]);\n          }\n\n          var hyperties = reply.body.value;\n\n          if (hyperties) {\n            resolve(hyperties);\n          } else {\n            resolve([]);\n          }\n        });\n      });\n    }\n    /** Advanced Search for Hyperties registered in domain registry\r\n    * @deprecated Deprecated. Use discoverHyperties instead\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverHyperty\",\n    value: function discoverHyperty(user, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      var userIdentifier = Object(utils[\"f\" /* convertToUserURL */])(user);\n\n      if (!domain) {\n        activeDomain = _this.domain;\n      } else {\n        activeDomain = domain;\n      }\n\n      return new Promise(function (resolve, reject) {\n        log.log('[Discovery.discoverHyperty] ACTIVE DOMAIN -> ', activeDomain, 'user->', user, 'schema->', schema, 'resources->', resources, 'domain->', domain);\n\n        if (user.includes(':') && !user.includes('user://')) {\n          log.log('[Discovery.discoverHyperty] ' + user + ' is legacy domain');\n          var legacyUser = {\n            userID: user,\n            hypertyID: user,\n            schema: schema,\n            resources: resources\n          };\n          return resolve(legacyUser);\n        }\n\n        var msg = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: 'domain://registry.' + activeDomain,\n          body: {\n            resource: userIdentifier,\n            criteria: {\n              resources: resources,\n              dataSchemes: schema\n            }\n          }\n        };\n        log.info('[Discovery] msg to send->', msg);\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          log.info('[Discovery] ON discoverHyperty->', reply);\n          var hyperties = reply.body.value;\n\n          if (hyperties) {\n            resolve(hyperties);\n          } else {\n            reject('No Hyperty was found');\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about users registered in domain registry, and\r\n    * return the last hyperty instance registered by the user.\r\n    * @deprecated Deprecated. Use discoverHyperty instead\r\n    * @param  {email}              email\r\n    * @param  {domain}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertyPerUser\",\n    value: function discoverHypertyPerUser(email, domain) {\n      var _this = this;\n\n      var activeDomain;\n      return new Promise(function (resolve, reject) {\n        // Hack for legacy users\n        if (email.includes(':') && !email.includes('user://')) {\n          log.log('[Discovery.discoverHyperty] ' + email + 'is legacy domain');\n          var legacyUser = {\n            id: email,\n            hypertyURL: email,\n            descriptor: 'unknown'\n          };\n          return resolve(legacyUser);\n        }\n\n        if (!domain) {\n          activeDomain = _this.domain;\n        } else {\n          activeDomain = domain;\n        }\n\n        var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@')); // message to query domain registry, asking for a user hyperty.\n\n        var message = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: 'domain://registry.' + activeDomain,\n          body: {\n            resource: identityURL\n          }\n        };\n        log.info('[Discovery] Message: ', message, activeDomain, identityURL); //log.info('[Discovery] message READ', message);\n\n        _this.messageBus.postMessage(message, function (reply) {\n          log.info('[Discovery] message reply', reply);\n          var hyperty;\n          var mostRecent;\n          var lastHyperty;\n          var value = reply.body.value;\n\n          for (hyperty in value) {\n            if (value[hyperty].lastModified !== undefined) {\n              if (mostRecent === undefined) {\n                mostRecent = new Date(value[hyperty].lastModified);\n                lastHyperty = hyperty;\n              } else {\n                var hypertyDate = new Date(value[hyperty].lastModified);\n\n                if (mostRecent.getTime() < hypertyDate.getTime()) {\n                  mostRecent = hypertyDate;\n                  lastHyperty = hyperty;\n                }\n              }\n            }\n          }\n\n          log.info('[Discovery] Last Hyperty: ', lastHyperty, mostRecent);\n          var hypertyURL = lastHyperty;\n\n          if (hypertyURL === undefined) {\n            return reject('User Hyperty not found');\n          }\n\n          var idPackage = {\n            id: email,\n            descriptor: value[hypertyURL].descriptor,\n            hypertyURL: hypertyURL\n          };\n          log.info('[Discovery] ===> hypertyDiscovery messageBundle: ', idPackage);\n          resolve(idPackage);\n        });\n      });\n    }\n    /**\r\n    * function to request about users registered in domain registry, and\r\n    * return the all the hyperties registered by the user\r\n    * @deprecated Deprecated. Use discoverHyperty instead\r\n    * @param  {email}              email\r\n    * @param  {domain}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerUser\",\n    value: function discoverHypertiesPerUser(email, domain) {\n      var _this = this;\n\n      var activeDomain;\n      log.log('on Function->', email);\n      return new Promise(function (resolve, reject) {\n        if (email.includes(':') && !email.includes('user://')) {\n          log.log('[Discovery.discoverHyperty] is legacy domain');\n          var legacyUser = {\n            userID: email,\n            hypertyID: email,\n            schema: schema,\n            resources: resources\n          };\n          return resolve(legacyUser);\n        }\n\n        if (!domain) {\n          activeDomain = _this.domain;\n        } else {\n          activeDomain = domain;\n        }\n\n        var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@')); // message to query domain registry, asking for a user hyperty.\n\n        var message = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: 'domain://registry.' + activeDomain,\n          body: {\n            resource: identityURL\n          }\n        };\n        log.log('[Discovery] Message discoverHypertiesPerUser: ', message, activeDomain, identityURL); //log.info('[Discovery] message READ', message);\n\n        _this.messageBus.postMessage(message, function (reply) {\n          log.info('[Discovery] discoverHypertiesPerUser reply', reply);\n          var value = reply.body.value;\n\n          if (!value) {\n            return reject('User Hyperty not found');\n          }\n\n          resolve(value);\n        });\n      });\n    }\n    /**\r\n    * function to request about users registered in domain registry, and\r\n    * return the all the hyperties registered by the user\r\n    * @deprecated Deprecated. Use discoverHyperty instead\r\n    * @param  {email}              email\r\n    * @param  {domain}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"resumeDiscoveries\",\n    value: function resumeDiscoveries() {\n      var _this = this;\n\n      log.log('[Discovery] resumeDiscoveries');\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: _this.runtimeURL + '/subscriptions',\n          body: {\n            resource: _this.discoveryURL\n          }\n        };\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          log.log('[Discovery.resumeDiscoveries] reply: ', reply);\n          var notifications = [];\n\n          if (reply.body.code === 200) {\n            var urls = reply.body.value; // URLs to add listeners to\n            //lets create one DiscoveryObject per notification\n\n            urls.forEach(function (url) {\n              var objectUrl = url.split('/registration')[0];\n              var data = {};\n              data.url = objectUrl;\n              log.log('[Discovery.resumeDiscoveries] adding listener to: ', objectUrl);\n\n              if (objectUrl.includes('hyperty://')) {\n                notifications.push(_this.discoverHypertyPerURLDO(objectUrl));\n              } else {\n                notifications.push(_this.discoverDataObjectPerURLDO(objectUrl));\n              }\n            });\n            Promise.all(notifications).then(function (values) {\n              resolve(values);\n            });\n          } else {\n            resolve([]);\n          }\n        });\n      });\n    }\n  }]);\n\n  return Discovery;\n}();\n\n/* harmony default export */ var discovery_Discovery = __webpack_exports__[\"a\"] = (Discovery_Discovery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZGlzY292ZXJ5L0Rpc2NvdmVyZWRPYmplY3QuanM/MDIzOSIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZGlzY292ZXJ5L0Rpc2NvdmVyeS5qcz80YTQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbi8vaW1wb3J0IHtkaXZpZGVVUkwsIGNvbnZlcnRUb1VzZXJVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IFJlZ2lzdHJhdGlvblN0YXR1cyBmcm9tICcuL1JlZ2lzdHJhdGlvblN0YXR1cyc7XHJcblxyXG4vKipcclxuKiBEaXNjb3ZlcmVkIE9iamVjdCBpbnRlcmZhY2VcclxuKi9cclxuY2xhc3MgRGlzY292ZXJlZE9iamVjdCBleHRlbmRzIFJlZ2lzdHJhdGlvblN0YXR1cyB7XHJcblxyXG4gIGdldCBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhLCBydW50aW1lVVJMLCBkaXNjb3ZlcnlVUkwsIG1zZ0J1cywgZGlzY292ZXJ5KSB7XHJcbiAgICBzdXBlcihkYXRhLmh5cGVydHlJRCB8fCBkYXRhLnVybCwgcnVudGltZVVSTCwgZGlzY292ZXJ5VVJMLCBtc2dCdXMpO1xyXG5cclxuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xyXG4gICAgdGhpcy5fZGlzY292ZXJ5ID0gZGlzY292ZXJ5O1xyXG4gIH1cclxuXHJcblxyXG5cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byBjaGVjayB0aGUgc3RhdHVzIG9mIHRoZSBEaXNjb3ZlcmVkT2JqZWN0LlxyXG4gICogRGVwZW5kaW5nIG9uIGV4aXN0aW5nIHN1YnNjcmliZXJzIGl0IG1heSB0cmlnZ2VyIG9uTGl2ZSBvciBvbkRpc2Nvbm5lY3RlZCBldmVudHMuXHJcbiAgKlxyXG4gICovXHJcblxyXG4gIGNoZWNrKCkge1xyXG4gICAgLy8gcXVlcnkgRFIgZm9yIHRoZSBzdGF0dXMgYW5kIGNhbGwgcHJvY2Vzc05vdGlmaWNhdGlvbiB3aXRoIG1zZyByZWNlaXZlZFxyXG5cclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgbWVzc2FnZSA9IHtcclxuICAgICAgYm9keToge31cclxuICAgIH07XHJcblxyXG4gICAgaWYgKF90aGlzLl9kaXNjb3ZlcmVkT2JqZWN0VVJMLnN0YXJ0c1dpdGgoJ2h5cGVydHk6Ly8nKSApIHtcclxuICAgICAgX3RoaXMuX2Rpc2NvdmVyeS5kaXNjb3Zlckh5cGVydHlQZXJVUkwoX3RoaXMuX2Rpc2NvdmVyZWRPYmplY3RVUkwpLnRoZW4oKHJlZ2lzdHJhdGlvbik9PntcclxuICAgICAgICBtZXNzYWdlLmJvZHkuc3RhdHVzID0gcmVnaXN0cmF0aW9uLnN0YXR1cztcclxuICAgICAgICBfdGhpcy5fcHJvY2Vzc05vdGlmaWNhdGlvbihtZXNzYWdlKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBfdGhpcy5fZGlzY292ZXJ5LmRpc2NvdmVyRGF0YU9iamVjdHNQZXJVUkwoX3RoaXMuX2Rpc2NvdmVyZWRPYmplY3RVUkwpLnRoZW4oKHJlZ2lzdHJhdGlvbik9PntcclxuICAgICAgICBtZXNzYWdlLmJvZHkuc3RhdHVzID0gcmVnaXN0cmF0aW9uLnN0YXR1cztcclxuICAgICAgICBfdGhpcy5fcHJvY2Vzc05vdGlmaWNhdGlvbihtZXNzYWdlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEaXNjb3ZlcmVkT2JqZWN0O1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG4vLyBMb2cgU3lzdGVtXHJcbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XHJcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdEaXNjb3ZlcnknKTtcclxuXHJcbmltcG9ydCB7ZGl2aWRlVVJMLCBjb252ZXJ0VG9Vc2VyVVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBEaXNjb3ZlcmVkT2JqZWN0IGZyb20gJy4vRGlzY292ZXJlZE9iamVjdCc7XHJcblxyXG4vKipcclxuKiBDb3JlIERpc2NvdmVyeSBpbnRlcmZhY2VcclxuKiBDbGFzcyB0byBhbGxvdyBhcHBsaWNhdGlvbnMgdG8gc2VhcmNoIGZvciBoeXBlcnRpZXMgYW5kIERhdGFPYmplY3RzIHVzaW5nIHRoZSBtZXNzYWdlIGJ1c1xyXG4qL1xyXG5jbGFzcyBEaXNjb3Zlcnkge1xyXG5cclxuICAvKipcclxuICAqIFRvIGluaXRpYWxpc2UgdGhlIEh5cGVydHlEaXNjb3Zlciwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG9cclxuICAqIHF1ZXJ5IHVzZXJzIHJlZ2lzdGVyZWQgaW4gb3V0c2lkZSB0aGUgaW50ZXJuYWwgY29yZS5cclxuICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXNcclxuICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMXHJcbiAgKi9cclxuICBjb25zdHJ1Y3RvcihoeXBlcnR5VVJMLCBydW50aW1lVVJMLCBtc2dCdXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gbXNnQnVzO1xyXG4gICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XHJcblxyXG4gICAgX3RoaXMuZG9tYWluID0gZGl2aWRlVVJMKGh5cGVydHlVUkwpLmRvbWFpbjtcclxuICAgIF90aGlzLmRpc2NvdmVyeVVSTCA9IGh5cGVydHlVUkw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEFkdmFuY2VkIFNlYXJjaCBmb3IgSHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IGFzc29jaWF0ZWQgd2l0aCBzb21lIHVzZXIgaWRlbnRpZmllciAoZWcgZW1haWwsIG5hbWUgLi4uKVxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlcklkZW50aWZpZXJcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXNcclxuICAqL1xyXG4gIF9pc0xlZ2FjeVVzZXIodXNlcklkZW50aWZpZXIpIHtcclxuICAgIGlmICh1c2VySWRlbnRpZmllci5pbmNsdWRlcygnOicpICYmICF1c2VySWRlbnRpZmllci5pbmNsdWRlcygndXNlcjovLycpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBBZHZhbmNlZCBTZWFyY2ggZm9yIEh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSBhc3NvY2lhdGVkIHdpdGggc29tZSB1c2VyIGlkZW50aWZpZXIgKGVnIGVtYWlsLCBuYW1lIC4uLilcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXJJZGVudGlmaWVyXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgaHlwZXJ0aWVzIHNjaGVtYXNcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXHJcbiAgKi9cclxuICBkaXNjb3Zlckh5cGVydGllc1BlclVzZXJQcm9maWxlRGF0YSh1c2VySWRlbnRpZmllciwgc2NoZW1hLCByZXNvdXJjZXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgZmlsdGVyZWRIeXBlcnRpZXMgPSBbXTtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsXHJcbiAgICAgIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVVUkwgKyAnL2Rpc2NvdmVyeS8nLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgcmVzb3VyY2U6ICcvaHlwZXJ0eS91c2VycHJvZmlsZS8nICsgdXNlcklkZW50aWZpZXIsXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHNjaGVtYSB8fCByZXNvdXJjZXMpIHtcclxuICAgICAgbXNnLmJvZHlbJ2NyaXRlcmlhJ10gPSB7XHJcbiAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXHJcbiAgICAgICAgZGF0YVNjaGVtZXM6IHNjaGVtYVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIGlmICghX3RoaXMuX2lzTGVnYWN5VXNlcih1c2VySWRlbnRpZmllcikpIHsvLyB0b2RvOiB0byByZW9tdmUgd2hlbiBkaXNjb3Zlcnkgb2YgbGVnY2F5IHVzZXJzIGFyZSBzdXBwb3J0ZWRcclxuXHJcbiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICAgIGlmKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKXtcclxuICAgICAgICAgICAgcmVwbHkuYm9keS52YWx1ZS5tYXAoZnVuY3Rpb24oaHlwZXJ0eSkge1xyXG4gICAgICAgICAgICAgICBpZihoeXBlcnR5Lmh5cGVydHlJRCAhPSBfdGhpcy5kaXNjb3ZlcnlVUkwpXHJcbiAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEh5cGVydGllcy5wdXNoKGh5cGVydHkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYoZmlsdGVyZWRIeXBlcnRpZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBsb2cubG9nKFwiW0Rpc2NvdmVyeS5kaXNjb3Zlckh5cGVydGllc1BlclVzZXJQcm9maWxlRGF0YV0gUmVwbHkgbG9nOiBcIixmaWx0ZXJlZEh5cGVydGllcyk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShmaWx0ZXJlZEh5cGVydGllcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsb2cud2FybihcIltEaXNjb3ZlcnkuZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyUHJvZmlsZURhdGFdIEVycm9yIFJlcGx5IGZvciBcIiArIHVzZXJJZGVudGlmaWVyICsgXCIgUmVhc29uOiBcIiwgcmVwbHkuYm9keS5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUoW3toeXBlcnR5SUQ6IHVzZXJJZGVudGlmaWVyLCBzdGF0dXM6ICdsaXZlJ31dKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEFkdmFuY2VkIFNlYXJjaCBmb3IgSHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IGFzc29jaWF0ZWQgd2l0aCBzb21lIHVzZXIgaWRlbnRpZmllciAoZWcgZW1haWwsIG5hbWUgLi4uKVxyXG4gICogcmV0dXJucyBEaXNjb3ZlcmVkT2JqZWN0XHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICB1c2VySWRlbnRpZmllclxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGh5cGVydGllcyBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgaHlwZXJ0aWVzIHJlc291cmNlc1xyXG4gICovXHJcbiAgZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyUHJvZmlsZURhdGFETyh1c2VySWRlbnRpZmllciwgc2NoZW1hLCByZXNvdXJjZXMpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlclByb2ZpbGVEYXRhKC4uLmFyZ3VtZW50cylcclxuICAgICAgLnRoZW4oaHlwZXJ0aWVzID0+IHtcclxuICAgICAgICByZXNvbHZlKHRoaXMuX2NvbnZlcnRUb0Rpc2NvdmVyZWRPYmplY3QoaHlwZXJ0aWVzKSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBBZHZhbmNlZCBTZWFyY2ggZm9yIERhdGFPYmplY3RzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IGFzc29jaWF0ZWQgd2l0aCBzb21lIHVzZXIgaWRlbnRpZmllciAoZWcgZW1haWwsIG5hbWUgLi4uKVxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlcklkZW50aWZpZXJcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXNcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdHNQZXJVc2VyUHJvZmlsZURhdGEodXNlcklkZW50aWZpZXIsIHNjaGVtYSwgcmVzb3VyY2VzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJyxcclxuICAgICAgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLFxyXG4gICAgICB0bzogX3RoaXMucnVudGltZVVSTCArICcvZGlzY292ZXJ5LycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICByZXNvdXJjZTogJy9kYXRhT2JqZWN0L3VzZXJwcm9maWxlLycgKyB1c2VySWRlbnRpZmllcixcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZihzY2hlbWEgfHwgcmVzb3VyY2VzKSB7XHJcbiAgICAgIG1zZy5ib2R5Wydjcml0ZXJpYSddID0ge1xyXG4gICAgICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4gICAgICAgIGRhdGFTY2hlbWVzOiBzY2hlbWFcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBpZiAoIV90aGlzLl9pc0xlZ2FjeVVzZXIodXNlcklkZW50aWZpZXIpKSB7Ly8gdG9kbzogdG8gcmVvbXZlIHdoZW4gZGlzY292ZXJ5IG9mIGxlZ2NheSB1c2VycyBhcmUgc3VwcG9ydGVkXHJcblxyXG4gICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgICBpZihyZXBseS5ib2R5LmNvZGUgPT09IDIwMCl7XHJcbiAgICAgICAgICAgIGxvZy5sb2coXCJSZXBseSBsb2c6IFwiLHJlcGx5LmJvZHkudmFsdWUpO1xyXG4gICAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkudmFsdWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZy53YXJuKFwiW0Rpc2NvdmVyeS5kaXNjb3ZlckRhdGFPYmplY3RzUGVyVXNlclByb2ZpbGVEYXRhXSBFcnJvciBSZXBseSBmb3IgXCIgKyB1c2VySWRlbnRpZmllciArIFwiIFJlYXNvbjogXCIsIHJlcGx5LmJvZHkuZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICByZXNvbHZlKFtdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUoW3toeXBlcnR5SUQ6IHVzZXJJZGVudGlmaWVyLCBzdGF0dXM6ICdsaXZlJ31dKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybnMgZGlzY292ZXJlZE9iamVjdC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGd1aWRVUkwgICAgICAgICAgICAgICAgZ3VpZCBVUkwgZS5nIHVzZXItZ3VpZDovLzx1bmlxdWUtdXNlci1pZGVudGlmaWVyPlxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGh5cGVydGllcyBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgaHlwZXJ0aWVzIHJlc291cmNlc1xyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkgICAgIGRvbWFpbiBvZiB0aGUgcmVnaXN0cnkgdG8gc2VhcmNoXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RzUGVyVXNlclByb2ZpbGVEYXRhRE8oZ3VpZFVSTCwgc2NoZW1hLCByZXNvdXJjZXMpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmRpc2NvdmVyRGF0YU9iamVjdHNQZXJVc2VyUHJvZmlsZURhdGEoLi4uYXJndW1lbnRzKVxyXG4gICAgICAgIC50aGVuKHJlZ2lzdHJ5T2JqZWN0cyA9PiByZXNvbHZlKHRoaXMuX2NvbnZlcnRUb0Rpc2NvdmVyZWRPYmplY3QocmVnaXN0cnlPYmplY3RzKSkpXHJcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHJlamVjdChlcnJvcikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEFkdmFuY2VkIFNlYXJjaCBmb3IgSHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IGFzc29jaWF0ZWQgd2l0aCBzb21lIEdVSURcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGd1aWRVUkwgICAgICAgICAgICAgICAgZ3VpZCBVUkwgZS5nIHVzZXItZ3VpZDovLzx1bmlxdWUtdXNlci1pZGVudGlmaWVyPlxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGh5cGVydGllcyBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgaHlwZXJ0aWVzIHJlc291cmNlc1xyXG4gICovXHJcbiAgZGlzY292ZXJIeXBlcnRpZXNQZXJHVUlEKGd1aWRVUkwsIHNjaGVtYSwgcmVzb3VyY2VzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGZpbHRlcmVkSHlwZXJ0aWVzID0gW107XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLFxyXG4gICAgICBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsXHJcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lVVJMICsgJy9kaXNjb3ZlcnkvJyxcclxuICAgICAgYm9keToge1xyXG4gICAgICAgIHJlc291cmNlOiAnL2h5cGVydHkvZ3VpZC8nICsgZ3VpZFVSTCxcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZihzY2hlbWEgfHwgcmVzb3VyY2VzKSB7XHJcbiAgICAgIG1zZy5ib2R5Wydjcml0ZXJpYSddID0ge1xyXG4gICAgICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4gICAgICAgIGRhdGFTY2hlbWVzOiBzY2hlbWFcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGlmKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKXtcclxuICAgICAgICAgIHJlcGx5LmJvZHkudmFsdWUubWFwKGZ1bmN0aW9uKGh5cGVydHkpIHtcclxuICAgICAgICAgICAgIGlmKGh5cGVydHkuaHlwZXJ0eUlEICE9IF90aGlzLmRpc2NvdmVyeVVSTClcclxuICAgICAgICAgICAgICAgICBmaWx0ZXJlZEh5cGVydGllcy5wdXNoKGh5cGVydHkpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBpZihmaWx0ZXJlZEh5cGVydGllcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHJlamVjdCgnTm8gSHlwZXJ0eSB3YXMgZm91bmQnKTtcclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsb2cubG9nKFwiUmVwbHkgbG9nOiBcIixmaWx0ZXJlZEh5cGVydGllcyk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZmlsdGVyZWRIeXBlcnRpZXMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGxvZy53YXJuKFwiW0Rpc2NvdmVyeS5kaXNjb3Zlckh5cGVydGllc1BlckdVSURdIEVycm9yIFJlcGx5IGZvciBcIiArIGd1aWRVUkwgKyBcIiBSZWFzb246IFwiLCByZXBseS5ib2R5LmRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgYXNzb2NpYXRlZCB3aXRoIHNvbWUgR1VJRFxyXG4gICogcmV0dXJucyBEaXNjb3ZlcmVkT2JqZWN0XHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBndWlkVVJMICAgICAgICAgICAgICAgIGd1aWQgVVJMIGUuZyB1c2VyLWd1aWQ6Ly88dW5pcXVlLXVzZXItaWRlbnRpZmllcj5cclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXNcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0aWVzUGVyR1VJRERPKGd1aWRVUkwsIHNjaGVtYSwgcmVzb3VyY2VzKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5kaXNjb3Zlckh5cGVydGllc1BlckdVSUQoLi4uYXJndW1lbnRzKVxyXG4gICAgICAudGhlbihoeXBlcnRpZXMgPT4ge1xyXG4gICAgICAgIHJlc29sdmUodGhpcy5fY29udmVydFRvRGlzY292ZXJlZE9iamVjdChoeXBlcnRpZXMpKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IHJlamVjdChlcnJvcikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEFkdmFuY2VkIFNlYXJjaCBmb3IgRGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgYXNzb2NpYXRlZCB3aXRoIHNvbWUgR1VJRFxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZ3VpZFVSTCAgICAgICAgICAgICAgICBndWlkIFVSTCBlLmcgdXNlci1ndWlkOi8vPHVuaXF1ZS11c2VyLWlkZW50aWZpZXI+XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgaHlwZXJ0aWVzIHNjaGVtYXNcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdHNQZXJHVUlEKGd1aWRVUkwsIHNjaGVtYSwgcmVzb3VyY2VzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJyxcclxuICAgICAgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLFxyXG4gICAgICB0bzogX3RoaXMucnVudGltZVVSTCArICcvZGlzY292ZXJ5LycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICByZXNvdXJjZTogJy9kYXRhT2JqZWN0L2d1aWQvJyArIGd1aWRVUkwsXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYoc2NoZW1hIHx8IHJlc291cmNlcykge1xyXG4gICAgICBtc2cuYm9keVsnY3JpdGVyaWEnXSA9IHtcclxuICAgICAgICByZXNvdXJjZXM6IHJlc291cmNlcyxcclxuICAgICAgICBkYXRhU2NoZW1lczogc2NoZW1hXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBpZihyZXBseS5ib2R5LmNvZGUgPT09IDIwMCl7XHJcbiAgICAgICAgICBsb2cubG9nKFwiUmVwbHkgbG9nOiBcIixyZXBseS5ib2R5LnZhbHVlKTtcclxuICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgbG9nLndhcm4oXCJbRGlzY292ZXJ5LmRpc2NvdmVyRGF0YU9iamVjdHNQZXJHVUlEXSBFcnJvciBSZXBseSBmb3IgXCIgKyBndWlkVVJMICsgXCIgUmVhc29uOiBcIiwgcmVwbHkuYm9keS5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICByZXNvbHZlKFtdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgZGF0YU9iamVjdCByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm5zIGRpc2NvdmVyZWRPYmplY3QuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBndWlkVVJMICAgICAgICAgICAgICAgIGd1aWQgVVJMIGUuZyB1c2VyLWd1aWQ6Ly88dW5pcXVlLXVzZXItaWRlbnRpZmllcj5cclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXNcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaFxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0c1BlckdVSURETyhndWlkVVJMLCBzY2hlbWEsIHJlc291cmNlcykge1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuZGlzY292ZXJEYXRhT2JqZWN0c1BlckdVSUQoLi4uYXJndW1lbnRzKVxyXG4gICAgICAgIC50aGVuKHJlZ2lzdHJ5T2JqZWN0cyA9PiByZXNvbHZlKHRoaXMuX2NvbnZlcnRUb0Rpc2NvdmVyZWRPYmplY3QocmVnaXN0cnlPYmplY3RzKSkpXHJcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHJlamVjdChlcnJvcikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgaHlwZXJ0aWVzIHNjaGVtYXNcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0aWVzKHVzZXIsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG4gICAgbGV0IGZpbHRlcmVkSHlwZXJ0aWVzID0gW107XHJcblxyXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJyxcclxuICAgICAgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLFxyXG4gICAgICB0bzogX3RoaXMucnVudGltZVVSTCArICcvZGlzY292ZXJ5LycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICByZXNvdXJjZTogJy9oeXBlcnR5L3VzZXIvJyArIHVzZXIsXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYoc2NoZW1hIHx8IHJlc291cmNlcykge1xyXG4gICAgICBtc2cuYm9keVsnY3JpdGVyaWEnXSA9IHtcclxuICAgICAgICByZXNvdXJjZXM6IHJlc291cmNlcyxcclxuICAgICAgICBkYXRhU2NoZW1lczogc2NoZW1hLFxyXG4gICAgICAgIGRvbWFpbjogYWN0aXZlRG9tYWluXHJcbiAgICAgIH07XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgIG1zZy5ib2R5Wydjcml0ZXJpYSddID0ge1xyXG4gICAgICAgIGRvbWFpbjogYWN0aXZlRG9tYWluXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBpZiAoIV90aGlzLl9pc0xlZ2FjeVVzZXIodXNlcikpIHsvLyB0b2RvOiB0byByZW9tdmUgd2hlbiBkaXNjb3Zlcnkgb2YgbGVnY2F5IHVzZXJzIGFyZSBzdXBwb3J0ZWRcclxuXHJcbiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICAgIGlmKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwIHx8IHJlcGx5LmJvZHkuY29kZSA9PT0gNTAwKXtcclxuICAgICAgICAgICAgcmVwbHkuYm9keS52YWx1ZS5tYXAoZnVuY3Rpb24oaHlwZXJ0eSkge1xyXG4gICAgICAgICAgICAgICBpZihoeXBlcnR5Lmh5cGVydHlJRCAhPSBfdGhpcy5kaXNjb3ZlcnlVUkwpXHJcbiAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEh5cGVydGllcy5wdXNoKGh5cGVydHkpO1xyXG4gICAgICAgICAgICB9KTtcclxuLyogICAgICAgICAgICBpZihmaWx0ZXJlZEh5cGVydGllcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgcmVqZWN0KCdObyBIeXBlcnR5IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgICAgICBlbHNlIHsqL1xyXG4gICAgICAgICAgICAgIGxvZy5sb2coXCJbRGlzY292ZXJ5LmRpc2NvdmVySHlwZXJ0aWVzXSBSZXBseSA6IFwiLGZpbHRlcmVkSHlwZXJ0aWVzKTtcclxuICAgICAgICAgICAgICByZXNvbHZlKGZpbHRlcmVkSHlwZXJ0aWVzKTtcclxuLy8gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbG9nLndhcm4oXCJbRGlzY292ZXJ5LmRpc2NvdmVySHlwZXJ0aWVzXSBFcnJvciBSZXBseSBmb3IgXCIgKyB1c2VyICsgXCIgUmVhc29uOiBcIiwgcmVwbHkuYm9keS5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZmlsdGVyZWRIeXBlcnRpZXMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUoW3toeXBlcnR5SUQ6IHVzZXIsIHN0YXR1czogJ2xpdmUnfV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIEh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSxcclxuICAqcmV0dXJucyBEaXNjb3ZlcmVkT2JqZWN0XHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICB1c2VyICAgICAgICAgICAgICAgICAgdXNlciBpZGVudGlmaWVyLCBlaXRoZXIgaW4gdXJsIG9yIGVtYWlsIGZvcm1hdFxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGh5cGVydGllcyBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgaHlwZXJ0aWVzIHJlc291cmNlc1xyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkgICAgIGRvbWFpbiBvZiB0aGUgcmVnaXN0cnkgdG8gc2VhcmNoXHJcbiAgKi9cclxuICBkaXNjb3Zlckh5cGVydGllc0RPKHVzZXIsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmRpc2NvdmVySHlwZXJ0aWVzKC4uLmFyZ3VtZW50cylcclxuICAgICAgLnRoZW4oaHlwZXJ0aWVzID0+IHtcclxuICAgICAgICByZXNvbHZlKHRoaXMuX2NvbnZlcnRUb0Rpc2NvdmVyZWRPYmplY3QoaHlwZXJ0aWVzKSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFkdmFuY2VkIFNlYXJjaCBmb3IgRGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdHMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGRhdGFPYmplY3RzIHJlc291cmNlc1xyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkgICAgIGRvbWFpbiBvZiB0aGUgcmVnaXN0cnkgdG8gc2VhcmNoXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RzKHVzZXIsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGFjdGl2ZURvbWFpbiA9ICghZG9tYWluKSA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsXHJcbiAgICAgIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVVUkwgKyAnL2Rpc2NvdmVyeS8nLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgcmVzb3VyY2U6ICcvZGF0YU9iamVjdC91c2VyLycgKyB1c2VyLFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmKHNjaGVtYSB8fCByZXNvdXJjZXMpIHtcclxuICAgICAgbXNnLmJvZHlbJ2NyaXRlcmlhJ10gPSB7XHJcbiAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXHJcbiAgICAgICAgZGF0YVNjaGVtZXM6IHNjaGVtYSxcclxuICAgICAgICBkb21haW46IGFjdGl2ZURvbWFpblxyXG4gICAgICB9O1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICBtc2cuYm9keVsnY3JpdGVyaWEnXSA9IHtcclxuICAgICAgICBkb21haW46IGFjdGl2ZURvbWFpblxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBpZihyZXBseS5ib2R5LmNvZGUgPT09IDIwMCl7XHJcbiAgICAgICAgICBsb2cubG9nKFwiUmVwbHkgVmFsdWUgTG9nOiBcIixyZXBseS5ib2R5LnZhbHVlKTtcclxuICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgbG9nLndhcm4oXCJbRGlzY292ZXJ5LmRpc2NvdmVyRGF0YU9iamVjdHNdIEVycm9yIFJlcGx5IGZvciBcIiArIHVzZXIgKyBcIiBSZWFzb246IFwiLCByZXBseS5ib2R5LmRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybnMgZGlzY292ZXJlZE9iamVjdC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdHMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGRhdGFPYmplY3RzIHJlc291cmNlc1xyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkgICAgIGRvbWFpbiBvZiB0aGUgcmVnaXN0cnkgdG8gc2VhcmNoXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RzRE8odXNlciwgc2NoZW1hLCByZXNvdXJjZXMsIGRvbWFpbikge1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuZGlzY292ZXJEYXRhT2JqZWN0cyguLi5hcmd1bWVudHMpXHJcbiAgICAgICAgLnRoZW4ocmVnaXN0cnlPYmplY3RzID0+IHJlc29sdmUodGhpcy5fY29udmVydFRvRGlzY292ZXJlZE9iamVjdChyZWdpc3RyeU9iamVjdHMpKSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxyXG4gICogcmV0dXJuIHRoZSBoeXBlcnR5IGluZm9ybWF0aW9uLCBpZiBmb3VuZC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIHVybCAgaHlwZXJ0eSBVUkxcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKVxyXG4gICovXHJcbiAgZGlzY292ZXJIeXBlcnR5UGVyVVJMKHVybCwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBhY3RpdmVEb21haW4gPSAoIWRvbWFpbikgPyBfdGhpcy5kb21haW4gOiBkb21haW47XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLFxyXG4gICAgICBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsXHJcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lVVJMICsgJy9kaXNjb3ZlcnkvJyxcclxuICAgICAgYm9keToge1xyXG4gICAgICAgIHJlc291cmNlOiAnL2h5cGVydHkvdXJsLycgKyB1cmwsXHJcbiAgICAgICAgY3JpdGVyaWE6IHtcclxuICAgICAgICAgIGRvbWFpbjogYWN0aXZlRG9tYWluXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgaWYocmVwbHkuYm9keS5jb2RlID09PSAyMDApe1xyXG4gICAgICAgICAgbG9nLmxvZyhcIlJlcGx5IFZhbHVlIExvZzogXCIscmVwbHkuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGxvZy53YXJuKFwiW0Rpc2NvdmVyeS5kaXNjb3Zlckh5cGVydHlQZXJVUkxdIEVycm9yIFJlcGx5IGZvciBcIiArIHVybCArIFwiIFJlYXNvbjogXCIsIHJlcGx5LmJvZHkuZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgcmVzb2x2ZShbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm5zIGRpc2NvdmVyZWRPYmplY3QuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICB1cmwgIGh5cGVydHkgVVJMXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0eVBlclVSTERPKHVybCwgZG9tYWluKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5kaXNjb3Zlckh5cGVydHlQZXJVUkwoLi4uYXJndW1lbnRzKVxyXG4gICAgICAgIC50aGVuKGh5cGVydHkgPT4gcmVzb2x2ZShuZXcgRGlzY292ZXJlZE9iamVjdChoeXBlcnR5LCB0aGlzLnJ1bnRpbWVVUkwsIHRoaXMuZGlzY292ZXJ5VVJMLCB0aGlzLm1lc3NhZ2VCdXMsIHRoaXMpKSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiwgaWYgZm91bmQuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICB1cmwgIGRhdGFPYmplY3QgVVJMXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCh1cmwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJyxcclxuICAgICAgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLFxyXG4gICAgICB0bzogX3RoaXMucnVudGltZVVSTCArICcvZGlzY292ZXJ5LycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICByZXNvdXJjZTogJy9kYXRhT2JqZWN0L3VybC8nICsgdXJsLFxyXG4gICAgICAgIGNyaXRlcmlhOiB7XHJcbiAgICAgICAgICBkb21haW46IGFjdGl2ZURvbWFpblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGlmKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKXtcclxuICAgICAgICAgIGxvZy5sb2coXCJSZXBseSBWYWx1ZSBMb2c6IFwiLHJlcGx5LmJvZHkudmFsdWUpO1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBsb2cud2FybihcIltEaXNjb3ZlcnkuZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMXSBFcnJvciBSZXBseSBmb3IgXCIgKyB1cmwgKyBcIiBSZWFzb246IFwiLCByZXBseS5ib2R5LmRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybnMgZGlzY292ZXJlZE9iamVjdC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIHVybCAgZGF0YU9iamVjdCBVUkxcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKVxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMRE8odXJsLCBkb21haW4pIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCguLi5hcmd1bWVudHMpXHJcbiAgICAgICAgLnRoZW4ocmVnaXN0cnlPYmplY3QgPT4gcmVzb2x2ZShuZXcgRGlzY292ZXJlZE9iamVjdChyZWdpc3RyeU9iamVjdCwgdGhpcy5ydW50aW1lVVJMLCB0aGlzLmRpc2NvdmVyeVVSTCwgdGhpcy5tZXNzYWdlQnVzLCB0aGlzKSkpXHJcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHJlamVjdChlcnJvcikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgYW4gZGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgd2l0aCBhIGdpdmVuIG5hbWUsIGFuZFxyXG4gICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0cyBpbmZvcm1hdGlvbiwgaWYgZm91bmQuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICBuYW1lICBkYXRhT2JqZWN0IFVSTFxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGRhdGFPYmplY3RzIHNjaGVtYXNcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBkYXRhT2JqZWN0cyByZXNvdXJjZXNcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKVxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0c1Blck5hbWUobmFtZSwgc2NoZW1hLCByZXNvdXJjZXMsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJyxcclxuICAgICAgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLFxyXG4gICAgICB0bzogX3RoaXMucnVudGltZVVSTCArICcvZGlzY292ZXJ5LycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICByZXNvdXJjZTogJy9kYXRhT2JqZWN0L25hbWUvJyArIG5hbWVcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZihzY2hlbWEgfHwgcmVzb3VyY2VzKSB7XHJcbiAgICAgIG1zZy5ib2R5Wydjcml0ZXJpYSddID0ge1xyXG4gICAgICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4gICAgICAgIGRhdGFTY2hlbWVzOiBzY2hlbWEsXHJcbiAgICAgICAgZG9tYWluOiBhY3RpdmVEb21haW5cclxuICAgICAgfTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgbXNnLmJvZHlbJ2NyaXRlcmlhJ10gPSB7XHJcbiAgICAgICAgZG9tYWluOiBhY3RpdmVEb21haW5cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgaWYocmVwbHkuYm9keS5jb2RlID09PSAyMDApe1xyXG4gICAgICAgICAgbG9nLmxvZyhcIlJlcGx5IFZhbHVlIExvZzogXCIscmVwbHkuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGxvZy53YXJuKFwiW0Rpc2NvdmVyeS5kaXNjb3ZlckRhdGFPYmplY3RzUGVyTmFtZV0gRXJyb3IgUmVwbHkgZm9yIFwiICsgbmFtZSArIFwiIFJlYXNvbjogXCIsIHJlcGx5LmJvZHkuZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgcmVzb2x2ZShbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxyXG4gICogcmV0dXJucyBkaXNjb3ZlcmVkT2JqZWN0LlxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgICAgbmFtZSAgZGF0YU9iamVjdCBVUkxcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBkYXRhT2JqZWN0cyBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgZGF0YU9iamVjdHMgcmVzb3VyY2VzXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdHNQZXJOYW1lRE8obmFtZSwgc2NoZW1hLCByZXNvdXJjZXMsIGRvbWFpbikge1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuZGlzY292ZXJEYXRhT2JqZWN0c1Blck5hbWUoLi4uYXJndW1lbnRzKVxyXG4gICAgICAgIC50aGVuKHJlZ2lzdHJ5T2JqZWN0cyA9PiByZXNvbHZlKHRoaXMuX2NvbnZlcnRUb0Rpc2NvdmVyZWRPYmplY3QocmVnaXN0cnlPYmplY3RzKSkpXHJcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHJlamVjdChlcnJvcikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgc3BlY2lmaWMgcmVwb3J0ZXIgZGF0YU9iamVjdCByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm4gdGhlIGRhdGFPYmplY3RzIGZyb20gdGhhdCByZXBvcnRlci5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHJlcG9ydGVyICAgICBkYXRhT2JqZWN0IHJlcG9ydGVyXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdHMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGRhdGFPYmplY3RzIHJlc291cmNlc1xyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluICAgICAgIChPcHRpb25hbClcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdHNQZXJSZXBvcnRlcihyZXBvcnRlciwgc2NoZW1hLCByZXNvdXJjZXMsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xyXG5cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsXHJcbiAgICAgIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVVUkwgKyAnL2Rpc2NvdmVyeS8nLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgcmVzb3VyY2U6ICcvZGF0YU9iamVjdC9yZXBvcnRlci8nICsgcmVwb3J0ZXJcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZihzY2hlbWEgfHwgcmVzb3VyY2VzKSB7XHJcbiAgICAgIG1zZy5ib2R5Wydjcml0ZXJpYSddID0ge1xyXG4gICAgICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxyXG4gICAgICAgIGRhdGFTY2hlbWVzOiBzY2hlbWEsXHJcbiAgICAgICAgZG9tYWluOiBhY3RpdmVEb21haW5cclxuICAgICAgfTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgbXNnLmJvZHlbJ2NyaXRlcmlhJ10gPSB7XHJcbiAgICAgICAgZG9tYWluOiBhY3RpdmVEb21haW5cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgaWYocmVwbHkuYm9keS5jb2RlID09PSAyMDApe1xyXG4gICAgICAgICAgbG9nLmxvZyhcIlJlcGx5IFZhbHVlIExvZzogXCIscmVwbHkuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGxvZy53YXJuKFwiW0Rpc2NvdmVyeS5kaXNjb3ZlckRhdGFPYmplY3RzUGVyTmFtZV0gRXJyb3IgUmVwbHkgZm9yIFwiICsgcmVwb3J0ZXIgKyBcIiBSZWFzb246IFwiLCByZXBseS5ib2R5LmRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybnMgZGlzY292ZXJlZE9iamVjdC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIG5hbWUgIGRhdGFPYmplY3QgVVJMXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdHMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGRhdGFPYmplY3RzIHJlc291cmNlc1xyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RzUGVyUmVwb3J0ZXJETyhyZXBvcnRlciwgc2NoZW1hLCByZXNvdXJjZXMsIGRvbWFpbikge1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuZGlzY292ZXJEYXRhT2JqZWN0c1BlclJlcG9ydGVyKC4uLmFyZ3VtZW50cylcclxuICAgICAgICAudGhlbihyZWdpc3RyeU9iamVjdHMgPT4gcmVzb2x2ZSh0aGlzLl9jb252ZXJ0VG9EaXNjb3ZlcmVkT2JqZWN0KHJlZ2lzdHJ5T2JqZWN0cykpKVxyXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2NvbnZlcnRUb0Rpc2NvdmVyZWRPYmplY3QocmVnaXN0cnlPYmplY3RzKSB7XHJcbiAgICByZXR1cm4gcmVnaXN0cnlPYmplY3RzLm1hcCgocmVnaXN0cnlPYmplY3QpID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBEaXNjb3ZlcmVkT2JqZWN0KHJlZ2lzdHJ5T2JqZWN0LCB0aGlzLnJ1bnRpbWVVUkwsIHRoaXMuZGlzY292ZXJ5VVJMLCB0aGlzLm1lc3NhZ2VCdXMsIHRoaXMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBkYXRhT2JqZWN0cyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeVxyXG4gICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZC4gVXNlIGRpc2NvdmVyRGF0YU9iamVjdHNQZXJOYW1lIGluc3RlYWRcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIG5hbWUgICAgICAgICAgICAgICAgICBuYW1lIG9mIHRoZSBkYXRhT2JqZWN0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdCBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgZGF0YU9iamVjdCByZXNvdXJjZXNcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaFxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0KG5hbWUsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG4gICAgLy9sZXQgdXNlcklkZW50aWZpZXIgPSBjb252ZXJ0VG9Vc2VyVVJMKHVzZXIpO1xyXG5cclxuICAgIGFjdGl2ZURvbWFpbiA9ICghZG9tYWluKSA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluLCBib2R5OiB7IHJlc291cmNlOiBuYW1lLFxyXG4gICAgICBjcml0ZXJpYToge3Jlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogc2NoZW1hfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICBsb2cubG9nKCdbRGlzY292ZXJ5XScsIHJlcGx5KVxyXG5cclxuICAgICAgICBpZihyZXBseS5ib2R5LmNvZGU+Mjk5KSB7XHJcbiAgICAgICAgICBsb2cud2FybihcIltEaXNjb3ZlcnkuZGlzY292ZXJEYXRhT2JqZWN0XSBFcnJvciBSZXBseSBmb3IgXCIgKyBuYW1lICsgXCIgUmVhc29uOiBcIiwgcmVwbHkuYm9keS5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShbXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaHlwZXJ0aWVzID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGh5cGVydGllcykge1xyXG4gICAgICAgICAgcmVzb2x2ZShoeXBlcnRpZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKFtdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcclxuICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIFVzZSBkaXNjb3Zlckh5cGVydGllcyBpbnN0ZWFkXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICB1c2VyICAgICAgICAgICAgICAgICAgdXNlciBpZGVudGlmaWVyLCBlaXRoZXIgaW4gdXJsIG9yIGVtYWlsIGZvcm1hdFxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGh5cGVydGllcyBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgaHlwZXJ0aWVzIHJlc291cmNlc1xyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkgICAgIGRvbWFpbiBvZiB0aGUgcmVnaXN0cnkgdG8gc2VhcmNoXHJcbiAgKi9cclxuICBkaXNjb3Zlckh5cGVydHkodXNlciwgc2NoZW1hLCByZXNvdXJjZXMsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcbiAgICBsZXQgdXNlcklkZW50aWZpZXIgPSBjb252ZXJ0VG9Vc2VyVVJMKHVzZXIpO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBsb2cubG9nKCdbRGlzY292ZXJ5LmRpc2NvdmVySHlwZXJ0eV0gQUNUSVZFIERPTUFJTiAtPiAnLCBhY3RpdmVEb21haW4sICd1c2VyLT4nLCB1c2VyLCAnc2NoZW1hLT4nLCBzY2hlbWEsICdyZXNvdXJjZXMtPicsIHJlc291cmNlcywgJ2RvbWFpbi0+JywgZG9tYWluKTtcclxuICAgICAgaWYgKHVzZXIuaW5jbHVkZXMoJzonKSAmJiAhdXNlci5pbmNsdWRlcygndXNlcjovLycpKSB7XHJcbiAgICAgICAgbG9nLmxvZygnW0Rpc2NvdmVyeS5kaXNjb3Zlckh5cGVydHldICcgKyB1c2VyICsgJyBpcyBsZWdhY3kgZG9tYWluJyk7XHJcbiAgICAgICAgbGV0IGxlZ2FjeVVzZXIgPSB7IHVzZXJJRDogdXNlciwgaHlwZXJ0eUlEOiB1c2VyLCBzY2hlbWE6IHNjaGVtYSwgcmVzb3VyY2VzOiByZXNvdXJjZXMgfTtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZShsZWdhY3lVc2VyKTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgbXNnID0ge1xyXG4gICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4sIGJvZHk6IHsgcmVzb3VyY2U6IHVzZXJJZGVudGlmaWVyLFxyXG4gICAgICAgIGNyaXRlcmlhOiB7cmVzb3VyY2VzOiByZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBzY2hlbWF9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgbG9nLmluZm8oJ1tEaXNjb3ZlcnldIG1zZyB0byBzZW5kLT4nLCBtc2cpO1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsb2cuaW5mbygnW0Rpc2NvdmVyeV0gT04gZGlzY292ZXJIeXBlcnR5LT4nLCByZXBseSk7XHJcbiAgICAgICAgbGV0IGh5cGVydGllcyA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnRpZXMpIHtcclxuICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdObyBIeXBlcnR5IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCB1c2VycyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm4gdGhlIGxhc3QgaHlwZXJ0eSBpbnN0YW5jZSByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyLlxyXG4gICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZC4gVXNlIGRpc2NvdmVySHlwZXJ0eSBpbnN0ZWFkXHJcbiAgKiBAcGFyYW0gIHtlbWFpbH0gICAgICAgICAgICAgIGVtYWlsXHJcbiAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgLy8gSGFjayBmb3IgbGVnYWN5IHVzZXJzXHJcbiAgICAgIGlmIChlbWFpbC5pbmNsdWRlcygnOicpICYmICFlbWFpbC5pbmNsdWRlcygndXNlcjovLycpKSB7XHJcbiAgICAgICAgbG9nLmxvZygnW0Rpc2NvdmVyeS5kaXNjb3Zlckh5cGVydHldICcgKyBlbWFpbCArJ2lzIGxlZ2FjeSBkb21haW4nKTtcclxuICAgICAgICBsZXQgbGVnYWN5VXNlciA9IHsgaWQ6IGVtYWlsLCBoeXBlcnR5VVJMOiBlbWFpbCwgZGVzY3JpcHRvcjogJ3Vua25vd24nIH07XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobGVnYWN5VXNlcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTtcclxuXHJcblxyXG4gICAgICAvLyBtZXNzYWdlIHRvIHF1ZXJ5IGRvbWFpbiByZWdpc3RyeSwgYXNraW5nIGZvciBhIHVzZXIgaHlwZXJ0eS5cclxuICAgICAgbGV0IG1lc3NhZ2UgPSB7XHJcbiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiwgYm9keTogeyByZXNvdXJjZTogaWRlbnRpdHlVUkx9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBsb2cuaW5mbygnW0Rpc2NvdmVyeV0gTWVzc2FnZTogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7XHJcblxyXG4gICAgICAvL2xvZy5pbmZvKCdbRGlzY292ZXJ5XSBtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgbG9nLmluZm8oJ1tEaXNjb3ZlcnldIG1lc3NhZ2UgcmVwbHknLCByZXBseSk7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnR5O1xyXG4gICAgICAgIGxldCBtb3N0UmVjZW50O1xyXG4gICAgICAgIGxldCBsYXN0SHlwZXJ0eTtcclxuICAgICAgICBsZXQgdmFsdWUgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBmb3IgKGh5cGVydHkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgIGlmICh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAobW9zdFJlY2VudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XHJcbiAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGxldCBoeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XHJcbiAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQuZ2V0VGltZSgpIDwgaHlwZXJ0eURhdGUuZ2V0VGltZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBtb3N0UmVjZW50ID0gaHlwZXJ0eURhdGU7XHJcbiAgICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsb2cuaW5mbygnW0Rpc2NvdmVyeV0gTGFzdCBIeXBlcnR5OiAnLCBsYXN0SHlwZXJ0eSwgbW9zdFJlY2VudCk7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnR5VVJMID0gbGFzdEh5cGVydHk7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnR5VVJMID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpZFBhY2thZ2UgPSB7XHJcbiAgICAgICAgICBpZDogZW1haWwsXHJcbiAgICAgICAgICBkZXNjcmlwdG9yOiB2YWx1ZVtoeXBlcnR5VVJMXS5kZXNjcmlwdG9yLFxyXG4gICAgICAgICAgaHlwZXJ0eVVSTDogaHlwZXJ0eVVSTFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxvZy5pbmZvKCdbRGlzY292ZXJ5XSA9PT0+IGh5cGVydHlEaXNjb3ZlcnkgbWVzc2FnZUJ1bmRsZTogJywgaWRQYWNrYWdlKTtcclxuICAgICAgICByZXNvbHZlKGlkUGFja2FnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgdXNlcnMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxyXG4gICogcmV0dXJuIHRoZSBhbGwgdGhlIGh5cGVydGllcyByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyXHJcbiAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkLiBVc2UgZGlzY292ZXJIeXBlcnR5IGluc3RlYWRcclxuICAqIEBwYXJhbSAge2VtYWlsfSAgICAgICAgICAgICAgZW1haWxcclxuICAqIEBwYXJhbSAge2RvbWFpbn0gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKVxyXG4gICovXHJcbiAgZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyKGVtYWlsLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG4gICAgbG9nLmxvZygnb24gRnVuY3Rpb24tPicsIGVtYWlsKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIGlmIChlbWFpbC5pbmNsdWRlcygnOicpICYmICFlbWFpbC5pbmNsdWRlcygndXNlcjovLycpKSB7XHJcbiAgICAgICAgbG9nLmxvZygnW0Rpc2NvdmVyeS5kaXNjb3Zlckh5cGVydHldIGlzIGxlZ2FjeSBkb21haW4nKTtcclxuICAgICAgICBsZXQgbGVnYWN5VXNlciA9IHsgdXNlcklEOiBlbWFpbCwgaHlwZXJ0eUlEOiBlbWFpbCwgc2NoZW1hOiBzY2hlbWEsIHJlc291cmNlczogcmVzb3VyY2VzIH07XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobGVnYWN5VXNlcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTtcclxuXHJcbiAgICAgIC8vIG1lc3NhZ2UgdG8gcXVlcnkgZG9tYWluIHJlZ2lzdHJ5LCBhc2tpbmcgZm9yIGEgdXNlciBoeXBlcnR5LlxyXG4gICAgICBsZXQgbWVzc2FnZSA9IHtcclxuICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGxvZy5sb2coJ1tEaXNjb3ZlcnldIE1lc3NhZ2UgZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTtcclxuXHJcbiAgICAgIC8vbG9nLmluZm8oJ1tEaXNjb3ZlcnldIG1lc3NhZ2UgUkVBRCcsIG1lc3NhZ2UpO1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcclxuICAgICAgICBsb2cuaW5mbygnW0Rpc2NvdmVyeV0gZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyIHJlcGx5JywgcmVwbHkpO1xyXG5cclxuICAgICAgICBsZXQgdmFsdWUgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdVc2VyIEh5cGVydHkgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCB1c2VycyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm4gdGhlIGFsbCB0aGUgaHlwZXJ0aWVzIHJlZ2lzdGVyZWQgYnkgdGhlIHVzZXJcclxuICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIFVzZSBkaXNjb3Zlckh5cGVydHkgaW5zdGVhZFxyXG4gICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbFxyXG4gICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKi9cclxuICByZXN1bWVEaXNjb3ZlcmllcygpIHtcclxuXHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxvZy5sb2coJ1tEaXNjb3ZlcnldIHJlc3VtZURpc2NvdmVyaWVzJyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgbGV0IG1zZyA9IHtcclxuICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJ1bnRpbWVVUkwgKyAnL3N1YnNjcmlwdGlvbnMnLCBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5kaXNjb3ZlcnlVUkx9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KT0+e1xyXG4gICAgICAgIGxvZy5sb2coJ1tEaXNjb3ZlcnkucmVzdW1lRGlzY292ZXJpZXNdIHJlcGx5OiAnLCByZXBseSk7XHJcblxyXG4gICAgICAgIGxldCBub3RpZmljYXRpb25zID0gW107XHJcblxyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgbGV0IHVybHMgPSByZXBseS5ib2R5LnZhbHVlOy8vIFVSTHMgdG8gYWRkIGxpc3RlbmVycyB0b1xyXG5cclxuICAgICAgICAgIC8vbGV0cyBjcmVhdGUgb25lIERpc2NvdmVyeU9iamVjdCBwZXIgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICB1cmxzLmZvckVhY2goKHVybCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgb2JqZWN0VXJsID0gdXJsLnNwbGl0KCcvcmVnaXN0cmF0aW9uJylbMF07XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0ge307XHJcbiAgICAgICAgICAgIGRhdGEudXJsID0gb2JqZWN0VXJsO1xyXG4gICAgICAgICAgICBsb2cubG9nKCdbRGlzY292ZXJ5LnJlc3VtZURpc2NvdmVyaWVzXSBhZGRpbmcgbGlzdGVuZXIgdG86ICcsIG9iamVjdFVybCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob2JqZWN0VXJsLmluY2x1ZGVzKCdoeXBlcnR5Oi8vJykpIHtcclxuICAgICAgICAgICAgICBub3RpZmljYXRpb25zLnB1c2goX3RoaXMuZGlzY292ZXJIeXBlcnR5UGVyVVJMRE8ob2JqZWN0VXJsKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgbm90aWZpY2F0aW9ucy5wdXNoKF90aGlzLmRpc2NvdmVyRGF0YU9iamVjdFBlclVSTERPKG9iamVjdFVybCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIFByb21pc2UuYWxsKG5vdGlmaWNhdGlvbnMpLnRoZW4odmFsdWVzPT57IHJlc29sdmUodmFsdWVzKTsgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGlzY292ZXJ5O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7QUFDQTtBQUVBOzs7O0FBR0E7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFKQTtBQUtBO0FBS0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBekNBO0FBQ0E7QUE4Q0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1RUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUlBOzs7QUFFQTs7Ozs7O0FBTUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBT0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7OztBQVFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBT0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUpBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7OztBQVFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUpBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQU9BO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7O0FBUUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFGQTtBQUpBO0FBWUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU1BO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBRkE7QUFKQTtBQVlBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFNQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7O0FBUUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7OztBQVFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBREE7QUFEQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFEQTtBQURBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFEQTtBQUlBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURBO0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBT0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7Ozs7OztBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\r\n*/\nvar AllowOverrides =\n/*#__PURE__*/\nfunction () {\n  function AllowOverrides() {\n    _classCallCheck(this, AllowOverrides);\n  }\n\n  _createClass(AllowOverrides, [{\n    key: "combine",\n\n    /**\r\n    * Given an array of individual authorization decisions, prioritizes a positive one.\r\n    * @param    {boolean[]}   decisions\r\n    * @returns  {boolean}\r\n    */\n    value: function combine(decisions) {\n      if (decisions.indexOf(true) !== -1) {\n        return true;\n      } else {\n        if (decisions.indexOf(false) !== -1) {\n          return false;\n        } else {\n          return \'Not Applicable\';\n        }\n      }\n    }\n  }]);\n\n  return AllowOverrides;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (AllowOverrides);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcG9saWN5L2NvbWJpbmluZ0FsZ29yaXRobXMvQWxsb3dPdmVycmlkZXMuanM/MGQxNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG4vKipcclxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cclxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIGNvbWJpbmUgdGhlIGF1dGhvcml6YXRpb24gZGVjaXNpb25zIHRoYXQgcmVzdWx0IGZyb20gcnVsZXMgZXZhbHVhdGlvbi5cclxuKi9cclxuY2xhc3MgQWxsb3dPdmVycmlkZXMge1xyXG5cclxuICAvKipcclxuICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpemVzIGEgcG9zaXRpdmUgb25lLlxyXG4gICogQHBhcmFtICAgIHtib29sZWFuW119ICAgZGVjaXNpb25zXHJcbiAgKiBAcmV0dXJucyAge2Jvb2xlYW59XHJcbiAgKi9cclxuICBjb21iaW5lKGRlY2lzaW9ucykge1xyXG4gICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKHRydWUpICE9PSAtMSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZihmYWxzZSkgIT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWxsb3dPdmVycmlkZXM7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBOzs7O0FBSUE7Ozs7Ozs7Ozs7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\r\n*/\nvar BlockOverrides =\n/*#__PURE__*/\nfunction () {\n  function BlockOverrides() {\n    _classCallCheck(this, BlockOverrides);\n  }\n\n  _createClass(BlockOverrides, [{\n    key: "combine",\n\n    /**\r\n    * Given an array of individual authorisation decisions, prioritises a negative one.\r\n    * @param    {boolean[]}   decisions\r\n    * @returns  {boolean}\r\n    */\n    value: function combine(decisions) {\n      if (decisions.indexOf(false) !== -1) {\n        return false;\n      } else {\n        if (decisions.indexOf(true) !== -1) {\n          return true;\n        } else {\n          return \'Not Applicable\';\n        }\n      }\n    }\n  }]);\n\n  return BlockOverrides;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (BlockOverrides);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcG9saWN5L2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMuanM/N2Q2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG4vKipcclxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cclxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIGNvbWJpbmUgdGhlIGF1dGhvcml6YXRpb24gZGVjaXNpb25zIHRoYXQgcmVzdWx0IGZyb20gcnVsZXMgZXZhbHVhdGlvbi5cclxuKi9cclxuY2xhc3MgQmxvY2tPdmVycmlkZXMge1xyXG5cclxuICAvKipcclxuICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXNhdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpc2VzIGEgbmVnYXRpdmUgb25lLlxyXG4gICogQHBhcmFtICAgIHtib29sZWFuW119ICAgZGVjaXNpb25zXHJcbiAgKiBAcmV0dXJucyAge2Jvb2xlYW59XHJcbiAgKi9cclxuICBjb21iaW5lKGRlY2lzaW9ucykge1xyXG4gICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKGZhbHNlKSAhPT0gLTEpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKHRydWUpICE9PSAtMSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmxvY2tPdmVycmlkZXM7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBOzs7O0FBSUE7Ozs7Ozs7Ozs7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\r\n*/\nvar FirstApplicable =\n/*#__PURE__*/\nfunction () {\n  function FirstApplicable() {\n    _classCallCheck(this, FirstApplicable);\n  }\n\n  _createClass(FirstApplicable, [{\n    key: "combine",\n\n    /**\r\n    * Given an array of individual authorisation decisions, returns the first one different from \'Not Applicable\', either positive or negative.\r\n    * @param    {boolean[]}     decisions\r\n    * @returns  {boolean}\r\n    */\n    value: function combine(decisions) {\n      for (var i in decisions) {\n        if (decisions[i] !== \'Not Applicable\') {\n          return decisions[i];\n        }\n      }\n\n      return \'Not Applicable\';\n    }\n  }]);\n\n  return FirstApplicable;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (FirstApplicable);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcG9saWN5L2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlLmpzP2ExMzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuLyoqXHJcbiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+XHJcbiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uXHJcbiovXHJcbmNsYXNzIEZpcnN0QXBwbGljYWJsZSB7XHJcblxyXG4gIC8qKlxyXG4gICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcmV0dXJucyB0aGUgZmlyc3Qgb25lIGRpZmZlcmVudCBmcm9tICdOb3QgQXBwbGljYWJsZScsIGVpdGhlciBwb3NpdGl2ZSBvciBuZWdhdGl2ZS5cclxuICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgICAgZGVjaXNpb25zXHJcbiAgKiBAcmV0dXJucyAge2Jvb2xlYW59XHJcbiAgKi9cclxuICBjb21iaW5lKGRlY2lzaW9ucykge1xyXG4gICAgZm9yIChsZXQgaSBpbiBkZWNpc2lvbnMpIHtcclxuICAgICAgaWYgKGRlY2lzaW9uc1tpXSAhPT0gJ05vdCBBcHBsaWNhYmxlJykge1xyXG4gICAgICAgIHJldHVybiBkZWNpc2lvbnNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpcnN0QXBwbGljYWJsZTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7QUFJQTs7Ozs7Ozs7OztBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7Ozs7O0FBSUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, process) {/* harmony import */ var argsarray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var argsarray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(argsarray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var immediate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);\n/* harmony import */ var immediate__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(immediate__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);\n/* harmony import */ var inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(inherits__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var spark_md5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12);\n/* harmony import */ var spark_md5__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(spark_md5__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(24);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var vuvuzela__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(25);\n/* harmony import */ var vuvuzela__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(vuvuzela__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\nfunction isBinaryObject(object) {\n  return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||\n    (typeof Blob !== 'undefined' && object instanceof Blob);\n}\n\nfunction cloneArrayBuffer(buff) {\n  if (typeof buff.slice === 'function') {\n    return buff.slice(0);\n  }\n  // IE10-11 slice() polyfill\n  var target = new ArrayBuffer(buff.byteLength);\n  var targetArray = new Uint8Array(target);\n  var sourceArray = new Uint8Array(buff);\n  targetArray.set(sourceArray);\n  return target;\n}\n\nfunction cloneBinaryObject(object) {\n  if (object instanceof ArrayBuffer) {\n    return cloneArrayBuffer(object);\n  }\n  var size = object.size;\n  var type = object.type;\n  // Blob\n  if (typeof object.slice === 'function') {\n    return object.slice(0, size, type);\n  }\n  // PhantomJS slice() replacement\n  return object.webkitSlice(0, size, type);\n}\n\n// most of this is borrowed from lodash.isPlainObject:\n// https://github.com/fis-components/lodash.isplainobject/\n// blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js\n\nvar funcToString = Function.prototype.toString;\nvar objectCtorString = funcToString.call(Object);\n\nfunction isPlainObject(value) {\n  var proto = Object.getPrototypeOf(value);\n  /* istanbul ignore if */\n  if (proto === null) { // not sure when this happens, but I guess it can\n    return true;\n  }\n  var Ctor = proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nfunction clone(object) {\n  var newObject;\n  var i;\n  var len;\n\n  if (!object || typeof object !== 'object') {\n    return object;\n  }\n\n  if (Array.isArray(object)) {\n    newObject = [];\n    for (i = 0, len = object.length; i < len; i++) {\n      newObject[i] = clone(object[i]);\n    }\n    return newObject;\n  }\n\n  // special case: to avoid inconsistencies between IndexedDB\n  // and other backends, we automatically stringify Dates\n  if (object instanceof Date) {\n    return object.toISOString();\n  }\n\n  if (isBinaryObject(object)) {\n    return cloneBinaryObject(object);\n  }\n\n  if (!isPlainObject(object)) {\n    return object; // don't clone objects like Workers\n  }\n\n  newObject = {};\n  for (i in object) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(object, i)) {\n      var value = clone(object[i]);\n      if (typeof value !== 'undefined') {\n        newObject[i] = value;\n      }\n    }\n  }\n  return newObject;\n}\n\nfunction once(fun) {\n  var called = false;\n  return argsarray__WEBPACK_IMPORTED_MODULE_0___default()(function (args) {\n    /* istanbul ignore if */\n    if (called) {\n      // this is a smoke test and should never actually happen\n      throw new Error('once called more than once');\n    } else {\n      called = true;\n      fun.apply(this, args);\n    }\n  });\n}\n\nfunction toPromise(func) {\n  //create the function we will be returning\n  return argsarray__WEBPACK_IMPORTED_MODULE_0___default()(function (args) {\n    // Clone arguments\n    args = clone(args);\n    var self = this;\n    // if the last argument is a function, assume its a callback\n    var usedCB = (typeof args[args.length - 1] === 'function') ? args.pop() : false;\n    var promise = new Promise(function (fulfill, reject) {\n      var resp;\n      try {\n        var callback = once(function (err, mesg) {\n          if (err) {\n            reject(err);\n          } else {\n            fulfill(mesg);\n          }\n        });\n        // create a callback for this invocation\n        // apply the function in the orig context\n        args.push(callback);\n        resp = func.apply(self, args);\n        if (resp && typeof resp.then === 'function') {\n          fulfill(resp);\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n    // if there is a callback, call it back\n    if (usedCB) {\n      promise.then(function (result) {\n        usedCB(null, result);\n      }, usedCB);\n    }\n    return promise;\n  });\n}\n\nfunction logApiCall(self, name, args) {\n  /* istanbul ignore if */\n  if (self.constructor.listeners('debug').length) {\n    var logArgs = ['api', self.name, name];\n    for (var i = 0; i < args.length - 1; i++) {\n      logArgs.push(args[i]);\n    }\n    self.constructor.emit('debug', logArgs);\n\n    // override the callback itself to log the response\n    var origCallback = args[args.length - 1];\n    args[args.length - 1] = function (err, res) {\n      var responseArgs = ['api', self.name, name];\n      responseArgs = responseArgs.concat(\n        err ? ['error', err] : ['success', res]\n      );\n      self.constructor.emit('debug', responseArgs);\n      origCallback(err, res);\n    };\n  }\n}\n\nfunction adapterFun(name, callback) {\n  return toPromise(argsarray__WEBPACK_IMPORTED_MODULE_0___default()(function (args) {\n    if (this._closed) {\n      return Promise.reject(new Error('database is closed'));\n    }\n    if (this._destroyed) {\n      return Promise.reject(new Error('database is destroyed'));\n    }\n    var self = this;\n    logApiCall(self, name, args);\n    if (!this.taskqueue.isReady) {\n      return new Promise(function (fulfill, reject) {\n        self.taskqueue.addTask(function (failed) {\n          if (failed) {\n            reject(failed);\n          } else {\n            fulfill(self[name].apply(self, args));\n          }\n        });\n      });\n    }\n    return callback.apply(this, args);\n  }));\n}\n\nfunction mangle(key) {\n  return '$' + key;\n}\nfunction unmangle(key) {\n  return key.substring(1);\n}\nfunction Map$1() {\n  this._store = {};\n}\nMap$1.prototype.get = function (key) {\n  var mangled = mangle(key);\n  return this._store[mangled];\n};\nMap$1.prototype.set = function (key, value) {\n  var mangled = mangle(key);\n  this._store[mangled] = value;\n  return true;\n};\nMap$1.prototype.has = function (key) {\n  var mangled = mangle(key);\n  return mangled in this._store;\n};\nMap$1.prototype.delete = function (key) {\n  var mangled = mangle(key);\n  var res = mangled in this._store;\n  delete this._store[mangled];\n  return res;\n};\nMap$1.prototype.forEach = function (cb) {\n  var keys = Object.keys(this._store);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    var value = this._store[key];\n    key = unmangle(key);\n    cb(value, key);\n  }\n};\nObject.defineProperty(Map$1.prototype, 'size', {\n  get: function () {\n    return Object.keys(this._store).length;\n  }\n});\n\nfunction Set$1(array) {\n  this._store = new Map$1();\n\n  // init with an array\n  if (array && Array.isArray(array)) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      this.add(array[i]);\n    }\n  }\n}\nSet$1.prototype.add = function (key) {\n  return this._store.set(key, true);\n};\nSet$1.prototype.has = function (key) {\n  return this._store.has(key);\n};\nSet$1.prototype.forEach = function (cb) {\n  this._store.forEach(function (value, key) {\n    cb(key);\n  });\n};\nObject.defineProperty(Set$1.prototype, 'size', {\n  get: function () {\n    return this._store.size;\n  }\n});\n\n/* global Map,Set,Symbol */\n// Based on https://kangax.github.io/compat-table/es6/ we can sniff out\n// incomplete Map/Set implementations which would otherwise cause our tests to fail.\n// Notably they fail in IE11 and iOS 8.4, which this prevents.\nfunction supportsMapAndSet() {\n  if (typeof Symbol === 'undefined' || typeof Map === 'undefined' || typeof Set === 'undefined') {\n    return false;\n  }\n  var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);\n  return prop && 'get' in prop && Map[Symbol.species] === Map;\n}\n\n// based on https://github.com/montagejs/collections\n\nvar ExportedSet;\nvar ExportedMap;\n\n{\n  if (supportsMapAndSet()) { // prefer built-in Map/Set\n    ExportedSet = Set;\n    ExportedMap = Map;\n  } else { // fall back to our polyfill\n    ExportedSet = Set$1;\n    ExportedMap = Map$1;\n  }\n}\n\n// like underscore/lodash _.pick()\nfunction pick(obj, arr) {\n  var res = {};\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var prop = arr[i];\n    if (prop in obj) {\n      res[prop] = obj[prop];\n    }\n  }\n  return res;\n}\n\n// Most browsers throttle concurrent requests at 6, so it's silly\n// to shim _bulk_get by trying to launch potentially hundreds of requests\n// and then letting the majority time out. We can handle this ourselves.\nvar MAX_NUM_CONCURRENT_REQUESTS = 6;\n\nfunction identityFunction(x) {\n  return x;\n}\n\nfunction formatResultForOpenRevsGet(result) {\n  return [{\n    ok: result\n  }];\n}\n\n// shim for P/CouchDB adapters that don't directly implement _bulk_get\nfunction bulkGet(db, opts, callback) {\n  var requests = opts.docs;\n\n  // consolidate into one request per doc if possible\n  var requestsById = new ExportedMap();\n  requests.forEach(function (request) {\n    if (requestsById.has(request.id)) {\n      requestsById.get(request.id).push(request);\n    } else {\n      requestsById.set(request.id, [request]);\n    }\n  });\n\n  var numDocs = requestsById.size;\n  var numDone = 0;\n  var perDocResults = new Array(numDocs);\n\n  function collapseResultsAndFinish() {\n    var results = [];\n    perDocResults.forEach(function (res) {\n      res.docs.forEach(function (info) {\n        results.push({\n          id: res.id,\n          docs: [info]\n        });\n      });\n    });\n    callback(null, {results: results});\n  }\n\n  function checkDone() {\n    if (++numDone === numDocs) {\n      collapseResultsAndFinish();\n    }\n  }\n\n  function gotResult(docIndex, id, docs) {\n    perDocResults[docIndex] = {id: id, docs: docs};\n    checkDone();\n  }\n\n  var allRequests = [];\n  requestsById.forEach(function (value, key) {\n    allRequests.push(key);\n  });\n\n  var i = 0;\n\n  function nextBatch() {\n\n    if (i >= allRequests.length) {\n      return;\n    }\n\n    var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);\n    var batch = allRequests.slice(i, upTo);\n    processBatch(batch, i);\n    i += batch.length;\n  }\n\n  function processBatch(batch, offset) {\n    batch.forEach(function (docId, j) {\n      var docIdx = offset + j;\n      var docRequests = requestsById.get(docId);\n\n      // just use the first request as the \"template\"\n      // TODO: The _bulk_get API allows for more subtle use cases than this,\n      // but for now it is unlikely that there will be a mix of different\n      // \"atts_since\" or \"attachments\" in the same request, since it's just\n      // replicate.js that is using this for the moment.\n      // Also, atts_since is aspirational, since we don't support it yet.\n      var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);\n      docOpts.open_revs = docRequests.map(function (request) {\n        // rev is optional, open_revs disallowed\n        return request.rev;\n      });\n\n      // remove falsey / undefined revisions\n      docOpts.open_revs = docOpts.open_revs.filter(identityFunction);\n\n      var formatResult = identityFunction;\n\n      if (docOpts.open_revs.length === 0) {\n        delete docOpts.open_revs;\n\n        // when fetching only the \"winning\" leaf,\n        // transform the result so it looks like an open_revs\n        // request\n        formatResult = formatResultForOpenRevsGet;\n      }\n\n      // globally-supplied options\n      ['revs', 'attachments', 'binary', 'ajax', 'latest'].forEach(function (param) {\n        if (param in opts) {\n          docOpts[param] = opts[param];\n        }\n      });\n      db.get(docId, docOpts, function (err, res) {\n        var result;\n        /* istanbul ignore if */\n        if (err) {\n          result = [{error: err}];\n        } else {\n          result = formatResult(res);\n        }\n        gotResult(docIdx, docId, result);\n        nextBatch();\n      });\n    });\n  }\n\n  nextBatch();\n\n}\n\nvar hasLocal;\n\ntry {\n  localStorage.setItem('_pouch_check_localstorage', 1);\n  hasLocal = !!localStorage.getItem('_pouch_check_localstorage');\n} catch (e) {\n  hasLocal = false;\n}\n\nfunction hasLocalStorage() {\n  return hasLocal;\n}\n\n// Custom nextTick() shim for browsers. In node, this will just be process.nextTick(). We\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(Changes, events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]);\n\n/* istanbul ignore next */\nfunction attachBrowserEvents(self) {\n  if (hasLocalStorage()) {\n    addEventListener(\"storage\", function (e) {\n      self.emit(e.key);\n    });\n  }\n}\n\nfunction Changes() {\n  events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].call(this);\n  this._listeners = {};\n\n  attachBrowserEvents(this);\n}\nChanges.prototype.addListener = function (dbName, id, db, opts) {\n  /* istanbul ignore if */\n  if (this._listeners[id]) {\n    return;\n  }\n  var self = this;\n  var inprogress = false;\n  function eventFunction() {\n    /* istanbul ignore if */\n    if (!self._listeners[id]) {\n      return;\n    }\n    if (inprogress) {\n      inprogress = 'waiting';\n      return;\n    }\n    inprogress = true;\n    var changesOpts = pick(opts, [\n      'style', 'include_docs', 'attachments', 'conflicts', 'filter',\n      'doc_ids', 'view', 'since', 'query_params', 'binary', 'return_docs'\n    ]);\n\n    /* istanbul ignore next */\n    function onError() {\n      inprogress = false;\n    }\n\n    db.changes(changesOpts).on('change', function (c) {\n      if (c.seq > opts.since && !opts.cancelled) {\n        opts.since = c.seq;\n        opts.onChange(c);\n      }\n    }).on('complete', function () {\n      if (inprogress === 'waiting') {\n        immediate__WEBPACK_IMPORTED_MODULE_1___default()(eventFunction);\n      }\n      inprogress = false;\n    }).on('error', onError);\n  }\n  this._listeners[id] = eventFunction;\n  this.on(dbName, eventFunction);\n};\n\nChanges.prototype.removeListener = function (dbName, id) {\n  /* istanbul ignore if */\n  if (!(id in this._listeners)) {\n    return;\n  }\n  events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].prototype.removeListener.call(this, dbName,\n    this._listeners[id]);\n  delete this._listeners[id];\n};\n\n\n/* istanbul ignore next */\nChanges.prototype.notifyLocalWindows = function (dbName) {\n  //do a useless change on a storage thing\n  //in order to get other windows's listeners to activate\n  if (hasLocalStorage()) {\n    localStorage[dbName] = (localStorage[dbName] === \"a\") ? \"b\" : \"a\";\n  }\n};\n\nChanges.prototype.notify = function (dbName) {\n  this.emit(dbName);\n  this.notifyLocalWindows(dbName);\n};\n\nfunction guardedConsole(method) {\n  /* istanbul ignore else */\n  if (typeof console !== 'undefined' && typeof console[method] === 'function') {\n    var args = Array.prototype.slice.call(arguments, 1);\n    console[method].apply(console, args);\n  }\n}\n\nfunction randomNumber(min, max) {\n  var maxTimeout = 600000; // Hard-coded default of 10 minutes\n  min = parseInt(min, 10) || 0;\n  max = parseInt(max, 10);\n  if (max !== max || max <= min) {\n    max = (min || 1) << 1; //doubling\n  } else {\n    max = max + 1;\n  }\n  // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout\n  if (max > maxTimeout) {\n    min = maxTimeout >> 1; // divide by two\n    max = maxTimeout;\n  }\n  var ratio = Math.random();\n  var range = max - min;\n\n  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.\n}\n\nfunction defaultBackOff(min) {\n  var max = 0;\n  if (!min) {\n    max = 2000;\n  }\n  return randomNumber(min, max);\n}\n\n// designed to give info to browser users, who are disturbed\n// when they see http errors in the console\nfunction explainError(status, str) {\n  guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);\n}\n\nvar assign;\n{\n  if (typeof Object.assign === 'function') {\n    assign = Object.assign;\n  } else {\n    // lite Object.assign polyfill based on\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    assign = function (target) {\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) { // Skip over if undefined or null\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    };\n  }\n}\n\nvar $inject_Object_assign = assign;\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(PouchError, Error);\n\nfunction PouchError(status, error, reason) {\n  Error.call(this, reason);\n  this.status = status;\n  this.name = error;\n  this.message = reason;\n  this.error = true;\n}\n\nPouchError.prototype.toString = function () {\n  return JSON.stringify({\n    status: this.status,\n    name: this.name,\n    message: this.message,\n    reason: this.reason\n  });\n};\n\nvar UNAUTHORIZED = new PouchError(401, 'unauthorized', \"Name or password is incorrect.\");\nvar MISSING_BULK_DOCS = new PouchError(400, 'bad_request', \"Missing JSON list of 'docs'\");\nvar MISSING_DOC = new PouchError(404, 'not_found', 'missing');\nvar REV_CONFLICT = new PouchError(409, 'conflict', 'Document update conflict');\nvar INVALID_ID = new PouchError(400, 'bad_request', '_id field must contain a string');\nvar MISSING_ID = new PouchError(412, 'missing_id', '_id is required for puts');\nvar RESERVED_ID = new PouchError(400, 'bad_request', 'Only reserved document ids may start with underscore.');\nvar NOT_OPEN = new PouchError(412, 'precondition_failed', 'Database not open');\nvar UNKNOWN_ERROR = new PouchError(500, 'unknown_error', 'Database encountered an unknown error');\nvar BAD_ARG = new PouchError(500, 'badarg', 'Some query argument is invalid');\nvar INVALID_REQUEST = new PouchError(400, 'invalid_request', 'Request was invalid');\nvar QUERY_PARSE_ERROR = new PouchError(400, 'query_parse_error', 'Some query parameter is invalid');\nvar DOC_VALIDATION = new PouchError(500, 'doc_validation', 'Bad special document member');\nvar BAD_REQUEST = new PouchError(400, 'bad_request', 'Something wrong with the request');\nvar NOT_AN_OBJECT = new PouchError(400, 'bad_request', 'Document must be a JSON object');\nvar DB_MISSING = new PouchError(404, 'not_found', 'Database not found');\nvar IDB_ERROR = new PouchError(500, 'indexed_db_went_bad', 'unknown');\nvar WSQ_ERROR = new PouchError(500, 'web_sql_went_bad', 'unknown');\nvar LDB_ERROR = new PouchError(500, 'levelDB_went_went_bad', 'unknown');\nvar FORBIDDEN = new PouchError(403, 'forbidden', 'Forbidden by design doc validate_doc_update function');\nvar INVALID_REV = new PouchError(400, 'bad_request', 'Invalid rev format');\nvar FILE_EXISTS = new PouchError(412, 'file_exists', 'The database could not be created, the file already exists.');\nvar MISSING_STUB = new PouchError(412, 'missing_stub', 'A pre-existing attachment stub wasn\\'t found');\nvar INVALID_URL = new PouchError(413, 'invalid_url', 'Provided URL is invalid');\n\nfunction createError(error, reason) {\n  function CustomPouchError(reason) {\n    // inherit error properties from our parent error manually\n    // so as to allow proper JSON parsing.\n    /* jshint ignore:start */\n    for (var p in error) {\n      if (typeof error[p] !== 'function') {\n        this[p] = error[p];\n      }\n    }\n    /* jshint ignore:end */\n    if (reason !== undefined) {\n      this.reason = reason;\n    }\n  }\n  CustomPouchError.prototype = PouchError.prototype;\n  return new CustomPouchError(reason);\n}\n\nfunction generateErrorFromResponse(err) {\n\n  if (typeof err !== 'object') {\n    var data = err;\n    err = UNKNOWN_ERROR;\n    err.data = data;\n  }\n\n  if ('error' in err && err.error === 'conflict') {\n    err.name = 'conflict';\n    err.status = 409;\n  }\n\n  if (!('name' in err)) {\n    err.name = err.error || 'unknown';\n  }\n\n  if (!('status' in err)) {\n    err.status = 500;\n  }\n\n  if (!('message' in err)) {\n    err.message = err.message || err.reason;\n  }\n\n  return err;\n}\n\nfunction tryFilter(filter, doc, req) {\n  try {\n    return !filter(doc, req);\n  } catch (err) {\n    var msg = 'Filter function threw: ' + err.toString();\n    return createError(BAD_REQUEST, msg);\n  }\n}\n\nfunction filterChange(opts) {\n  var req = {};\n  var hasFilter = opts.filter && typeof opts.filter === 'function';\n  req.query = opts.query_params;\n\n  return function filter(change) {\n    if (!change.doc) {\n      // CSG sends events on the changes feed that don't have documents,\n      // this hack makes a whole lot of existing code robust.\n      change.doc = {};\n    }\n\n    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);\n\n    if (typeof filterReturn === 'object') {\n      return filterReturn;\n    }\n\n    if (filterReturn) {\n      return false;\n    }\n\n    if (!opts.include_docs) {\n      delete change.doc;\n    } else if (!opts.attachments) {\n      for (var att in change.doc._attachments) {\n        /* istanbul ignore else */\n        if (change.doc._attachments.hasOwnProperty(att)) {\n          change.doc._attachments[att].stub = true;\n        }\n      }\n    }\n    return true;\n  };\n}\n\nfunction flatten(arrs) {\n  var res = [];\n  for (var i = 0, len = arrs.length; i < len; i++) {\n    res = res.concat(arrs[i]);\n  }\n  return res;\n}\n\n// shim for Function.prototype.name,\n\n// Determine id an ID is valid\n//   - invalid IDs begin with an underescore that does not begin '_design' or\n//     '_local'\n//   - any other string value is a valid id\n// Returns the specific error object for each case\nfunction invalidIdError(id) {\n  var err;\n  if (!id) {\n    err = createError(MISSING_ID);\n  } else if (typeof id !== 'string') {\n    err = createError(INVALID_ID);\n  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {\n    err = createError(RESERVED_ID);\n  }\n  if (err) {\n    throw err;\n  }\n}\n\n// Checks if a PouchDB object is \"remote\" or not. This is\n\nfunction isRemote(db) {\n  if (typeof db._remote === 'boolean') {\n    return db._remote;\n  }\n  /* istanbul ignore next */\n  if (typeof db.type === 'function') {\n    guardedConsole('warn',\n      'db.type() is deprecated and will be removed in ' +\n      'a future version of PouchDB');\n    return db.type() === 'http';\n  }\n  /* istanbul ignore next */\n  return false;\n}\n\nfunction listenerCount(ee, type) {\n  return 'listenerCount' in ee ? ee.listenerCount(type) :\n                                 events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].listenerCount(ee, type);\n}\n\nfunction parseDesignDocFunctionName(s) {\n  if (!s) {\n    return null;\n  }\n  var parts = s.split('/');\n  if (parts.length === 2) {\n    return parts;\n  }\n  if (parts.length === 1) {\n    return [s, s];\n  }\n  return null;\n}\n\nfunction normalizeDesignDocFunctionName(s) {\n  var normalized = parseDesignDocFunctionName(s);\n  return normalized ? normalized.join('/') : null;\n}\n\n// originally parseUri 1.2.2, now patched by us\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\nvar keys = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\",\n    \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];\nvar qName =\"queryKey\";\nvar qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n\n// use the \"loose\" parser\n/* eslint maxlen: 0, no-useless-escape: 0 */\nvar parser = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nfunction parseUri(str) {\n  var m = parser.exec(str);\n  var uri = {};\n  var i = 14;\n\n  while (i--) {\n    var key = keys[i];\n    var value = m[i] || \"\";\n    var encoded = ['user', 'password'].indexOf(key) !== -1;\n    uri[key] = encoded ? decodeURIComponent(value) : value;\n  }\n\n  uri[qName] = {};\n  uri[keys[12]].replace(qParser, function ($0, $1, $2) {\n    if ($1) {\n      uri[qName][$1] = $2;\n    }\n  });\n\n  return uri;\n}\n\n// Based on https://github.com/alexdavid/scope-eval v0.0.3\n// (source: https://unpkg.com/scope-eval@0.0.3/scope_eval.js)\n// This is basically just a wrapper around new Function()\n\nfunction scopeEval(source, scope) {\n  var keys = [];\n  var values = [];\n  for (var key in scope) {\n    if (scope.hasOwnProperty(key)) {\n      keys.push(key);\n      values.push(scope[key]);\n    }\n  }\n  keys.push(source);\n  return Function.apply(null, keys).apply(null, values);\n}\n\n// this is essentially the \"update sugar\" function from daleharvey/pouchdb#1388\n// the diffFun tells us what delta to apply to the doc.  it either returns\n// the doc, or false if it doesn't need to do an update after all\nfunction upsert(db, docId, diffFun) {\n  return new Promise(function (fulfill, reject) {\n    db.get(docId, function (err, doc) {\n      if (err) {\n        /* istanbul ignore next */\n        if (err.status !== 404) {\n          return reject(err);\n        }\n        doc = {};\n      }\n\n      // the user might change the _rev, so save it for posterity\n      var docRev = doc._rev;\n      var newDoc = diffFun(doc);\n\n      if (!newDoc) {\n        // if the diffFun returns falsy, we short-circuit as\n        // an optimization\n        return fulfill({updated: false, rev: docRev});\n      }\n\n      // users aren't allowed to modify these values,\n      // so reset them here\n      newDoc._id = docId;\n      newDoc._rev = docRev;\n      fulfill(tryAndPut(db, newDoc, diffFun));\n    });\n  });\n}\n\nfunction tryAndPut(db, doc, diffFun) {\n  return db.put(doc).then(function (res) {\n    return {\n      updated: true,\n      rev: res.rev\n    };\n  }, function (err) {\n    /* istanbul ignore next */\n    if (err.status !== 409) {\n      throw err;\n    }\n    return upsert(db, doc._id, diffFun);\n  });\n}\n\nvar thisAtob = function (str) {\n  return atob(str);\n};\n\nvar thisBtoa = function (str) {\n  return btoa(str);\n};\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor (e.g.\n// old QtWebKit versions, Android < 4.4).\nfunction createBlob(parts, properties) {\n  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n  parts = parts || [];\n  properties = properties || {};\n  try {\n    return new Blob(parts, properties);\n  } catch (e) {\n    if (e.name !== \"TypeError\") {\n      throw e;\n    }\n    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\n                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\n                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :\n                  WebKitBlobBuilder;\n    var builder = new Builder();\n    for (var i = 0; i < parts.length; i += 1) {\n      builder.append(parts[i]);\n    }\n    return builder.getBlob(properties.type);\n  }\n}\n\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction binaryStringToArrayBuffer(bin) {\n  var length = bin.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n  for (var i = 0; i < length; i++) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return buf;\n}\n\nfunction binStringToBluffer(binString, type) {\n  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});\n}\n\nfunction b64ToBluffer(b64, type) {\n  return binStringToBluffer(thisAtob(b64), type);\n}\n\n//Can't find original post, but this is close\n//http://stackoverflow.com/questions/6965107/ (continues on next line)\n//converting-between-strings-and-arraybuffers\nfunction arrayBufferToBinaryString(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n  for (var i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return binary;\n}\n\n// shim for browsers that don't support it\nfunction readAsBinaryString(blob, callback) {\n  var reader = new FileReader();\n  var hasBinaryString = typeof reader.readAsBinaryString === 'function';\n  reader.onloadend = function (e) {\n    var result = e.target.result || '';\n    if (hasBinaryString) {\n      return callback(result);\n    }\n    callback(arrayBufferToBinaryString(result));\n  };\n  if (hasBinaryString) {\n    reader.readAsBinaryString(blob);\n  } else {\n    reader.readAsArrayBuffer(blob);\n  }\n}\n\nfunction blobToBinaryString(blobOrBuffer, callback) {\n  readAsBinaryString(blobOrBuffer, function (bin) {\n    callback(bin);\n  });\n}\n\nfunction blobToBase64(blobOrBuffer, callback) {\n  blobToBinaryString(blobOrBuffer, function (base64) {\n    callback(thisBtoa(base64));\n  });\n}\n\n// simplified API. universal browser support is assumed\nfunction readAsArrayBuffer(blob, callback) {\n  var reader = new FileReader();\n  reader.onloadend = function (e) {\n    var result = e.target.result || new ArrayBuffer(0);\n    callback(result);\n  };\n  reader.readAsArrayBuffer(blob);\n}\n\n// this is not used in the browser\n\nvar setImmediateShim = global.setImmediate || global.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\nfunction rawToBase64(raw) {\n  return thisBtoa(raw);\n}\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n  return blob.slice(start, end);\n}\n\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\n\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n  buffer.appendBinary(string);\n  callback();\n}\n\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new spark_md5__WEBPACK_IMPORTED_MODULE_4___default.a() : new spark_md5__WEBPACK_IMPORTED_MODULE_4___default.a.ArrayBuffer();\n\n  var append = inputIsString ? appendString : appendBlob;\n\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n  loadNextChunk();\n}\n\nfunction stringMd5(string) {\n  return spark_md5__WEBPACK_IMPORTED_MODULE_4___default.a.hash(string);\n}\n\nfunction rev$$1(doc, deterministic_revs) {\n  var clonedDoc = clone(doc);\n  if (!deterministic_revs) {\n    return uuid__WEBPACK_IMPORTED_MODULE_5___default.a.v4().replace(/-/g, '').toLowerCase();\n  }\n\n  delete clonedDoc._rev_tree;\n  return stringMd5(JSON.stringify(clonedDoc));\n}\n\nvar uuid = uuid__WEBPACK_IMPORTED_MODULE_5___default.a.v4;\n\n// We fetch all leafs of the revision tree, and sort them based on tree length\n// and whether they were deleted, undeleted documents with the longest revision\n// tree (most edits) win\n// The final sort algorithm is slightly documented in a sidebar here:\n// http://guide.couchdb.org/draft/conflicts.html\nfunction winningRev(metadata) {\n  var winningId;\n  var winningPos;\n  var winningDeleted;\n  var toVisit = metadata.rev_tree.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var tree = node.ids;\n    var branches = tree[2];\n    var pos = node.pos;\n    if (branches.length) { // non-leaf\n      for (var i = 0, len = branches.length; i < len; i++) {\n        toVisit.push({pos: pos + 1, ids: branches[i]});\n      }\n      continue;\n    }\n    var deleted = !!tree[1].deleted;\n    var id = tree[0];\n    // sort by deleted, then pos, then id\n    if (!winningId || (winningDeleted !== deleted ? winningDeleted :\n        winningPos !== pos ? winningPos < pos : winningId < id)) {\n      winningId = id;\n      winningPos = pos;\n      winningDeleted = deleted;\n    }\n  }\n\n  return winningPos + '-' + winningId;\n}\n\n// Pretty much all below can be combined into a higher order function to\n// traverse revisions\n// The return value from the callback will be passed as context to all\n// children of that node\nfunction traverseRevTree(revs, callback) {\n  var toVisit = revs.slice();\n\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var branches = tree[2];\n    var newCtx =\n      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});\n    }\n  }\n}\n\nfunction sortByPos(a, b) {\n  return a.pos - b.pos;\n}\n\nfunction collectLeaves(revs) {\n  var leaves = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {\n    if (isLeaf) {\n      leaves.push({rev: pos + \"-\" + id, pos: pos, opts: opts});\n    }\n  });\n  leaves.sort(sortByPos).reverse();\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    delete leaves[i].pos;\n  }\n  return leaves;\n}\n\n// returns revs of all conflicts that is leaves such that\n// 1. are not deleted and\n// 2. are different than winning revision\nfunction collectConflicts(metadata) {\n  var win = winningRev(metadata);\n  var leaves = collectLeaves(metadata.rev_tree);\n  var conflicts = [];\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    var leaf = leaves[i];\n    if (leaf.rev !== win && !leaf.opts.deleted) {\n      conflicts.push(leaf.rev);\n    }\n  }\n  return conflicts;\n}\n\n// compact a tree by marking its non-leafs as missing,\n// and return a list of revs to delete\nfunction compactTree(metadata) {\n  var revs = [];\n  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                               revHash, ctx, opts) {\n    if (opts.status === 'available' && !isLeaf) {\n      revs.push(pos + '-' + revHash);\n      opts.status = 'missing';\n    }\n  });\n  return revs;\n}\n\n// build up a list of all the paths to the leafs in this revision tree\nfunction rootToLeaf(revs) {\n  var paths = [];\n  var toVisit = revs.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var id = tree[0];\n    var opts = tree[1];\n    var branches = tree[2];\n    var isLeaf = branches.length === 0;\n\n    var history = node.history ? node.history.slice() : [];\n    history.push({id: id, opts: opts});\n    if (isLeaf) {\n      paths.push({pos: (pos + 1 - history.length), ids: history});\n    }\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], history: history});\n    }\n  }\n  return paths.reverse();\n}\n\n// for a better overview of what this is doing, read:\n\nfunction sortByPos$1(a, b) {\n  return a.pos - b.pos;\n}\n\n// classic binary search\nfunction binarySearch(arr, item, comparator) {\n  var low = 0;\n  var high = arr.length;\n  var mid;\n  while (low < high) {\n    mid = (low + high) >>> 1;\n    if (comparator(arr[mid], item) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\n\n// assuming the arr is sorted, insert the item in the proper place\nfunction insertSorted(arr, item, comparator) {\n  var idx = binarySearch(arr, item, comparator);\n  arr.splice(idx, 0, item);\n}\n\n// Turn a path as a flat array into a tree with a single branch.\n// If any should be stemmed from the beginning of the array, that's passed\n// in as the second argument\nfunction pathToTree(path, numStemmed) {\n  var root;\n  var leaf;\n  for (var i = numStemmed, len = path.length; i < len; i++) {\n    var node = path[i];\n    var currentLeaf = [node.id, node.opts, []];\n    if (leaf) {\n      leaf[2].push(currentLeaf);\n      leaf = currentLeaf;\n    } else {\n      root = leaf = currentLeaf;\n    }\n  }\n  return root;\n}\n\n// compare the IDs of two trees\nfunction compareTree(a, b) {\n  return a[0] < b[0] ? -1 : 1;\n}\n\n// Merge two trees together\n// The roots of tree1 and tree2 must be the same revision\nfunction mergeTree(in_tree1, in_tree2) {\n  var queue = [{tree1: in_tree1, tree2: in_tree2}];\n  var conflicts = false;\n  while (queue.length > 0) {\n    var item = queue.pop();\n    var tree1 = item.tree1;\n    var tree2 = item.tree2;\n\n    if (tree1[1].status || tree2[1].status) {\n      tree1[1].status =\n        (tree1[1].status ===  'available' ||\n        tree2[1].status === 'available') ? 'available' : 'missing';\n    }\n\n    for (var i = 0; i < tree2[2].length; i++) {\n      if (!tree1[2][0]) {\n        conflicts = 'new_leaf';\n        tree1[2][0] = tree2[2][i];\n        continue;\n      }\n\n      var merged = false;\n      for (var j = 0; j < tree1[2].length; j++) {\n        if (tree1[2][j][0] === tree2[2][i][0]) {\n          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});\n          merged = true;\n        }\n      }\n      if (!merged) {\n        conflicts = 'new_branch';\n        insertSorted(tree1[2], tree2[2][i], compareTree);\n      }\n    }\n  }\n  return {conflicts: conflicts, tree: in_tree1};\n}\n\nfunction doMerge(tree, path, dontExpand) {\n  var restree = [];\n  var conflicts = false;\n  var merged = false;\n  var res;\n\n  if (!tree.length) {\n    return {tree: [path], conflicts: 'new_leaf'};\n  }\n\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var branch = tree[i];\n    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {\n      // Paths start at the same position and have the same root, so they need\n      // merged\n      res = mergeTree(branch.ids, path.ids);\n      restree.push({pos: branch.pos, ids: res.tree});\n      conflicts = conflicts || res.conflicts;\n      merged = true;\n    } else if (dontExpand !== true) {\n      // The paths start at a different position, take the earliest path and\n      // traverse up until it as at the same point from root as the path we\n      // want to merge.  If the keys match we return the longer path with the\n      // other merged After stemming we dont want to expand the trees\n\n      var t1 = branch.pos < path.pos ? branch : path;\n      var t2 = branch.pos < path.pos ? path : branch;\n      var diff = t2.pos - t1.pos;\n\n      var candidateParents = [];\n\n      var trees = [];\n      trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});\n      while (trees.length > 0) {\n        var item = trees.pop();\n        if (item.diff === 0) {\n          if (item.ids[0] === t2.ids[0]) {\n            candidateParents.push(item);\n          }\n          continue;\n        }\n        var elements = item.ids[2];\n        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {\n          trees.push({\n            ids: elements[j],\n            diff: item.diff - 1,\n            parent: item.ids,\n            parentIdx: j\n          });\n        }\n      }\n\n      var el = candidateParents[0];\n\n      if (!el) {\n        restree.push(branch);\n      } else {\n        res = mergeTree(el.ids, t2.ids);\n        el.parent[2][el.parentIdx] = res.tree;\n        restree.push({pos: t1.pos, ids: t1.ids});\n        conflicts = conflicts || res.conflicts;\n        merged = true;\n      }\n    } else {\n      restree.push(branch);\n    }\n  }\n\n  // We didnt find\n  if (!merged) {\n    restree.push(path);\n  }\n\n  restree.sort(sortByPos$1);\n\n  return {\n    tree: restree,\n    conflicts: conflicts || 'internal_node'\n  };\n}\n\n// To ensure we dont grow the revision tree infinitely, we stem old revisions\nfunction stem(tree, depth) {\n  // First we break out the tree into a complete list of root to leaf paths\n  var paths = rootToLeaf(tree);\n  var stemmedRevs;\n\n  var result;\n  for (var i = 0, len = paths.length; i < len; i++) {\n    // Then for each path, we cut off the start of the path based on the\n    // `depth` to stem to, and generate a new set of flat trees\n    var path = paths[i];\n    var stemmed = path.ids;\n    var node;\n    if (stemmed.length > depth) {\n      // only do the stemming work if we actually need to stem\n      if (!stemmedRevs) {\n        stemmedRevs = {}; // avoid allocating this object unnecessarily\n      }\n      var numStemmed = stemmed.length - depth;\n      node = {\n        pos: path.pos + numStemmed,\n        ids: pathToTree(stemmed, numStemmed)\n      };\n\n      for (var s = 0; s < numStemmed; s++) {\n        var rev = (path.pos + s) + '-' + stemmed[s].id;\n        stemmedRevs[rev] = true;\n      }\n    } else { // no need to actually stem\n      node = {\n        pos: path.pos,\n        ids: pathToTree(stemmed, 0)\n      };\n    }\n\n    // Then we remerge all those flat trees together, ensuring that we dont\n    // connect trees that would go beyond the depth limit\n    if (result) {\n      result = doMerge(result, node, true).tree;\n    } else {\n      result = [node];\n    }\n  }\n\n  // this is memory-heavy per Chrome profiler, avoid unless we actually stemmed\n  if (stemmedRevs) {\n    traverseRevTree(result, function (isLeaf, pos, revHash) {\n      // some revisions may have been removed in a branch but not in another\n      delete stemmedRevs[pos + '-' + revHash];\n    });\n  }\n\n  return {\n    tree: result,\n    revs: stemmedRevs ? Object.keys(stemmedRevs) : []\n  };\n}\n\nfunction merge(tree, path, depth) {\n  var newTree = doMerge(tree, path);\n  var stemmed = stem(newTree.tree, depth);\n  return {\n    tree: stemmed.tree,\n    stemmedRevs: stemmed.revs,\n    conflicts: newTree.conflicts\n  };\n}\n\n// return true if a rev exists in the rev tree, false otherwise\nfunction revExists(revs, rev) {\n  var toVisit = revs.slice();\n  var splitRev = rev.split('-');\n  var targetPos = parseInt(splitRev[0], 10);\n  var targetId = splitRev[1];\n\n  var node;\n  while ((node = toVisit.pop())) {\n    if (node.pos === targetPos && node.ids[0] === targetId) {\n      return true;\n    }\n    var branches = node.ids[2];\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: node.pos + 1, ids: branches[i]});\n    }\n  }\n  return false;\n}\n\nfunction getTrees(node) {\n  return node.ids;\n}\n\n// check if a specific revision of a doc has been deleted\n//  - metadata: the metadata object from the doc store\n//  - rev: (optional) the revision to check. defaults to winning revision\nfunction isDeleted(metadata, rev) {\n  if (!rev) {\n    rev = winningRev(metadata);\n  }\n  var id = rev.substring(rev.indexOf('-') + 1);\n  var toVisit = metadata.rev_tree.map(getTrees);\n\n  var tree;\n  while ((tree = toVisit.pop())) {\n    if (tree[0] === id) {\n      return !!tree[1].deleted;\n    }\n    toVisit = toVisit.concat(tree[2]);\n  }\n}\n\nfunction isLocalId(id) {\n  return (/^_local/).test(id);\n}\n\n// returns the current leaf node for a given revision\nfunction latest(rev, metadata) {\n  var toVisit = metadata.rev_tree.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var id = tree[0];\n    var opts = tree[1];\n    var branches = tree[2];\n    var isLeaf = branches.length === 0;\n\n    var history = node.history ? node.history.slice() : [];\n    history.push({id: id, pos: pos, opts: opts});\n\n    if (isLeaf) {\n      for (var i = 0, len = history.length; i < len; i++) {\n        var historyNode = history[i];\n        var historyRev = historyNode.pos + '-' + historyNode.id;\n\n        if (historyRev === rev) {\n          // return the rev of this leaf\n          return pos + '-' + id;\n        }\n      }\n    }\n\n    for (var j = 0, l = branches.length; j < l; j++) {\n      toVisit.push({pos: pos + 1, ids: branches[j], history: history});\n    }\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unable to resolve latest revision for id ' + metadata.id + ', rev ' + rev);\n}\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(Changes$1, events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]);\n\nfunction tryCatchInChangeListener(self, change, pending, lastSeq) {\n  // isolate try/catches to avoid V8 deoptimizations\n  try {\n    self.emit('change', change, pending, lastSeq);\n  } catch (e) {\n    guardedConsole('error', 'Error in .on(\"change\", function):', e);\n  }\n}\n\nfunction Changes$1(db, opts, callback) {\n  events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].call(this);\n  var self = this;\n  this.db = db;\n  opts = opts ? clone(opts) : {};\n  var complete = opts.complete = once(function (err, resp) {\n    if (err) {\n      if (listenerCount(self, 'error') > 0) {\n        self.emit('error', err);\n      }\n    } else {\n      self.emit('complete', resp);\n    }\n    self.removeAllListeners();\n    db.removeListener('destroyed', onDestroy);\n  });\n  if (callback) {\n    self.on('complete', function (resp) {\n      callback(null, resp);\n    });\n    self.on('error', callback);\n  }\n  function onDestroy() {\n    self.cancel();\n  }\n  db.once('destroyed', onDestroy);\n\n  opts.onChange = function (change, pending, lastSeq) {\n    /* istanbul ignore if */\n    if (self.isCancelled) {\n      return;\n    }\n    tryCatchInChangeListener(self, change, pending, lastSeq);\n  };\n\n  var promise = new Promise(function (fulfill, reject) {\n    opts.complete = function (err, res) {\n      if (err) {\n        reject(err);\n      } else {\n        fulfill(res);\n      }\n    };\n  });\n  self.once('cancel', function () {\n    db.removeListener('destroyed', onDestroy);\n    opts.complete(null, {status: 'cancelled'});\n  });\n  this.then = promise.then.bind(promise);\n  this['catch'] = promise['catch'].bind(promise);\n  this.then(function (result) {\n    complete(null, result);\n  }, complete);\n\n\n\n  if (!db.taskqueue.isReady) {\n    db.taskqueue.addTask(function (failed) {\n      if (failed) {\n        opts.complete(failed);\n      } else if (self.isCancelled) {\n        self.emit('cancel');\n      } else {\n        self.validateChanges(opts);\n      }\n    });\n  } else {\n    self.validateChanges(opts);\n  }\n}\nChanges$1.prototype.cancel = function () {\n  this.isCancelled = true;\n  if (this.db.taskqueue.isReady) {\n    this.emit('cancel');\n  }\n};\nfunction processChange(doc, metadata, opts) {\n  var changeList = [{rev: doc._rev}];\n  if (opts.style === 'all_docs') {\n    changeList = collectLeaves(metadata.rev_tree)\n    .map(function (x) { return {rev: x.rev}; });\n  }\n  var change = {\n    id: metadata.id,\n    changes: changeList,\n    doc: doc\n  };\n\n  if (isDeleted(metadata, doc._rev)) {\n    change.deleted = true;\n  }\n  if (opts.conflicts) {\n    change.doc._conflicts = collectConflicts(metadata);\n    if (!change.doc._conflicts.length) {\n      delete change.doc._conflicts;\n    }\n  }\n  return change;\n}\n\nChanges$1.prototype.validateChanges = function (opts) {\n  var callback = opts.complete;\n  var self = this;\n\n  /* istanbul ignore else */\n  if (PouchDB._changesFilterPlugin) {\n    PouchDB._changesFilterPlugin.validate(opts, function (err) {\n      if (err) {\n        return callback(err);\n      }\n      self.doChanges(opts);\n    });\n  } else {\n    self.doChanges(opts);\n  }\n};\n\nChanges$1.prototype.doChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n\n  opts = clone(opts);\n  if ('live' in opts && !('continuous' in opts)) {\n    opts.continuous = opts.live;\n  }\n  opts.processChange = processChange;\n\n  if (opts.since === 'latest') {\n    opts.since = 'now';\n  }\n  if (!opts.since) {\n    opts.since = 0;\n  }\n  if (opts.since === 'now') {\n    this.db.info().then(function (info) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        callback(null, {status: 'cancelled'});\n        return;\n      }\n      opts.since = info.update_seq;\n      self.doChanges(opts);\n    }, callback);\n    return;\n  }\n\n  /* istanbul ignore else */\n  if (PouchDB._changesFilterPlugin) {\n    PouchDB._changesFilterPlugin.normalize(opts);\n    if (PouchDB._changesFilterPlugin.shouldFilter(this, opts)) {\n      return PouchDB._changesFilterPlugin.filter(this, opts);\n    }\n  } else {\n    ['doc_ids', 'filter', 'selector', 'view'].forEach(function (key) {\n      if (key in opts) {\n        guardedConsole('warn',\n          'The \"' + key + '\" option was passed in to changes/replicate, ' +\n          'but pouchdb-changes-filter plugin is not installed, so it ' +\n          'was ignored. Please install the plugin to enable filtering.'\n        );\n      }\n    });\n  }\n\n  if (!('descending' in opts)) {\n    opts.descending = false;\n  }\n\n  // 0 and 1 should return 1 document\n  opts.limit = opts.limit === 0 ? 1 : opts.limit;\n  opts.complete = callback;\n  var newPromise = this.db._changes(opts);\n  /* istanbul ignore else */\n  if (newPromise && typeof newPromise.cancel === 'function') {\n    var cancel = self.cancel;\n    self.cancel = argsarray__WEBPACK_IMPORTED_MODULE_0___default()(function (args) {\n      newPromise.cancel();\n      cancel.apply(this, args);\n    });\n  }\n};\n\n/*\n * A generic pouch adapter\n */\n\nfunction compare(left, right) {\n  return left < right ? -1 : left > right ? 1 : 0;\n}\n\n// Wrapper for functions that call the bulkdocs api with a single doc,\n// if the first result is an error, return an error\nfunction yankError(callback, docId) {\n  return function (err, results) {\n    if (err || (results[0] && results[0].error)) {\n      err = err || results[0];\n      err.docId = docId;\n      callback(err);\n    } else {\n      callback(null, results.length ? results[0]  : results);\n    }\n  };\n}\n\n// clean docs given to us by the user\nfunction cleanDocs(docs) {\n  for (var i = 0; i < docs.length; i++) {\n    var doc = docs[i];\n    if (doc._deleted) {\n      delete doc._attachments; // ignore atts for deleted docs\n    } else if (doc._attachments) {\n      // filter out extraneous keys from _attachments\n      var atts = Object.keys(doc._attachments);\n      for (var j = 0; j < atts.length; j++) {\n        var att = atts[j];\n        doc._attachments[att] = pick(doc._attachments[att],\n          ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);\n      }\n    }\n  }\n}\n\n// compare two docs, first by _id then by _rev\nfunction compareByIdThenRev(a, b) {\n  var idCompare = compare(a._id, b._id);\n  if (idCompare !== 0) {\n    return idCompare;\n  }\n  var aStart = a._revisions ? a._revisions.start : 0;\n  var bStart = b._revisions ? b._revisions.start : 0;\n  return compare(aStart, bStart);\n}\n\n// for every node in a revision tree computes its distance from the closest\n// leaf\nfunction computeHeight(revs) {\n  var height = {};\n  var edges = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {\n    var rev = pos + \"-\" + id;\n    if (isLeaf) {\n      height[rev] = 0;\n    }\n    if (prnt !== undefined) {\n      edges.push({from: prnt, to: rev});\n    }\n    return rev;\n  });\n\n  edges.reverse();\n  edges.forEach(function (edge) {\n    if (height[edge.from] === undefined) {\n      height[edge.from] = 1 + height[edge.to];\n    } else {\n      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);\n    }\n  });\n  return height;\n}\n\nfunction allDocsKeysParse(opts) {\n  var keys =  ('limit' in opts) ?\n    opts.keys.slice(opts.skip, opts.limit + opts.skip) :\n    (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\n  opts.keys = keys;\n  opts.skip = 0;\n  delete opts.limit;\n  if (opts.descending) {\n    keys.reverse();\n    opts.descending = false;\n  }\n}\n\n// all compaction is done in a queue, to avoid attaching\n// too many listeners at once\nfunction doNextCompaction(self) {\n  var task = self._compactionQueue[0];\n  var opts = task.opts;\n  var callback = task.callback;\n  self.get('_local/compaction').catch(function () {\n    return false;\n  }).then(function (doc) {\n    if (doc && doc.last_seq) {\n      opts.last_seq = doc.last_seq;\n    }\n    self._compact(opts, function (err, res) {\n      /* istanbul ignore if */\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, res);\n      }\n      immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n        self._compactionQueue.shift();\n        if (self._compactionQueue.length) {\n          doNextCompaction(self);\n        }\n      });\n    });\n  });\n}\n\nfunction attachmentNameError(name) {\n  if (name.charAt(0) === '_') {\n    return name + ' is not a valid attachment name, attachment ' +\n      'names cannot start with \\'_\\'';\n  }\n  return false;\n}\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(AbstractPouchDB, events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]);\n\nfunction AbstractPouchDB() {\n  events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].call(this);\n\n  // re-bind prototyped methods\n  for (var p in AbstractPouchDB.prototype) {\n    if (typeof this[p] === 'function') {\n      this[p] = this[p].bind(this);\n    }\n  }\n}\n\nAbstractPouchDB.prototype.post =\n  adapterFun('post', function (doc, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return callback(createError(NOT_AN_OBJECT));\n  }\n  this.bulkDocs({docs: [doc]}, opts, yankError(callback, doc._id));\n});\n\nAbstractPouchDB.prototype.put = adapterFun('put', function (doc, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return cb(createError(NOT_AN_OBJECT));\n  }\n  invalidIdError(doc._id);\n  if (isLocalId(doc._id) && typeof this._putLocal === 'function') {\n    if (doc._deleted) {\n      return this._removeLocal(doc, cb);\n    } else {\n      return this._putLocal(doc, cb);\n    }\n  }\n  var self = this;\n  if (opts.force && doc._rev) {\n    transformForceOptionToNewEditsOption();\n    putDoc(function (err) {\n      var result = err ? null : {ok: true, id: doc._id, rev: doc._rev};\n      cb(err, result);\n    });\n  } else {\n    putDoc(cb);\n  }\n\n  function transformForceOptionToNewEditsOption() {\n    var parts = doc._rev.split('-');\n    var oldRevId = parts[1];\n    var oldRevNum = parseInt(parts[0], 10);\n\n    var newRevNum = oldRevNum + 1;\n    var newRevId = rev$$1();\n\n    doc._revisions = {\n      start: newRevNum,\n      ids: [newRevId, oldRevId]\n    };\n    doc._rev = newRevNum + '-' + newRevId;\n    opts.new_edits = false;\n  }\n  function putDoc(next) {\n    if (typeof self._put === 'function' && opts.new_edits !== false) {\n      self._put(doc, opts, next);\n    } else {\n      self.bulkDocs({docs: [doc]}, opts, yankError(next, doc._id));\n    }\n  }\n});\n\nAbstractPouchDB.prototype.putAttachment =\n  adapterFun('putAttachment', function (docId, attachmentId, rev,\n                                              blob, type) {\n  var api = this;\n  if (typeof type === 'function') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n  // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267\n  /* istanbul ignore if */\n  if (typeof type === 'undefined') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n  if (!type) {\n    guardedConsole('warn', 'Attachment', attachmentId, 'on document', docId, 'is missing content_type');\n  }\n\n  function createAttachment(doc) {\n    var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;\n    doc._attachments = doc._attachments || {};\n    doc._attachments[attachmentId] = {\n      content_type: type,\n      data: blob,\n      revpos: ++prevrevpos\n    };\n    return api.put(doc);\n  }\n\n  return api.get(docId).then(function (doc) {\n    if (doc._rev !== rev) {\n      throw createError(REV_CONFLICT);\n    }\n\n    return createAttachment(doc);\n  }, function (err) {\n     // create new doc\n    /* istanbul ignore else */\n    if (err.reason === MISSING_DOC.message) {\n      return createAttachment({_id: docId});\n    } else {\n      throw err;\n    }\n  });\n});\n\nAbstractPouchDB.prototype.removeAttachment =\n  adapterFun('removeAttachment', function (docId, attachmentId, rev,\n                                                 callback) {\n  var self = this;\n  self.get(docId, function (err, obj) {\n    /* istanbul ignore if */\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (obj._rev !== rev) {\n      callback(createError(REV_CONFLICT));\n      return;\n    }\n    /* istanbul ignore if */\n    if (!obj._attachments) {\n      return callback();\n    }\n    delete obj._attachments[attachmentId];\n    if (Object.keys(obj._attachments).length === 0) {\n      delete obj._attachments;\n    }\n    self.put(obj, callback);\n  });\n});\n\nAbstractPouchDB.prototype.remove =\n  adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {\n  var doc;\n  if (typeof optsOrRev === 'string') {\n    // id, rev, opts, callback style\n    doc = {\n      _id: docOrId,\n      _rev: optsOrRev\n    };\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n  } else {\n    // doc, opts, callback style\n    doc = docOrId;\n    if (typeof optsOrRev === 'function') {\n      callback = optsOrRev;\n      opts = {};\n    } else {\n      callback = opts;\n      opts = optsOrRev;\n    }\n  }\n  opts = opts || {};\n  opts.was_delete = true;\n  var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};\n  newDoc._deleted = true;\n  if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {\n    return this._removeLocal(doc, callback);\n  }\n  this.bulkDocs({docs: [newDoc]}, opts, yankError(callback, newDoc._id));\n});\n\nAbstractPouchDB.prototype.revsDiff =\n  adapterFun('revsDiff', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  var ids = Object.keys(req);\n\n  if (!ids.length) {\n    return callback(null, {});\n  }\n\n  var count = 0;\n  var missing = new ExportedMap();\n\n  function addToMissing(id, revId) {\n    if (!missing.has(id)) {\n      missing.set(id, {missing: []});\n    }\n    missing.get(id).missing.push(revId);\n  }\n\n  function processDoc(id, rev_tree) {\n    // Is this fast enough? Maybe we should switch to a set simulated by a map\n    var missingForId = req[id].slice(0);\n    traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,\n      opts) {\n        var rev = pos + '-' + revHash;\n        var idx = missingForId.indexOf(rev);\n        if (idx === -1) {\n          return;\n        }\n\n        missingForId.splice(idx, 1);\n        /* istanbul ignore if */\n        if (opts.status !== 'available') {\n          addToMissing(id, rev);\n        }\n      });\n\n    // Traversing the tree is synchronous, so now `missingForId` contains\n    // revisions that were not found in the tree\n    missingForId.forEach(function (rev) {\n      addToMissing(id, rev);\n    });\n  }\n\n  ids.map(function (id) {\n    this._getRevisionTree(id, function (err, rev_tree) {\n      if (err && err.status === 404 && err.message === 'missing') {\n        missing.set(id, {missing: req[id]});\n      } else if (err) {\n        /* istanbul ignore next */\n        return callback(err);\n      } else {\n        processDoc(id, rev_tree);\n      }\n\n      if (++count === ids.length) {\n        // convert LazyMap to object\n        var missingObj = {};\n        missing.forEach(function (value, key) {\n          missingObj[key] = value;\n        });\n        return callback(null, missingObj);\n      }\n    });\n  }, this);\n});\n\n// _bulk_get API for faster replication, as described in\n// https://github.com/apache/couchdb-chttpd/pull/33\n// At the \"abstract\" level, it will just run multiple get()s in\n// parallel, because this isn't much of a performance cost\n// for local databases (except the cost of multiple transactions, which is\n// small). The http adapter overrides this in order\n// to do a more efficient single HTTP request.\nAbstractPouchDB.prototype.bulkGet =\n  adapterFun('bulkGet', function (opts, callback) {\n  bulkGet(this, opts, callback);\n});\n\n// compact one document and fire callback\n// by compacting we mean removing all revisions which\n// are further from the leaf in revision tree than max_height\nAbstractPouchDB.prototype.compactDocument =\n  adapterFun('compactDocument', function (docId, maxHeight, callback) {\n  var self = this;\n  this._getRevisionTree(docId, function (err, revTree) {\n    /* istanbul ignore if */\n    if (err) {\n      return callback(err);\n    }\n    var height = computeHeight(revTree);\n    var candidates = [];\n    var revs = [];\n    Object.keys(height).forEach(function (rev) {\n      if (height[rev] > maxHeight) {\n        candidates.push(rev);\n      }\n    });\n\n    traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {\n      var rev = pos + '-' + revHash;\n      if (opts.status === 'available' && candidates.indexOf(rev) !== -1) {\n        revs.push(rev);\n      }\n    });\n    self._doCompaction(docId, revs, callback);\n  });\n});\n\n// compact the whole database using single document\n// compaction\nAbstractPouchDB.prototype.compact =\n  adapterFun('compact', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  self._compactionQueue = self._compactionQueue || [];\n  self._compactionQueue.push({opts: opts, callback: callback});\n  if (self._compactionQueue.length === 1) {\n    doNextCompaction(self);\n  }\n});\nAbstractPouchDB.prototype._compact = function (opts, callback) {\n  var self = this;\n  var changesOpts = {\n    return_docs: false,\n    last_seq: opts.last_seq || 0\n  };\n  var promises = [];\n\n  function onChange(row) {\n    promises.push(self.compactDocument(row.id, 0));\n  }\n  function onComplete(resp) {\n    var lastSeq = resp.last_seq;\n    Promise.all(promises).then(function () {\n      return upsert(self, '_local/compaction', function deltaFunc(doc) {\n        if (!doc.last_seq || doc.last_seq < lastSeq) {\n          doc.last_seq = lastSeq;\n          return doc;\n        }\n        return false; // somebody else got here first, don't update\n      });\n    }).then(function () {\n      callback(null, {ok: true});\n    }).catch(callback);\n  }\n  self.changes(changesOpts)\n    .on('change', onChange)\n    .on('complete', onComplete)\n    .on('error', callback);\n};\n\n/* Begin api wrappers. Specific functionality to storage belongs in the\n   _[method] */\nAbstractPouchDB.prototype.get = adapterFun('get', function (id, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof id !== 'string') {\n    return cb(createError(INVALID_ID));\n  }\n  if (isLocalId(id) && typeof this._getLocal === 'function') {\n    return this._getLocal(id, cb);\n  }\n  var leaves = [], self = this;\n\n  function finishOpenRevs() {\n    var result = [];\n    var count = leaves.length;\n    /* istanbul ignore if */\n    if (!count) {\n      return cb(null, result);\n    }\n\n    // order with open_revs is unspecified\n    leaves.forEach(function (leaf) {\n      self.get(id, {\n        rev: leaf,\n        revs: opts.revs,\n        latest: opts.latest,\n        attachments: opts.attachments,\n        binary: opts.binary\n      }, function (err, doc) {\n        if (!err) {\n          // using latest=true can produce duplicates\n          var existing;\n          for (var i = 0, l = result.length; i < l; i++) {\n            if (result[i].ok && result[i].ok._rev === doc._rev) {\n              existing = true;\n              break;\n            }\n          }\n          if (!existing) {\n            result.push({ok: doc});\n          }\n        } else {\n          result.push({missing: leaf});\n        }\n        count--;\n        if (!count) {\n          cb(null, result);\n        }\n      });\n    });\n  }\n\n  if (opts.open_revs) {\n    if (opts.open_revs === \"all\") {\n      this._getRevisionTree(id, function (err, rev_tree) {\n        /* istanbul ignore if */\n        if (err) {\n          return cb(err);\n        }\n        leaves = collectLeaves(rev_tree).map(function (leaf) {\n          return leaf.rev;\n        });\n        finishOpenRevs();\n      });\n    } else {\n      if (Array.isArray(opts.open_revs)) {\n        leaves = opts.open_revs;\n        for (var i = 0; i < leaves.length; i++) {\n          var l = leaves[i];\n          // looks like it's the only thing couchdb checks\n          if (!(typeof (l) === \"string\" && /^\\d+-/.test(l))) {\n            return cb(createError(INVALID_REV));\n          }\n        }\n        finishOpenRevs();\n      } else {\n        return cb(createError(UNKNOWN_ERROR, 'function_clause'));\n      }\n    }\n    return; // open_revs does not like other options\n  }\n\n  return this._get(id, opts, function (err, result) {\n    if (err) {\n      err.docId = id;\n      return cb(err);\n    }\n\n    var doc = result.doc;\n    var metadata = result.metadata;\n    var ctx = result.ctx;\n\n    if (opts.conflicts) {\n      var conflicts = collectConflicts(metadata);\n      if (conflicts.length) {\n        doc._conflicts = conflicts;\n      }\n    }\n\n    if (isDeleted(metadata, doc._rev)) {\n      doc._deleted = true;\n    }\n\n    if (opts.revs || opts.revs_info) {\n      var splittedRev = doc._rev.split('-');\n      var revNo       = parseInt(splittedRev[0], 10);\n      var revHash     = splittedRev[1];\n\n      var paths = rootToLeaf(metadata.rev_tree);\n      var path = null;\n\n      for (var i = 0; i < paths.length; i++) {\n        var currentPath = paths[i];\n        var hashIndex = currentPath.ids.map(function (x) { return x.id; })\n          .indexOf(revHash);\n        var hashFoundAtRevPos = hashIndex === (revNo - 1);\n\n        if (hashFoundAtRevPos || (!path && hashIndex !== -1)) {\n          path = currentPath;\n        }\n      }\n\n      var indexOfRev = path.ids.map(function (x) { return x.id; })\n        .indexOf(doc._rev.split('-')[1]) + 1;\n      var howMany = path.ids.length - indexOfRev;\n      path.ids.splice(indexOfRev, howMany);\n      path.ids.reverse();\n\n      if (opts.revs) {\n        doc._revisions = {\n          start: (path.pos + path.ids.length) - 1,\n          ids: path.ids.map(function (rev) {\n            return rev.id;\n          })\n        };\n      }\n      if (opts.revs_info) {\n        var pos =  path.pos + path.ids.length;\n        doc._revs_info = path.ids.map(function (rev) {\n          pos--;\n          return {\n            rev: pos + '-' + rev.id,\n            status: rev.opts.status\n          };\n        });\n      }\n    }\n\n    if (opts.attachments && doc._attachments) {\n      var attachments = doc._attachments;\n      var count = Object.keys(attachments).length;\n      if (count === 0) {\n        return cb(null, doc);\n      }\n      Object.keys(attachments).forEach(function (key) {\n        this._getAttachment(doc._id, key, attachments[key], {\n          // Previously the revision handling was done in adapter.js\n          // getAttachment, however since idb-next doesnt we need to\n          // pass the rev through\n          rev: doc._rev,\n          binary: opts.binary,\n          ctx: ctx\n        }, function (err, data) {\n          var att = doc._attachments[key];\n          att.data = data;\n          delete att.stub;\n          delete att.length;\n          if (!--count) {\n            cb(null, doc);\n          }\n        });\n      }, self);\n    } else {\n      if (doc._attachments) {\n        for (var key in doc._attachments) {\n          /* istanbul ignore else */\n          if (doc._attachments.hasOwnProperty(key)) {\n            doc._attachments[key].stub = true;\n          }\n        }\n      }\n      cb(null, doc);\n    }\n  });\n});\n\n// TODO: I dont like this, it forces an extra read for every\n// attachment read and enforces a confusing api between\n// adapter.js and the adapter implementation\nAbstractPouchDB.prototype.getAttachment =\n  adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {\n  var self = this;\n  if (opts instanceof Function) {\n    callback = opts;\n    opts = {};\n  }\n  this._get(docId, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (res.doc._attachments && res.doc._attachments[attachmentId]) {\n      opts.ctx = res.ctx;\n      opts.binary = true;\n      self._getAttachment(docId, attachmentId,\n                          res.doc._attachments[attachmentId], opts, callback);\n    } else {\n      return callback(createError(MISSING_DOC));\n    }\n  });\n});\n\nAbstractPouchDB.prototype.allDocs =\n  adapterFun('allDocs', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\n  if (opts.start_key) {\n    opts.startkey = opts.start_key;\n  }\n  if (opts.end_key) {\n    opts.endkey = opts.end_key;\n  }\n  if ('keys' in opts) {\n    if (!Array.isArray(opts.keys)) {\n      return callback(new TypeError('options.keys must be an array'));\n    }\n    var incompatibleOpt =\n      ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\n      return incompatibleOpt in opts;\n    })[0];\n    if (incompatibleOpt) {\n      callback(createError(QUERY_PARSE_ERROR,\n        'Query parameter `' + incompatibleOpt +\n        '` is not compatible with multi-get'\n      ));\n      return;\n    }\n    if (!isRemote(this)) {\n      allDocsKeysParse(opts);\n      if (opts.keys.length === 0) {\n        return this._allDocs({limit: 0}, callback);\n      }\n    }\n  }\n\n  return this._allDocs(opts, callback);\n});\n\nAbstractPouchDB.prototype.changes = function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n\n  // By default set return_docs to false if the caller has opts.live = true,\n  // this will prevent us from collecting the set of changes indefinitely\n  // resulting in growing memory\n  opts.return_docs = ('return_docs' in opts) ? opts.return_docs : !opts.live;\n\n  return new Changes$1(this, opts, callback);\n};\n\nAbstractPouchDB.prototype.close = adapterFun('close', function (callback) {\n  this._closed = true;\n  this.emit('closed');\n  return this._close(callback);\n});\n\nAbstractPouchDB.prototype.info = adapterFun('info', function (callback) {\n  var self = this;\n  this._info(function (err, info) {\n    if (err) {\n      return callback(err);\n    }\n    // assume we know better than the adapter, unless it informs us\n    info.db_name = info.db_name || self.name;\n    info.auto_compaction = !!(self.auto_compaction && !isRemote(self));\n    info.adapter = self.adapter;\n    callback(null, info);\n  });\n});\n\nAbstractPouchDB.prototype.id = adapterFun('id', function (callback) {\n  return this._id(callback);\n});\n\n/* istanbul ignore next */\nAbstractPouchDB.prototype.type = function () {\n  return (typeof this._type === 'function') ? this._type() : this.adapter;\n};\n\nAbstractPouchDB.prototype.bulkDocs =\n  adapterFun('bulkDocs', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n\n  if (Array.isArray(req)) {\n    req = {\n      docs: req\n    };\n  }\n\n  if (!req || !req.docs || !Array.isArray(req.docs)) {\n    return callback(createError(MISSING_BULK_DOCS));\n  }\n\n  for (var i = 0; i < req.docs.length; ++i) {\n    if (typeof req.docs[i] !== 'object' || Array.isArray(req.docs[i])) {\n      return callback(createError(NOT_AN_OBJECT));\n    }\n  }\n\n  var attachmentError;\n  req.docs.forEach(function (doc) {\n    if (doc._attachments) {\n      Object.keys(doc._attachments).forEach(function (name) {\n        attachmentError = attachmentError || attachmentNameError(name);\n        if (!doc._attachments[name].content_type) {\n          guardedConsole('warn', 'Attachment', name, 'on document', doc._id, 'is missing content_type');\n        }\n      });\n    }\n  });\n\n  if (attachmentError) {\n    return callback(createError(BAD_REQUEST, attachmentError));\n  }\n\n  if (!('new_edits' in opts)) {\n    if ('new_edits' in req) {\n      opts.new_edits = req.new_edits;\n    } else {\n      opts.new_edits = true;\n    }\n  }\n\n  var adapter = this;\n  if (!opts.new_edits && !isRemote(adapter)) {\n    // ensure revisions of the same doc are sorted, so that\n    // the local adapter processes them correctly (#2935)\n    req.docs.sort(compareByIdThenRev);\n  }\n\n  cleanDocs(req.docs);\n\n  // in the case of conflicts, we want to return the _ids to the user\n  // however, the underlying adapter may destroy the docs array, so\n  // create a copy here\n  var ids = req.docs.map(function (doc) {\n    return doc._id;\n  });\n\n  return this._bulkDocs(req, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (!opts.new_edits) {\n      // this is what couch does when new_edits is false\n      res = res.filter(function (x) {\n        return x.error;\n      });\n    }\n    // add ids for error/conflict responses (not required for CouchDB)\n    if (!isRemote(adapter)) {\n      for (var i = 0, l = res.length; i < l; i++) {\n        res[i].id = res[i].id || ids[i];\n      }\n    }\n\n    callback(null, res);\n  });\n});\n\nAbstractPouchDB.prototype.registerDependentDatabase =\n  adapterFun('registerDependentDatabase', function (dependentDb,\n                                                          callback) {\n  var depDB = new this.constructor(dependentDb, this.__opts);\n\n  function diffFun(doc) {\n    doc.dependentDbs = doc.dependentDbs || {};\n    if (doc.dependentDbs[dependentDb]) {\n      return false; // no update required\n    }\n    doc.dependentDbs[dependentDb] = true;\n    return doc;\n  }\n  upsert(this, '_local/_pouch_dependentDbs', diffFun)\n    .then(function () {\n      callback(null, {db: depDB});\n    }).catch(callback);\n});\n\nAbstractPouchDB.prototype.destroy =\n  adapterFun('destroy', function (opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  var usePrefix = 'use_prefix' in self ? self.use_prefix : true;\n\n  function destroyDb() {\n    // call destroy method of the particular adaptor\n    self._destroy(opts, function (err, resp) {\n      if (err) {\n        return callback(err);\n      }\n      self._destroyed = true;\n      self.emit('destroyed');\n      callback(null, resp || { 'ok': true });\n    });\n  }\n\n  if (isRemote(self)) {\n    // no need to check for dependent DBs if it's a remote DB\n    return destroyDb();\n  }\n\n  self.get('_local/_pouch_dependentDbs', function (err, localDoc) {\n    if (err) {\n      /* istanbul ignore if */\n      if (err.status !== 404) {\n        return callback(err);\n      } else { // no dependencies\n        return destroyDb();\n      }\n    }\n    var dependentDbs = localDoc.dependentDbs;\n    var PouchDB = self.constructor;\n    var deletedMap = Object.keys(dependentDbs).map(function (name) {\n      // use_prefix is only false in the browser\n      /* istanbul ignore next */\n      var trueName = usePrefix ?\n        name.replace(new RegExp('^' + PouchDB.prefix), '') : name;\n      return new PouchDB(trueName, self.__opts).destroy();\n    });\n    Promise.all(deletedMap).then(destroyDb, callback);\n  });\n});\n\nfunction TaskQueue() {\n  this.isReady = false;\n  this.failed = false;\n  this.queue = [];\n}\n\nTaskQueue.prototype.execute = function () {\n  var fun;\n  if (this.failed) {\n    while ((fun = this.queue.shift())) {\n      fun(this.failed);\n    }\n  } else {\n    while ((fun = this.queue.shift())) {\n      fun();\n    }\n  }\n};\n\nTaskQueue.prototype.fail = function (err) {\n  this.failed = err;\n  this.execute();\n};\n\nTaskQueue.prototype.ready = function (db) {\n  this.isReady = true;\n  this.db = db;\n  this.execute();\n};\n\nTaskQueue.prototype.addTask = function (fun) {\n  this.queue.push(fun);\n  if (this.failed) {\n    this.execute();\n  }\n};\n\nfunction parseAdapter(name, opts) {\n  var match = name.match(/([a-z-]*):\\/\\/(.*)/);\n  if (match) {\n    // the http adapter expects the fully qualified name\n    return {\n      name: /https?/.test(match[1]) ? match[1] + '://' + match[2] : match[2],\n      adapter: match[1]\n    };\n  }\n\n  var adapters = PouchDB.adapters;\n  var preferredAdapters = PouchDB.preferredAdapters;\n  var prefix = PouchDB.prefix;\n  var adapterName = opts.adapter;\n\n  if (!adapterName) { // automatically determine adapter\n    for (var i = 0; i < preferredAdapters.length; ++i) {\n      adapterName = preferredAdapters[i];\n      // check for browsers that have been upgraded from websql-only to websql+idb\n      /* istanbul ignore if */\n      if (adapterName === 'idb' && 'websql' in adapters &&\n          hasLocalStorage() && localStorage['_pouch__websqldb_' + prefix + name]) {\n        // log it, because this can be confusing during development\n        guardedConsole('log', 'PouchDB is downgrading \"' + name + '\" to WebSQL to' +\n          ' avoid data loss, because it was already opened with WebSQL.');\n        continue; // keep using websql to avoid user data loss\n      }\n      break;\n    }\n  }\n\n  var adapter = adapters[adapterName];\n\n  // if adapter is invalid, then an error will be thrown later\n  var usePrefix = (adapter && 'use_prefix' in adapter) ?\n    adapter.use_prefix : true;\n\n  return {\n    name: usePrefix ? (prefix + name) : name,\n    adapter: adapterName\n  };\n}\n\n// OK, so here's the deal. Consider this code:\n//     var db1 = new PouchDB('foo');\n//     var db2 = new PouchDB('foo');\n//     db1.destroy();\n// ^ these two both need to emit 'destroyed' events,\n// as well as the PouchDB constructor itself.\n// So we have one db object (whichever one got destroy() called on it)\n// responsible for emitting the initial event, which then gets emitted\n// by the constructor, which then broadcasts it to any other dbs\n// that may have been created with the same name.\nfunction prepareForDestruction(self) {\n\n  function onDestroyed(from_constructor) {\n    self.removeListener('closed', onClosed);\n    if (!from_constructor) {\n      self.constructor.emit('destroyed', self.name);\n    }\n  }\n\n  function onClosed() {\n    self.removeListener('destroyed', onDestroyed);\n    self.constructor.emit('unref', self);\n  }\n\n  self.once('destroyed', onDestroyed);\n  self.once('closed', onClosed);\n  self.constructor.emit('ref', self);\n}\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(PouchDB, AbstractPouchDB);\nfunction PouchDB(name, opts) {\n  // In Node our test suite only tests this for PouchAlt unfortunately\n  /* istanbul ignore if */\n  if (!(this instanceof PouchDB)) {\n    return new PouchDB(name, opts);\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  if (name && typeof name === 'object') {\n    opts = name;\n    name = opts.name;\n    delete opts.name;\n  }\n\n  if (opts.deterministic_revs === undefined) {\n    opts.deterministic_revs = true;\n  }\n\n  this.__opts = opts = clone(opts);\n\n  self.auto_compaction = opts.auto_compaction;\n  self.prefix = PouchDB.prefix;\n\n  if (typeof name !== 'string') {\n    throw new Error('Missing/invalid DB name');\n  }\n\n  var prefixedName = (opts.prefix || '') + name;\n  var backend = parseAdapter(prefixedName, opts);\n\n  opts.name = backend.name;\n  opts.adapter = opts.adapter || backend.adapter;\n\n  self.name = name;\n  self._adapter = opts.adapter;\n  PouchDB.emit('debug', ['adapter', 'Picked adapter: ', opts.adapter]);\n\n  if (!PouchDB.adapters[opts.adapter] ||\n      !PouchDB.adapters[opts.adapter].valid()) {\n    throw new Error('Invalid Adapter: ' + opts.adapter);\n  }\n\n  AbstractPouchDB.call(self);\n  self.taskqueue = new TaskQueue();\n\n  self.adapter = opts.adapter;\n\n  PouchDB.adapters[opts.adapter].call(self, opts, function (err) {\n    if (err) {\n      return self.taskqueue.fail(err);\n    }\n    prepareForDestruction(self);\n\n    self.emit('created', self);\n    PouchDB.emit('created', self.name);\n    self.taskqueue.ready(self);\n  });\n\n}\n\n// AbortController was introduced quite a while after fetch and\n// isnt required for PouchDB to function so polyfill if needed\nvar a = (typeof AbortController !== 'undefined')\n    ? AbortController\n    : function () { return {abort: function () {}}; };\n\nvar f$1 = fetch;\nvar h = Headers;\n\nPouchDB.adapters = {};\nPouchDB.preferredAdapters = [];\n\nPouchDB.prefix = '_pouch_';\n\nvar eventEmitter = new events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]();\n\nfunction setUpEventEmitter(Pouch) {\n  Object.keys(events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].prototype).forEach(function (key) {\n    if (typeof events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].prototype[key] === 'function') {\n      Pouch[key] = eventEmitter[key].bind(eventEmitter);\n    }\n  });\n\n  // these are created in constructor.js, and allow us to notify each DB with\n  // the same name that it was destroyed, via the constructor object\n  var destructListeners = Pouch._destructionListeners = new ExportedMap();\n\n  Pouch.on('ref', function onConstructorRef(db) {\n    if (!destructListeners.has(db.name)) {\n      destructListeners.set(db.name, []);\n    }\n    destructListeners.get(db.name).push(db);\n  });\n\n  Pouch.on('unref', function onConstructorUnref(db) {\n    if (!destructListeners.has(db.name)) {\n      return;\n    }\n    var dbList = destructListeners.get(db.name);\n    var pos = dbList.indexOf(db);\n    if (pos < 0) {\n      /* istanbul ignore next */\n      return;\n    }\n    dbList.splice(pos, 1);\n    if (dbList.length > 1) {\n      /* istanbul ignore next */\n      destructListeners.set(db.name, dbList);\n    } else {\n      destructListeners.delete(db.name);\n    }\n  });\n\n  Pouch.on('destroyed', function onConstructorDestroyed(name) {\n    if (!destructListeners.has(name)) {\n      return;\n    }\n    var dbList = destructListeners.get(name);\n    destructListeners.delete(name);\n    dbList.forEach(function (db) {\n      db.emit('destroyed',true);\n    });\n  });\n}\n\nsetUpEventEmitter(PouchDB);\n\nPouchDB.adapter = function (id, obj, addToPreferredAdapters) {\n  /* istanbul ignore else */\n  if (obj.valid()) {\n    PouchDB.adapters[id] = obj;\n    if (addToPreferredAdapters) {\n      PouchDB.preferredAdapters.push(id);\n    }\n  }\n};\n\nPouchDB.plugin = function (obj) {\n  if (typeof obj === 'function') { // function style for plugins\n    obj(PouchDB);\n  } else if (typeof obj !== 'object' || Object.keys(obj).length === 0) {\n    throw new Error('Invalid plugin: got \"' + obj + '\", expected an object or a function');\n  } else {\n    Object.keys(obj).forEach(function (id) { // object style for plugins\n      PouchDB.prototype[id] = obj[id];\n    });\n  }\n  if (this.__defaults) {\n    PouchDB.__defaults = $inject_Object_assign({}, this.__defaults);\n  }\n  return PouchDB;\n};\n\nPouchDB.defaults = function (defaultOpts) {\n  function PouchAlt(name, opts) {\n    if (!(this instanceof PouchAlt)) {\n      return new PouchAlt(name, opts);\n    }\n\n    opts = opts || {};\n\n    if (name && typeof name === 'object') {\n      opts = name;\n      name = opts.name;\n      delete opts.name;\n    }\n\n    opts = $inject_Object_assign({}, PouchAlt.__defaults, opts);\n    PouchDB.call(this, name, opts);\n  }\n\n  inherits__WEBPACK_IMPORTED_MODULE_3___default()(PouchAlt, PouchDB);\n\n  PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();\n  Object.keys(PouchDB).forEach(function (key) {\n    if (!(key in PouchAlt)) {\n      PouchAlt[key] = PouchDB[key];\n    }\n  });\n\n  // make default options transitive\n  // https://github.com/pouchdb/pouchdb/issues/5922\n  PouchAlt.__defaults = $inject_Object_assign({}, this.__defaults, defaultOpts);\n\n  return PouchAlt;\n};\n\nPouchDB.fetch = function (url, opts) {\n  return f$1(url, opts);\n};\n\n// managed automatically by set-version.js\nvar version = \"7.0.0\";\n\n// this would just be \"return doc[field]\", but fields\n// can be \"deep\" due to dot notation\nfunction getFieldFromDoc(doc, parsedField) {\n  var value = doc;\n  for (var i = 0, len = parsedField.length; i < len; i++) {\n    var key = parsedField[i];\n    value = value[key];\n    if (!value) {\n      break;\n    }\n  }\n  return value;\n}\n\nfunction compare$1(left, right) {\n  return left < right ? -1 : left > right ? 1 : 0;\n}\n\n// Converts a string in dot notation to an array of its components, with backslash escaping\nfunction parseField(fieldName) {\n  // fields may be deep (e.g. \"foo.bar.baz\"), so parse\n  var fields = [];\n  var current = '';\n  for (var i = 0, len = fieldName.length; i < len; i++) {\n    var ch = fieldName[i];\n    if (ch === '.') {\n      if (i > 0 && fieldName[i - 1] === '\\\\') { // escaped delimiter\n        current = current.substring(0, current.length - 1) + '.';\n      } else { // not escaped, so delimiter\n        fields.push(current);\n        current = '';\n      }\n    } else { // normal character\n      current += ch;\n    }\n  }\n  fields.push(current);\n  return fields;\n}\n\nvar combinationFields = ['$or', '$nor', '$not'];\nfunction isCombinationalField(field) {\n  return combinationFields.indexOf(field) > -1;\n}\n\nfunction getKey(obj) {\n  return Object.keys(obj)[0];\n}\n\nfunction getValue(obj) {\n  return obj[getKey(obj)];\n}\n\n\n// flatten an array of selectors joined by an $and operator\nfunction mergeAndedSelectors(selectors) {\n\n  // sort to ensure that e.g. if the user specified\n  // $and: [{$gt: 'a'}, {$gt: 'b'}], then it's collapsed into\n  // just {$gt: 'b'}\n  var res = {};\n\n  selectors.forEach(function (selector) {\n    Object.keys(selector).forEach(function (field) {\n      var matcher = selector[field];\n      if (typeof matcher !== 'object') {\n        matcher = {$eq: matcher};\n      }\n\n      if (isCombinationalField(field)) {\n        if (matcher instanceof Array) {\n          res[field] = matcher.map(function (m) {\n            return mergeAndedSelectors([m]);\n          });\n        } else {\n          res[field] = mergeAndedSelectors([matcher]);\n        }\n      } else {\n        var fieldMatchers = res[field] = res[field] || {};\n        Object.keys(matcher).forEach(function (operator) {\n          var value = matcher[operator];\n\n          if (operator === '$gt' || operator === '$gte') {\n            return mergeGtGte(operator, value, fieldMatchers);\n          } else if (operator === '$lt' || operator === '$lte') {\n            return mergeLtLte(operator, value, fieldMatchers);\n          } else if (operator === '$ne') {\n            return mergeNe(value, fieldMatchers);\n          } else if (operator === '$eq') {\n            return mergeEq(value, fieldMatchers);\n          }\n          fieldMatchers[operator] = value;\n        });\n      }\n    });\n  });\n\n  return res;\n}\n\n\n\n// collapse logically equivalent gt/gte values\nfunction mergeGtGte(operator, value, fieldMatchers) {\n  if (typeof fieldMatchers.$eq !== 'undefined') {\n    return; // do nothing\n  }\n  if (typeof fieldMatchers.$gte !== 'undefined') {\n    if (operator === '$gte') {\n      if (value > fieldMatchers.$gte) { // more specificity\n        fieldMatchers.$gte = value;\n      }\n    } else { // operator === '$gt'\n      if (value >= fieldMatchers.$gte) { // more specificity\n        delete fieldMatchers.$gte;\n        fieldMatchers.$gt = value;\n      }\n    }\n  } else if (typeof fieldMatchers.$gt !== 'undefined') {\n    if (operator === '$gte') {\n      if (value > fieldMatchers.$gt) { // more specificity\n        delete fieldMatchers.$gt;\n        fieldMatchers.$gte = value;\n      }\n    } else { // operator === '$gt'\n      if (value > fieldMatchers.$gt) { // more specificity\n        fieldMatchers.$gt = value;\n      }\n    }\n  } else {\n    fieldMatchers[operator] = value;\n  }\n}\n\n// collapse logically equivalent lt/lte values\nfunction mergeLtLte(operator, value, fieldMatchers) {\n  if (typeof fieldMatchers.$eq !== 'undefined') {\n    return; // do nothing\n  }\n  if (typeof fieldMatchers.$lte !== 'undefined') {\n    if (operator === '$lte') {\n      if (value < fieldMatchers.$lte) { // more specificity\n        fieldMatchers.$lte = value;\n      }\n    } else { // operator === '$gt'\n      if (value <= fieldMatchers.$lte) { // more specificity\n        delete fieldMatchers.$lte;\n        fieldMatchers.$lt = value;\n      }\n    }\n  } else if (typeof fieldMatchers.$lt !== 'undefined') {\n    if (operator === '$lte') {\n      if (value < fieldMatchers.$lt) { // more specificity\n        delete fieldMatchers.$lt;\n        fieldMatchers.$lte = value;\n      }\n    } else { // operator === '$gt'\n      if (value < fieldMatchers.$lt) { // more specificity\n        fieldMatchers.$lt = value;\n      }\n    }\n  } else {\n    fieldMatchers[operator] = value;\n  }\n}\n\n// combine $ne values into one array\nfunction mergeNe(value, fieldMatchers) {\n  if ('$ne' in fieldMatchers) {\n    // there are many things this could \"not\" be\n    fieldMatchers.$ne.push(value);\n  } else { // doesn't exist yet\n    fieldMatchers.$ne = [value];\n  }\n}\n\n// add $eq into the mix\nfunction mergeEq(value, fieldMatchers) {\n  // these all have less specificity than the $eq\n  // TODO: check for user errors here\n  delete fieldMatchers.$gt;\n  delete fieldMatchers.$gte;\n  delete fieldMatchers.$lt;\n  delete fieldMatchers.$lte;\n  delete fieldMatchers.$ne;\n  fieldMatchers.$eq = value;\n}\n\n\n//\n// normalize the selector\n//\nfunction massageSelector(input) {\n  var result = clone(input);\n  var wasAnded = false;\n  if ('$and' in result) {\n    result = mergeAndedSelectors(result['$and']);\n    wasAnded = true;\n  }\n\n  ['$or', '$nor'].forEach(function (orOrNor) {\n    if (orOrNor in result) {\n      // message each individual selector\n      // e.g. {foo: 'bar'} becomes {foo: {$eq: 'bar'}}\n      result[orOrNor].forEach(function (subSelector) {\n        var fields = Object.keys(subSelector);\n        for (var i = 0; i < fields.length; i++) {\n          var field = fields[i];\n          var matcher = subSelector[field];\n          if (typeof matcher !== 'object' || matcher === null) {\n            subSelector[field] = {$eq: matcher};\n          }\n        }\n      });\n    }\n  });\n\n  if ('$not' in result) {\n    //This feels a little like forcing, but it will work for now,\n    //I would like to come back to this and make the merging of selectors a little more generic\n    result['$not'] = mergeAndedSelectors([result['$not']]);\n  }\n\n  var fields = Object.keys(result);\n\n  for (var i = 0; i < fields.length; i++) {\n    var field = fields[i];\n    var matcher = result[field];\n\n    if (typeof matcher !== 'object' || matcher === null) {\n      matcher = {$eq: matcher};\n    } else if ('$ne' in matcher && !wasAnded) {\n      // I put these in an array, since there may be more than one\n      // but in the \"mergeAnded\" operation, I already take care of that\n      matcher.$ne = [matcher.$ne];\n    }\n    result[field] = matcher;\n  }\n\n  return result;\n}\n\nfunction pad(str, padWith, upToLength) {\n  var padding = '';\n  var targetLength = upToLength - str.length;\n  /* istanbul ignore next */\n  while (padding.length < targetLength) {\n    padding += padWith;\n  }\n  return padding;\n}\n\nfunction padLeft(str, padWith, upToLength) {\n  var padding = pad(str, padWith, upToLength);\n  return padding + str;\n}\n\nvar MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE\nvar MAGNITUDE_DIGITS = 3; // ditto\nvar SEP = ''; // set to '_' for easier debugging \n\nfunction collate(a, b) {\n\n  if (a === b) {\n    return 0;\n  }\n\n  a = normalizeKey(a);\n  b = normalizeKey(b);\n\n  var ai = collationIndex(a);\n  var bi = collationIndex(b);\n  if ((ai - bi) !== 0) {\n    return ai - bi;\n  }\n  switch (typeof a) {\n    case 'number':\n      return a - b;\n    case 'boolean':\n      return a < b ? -1 : 1;\n    case 'string':\n      return stringCollate(a, b);\n  }\n  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);\n}\n\n// couch considers null/NaN/Infinity/-Infinity === undefined,\n// for the purposes of mapreduce indexes. also, dates get stringified.\nfunction normalizeKey(key) {\n  switch (typeof key) {\n    case 'undefined':\n      return null;\n    case 'number':\n      if (key === Infinity || key === -Infinity || isNaN(key)) {\n        return null;\n      }\n      return key;\n    case 'object':\n      var origKey = key;\n      if (Array.isArray(key)) {\n        var len = key.length;\n        key = new Array(len);\n        for (var i = 0; i < len; i++) {\n          key[i] = normalizeKey(origKey[i]);\n        }\n      /* istanbul ignore next */\n      } else if (key instanceof Date) {\n        return key.toJSON();\n      } else if (key !== null) { // generic object\n        key = {};\n        for (var k in origKey) {\n          if (origKey.hasOwnProperty(k)) {\n            var val = origKey[k];\n            if (typeof val !== 'undefined') {\n              key[k] = normalizeKey(val);\n            }\n          }\n        }\n      }\n  }\n  return key;\n}\n\nfunction indexify(key) {\n  if (key !== null) {\n    switch (typeof key) {\n      case 'boolean':\n        return key ? 1 : 0;\n      case 'number':\n        return numToIndexableString(key);\n      case 'string':\n        // We've to be sure that key does not contain \\u0000\n        // Do order-preserving replacements:\n        // 0 -> 1, 1\n        // 1 -> 1, 2\n        // 2 -> 2, 2\n        /* eslint-disable no-control-regex */\n        return key\n          .replace(/\\u0002/g, '\\u0002\\u0002')\n          .replace(/\\u0001/g, '\\u0001\\u0002')\n          .replace(/\\u0000/g, '\\u0001\\u0001');\n        /* eslint-enable no-control-regex */\n      case 'object':\n        var isArray = Array.isArray(key);\n        var arr = isArray ? key : Object.keys(key);\n        var i = -1;\n        var len = arr.length;\n        var result = '';\n        if (isArray) {\n          while (++i < len) {\n            result += toIndexableString(arr[i]);\n          }\n        } else {\n          while (++i < len) {\n            var objKey = arr[i];\n            result += toIndexableString(objKey) +\n                toIndexableString(key[objKey]);\n          }\n        }\n        return result;\n    }\n  }\n  return '';\n}\n\n// convert the given key to a string that would be appropriate\n// for lexical sorting, e.g. within a database, where the\n// sorting is the same given by the collate() function.\nfunction toIndexableString(key) {\n  var zero = '\\u0000';\n  key = normalizeKey(key);\n  return collationIndex(key) + SEP + indexify(key) + zero;\n}\n\nfunction parseNumber(str, i) {\n  var originalIdx = i;\n  var num;\n  var zero = str[i] === '1';\n  if (zero) {\n    num = 0;\n    i++;\n  } else {\n    var neg = str[i] === '0';\n    i++;\n    var numAsString = '';\n    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);\n    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;\n    /* istanbul ignore next */\n    if (neg) {\n      magnitude = -magnitude;\n    }\n    i += MAGNITUDE_DIGITS;\n    while (true) {\n      var ch = str[i];\n      if (ch === '\\u0000') {\n        break;\n      } else {\n        numAsString += ch;\n      }\n      i++;\n    }\n    numAsString = numAsString.split('.');\n    if (numAsString.length === 1) {\n      num = parseInt(numAsString, 10);\n    } else {\n      /* istanbul ignore next */\n      num = parseFloat(numAsString[0] + '.' + numAsString[1]);\n    }\n    /* istanbul ignore next */\n    if (neg) {\n      num = num - 10;\n    }\n    /* istanbul ignore next */\n    if (magnitude !== 0) {\n      // parseFloat is more reliable than pow due to rounding errors\n      // e.g. Number.MAX_VALUE would return Infinity if we did\n      // num * Math.pow(10, magnitude);\n      num = parseFloat(num + 'e' + magnitude);\n    }\n  }\n  return {num: num, length : i - originalIdx};\n}\n\n// move up the stack while parsing\n// this function moved outside of parseIndexableString for performance\nfunction pop(stack, metaStack) {\n  var obj = stack.pop();\n\n  if (metaStack.length) {\n    var lastMetaElement = metaStack[metaStack.length - 1];\n    if (obj === lastMetaElement.element) {\n      // popping a meta-element, e.g. an object whose value is another object\n      metaStack.pop();\n      lastMetaElement = metaStack[metaStack.length - 1];\n    }\n    var element = lastMetaElement.element;\n    var lastElementIndex = lastMetaElement.index;\n    if (Array.isArray(element)) {\n      element.push(obj);\n    } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n      var key = stack.pop();\n      element[key] = obj;\n    } else {\n      stack.push(obj); // obj with key only\n    }\n  }\n}\n\nfunction parseIndexableString(str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n\n  /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n  while (true) {\n    var collationIndex = str[i++];\n    if (collationIndex === '\\u0000') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case '1':\n        stack.push(null);\n        break;\n      case '2':\n        stack.push(str[i] === '1');\n        i++;\n        break;\n      case '3':\n        var parsedNum = parseNumber(str, i);\n        stack.push(parsedNum.num);\n        i += parsedNum.length;\n        break;\n      case '4':\n        var parsedStr = '';\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n          var ch = str[i];\n          if (ch === '\\u0000') {\n            break;\n          }\n          parsedStr += ch;\n          i++;\n        }\n        // perform the reverse of the order-preserving replacement\n        // algorithm (see above)\n        /* eslint-disable no-control-regex */\n        parsedStr = parsedStr.replace(/\\u0001\\u0001/g, '\\u0000')\n          .replace(/\\u0001\\u0002/g, '\\u0001')\n          .replace(/\\u0002\\u0002/g, '\\u0002');\n        /* eslint-enable no-control-regex */\n        stack.push(parsedStr);\n        break;\n      case '5':\n        var arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '6':\n        var objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      /* istanbul ignore next */\n      default:\n        throw new Error(\n          'bad collationIndex or unexpectedly reached end of input: ' +\n            collationIndex);\n    }\n  }\n}\n\nfunction arrayCollate(a, b) {\n  var len = Math.min(a.length, b.length);\n  for (var i = 0; i < len; i++) {\n    var sort = collate(a[i], b[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n  }\n  return (a.length === b.length) ? 0 :\n    (a.length > b.length) ? 1 : -1;\n}\nfunction stringCollate(a, b) {\n  // See: https://github.com/daleharvey/pouchdb/issues/40\n  // This is incompatible with the CouchDB implementation, but its the\n  // best we can do for now\n  return (a === b) ? 0 : ((a > b) ? 1 : -1);\n}\nfunction objectCollate(a, b) {\n  var ak = Object.keys(a), bk = Object.keys(b);\n  var len = Math.min(ak.length, bk.length);\n  for (var i = 0; i < len; i++) {\n    // First sort the keys\n    var sort = collate(ak[i], bk[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n    // if the keys are equal sort the values\n    sort = collate(a[ak[i]], b[bk[i]]);\n    if (sort !== 0) {\n      return sort;\n    }\n\n  }\n  return (ak.length === bk.length) ? 0 :\n    (ak.length > bk.length) ? 1 : -1;\n}\n// The collation is defined by erlangs ordered terms\n// the atoms null, true, false come first, then numbers, strings,\n// arrays, then objects\n// null/undefined/NaN/Infinity/-Infinity are all considered null\nfunction collationIndex(x) {\n  var id = ['boolean', 'number', 'string', 'object'];\n  var idx = id.indexOf(typeof x);\n  //false if -1 otherwise true, but fast!!!!1\n  if (~idx) {\n    if (x === null) {\n      return 1;\n    }\n    if (Array.isArray(x)) {\n      return 5;\n    }\n    return idx < 3 ? (idx + 2) : (idx + 3);\n  }\n  /* istanbul ignore next */\n  if (Array.isArray(x)) {\n    return 5;\n  }\n}\n\n// conversion:\n// x yyy zz...zz\n// x = 0 for negative, 1 for 0, 2 for positive\n// y = exponent (for negative numbers negated) moved so that it's >= 0\n// z = mantisse\nfunction numToIndexableString(num) {\n\n  if (num === 0) {\n    return '1';\n  }\n\n  // convert number to exponential format for easier and\n  // more succinct string sorting\n  var expFormat = num.toExponential().split(/e\\+?/);\n  var magnitude = parseInt(expFormat[1], 10);\n\n  var neg = num < 0;\n\n  var result = neg ? '0' : '2';\n\n  // first sort by magnitude\n  // it's easier if all magnitudes are positive\n  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);\n  var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);\n\n  result += SEP + magString;\n\n  // then sort by the factor\n  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)\n  /* istanbul ignore next */\n  if (neg) { // for negative reverse ordering\n    factor = 10 - factor;\n  }\n\n  var factorStr = factor.toFixed(20);\n\n  // strip zeros from the end\n  factorStr = factorStr.replace(/\\.?0+$/, '');\n\n  result += SEP + factorStr;\n\n  return result;\n}\n\n// create a comparator based on the sort object\nfunction createFieldSorter(sort) {\n\n  function getFieldValuesAsArray(doc) {\n    return sort.map(function (sorting) {\n      var fieldName = getKey(sorting);\n      var parsedField = parseField(fieldName);\n      var docFieldValue = getFieldFromDoc(doc, parsedField);\n      return docFieldValue;\n    });\n  }\n\n  return function (aRow, bRow) {\n    var aFieldValues = getFieldValuesAsArray(aRow.doc);\n    var bFieldValues = getFieldValuesAsArray(bRow.doc);\n    var collation = collate(aFieldValues, bFieldValues);\n    if (collation !== 0) {\n      return collation;\n    }\n    // this is what mango seems to do\n    return compare$1(aRow.doc._id, bRow.doc._id);\n  };\n}\n\nfunction filterInMemoryFields(rows, requestDef, inMemoryFields) {\n  rows = rows.filter(function (row) {\n    return rowFilter(row.doc, requestDef.selector, inMemoryFields);\n  });\n\n  if (requestDef.sort) {\n    // in-memory sort\n    var fieldSorter = createFieldSorter(requestDef.sort);\n    rows = rows.sort(fieldSorter);\n    if (typeof requestDef.sort[0] !== 'string' &&\n        getValue(requestDef.sort[0]) === 'desc') {\n      rows = rows.reverse();\n    }\n  }\n\n  if ('limit' in requestDef || 'skip' in requestDef) {\n    // have to do the limit in-memory\n    var skip = requestDef.skip || 0;\n    var limit = ('limit' in requestDef ? requestDef.limit : rows.length) + skip;\n    rows = rows.slice(skip, limit);\n  }\n  return rows;\n}\n\nfunction rowFilter(doc, selector, inMemoryFields) {\n  return inMemoryFields.every(function (field) {\n    var matcher = selector[field];\n    var parsedField = parseField(field);\n    var docFieldValue = getFieldFromDoc(doc, parsedField);\n    if (isCombinationalField(field)) {\n      return matchCominationalSelector(field, matcher, doc);\n    }\n\n    return matchSelector(matcher, doc, parsedField, docFieldValue);\n  });\n}\n\nfunction matchSelector(matcher, doc, parsedField, docFieldValue) {\n  if (!matcher) {\n    // no filtering necessary; this field is just needed for sorting\n    return true;\n  }\n\n  return Object.keys(matcher).every(function (userOperator) {\n    var userValue = matcher[userOperator];\n    return match(userOperator, doc, userValue, parsedField, docFieldValue);\n  });\n}\n\nfunction matchCominationalSelector(field, matcher, doc) {\n\n  if (field === '$or') {\n    return matcher.some(function (orMatchers) {\n      return rowFilter(doc, orMatchers, Object.keys(orMatchers));\n    });\n  }\n\n  if (field === '$not') {\n    return !rowFilter(doc, matcher, Object.keys(matcher));\n  }\n\n  //`$nor`\n  return !matcher.find(function (orMatchers) {\n    return rowFilter(doc, orMatchers, Object.keys(orMatchers));\n  });\n\n}\n\nfunction match(userOperator, doc, userValue, parsedField, docFieldValue) {\n  if (!matchers[userOperator]) {\n    throw new Error('unknown operator \"' + userOperator +\n      '\" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, ' +\n      '$nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');\n  }\n  return matchers[userOperator](doc, userValue, parsedField, docFieldValue);\n}\n\nfunction fieldExists(docFieldValue) {\n  return typeof docFieldValue !== 'undefined' && docFieldValue !== null;\n}\n\nfunction fieldIsNotUndefined(docFieldValue) {\n  return typeof docFieldValue !== 'undefined';\n}\n\nfunction modField(docFieldValue, userValue) {\n  var divisor = userValue[0];\n  var mod = userValue[1];\n  if (divisor === 0) {\n    throw new Error('Bad divisor, cannot divide by zero');\n  }\n\n  if (parseInt(divisor, 10) !== divisor ) {\n    throw new Error('Divisor is not an integer');\n  }\n\n  if (parseInt(mod, 10) !== mod ) {\n    throw new Error('Modulus is not an integer');\n  }\n\n  if (parseInt(docFieldValue, 10) !== docFieldValue) {\n    return false;\n  }\n\n  return docFieldValue % divisor === mod;\n}\n\nfunction arrayContainsValue(docFieldValue, userValue) {\n  return userValue.some(function (val) {\n    if (docFieldValue instanceof Array) {\n      return docFieldValue.indexOf(val) > -1;\n    }\n\n    return docFieldValue === val;\n  });\n}\n\nfunction arrayContainsAllValues(docFieldValue, userValue) {\n  return userValue.every(function (val) {\n    return docFieldValue.indexOf(val) > -1;\n  });\n}\n\nfunction arraySize(docFieldValue, userValue) {\n  return docFieldValue.length === userValue;\n}\n\nfunction regexMatch(docFieldValue, userValue) {\n  var re = new RegExp(userValue);\n\n  return re.test(docFieldValue);\n}\n\nfunction typeMatch(docFieldValue, userValue) {\n\n  switch (userValue) {\n    case 'null':\n      return docFieldValue === null;\n    case 'boolean':\n      return typeof (docFieldValue) === 'boolean';\n    case 'number':\n      return typeof (docFieldValue) === 'number';\n    case 'string':\n      return typeof (docFieldValue) === 'string';\n    case 'array':\n      return docFieldValue instanceof Array;\n    case 'object':\n      return ({}).toString.call(docFieldValue) === '[object Object]';\n  }\n\n  throw new Error(userValue + ' not supported as a type.' +\n                  'Please use one of object, string, array, number, boolean or null.');\n\n}\n\nvar matchers = {\n\n  '$elemMatch': function (doc, userValue, parsedField, docFieldValue) {\n    if (!Array.isArray(docFieldValue)) {\n      return false;\n    }\n\n    if (docFieldValue.length === 0) {\n      return false;\n    }\n\n    if (typeof docFieldValue[0] === 'object') {\n      return docFieldValue.some(function (val) {\n        return rowFilter(val, userValue, Object.keys(userValue));\n      });\n    }\n\n    return docFieldValue.some(function (val) {\n      return matchSelector(userValue, doc, parsedField, val);\n    });\n  },\n\n  '$allMatch': function (doc, userValue, parsedField, docFieldValue) {\n    if (!Array.isArray(docFieldValue)) {\n      return false;\n    }\n\n    /* istanbul ignore next */\n    if (docFieldValue.length === 0) {\n      return false;\n    }\n\n    if (typeof docFieldValue[0] === 'object') {\n      return docFieldValue.every(function (val) {\n        return rowFilter(val, userValue, Object.keys(userValue));\n      });\n    }\n\n    return docFieldValue.every(function (val) {\n      return matchSelector(userValue, doc, parsedField, val);\n    });\n  },\n\n  '$eq': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) === 0;\n  },\n\n  '$gte': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) >= 0;\n  },\n\n  '$gt': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) > 0;\n  },\n\n  '$lte': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) <= 0;\n  },\n\n  '$lt': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) < 0;\n  },\n\n  '$exists': function (doc, userValue, parsedField, docFieldValue) {\n    //a field that is null is still considered to exist\n    if (userValue) {\n      return fieldIsNotUndefined(docFieldValue);\n    }\n\n    return !fieldIsNotUndefined(docFieldValue);\n  },\n\n  '$mod': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldExists(docFieldValue) && modField(docFieldValue, userValue);\n  },\n\n  '$ne': function (doc, userValue, parsedField, docFieldValue) {\n    return userValue.every(function (neValue) {\n      return collate(docFieldValue, neValue) !== 0;\n    });\n  },\n  '$in': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldExists(docFieldValue) && arrayContainsValue(docFieldValue, userValue);\n  },\n\n  '$nin': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldExists(docFieldValue) && !arrayContainsValue(docFieldValue, userValue);\n  },\n\n  '$size': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldExists(docFieldValue) && arraySize(docFieldValue, userValue);\n  },\n\n  '$all': function (doc, userValue, parsedField, docFieldValue) {\n    return Array.isArray(docFieldValue) && arrayContainsAllValues(docFieldValue, userValue);\n  },\n\n  '$regex': function (doc, userValue, parsedField, docFieldValue) {\n    return fieldExists(docFieldValue) && regexMatch(docFieldValue, userValue);\n  },\n\n  '$type': function (doc, userValue, parsedField, docFieldValue) {\n    return typeMatch(docFieldValue, userValue);\n  }\n};\n\n// return true if the given doc matches the supplied selector\nfunction matchesSelector(doc, selector) {\n  /* istanbul ignore if */\n  if (typeof selector !== 'object') {\n    // match the CouchDB error message\n    throw new Error('Selector error: expected a JSON object');\n  }\n\n  selector = massageSelector(selector);\n  var row = {\n    'doc': doc\n  };\n\n  var rowsMatched = filterInMemoryFields([row], { 'selector': selector }, Object.keys(selector));\n  return rowsMatched && rowsMatched.length === 1;\n}\n\nfunction evalFilter(input) {\n  return scopeEval('\"use strict\";\\nreturn ' + input + ';', {});\n}\n\nfunction evalView(input) {\n  var code = [\n    'return function(doc) {',\n    '  \"use strict\";',\n    '  var emitted = false;',\n    '  var emit = function (a, b) {',\n    '    emitted = true;',\n    '  };',\n    '  var view = ' + input + ';',\n    '  view(doc);',\n    '  if (emitted) {',\n    '    return true;',\n    '  }',\n    '};'\n  ].join('\\n');\n\n  return scopeEval(code, {});\n}\n\nfunction validate(opts, callback) {\n  if (opts.selector) {\n    if (opts.filter && opts.filter !== '_selector') {\n      var filterName = typeof opts.filter === 'string' ?\n        opts.filter : 'function';\n      return callback(new Error('selector invalid for filter \"' + filterName + '\"'));\n    }\n  }\n  callback();\n}\n\nfunction normalize(opts) {\n  if (opts.view && !opts.filter) {\n    opts.filter = '_view';\n  }\n\n  if (opts.selector && !opts.filter) {\n    opts.filter = '_selector';\n  }\n\n  if (opts.filter && typeof opts.filter === 'string') {\n    if (opts.filter === '_view') {\n      opts.view = normalizeDesignDocFunctionName(opts.view);\n    } else {\n      opts.filter = normalizeDesignDocFunctionName(opts.filter);\n    }\n  }\n}\n\nfunction shouldFilter(changesHandler, opts) {\n  return opts.filter && typeof opts.filter === 'string' &&\n    !opts.doc_ids && !isRemote(changesHandler.db);\n}\n\nfunction filter(changesHandler, opts) {\n  var callback = opts.complete;\n  if (opts.filter === '_view') {\n    if (!opts.view || typeof opts.view !== 'string') {\n      var err = createError(BAD_REQUEST,\n        '`view` filter parameter not found or invalid.');\n      return callback(err);\n    }\n    // fetch a view from a design doc, make it behave like a filter\n    var viewName = parseDesignDocFunctionName(opts.view);\n    changesHandler.db.get('_design/' + viewName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (changesHandler.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&\n        ddoc.views[viewName[1]].map;\n      if (!mapFun) {\n        return callback(createError(MISSING_DOC,\n          (ddoc.views ? 'missing json key: ' + viewName[1] :\n            'missing json key: views')));\n      }\n      opts.filter = evalView(mapFun);\n      changesHandler.doChanges(opts);\n    });\n  } else if (opts.selector) {\n    opts.filter = function (doc) {\n      return matchesSelector(doc, opts.selector);\n    };\n    changesHandler.doChanges(opts);\n  } else {\n    // fetch a filter from a design doc\n    var filterName = parseDesignDocFunctionName(opts.filter);\n    changesHandler.db.get('_design/' + filterName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (changesHandler.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];\n      if (!filterFun) {\n        return callback(createError(MISSING_DOC,\n          ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]\n            : 'missing json key: filters')));\n      }\n      opts.filter = evalFilter(filterFun);\n      changesHandler.doChanges(opts);\n    });\n  }\n}\n\nfunction applyChangesFilterPlugin(PouchDB) {\n  PouchDB._changesFilterPlugin = {\n    validate: validate,\n    normalize: normalize,\n    shouldFilter: shouldFilter,\n    filter: filter\n  };\n}\n\n// TODO: remove from pouchdb-core (breaking)\nPouchDB.plugin(applyChangesFilterPlugin);\n\nPouchDB.version = version;\n\nfunction toObject(array) {\n  return array.reduce(function (obj, item) {\n    obj[item] = true;\n    return obj;\n  }, {});\n}\n// List of top level reserved words for doc\nvar reservedWords = toObject([\n  '_id',\n  '_rev',\n  '_attachments',\n  '_deleted',\n  '_revisions',\n  '_revs_info',\n  '_conflicts',\n  '_deleted_conflicts',\n  '_local_seq',\n  '_rev_tree',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats',\n  // Specific to Couchbase Sync Gateway\n  '_removed'\n]);\n\n// List of reserved words that should end up the document\nvar dataWords = toObject([\n  '_attachments',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats'\n]);\n\nfunction parseRevisionInfo(rev) {\n  if (!/^\\d+-./.test(rev)) {\n    return createError(INVALID_REV);\n  }\n  var idx = rev.indexOf('-');\n  var left = rev.substring(0, idx);\n  var right = rev.substring(idx + 1);\n  return {\n    prefix: parseInt(left, 10),\n    id: right\n  };\n}\n\nfunction makeRevTreeFromRevisions(revisions, opts) {\n  var pos = revisions.start - revisions.ids.length + 1;\n\n  var revisionIds = revisions.ids;\n  var ids = [revisionIds[0], opts, []];\n\n  for (var i = 1, len = revisionIds.length; i < len; i++) {\n    ids = [revisionIds[i], {status: 'missing'}, [ids]];\n  }\n\n  return [{\n    pos: pos,\n    ids: ids\n  }];\n}\n\n// Preprocess documents, parse their revisions, assign an id and a\n// revision for new writes that are missing them, etc\nfunction parseDoc(doc, newEdits, dbOpts) {\n  if (!dbOpts) {\n    dbOpts = {\n      deterministic_revs: true\n    };\n  }\n\n  var nRevNum;\n  var newRevId;\n  var revInfo;\n  var opts = {status: 'available'};\n  if (doc._deleted) {\n    opts.deleted = true;\n  }\n\n  if (newEdits) {\n    if (!doc._id) {\n      doc._id = uuid();\n    }\n    newRevId = rev$$1(doc, dbOpts.deterministic_revs);\n    if (doc._rev) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      doc._rev_tree = [{\n        pos: revInfo.prefix,\n        ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]\n      }];\n      nRevNum = revInfo.prefix + 1;\n    } else {\n      doc._rev_tree = [{\n        pos: 1,\n        ids : [newRevId, opts, []]\n      }];\n      nRevNum = 1;\n    }\n  } else {\n    if (doc._revisions) {\n      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);\n      nRevNum = doc._revisions.start;\n      newRevId = doc._revisions.ids[0];\n    }\n    if (!doc._rev_tree) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      nRevNum = revInfo.prefix;\n      newRevId = revInfo.id;\n      doc._rev_tree = [{\n        pos: nRevNum,\n        ids: [newRevId, opts, []]\n      }];\n    }\n  }\n\n  invalidIdError(doc._id);\n\n  doc._rev = nRevNum + '-' + newRevId;\n\n  var result = {metadata : {}, data : {}};\n  for (var key in doc) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(doc, key)) {\n      var specialKey = key[0] === '_';\n      if (specialKey && !reservedWords[key]) {\n        var error = createError(DOC_VALIDATION, key);\n        error.message = DOC_VALIDATION.message + ': ' + key;\n        throw error;\n      } else if (specialKey && !dataWords[key]) {\n        result.metadata[key.slice(1)] = doc[key];\n      } else {\n        result.data[key] = doc[key];\n      }\n    }\n  }\n  return result;\n}\n\nfunction parseBase64(data) {\n  try {\n    return thisAtob(data);\n  } catch (e) {\n    var err = createError(BAD_ARG,\n      'Attachment is not a valid base64 string');\n    return {error: err};\n  }\n}\n\nfunction preprocessString(att, blobType, callback) {\n  var asBinary = parseBase64(att.data);\n  if (asBinary.error) {\n    return callback(asBinary.error);\n  }\n\n  att.length = asBinary.length;\n  if (blobType === 'blob') {\n    att.data = binStringToBluffer(asBinary, att.content_type);\n  } else if (blobType === 'base64') {\n    att.data = thisBtoa(asBinary);\n  } else { // binary\n    att.data = asBinary;\n  }\n  binaryMd5(asBinary, function (result) {\n    att.digest = 'md5-' + result;\n    callback();\n  });\n}\n\nfunction preprocessBlob(att, blobType, callback) {\n  binaryMd5(att.data, function (md5) {\n    att.digest = 'md5-' + md5;\n    // size is for blobs (browser), length is for buffers (node)\n    att.length = att.data.size || att.data.length || 0;\n    if (blobType === 'binary') {\n      blobToBinaryString(att.data, function (binString) {\n        att.data = binString;\n        callback();\n      });\n    } else if (blobType === 'base64') {\n      blobToBase64(att.data, function (b64) {\n        att.data = b64;\n        callback();\n      });\n    } else {\n      callback();\n    }\n  });\n}\n\nfunction preprocessAttachment(att, blobType, callback) {\n  if (att.stub) {\n    return callback();\n  }\n  if (typeof att.data === 'string') { // input is a base64 string\n    preprocessString(att, blobType, callback);\n  } else { // input is a blob\n    preprocessBlob(att, blobType, callback);\n  }\n}\n\nfunction preprocessAttachments(docInfos, blobType, callback) {\n\n  if (!docInfos.length) {\n    return callback();\n  }\n\n  var docv = 0;\n  var overallErr;\n\n  docInfos.forEach(function (docInfo) {\n    var attachments = docInfo.data && docInfo.data._attachments ?\n      Object.keys(docInfo.data._attachments) : [];\n    var recv = 0;\n\n    if (!attachments.length) {\n      return done();\n    }\n\n    function processedAttachment(err) {\n      overallErr = err;\n      recv++;\n      if (recv === attachments.length) {\n        done();\n      }\n    }\n\n    for (var key in docInfo.data._attachments) {\n      if (docInfo.data._attachments.hasOwnProperty(key)) {\n        preprocessAttachment(docInfo.data._attachments[key],\n          blobType, processedAttachment);\n      }\n    }\n  });\n\n  function done() {\n    docv++;\n    if (docInfos.length === docv) {\n      if (overallErr) {\n        callback(overallErr);\n      } else {\n        callback();\n      }\n    }\n  }\n}\n\nfunction updateDoc(revLimit, prev, docInfo, results,\n                   i, cb, writeDoc, newEdits) {\n\n  if (revExists(prev.rev_tree, docInfo.metadata.rev) && !newEdits) {\n    results[i] = docInfo;\n    return cb();\n  }\n\n  // sometimes this is pre-calculated. historically not always\n  var previousWinningRev = prev.winningRev || winningRev(prev);\n  var previouslyDeleted = 'deleted' in prev ? prev.deleted :\n    isDeleted(prev, previousWinningRev);\n  var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :\n    isDeleted(docInfo.metadata);\n  var isRoot = /^1-/.test(docInfo.metadata.rev);\n\n  if (previouslyDeleted && !deleted && newEdits && isRoot) {\n    var newDoc = docInfo.data;\n    newDoc._rev = previousWinningRev;\n    newDoc._id = docInfo.metadata.id;\n    docInfo = parseDoc(newDoc, newEdits);\n  }\n\n  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);\n\n  var inConflict = newEdits && ((\n    (previouslyDeleted && deleted && merged.conflicts !== 'new_leaf') ||\n    (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||\n    (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));\n\n  if (inConflict) {\n    var err = createError(REV_CONFLICT);\n    results[i] = err;\n    return cb();\n  }\n\n  var newRev = docInfo.metadata.rev;\n  docInfo.metadata.rev_tree = merged.tree;\n  docInfo.stemmedRevs = merged.stemmedRevs || [];\n  /* istanbul ignore else */\n  if (prev.rev_map) {\n    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb\n  }\n\n  // recalculate\n  var winningRev$$1 = winningRev(docInfo.metadata);\n  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$1);\n\n  // calculate the total number of documents that were added/removed,\n  // from the perspective of total_rows/doc_count\n  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :\n    previouslyDeleted < winningRevIsDeleted ? -1 : 1;\n\n  var newRevIsDeleted;\n  if (newRev === winningRev$$1) {\n    // if the new rev is the same as the winning rev, we can reuse that value\n    newRevIsDeleted = winningRevIsDeleted;\n  } else {\n    // if they're not the same, then we need to recalculate\n    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);\n  }\n\n  writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,\n    true, delta, i, cb);\n}\n\nfunction rootIsMissing(docInfo) {\n  return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';\n}\n\nfunction processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,\n                     writeDoc, opts, overallCallback) {\n\n  // Default to 1000 locally\n  revLimit = revLimit || 1000;\n\n  function insertDoc(docInfo, resultsIdx, callback) {\n    // Cant insert new deleted documents\n    var winningRev$$1 = winningRev(docInfo.metadata);\n    var deleted = isDeleted(docInfo.metadata, winningRev$$1);\n    if ('was_delete' in opts && deleted) {\n      results[resultsIdx] = createError(MISSING_DOC, 'deleted');\n      return callback();\n    }\n\n    // 4712 - detect whether a new document was inserted with a _rev\n    var inConflict = newEdits && rootIsMissing(docInfo);\n\n    if (inConflict) {\n      var err = createError(REV_CONFLICT);\n      results[resultsIdx] = err;\n      return callback();\n    }\n\n    var delta = deleted ? 0 : 1;\n\n    writeDoc(docInfo, winningRev$$1, deleted, deleted, false,\n      delta, resultsIdx, callback);\n  }\n\n  var newEdits = opts.new_edits;\n  var idsToDocs = new ExportedMap();\n\n  var docsDone = 0;\n  var docsToDo = docInfos.length;\n\n  function checkAllDocsDone() {\n    if (++docsDone === docsToDo && overallCallback) {\n      overallCallback();\n    }\n  }\n\n  docInfos.forEach(function (currentDoc, resultsIdx) {\n\n    if (currentDoc._id && isLocalId(currentDoc._id)) {\n      var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';\n      api[fun](currentDoc, {ctx: tx}, function (err, res) {\n        results[resultsIdx] = err || res;\n        checkAllDocsDone();\n      });\n      return;\n    }\n\n    var id = currentDoc.metadata.id;\n    if (idsToDocs.has(id)) {\n      docsToDo--; // duplicate\n      idsToDocs.get(id).push([currentDoc, resultsIdx]);\n    } else {\n      idsToDocs.set(id, [[currentDoc, resultsIdx]]);\n    }\n  });\n\n  // in the case of new_edits, the user can provide multiple docs\n  // with the same id. these need to be processed sequentially\n  idsToDocs.forEach(function (docs, id) {\n    var numDone = 0;\n\n    function docWritten() {\n      if (++numDone < docs.length) {\n        nextDoc();\n      } else {\n        checkAllDocsDone();\n      }\n    }\n    function nextDoc() {\n      var value = docs[numDone];\n      var currentDoc = value[0];\n      var resultsIdx = value[1];\n\n      if (fetchedDocs.has(id)) {\n        updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,\n          resultsIdx, docWritten, writeDoc, newEdits);\n      } else {\n        // Ensure stemming applies to new writes as well\n        var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);\n        currentDoc.metadata.rev_tree = merged.tree;\n        currentDoc.stemmedRevs = merged.stemmedRevs || [];\n        insertDoc(currentDoc, resultsIdx, docWritten);\n      }\n    }\n    nextDoc();\n  });\n}\n\n// IndexedDB requires a versioned database structure, so we use the\n// version here to manage migrations.\nvar ADAPTER_VERSION = 5;\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\n// Keyed by document id\nvar DOC_STORE = 'document-store';\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nvar BY_SEQ_STORE = 'by-sequence';\n// Where we store attachments\nvar ATTACH_STORE = 'attach-store';\n// Where we store many-to-many relations\n// between attachment digests and seqs\nvar ATTACH_AND_SEQ_STORE = 'attach-seq-store';\n\n// Where we store database-wide meta data in a single record\n// keyed by id: META_STORE\nvar META_STORE = 'meta-store';\n// Where we store local documents\nvar LOCAL_STORE = 'local-store';\n// Where we detect blob support\nvar DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';\n\nfunction safeJsonParse(str) {\n  // This try/catch guards against stack overflow errors.\n  // JSON.parse() is faster than vuvuzela.parse() but vuvuzela\n  // cannot overflow.\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela__WEBPACK_IMPORTED_MODULE_6___default.a.parse(str);\n  }\n}\n\nfunction safeJsonStringify(json) {\n  try {\n    return JSON.stringify(json);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela__WEBPACK_IMPORTED_MODULE_6___default.a.stringify(json);\n  }\n}\n\nfunction idbError(callback) {\n  return function (evt) {\n    var message = 'unknown_error';\n    if (evt.target && evt.target.error) {\n      message = evt.target.error.name || evt.target.error.message;\n    }\n    callback(createError(IDB_ERROR, message, evt.type));\n  };\n}\n\n// Unfortunately, the metadata has to be stringified\n// when it is put into the database, because otherwise\n// IndexedDB can throw errors for deeply-nested objects.\n// Originally we just used JSON.parse/JSON.stringify; now\n// we use this custom vuvuzela library that avoids recursion.\n// If we could do it all over again, we'd probably use a\n// format for the revision trees other than JSON.\nfunction encodeMetadata(metadata, winningRev, deleted) {\n  return {\n    data: safeJsonStringify(metadata),\n    winningRev: winningRev,\n    deletedOrLocal: deleted ? '1' : '0',\n    seq: metadata.seq, // highest seq for this doc\n    id: metadata.id\n  };\n}\n\nfunction decodeMetadata(storedObject) {\n  if (!storedObject) {\n    return null;\n  }\n  var metadata = safeJsonParse(storedObject.data);\n  metadata.winningRev = storedObject.winningRev;\n  metadata.deleted = storedObject.deletedOrLocal === '1';\n  metadata.seq = storedObject.seq;\n  return metadata;\n}\n\n// read the doc back out from the database. we don't store the\n// _id or _rev because we already have _doc_id_rev.\nfunction decodeDoc(doc) {\n  if (!doc) {\n    return doc;\n  }\n  var idx = doc._doc_id_rev.lastIndexOf(':');\n  doc._id = doc._doc_id_rev.substring(0, idx - 1);\n  doc._rev = doc._doc_id_rev.substring(idx + 1);\n  delete doc._doc_id_rev;\n  return doc;\n}\n\n// Read a blob from the database, encoding as necessary\n// and translating from base64 if the IDB doesn't support\n// native Blobs\nfunction readBlobData(body, type, asBlob, callback) {\n  if (asBlob) {\n    if (!body) {\n      callback(createBlob([''], {type: type}));\n    } else if (typeof body !== 'string') { // we have blob support\n      callback(body);\n    } else { // no blob support\n      callback(b64ToBluffer(body, type));\n    }\n  } else { // as base64 string\n    if (!body) {\n      callback('');\n    } else if (typeof body !== 'string') { // we have blob support\n      readAsBinaryString(body, function (binary) {\n        callback(thisBtoa(binary));\n      });\n    } else { // no blob support\n      callback(body);\n    }\n  }\n}\n\nfunction fetchAttachmentsIfNecessary(doc, opts, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var digest = attObj.digest;\n    var req = txn.objectStore(ATTACH_STORE).get(digest);\n    req.onsuccess = function (e) {\n      attObj.body = e.target.result.body;\n      checkDone();\n    };\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\n// IDB-specific postprocessing necessary because\n// we don't know whether we stored a true Blob or\n// a base64-encoded string, and if it's a Blob it\n// needs to be read outside of the transaction context\nfunction postProcessAttachments(results, asBlob) {\n  return Promise.all(results.map(function (row) {\n    if (row.doc && row.doc._attachments) {\n      var attNames = Object.keys(row.doc._attachments);\n      return Promise.all(attNames.map(function (att) {\n        var attObj = row.doc._attachments[att];\n        if (!('body' in attObj)) { // already processed\n          return;\n        }\n        var body = attObj.body;\n        var type = attObj.content_type;\n        return new Promise(function (resolve) {\n          readBlobData(body, type, asBlob, function (data) {\n            row.doc._attachments[att] = $inject_Object_assign(\n              pick(attObj, ['digest', 'content_type']),\n              {data: data}\n            );\n            resolve();\n          });\n        });\n      }));\n    }\n  }));\n}\n\nfunction compactRevs(revs, docId, txn) {\n\n  var possiblyOrphanedDigests = [];\n  var seqStore = txn.objectStore(BY_SEQ_STORE);\n  var attStore = txn.objectStore(ATTACH_STORE);\n  var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n  var count = revs.length;\n\n  function checkDone() {\n    count--;\n    if (!count) { // done processing all revs\n      deleteOrphanedAttachments();\n    }\n  }\n\n  function deleteOrphanedAttachments() {\n    if (!possiblyOrphanedDigests.length) {\n      return;\n    }\n    possiblyOrphanedDigests.forEach(function (digest) {\n      var countReq = attAndSeqStore.index('digestSeq').count(\n        IDBKeyRange.bound(\n          digest + '::', digest + '::\\uffff', false, false));\n      countReq.onsuccess = function (e) {\n        var count = e.target.result;\n        if (!count) {\n          // orphaned\n          attStore.delete(digest);\n        }\n      };\n    });\n  }\n\n  revs.forEach(function (rev) {\n    var index = seqStore.index('_doc_id_rev');\n    var key = docId + \"::\" + rev;\n    index.getKey(key).onsuccess = function (e) {\n      var seq = e.target.result;\n      if (typeof seq !== 'number') {\n        return checkDone();\n      }\n      seqStore.delete(seq);\n\n      var cursor = attAndSeqStore.index('seq')\n        .openCursor(IDBKeyRange.only(seq));\n\n      cursor.onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor) {\n          var digest = cursor.value.digestSeq.split('::')[0];\n          possiblyOrphanedDigests.push(digest);\n          attAndSeqStore.delete(cursor.primaryKey);\n          cursor.continue();\n        } else { // done\n          checkDone();\n        }\n      };\n    };\n  });\n}\n\nfunction openTransactionSafely(idb, stores, mode) {\n  try {\n    return {\n      txn: idb.transaction(stores, mode)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nvar changesHandler = new Changes();\n\nfunction idbBulkDocs(dbOpts, req, opts, api, idb, callback) {\n  var docInfos = req.docs;\n  var txn;\n  var docStore;\n  var bySeqStore;\n  var attachStore;\n  var attachAndSeqStore;\n  var metaStore;\n  var docInfoError;\n  var metaDoc;\n\n  for (var i = 0, len = docInfos.length; i < len; i++) {\n    var doc = docInfos[i];\n    if (doc._id && isLocalId(doc._id)) {\n      continue;\n    }\n    doc = docInfos[i] = parseDoc(doc, opts.new_edits, dbOpts);\n    if (doc.error && !docInfoError) {\n      docInfoError = doc;\n    }\n  }\n\n  if (docInfoError) {\n    return callback(docInfoError);\n  }\n\n  var allDocsProcessed = false;\n  var docCountDelta = 0;\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new ExportedMap();\n  var preconditionErrored = false;\n  var blobType = api._meta.blobSupport ? 'blob' : 'base64';\n\n  preprocessAttachments(docInfos, blobType, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    startTransaction();\n  });\n\n  function startTransaction() {\n\n    var stores = [\n      DOC_STORE, BY_SEQ_STORE,\n      ATTACH_STORE,\n      LOCAL_STORE, ATTACH_AND_SEQ_STORE,\n      META_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    txn = txnResult.txn;\n    txn.onabort = idbError(callback);\n    txn.ontimeout = idbError(callback);\n    txn.oncomplete = complete;\n    docStore = txn.objectStore(DOC_STORE);\n    bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    attachStore = txn.objectStore(ATTACH_STORE);\n    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n    metaStore = txn.objectStore(META_STORE);\n\n    metaStore.get(META_STORE).onsuccess = function (e) {\n      metaDoc = e.target.result;\n      updateDocCountIfReady();\n    };\n\n    verifyAttachments(function (err) {\n      if (err) {\n        preconditionErrored = true;\n        return callback(err);\n      }\n      fetchExistingDocs();\n    });\n  }\n\n  function onAllDocsProcessed() {\n    allDocsProcessed = true;\n    updateDocCountIfReady();\n  }\n\n  function idbProcessDocs() {\n    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,\n                txn, results, writeDoc, opts, onAllDocsProcessed);\n  }\n\n  function updateDocCountIfReady() {\n    if (!metaDoc || !allDocsProcessed) {\n      return;\n    }\n    // caching the docCount saves a lot of time in allDocs() and\n    // info(), which is why we go to all the trouble of doing this\n    metaDoc.docCount += docCountDelta;\n    metaStore.put(metaDoc);\n  }\n\n  function fetchExistingDocs() {\n\n    if (!docInfos.length) {\n      return;\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        idbProcessDocs();\n      }\n    }\n\n    function readMetadata(event) {\n      var metadata = decodeMetadata(event.target.result);\n\n      if (metadata) {\n        fetchedDocs.set(metadata.id, metadata);\n      }\n      checkDone();\n    }\n\n    for (var i = 0, len = docInfos.length; i < len; i++) {\n      var docInfo = docInfos[i];\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        checkDone(); // skip local docs\n        continue;\n      }\n      var req = docStore.get(docInfo.metadata.id);\n      req.onsuccess = readMetadata;\n    }\n  }\n\n  function complete() {\n    if (preconditionErrored) {\n      return;\n    }\n\n    changesHandler.notify(api._meta.name);\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n\n    var req = attachStore.get(digest);\n    req.onsuccess = function (e) {\n      if (!e.target.result) {\n        var err = createError(MISSING_STUB,\n          'unknown stub attachment with digest ' +\n          digest);\n        err.status = 412;\n        callback(err);\n      } else {\n        callback();\n      }\n    };\n  }\n\n  function verifyAttachments(finish) {\n\n\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    docInfo.metadata.winningRev = winningRev$$1;\n    docInfo.metadata.deleted = winningRevIsDeleted;\n\n    var doc = docInfo.data;\n    doc._id = docInfo.metadata.id;\n    doc._rev = docInfo.metadata.rev;\n\n    if (newRevIsDeleted) {\n      doc._deleted = true;\n    }\n\n    var hasAttachments = doc._attachments &&\n      Object.keys(doc._attachments).length;\n    if (hasAttachments) {\n      return writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,\n        isUpdate, resultsIdx, callback);\n    }\n\n    docCountDelta += delta;\n    updateDocCountIfReady();\n\n    finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,\n      isUpdate, resultsIdx, callback);\n  }\n\n  function finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,\n                     isUpdate, resultsIdx, callback) {\n\n    var doc = docInfo.data;\n    var metadata = docInfo.metadata;\n\n    doc._doc_id_rev = metadata.id + '::' + metadata.rev;\n    delete doc._id;\n    delete doc._rev;\n\n    function afterPutDoc(e) {\n      var revsToDelete = docInfo.stemmedRevs || [];\n\n      if (isUpdate && api.auto_compaction) {\n        revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));\n      }\n\n      if (revsToDelete && revsToDelete.length) {\n        compactRevs(revsToDelete, docInfo.metadata.id, txn);\n      }\n\n      metadata.seq = e.target.result;\n      // Current _rev is calculated from _rev_tree on read\n      // delete metadata.rev;\n      var metadataToStore = encodeMetadata(metadata, winningRev$$1,\n        winningRevIsDeleted);\n      var metaDataReq = docStore.put(metadataToStore);\n      metaDataReq.onsuccess = afterPutMetadata;\n    }\n\n    function afterPutDocError(e) {\n      // ConstraintError, need to update, not put (see #1638 for details)\n      e.preventDefault(); // avoid transaction abort\n      e.stopPropagation(); // avoid transaction onerror\n      var index = bySeqStore.index('_doc_id_rev');\n      var getKeyReq = index.getKey(doc._doc_id_rev);\n      getKeyReq.onsuccess = function (e) {\n        var putReq = bySeqStore.put(doc, e.target.result);\n        putReq.onsuccess = afterPutDoc;\n      };\n    }\n\n    function afterPutMetadata() {\n      results[resultsIdx] = {\n        ok: true,\n        id: metadata.id,\n        rev: metadata.rev\n      };\n      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);\n      insertAttachmentMappings(docInfo, metadata.seq, callback);\n    }\n\n    var putReq = bySeqStore.put(doc);\n\n    putReq.onsuccess = afterPutDoc;\n    putReq.onerror = afterPutDocError;\n  }\n\n  function writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,\n                            isUpdate, resultsIdx, callback) {\n\n\n    var doc = docInfo.data;\n\n    var numDone = 0;\n    var attachments = Object.keys(doc._attachments);\n\n    function collectResults() {\n      if (numDone === attachments.length) {\n        finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,\n          isUpdate, resultsIdx, callback);\n      }\n    }\n\n    function attachmentSaved() {\n      numDone++;\n      collectResults();\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        att.revpos = parseInt(winningRev$$1, 10);\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        numDone++;\n        collectResults();\n      }\n    });\n  }\n\n  // map seqs to attachment digests, which\n  // we will need later during compaction\n  function insertAttachmentMappings(docInfo, seq, callback) {\n\n    var attsAdded = 0;\n    var attsToAdd = Object.keys(docInfo.data._attachments || {});\n\n    if (!attsToAdd.length) {\n      return callback();\n    }\n\n    function checkDone() {\n      if (++attsAdded === attsToAdd.length) {\n        callback();\n      }\n    }\n\n    function add(att) {\n      var digest = docInfo.data._attachments[att].digest;\n      var req = attachAndSeqStore.put({\n        seq: seq,\n        digestSeq: digest + '::' + seq\n      });\n\n      req.onsuccess = checkDone;\n      req.onerror = function (e) {\n        // this callback is for a constaint error, which we ignore\n        // because this docid/rev has already been associated with\n        // the digest (e.g. when new_edits == false)\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n        checkDone();\n      };\n    }\n    for (var i = 0; i < attsToAdd.length; i++) {\n      add(attsToAdd[i]); // do in parallel\n    }\n  }\n\n  function saveAttachment(digest, data, callback) {\n\n\n    var getKeyReq = attachStore.count(digest);\n    getKeyReq.onsuccess = function (e) {\n      var count = e.target.result;\n      if (count) {\n        return callback(); // already exists\n      }\n      var newAtt = {\n        digest: digest,\n        body: data\n      };\n      var putReq = attachStore.put(newAtt);\n      putReq.onsuccess = callback;\n    };\n  }\n}\n\n// Abstraction over IDBCursor and getAll()/getAllKeys() that allows us to batch our operations\n// while falling back to a normal IDBCursor operation on browsers that don't support getAll() or\n// getAllKeys(). This allows for a much faster implementation than just straight-up cursors, because\n// we're not processing each document one-at-a-time.\nfunction runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {\n\n  if (batchSize === -1) {\n    batchSize = 1000;\n  }\n\n  // Bail out of getAll()/getAllKeys() in the following cases:\n  // 1) either method is unsupported - we need both\n  // 2) batchSize is 1 (might as well use IDBCursor)\n  // 3) descending – no real way to do this via getAll()/getAllKeys()\n\n  var useGetAll = typeof objectStore.getAll === 'function' &&\n    typeof objectStore.getAllKeys === 'function' &&\n    batchSize > 1 && !descending;\n\n  var keysBatch;\n  var valuesBatch;\n  var pseudoCursor;\n\n  function onGetAll(e) {\n    valuesBatch = e.target.result;\n    if (keysBatch) {\n      onBatch(keysBatch, valuesBatch, pseudoCursor);\n    }\n  }\n\n  function onGetAllKeys(e) {\n    keysBatch = e.target.result;\n    if (valuesBatch) {\n      onBatch(keysBatch, valuesBatch, pseudoCursor);\n    }\n  }\n\n  function continuePseudoCursor() {\n    if (!keysBatch.length) { // no more results\n      return onBatch();\n    }\n    // fetch next batch, exclusive start\n    var lastKey = keysBatch[keysBatch.length - 1];\n    var newKeyRange;\n    if (keyRange && keyRange.upper) {\n      try {\n        newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper,\n          true, keyRange.upperOpen);\n      } catch (e) {\n        if (e.name === \"DataError\" && e.code === 0) {\n          return onBatch(); // we're done, startkey and endkey are equal\n        }\n      }\n    } else {\n      newKeyRange = IDBKeyRange.lowerBound(lastKey, true);\n    }\n    keyRange = newKeyRange;\n    keysBatch = null;\n    valuesBatch = null;\n    objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\n    objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\n  }\n\n  function onCursor(e) {\n    var cursor = e.target.result;\n    if (!cursor) { // done\n      return onBatch();\n    }\n    // regular IDBCursor acts like a batch where batch size is always 1\n    onBatch([cursor.key], [cursor.value], cursor);\n  }\n\n  if (useGetAll) {\n    pseudoCursor = {\"continue\": continuePseudoCursor};\n    objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\n    objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\n  } else if (descending) {\n    objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;\n  } else {\n    objectStore.openCursor(keyRange).onsuccess = onCursor;\n  }\n}\n\n// simple shim for objectStore.getAll(), falling back to IDBCursor\nfunction getAll(objectStore, keyRange, onSuccess) {\n  if (typeof objectStore.getAll === 'function') {\n    // use native getAll\n    objectStore.getAll(keyRange).onsuccess = onSuccess;\n    return;\n  }\n  // fall back to cursors\n  var values = [];\n\n  function onCursor(e) {\n    var cursor = e.target.result;\n    if (cursor) {\n      values.push(cursor.value);\n      cursor.continue();\n    } else {\n      onSuccess({\n        target: {\n          result: values\n        }\n      });\n    }\n  }\n\n  objectStore.openCursor(keyRange).onsuccess = onCursor;\n}\n\nfunction allDocsKeys(keys, docStore, onBatch) {\n  // It's not guaranted to be returned in right order  \n  var valuesBatch = new Array(keys.length);\n  var count = 0;\n  keys.forEach(function (key, index) {\n    docStore.get(key).onsuccess = function (event) {\n      if (event.target.result) {\n        valuesBatch[index] = event.target.result;\n      } else {\n        valuesBatch[index] = {key: key, error: 'not_found'};\n      }\n      count++;\n      if (count === keys.length) {\n        onBatch(keys, valuesBatch, {});\n      }\n    };\n  });\n}\n\nfunction createKeyRange(start, end, inclusiveEnd, key, descending) {\n  try {\n    if (start && end) {\n      if (descending) {\n        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\n      } else {\n        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\n      }\n    } else if (start) {\n      if (descending) {\n        return IDBKeyRange.upperBound(start);\n      } else {\n        return IDBKeyRange.lowerBound(start);\n      }\n    } else if (end) {\n      if (descending) {\n        return IDBKeyRange.lowerBound(end, !inclusiveEnd);\n      } else {\n        return IDBKeyRange.upperBound(end, !inclusiveEnd);\n      }\n    } else if (key) {\n      return IDBKeyRange.only(key);\n    }\n  } catch (e) {\n    return {error: e};\n  }\n  return null;\n}\n\nfunction idbAllDocs(opts, idb, callback) {\n  var start = 'startkey' in opts ? opts.startkey : false;\n  var end = 'endkey' in opts ? opts.endkey : false;\n  var key = 'key' in opts ? opts.key : false;\n  var keys = 'keys' in opts ? opts.keys : false; \n  var skip = opts.skip || 0;\n  var limit = typeof opts.limit === 'number' ? opts.limit : -1;\n  var inclusiveEnd = opts.inclusive_end !== false;\n\n  var keyRange ; \n  var keyRangeError;\n  if (!keys) {\n    keyRange = createKeyRange(start, end, inclusiveEnd, key, opts.descending);\n    keyRangeError = keyRange && keyRange.error;\n    if (keyRangeError && \n      !(keyRangeError.name === \"DataError\" && keyRangeError.code === 0)) {\n      // DataError with error code 0 indicates start is less than end, so\n      // can just do an empty query. Else need to throw\n      return callback(createError(IDB_ERROR,\n        keyRangeError.name, keyRangeError.message));\n    }\n  }\n\n  var stores = [DOC_STORE, BY_SEQ_STORE, META_STORE];\n\n  if (opts.attachments) {\n    stores.push(ATTACH_STORE);\n  }\n  var txnResult = openTransactionSafely(idb, stores, 'readonly');\n  if (txnResult.error) {\n    return callback(txnResult.error);\n  }\n  var txn = txnResult.txn;\n  txn.oncomplete = onTxnComplete;\n  txn.onabort = idbError(callback);\n  var docStore = txn.objectStore(DOC_STORE);\n  var seqStore = txn.objectStore(BY_SEQ_STORE);\n  var metaStore = txn.objectStore(META_STORE);\n  var docIdRevIndex = seqStore.index('_doc_id_rev');\n  var results = [];\n  var docCount;\n  var updateSeq;\n\n  metaStore.get(META_STORE).onsuccess = function (e) {\n    docCount = e.target.result.docCount;\n  };\n\n  /* istanbul ignore if */\n  if (opts.update_seq) {\n    getMaxUpdateSeq(seqStore, function (e) { \n      if (e.target.result && e.target.result.length > 0) {\n        updateSeq = e.target.result[0];\n      }\n    });\n  }\n\n  function getMaxUpdateSeq(objectStore, onSuccess) {\n    function onCursor(e) {\n      var cursor = e.target.result;\n      var maxKey = undefined;\n      if (cursor && cursor.key) {\n        maxKey = cursor.key;\n      } \n      return onSuccess({\n        target: {\n          result: [maxKey]\n        }\n      });\n    }\n    objectStore.openCursor(null, 'prev').onsuccess = onCursor;\n  }\n\n  // if the user specifies include_docs=true, then we don't\n  // want to block the main cursor while we're fetching the doc\n  function fetchDocAsynchronously(metadata, row, winningRev$$1) {\n    var key = metadata.id + \"::\" + winningRev$$1;\n    docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {\n      row.doc = decodeDoc(e.target.result) || {};\n      if (opts.conflicts) {\n        var conflicts = collectConflicts(metadata);\n        if (conflicts.length) {\n          row.doc._conflicts = conflicts;\n        }\n      }\n      fetchAttachmentsIfNecessary(row.doc, opts, txn);\n    };\n  }\n\n  function allDocsInner(winningRev$$1, metadata) {\n    var row = {\n      id: metadata.id,\n      key: metadata.id,\n      value: {\n        rev: winningRev$$1\n      }\n    };\n    var deleted = metadata.deleted;\n    if (deleted) {\n      if (keys) {\n        results.push(row);\n        // deleted docs are okay with \"keys\" requests\n        row.value.deleted = true;\n        row.doc = null;\n      }\n    } else if (skip-- <= 0) {\n      results.push(row);\n      if (opts.include_docs) {\n        fetchDocAsynchronously(metadata, row, winningRev$$1);\n      }\n    }\n  }\n\n  function processBatch(batchValues) {\n    for (var i = 0, len = batchValues.length; i < len; i++) {\n      if (results.length === limit) {\n        break;\n      }\n      var batchValue = batchValues[i];\n      if (batchValue.error && keys) {\n        // key was not found with \"keys\" requests\n        results.push(batchValue);\n        continue;\n      }\n      var metadata = decodeMetadata(batchValue);\n      var winningRev$$1 = metadata.winningRev;\n      allDocsInner(winningRev$$1, metadata);\n    }\n  }\n\n  function onBatch(batchKeys, batchValues, cursor) {\n    if (!cursor) {\n      return;\n    }\n    processBatch(batchValues);\n    if (results.length < limit) {\n      cursor.continue();\n    }\n  }\n\n  function onGetAll(e) {\n    var values = e.target.result;\n    if (opts.descending) {\n      values = values.reverse();\n    }\n    processBatch(values);\n  }\n\n  function onResultsReady() {\n    var returnVal = {\n      total_rows: docCount,\n      offset: opts.skip,\n      rows: results\n    };\n    \n    /* istanbul ignore if */\n    if (opts.update_seq && updateSeq !== undefined) {\n      returnVal.update_seq = updateSeq;\n    }\n    callback(null, returnVal);\n  }\n\n  function onTxnComplete() {\n    if (opts.attachments) {\n      postProcessAttachments(results, opts.binary).then(onResultsReady);\n    } else {\n      onResultsReady();\n    }\n  }\n\n  // don't bother doing any requests if start > end or limit === 0\n  if (keyRangeError || limit === 0) {\n    return;\n  }\n  if (keys) {\n    return allDocsKeys(opts.keys, docStore, onBatch);\n  }\n  if (limit === -1) { // just fetch everything\n    return getAll(docStore, keyRange, onGetAll);\n  }\n  // else do a cursor\n  // choose a batch size based on the skip, since we'll need to skip that many\n  runBatchedCursor(docStore, keyRange, opts.descending, limit + skip, onBatch);\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\nfunction checkBlobSupport(txn) {\n  return new Promise(function (resolve) {\n    var blob$$1 = createBlob(['']);\n    var req = txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob$$1, 'key');\n\n    req.onsuccess = function () {\n      var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n      var matchedEdge = navigator.userAgent.match(/Edge\\//);\n      // MS Edge pretends to be Chrome 42:\n      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n      resolve(matchedEdge || !matchedChrome ||\n        parseInt(matchedChrome[1], 10) >= 43);\n    };\n\n    req.onerror = txn.onabort = function (e) {\n      // If the transaction aborts now its due to not being able to\n      // write to the database, likely due to the disk being full\n      e.preventDefault();\n      e.stopPropagation();\n      resolve(false);\n    };\n  }).catch(function () {\n    return false; // error, so assume unsupported\n  });\n}\n\nfunction countDocs(txn, cb) {\n  var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');\n  index.count(IDBKeyRange.only('0')).onsuccess = function (e) {\n    cb(e.target.result);\n  };\n}\n\n// This task queue ensures that IDB open calls are done in their own tick\n\nvar running = false;\nvar queue = [];\n\nfunction tryCode(fun, err, res, PouchDB) {\n  try {\n    fun(err, res);\n  } catch (err) {\n    // Shouldn't happen, but in some odd cases\n    // IndexedDB implementations might throw a sync\n    // error, in which case this will at least log it.\n    PouchDB.emit('error', err);\n  }\n}\n\nfunction applyNext() {\n  if (running || !queue.length) {\n    return;\n  }\n  running = true;\n  queue.shift()();\n}\n\nfunction enqueueTask(action, callback, PouchDB) {\n  queue.push(function runAction() {\n    action(function runCallback(err, res) {\n      tryCode(callback, err, res, PouchDB);\n      running = false;\n      immediate__WEBPACK_IMPORTED_MODULE_1___default()(function runNext() {\n        applyNext(PouchDB);\n      });\n    });\n  });\n  applyNext();\n}\n\nfunction changes(opts, api, dbName, idb) {\n  opts = clone(opts);\n\n  if (opts.continuous) {\n    var id = dbName + ':' + uuid();\n    changesHandler.addListener(dbName, id, api, opts);\n    changesHandler.notify(dbName);\n    return {\n      cancel: function () {\n        changesHandler.removeListener(dbName, id);\n      }\n    };\n  }\n\n  var docIds = opts.doc_ids && new ExportedSet(opts.doc_ids);\n\n  opts.since = opts.since || 0;\n  var lastSeq = opts.since;\n\n  var limit = 'limit' in opts ? opts.limit : -1;\n  if (limit === 0) {\n    limit = 1; // per CouchDB _changes spec\n  }\n\n  var results = [];\n  var numResults = 0;\n  var filter = filterChange(opts);\n  var docIdsToMetadata = new ExportedMap();\n\n  var txn;\n  var bySeqStore;\n  var docStore;\n  var docIdRevIndex;\n\n  function onBatch(batchKeys, batchValues, cursor) {\n    if (!cursor || !batchKeys.length) { // done\n      return;\n    }\n\n    var winningDocs = new Array(batchKeys.length);\n    var metadatas = new Array(batchKeys.length);\n\n    function processMetadataAndWinningDoc(metadata, winningDoc) {\n      var change = opts.processChange(winningDoc, metadata, opts);\n      lastSeq = change.seq = metadata.seq;\n\n      var filtered = filter(change);\n      if (typeof filtered === 'object') { // anything but true/false indicates error\n        return Promise.reject(filtered);\n      }\n\n      if (!filtered) {\n        return Promise.resolve();\n      }\n      numResults++;\n      if (opts.return_docs) {\n        results.push(change);\n      }\n      // process the attachment immediately\n      // for the benefit of live listeners\n      if (opts.attachments && opts.include_docs) {\n        return new Promise(function (resolve) {\n          fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {\n            postProcessAttachments([change], opts.binary).then(function () {\n              resolve(change);\n            });\n          });\n        });\n      } else {\n        return Promise.resolve(change);\n      }\n    }\n\n    function onBatchDone() {\n      var promises = [];\n      for (var i = 0, len = winningDocs.length; i < len; i++) {\n        if (numResults === limit) {\n          break;\n        }\n        var winningDoc = winningDocs[i];\n        if (!winningDoc) {\n          continue;\n        }\n        var metadata = metadatas[i];\n        promises.push(processMetadataAndWinningDoc(metadata, winningDoc));\n      }\n\n      Promise.all(promises).then(function (changes) {\n        for (var i = 0, len = changes.length; i < len; i++) {\n          if (changes[i]) {\n            opts.onChange(changes[i]);\n          }\n        }\n      }).catch(opts.complete);\n\n      if (numResults !== limit) {\n        cursor.continue();\n      }\n    }\n\n    // Fetch all metadatas/winningdocs from this batch in parallel, then process\n    // them all only once all data has been collected. This is done in parallel\n    // because it's faster than doing it one-at-a-time.\n    var numDone = 0;\n    batchValues.forEach(function (value, i) {\n      var doc = decodeDoc(value);\n      var seq = batchKeys[i];\n      fetchWinningDocAndMetadata(doc, seq, function (metadata, winningDoc) {\n        metadatas[i] = metadata;\n        winningDocs[i] = winningDoc;\n        if (++numDone === batchKeys.length) {\n          onBatchDone();\n        }\n      });\n    });\n  }\n\n  function onGetMetadata(doc, seq, metadata, cb) {\n    if (metadata.seq !== seq) {\n      // some other seq is later\n      return cb();\n    }\n\n    if (metadata.winningRev === doc._rev) {\n      // this is the winning doc\n      return cb(metadata, doc);\n    }\n\n    // fetch winning doc in separate request\n    var docIdRev = doc._id + '::' + metadata.winningRev;\n    var req = docIdRevIndex.get(docIdRev);\n    req.onsuccess = function (e) {\n      cb(metadata, decodeDoc(e.target.result));\n    };\n  }\n\n  function fetchWinningDocAndMetadata(doc, seq, cb) {\n    if (docIds && !docIds.has(doc._id)) {\n      return cb();\n    }\n\n    var metadata = docIdsToMetadata.get(doc._id);\n    if (metadata) { // cached\n      return onGetMetadata(doc, seq, metadata, cb);\n    }\n    // metadata not cached, have to go fetch it\n    docStore.get(doc._id).onsuccess = function (e) {\n      metadata = decodeMetadata(e.target.result);\n      docIdsToMetadata.set(doc._id, metadata);\n      onGetMetadata(doc, seq, metadata, cb);\n    };\n  }\n\n  function finish() {\n    opts.complete(null, {\n      results: results,\n      last_seq: lastSeq\n    });\n  }\n\n  function onTxnComplete() {\n    if (!opts.continuous && opts.attachments) {\n      // cannot guarantee that postProcessing was already done,\n      // so do it again\n      postProcessAttachments(results).then(finish);\n    } else {\n      finish();\n    }\n  }\n\n  var objectStores = [DOC_STORE, BY_SEQ_STORE];\n  if (opts.attachments) {\n    objectStores.push(ATTACH_STORE);\n  }\n  var txnResult = openTransactionSafely(idb, objectStores, 'readonly');\n  if (txnResult.error) {\n    return opts.complete(txnResult.error);\n  }\n  txn = txnResult.txn;\n  txn.onabort = idbError(opts.complete);\n  txn.oncomplete = onTxnComplete;\n\n  bySeqStore = txn.objectStore(BY_SEQ_STORE);\n  docStore = txn.objectStore(DOC_STORE);\n  docIdRevIndex = bySeqStore.index('_doc_id_rev');\n\n  var keyRange = (opts.since && !opts.descending) ?\n    IDBKeyRange.lowerBound(opts.since, true) : null;\n\n  runBatchedCursor(bySeqStore, keyRange, opts.descending, limit, onBatch);\n}\n\nvar cachedDBs = new ExportedMap();\nvar blobSupportPromise;\nvar openReqList = new ExportedMap();\n\nfunction IdbPouch(opts, callback) {\n  var api = this;\n\n  enqueueTask(function (thisCallback) {\n    init(api, opts, thisCallback);\n  }, callback, api.constructor);\n}\n\nfunction init(api, opts, callback) {\n\n  var dbName = opts.name;\n\n  var idb = null;\n  api._meta = null;\n\n  // called when creating a fresh new database\n  function createSchema(db) {\n    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});\n    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n    db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});\n    db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});\n    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\n    // added in v2\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    // added in v3\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});\n\n    // added in v4\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 2\n  // unfortunately \"deletedOrLocal\" is a misnomer now that we no longer\n  // store local docs in the main doc-store, but whaddyagonnado\n  function addDeletedOrLocalIndex(txn, callback) {\n    var docStore = txn.objectStore(DOC_STORE);\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    docStore.openCursor().onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var deleted = isDeleted(metadata);\n        metadata.deletedOrLocal = deleted ? \"1\" : \"0\";\n        docStore.put(metadata);\n        cursor.continue();\n      } else {\n        callback();\n      }\n    };\n  }\n\n  // migration to version 3 (part 1)\n  function createLocalStoreSchema(db) {\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n  }\n\n  // migration to version 3 (part 2)\n  function migrateLocalStore(txn, cb) {\n    var localStore = txn.objectStore(LOCAL_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var docId = metadata.id;\n        var local = isLocalId(docId);\n        var rev = winningRev(metadata);\n        if (local) {\n          var docIdRev = docId + \"::\" + rev;\n          // remove all seq entries\n          // associated with this docId\n          var start = docId + \"::\";\n          var end = docId + \"::~\";\n          var index = seqStore.index('_doc_id_rev');\n          var range = IDBKeyRange.bound(start, end, false, false);\n          var seqCursor = index.openCursor(range);\n          seqCursor.onsuccess = function (e) {\n            seqCursor = e.target.result;\n            if (!seqCursor) {\n              // done\n              docStore.delete(cursor.primaryKey);\n              cursor.continue();\n            } else {\n              var data = seqCursor.value;\n              if (data._doc_id_rev === docIdRev) {\n                localStore.put(data);\n              }\n              seqStore.delete(seqCursor.primaryKey);\n              seqCursor.continue();\n            }\n          };\n        } else {\n          cursor.continue();\n        }\n      } else if (cb) {\n        cb();\n      }\n    };\n  }\n\n  // migration to version 4 (part 1)\n  function addAttachAndSeqStore(db) {\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 4 (part 2)\n  function migrateAttsAndSeqs(txn, callback) {\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var attStore = txn.objectStore(ATTACH_STORE);\n    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    // need to actually populate the table. this is the expensive part,\n    // so as an optimization, check first that this database even\n    // contains attachments\n    var req = attStore.count();\n    req.onsuccess = function (e) {\n      var count = e.target.result;\n      if (!count) {\n        return callback(); // done\n      }\n\n      seqStore.openCursor().onsuccess = function (e) {\n        var cursor = e.target.result;\n        if (!cursor) {\n          return callback(); // done\n        }\n        var doc = cursor.value;\n        var seq = cursor.primaryKey;\n        var atts = Object.keys(doc._attachments || {});\n        var digestMap = {};\n        for (var j = 0; j < atts.length; j++) {\n          var att = doc._attachments[atts[j]];\n          digestMap[att.digest] = true; // uniq digests, just in case\n        }\n        var digests = Object.keys(digestMap);\n        for (j = 0; j < digests.length; j++) {\n          var digest = digests[j];\n          attAndSeqStore.put({\n            seq: seq,\n            digestSeq: digest + '::' + seq\n          });\n        }\n        cursor.continue();\n      };\n    };\n  }\n\n  // migration to version 5\n  // Instead of relying on on-the-fly migration of metadata,\n  // this brings the doc-store to its modern form:\n  // - metadata.winningrev\n  // - metadata.seq\n  // - stringify the metadata when storing it\n  function migrateMetadata(txn) {\n\n    function decodeMetadataCompat(storedObject) {\n      if (!storedObject.data) {\n        // old format, when we didn't store it stringified\n        storedObject.deleted = storedObject.deletedOrLocal === '1';\n        return storedObject;\n      }\n      return decodeMetadata(storedObject);\n    }\n\n    // ensure that every metadata has a winningRev and seq,\n    // which was previously created on-the-fly but better to migrate\n    var bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (e) {\n      var cursor = e.target.result;\n      if (!cursor) {\n        return; // done\n      }\n      var metadata = decodeMetadataCompat(cursor.value);\n\n      metadata.winningRev = metadata.winningRev ||\n        winningRev(metadata);\n\n      function fetchMetadataSeq() {\n        // metadata.seq was added post-3.2.0, so if it's missing,\n        // we need to fetch it manually\n        var start = metadata.id + '::';\n        var end = metadata.id + '::\\uffff';\n        var req = bySeqStore.index('_doc_id_rev').openCursor(\n          IDBKeyRange.bound(start, end));\n\n        var metadataSeq = 0;\n        req.onsuccess = function (e) {\n          var cursor = e.target.result;\n          if (!cursor) {\n            metadata.seq = metadataSeq;\n            return onGetMetadataSeq();\n          }\n          var seq = cursor.primaryKey;\n          if (seq > metadataSeq) {\n            metadataSeq = seq;\n          }\n          cursor.continue();\n        };\n      }\n\n      function onGetMetadataSeq() {\n        var metadataToStore = encodeMetadata(metadata,\n          metadata.winningRev, metadata.deleted);\n\n        var req = docStore.put(metadataToStore);\n        req.onsuccess = function () {\n          cursor.continue();\n        };\n      }\n\n      if (metadata.seq) {\n        return onGetMetadataSeq();\n      }\n\n      fetchMetadataSeq();\n    };\n\n  }\n\n  api._remote = false;\n  api.type = function () {\n    return 'idb';\n  };\n\n  api._id = toPromise(function (callback) {\n    callback(null, api._meta.instanceId);\n  });\n\n  api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {\n    idbBulkDocs(opts, req, reqOpts, api, idb, callback);\n  };\n\n  // First we look up the metadata in the ids database, then we fetch the\n  // current revision(s) from the by sequence store\n  api._get = function idb_get(id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var txn = opts.ctx;\n    if (!txn) {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: txn});\n    }\n\n    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {\n      metadata = decodeMetadata(e.target.result);\n      // we can determine the result here if:\n      // 1. there is no such document\n      // 2. the document is deleted and we don't ask about specific rev\n      // When we ask with opts.rev we expect the answer to be either\n      // doc (possibly with _deleted=true) or missing error\n      if (!metadata) {\n        err = createError(MISSING_DOC, 'missing');\n        return finish();\n      }\n\n      var rev;\n      if (!opts.rev) {\n        rev = metadata.winningRev;\n        var deleted = isDeleted(metadata);\n        if (deleted) {\n          err = createError(MISSING_DOC, \"deleted\");\n          return finish();\n        }\n      } else {\n        rev = opts.latest ? latest(opts.rev, metadata) : opts.rev;\n      }\n\n      var objectStore = txn.objectStore(BY_SEQ_STORE);\n      var key = metadata.id + '::' + rev;\n\n      objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {\n        doc = e.target.result;\n        if (doc) {\n          doc = decodeDoc(doc);\n        }\n        if (!doc) {\n          err = createError(MISSING_DOC, 'missing');\n          return finish();\n        }\n        finish();\n      };\n    };\n  };\n\n  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n    var txn;\n    if (opts.ctx) {\n      txn = opts.ctx;\n    } else {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n\n    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {\n      var body = e.target.result.body;\n      readBlobData(body, type, opts.binary, function (blobData) {\n        callback(null, blobData);\n      });\n    };\n  };\n\n  api._info = function idb_info(callback) {\n    var updateSeq;\n    var docCount;\n\n    var txnResult = openTransactionSafely(idb, [META_STORE, BY_SEQ_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {\n      docCount = e.target.result.docCount;\n    };\n    txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev').onsuccess = function (e) {\n      var cursor = e.target.result;\n      updateSeq = cursor ? cursor.key : 0;\n    };\n\n    txn.oncomplete = function () {\n      callback(null, {\n        doc_count: docCount,\n        update_seq: updateSeq,\n        // for debugging\n        idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')\n      });\n    };\n  };\n\n  api._allDocs = function idb_allDocs(opts, callback) {\n    idbAllDocs(opts, idb, callback);\n  };\n\n  api._changes = function idbChanges(opts) {\n    return changes(opts, api, dbName, idb);\n  };\n\n  api._close = function (callback) {\n    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close\n    // \"Returns immediately and closes the connection in a separate thread...\"\n    idb.close();\n    cachedDBs.delete(dbName);\n    callback();\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var req = txn.objectStore(DOC_STORE).get(docId);\n    req.onsuccess = function (event) {\n      var doc = decodeMetadata(event.target.result);\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        callback(null, doc.rev_tree);\n      }\n    };\n  };\n\n  // This function removes revisions of document docId\n  // which are listed in revs and sets this document\n  // revision to to rev_tree\n  api._doCompaction = function (docId, revs, callback) {\n    var stores = [\n      DOC_STORE,\n      BY_SEQ_STORE,\n      ATTACH_STORE,\n      ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n\n    var docStore = txn.objectStore(DOC_STORE);\n\n    docStore.get(docId).onsuccess = function (event) {\n      var metadata = decodeMetadata(event.target.result);\n      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                         revHash, ctx, opts) {\n        var rev = pos + '-' + revHash;\n        if (revs.indexOf(rev) !== -1) {\n          opts.status = 'missing';\n        }\n      });\n      compactRevs(revs, docId, txn);\n      var winningRev$$1 = metadata.winningRev;\n      var deleted = metadata.deleted;\n      txn.objectStore(DOC_STORE).put(\n        encodeMetadata(metadata, winningRev$$1, deleted));\n    };\n    txn.onabort = idbError(callback);\n    txn.oncomplete = function () {\n      callback();\n    };\n  };\n\n\n  api._getLocal = function (id, callback) {\n    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var tx = txnResult.txn;\n    var req = tx.objectStore(LOCAL_STORE).get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var doc = e.target.result;\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        delete doc['_doc_id_rev']; // for backwards compat\n        callback(null, doc);\n      }\n    };\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    if (!oldRev) {\n      doc._rev = '0-1';\n    } else {\n      doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n    }\n\n    var tx = opts.ctx;\n    var ret;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.onerror = idbError(callback);\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req;\n    if (oldRev) {\n      req = oStore.get(id);\n      req.onsuccess = function (e) {\n        var oldDoc = e.target.result;\n        if (!oldDoc || oldDoc._rev !== oldRev) {\n          callback(createError(REV_CONFLICT));\n        } else { // update\n          var req = oStore.put(doc);\n          req.onsuccess = function () {\n            ret = {ok: true, id: doc._id, rev: doc._rev};\n            if (opts.ctx) { // return immediately\n              callback(null, ret);\n            }\n          };\n        }\n      };\n    } else { // new doc\n      req = oStore.add(doc);\n      req.onerror = function (e) {\n        // constraint error, already exists\n        callback(createError(REV_CONFLICT));\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n      };\n      req.onsuccess = function () {\n        ret = {ok: true, id: doc._id, rev: doc._rev};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      };\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var tx = opts.ctx;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n    var ret;\n    var id = doc._id;\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req = oStore.get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var oldDoc = e.target.result;\n      if (!oldDoc || oldDoc._rev !== doc._rev) {\n        callback(createError(MISSING_DOC));\n      } else {\n        oStore.delete(id);\n        ret = {ok: true, id: id, rev: '0-0'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      }\n    };\n  };\n\n  api._destroy = function (opts, callback) {\n    changesHandler.removeAllListeners(dbName);\n\n    //Close open request for \"dbName\" database to fix ie delay.\n    var openReq = openReqList.get(dbName);\n    if (openReq && openReq.result) {\n      openReq.result.close();\n      cachedDBs.delete(dbName);\n    }\n    var req = indexedDB.deleteDatabase(dbName);\n\n    req.onsuccess = function () {\n      //Remove open request from the list.\n      openReqList.delete(dbName);\n      if (hasLocalStorage() && (dbName in localStorage)) {\n        delete localStorage[dbName];\n      }\n      callback(null, { 'ok': true });\n    };\n\n    req.onerror = idbError(callback);\n  };\n\n  var cached = cachedDBs.get(dbName);\n\n  if (cached) {\n    idb = cached.idb;\n    api._meta = cached.global;\n    return immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n      callback(null, api);\n    });\n  }\n\n  var req = indexedDB.open(dbName, ADAPTER_VERSION);\n  openReqList.set(dbName, req);\n\n  req.onupgradeneeded = function (e) {\n    var db = e.target.result;\n    if (e.oldVersion < 1) {\n      return createSchema(db); // new db, initial schema\n    }\n    // do migrations\n\n    var txn = e.currentTarget.transaction;\n    // these migrations have to be done in this function, before\n    // control is returned to the event loop, because IndexedDB\n\n    if (e.oldVersion < 3) {\n      createLocalStoreSchema(db); // v2 -> v3\n    }\n    if (e.oldVersion < 4) {\n      addAttachAndSeqStore(db); // v3 -> v4\n    }\n\n    var migrations = [\n      addDeletedOrLocalIndex, // v1 -> v2\n      migrateLocalStore,      // v2 -> v3\n      migrateAttsAndSeqs,     // v3 -> v4\n      migrateMetadata         // v4 -> v5\n    ];\n\n    var i = e.oldVersion;\n\n    function next() {\n      var migration = migrations[i - 1];\n      i++;\n      if (migration) {\n        migration(txn, next);\n      }\n    }\n\n    next();\n  };\n\n  req.onsuccess = function (e) {\n\n    idb = e.target.result;\n\n    idb.onversionchange = function () {\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    idb.onabort = function (e) {\n      guardedConsole('error', 'Database has a global failure', e.target.error);\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    // Do a few setup operations (in parallel as much as possible):\n    // 1. Fetch meta doc\n    // 2. Check blob support\n    // 3. Calculate docCount\n    // 4. Generate an instanceId if necessary\n    // 5. Store docCount and instanceId on meta doc\n\n    var txn = idb.transaction([\n      META_STORE,\n      DETECT_BLOB_SUPPORT_STORE,\n      DOC_STORE\n    ], 'readwrite');\n\n    var storedMetaDoc = false;\n    var metaDoc;\n    var docCount;\n    var blobSupport;\n    var instanceId;\n\n    function completeSetup() {\n      if (typeof blobSupport === 'undefined' || !storedMetaDoc) {\n        return;\n      }\n      api._meta = {\n        name: dbName,\n        instanceId: instanceId,\n        blobSupport: blobSupport\n      };\n\n      cachedDBs.set(dbName, {\n        idb: idb,\n        global: api._meta\n      });\n      callback(null, api);\n    }\n\n    function storeMetaDocIfReady() {\n      if (typeof docCount === 'undefined' || typeof metaDoc === 'undefined') {\n        return;\n      }\n      var instanceKey = dbName + '_id';\n      if (instanceKey in metaDoc) {\n        instanceId = metaDoc[instanceKey];\n      } else {\n        metaDoc[instanceKey] = instanceId = uuid();\n      }\n      metaDoc.docCount = docCount;\n      txn.objectStore(META_STORE).put(metaDoc);\n    }\n\n    //\n    // fetch or generate the instanceId\n    //\n    txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {\n      metaDoc = e.target.result || { id: META_STORE };\n      storeMetaDocIfReady();\n    };\n\n    //\n    // countDocs\n    //\n    countDocs(txn, function (count) {\n      docCount = count;\n      storeMetaDocIfReady();\n    });\n\n    //\n    // check blob support\n    //\n    if (!blobSupportPromise) {\n      // make sure blob support is only checked once\n      blobSupportPromise = checkBlobSupport(txn);\n    }\n\n    blobSupportPromise.then(function (val) {\n      blobSupport = val;\n      completeSetup();\n    });\n\n    // only when the metadata put transaction has completed,\n    // consider the setup done\n    txn.oncomplete = function () {\n      storedMetaDoc = true;\n      completeSetup();\n    };\n    txn.onabort = idbError(callback);\n  };\n\n  req.onerror = function () {\n    var msg = 'Failed to open indexedDB, are you in private browsing mode?';\n    guardedConsole('error', msg);\n    callback(createError(IDB_ERROR, msg));\n  };\n}\n\nIdbPouch.valid = function () {\n  // Following #7085 buggy idb versions (typically Safari < 10.1) are\n  // considered valid.\n\n  // On Firefox SecurityError is thrown while referencing indexedDB if cookies\n  // are not allowed. `typeof indexedDB` also triggers the error.\n  try {\n    // some outdated implementations of IDB that appear on Samsung\n    // and HTC Android devices <4.4 are missing IDBKeyRange\n    return typeof indexedDB !== 'undefined' && typeof IDBKeyRange !== 'undefined';\n  } catch (e) {\n    return false;\n  }\n};\n\nfunction IDBPouch (PouchDB) {\n  PouchDB.adapter('idb', IdbPouch, true);\n}\n\n// dead simple promise pool, inspired by https://github.com/timdp/es6-promise-pool\n// but much smaller in code size. limits the number of concurrent promises that are executed\n\n\nfunction pool(promiseFactories, limit) {\n  return new Promise(function (resolve, reject) {\n    var running = 0;\n    var current = 0;\n    var done = 0;\n    var len = promiseFactories.length;\n    var err;\n\n    function runNext() {\n      running++;\n      promiseFactories[current++]().then(onSuccess, onError);\n    }\n\n    function doNext() {\n      if (++done === len) {\n        /* istanbul ignore if */\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      } else {\n        runNextBatch();\n      }\n    }\n\n    function onSuccess() {\n      running--;\n      doNext();\n    }\n\n    /* istanbul ignore next */\n    function onError(thisErr) {\n      running--;\n      err = err || thisErr;\n      doNext();\n    }\n\n    function runNextBatch() {\n      while (running < limit && current < len) {\n        runNext();\n      }\n    }\n\n    runNextBatch();\n  });\n}\n\nvar CHANGES_BATCH_SIZE = 25;\nvar MAX_SIMULTANEOUS_REVS = 50;\nvar CHANGES_TIMEOUT_BUFFER = 5000;\nvar DEFAULT_HEARTBEAT = 10000;\n\nvar supportsBulkGetMap = {};\n\nfunction readAttachmentsAsBlobOrBuffer(row) {\n  var doc = row.doc || row.ok;\n  var atts = doc._attachments;\n  if (!atts) {\n    return;\n  }\n  Object.keys(atts).forEach(function (filename) {\n    var att = atts[filename];\n    att.data = b64ToBluffer(att.data, att.content_type);\n  });\n}\n\nfunction encodeDocId(id) {\n  if (/^_design/.test(id)) {\n    return '_design/' + encodeURIComponent(id.slice(8));\n  }\n  if (/^_local/.test(id)) {\n    return '_local/' + encodeURIComponent(id.slice(7));\n  }\n  return encodeURIComponent(id);\n}\n\nfunction preprocessAttachments$1(doc) {\n  if (!doc._attachments || !Object.keys(doc._attachments)) {\n    return Promise.resolve();\n  }\n\n  return Promise.all(Object.keys(doc._attachments).map(function (key) {\n    var attachment = doc._attachments[key];\n    if (attachment.data && typeof attachment.data !== 'string') {\n      return new Promise(function (resolve) {\n        blobToBase64(attachment.data, resolve);\n      }).then(function (b64) {\n        attachment.data = b64;\n      });\n    }\n  }));\n}\n\nfunction hasUrlPrefix(opts) {\n  if (!opts.prefix) {\n    return false;\n  }\n  var protocol = parseUri(opts.prefix).protocol;\n  return protocol === 'http' || protocol === 'https';\n}\n\n// Get all the information you possibly can about the URI given by name and\n// return it as a suitable object.\nfunction getHost(name, opts) {\n  // encode db name if opts.prefix is a url (#5574)\n  if (hasUrlPrefix(opts)) {\n    var dbName = opts.name.substr(opts.prefix.length);\n    // Ensure prefix has a trailing slash\n    var prefix = opts.prefix.replace(/\\/?$/, '/');\n    name = prefix + encodeURIComponent(dbName);\n  }\n\n  var uri = parseUri(name);\n  if (uri.user || uri.password) {\n    uri.auth = {username: uri.user, password: uri.password};\n  }\n\n  // Split the path part of the URI into parts using '/' as the delimiter\n  // after removing any leading '/' and any trailing '/'\n  var parts = uri.path.replace(/(^\\/|\\/$)/g, '').split('/');\n\n  uri.db = parts.pop();\n  // Prevent double encoding of URI component\n  if (uri.db.indexOf('%') === -1) {\n    uri.db = encodeURIComponent(uri.db);\n  }\n\n  uri.path = parts.join('/');\n\n  return uri;\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genDBUrl(opts, path) {\n  return genUrl(opts, opts.db + '/' + path);\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genUrl(opts, path) {\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  var pathDel = !opts.path ? '' : '/';\n\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  return opts.protocol + '://' + opts.host +\n         (opts.port ? (':' + opts.port) : '') +\n         '/' + opts.path + pathDel + path;\n}\n\nfunction paramsToStr(params) {\n  return '?' + Object.keys(params).map(function (k) {\n    return k + '=' + encodeURIComponent(params[k]);\n  }).join('&');\n}\n\nfunction shouldCacheBust(opts) {\n  var ua = (typeof navigator !== 'undefined' && navigator.userAgent) ?\n      navigator.userAgent.toLowerCase() : '';\n  var isIE = ua.indexOf('msie') !== -1;\n  var isTrident = ua.indexOf('trident') !== -1;\n  var isEdge = ua.indexOf('edge') !== -1;\n  var isGET = !('method' in opts) || opts.method === 'GET';\n  return (isIE || isTrident || isEdge) && isGET;\n}\n\n// Implements the PouchDB API for dealing with CouchDB instances over HTTP\nfunction HttpPouch(opts, callback) {\n\n  // The functions that will be publicly available for HttpPouch\n  var api = this;\n\n  var host = getHost(opts.name, opts);\n  var dbUrl = genDBUrl(host, '');\n\n  opts = clone(opts);\n\n  var ourFetch = function (url, options) {\n\n    options = options || {};\n    options.headers = options.headers || new h();\n\n    if (opts.auth || host.auth) {\n      var nAuth = opts.auth || host.auth;\n      var str = nAuth.username + ':' + nAuth.password;\n      var token = thisBtoa(unescape(encodeURIComponent(str)));\n      options.headers.set('Authorization', 'Basic ' + token);\n    }\n\n    var headers = opts.headers || {};\n    Object.keys(headers).forEach(function (key) {\n      options.headers.append(key, headers[key]);\n    });\n\n    /* istanbul ignore if */\n    if (shouldCacheBust(options)) {\n      url += (url.indexOf('?') === -1 ? '?' : '&') + '_nonce=' + Date.now();\n    }\n\n    var fetchFun = opts.fetch || f$1;\n    return fetchFun(url, options);\n  };\n\n  function adapterFun$$1(name, fun) {\n    return adapterFun(name, argsarray__WEBPACK_IMPORTED_MODULE_0___default()(function (args) {\n      setup().then(function () {\n        return fun.apply(this, args);\n      }).catch(function (e) {\n        var callback = args.pop();\n        callback(e);\n      });\n    })).bind(api);\n  }\n\n  function fetchJSON(url, options, callback) {\n\n    var result = {};\n\n    options = options || {};\n    options.headers = options.headers || new h();\n\n    if (!options.headers.get('Content-Type')) {\n      options.headers.set('Content-Type', 'application/json');\n    }\n    if (!options.headers.get('Accept')) {\n      options.headers.set('Accept', 'application/json');\n    }\n\n    return ourFetch(url, options).then(function (response) {\n      result.ok = response.ok;\n      result.status = response.status;\n      return response.json();\n    }).then(function (json) {\n      result.data = json;\n      if (!result.ok) {\n        result.data.status = result.status;\n        var err = generateErrorFromResponse(result.data);\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n\n      if (Array.isArray(result.data)) {\n        result.data = result.data.map(function (v) {\n          if (v.error || v.missing) {\n            return generateErrorFromResponse(v);\n          } else {\n            return v;\n          }\n        });\n      }\n\n      if (callback) {\n        callback(null, result.data);\n      } else {\n        return result;\n      }\n    });\n  }\n\n  var setupPromise;\n\n  function setup() {\n    if (opts.skip_setup) {\n      return Promise.resolve();\n    }\n\n    // If there is a setup in process or previous successful setup\n    // done then we will use that\n    // If previous setups have been rejected we will try again\n    if (setupPromise) {\n      return setupPromise;\n    }\n\n    setupPromise = fetchJSON(dbUrl).catch(function (err) {\n      if (err && err.status && err.status === 404) {\n        // Doesnt exist, create it\n        explainError(404, 'PouchDB is just detecting if the remote exists.');\n        return fetchJSON(dbUrl, {method: 'PUT'});\n      } else {\n        return Promise.reject(err);\n      }\n    }).catch(function (err) {\n      // If we try to create a database that already exists, skipped in\n      // istanbul since its catching a race condition.\n      /* istanbul ignore if */\n      if (err && err.status && err.status === 412) {\n        return true;\n      }\n      return Promise.reject(err);\n    });\n\n    setupPromise.catch(function () {\n      setupPromise = null;\n    });\n\n    return setupPromise;\n  }\n\n  immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n    callback(null, api);\n  });\n\n  api._remote = true;\n\n  /* istanbul ignore next */\n  api.type = function () {\n    return 'http';\n  };\n\n  api.id = adapterFun$$1('id', function (callback) {\n    ourFetch(genUrl(host, '')).then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      var uuid$$1 = (result && result.uuid) ?\n          (result.uuid + host.db) : genDBUrl(host, '');\n      callback(null, uuid$$1);\n    }).catch(function (err) {\n      callback(err);\n    });\n  });\n\n  // Sends a POST request to the host calling the couchdb _compact function\n  //    version: The version of CouchDB it is running\n  api.compact = adapterFun$$1('compact', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    fetchJSON(genDBUrl(host, '_compact'), {method: 'POST'}).then(function () {\n      function ping() {\n        api.info(function (err, res) {\n          // CouchDB may send a \"compact_running:true\" if it's\n          // already compacting. PouchDB Server doesn't.\n          /* istanbul ignore else */\n          if (res && !res.compact_running) {\n            callback(null, {ok: true});\n          } else {\n            setTimeout(ping, opts.interval || 200);\n          }\n        });\n      }\n      // Ping the http if it's finished compaction\n      ping();\n    });\n  });\n\n  api.bulkGet = adapterFun('bulkGet', function (opts, callback) {\n    var self = this;\n\n    function doBulkGet(cb) {\n      var params = {};\n      if (opts.revs) {\n        params.revs = true;\n      }\n      if (opts.attachments) {\n        /* istanbul ignore next */\n        params.attachments = true;\n      }\n      if (opts.latest) {\n        params.latest = true;\n      }\n      fetchJSON(genDBUrl(host, '_bulk_get' + paramsToStr(params)), {\n        method: 'POST',\n        body: JSON.stringify({ docs: opts.docs})\n      }).then(function (result) {\n        if (opts.attachments && opts.binary) {\n          result.data.results.forEach(function (res) {\n            res.docs.forEach(readAttachmentsAsBlobOrBuffer);\n          });\n        }\n        cb(null, result.data);\n      }).catch(cb);\n    }\n\n    /* istanbul ignore next */\n    function doBulkGetShim() {\n      // avoid \"url too long error\" by splitting up into multiple requests\n      var batchSize = MAX_SIMULTANEOUS_REVS;\n      var numBatches = Math.ceil(opts.docs.length / batchSize);\n      var numDone = 0;\n      var results = new Array(numBatches);\n\n      function onResult(batchNum) {\n        return function (err, res) {\n          // err is impossible because shim returns a list of errs in that case\n          results[batchNum] = res.results;\n          if (++numDone === numBatches) {\n            callback(null, {results: flatten(results)});\n          }\n        };\n      }\n\n      for (var i = 0; i < numBatches; i++) {\n        var subOpts = pick(opts, ['revs', 'attachments', 'binary', 'latest']);\n        subOpts.docs = opts.docs.slice(i * batchSize,\n          Math.min(opts.docs.length, (i + 1) * batchSize));\n        bulkGet(self, subOpts, onResult(i));\n      }\n    }\n\n    // mark the whole database as either supporting or not supporting _bulk_get\n    var dbUrl = genUrl(host, '');\n    var supportsBulkGet = supportsBulkGetMap[dbUrl];\n\n    /* istanbul ignore next */\n    if (typeof supportsBulkGet !== 'boolean') {\n      // check if this database supports _bulk_get\n      doBulkGet(function (err, res) {\n        if (err) {\n          supportsBulkGetMap[dbUrl] = false;\n          explainError(\n            err.status,\n            'PouchDB is just detecting if the remote ' +\n            'supports the _bulk_get API.'\n          );\n          doBulkGetShim();\n        } else {\n          supportsBulkGetMap[dbUrl] = true;\n          callback(null, res);\n        }\n      });\n    } else if (supportsBulkGet) {\n      doBulkGet(callback);\n    } else {\n      doBulkGetShim();\n    }\n  });\n\n  // Calls GET on the host, which gets back a JSON string containing\n  //    couchdb: A welcome string\n  //    version: The version of CouchDB it is running\n  api._info = function (callback) {\n    setup().then(function () {\n      return ourFetch(genDBUrl(host, ''));\n    }).then(function (response) {\n      return response.json();\n    }).then(function (info) {\n      info.host = genDBUrl(host, '');\n      callback(null, info);\n    }).catch(callback);\n  };\n\n  api.fetch = function (path, options) {\n    return setup().then(function () {\n      return ourFetch(genDBUrl(host, path), options);\n    });\n  };\n\n  // Get the document with the given id from the database given by host.\n  // The id could be solely the _id in the database, or it may be a\n  // _design/ID or _local/ID path\n  api.get = adapterFun$$1('get', function (id, opts, callback) {\n    // If no options were given, set the callback to the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n\n    if (opts.revs) {\n      params.revs = true;\n    }\n\n    if (opts.revs_info) {\n      params.revs_info = true;\n    }\n\n    if (opts.latest) {\n      params.latest = true;\n    }\n\n    if (opts.open_revs) {\n      if (opts.open_revs !== \"all\") {\n        opts.open_revs = JSON.stringify(opts.open_revs);\n      }\n      params.open_revs = opts.open_revs;\n    }\n\n    if (opts.rev) {\n      params.rev = opts.rev;\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = opts.conflicts;\n    }\n\n    /* istanbul ignore if */\n    if (opts.update_seq) {\n      params.update_seq = opts.update_seq;\n    }\n\n    id = encodeDocId(id);\n\n    function fetchAttachments(doc) {\n      var atts = doc._attachments;\n      var filenames = atts && Object.keys(atts);\n      if (!atts || !filenames.length) {\n        return;\n      }\n      // we fetch these manually in separate XHRs, because\n      // Sync Gateway would normally send it back as multipart/mixed,\n      // which we cannot parse. Also, this is more efficient than\n      // receiving attachments as base64-encoded strings.\n      function fetchData(filename) {\n        var att = atts[filename];\n        var path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +\n            '?rev=' + doc._rev;\n        return ourFetch(genDBUrl(host, path)).then(function (response) {\n          if (typeof process !== 'undefined' && !process.browser) {\n            return response.buffer();\n          } else {\n            /* istanbul ignore next */\n            return response.blob();\n          }\n        }).then(function (blob) {\n          if (opts.binary) {\n            // TODO: Can we remove this?\n            if (typeof process !== 'undefined' && !process.browser) {\n              blob.type = att.content_type;\n            }\n            return blob;\n          }\n          return new Promise(function (resolve) {\n            blobToBase64(blob, resolve);\n          });\n        }).then(function (data) {\n          delete att.stub;\n          delete att.length;\n          att.data = data;\n        });\n      }\n\n      var promiseFactories = filenames.map(function (filename) {\n        return function () {\n          return fetchData(filename);\n        };\n      });\n\n      // This limits the number of parallel xhr requests to 5 any time\n      // to avoid issues with maximum browser request limits\n      return pool(promiseFactories, 5);\n    }\n\n    function fetchAllAttachments(docOrDocs) {\n      if (Array.isArray(docOrDocs)) {\n        return Promise.all(docOrDocs.map(function (doc) {\n          if (doc.ok) {\n            return fetchAttachments(doc.ok);\n          }\n        }));\n      }\n      return fetchAttachments(docOrDocs);\n    }\n\n    var url = genDBUrl(host, id + paramsToStr(params));\n    fetchJSON(url).then(function (res) {\n      return Promise.resolve().then(function () {\n        if (opts.attachments) {\n          return fetchAllAttachments(res.data);\n        }\n      }).then(function () {\n        callback(null, res.data);\n      });\n    }).catch(function (e) {\n      e.docId = id;\n      callback(e);\n    });\n  });\n\n\n  // Delete the document given by doc from the database given by host.\n  api.remove = adapterFun$$1('remove', function (docOrId, optsOrRev, opts, cb) {\n    var doc;\n    if (typeof optsOrRev === 'string') {\n      // id, rev, opts, callback style\n      doc = {\n        _id: docOrId,\n        _rev: optsOrRev\n      };\n      if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};\n      }\n    } else {\n      // doc, opts, callback style\n      doc = docOrId;\n      if (typeof optsOrRev === 'function') {\n        cb = optsOrRev;\n        opts = {};\n      } else {\n        cb = opts;\n        opts = optsOrRev;\n      }\n    }\n\n    var rev = (doc._rev || opts.rev);\n    var url = genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev;\n\n    fetchJSON(url, {method: 'DELETE'}, cb).catch(cb);\n  });\n\n  function encodeAttachmentId(attachmentId) {\n    return attachmentId.split(\"/\").map(encodeURIComponent).join(\"/\");\n  }\n\n  // Get the attachment\n  api.getAttachment = adapterFun$$1('getAttachment', function (docId, attachmentId,\n                                                            opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var params = opts.rev ? ('?rev=' + opts.rev) : '';\n    var url = genDBUrl(host, encodeDocId(docId)) + '/' +\n        encodeAttachmentId(attachmentId) + params;\n    var contentType;\n    ourFetch(url, {method: 'GET'}).then(function (response) {\n      contentType = response.headers.get('content-type');\n      if (!response.ok) {\n        throw response;\n      } else {\n        if (typeof process !== 'undefined' && !process.browser) {\n          return response.buffer();\n        } else {\n          /* istanbul ignore next */\n          return response.blob();\n        }\n      }\n    }).then(function (blob) {\n      // TODO: also remove\n      if (typeof process !== 'undefined' && !process.browser) {\n        blob.type = contentType;\n      }\n      callback(null, blob);\n    }).catch(function (err) {\n      callback(err);\n    });\n  });\n\n  // Remove the attachment given by the id and rev\n  api.removeAttachment =  adapterFun$$1('removeAttachment', function (docId,\n                                                                   attachmentId,\n                                                                   rev,\n                                                                   callback) {\n    var url = genDBUrl(host, encodeDocId(docId) + '/' +\n                       encodeAttachmentId(attachmentId)) + '?rev=' + rev;\n    fetchJSON(url, {method: 'DELETE'}, callback).catch(callback);\n  });\n\n  // Add the attachment given by blob and its contentType property\n  // to the document with the given id, the revision given by rev, and\n  // add it to the database given by host.\n  api.putAttachment = adapterFun$$1('putAttachment', function (docId, attachmentId,\n                                                            rev, blob,\n                                                            type, callback) {\n    if (typeof type === 'function') {\n      callback = type;\n      type = blob;\n      blob = rev;\n      rev = null;\n    }\n    var id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);\n    var url = genDBUrl(host, id);\n    if (rev) {\n      url += '?rev=' + rev;\n    }\n\n    if (typeof blob === 'string') {\n      // input is assumed to be a base64 string\n      var binary;\n      try {\n        binary = thisAtob(blob);\n      } catch (err) {\n        return callback(createError(BAD_ARG,\n                        'Attachment is not a valid base64 string'));\n      }\n      blob = binary ? binStringToBluffer(binary, type) : '';\n    }\n\n    // Add the attachment\n    fetchJSON(url, {\n      headers: new h({'Content-Type': type}),\n      method: 'PUT',\n      body: blob\n    }, callback).catch(callback);\n  });\n\n  // Update/create multiple documents given by req in the database\n  // given by host.\n  api._bulkDocs = function (req, opts, callback) {\n    // If new_edits=false then it prevents the database from creating\n    // new revision numbers for the documents. Instead it just uses\n    // the old ones. This is used in database replication.\n    req.new_edits = opts.new_edits;\n\n    setup().then(function () {\n      return Promise.all(req.docs.map(preprocessAttachments$1));\n    }).then(function () {\n      // Update/create the documents\n      return fetchJSON(genDBUrl(host, '_bulk_docs'), {\n        method: 'POST',\n        body: JSON.stringify(req)\n      }, callback);\n    }).catch(callback);\n  };\n\n\n  // Update/create document\n  api._put = function (doc, opts, callback) {\n    setup().then(function () {\n      return preprocessAttachments$1(doc);\n    }).then(function () {\n      return fetchJSON(genDBUrl(host, encodeDocId(doc._id)), {\n        method: 'PUT',\n        body: JSON.stringify(doc)\n      });\n    }).then(function (result) {\n      callback(null, result.data);\n    }).catch(function (err) {\n      err.docId = doc && doc._id;\n      callback(err);\n    });\n  };\n\n\n  // Get a listing of the documents in the database given\n  // by host and ordered by increasing id.\n  api.allDocs = adapterFun$$1('allDocs', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n    var body;\n    var method = 'GET';\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    /* istanbul ignore if */\n    if (opts.update_seq) {\n      params.update_seq = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if (opts.include_docs) {\n      params.include_docs = true;\n    }\n\n    // added in CouchDB 1.6.0\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.key) {\n      params.key = JSON.stringify(opts.key);\n    }\n\n    if (opts.start_key) {\n      opts.startkey = opts.start_key;\n    }\n\n    if (opts.startkey) {\n      params.startkey = JSON.stringify(opts.startkey);\n    }\n\n    if (opts.end_key) {\n      opts.endkey = opts.end_key;\n    }\n\n    if (opts.endkey) {\n      params.endkey = JSON.stringify(opts.endkey);\n    }\n\n    if (typeof opts.inclusive_end !== 'undefined') {\n      params.inclusive_end = !!opts.inclusive_end;\n    }\n\n    if (typeof opts.limit !== 'undefined') {\n      params.limit = opts.limit;\n    }\n\n    if (typeof opts.skip !== 'undefined') {\n      params.skip = opts.skip;\n    }\n\n    var paramStr = paramsToStr(params);\n\n    if (typeof opts.keys !== 'undefined') {\n      method = 'POST';\n      body = {keys: opts.keys};\n    }\n\n    fetchJSON(genDBUrl(host, '_all_docs' + paramStr), {\n       method: method,\n      body: JSON.stringify(body)\n    }).then(function (result) {\n      if (opts.include_docs && opts.attachments && opts.binary) {\n        result.data.rows.forEach(readAttachmentsAsBlobOrBuffer);\n      }\n      callback(null, result.data);\n    }).catch(callback);\n  });\n\n  // Get a list of changes made to documents in the database given by host.\n  // TODO According to the README, there should be two other methods here,\n  // api.changes.addListener and api.changes.removeListener.\n  api._changes = function (opts) {\n\n    // We internally page the results of a changes request, this means\n    // if there is a large set of changes to be returned we can start\n    // processing them quicker instead of waiting on the entire\n    // set of changes to return and attempting to process them at once\n    var batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;\n\n    opts = clone(opts);\n\n    if (opts.continuous && !('heartbeat' in opts)) {\n      opts.heartbeat = DEFAULT_HEARTBEAT;\n    }\n\n    var requestTimeout = ('timeout' in opts) ? opts.timeout : 30 * 1000;\n\n    // ensure CHANGES_TIMEOUT_BUFFER applies\n    if ('timeout' in opts && opts.timeout &&\n      (requestTimeout - opts.timeout) < CHANGES_TIMEOUT_BUFFER) {\n        requestTimeout = opts.timeout + CHANGES_TIMEOUT_BUFFER;\n    }\n\n    /* istanbul ignore if */\n    if ('heartbeat' in opts && opts.heartbeat &&\n       (requestTimeout - opts.heartbeat) < CHANGES_TIMEOUT_BUFFER) {\n        requestTimeout = opts.heartbeat + CHANGES_TIMEOUT_BUFFER;\n    }\n\n    var params = {};\n    if ('timeout' in opts && opts.timeout) {\n      params.timeout = opts.timeout;\n    }\n\n    var limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;\n    var leftToFetch = limit;\n\n    if (opts.style) {\n      params.style = opts.style;\n    }\n\n    if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {\n      params.include_docs = true;\n    }\n\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.continuous) {\n      params.feed = 'longpoll';\n    }\n\n    if (opts.seq_interval) {\n      params.seq_interval = opts.seq_interval;\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n    \n    /* istanbul ignore if */\n    if (opts.update_seq) {\n      params.update_seq = true;\n    }\n\n    if ('heartbeat' in opts) {\n      // If the heartbeat value is false, it disables the default heartbeat\n      if (opts.heartbeat) {\n        params.heartbeat = opts.heartbeat;\n      }\n    }\n\n    if (opts.filter && typeof opts.filter === 'string') {\n      params.filter = opts.filter;\n    }\n\n    if (opts.view && typeof opts.view === 'string') {\n      params.filter = '_view';\n      params.view = opts.view;\n    }\n\n    // If opts.query_params exists, pass it through to the changes request.\n    // These parameters may be used by the filter on the source database.\n    if (opts.query_params && typeof opts.query_params === 'object') {\n      for (var param_name in opts.query_params) {\n        /* istanbul ignore else */\n        if (opts.query_params.hasOwnProperty(param_name)) {\n          params[param_name] = opts.query_params[param_name];\n        }\n      }\n    }\n\n    var method = 'GET';\n    var body;\n\n    if (opts.doc_ids) {\n      // set this automagically for the user; it's annoying that couchdb\n      // requires both a \"filter\" and a \"doc_ids\" param.\n      params.filter = '_doc_ids';\n      method = 'POST';\n      body = {doc_ids: opts.doc_ids };\n    }\n    /* istanbul ignore next */\n    else if (opts.selector) {\n      // set this automagically for the user, similar to above\n      params.filter = '_selector';\n      method = 'POST';\n      body = {selector: opts.selector };\n    }\n\n    var controller = new a();\n    var lastFetchedSeq;\n\n    // Get all the changes starting wtih the one immediately after the\n    // sequence number given by since.\n    var fetchData = function (since, callback) {\n      if (opts.aborted) {\n        return;\n      }\n      params.since = since;\n      // \"since\" can be any kind of json object in Cloudant/CouchDB 2.x\n      /* istanbul ignore next */\n      if (typeof params.since === \"object\") {\n        params.since = JSON.stringify(params.since);\n      }\n\n      if (opts.descending) {\n        if (limit) {\n          params.limit = leftToFetch;\n        }\n      } else {\n        params.limit = (!limit || leftToFetch > batchSize) ?\n          batchSize : leftToFetch;\n      }\n\n      // Set the options for the ajax call\n      var url = genDBUrl(host, '_changes' + paramsToStr(params));\n      var fetchOpts = {\n        signal: controller.signal,\n        method: method,\n        body: JSON.stringify(body)\n      };\n      lastFetchedSeq = since;\n\n      /* istanbul ignore if */\n      if (opts.aborted) {\n        return;\n      }\n\n      // Get the changes\n      setup().then(function () {\n        return fetchJSON(url, fetchOpts, callback);\n      }).catch(callback);\n    };\n\n    // If opts.since exists, get all the changes from the sequence\n    // number given by opts.since. Otherwise, get all the changes\n    // from the sequence number 0.\n    var results = {results: []};\n\n    var fetched = function (err, res) {\n      if (opts.aborted) {\n        return;\n      }\n      var raw_results_length = 0;\n      // If the result of the ajax call (res) contains changes (res.results)\n      if (res && res.results) {\n        raw_results_length = res.results.length;\n        results.last_seq = res.last_seq;\n        var pending = null;\n        var lastSeq = null;\n        // Attach 'pending' property if server supports it (CouchDB 2.0+)\n        /* istanbul ignore if */\n        if (typeof res.pending === 'number') {\n          pending = res.pending;\n        }\n        if (typeof results.last_seq === 'string' || typeof results.last_seq === 'number') {\n          lastSeq = results.last_seq;\n        }\n        // For each change\n        var req = {};\n        req.query = opts.query_params;\n        res.results = res.results.filter(function (c) {\n          leftToFetch--;\n          var ret = filterChange(opts)(c);\n          if (ret) {\n            if (opts.include_docs && opts.attachments && opts.binary) {\n              readAttachmentsAsBlobOrBuffer(c);\n            }\n            if (opts.return_docs) {\n              results.results.push(c);\n            }\n            opts.onChange(c, pending, lastSeq);\n          }\n          return ret;\n        });\n      } else if (err) {\n        // In case of an error, stop listening for changes and call\n        // opts.complete\n        opts.aborted = true;\n        opts.complete(err);\n        return;\n      }\n\n      // The changes feed may have timed out with no results\n      // if so reuse last update sequence\n      if (res && res.last_seq) {\n        lastFetchedSeq = res.last_seq;\n      }\n\n      var finished = (limit && leftToFetch <= 0) ||\n        (res && raw_results_length < batchSize) ||\n        (opts.descending);\n\n      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {\n        // Queue a call to fetch again with the newest sequence number\n        immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () { fetchData(lastFetchedSeq, fetched); });\n      } else {\n        // We're done, call the callback\n        opts.complete(null, results);\n      }\n    };\n\n    fetchData(opts.since || 0, fetched);\n\n    // Return a method to cancel this method from processing any more\n    return {\n      cancel: function () {\n        opts.aborted = true;\n        controller.abort();\n      }\n    };\n  };\n\n  // Given a set of document/revision IDs (given by req), tets the subset of\n  // those that do NOT correspond to revisions stored in the database.\n  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff\n  api.revsDiff = adapterFun$$1('revsDiff', function (req, opts, callback) {\n    // If no options were given, set the callback to be the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    // Get the missing document/revision IDs\n    fetchJSON(genDBUrl(host, '_revs_diff'), {\n      method: 'POST',\n      body: JSON.stringify(req)\n    }, callback).catch(callback);\n  });\n\n  api._close = function (callback) {\n    callback();\n  };\n\n  api._destroy = function (options, callback) {\n    fetchJSON(genDBUrl(host, ''), {method: 'DELETE'}).then(function (json) {\n      callback(null, json);\n    }).catch(function (err) {\n      /* istanbul ignore if */\n      if (err.status === 404) {\n        callback(null, {ok: true});\n      } else {\n        callback(err);\n      }\n    });\n  };\n}\n\n// HttpPouch is a valid adapter.\nHttpPouch.valid = function () {\n  return true;\n};\n\nfunction HttpPouch$1 (PouchDB) {\n  PouchDB.adapter('http', HttpPouch, false);\n  PouchDB.adapter('https', HttpPouch, false);\n}\n\nfunction QueryParseError(message) {\n  this.status = 400;\n  this.name = 'query_parse_error';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, QueryParseError);\n  } catch (e) {}\n}\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(QueryParseError, Error);\n\nfunction NotFoundError(message) {\n  this.status = 404;\n  this.name = 'not_found';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, NotFoundError);\n  } catch (e) {}\n}\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(NotFoundError, Error);\n\nfunction BuiltInError(message) {\n  this.status = 500;\n  this.name = 'invalid_value';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, BuiltInError);\n  } catch (e) {}\n}\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(BuiltInError, Error);\n\nfunction promisedCallback(promise, callback) {\n  if (callback) {\n    promise.then(function (res) {\n      immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n        callback(null, res);\n      });\n    }, function (reason) {\n      immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n        callback(reason);\n      });\n    });\n  }\n  return promise;\n}\n\nfunction callbackify(fun) {\n  return argsarray__WEBPACK_IMPORTED_MODULE_0___default()(function (args) {\n    var cb = args.pop();\n    var promise = fun.apply(this, args);\n    if (typeof cb === 'function') {\n      promisedCallback(promise, cb);\n    }\n    return promise;\n  });\n}\n\n// Promise finally util similar to Q.finally\nfunction fin(promise, finalPromiseFactory) {\n  return promise.then(function (res) {\n    return finalPromiseFactory().then(function () {\n      return res;\n    });\n  }, function (reason) {\n    return finalPromiseFactory().then(function () {\n      throw reason;\n    });\n  });\n}\n\nfunction sequentialize(queue, promiseFactory) {\n  return function () {\n    var args = arguments;\n    var that = this;\n    return queue.add(function () {\n      return promiseFactory.apply(that, args);\n    });\n  };\n}\n\n// uniq an array of strings, order not guaranteed\n// similar to underscore/lodash _.uniq\nfunction uniq(arr) {\n  var theSet = new ExportedSet(arr);\n  var result = new Array(theSet.size);\n  var index = -1;\n  theSet.forEach(function (value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nfunction mapToKeysArray(map) {\n  var result = new Array(map.size);\n  var index = -1;\n  map.forEach(function (value, key) {\n    result[++index] = key;\n  });\n  return result;\n}\n\nfunction createBuiltInError(name) {\n  var message = 'builtin ' + name +\n    ' function requires map values to be numbers' +\n    ' or number arrays';\n  return new BuiltInError(message);\n}\n\nfunction sum(values) {\n  var result = 0;\n  for (var i = 0, len = values.length; i < len; i++) {\n    var num = values[i];\n    if (typeof num !== 'number') {\n      if (Array.isArray(num)) {\n        // lists of numbers are also allowed, sum them separately\n        result = typeof result === 'number' ? [result] : result;\n        for (var j = 0, jLen = num.length; j < jLen; j++) {\n          var jNum = num[j];\n          if (typeof jNum !== 'number') {\n            throw createBuiltInError('_sum');\n          } else if (typeof result[j] === 'undefined') {\n            result.push(jNum);\n          } else {\n            result[j] += jNum;\n          }\n        }\n      } else { // not array/number\n        throw createBuiltInError('_sum');\n      }\n    } else if (typeof result === 'number') {\n      result += num;\n    } else { // add number to array\n      result[0] += num;\n    }\n  }\n  return result;\n}\n\nvar log = guardedConsole.bind(null, 'log');\nvar isArray = Array.isArray;\nvar toJSON = JSON.parse;\n\nfunction evalFunctionWithEval(func, emit) {\n  return scopeEval(\n    \"return (\" + func.replace(/;\\s*$/, \"\") + \");\",\n    {\n      emit: emit,\n      sum: sum,\n      log: log,\n      isArray: isArray,\n      toJSON: toJSON\n    }\n  );\n}\n\n/*\n * Simple task queue to sequentialize actions. Assumes\n * callbacks will eventually fire (once).\n */\n\n\nfunction TaskQueue$1() {\n  this.promise = new Promise(function (fulfill) {fulfill(); });\n}\nTaskQueue$1.prototype.add = function (promiseFactory) {\n  this.promise = this.promise.catch(function () {\n    // just recover\n  }).then(function () {\n    return promiseFactory();\n  });\n  return this.promise;\n};\nTaskQueue$1.prototype.finish = function () {\n  return this.promise;\n};\n\nfunction stringify(input) {\n  if (!input) {\n    return 'undefined'; // backwards compat for empty reduce\n  }\n  // for backwards compat with mapreduce, functions/strings are stringified\n  // as-is. everything else is JSON-stringified.\n  switch (typeof input) {\n    case 'function':\n      // e.g. a mapreduce map\n      return input.toString();\n    case 'string':\n      // e.g. a mapreduce built-in _reduce function\n      return input.toString();\n    default:\n      // e.g. a JSON object in the case of mango queries\n      return JSON.stringify(input);\n  }\n}\n\n/* create a string signature for a view so we can cache it and uniq it */\nfunction createViewSignature(mapFun, reduceFun) {\n  // the \"undefined\" part is for backwards compatibility\n  return stringify(mapFun) + stringify(reduceFun) + 'undefined';\n}\n\nfunction createView(sourceDB, viewName, mapFun, reduceFun, temporary, localDocName) {\n  var viewSignature = createViewSignature(mapFun, reduceFun);\n\n  var cachedViews;\n  if (!temporary) {\n    // cache this to ensure we don't try to update the same view twice\n    cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};\n    if (cachedViews[viewSignature]) {\n      return cachedViews[viewSignature];\n    }\n  }\n\n  var promiseForView = sourceDB.info().then(function (info) {\n\n    var depDbName = info.db_name + '-mrview-' +\n      (temporary ? 'temp' : stringMd5(viewSignature));\n\n    // save the view name in the source db so it can be cleaned up if necessary\n    // (e.g. when the _design doc is deleted, remove all associated view data)\n    function diffFunction(doc) {\n      doc.views = doc.views || {};\n      var fullViewName = viewName;\n      if (fullViewName.indexOf('/') === -1) {\n        fullViewName = viewName + '/' + viewName;\n      }\n      var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};\n      /* istanbul ignore if */\n      if (depDbs[depDbName]) {\n        return; // no update necessary\n      }\n      depDbs[depDbName] = true;\n      return doc;\n    }\n    return upsert(sourceDB, '_local/' + localDocName, diffFunction).then(function () {\n      return sourceDB.registerDependentDatabase(depDbName).then(function (res) {\n        var db = res.db;\n        db.auto_compaction = true;\n        var view = {\n          name: depDbName,\n          db: db,\n          sourceDB: sourceDB,\n          adapter: sourceDB.adapter,\n          mapFun: mapFun,\n          reduceFun: reduceFun\n        };\n        return view.db.get('_local/lastSeq').catch(function (err) {\n          /* istanbul ignore if */\n          if (err.status !== 404) {\n            throw err;\n          }\n        }).then(function (lastSeqDoc) {\n          view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;\n          if (cachedViews) {\n            view.db.once('destroyed', function () {\n              delete cachedViews[viewSignature];\n            });\n          }\n          return view;\n        });\n      });\n    });\n  });\n\n  if (cachedViews) {\n    cachedViews[viewSignature] = promiseForView;\n  }\n  return promiseForView;\n}\n\nvar persistentQueues = {};\nvar tempViewQueue = new TaskQueue$1();\nvar CHANGES_BATCH_SIZE$1 = 50;\n\nfunction parseViewName(name) {\n  // can be either 'ddocname/viewname' or just 'viewname'\n  // (where the ddoc name is the same)\n  return name.indexOf('/') === -1 ? [name, name] : name.split('/');\n}\n\nfunction isGenOne(changes) {\n  // only return true if the current change is 1-\n  // and there are no other leafs\n  return changes.length === 1 && /^1-/.test(changes[0].rev);\n}\n\nfunction emitError(db, e) {\n  try {\n    db.emit('error', e);\n  } catch (err) {\n    guardedConsole('error',\n      'The user\\'s map/reduce function threw an uncaught error.\\n' +\n      'You can debug this error by doing:\\n' +\n      'myDatabase.on(\\'error\\', function (err) { debugger; });\\n' +\n      'Please double-check your map/reduce function.');\n    guardedConsole('error', e);\n  }\n}\n\n/**\n * Returns an \"abstract\" mapreduce object of the form:\n *\n *   {\n *     query: queryFun,\n *     viewCleanup: viewCleanupFun\n *   }\n *\n * Arguments are:\n *\n * localDoc: string\n *   This is for the local doc that gets saved in order to track the\n *   \"dependent\" DBs and clean them up for viewCleanup. It should be\n *   unique, so that indexer plugins don't collide with each other.\n * mapper: function (mapFunDef, emit)\n *   Returns a map function based on the mapFunDef, which in the case of\n *   normal map/reduce is just the de-stringified function, but may be\n *   something else, such as an object in the case of pouchdb-find.\n * reducer: function (reduceFunDef)\n *   Ditto, but for reducing. Modules don't have to support reducing\n *   (e.g. pouchdb-find).\n * ddocValidator: function (ddoc, viewName)\n *   Throws an error if the ddoc or viewName is not valid.\n *   This could be a way to communicate to the user that the configuration for the\n *   indexer is invalid.\n */\nfunction createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator) {\n\n  function tryMap(db, fun, doc) {\n    // emit an event if there was an error thrown by a map function.\n    // putting try/catches in a single function also avoids deoptimizations.\n    try {\n      fun(doc);\n    } catch (e) {\n      emitError(db, e);\n    }\n  }\n\n  function tryReduce(db, fun, keys, values, rereduce) {\n    // same as above, but returning the result or an error. there are two separate\n    // functions to avoid extra memory allocations since the tryCode() case is used\n    // for custom map functions (common) vs this function, which is only used for\n    // custom reduce functions (rare)\n    try {\n      return {output : fun(keys, values, rereduce)};\n    } catch (e) {\n      emitError(db, e);\n      return {error: e};\n    }\n  }\n\n  function sortByKeyThenValue(x, y) {\n    var keyCompare = collate(x.key, y.key);\n    return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);\n  }\n\n  function sliceResults(results, limit, skip) {\n    skip = skip || 0;\n    if (typeof limit === 'number') {\n      return results.slice(skip, limit + skip);\n    } else if (skip > 0) {\n      return results.slice(skip);\n    }\n    return results;\n  }\n\n  function rowToDocId(row) {\n    var val = row.value;\n    // Users can explicitly specify a joined doc _id, or it\n    // defaults to the doc _id that emitted the key/value.\n    var docId = (val && typeof val === 'object' && val._id) || row.id;\n    return docId;\n  }\n\n  function readAttachmentsAsBlobOrBuffer(res) {\n    res.rows.forEach(function (row) {\n      var atts = row.doc && row.doc._attachments;\n      if (!atts) {\n        return;\n      }\n      Object.keys(atts).forEach(function (filename) {\n        var att = atts[filename];\n        atts[filename].data = b64ToBluffer(att.data, att.content_type);\n      });\n    });\n  }\n\n  function postprocessAttachments(opts) {\n    return function (res) {\n      if (opts.include_docs && opts.attachments && opts.binary) {\n        readAttachmentsAsBlobOrBuffer(res);\n      }\n      return res;\n    };\n  }\n\n  function addHttpParam(paramName, opts, params, asJson) {\n    // add an http param from opts to params, optionally json-encoded\n    var val = opts[paramName];\n    if (typeof val !== 'undefined') {\n      if (asJson) {\n        val = encodeURIComponent(JSON.stringify(val));\n      }\n      params.push(paramName + '=' + val);\n    }\n  }\n\n  function coerceInteger(integerCandidate) {\n    if (typeof integerCandidate !== 'undefined') {\n      var asNumber = Number(integerCandidate);\n      // prevents e.g. '1foo' or '1.1' being coerced to 1\n      if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {\n        return asNumber;\n      } else {\n        return integerCandidate;\n      }\n    }\n  }\n\n  function coerceOptions(opts) {\n    opts.group_level = coerceInteger(opts.group_level);\n    opts.limit = coerceInteger(opts.limit);\n    opts.skip = coerceInteger(opts.skip);\n    return opts;\n  }\n\n  function checkPositiveInteger(number) {\n    if (number) {\n      if (typeof number !== 'number') {\n        return  new QueryParseError('Invalid value for integer: \"' +\n          number + '\"');\n      }\n      if (number < 0) {\n        return new QueryParseError('Invalid value for positive integer: ' +\n          '\"' + number + '\"');\n      }\n    }\n  }\n\n  function checkQueryParseError(options, fun) {\n    var startkeyName = options.descending ? 'endkey' : 'startkey';\n    var endkeyName = options.descending ? 'startkey' : 'endkey';\n\n    if (typeof options[startkeyName] !== 'undefined' &&\n      typeof options[endkeyName] !== 'undefined' &&\n      collate(options[startkeyName], options[endkeyName]) > 0) {\n      throw new QueryParseError('No rows can match your key range, ' +\n        'reverse your start_key and end_key or set {descending : true}');\n    } else if (fun.reduce && options.reduce !== false) {\n      if (options.include_docs) {\n        throw new QueryParseError('{include_docs:true} is invalid for reduce');\n      } else if (options.keys && options.keys.length > 1 &&\n        !options.group && !options.group_level) {\n        throw new QueryParseError('Multi-key fetches for reduce views must use ' +\n          '{group: true}');\n      }\n    }\n    ['group_level', 'limit', 'skip'].forEach(function (optionName) {\n      var error = checkPositiveInteger(options[optionName]);\n      if (error) {\n        throw error;\n      }\n    });\n  }\n\n  function httpQuery(db, fun, opts) {\n    // List of parameters to add to the PUT request\n    var params = [];\n    var body;\n    var method = 'GET';\n    var ok, status;\n\n    // If opts.reduce exists and is defined, then add it to the list\n    // of parameters.\n    // If reduce=false then the results are that of only the map function\n    // not the final result of map and reduce.\n    addHttpParam('reduce', opts, params);\n    addHttpParam('include_docs', opts, params);\n    addHttpParam('attachments', opts, params);\n    addHttpParam('limit', opts, params);\n    addHttpParam('descending', opts, params);\n    addHttpParam('group', opts, params);\n    addHttpParam('group_level', opts, params);\n    addHttpParam('skip', opts, params);\n    addHttpParam('stale', opts, params);\n    addHttpParam('conflicts', opts, params);\n    addHttpParam('startkey', opts, params, true);\n    addHttpParam('start_key', opts, params, true);\n    addHttpParam('endkey', opts, params, true);\n    addHttpParam('end_key', opts, params, true);\n    addHttpParam('inclusive_end', opts, params);\n    addHttpParam('key', opts, params, true);\n    addHttpParam('update_seq', opts, params);\n\n    // Format the list of parameters into a valid URI query string\n    params = params.join('&');\n    params = params === '' ? '' : '?' + params;\n\n    // If keys are supplied, issue a POST to circumvent GET query string limits\n    // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n    if (typeof opts.keys !== 'undefined') {\n      var MAX_URL_LENGTH = 2000;\n      // according to http://stackoverflow.com/a/417184/680742,\n      // the de facto URL length limit is 2000 characters\n\n      var keysAsString =\n        'keys=' + encodeURIComponent(JSON.stringify(opts.keys));\n      if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {\n        // If the keys are short enough, do a GET. we do this to work around\n        // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)\n        params += (params[0] === '?' ? '&' : '?') + keysAsString;\n      } else {\n        method = 'POST';\n        if (typeof fun === 'string') {\n          body = {keys: opts.keys};\n        } else { // fun is {map : mapfun}, so append to this\n          fun.keys = opts.keys;\n        }\n      }\n    }\n\n    // We are referencing a query defined in the design doc\n    if (typeof fun === 'string') {\n      var parts = parseViewName(fun);\n      return db.fetch('_design/' + parts[0] + '/_view/' + parts[1] + params, {\n        headers: new h({'Content-Type': 'application/json'}),\n        method: method,\n        body: JSON.stringify(body)\n      }).then(function (response) {\n        ok = response.ok;\n        status = response.status;\n        return response.json();\n      }).then(function (result) {\n        if (!ok) {\n          result.status = status;\n          throw generateErrorFromResponse(result);\n        }\n        // fail the entire request if the result contains an error\n        result.rows.forEach(function (row) {\n          /* istanbul ignore if */\n          if (row.value && row.value.error && row.value.error === \"builtin_reduce_error\") {\n            throw new Error(row.reason);\n          }\n        });\n        return result;\n      }).then(postprocessAttachments(opts));\n    }\n\n    // We are using a temporary view, terrible for performance, good for testing\n    body = body || {};\n    Object.keys(fun).forEach(function (key) {\n      if (Array.isArray(fun[key])) {\n        body[key] = fun[key];\n      } else {\n        body[key] = fun[key].toString();\n      }\n    });\n\n    return db.fetch('_temp_view' + params, {\n      headers: new h({'Content-Type': 'application/json'}),\n      method: 'POST',\n      body: JSON.stringify(body)\n    }).then(function (response) {\n        ok = response.ok;\n        status = response.status;\n      return response.json();\n    }).then(function (result) {\n      if (!ok) {\n        result.status = status;\n        throw generateErrorFromResponse(result);\n      }\n      return result;\n    }).then(postprocessAttachments(opts));\n  }\n\n  // custom adapters can define their own api._query\n  // and override the default behavior\n  /* istanbul ignore next */\n  function customQuery(db, fun, opts) {\n    return new Promise(function (resolve, reject) {\n      db._query(fun, opts, function (err, res) {\n        if (err) {\n          return reject(err);\n        }\n        resolve(res);\n      });\n    });\n  }\n\n  // custom adapters can define their own api._viewCleanup\n  // and override the default behavior\n  /* istanbul ignore next */\n  function customViewCleanup(db) {\n    return new Promise(function (resolve, reject) {\n      db._viewCleanup(function (err, res) {\n        if (err) {\n          return reject(err);\n        }\n        resolve(res);\n      });\n    });\n  }\n\n  function defaultsTo(value) {\n    return function (reason) {\n      /* istanbul ignore else */\n      if (reason.status === 404) {\n        return value;\n      } else {\n        throw reason;\n      }\n    };\n  }\n\n  // returns a promise for a list of docs to update, based on the input docId.\n  // the order doesn't matter, because post-3.2.0, bulkDocs\n  // is an atomic operation in all three adapters.\n  function getDocsToPersist(docId, view, docIdsToChangesAndEmits) {\n    var metaDocId = '_local/doc_' + docId;\n    var defaultMetaDoc = {_id: metaDocId, keys: []};\n    var docData = docIdsToChangesAndEmits.get(docId);\n    var indexableKeysToKeyValues = docData[0];\n    var changes = docData[1];\n\n    function getMetaDoc() {\n      if (isGenOne(changes)) {\n        // generation 1, so we can safely assume initial state\n        // for performance reasons (avoids unnecessary GETs)\n        return Promise.resolve(defaultMetaDoc);\n      }\n      return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));\n    }\n\n    function getKeyValueDocs(metaDoc) {\n      if (!metaDoc.keys.length) {\n        // no keys, no need for a lookup\n        return Promise.resolve({rows: []});\n      }\n      return view.db.allDocs({\n        keys: metaDoc.keys,\n        include_docs: true\n      });\n    }\n\n    function processKeyValueDocs(metaDoc, kvDocsRes) {\n      var kvDocs = [];\n      var oldKeys = new ExportedSet();\n\n      for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {\n        var row = kvDocsRes.rows[i];\n        var doc = row.doc;\n        if (!doc) { // deleted\n          continue;\n        }\n        kvDocs.push(doc);\n        oldKeys.add(doc._id);\n        doc._deleted = !indexableKeysToKeyValues.has(doc._id);\n        if (!doc._deleted) {\n          var keyValue = indexableKeysToKeyValues.get(doc._id);\n          if ('value' in keyValue) {\n            doc.value = keyValue.value;\n          }\n        }\n      }\n      var newKeys = mapToKeysArray(indexableKeysToKeyValues);\n      newKeys.forEach(function (key) {\n        if (!oldKeys.has(key)) {\n          // new doc\n          var kvDoc = {\n            _id: key\n          };\n          var keyValue = indexableKeysToKeyValues.get(key);\n          if ('value' in keyValue) {\n            kvDoc.value = keyValue.value;\n          }\n          kvDocs.push(kvDoc);\n        }\n      });\n      metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));\n      kvDocs.push(metaDoc);\n\n      return kvDocs;\n    }\n\n    return getMetaDoc().then(function (metaDoc) {\n      return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {\n        return processKeyValueDocs(metaDoc, kvDocsRes);\n      });\n    });\n  }\n\n  // updates all emitted key/value docs and metaDocs in the mrview database\n  // for the given batch of documents from the source database\n  function saveKeyValues(view, docIdsToChangesAndEmits, seq) {\n    var seqDocId = '_local/lastSeq';\n    return view.db.get(seqDocId)\n      .catch(defaultsTo({_id: seqDocId, seq: 0}))\n      .then(function (lastSeqDoc) {\n        var docIds = mapToKeysArray(docIdsToChangesAndEmits);\n        return Promise.all(docIds.map(function (docId) {\n          return getDocsToPersist(docId, view, docIdsToChangesAndEmits);\n        })).then(function (listOfDocsToPersist) {\n          var docsToPersist = flatten(listOfDocsToPersist);\n          lastSeqDoc.seq = seq;\n          docsToPersist.push(lastSeqDoc);\n          // write all docs in a single operation, update the seq once\n          return view.db.bulkDocs({docs : docsToPersist});\n        });\n      });\n  }\n\n  function getQueue(view) {\n    var viewName = typeof view === 'string' ? view : view.name;\n    var queue = persistentQueues[viewName];\n    if (!queue) {\n      queue = persistentQueues[viewName] = new TaskQueue$1();\n    }\n    return queue;\n  }\n\n  function updateView(view) {\n    return sequentialize(getQueue(view), function () {\n      return updateViewInQueue(view);\n    })();\n  }\n\n  function updateViewInQueue(view) {\n    // bind the emit function once\n    var mapResults;\n    var doc;\n\n    function emit(key, value) {\n      var output = {id: doc._id, key: normalizeKey(key)};\n      // Don't explicitly store the value unless it's defined and non-null.\n      // This saves on storage space, because often people don't use it.\n      if (typeof value !== 'undefined' && value !== null) {\n        output.value = normalizeKey(value);\n      }\n      mapResults.push(output);\n    }\n\n    var mapFun = mapper(view.mapFun, emit);\n\n    var currentSeq = view.seq || 0;\n\n    function processChange(docIdsToChangesAndEmits, seq) {\n      return function () {\n        return saveKeyValues(view, docIdsToChangesAndEmits, seq);\n      };\n    }\n\n    var queue = new TaskQueue$1();\n\n    function processNextBatch() {\n      return view.sourceDB.changes({\n        return_docs: true,\n        conflicts: true,\n        include_docs: true,\n        style: 'all_docs',\n        since: currentSeq,\n        limit: CHANGES_BATCH_SIZE$1\n      }).then(processBatch);\n    }\n\n    function processBatch(response) {\n      var results = response.results;\n      if (!results.length) {\n        return;\n      }\n      var docIdsToChangesAndEmits = createDocIdsToChangesAndEmits(results);\n      queue.add(processChange(docIdsToChangesAndEmits, currentSeq));\n      if (results.length < CHANGES_BATCH_SIZE$1) {\n        return;\n      }\n      return processNextBatch();\n    }\n\n    function createDocIdsToChangesAndEmits(results) {\n      var docIdsToChangesAndEmits = new ExportedMap();\n      for (var i = 0, len = results.length; i < len; i++) {\n        var change = results[i];\n        if (change.doc._id[0] !== '_') {\n          mapResults = [];\n          doc = change.doc;\n\n          if (!doc._deleted) {\n            tryMap(view.sourceDB, mapFun, doc);\n          }\n          mapResults.sort(sortByKeyThenValue);\n\n          var indexableKeysToKeyValues = createIndexableKeysToKeyValues(mapResults);\n          docIdsToChangesAndEmits.set(change.doc._id, [\n            indexableKeysToKeyValues,\n            change.changes\n          ]);\n        }\n        currentSeq = change.seq;\n      }\n      return docIdsToChangesAndEmits;\n    }\n\n    function createIndexableKeysToKeyValues(mapResults) {\n      var indexableKeysToKeyValues = new ExportedMap();\n      var lastKey;\n      for (var i = 0, len = mapResults.length; i < len; i++) {\n        var emittedKeyValue = mapResults[i];\n        var complexKey = [emittedKeyValue.key, emittedKeyValue.id];\n        if (i > 0 && collate(emittedKeyValue.key, lastKey) === 0) {\n          complexKey.push(i); // dup key+id, so make it unique\n        }\n        indexableKeysToKeyValues.set(toIndexableString(complexKey), emittedKeyValue);\n        lastKey = emittedKeyValue.key;\n      }\n      return indexableKeysToKeyValues;\n    }\n\n    return processNextBatch().then(function () {\n      return queue.finish();\n    }).then(function () {\n      view.seq = currentSeq;\n    });\n  }\n\n  function reduceView(view, results, options) {\n    if (options.group_level === 0) {\n      delete options.group_level;\n    }\n\n    var shouldGroup = options.group || options.group_level;\n\n    var reduceFun = reducer(view.reduceFun);\n\n    var groups = [];\n    var lvl = isNaN(options.group_level) ? Number.POSITIVE_INFINITY :\n      options.group_level;\n    results.forEach(function (e) {\n      var last = groups[groups.length - 1];\n      var groupKey = shouldGroup ? e.key : null;\n\n      // only set group_level for array keys\n      if (shouldGroup && Array.isArray(groupKey)) {\n        groupKey = groupKey.slice(0, lvl);\n      }\n\n      if (last && collate(last.groupKey, groupKey) === 0) {\n        last.keys.push([e.key, e.id]);\n        last.values.push(e.value);\n        return;\n      }\n      groups.push({\n        keys: [[e.key, e.id]],\n        values: [e.value],\n        groupKey: groupKey\n      });\n    });\n    results = [];\n    for (var i = 0, len = groups.length; i < len; i++) {\n      var e = groups[i];\n      var reduceTry = tryReduce(view.sourceDB, reduceFun, e.keys, e.values, false);\n      if (reduceTry.error && reduceTry.error instanceof BuiltInError) {\n        // CouchDB returns an error if a built-in errors out\n        throw reduceTry.error;\n      }\n      results.push({\n        // CouchDB just sets the value to null if a non-built-in errors out\n        value: reduceTry.error ? null : reduceTry.output,\n        key: e.groupKey\n      });\n    }\n    // no total_rows/offset when reducing\n    return {rows: sliceResults(results, options.limit, options.skip)};\n  }\n\n  function queryView(view, opts) {\n    return sequentialize(getQueue(view), function () {\n      return queryViewInQueue(view, opts);\n    })();\n  }\n\n  function queryViewInQueue(view, opts) {\n    var totalRows;\n    var shouldReduce = view.reduceFun && opts.reduce !== false;\n    var skip = opts.skip || 0;\n    if (typeof opts.keys !== 'undefined' && !opts.keys.length) {\n      // equivalent query\n      opts.limit = 0;\n      delete opts.keys;\n    }\n\n    function fetchFromView(viewOpts) {\n      viewOpts.include_docs = true;\n      return view.db.allDocs(viewOpts).then(function (res) {\n        totalRows = res.total_rows;\n        return res.rows.map(function (result) {\n\n          // implicit migration - in older versions of PouchDB,\n          // we explicitly stored the doc as {id: ..., key: ..., value: ...}\n          // this is tested in a migration test\n          /* istanbul ignore next */\n          if ('value' in result.doc && typeof result.doc.value === 'object' &&\n            result.doc.value !== null) {\n            var keys = Object.keys(result.doc.value).sort();\n            // this detection method is not perfect, but it's unlikely the user\n            // emitted a value which was an object with these 3 exact keys\n            var expectedKeys = ['id', 'key', 'value'];\n            if (!(keys < expectedKeys || keys > expectedKeys)) {\n              return result.doc.value;\n            }\n          }\n\n          var parsedKeyAndDocId = parseIndexableString(result.doc._id);\n          return {\n            key: parsedKeyAndDocId[0],\n            id: parsedKeyAndDocId[1],\n            value: ('value' in result.doc ? result.doc.value : null)\n          };\n        });\n      });\n    }\n\n    function onMapResultsReady(rows) {\n      var finalResults;\n      if (shouldReduce) {\n        finalResults = reduceView(view, rows, opts);\n      } else {\n        finalResults = {\n          total_rows: totalRows,\n          offset: skip,\n          rows: rows\n        };\n      }\n      /* istanbul ignore if */\n      if (opts.update_seq) {\n        finalResults.update_seq = view.seq;\n      }\n      if (opts.include_docs) {\n        var docIds = uniq(rows.map(rowToDocId));\n\n        return view.sourceDB.allDocs({\n          keys: docIds,\n          include_docs: true,\n          conflicts: opts.conflicts,\n          attachments: opts.attachments,\n          binary: opts.binary\n        }).then(function (allDocsRes) {\n          var docIdsToDocs = new ExportedMap();\n          allDocsRes.rows.forEach(function (row) {\n            docIdsToDocs.set(row.id, row.doc);\n          });\n          rows.forEach(function (row) {\n            var docId = rowToDocId(row);\n            var doc = docIdsToDocs.get(docId);\n            if (doc) {\n              row.doc = doc;\n            }\n          });\n          return finalResults;\n        });\n      } else {\n        return finalResults;\n      }\n    }\n\n    if (typeof opts.keys !== 'undefined') {\n      var keys = opts.keys;\n      var fetchPromises = keys.map(function (key) {\n        var viewOpts = {\n          startkey : toIndexableString([key]),\n          endkey   : toIndexableString([key, {}])\n        };\n        /* istanbul ignore if */\n        if (opts.update_seq) {\n          viewOpts.update_seq = true;\n        }\n        return fetchFromView(viewOpts);\n      });\n      return Promise.all(fetchPromises).then(flatten).then(onMapResultsReady);\n    } else { // normal query, no 'keys'\n      var viewOpts = {\n        descending : opts.descending\n      };\n      /* istanbul ignore if */\n      if (opts.update_seq) {\n        viewOpts.update_seq = true;\n      }\n      var startkey;\n      var endkey;\n      if ('start_key' in opts) {\n        startkey = opts.start_key;\n      }\n      if ('startkey' in opts) {\n        startkey = opts.startkey;\n      }\n      if ('end_key' in opts) {\n        endkey = opts.end_key;\n      }\n      if ('endkey' in opts) {\n        endkey = opts.endkey;\n      }\n      if (typeof startkey !== 'undefined') {\n        viewOpts.startkey = opts.descending ?\n          toIndexableString([startkey, {}]) :\n          toIndexableString([startkey]);\n      }\n      if (typeof endkey !== 'undefined') {\n        var inclusiveEnd = opts.inclusive_end !== false;\n        if (opts.descending) {\n          inclusiveEnd = !inclusiveEnd;\n        }\n\n        viewOpts.endkey = toIndexableString(\n          inclusiveEnd ? [endkey, {}] : [endkey]);\n      }\n      if (typeof opts.key !== 'undefined') {\n        var keyStart = toIndexableString([opts.key]);\n        var keyEnd = toIndexableString([opts.key, {}]);\n        if (viewOpts.descending) {\n          viewOpts.endkey = keyStart;\n          viewOpts.startkey = keyEnd;\n        } else {\n          viewOpts.startkey = keyStart;\n          viewOpts.endkey = keyEnd;\n        }\n      }\n      if (!shouldReduce) {\n        if (typeof opts.limit === 'number') {\n          viewOpts.limit = opts.limit;\n        }\n        viewOpts.skip = skip;\n      }\n      return fetchFromView(viewOpts).then(onMapResultsReady);\n    }\n  }\n\n  function httpViewCleanup(db) {\n    return db.fetch('_view_cleanup', {\n      headers: new h({'Content-Type': 'application/json'}),\n      method: 'POST'\n    }).then(function (response) {\n      return response.json();\n    });\n  }\n\n  function localViewCleanup(db) {\n    return db.get('_local/' + localDocName).then(function (metaDoc) {\n      var docsToViews = new ExportedMap();\n      Object.keys(metaDoc.views).forEach(function (fullViewName) {\n        var parts = parseViewName(fullViewName);\n        var designDocName = '_design/' + parts[0];\n        var viewName = parts[1];\n        var views = docsToViews.get(designDocName);\n        if (!views) {\n          views = new ExportedSet();\n          docsToViews.set(designDocName, views);\n        }\n        views.add(viewName);\n      });\n      var opts = {\n        keys : mapToKeysArray(docsToViews),\n        include_docs : true\n      };\n      return db.allDocs(opts).then(function (res) {\n        var viewsToStatus = {};\n        res.rows.forEach(function (row) {\n          var ddocName = row.key.substring(8); // cuts off '_design/'\n          docsToViews.get(row.key).forEach(function (viewName) {\n            var fullViewName = ddocName + '/' + viewName;\n            /* istanbul ignore if */\n            if (!metaDoc.views[fullViewName]) {\n              // new format, without slashes, to support PouchDB 2.2.0\n              // migration test in pouchdb's browser.migration.js verifies this\n              fullViewName = viewName;\n            }\n            var viewDBNames = Object.keys(metaDoc.views[fullViewName]);\n            // design doc deleted, or view function nonexistent\n            var statusIsGood = row.doc && row.doc.views &&\n              row.doc.views[viewName];\n            viewDBNames.forEach(function (viewDBName) {\n              viewsToStatus[viewDBName] =\n                viewsToStatus[viewDBName] || statusIsGood;\n            });\n          });\n        });\n        var dbsToDelete = Object.keys(viewsToStatus).filter(\n          function (viewDBName) { return !viewsToStatus[viewDBName]; });\n        var destroyPromises = dbsToDelete.map(function (viewDBName) {\n          return sequentialize(getQueue(viewDBName), function () {\n            return new db.constructor(viewDBName, db.__opts).destroy();\n          })();\n        });\n        return Promise.all(destroyPromises).then(function () {\n          return {ok: true};\n        });\n      });\n    }, defaultsTo({ok: true}));\n  }\n\n  function queryPromised(db, fun, opts) {\n    /* istanbul ignore next */\n    if (typeof db._query === 'function') {\n      return customQuery(db, fun, opts);\n    }\n    if (isRemote(db)) {\n      return httpQuery(db, fun, opts);\n    }\n\n    if (typeof fun !== 'string') {\n      // temp_view\n      checkQueryParseError(opts, fun);\n\n      tempViewQueue.add(function () {\n        var createViewPromise = createView(\n          /* sourceDB */ db,\n          /* viewName */ 'temp_view/temp_view',\n          /* mapFun */ fun.map,\n          /* reduceFun */ fun.reduce,\n          /* temporary */ true,\n          /* localDocName */ localDocName);\n        return createViewPromise.then(function (view) {\n          return fin(updateView(view).then(function () {\n            return queryView(view, opts);\n          }), function () {\n            return view.db.destroy();\n          });\n        });\n      });\n      return tempViewQueue.finish();\n    } else {\n      // persistent view\n      var fullViewName = fun;\n      var parts = parseViewName(fullViewName);\n      var designDocName = parts[0];\n      var viewName = parts[1];\n      return db.get('_design/' + designDocName).then(function (doc) {\n        var fun = doc.views && doc.views[viewName];\n\n        if (!fun) {\n          // basic validator; it's assumed that every subclass would want this\n          throw new NotFoundError('ddoc ' + doc._id + ' has no view named ' +\n            viewName);\n        }\n\n        ddocValidator(doc, viewName);\n        checkQueryParseError(opts, fun);\n\n        var createViewPromise = createView(\n          /* sourceDB */ db,\n          /* viewName */ fullViewName,\n          /* mapFun */ fun.map,\n          /* reduceFun */ fun.reduce,\n          /* temporary */ false,\n          /* localDocName */ localDocName);\n        return createViewPromise.then(function (view) {\n          if (opts.stale === 'ok' || opts.stale === 'update_after') {\n            if (opts.stale === 'update_after') {\n              immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n                updateView(view);\n              });\n            }\n            return queryView(view, opts);\n          } else { // stale not ok\n            return updateView(view).then(function () {\n              return queryView(view, opts);\n            });\n          }\n        });\n      });\n    }\n  }\n\n  function abstractQuery(fun, opts, callback) {\n    var db = this;\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts ? coerceOptions(opts) : {};\n\n    if (typeof fun === 'function') {\n      fun = {map : fun};\n    }\n\n    var promise = Promise.resolve().then(function () {\n      return queryPromised(db, fun, opts);\n    });\n    promisedCallback(promise, callback);\n    return promise;\n  }\n\n  var abstractViewCleanup = callbackify(function () {\n    var db = this;\n    /* istanbul ignore next */\n    if (typeof db._viewCleanup === 'function') {\n      return customViewCleanup(db);\n    }\n    if (isRemote(db)) {\n      return httpViewCleanup(db);\n    }\n    return localViewCleanup(db);\n  });\n\n  return {\n    query: abstractQuery,\n    viewCleanup: abstractViewCleanup\n  };\n}\n\nvar builtInReduce = {\n  _sum: function (keys, values) {\n    return sum(values);\n  },\n\n  _count: function (keys, values) {\n    return values.length;\n  },\n\n  _stats: function (keys, values) {\n    // no need to implement rereduce=true, because Pouch\n    // will never call it\n    function sumsqr(values) {\n      var _sumsqr = 0;\n      for (var i = 0, len = values.length; i < len; i++) {\n        var num = values[i];\n        _sumsqr += (num * num);\n      }\n      return _sumsqr;\n    }\n    return {\n      sum     : sum(values),\n      min     : Math.min.apply(null, values),\n      max     : Math.max.apply(null, values),\n      count   : values.length,\n      sumsqr : sumsqr(values)\n    };\n  }\n};\n\nfunction getBuiltIn(reduceFunString) {\n  if (/^_sum/.test(reduceFunString)) {\n    return builtInReduce._sum;\n  } else if (/^_count/.test(reduceFunString)) {\n    return builtInReduce._count;\n  } else if (/^_stats/.test(reduceFunString)) {\n    return builtInReduce._stats;\n  } else if (/^_/.test(reduceFunString)) {\n    throw new Error(reduceFunString + ' is not a supported reduce function.');\n  }\n}\n\nfunction mapper(mapFun, emit) {\n  // for temp_views one can use emit(doc, emit), see #38\n  if (typeof mapFun === \"function\" && mapFun.length === 2) {\n    var origMap = mapFun;\n    return function (doc) {\n      return origMap(doc, emit);\n    };\n  } else {\n    return evalFunctionWithEval(mapFun.toString(), emit);\n  }\n}\n\nfunction reducer(reduceFun) {\n  var reduceFunString = reduceFun.toString();\n  var builtIn = getBuiltIn(reduceFunString);\n  if (builtIn) {\n    return builtIn;\n  } else {\n    return evalFunctionWithEval(reduceFunString);\n  }\n}\n\nfunction ddocValidator(ddoc, viewName) {\n  var fun = ddoc.views && ddoc.views[viewName];\n  if (typeof fun.map !== 'string') {\n    throw new NotFoundError('ddoc ' + ddoc._id + ' has no string view named ' +\n      viewName + ', instead found object of type: ' + typeof fun.map);\n  }\n}\n\nvar localDocName = 'mrviews';\nvar abstract = createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator);\n\nfunction query(fun, opts, callback) {\n  return abstract.query.call(this, fun, opts, callback);\n}\n\nfunction viewCleanup(callback) {\n  return abstract.viewCleanup.call(this, callback);\n}\n\nvar mapreduce = {\n  query: query,\n  viewCleanup: viewCleanup\n};\n\nfunction isGenOne$1(rev) {\n  return /^1-/.test(rev);\n}\n\nfunction fileHasChanged(localDoc, remoteDoc, filename) {\n  return !localDoc._attachments ||\n         !localDoc._attachments[filename] ||\n         localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;\n}\n\nfunction getDocAttachments(db, doc) {\n  var filenames = Object.keys(doc._attachments);\n  return Promise.all(filenames.map(function (filename) {\n    return db.getAttachment(doc._id, filename, {rev: doc._rev});\n  }));\n}\n\nfunction getDocAttachmentsFromTargetOrSource(target, src, doc) {\n  var doCheckForLocalAttachments = isRemote(src) && !isRemote(target);\n  var filenames = Object.keys(doc._attachments);\n\n  if (!doCheckForLocalAttachments) {\n    return getDocAttachments(src, doc);\n  }\n\n  return target.get(doc._id).then(function (localDoc) {\n    return Promise.all(filenames.map(function (filename) {\n      if (fileHasChanged(localDoc, doc, filename)) {\n        return src.getAttachment(doc._id, filename);\n      }\n\n      return target.getAttachment(localDoc._id, filename);\n    }));\n  }).catch(function (error) {\n    /* istanbul ignore if */\n    if (error.status !== 404) {\n      throw error;\n    }\n\n    return getDocAttachments(src, doc);\n  });\n}\n\nfunction createBulkGetOpts(diffs) {\n  var requests = [];\n  Object.keys(diffs).forEach(function (id) {\n    var missingRevs = diffs[id].missing;\n    missingRevs.forEach(function (missingRev) {\n      requests.push({\n        id: id,\n        rev: missingRev\n      });\n    });\n  });\n\n  return {\n    docs: requests,\n    revs: true,\n    latest: true\n  };\n}\n\n//\n// Fetch all the documents from the src as described in the \"diffs\",\n// which is a mapping of docs IDs to revisions. If the state ever\n// changes to \"cancelled\", then the returned promise will be rejected.\n// Else it will be resolved with a list of fetched documents.\n//\nfunction getDocs(src, target, diffs, state) {\n  diffs = clone(diffs); // we do not need to modify this\n\n  var resultDocs = [],\n      ok = true;\n\n  function getAllDocs() {\n\n    var bulkGetOpts = createBulkGetOpts(diffs);\n\n    if (!bulkGetOpts.docs.length) { // optimization: skip empty requests\n      return;\n    }\n\n    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {\n      /* istanbul ignore if */\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      return Promise.all(bulkGetResponse.results.map(function (bulkGetInfo) {\n        return Promise.all(bulkGetInfo.docs.map(function (doc) {\n          var remoteDoc = doc.ok;\n\n          if (doc.error) {\n            // when AUTO_COMPACTION is set, docs can be returned which look\n            // like this: {\"missing\":\"1-7c3ac256b693c462af8442f992b83696\"}\n            ok = false;\n          }\n\n          if (!remoteDoc || !remoteDoc._attachments) {\n            return remoteDoc;\n          }\n\n          return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc)\n                   .then(function (attachments) {\n                           var filenames = Object.keys(remoteDoc._attachments);\n                           attachments\n                             .forEach(function (attachment, i) {\n                                        var att = remoteDoc._attachments[filenames[i]];\n                                        delete att.stub;\n                                        delete att.length;\n                                        att.data = attachment;\n                                      });\n\n                                      return remoteDoc;\n                                    });\n        }));\n      }))\n\n      .then(function (results) {\n        resultDocs = resultDocs.concat(flatten(results).filter(Boolean));\n      });\n    });\n  }\n\n  function hasAttachments(doc) {\n    return doc._attachments && Object.keys(doc._attachments).length > 0;\n  }\n\n  function hasConflicts(doc) {\n    return doc._conflicts && doc._conflicts.length > 0;\n  }\n\n  function fetchRevisionOneDocs(ids) {\n    // Optimization: fetch gen-1 docs and attachments in\n    // a single request using _all_docs\n    return src.allDocs({\n      keys: ids,\n      include_docs: true,\n      conflicts: true\n    }).then(function (res) {\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      res.rows.forEach(function (row) {\n        if (row.deleted || !row.doc || !isGenOne$1(row.value.rev) ||\n            hasAttachments(row.doc) || hasConflicts(row.doc)) {\n          // if any of these conditions apply, we need to fetch using get()\n          return;\n        }\n\n        // strip _conflicts array to appease CSG (#5793)\n        /* istanbul ignore if */\n        if (row.doc._conflicts) {\n          delete row.doc._conflicts;\n        }\n\n        // the doc we got back from allDocs() is sufficient\n        resultDocs.push(row.doc);\n        delete diffs[row.id];\n      });\n    });\n  }\n\n  function getRevisionOneDocs() {\n    // filter out the generation 1 docs and get them\n    // leaving the non-generation one docs to be got otherwise\n    var ids = Object.keys(diffs).filter(function (id) {\n      var missing = diffs[id].missing;\n      return missing.length === 1 && isGenOne$1(missing[0]);\n    });\n    if (ids.length > 0) {\n      return fetchRevisionOneDocs(ids);\n    }\n  }\n\n  function returnResult() {\n    return { ok:ok, docs:resultDocs };\n  }\n\n  return Promise.resolve()\n    .then(getRevisionOneDocs)\n    .then(getAllDocs)\n    .then(returnResult);\n}\n\nvar CHECKPOINT_VERSION = 1;\nvar REPLICATOR = \"pouchdb\";\n// This is an arbitrary number to limit the\n// amount of replication history we save in the checkpoint.\n// If we save too much, the checkpoing docs will become very big,\n// if we save fewer, we'll run a greater risk of having to\n// read all the changes from 0 when checkpoint PUTs fail\n// CouchDB 2.0 has a more involved history pruning,\n// but let's go for the simple version for now.\nvar CHECKPOINT_HISTORY_SIZE = 5;\nvar LOWEST_SEQ = 0;\n\nfunction updateCheckpoint(db, id, checkpoint, session, returnValue) {\n  return db.get(id).catch(function (err) {\n    if (err.status === 404) {\n      if (db.adapter === 'http' || db.adapter === 'https') {\n        explainError(\n          404, 'PouchDB is just checking if a remote checkpoint exists.'\n        );\n      }\n      return {\n        session_id: session,\n        _id: id,\n        history: [],\n        replicator: REPLICATOR,\n        version: CHECKPOINT_VERSION\n      };\n    }\n    throw err;\n  }).then(function (doc) {\n    if (returnValue.cancelled) {\n      return;\n    }\n\n    // if the checkpoint has not changed, do not update\n    if (doc.last_seq === checkpoint) {\n      return;\n    }\n\n    // Filter out current entry for this replication\n    doc.history = (doc.history || []).filter(function (item) {\n      return item.session_id !== session;\n    });\n\n    // Add the latest checkpoint to history\n    doc.history.unshift({\n      last_seq: checkpoint,\n      session_id: session\n    });\n\n    // Just take the last pieces in history, to\n    // avoid really big checkpoint docs.\n    // see comment on history size above\n    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);\n\n    doc.version = CHECKPOINT_VERSION;\n    doc.replicator = REPLICATOR;\n\n    doc.session_id = session;\n    doc.last_seq = checkpoint;\n\n    return db.put(doc).catch(function (err) {\n      if (err.status === 409) {\n        // retry; someone is trying to write a checkpoint simultaneously\n        return updateCheckpoint(db, id, checkpoint, session, returnValue);\n      }\n      throw err;\n    });\n  });\n}\n\nfunction Checkpointer(src, target, id, returnValue, opts) {\n  this.src = src;\n  this.target = target;\n  this.id = id;\n  this.returnValue = returnValue;\n  this.opts = opts || {};\n}\n\nCheckpointer.prototype.writeCheckpoint = function (checkpoint, session) {\n  var self = this;\n  return this.updateTarget(checkpoint, session).then(function () {\n    return self.updateSource(checkpoint, session);\n  });\n};\n\nCheckpointer.prototype.updateTarget = function (checkpoint, session) {\n  if (this.opts.writeTargetCheckpoint) {\n    return updateCheckpoint(this.target, this.id, checkpoint,\n      session, this.returnValue);\n  } else {\n    return Promise.resolve(true);\n  }\n};\n\nCheckpointer.prototype.updateSource = function (checkpoint, session) {\n  if (this.opts.writeSourceCheckpoint) {\n    var self = this;\n    return updateCheckpoint(this.src, this.id, checkpoint,\n      session, this.returnValue)\n      .catch(function (err) {\n        if (isForbiddenError(err)) {\n          self.opts.writeSourceCheckpoint = false;\n          return true;\n        }\n        throw err;\n      });\n  } else {\n    return Promise.resolve(true);\n  }\n};\n\nvar comparisons = {\n  \"undefined\": function (targetDoc, sourceDoc) {\n    // This is the previous comparison function\n    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {\n      return sourceDoc.last_seq;\n    }\n    /* istanbul ignore next */\n    return 0;\n  },\n  \"1\": function (targetDoc, sourceDoc) {\n    // This is the comparison function ported from CouchDB\n    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;\n  }\n};\n\nCheckpointer.prototype.getCheckpoint = function () {\n  var self = this;\n\n  if (self.opts && self.opts.writeSourceCheckpoint && !self.opts.writeTargetCheckpoint) {\n    return self.src.get(self.id).then(function (sourceDoc) {\n      return sourceDoc.last_seq || LOWEST_SEQ;\n    }).catch(function (err) {\n      /* istanbul ignore if */\n      if (err.status !== 404) {\n        throw err;\n      }\n      return LOWEST_SEQ;\n    });\n  }\n\n  return self.target.get(self.id).then(function (targetDoc) {\n    if (self.opts && self.opts.writeTargetCheckpoint && !self.opts.writeSourceCheckpoint) {\n      return targetDoc.last_seq || LOWEST_SEQ;\n    }\n\n    return self.src.get(self.id).then(function (sourceDoc) {\n      // Since we can't migrate an old version doc to a new one\n      // (no session id), we just go with the lowest seq in this case\n      /* istanbul ignore if */\n      if (targetDoc.version !== sourceDoc.version) {\n        return LOWEST_SEQ;\n      }\n\n      var version;\n      if (targetDoc.version) {\n        version = targetDoc.version.toString();\n      } else {\n        version = \"undefined\";\n      }\n\n      if (version in comparisons) {\n        return comparisons[version](targetDoc, sourceDoc);\n      }\n      /* istanbul ignore next */\n      return LOWEST_SEQ;\n    }, function (err) {\n      if (err.status === 404 && targetDoc.last_seq) {\n        return self.src.put({\n          _id: self.id,\n          last_seq: LOWEST_SEQ\n        }).then(function () {\n          return LOWEST_SEQ;\n        }, function (err) {\n          if (isForbiddenError(err)) {\n            self.opts.writeSourceCheckpoint = false;\n            return targetDoc.last_seq;\n          }\n          /* istanbul ignore next */\n          return LOWEST_SEQ;\n        });\n      }\n      throw err;\n    });\n  }).catch(function (err) {\n    if (err.status !== 404) {\n      throw err;\n    }\n    return LOWEST_SEQ;\n  });\n};\n// This checkpoint comparison is ported from CouchDBs source\n// they come from here:\n// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906\n\nfunction compareReplicationLogs(srcDoc, tgtDoc) {\n  if (srcDoc.session_id === tgtDoc.session_id) {\n    return {\n      last_seq: srcDoc.last_seq,\n      history: srcDoc.history\n    };\n  }\n\n  return compareReplicationHistory(srcDoc.history, tgtDoc.history);\n}\n\nfunction compareReplicationHistory(sourceHistory, targetHistory) {\n  // the erlang loop via function arguments is not so easy to repeat in JS\n  // therefore, doing this as recursion\n  var S = sourceHistory[0];\n  var sourceRest = sourceHistory.slice(1);\n  var T = targetHistory[0];\n  var targetRest = targetHistory.slice(1);\n\n  if (!S || targetHistory.length === 0) {\n    return {\n      last_seq: LOWEST_SEQ,\n      history: []\n    };\n  }\n\n  var sourceId = S.session_id;\n  /* istanbul ignore if */\n  if (hasSessionId(sourceId, targetHistory)) {\n    return {\n      last_seq: S.last_seq,\n      history: sourceHistory\n    };\n  }\n\n  var targetId = T.session_id;\n  if (hasSessionId(targetId, sourceRest)) {\n    return {\n      last_seq: T.last_seq,\n      history: targetRest\n    };\n  }\n\n  return compareReplicationHistory(sourceRest, targetRest);\n}\n\nfunction hasSessionId(sessionId, history) {\n  var props = history[0];\n  var rest = history.slice(1);\n\n  if (!sessionId || history.length === 0) {\n    return false;\n  }\n\n  if (sessionId === props.session_id) {\n    return true;\n  }\n\n  return hasSessionId(sessionId, rest);\n}\n\nfunction isForbiddenError(err) {\n  return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;\n}\n\nvar STARTING_BACK_OFF = 0;\n\nfunction backOff(opts, returnValue, error, callback) {\n  if (opts.retry === false) {\n    returnValue.emit('error', error);\n    returnValue.removeAllListeners();\n    return;\n  }\n  /* istanbul ignore if */\n  if (typeof opts.back_off_function !== 'function') {\n    opts.back_off_function = defaultBackOff;\n  }\n  returnValue.emit('requestError', error);\n  if (returnValue.state === 'active' || returnValue.state === 'pending') {\n    returnValue.emit('paused', error);\n    returnValue.state = 'stopped';\n    var backOffSet = function backoffTimeSet() {\n      opts.current_back_off = STARTING_BACK_OFF;\n    };\n    var removeBackOffSetter = function removeBackOffTimeSet() {\n      returnValue.removeListener('active', backOffSet);\n    };\n    returnValue.once('paused', removeBackOffSetter);\n    returnValue.once('active', backOffSet);\n  }\n\n  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;\n  opts.current_back_off = opts.back_off_function(opts.current_back_off);\n  setTimeout(callback, opts.current_back_off);\n}\n\nfunction sortObjectPropertiesByKey(queryParams) {\n  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n    result[key] = queryParams[key];\n    return result;\n  }, {});\n}\n\n// Generate a unique id particular to this replication.\n// Not guaranteed to align perfectly with CouchDB's rep ids.\nfunction generateReplicationId(src, target, opts) {\n  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';\n  var filterFun = opts.filter ? opts.filter.toString() : '';\n  var queryParams = '';\n  var filterViewName =  '';\n  var selector = '';\n\n  // possibility for checkpoints to be lost here as behaviour of\n  // JSON.stringify is not stable (see #6226)\n  /* istanbul ignore if */\n  if (opts.selector) {\n    selector = JSON.stringify(opts.selector);\n  }\n\n  if (opts.filter && opts.query_params) {\n    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n  }\n\n  if (opts.filter && opts.filter === '_view') {\n    filterViewName = opts.view.toString();\n  }\n\n  return Promise.all([src.id(), target.id()]).then(function (res) {\n    var queryData = res[0] + res[1] + filterFun + filterViewName +\n      queryParams + docIds + selector;\n    return new Promise(function (resolve) {\n      binaryMd5(queryData, resolve);\n    });\n  }).then(function (md5sum) {\n    // can't use straight-up md5 alphabet, because\n    // the char '/' is interpreted as being for attachments,\n    // and + is also not url-safe\n    md5sum = md5sum.replace(/\\//g, '.').replace(/\\+/g, '_');\n    return '_local/' + md5sum;\n  });\n}\n\nfunction replicate(src, target, opts, returnValue, result) {\n  var batches = [];               // list of batches to be processed\n  var currentBatch;               // the batch currently being processed\n  var pendingBatch = {\n    seq: 0,\n    changes: [],\n    docs: []\n  }; // next batch, not yet ready to be processed\n  var writingCheckpoint = false;  // true while checkpoint is being written\n  var changesCompleted = false;   // true when all changes received\n  var replicationCompleted = false; // true when replication has completed\n  var last_seq = 0;\n  var continuous = opts.continuous || opts.live || false;\n  var batch_size = opts.batch_size || 100;\n  var batches_limit = opts.batches_limit || 10;\n  var changesPending = false;     // true while src.changes is running\n  var doc_ids = opts.doc_ids;\n  var selector = opts.selector;\n  var repId;\n  var checkpointer;\n  var changedDocs = [];\n  // Like couchdb, every replication gets a unique session id\n  var session = uuid();\n\n  result = result || {\n    ok: true,\n    start_time: new Date().toISOString(),\n    docs_read: 0,\n    docs_written: 0,\n    doc_write_failures: 0,\n    errors: []\n  };\n\n  var changesOpts = {};\n  returnValue.ready(src, target);\n\n  function initCheckpointer() {\n    if (checkpointer) {\n      return Promise.resolve();\n    }\n    return generateReplicationId(src, target, opts).then(function (res) {\n      repId = res;\n\n      var checkpointOpts = {};\n      if (opts.checkpoint === false) {\n        checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: false };\n      } else if (opts.checkpoint === 'source') {\n        checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: false };\n      } else if (opts.checkpoint === 'target') {\n        checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: true };\n      } else {\n        checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: true };\n      }\n\n      checkpointer = new Checkpointer(src, target, repId, returnValue, checkpointOpts);\n    });\n  }\n\n  function writeDocs() {\n    changedDocs = [];\n\n    if (currentBatch.docs.length === 0) {\n      return;\n    }\n    var docs = currentBatch.docs;\n    var bulkOpts = {timeout: opts.timeout};\n    return target.bulkDocs({docs: docs, new_edits: false}, bulkOpts).then(function (res) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n\n      // `res` doesn't include full documents (which live in `docs`), so we create a map of \n      // (id -> error), and check for errors while iterating over `docs`\n      var errorsById = Object.create(null);\n      res.forEach(function (res) {\n        if (res.error) {\n          errorsById[res.id] = res;\n        }\n      });\n\n      var errorsNo = Object.keys(errorsById).length;\n      result.doc_write_failures += errorsNo;\n      result.docs_written += docs.length - errorsNo;\n\n      docs.forEach(function (doc) {\n        var error = errorsById[doc._id];\n        if (error) {\n          result.errors.push(error);\n          // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)\n          var errorName = (error.name || '').toLowerCase();\n          if (errorName === 'unauthorized' || errorName === 'forbidden') {\n            returnValue.emit('denied', clone(error));\n          } else {\n            throw error;\n          }\n        } else {\n          changedDocs.push(doc);\n        }\n      });\n\n    }, function (err) {\n      result.doc_write_failures += docs.length;\n      throw err;\n    });\n  }\n\n  function finishBatch() {\n    if (currentBatch.error) {\n      throw new Error('There was a problem getting docs.');\n    }\n    result.last_seq = last_seq = currentBatch.seq;\n    var outResult = clone(result);\n    if (changedDocs.length) {\n      outResult.docs = changedDocs;\n      // Attach 'pending' property if server supports it (CouchDB 2.0+)\n      /* istanbul ignore if */\n      if (typeof currentBatch.pending === 'number') {\n        outResult.pending = currentBatch.pending;\n        delete currentBatch.pending;\n      }\n      returnValue.emit('change', outResult);\n    }\n    writingCheckpoint = true;\n    return checkpointer.writeCheckpoint(currentBatch.seq,\n        session).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      currentBatch = undefined;\n      getChanges();\n    }).catch(function (err) {\n      onCheckpointError(err);\n      throw err;\n    });\n  }\n\n  function getDiffs() {\n    var diff = {};\n    currentBatch.changes.forEach(function (change) {\n      // Couchbase Sync Gateway emits these, but we can ignore them\n      /* istanbul ignore if */\n      if (change.id === \"_user/\") {\n        return;\n      }\n      diff[change.id] = change.changes.map(function (x) {\n        return x.rev;\n      });\n    });\n    return target.revsDiff(diff).then(function (diffs) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      // currentBatch.diffs elements are deleted as the documents are written\n      currentBatch.diffs = diffs;\n    });\n  }\n\n  function getBatchDocs() {\n    return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {\n      currentBatch.error = !got.ok;\n      got.docs.forEach(function (doc) {\n        delete currentBatch.diffs[doc._id];\n        result.docs_read++;\n        currentBatch.docs.push(doc);\n      });\n    });\n  }\n\n  function startNextBatch() {\n    if (returnValue.cancelled || currentBatch) {\n      return;\n    }\n    if (batches.length === 0) {\n      processPendingBatch(true);\n      return;\n    }\n    currentBatch = batches.shift();\n    getDiffs()\n      .then(getBatchDocs)\n      .then(writeDocs)\n      .then(finishBatch)\n      .then(startNextBatch)\n      .catch(function (err) {\n        abortReplication('batch processing terminated with error', err);\n      });\n  }\n\n\n  function processPendingBatch(immediate) {\n    if (pendingBatch.changes.length === 0) {\n      if (batches.length === 0 && !currentBatch) {\n        if ((continuous && changesOpts.live) || changesCompleted) {\n          returnValue.state = 'pending';\n          returnValue.emit('paused');\n        }\n        if (changesCompleted) {\n          completeReplication();\n        }\n      }\n      return;\n    }\n    if (\n      immediate ||\n      changesCompleted ||\n      pendingBatch.changes.length >= batch_size\n    ) {\n      batches.push(pendingBatch);\n      pendingBatch = {\n        seq: 0,\n        changes: [],\n        docs: []\n      };\n      if (returnValue.state === 'pending' || returnValue.state === 'stopped') {\n        returnValue.state = 'active';\n        returnValue.emit('active');\n      }\n      startNextBatch();\n    }\n  }\n\n\n  function abortReplication(reason, err) {\n    if (replicationCompleted) {\n      return;\n    }\n    if (!err.message) {\n      err.message = reason;\n    }\n    result.ok = false;\n    result.status = 'aborting';\n    batches = [];\n    pendingBatch = {\n      seq: 0,\n      changes: [],\n      docs: []\n    };\n    completeReplication(err);\n  }\n\n\n  function completeReplication(fatalError) {\n    if (replicationCompleted) {\n      return;\n    }\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      result.status = 'cancelled';\n      if (writingCheckpoint) {\n        return;\n      }\n    }\n    result.status = result.status || 'complete';\n    result.end_time = new Date().toISOString();\n    result.last_seq = last_seq;\n    replicationCompleted = true;\n\n    if (fatalError) {\n      // need to extend the error because Firefox considers \".result\" read-only\n      fatalError = createError(fatalError);\n      fatalError.result = result;\n\n      // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)\n      var errorName = (fatalError.name || '').toLowerCase();\n      if (errorName === 'unauthorized' || errorName === 'forbidden') {\n        returnValue.emit('error', fatalError);\n        returnValue.removeAllListeners();\n      } else {\n        backOff(opts, returnValue, fatalError, function () {\n          replicate(src, target, opts, returnValue);\n        });\n      }\n    } else {\n      returnValue.emit('complete', result);\n      returnValue.removeAllListeners();\n    }\n  }\n\n\n  function onChange(change, pending, lastSeq) {\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    // Attach 'pending' property if server supports it (CouchDB 2.0+)\n    /* istanbul ignore if */\n    if (typeof pending === 'number') {\n      pendingBatch.pending = pending;\n    }\n\n    var filter = filterChange(opts)(change);\n    if (!filter) {\n      return;\n    }\n    pendingBatch.seq = change.seq || lastSeq;\n    pendingBatch.changes.push(change);\n    immediate__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n      processPendingBatch(batches.length === 0 && changesOpts.live);\n    });\n  }\n\n\n  function onChangesComplete(changes) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n\n    // if no results were returned then we're done,\n    // else fetch more\n    if (changes.results.length > 0) {\n      changesOpts.since = changes.results[changes.results.length - 1].seq;\n      getChanges();\n      processPendingBatch(true);\n    } else {\n\n      var complete = function () {\n        if (continuous) {\n          changesOpts.live = true;\n          getChanges();\n        } else {\n          changesCompleted = true;\n        }\n        processPendingBatch(true);\n      };\n\n      // update the checkpoint so we start from the right seq next time\n      if (!currentBatch && changes.results.length === 0) {\n        writingCheckpoint = true;\n        checkpointer.writeCheckpoint(changes.last_seq,\n            session).then(function () {\n          writingCheckpoint = false;\n          result.last_seq = last_seq = changes.last_seq;\n          complete();\n        })\n        .catch(onCheckpointError);\n      } else {\n        complete();\n      }\n    }\n  }\n\n\n  function onChangesError(err) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    abortReplication('changes rejected', err);\n  }\n\n\n  function getChanges() {\n    if (!(\n      !changesPending &&\n      !changesCompleted &&\n      batches.length < batches_limit\n      )) {\n      return;\n    }\n    changesPending = true;\n    function abortChanges() {\n      changes.cancel();\n    }\n    function removeListener() {\n      returnValue.removeListener('cancel', abortChanges);\n    }\n\n    if (returnValue._changes) { // remove old changes() and listeners\n      returnValue.removeListener('cancel', returnValue._abortChanges);\n      returnValue._changes.cancel();\n    }\n    returnValue.once('cancel', abortChanges);\n\n    var changes = src.changes(changesOpts)\n      .on('change', onChange);\n    changes.then(removeListener, removeListener);\n    changes.then(onChangesComplete)\n      .catch(onChangesError);\n\n    if (opts.retry) {\n      // save for later so we can cancel if necessary\n      returnValue._changes = changes;\n      returnValue._abortChanges = abortChanges;\n    }\n  }\n\n\n  function startChanges() {\n    initCheckpointer().then(function () {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      return checkpointer.getCheckpoint().then(function (checkpoint) {\n        last_seq = checkpoint;\n        changesOpts = {\n          since: last_seq,\n          limit: batch_size,\n          batch_size: batch_size,\n          style: 'all_docs',\n          doc_ids: doc_ids,\n          selector: selector,\n          return_docs: true // required so we know when we're done\n        };\n        if (opts.filter) {\n          if (typeof opts.filter !== 'string') {\n            // required for the client-side filter in onChange\n            changesOpts.include_docs = true;\n          } else { // ddoc filter\n            changesOpts.filter = opts.filter;\n          }\n        }\n        if ('heartbeat' in opts) {\n          changesOpts.heartbeat = opts.heartbeat;\n        }\n        if ('timeout' in opts) {\n          changesOpts.timeout = opts.timeout;\n        }\n        if (opts.query_params) {\n          changesOpts.query_params = opts.query_params;\n        }\n        if (opts.view) {\n          changesOpts.view = opts.view;\n        }\n        getChanges();\n      });\n    }).catch(function (err) {\n      abortReplication('getCheckpoint rejected with ', err);\n    });\n  }\n\n  /* istanbul ignore next */\n  function onCheckpointError(err) {\n    writingCheckpoint = false;\n    abortReplication('writeCheckpoint completed with error', err);\n  }\n\n  /* istanbul ignore if */\n  if (returnValue.cancelled) { // cancelled immediately\n    completeReplication();\n    return;\n  }\n\n  if (!returnValue._addedListeners) {\n    returnValue.once('cancel', completeReplication);\n\n    if (typeof opts.complete === 'function') {\n      returnValue.once('error', opts.complete);\n      returnValue.once('complete', function (result) {\n        opts.complete(null, result);\n      });\n    }\n    returnValue._addedListeners = true;\n  }\n\n  if (typeof opts.since === 'undefined') {\n    startChanges();\n  } else {\n    initCheckpointer().then(function () {\n      writingCheckpoint = true;\n      return checkpointer.writeCheckpoint(opts.since, session);\n    }).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      last_seq = opts.since;\n      startChanges();\n    }).catch(onCheckpointError);\n  }\n}\n\n// We create a basic promise so the caller can cancel the replication possibly\n// before we have actually started listening to changes etc\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(Replication, events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]);\nfunction Replication() {\n  events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"].call(this);\n  this.cancelled = false;\n  this.state = 'pending';\n  var self = this;\n  var promise = new Promise(function (fulfill, reject) {\n    self.once('complete', fulfill);\n    self.once('error', reject);\n  });\n  self.then = function (resolve, reject) {\n    return promise.then(resolve, reject);\n  };\n  self.catch = function (reject) {\n    return promise.catch(reject);\n  };\n  // As we allow error handling via \"error\" event as well,\n  // put a stub in here so that rejecting never throws UnhandledError.\n  self.catch(function () {});\n}\n\nReplication.prototype.cancel = function () {\n  this.cancelled = true;\n  this.state = 'cancelled';\n  this.emit('cancel');\n};\n\nReplication.prototype.ready = function (src, target) {\n  var self = this;\n  if (self._readyCalled) {\n    return;\n  }\n  self._readyCalled = true;\n\n  function onDestroy() {\n    self.cancel();\n  }\n  src.once('destroyed', onDestroy);\n  target.once('destroyed', onDestroy);\n  function cleanup() {\n    src.removeListener('destroyed', onDestroy);\n    target.removeListener('destroyed', onDestroy);\n  }\n  self.once('complete', cleanup);\n};\n\nfunction toPouch(db, opts) {\n  var PouchConstructor = opts.PouchConstructor;\n  if (typeof db === 'string') {\n    return new PouchConstructor(db, opts);\n  } else {\n    return db;\n  }\n}\n\nfunction replicateWrapper(src, target, opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n\n  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {\n    throw createError(BAD_REQUEST,\n                       \"`doc_ids` filter parameter is not a list.\");\n  }\n\n  opts.complete = callback;\n  opts = clone(opts);\n  opts.continuous = opts.continuous || opts.live;\n  opts.retry = ('retry' in opts) ? opts.retry : false;\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  var replicateRet = new Replication(opts);\n  var srcPouch = toPouch(src, opts);\n  var targetPouch = toPouch(target, opts);\n  replicate(srcPouch, targetPouch, opts, replicateRet);\n  return replicateRet;\n}\n\ninherits__WEBPACK_IMPORTED_MODULE_3___default()(Sync, events__WEBPACK_IMPORTED_MODULE_2__[\"EventEmitter\"]);\nfunction sync(src, target, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n  opts = clone(opts);\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  src = toPouch(src, opts);\n  target = toPouch(target, opts);\n  return new Sync(src, target, opts, callback);\n}\n\nfunction Sync(src, target, opts, callback) {\n  var self = this;\n  this.canceled = false;\n\n  var optsPush = opts.push ? $inject_Object_assign({}, opts, opts.push) : opts;\n  var optsPull = opts.pull ? $inject_Object_assign({}, opts, opts.pull) : opts;\n\n  this.push = replicateWrapper(src, target, optsPush);\n  this.pull = replicateWrapper(target, src, optsPull);\n\n  this.pushPaused = true;\n  this.pullPaused = true;\n\n  function pullChange(change) {\n    self.emit('change', {\n      direction: 'pull',\n      change: change\n    });\n  }\n  function pushChange(change) {\n    self.emit('change', {\n      direction: 'push',\n      change: change\n    });\n  }\n  function pushDenied(doc) {\n    self.emit('denied', {\n      direction: 'push',\n      doc: doc\n    });\n  }\n  function pullDenied(doc) {\n    self.emit('denied', {\n      direction: 'pull',\n      doc: doc\n    });\n  }\n  function pushPaused() {\n    self.pushPaused = true;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('paused');\n    }\n  }\n  function pullPaused() {\n    self.pullPaused = true;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('paused');\n    }\n  }\n  function pushActive() {\n    self.pushPaused = false;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('active', {\n        direction: 'push'\n      });\n    }\n  }\n  function pullActive() {\n    self.pullPaused = false;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('active', {\n        direction: 'pull'\n      });\n    }\n  }\n\n  var removed = {};\n\n  function removeAll(type) { // type is 'push' or 'pull'\n    return function (event, func) {\n      var isChange = event === 'change' &&\n        (func === pullChange || func === pushChange);\n      var isDenied = event === 'denied' &&\n        (func === pullDenied || func === pushDenied);\n      var isPaused = event === 'paused' &&\n        (func === pullPaused || func === pushPaused);\n      var isActive = event === 'active' &&\n        (func === pullActive || func === pushActive);\n\n      if (isChange || isDenied || isPaused || isActive) {\n        if (!(event in removed)) {\n          removed[event] = {};\n        }\n        removed[event][type] = true;\n        if (Object.keys(removed[event]).length === 2) {\n          // both push and pull have asked to be removed\n          self.removeAllListeners(event);\n        }\n      }\n    };\n  }\n\n  if (opts.live) {\n    this.push.on('complete', self.pull.cancel.bind(self.pull));\n    this.pull.on('complete', self.push.cancel.bind(self.push));\n  }\n\n  function addOneListener(ee, event, listener) {\n    if (ee.listeners(event).indexOf(listener) == -1) {\n      ee.on(event, listener);\n    }\n  }\n\n  this.on('newListener', function (event) {\n    if (event === 'change') {\n      addOneListener(self.pull, 'change', pullChange);\n      addOneListener(self.push, 'change', pushChange);\n    } else if (event === 'denied') {\n      addOneListener(self.pull, 'denied', pullDenied);\n      addOneListener(self.push, 'denied', pushDenied);\n    } else if (event === 'active') {\n      addOneListener(self.pull, 'active', pullActive);\n      addOneListener(self.push, 'active', pushActive);\n    } else if (event === 'paused') {\n      addOneListener(self.pull, 'paused', pullPaused);\n      addOneListener(self.push, 'paused', pushPaused);\n    }\n  });\n\n  this.on('removeListener', function (event) {\n    if (event === 'change') {\n      self.pull.removeListener('change', pullChange);\n      self.push.removeListener('change', pushChange);\n    } else if (event === 'denied') {\n      self.pull.removeListener('denied', pullDenied);\n      self.push.removeListener('denied', pushDenied);\n    } else if (event === 'active') {\n      self.pull.removeListener('active', pullActive);\n      self.push.removeListener('active', pushActive);\n    } else if (event === 'paused') {\n      self.pull.removeListener('paused', pullPaused);\n      self.push.removeListener('paused', pushPaused);\n    }\n  });\n\n  this.pull.on('removeListener', removeAll('pull'));\n  this.push.on('removeListener', removeAll('push'));\n\n  var promise = Promise.all([\n    this.push,\n    this.pull\n  ]).then(function (resp) {\n    var out = {\n      push: resp[0],\n      pull: resp[1]\n    };\n    self.emit('complete', out);\n    if (callback) {\n      callback(null, out);\n    }\n    self.removeAllListeners();\n    return out;\n  }, function (err) {\n    self.cancel();\n    if (callback) {\n      // if there's a callback, then the callback can receive\n      // the error event\n      callback(err);\n    } else {\n      // if there's no callback, then we're safe to emit an error\n      // event, which would otherwise throw an unhandled error\n      // due to 'error' being a special event in EventEmitters\n      self.emit('error', err);\n    }\n    self.removeAllListeners();\n    if (callback) {\n      // no sense throwing if we're already emitting an 'error' event\n      throw err;\n    }\n  });\n\n  this.then = function (success, err) {\n    return promise.then(success, err);\n  };\n\n  this.catch = function (err) {\n    return promise.catch(err);\n  };\n}\n\nSync.prototype.cancel = function () {\n  if (!this.canceled) {\n    this.canceled = true;\n    this.push.cancel();\n    this.pull.cancel();\n  }\n};\n\nfunction replication(PouchDB) {\n  PouchDB.replicate = replicateWrapper;\n  PouchDB.sync = sync;\n\n  Object.defineProperty(PouchDB.prototype, 'replicate', {\n    get: function () {\n      var self = this;\n      if (typeof this.replicateMethods === 'undefined') {\n        this.replicateMethods = {\n          from: function (other, opts, callback) {\n            return self.constructor.replicate(other, self, opts, callback);\n          },\n          to: function (other, opts, callback) {\n            return self.constructor.replicate(self, other, opts, callback);\n          }\n        };\n      }\n      return this.replicateMethods;\n    }\n  });\n\n  PouchDB.prototype.sync = function (dbName, opts, callback) {\n    return this.constructor.sync(this, dbName, opts, callback);\n  };\n}\n\nPouchDB.plugin(IDBPouch)\n  .plugin(HttpPouch$1)\n  .plugin(mapreduce)\n  .plugin(replication);\n\n// Pull from src because pouchdb-node/pouchdb-browser themselves\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (PouchDB);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13), __webpack_require__(31)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n")},function(module,exports,__webpack_require__){eval("var v1 = __webpack_require__(34);\nvar v4 = __webpack_require__(35);\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvdXVpZC9pbmRleC5qcz8xMWMxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB2MSA9IHJlcXVpcmUoJy4vdjEnKTtcbnZhciB2NCA9IHJlcXVpcmUoJy4vdjQnKTtcblxudmFyIHV1aWQgPSB2NDtcbnV1aWQudjEgPSB2MTtcbnV1aWQudjQgPSB2NDtcblxubW9kdWxlLmV4cG9ydHMgPSB1dWlkO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Stringify/parse functions that don't operate\n * recursively, so they avoid call stack exceeded\n * errors.\n */\nexports.stringify = function stringify(input) {\n  var queue = [];\n  queue.push({obj: input});\n\n  var res = '';\n  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;\n  while ((next = queue.pop())) {\n    obj = next.obj;\n    prefix = next.prefix || '';\n    val = next.val || '';\n    res += prefix;\n    if (val) {\n      res += val;\n    } else if (typeof obj !== 'object') {\n      res += typeof obj === 'undefined' ? null : JSON.stringify(obj);\n    } else if (obj === null) {\n      res += 'null';\n    } else if (Array.isArray(obj)) {\n      queue.push({val: ']'});\n      for (i = obj.length - 1; i >= 0; i--) {\n        arrayPrefix = i === 0 ? '' : ',';\n        queue.push({obj: obj[i], prefix: arrayPrefix});\n      }\n      queue.push({val: '['});\n    } else { // object\n      keys = [];\n      for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          keys.push(k);\n        }\n      }\n      queue.push({val: '}'});\n      for (i = keys.length - 1; i >= 0; i--) {\n        key = keys[i];\n        value = obj[key];\n        objPrefix = (i > 0 ? ',' : '');\n        objPrefix += JSON.stringify(key) + ':';\n        queue.push({obj: value, prefix: objPrefix});\n      }\n      queue.push({val: '{'});\n    }\n  }\n  return res;\n};\n\n// Convenience function for the parse function.\n// This pop function is basically copied from\n// pouchCollate.parseIndexableString\nfunction pop(obj, stack, metaStack) {\n  var lastMetaElement = metaStack[metaStack.length - 1];\n  if (obj === lastMetaElement.element) {\n    // popping a meta-element, e.g. an object whose value is another object\n    metaStack.pop();\n    lastMetaElement = metaStack[metaStack.length - 1];\n  }\n  var element = lastMetaElement.element;\n  var lastElementIndex = lastMetaElement.index;\n  if (Array.isArray(element)) {\n    element.push(obj);\n  } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n    var key = stack.pop();\n    element[key] = obj;\n  } else {\n    stack.push(obj); // obj with key only\n  }\n}\n\nexports.parse = function (str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n  var collationIndex,parsedNum,numChar;\n  var parsedString,lastCh,numConsecutiveSlashes,ch;\n  var arrayElement, objElement;\n  while (true) {\n    collationIndex = str[i++];\n    if (collationIndex === '}' ||\n        collationIndex === ']' ||\n        typeof collationIndex === 'undefined') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack.pop(), stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case ':':\n      case ',':\n        break;\n      case 'n':\n        i += 3; // 'ull'\n        pop(null, stack, metaStack);\n        break;\n      case 't':\n        i += 3; // 'rue'\n        pop(true, stack, metaStack);\n        break;\n      case 'f':\n        i += 4; // 'alse'\n        pop(false, stack, metaStack);\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '-':\n        parsedNum = '';\n        i--;\n        while (true) {\n          numChar = str[i++];\n          if (/[\\d\\.\\-e\\+]/.test(numChar)) {\n            parsedNum += numChar;\n          } else {\n            i--;\n            break;\n          }\n        }\n        pop(parseFloat(parsedNum), stack, metaStack);\n        break;\n      case '\"':\n        parsedString = '';\n        lastCh = void 0;\n        numConsecutiveSlashes = 0;\n        while (true) {\n          ch = str[i++];\n          if (ch !== '\"' || (lastCh === '\\\\' &&\n              numConsecutiveSlashes % 2 === 1)) {\n            parsedString += ch;\n            lastCh = ch;\n            if (lastCh === '\\\\') {\n              numConsecutiveSlashes++;\n            } else {\n              numConsecutiveSlashes = 0;\n            }\n          } else {\n            break;\n          }\n        }\n        pop(JSON.parse('\"' + parsedString + '\"'), stack, metaStack);\n        break;\n      case '[':\n        arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '{':\n        objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      default:\n        throw new Error(\n          'unexpectedly reached end of input: ' + collationIndex);\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvdnV2dXplbGEvaW5kZXguanM/NmYyOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3RyaW5naWZ5L3BhcnNlIGZ1bmN0aW9ucyB0aGF0IGRvbid0IG9wZXJhdGVcbiAqIHJlY3Vyc2l2ZWx5LCBzbyB0aGV5IGF2b2lkIGNhbGwgc3RhY2sgZXhjZWVkZWRcbiAqIGVycm9ycy5cbiAqL1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaW5wdXQpIHtcbiAgdmFyIHF1ZXVlID0gW107XG4gIHF1ZXVlLnB1c2goe29iajogaW5wdXR9KTtcblxuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuZXh0LCBvYmosIHByZWZpeCwgdmFsLCBpLCBhcnJheVByZWZpeCwga2V5cywgaywga2V5LCB2YWx1ZSwgb2JqUHJlZml4O1xuICB3aGlsZSAoKG5leHQgPSBxdWV1ZS5wb3AoKSkpIHtcbiAgICBvYmogPSBuZXh0Lm9iajtcbiAgICBwcmVmaXggPSBuZXh0LnByZWZpeCB8fCAnJztcbiAgICB2YWwgPSBuZXh0LnZhbCB8fCAnJztcbiAgICByZXMgKz0gcHJlZml4O1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHJlcyArPSB2YWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmVzICs9IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgfSBlbHNlIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgIHJlcyArPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIHF1ZXVlLnB1c2goe3ZhbDogJ10nfSk7XG4gICAgICBmb3IgKGkgPSBvYmoubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXJyYXlQcmVmaXggPSBpID09PSAwID8gJycgOiAnLCc7XG4gICAgICAgIHF1ZXVlLnB1c2goe29iajogb2JqW2ldLCBwcmVmaXg6IGFycmF5UHJlZml4fSk7XG4gICAgICB9XG4gICAgICBxdWV1ZS5wdXNoKHt2YWw6ICdbJ30pO1xuICAgIH0gZWxzZSB7IC8vIG9iamVjdFxuICAgICAga2V5cyA9IFtdO1xuICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGspO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBxdWV1ZS5wdXNoKHt2YWw6ICd9J30pO1xuICAgICAgZm9yIChpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICBvYmpQcmVmaXggPSAoaSA+IDAgPyAnLCcgOiAnJyk7XG4gICAgICAgIG9ialByZWZpeCArPSBKU09OLnN0cmluZ2lmeShrZXkpICsgJzonO1xuICAgICAgICBxdWV1ZS5wdXNoKHtvYmo6IHZhbHVlLCBwcmVmaXg6IG9ialByZWZpeH0pO1xuICAgICAgfVxuICAgICAgcXVldWUucHVzaCh7dmFsOiAneyd9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbi8vIENvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciB0aGUgcGFyc2UgZnVuY3Rpb24uXG4vLyBUaGlzIHBvcCBmdW5jdGlvbiBpcyBiYXNpY2FsbHkgY29waWVkIGZyb21cbi8vIHBvdWNoQ29sbGF0ZS5wYXJzZUluZGV4YWJsZVN0cmluZ1xuZnVuY3Rpb24gcG9wKG9iaiwgc3RhY2ssIG1ldGFTdGFjaykge1xuICB2YXIgbGFzdE1ldGFFbGVtZW50ID0gbWV0YVN0YWNrW21ldGFTdGFjay5sZW5ndGggLSAxXTtcbiAgaWYgKG9iaiA9PT0gbGFzdE1ldGFFbGVtZW50LmVsZW1lbnQpIHtcbiAgICAvLyBwb3BwaW5nIGEgbWV0YS1lbGVtZW50LCBlLmcuIGFuIG9iamVjdCB3aG9zZSB2YWx1ZSBpcyBhbm90aGVyIG9iamVjdFxuICAgIG1ldGFTdGFjay5wb3AoKTtcbiAgICBsYXN0TWV0YUVsZW1lbnQgPSBtZXRhU3RhY2tbbWV0YVN0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG4gIHZhciBlbGVtZW50ID0gbGFzdE1ldGFFbGVtZW50LmVsZW1lbnQ7XG4gIHZhciBsYXN0RWxlbWVudEluZGV4ID0gbGFzdE1ldGFFbGVtZW50LmluZGV4O1xuICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50KSkge1xuICAgIGVsZW1lbnQucHVzaChvYmopO1xuICB9IGVsc2UgaWYgKGxhc3RFbGVtZW50SW5kZXggPT09IHN0YWNrLmxlbmd0aCAtIDIpIHsgLy8gb2JqIHdpdGgga2V5K3ZhbHVlXG4gICAgdmFyIGtleSA9IHN0YWNrLnBvcCgpO1xuICAgIGVsZW1lbnRba2V5XSA9IG9iajtcbiAgfSBlbHNlIHtcbiAgICBzdGFjay5wdXNoKG9iaik7IC8vIG9iaiB3aXRoIGtleSBvbmx5XG4gIH1cbn1cblxuZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBtZXRhU3RhY2sgPSBbXTsgLy8gc3RhY2sgZm9yIGFycmF5cyBhbmQgb2JqZWN0c1xuICB2YXIgaSA9IDA7XG4gIHZhciBjb2xsYXRpb25JbmRleCxwYXJzZWROdW0sbnVtQ2hhcjtcbiAgdmFyIHBhcnNlZFN0cmluZyxsYXN0Q2gsbnVtQ29uc2VjdXRpdmVTbGFzaGVzLGNoO1xuICB2YXIgYXJyYXlFbGVtZW50LCBvYmpFbGVtZW50O1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbGxhdGlvbkluZGV4ID0gc3RyW2krK107XG4gICAgaWYgKGNvbGxhdGlvbkluZGV4ID09PSAnfScgfHxcbiAgICAgICAgY29sbGF0aW9uSW5kZXggPT09ICddJyB8fFxuICAgICAgICB0eXBlb2YgY29sbGF0aW9uSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzdGFjay5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcChzdGFjay5wb3AoKSwgc3RhY2ssIG1ldGFTdGFjayk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGNvbGxhdGlvbkluZGV4KSB7XG4gICAgICBjYXNlICcgJzpcbiAgICAgIGNhc2UgJ1xcdCc6XG4gICAgICBjYXNlICdcXG4nOlxuICAgICAgY2FzZSAnOic6XG4gICAgICBjYXNlICcsJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICduJzpcbiAgICAgICAgaSArPSAzOyAvLyAndWxsJ1xuICAgICAgICBwb3AobnVsbCwgc3RhY2ssIG1ldGFTdGFjayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndCc6XG4gICAgICAgIGkgKz0gMzsgLy8gJ3J1ZSdcbiAgICAgICAgcG9wKHRydWUsIHN0YWNrLCBtZXRhU3RhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2YnOlxuICAgICAgICBpICs9IDQ7IC8vICdhbHNlJ1xuICAgICAgICBwb3AoZmFsc2UsIHN0YWNrLCBtZXRhU3RhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzAnOlxuICAgICAgY2FzZSAnMSc6XG4gICAgICBjYXNlICcyJzpcbiAgICAgIGNhc2UgJzMnOlxuICAgICAgY2FzZSAnNCc6XG4gICAgICBjYXNlICc1JzpcbiAgICAgIGNhc2UgJzYnOlxuICAgICAgY2FzZSAnNyc6XG4gICAgICBjYXNlICc4JzpcbiAgICAgIGNhc2UgJzknOlxuICAgICAgY2FzZSAnLSc6XG4gICAgICAgIHBhcnNlZE51bSA9ICcnO1xuICAgICAgICBpLS07XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgbnVtQ2hhciA9IHN0cltpKytdO1xuICAgICAgICAgIGlmICgvW1xcZFxcLlxcLWVcXCtdLy50ZXN0KG51bUNoYXIpKSB7XG4gICAgICAgICAgICBwYXJzZWROdW0gKz0gbnVtQ2hhcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBvcChwYXJzZUZsb2F0KHBhcnNlZE51bSksIHN0YWNrLCBtZXRhU3RhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgcGFyc2VkU3RyaW5nID0gJyc7XG4gICAgICAgIGxhc3RDaCA9IHZvaWQgMDtcbiAgICAgICAgbnVtQ29uc2VjdXRpdmVTbGFzaGVzID0gMDtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBjaCA9IHN0cltpKytdO1xuICAgICAgICAgIGlmIChjaCAhPT0gJ1wiJyB8fCAobGFzdENoID09PSAnXFxcXCcgJiZcbiAgICAgICAgICAgICAgbnVtQ29uc2VjdXRpdmVTbGFzaGVzICUgMiA9PT0gMSkpIHtcbiAgICAgICAgICAgIHBhcnNlZFN0cmluZyArPSBjaDtcbiAgICAgICAgICAgIGxhc3RDaCA9IGNoO1xuICAgICAgICAgICAgaWYgKGxhc3RDaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgIG51bUNvbnNlY3V0aXZlU2xhc2hlcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbnVtQ29uc2VjdXRpdmVTbGFzaGVzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBvcChKU09OLnBhcnNlKCdcIicgKyBwYXJzZWRTdHJpbmcgKyAnXCInKSwgc3RhY2ssIG1ldGFTdGFjayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnWyc6XG4gICAgICAgIGFycmF5RWxlbWVudCA9IHsgZWxlbWVudDogW10sIGluZGV4OiBzdGFjay5sZW5ndGggfTtcbiAgICAgICAgc3RhY2sucHVzaChhcnJheUVsZW1lbnQuZWxlbWVudCk7XG4gICAgICAgIG1ldGFTdGFjay5wdXNoKGFycmF5RWxlbWVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneyc6XG4gICAgICAgIG9iakVsZW1lbnQgPSB7IGVsZW1lbnQ6IHt9LCBpbmRleDogc3RhY2subGVuZ3RoIH07XG4gICAgICAgIHN0YWNrLnB1c2gob2JqRWxlbWVudC5lbGVtZW50KTtcbiAgICAgICAgbWV0YVN0YWNrLnB1c2gob2JqRWxlbWVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICd1bmV4cGVjdGVkbHkgcmVhY2hlZCBlbmQgb2YgaW5wdXQ6ICcgKyBjb2xsYXRpb25JbmRleCk7XG4gICAgfVxuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n")},function(module,exports){eval('//     proxy-observe v0.0.18\r\n//     Copyright (c) 2015, 2016 Simon Y. Blackwell, AnyWhichWay\r\n//     MIT License - http://opensource.org/licenses/mit-license.php\r\n(function() {\r\n\t"use strict";\r\n\t// Creates and returns a Proxy wrapping a target so that all changes can be trapped and forwarded to\r\n\t// a callback. The callback takes an array of changes just like the traditional original Chrome Object.observe\r\n\t// {object:<object changed>,name:<field changed>,type:add|update|delete|reconfigure|preventExtensions|setPrototype,oldValue:<old value if update | delete>}\r\n\t// The acceptlist can be add|update|delete|reconfigure|preventExtensions|setPrototype.\r\n\t// v 0.0.10 to support pausing and restarting observation two additional constructor arguments are available to Object.observe:\r\n\t// pausable - create the Observer so it can be paused\r\n\t// pause - create observer in paused state\r\n\t// if pausable is true then an additional method deliver(ignorePrevious) is available to start delivery\r\n\t// to pause delivery set a property called pause on the function deliver to true\r\n\t// pausable is optional to reduce the chance of shadowing a property or method on any existing code called deliver\r\n\tif(!Object.observe && typeof(Proxy)==="function") {\r\n\t\tfunction Observer(target,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tvar me = this, proxy;\r\n\t    \tfunction deliver(ignorePrevious,delay) {\r\n\t    \t\tdeliver.delay = delay;\r\n\t    \t\tif(!deliver.pause) {\r\n\t        \t\tif(me.changeset.length>0) {\r\n\t        \t\t\tif(!ignorePrevious) {\r\n\t\t    \t    \t\tvar changes = me.changeset.filter(function(change) { return !acceptlist || acceptlist.indexOf(change.type)>=0; });\r\n\t\t        \t\t\tif(changes.length>0) {\r\n\t\t        \t\t\t\tcallback(changes);\r\n\t\t        \t\t\t}\r\n\t        \t\t\t}\r\n\t        \t\t\tme.changeset = [];\r\n\t        \t\t}\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \tdeliver.pause = pause;\r\n\t    \tdeliver.delay = delay;\r\n\t\t    me.get = function(target, property) {\r\n\t\t    \tif(property==="__observer__") {\r\n\t\t    \t\treturn me;\r\n\t\t    \t}\r\n\t\t    \tif(property==="unobserve") {\r\n\t\t    \t\treturn function() {\r\n\t\t    \t\t\tObject.unobserve(target);\r\n\t\t    \t\t\treturn target;\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t\t    \tif(property==="deliver") {\r\n\t\t    \t\treturn deliver;\r\n\t\t    \t}\r\n\t\t    \treturn target[property];\r\n\t\t    }\r\n\t    \tme.target = target;\r\n\t    \tme.changeset = [];\r\n\t    \tif(!me.target.__observerCallbacks__) {\r\n\t    \t\t// __observerCallbacks__ is used as an index to get at the proxy which is the observer, so we can unobserve\r\n\t    \t\tObject.defineProperty(target,"__observerCallbacks__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t\tObject.defineProperty(target,"__observers__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t}\r\n\t    \tme.target.__observerCallbacks__.push(callback);\r\n\t    \tme.target.__observers__.push(this);\r\n\t    \tproxy = new Proxy(target,me);\r\n\t    \tdeliver(false,delay);\r\n\t    \treturn proxy;\r\n\t    }\r\n\t\tObserver.prototype.deliver = function() {\r\n\t\t\treturn this.get(null,"deliver");\r\n\t\t}\r\n\t    Observer.prototype.set = function(target, property, value) { // , receiver\r\n\t    \tvar oldvalue = target[property];\r\n\t    \tvar type = (oldvalue===undefined ? "add" : "update");\r\n\t    \ttarget[property] = value;\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && (!this.acceptlist || this.acceptlist.indexOf(type)>=0)) {\r\n\t        \tvar change = {object:target,name:property,type:type},\r\n\t        \t\tstart = this.changeset.length === 0,\r\n\t        \t\tdeliver = this.deliver();\r\n\t        \tif(type==="update") {\r\n\t        \t\tchange.oldValue = oldvalue;\r\n\t        \t}\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.deleteProperty = function(target, property) {\r\n\t    \tvar oldvalue = target[property];\r\n\t    \t//if(typeof(oldvalue)!=="undefined") {\r\n\t\t    \tdelete target[property];\r\n\t\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("delete")>=0) {\r\n\t\t        \tvar change = {object:target,name:property,type:"delete",oldValue:oldvalue},\r\n\t\t        \t\tstart = this.changeset.length === 0,\r\n\t\t        \t\tdeliver = this.deliver();\r\n\t\t        \tthis.changeset.push(change);\r\n\t\t        \tif(start) {\r\n\t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t\t        \t}\r\n\t\t    \t}\r\n\t    \t//}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.defineProperty = function(target, property, descriptor) {\r\n\t    \tObject.defineProperty(target, property, descriptor);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("reconfigure")>=0) {\r\n\t        \tvar change = {object:target,name:property,type:"reconfigure"},\r\n        \t\t\tstart = this.changeset.length === 0,\r\n        \t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.setPrototypeOf = function(target, prototype) {\r\n\t    \tvar oldvalue = Object.getPrototypeOf(target);\r\n\t    \tObject.setPrototypeOf(target, prototype);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("setPrototype")>=0) {\r\n\t        \tvar change = {object:target,name:"__proto__",type:"setPrototype",oldValue:oldvalue},\r\n    \t\t\t\tstart = this.changeset.length === 0,\r\n    \t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.preventExtensions = function(target) {\r\n\t        Object.preventExtensions(target);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("preventExtensions")>=0) {\r\n\t        \tvar change = {object:target,type:"preventExtensions"},\r\n\t\t\t\t\tstart = this.changeset.length === 0,\r\n\t\t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Object.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \treturn new Observer(object,callback,acceptlist,pausable,pause,delay);\r\n\t    };\r\n\t    Object.unobserve = function(object,callback) {\r\n\t    \tif(object.__observerCallbacks__) {\r\n\t    \t\tif(!callback) {\r\n\t    \t\t\tobject.__observerCallbacks__.splice(0,object.__observerCallbacks__.length);\r\n\t    \t\t\tobject.__observers__.splice(0,object.__observers__.length);\r\n\t    \t\t\treturn;\r\n\t    \t\t}\r\n\t    \t\tobject.__observerCallbacks__.forEach(function(observercallback,i) {\r\n\t    \t\t\tif(callback===observercallback) {\r\n\t    \t\t\t\tobject.__observerCallbacks__.splice(i,1);\r\n\t    \t\t\t\tdelete object.__observers__[i].callback;\r\n\t    \t\t\t\tobject.__observers__.splice(i,1);\r\n\t    \t\t\t}\r\n\t    \t\t});\r\n\t    \t}\r\n\t    };\r\n\t    Array.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tif(!(object instanceof Array) && !Array.isArray(object)) {\r\n\t    \t\tthrow new TypeError("First argument to Array.observer is not an Array");\r\n\t    \t}\r\n            \tacceptlist = acceptlist || ["add", "update", "delete", "splice"];\r\n\t    \tvar arrayproxy = new Proxy(object,{get: function(target,property) {\r\n\t    \t\tif(property==="unobserve") {\r\n\t\t    \t\treturn function(callback) {\r\n\t\t    \t\t\tif(callback) {\r\n\t\t    \t\t\t\treturn Object.unobserve(target,callback);\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\treturn target.unobserve();\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t    \t\tif(property==="splice") {\r\n\t    \t\t\treturn function(start,end) {\r\n\t    \t\t\t\tif(typeof(start)!=="number" || typeof(end)!=="number") {\r\n\t    \t\t\t\t\tthrow new TypeError("First two arguments to Array splice are not number, number");\r\n\t    \t\t\t\t}\r\n\t    \t    \t\tvar removed = this.slice(start,start+end),\r\n\t    \t    \t\t\taddedCount = (arguments.length > 1 ? arguments.length-2 : 0),\r\n\t    \t    \t\t\tchange =  {object:object,type:"splice",index:start,removed:removed,addedCount:addedCount};\r\n\t    \t    \t\ttarget.splice.apply(target,arguments);\r\n\t    \t    \t\tif(acceptlist.indexOf("splice")>=0) {\r\n\t    \t    \t\t\tvar start = proxy.__observer__.changeset.length === 0,\r\n\t    \t        \t\t\tdeliver = proxy.__observer__.deliver();\r\n\t    \t    \t\t\tproxy.__observer__.changeset.push(change);\r\n\t    \t    \t\t\tif(start) {\r\n\t    \t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t    \t\t        \t}\r\n\t    \t    \t\t}\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="push") {\r\n\t    \t\t\t return function(item) {\r\n\t    \t\t    \treturn this.splice(this.length,0,item);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="pop") {\r\n\t    \t\t\t return function() {\r\n\t    \t\t    \treturn this.splice(this.length-1,1);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="unshift") {\r\n\t    \t\t\t return function(item) {\r\n    \t\t    \t\treturn this.splice(0,0,item);\r\n    \t\t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="shift") {\r\n\t    \t\t\treturn function() {\r\n\t    \t    \t\treturn this.splice(0,1);\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\treturn target[property];\r\n\t    \t}});\r\n\t    \tvar proxy = Object.observe(arrayproxy,function(changeset) { \r\n\t    \t\tvar changes = changeset.filter(function(change) { return change.name!=="length" && change.name!=="add" && (!acceptlist || acceptlist.indexOf(change.type)>=0); });\r\n\t    \t\tif(changes.length>0) {\r\n\t    \t\t\tcallback(changes);\r\n\t    \t\t}\r\n\t    \t},acceptlist,pausable,pause,delay);\r\n\t    \treturn proxy;\r\n\t    };\r\n\t    Array.unobserve = function(object,callback) {\r\n\t\t  return object.unobserve(callback);\r\n\t    }\r\n\t}\r\n\tObject.deepObserve = function(object,callback,parts) {\r\n\r\n\t\tparts = (parts ? parts : []);\r\n\r\n\t\tvar toTypeName = function(obj) {\r\n\t\t\treturn ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()\r\n\t\t}\r\n\r\n\t\tfunction reobserve(value, parts) {\r\n\t\t\tvar keys = Object.keys(value);\r\n\t\t\tkeys.forEach(function(key) {\r\n\t\t\t\tif((toTypeName(value[key]) === \'object\' || toTypeName(value[key]) === \'array\') && !value[key].hasOwnProperty(\'__observers__\')) {\r\n\t\t\t\t\tvar newparts = parts.slice(0);\r\n\t\t\t\t\tnewparts.push(key);\r\n\t\t\t\t\tvalue[key] = Object.deepObserve(value[key],callback,newparts);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treobserve(object, parts);\r\n\r\n\t\tvar observed = Object.observe(object,function(changeset) {\r\n\t\t\tvar changes = [];\r\n\t\t\tfunction recurse(name,rootObject,oldObject,newObject,path) {\r\n\t\t\t\tif(newObject instanceof Object) {\r\n\t\t\t\t\tvar newkeys = Object.keys(newObject);\r\n\t\t\t\t\tnewkeys.forEach(function(key) {\r\n\t\t\t\t\t\tif(!oldObject || (oldObject[key]!==newObject[key])) {\r\n\t\t\t\t\t\t\tvar oldvalue = (oldObject && oldObject[key]!==undefined ? oldObject[key] : undefined),\r\n\t\t\t\t\t\t\t\tchange = (oldvalue===undefined ? "add" : "update"),\r\n\t\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\r\n\t\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldvalue,newValue:newObject[key],keypath:keypath});\r\n\t\t\t\t\t\t\trecurse(name,rootObject,oldvalue,newObject[key],keypath);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if(oldObject instanceof Object) {\r\n\t\t\t\t\tvar oldkeys = Object.keys(oldObject);\r\n\t\t\t\t\toldkeys.forEach(function(key) {\r\n\t\t\t\t\t\tvar change = (newObject===null ? "update" : "delete"),\r\n\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldObject[key],newValue:newObject,keypath:keypath});\r\n\t\t\t\t\t\trecurse(name,rootObject,oldObject[key],undefined,keypath);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tchangeset.forEach(function(change) {\r\n\t\t\t\tvar keypath = (parts.length>0 ? parts.join(".") + "." : "") + change.name;\r\n\r\n\t\t\t\tif (change.type === "update" || change.type === "add") { \r\n\t\t\t\t\treobserve(change.object, parts);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchanges.push({name:change.name,object:change.object,type:change.type,oldValue:change.oldValue,newValue:change.object[change.name],keypath:keypath});\r\n\t\t\t\trecurse(change.name,change.object,change.oldValue,change.object[change.name],keypath);\r\n\t\t\t});\r\n\t\t\tcallback(changes);\r\n\t\t});\r\n\t\treturn observed;\r\n\t};\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n')},function(module,exports){eval("// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvcm5nLWJyb3dzZXIuanM/ZTFmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxuXG4vLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YobXNDcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKSk7XG5pZiAoZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n")},function(module,exports){eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanM/MjM2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgcmV0dXJuIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]('StorageManager');\n\nvar StorageManager =\n/*#__PURE__*/\nfunction () {\n  function StorageManager(db, storageName, schemas) {\n    _classCallCheck(this, StorageManager);\n\n    if (!db) throw Error('The Storage Manager needs the database instance');\n    if (!storageName) throw Error('The Storage Manager needs the storage name');\n    var stores = {};\n\n    if (schemas) {\n      stores = schemas;\n    } else {\n      stores[storageName] = 'key,version,value';\n    } //    db.version(version).stores(stores);\n\n\n    db.open().then(function (db) {\n      log.info('Found database name ' + db.name + ' with version no: ' + db.verno);\n    })[\"catch\"](log.error);\n    this.db = db;\n    this.storageName = storageName;\n  }\n\n  _createClass(StorageManager, [{\n    key: \"_checkKey\",\n    value: function _checkKey(key) {\n      if (typeof key !== 'string') return key.toString();\n      return key;\n    }\n  }, {\n    key: \"_getTable\",\n    value: function _getTable(key) {\n      var name;\n\n      try {\n        name = this.db.table(this.storageName).name;\n      } catch (error) {\n        //      try {\n        name = this.db.table(key).name;\n        /*      } catch (error) {\r\n                log.error('[StorageManager._getTable] error ', error);\r\n                name = false;\r\n              }*/\n      }\n\n      return name;\n    }\n  }, {\n    key: \"_getPrimaryKey\",\n    value: function _getPrimaryKey(table) {\n      return this.db.table(table).schema.primKey.name;\n    }\n  }, {\n    key: \"_isDefaultSchema\",\n    value: function _isDefaultSchema(table) {\n      var name = this._getTable(table);\n\n      var schema = this.db[name].schema.instanceTemplate;\n      return schema.hasOwnProperty('value') && schema.hasOwnProperty('version') && schema.hasOwnProperty('key');\n    }\n    /**\r\n     * Adds a new entry to the database for a given key, together with its version.\r\n     * If an entry for the given key is already stored in the database, it will be updated.\r\n     * @param {!string} key - key that can be used with {@link storageManager.get} to retrieve the value object\r\n     * @param {!string} version - version descriptor for the given value\r\n     * @param value - value stored in the database that is mapped to given key\r\n     * @param {!string} table - table which should be looking for\r\n     * @returns {Promise} result - Promise that will be fulfilled with the key if the entry was stored successfully,\r\n     * otherwise it is rejected with an error.\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, version, value, table) {\n      var _this = this;\n\n      var updateRuntimeStatus = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      return new Promise(function (resolve, reject) {\n        log.info('[StorageManager] - set ', key, value);\n        table = table ? table : key;\n\n        var name = _this._getTable(table);\n\n        var primaryKey = _this._getPrimaryKey(name); // Object.assign(value, {version: version});\n\n\n        var data = value;\n\n        if (_this._isDefaultSchema(table)) {\n          data = {\n            key: key,\n            version: version,\n            value: value\n          };\n        } else {\n          var tmp = {};\n          tmp[primaryKey] = key;\n          Object.assign(data, tmp);\n        }\n\n        log.info('[StorageManager.set] data to put ', data);\n\n        _this.db[name].put(data).then(function () {\n          /*      if (updateRuntimeStatus && data.backup && data.url) {\r\n                  this._updateBackupRevision(data.url).then(()=> {\r\n                    resolve();\r\n                  });\r\n                } else */\n          resolve();\n        }, function () {\n          resolve();\n        });\n      });\n    }\n    /**\r\n     * Get a entry value from the database for a given key.\r\n     * If no entry is found undefined is returned.\r\n     * @param {!string} key - key that was stored using {@link storageManager.set}\r\n     * @param {!any} value - value which should be found\r\n     * @param {!string} table - table which should be looking for\r\n     * @returns {Promise} result - Promise that will be fulfilled with the value.\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key, value, table) {\n      var _this2 = this;\n\n      console.info('[StorageManager] - get ', key, value);\n      return new Promise(function (resolve, reject) {\n        table = table ? table : key;\n\n        var name = _this2._getTable(table);\n\n        if (!name) resolve(undefined);\n\n        var primaryKey = _this2._getPrimaryKey(name);\n\n        var result = _this2.db.transaction('rw!', _this2.db[name], function () {\n          if (!key && !value) {\n            return _this2.db[name].toArray().then(function (objects) {\n              if (objects.length > 0) {\n                return objects.reduce(function (acc, key) {\n                  acc[key[primaryKey]] = key;\n                  return acc;\n                }, function () {\n                  return {};\n                });\n              } else return {};\n            });\n          }\n\n          if (!value) {\n            return _this2.db[name].where(primaryKey).equals(key).first().then(function (object) {\n              if (object && object.hasOwnProperty('value')) {\n                return object.value;\n              } else {\n                return object;\n              }\n            });\n          } else {\n            var type = _typeof(value);\n\n            if (Array.isArray(value)) {\n              type = 'array';\n            }\n\n            switch (type) {\n              case 'string':\n                return _this2.db[name].where(key).equals(value).first().then(function (object) {\n                  if (object && object.hasOwnProperty('value')) {\n                    return object.value;\n                  } else {\n                    return object;\n                  }\n                });\n\n              case 'object':\n                {\n                  var strPath = 'value.' + Object.keys(value).toString();\n                  var strValue = Object.values(value);\n                  console.log(strPath, strValue);\n                  return _this2.db[name].where(strPath).anyOf(strValue).first().then(function (object) {\n                    if (object && object.hasOwnProperty('value')) {\n                      return object.value;\n                    } else {\n                      return object;\n                    }\n                  });\n                }\n\n              case 'array':\n                console.log('ARRAY:', value);\n                return _this2.db[name].where(value).then(function (object) {\n                  if (object && object.hasOwnProperty('value')) {\n                    return object.value;\n                  } else {\n                    return object;\n                  }\n                });\n            }\n          }\n        });\n\n        resolve(result);\n      });\n    }\n    /**\r\n     * Get a entry version from the database for a given key.\r\n     * If no entry is found undefined is returned.\r\n     * @param {!string} key - key that was stored using {@link storageManager.set}\r\n     * @param {any} value - the value which sould be used to find the storage resource\r\n     * @param {!string} table - table which should be looking for\r\n     * @returns {Promise} result - Promise that will be fulfilled with the version.\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function getVersion(key, value, table) {\n      var _this3 = this;\n\n      log.info('[StorageManager] - getVersion for key ', key);\n      table = table ? table : key;\n\n      var name = this._getTable(table);\n\n      var primaryKey = this._getPrimaryKey(name);\n\n      var data = value;\n\n      if (!value) {\n        data = key;\n      }\n\n      return this.db.transaction('rw!', this.db[name], function () {\n        return _this3.db[name].where(primaryKey).equals(data).first().then(function (object) {\n          if (object && object.hasOwnProperty('version')) {\n            return object.version;\n          } else {\n            return object;\n          }\n        })[\"catch\"](function (error) {\n          log.info('error getting the version for ', key, ' with error: ', error);\n          return undefined;\n        });\n      });\n    }\n    /**\r\n     * Delete a entry from the database for a given key or the full DB in case the key is not provided.\r\n     * @param {!string} key - key that was stored using {@link storageManager.set}\r\n     * @param {!any} value - the value which sould be used to find the storage resource\r\n     * @param {!string} table - table which should be looking for\r\n     * @returns {Promise} result - Promise that will be fulfilled with the number of affected rows.\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key, value, table) {\n      if (key) {\n        table = table ? table : key;\n\n        var name = this._getTable(table);\n\n        var primaryKey = this._getPrimaryKey(name);\n\n        var data = value;\n\n        if (!value) {\n          data = key;\n        }\n\n        return this.db[name].where(primaryKey).equals(data)[\"delete\"]();\n      } else return this.db[\"delete\"]();\n    }\n  }]);\n\n  return StorageManager;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (StorageManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var pouchdb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]('StorageManager');\n\n\nvar SyncStorageManager =\n/*#__PURE__*/\nfunction () {\n  function SyncStorageManager(db, storageName, remoteStorage) {\n    _classCallCheck(this, SyncStorageManager);\n\n    if (!db) throw Error('The Storage Manager needs the database instance');\n    if (!storageName) throw Error('The Storage Manager needs the storage name');\n    if (!remoteStorage) throw Error('The Storage Manager needs the remoteStorage constructor param');\n    this.db = db;\n    this.storageName = storageName;\n    this._remoteStorage = remoteStorage + '/' + storageName;\n  } // start backup with remoteStorage server. \n\n\n  _createClass(SyncStorageManager, [{\n    key: \"connect\",\n    value: function connect(options) {\n      // return this.db.connect(this._remoteStorage, options);\n      var live = options && options.hasOwnProperty('once') ? !options.once : false;\n      var opts = {\n        retry: true,\n        live: live\n      };\n      return this.replicationHandler = this.db.replicate.to(this._remoteStorage, opts, this._syncError());\n    } // backup at remote backup server of doc identified by id\n\n  }, {\n    key: \"backup\",\n    value: function backup(id) {\n      // return this.db.connect(this._remoteStorage, options);\n      var opts = {\n        retry: true,\n        live: false\n      };\n      if (id) opts.doc_ids = [id];\n      return this.replicationHandler = this.db.replicate.to(this._remoteStorage, opts, this._syncError());\n    }\n  }, {\n    key: \"sync\",\n    value: function sync(id) {\n      // return this.db.connect(this._remoteStorage, options);\n      console.log('[SyncStorageManager.sync] starting ');\n      var opts = {\n        retry: true,\n        include_docs: true,\n        live: false\n      };\n      if (id) opts.doc_ids = [id];\n      return this.replicationHandler = this.db.replicate.from(this._remoteStorage, opts, this._syncError());\n    } // There was some form or error syncing\n\n  }, {\n    key: \"_syncError\",\n    value: function _syncError() {} // do something\n    // stop backup with remoteStorage server.\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this.replicationHandler.cancel();\n    }\n    /**\r\n     * Adds a new entry to the database for a given key, together with its version.\r\n     * If an entry for the given key is already stored in the database, it will be updated.\r\n     * @param {!string} key - key that can be used with {@link storageManager.get} to retrieve the value object\r\n     * @param value - value stored in the database that is mapped to given key\r\n     * @returns {Promise} result - Promise that will be fulfilled with the stored doc if the entry was stored successfully,\r\n     * otherwise it is rejected with an error.\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value, version) {\n      var _this = this;\n\n      if (!key) throw Error('[SyncStorageManager.set] key is mandatory param');\n      if (!value) throw Error('[SyncStorageManager.set] value is mandatory param');\n      return new Promise(function (resolve, reject) {\n        console.log('[SyncStorageManager.set] key ', key, ' value ', value);\n        value._id = key;\n\n        _this.db.get(key).then(function (doc) {\n          var data = typeof value === 'string' ? {\n            value: value\n          } : value; // if no version is asked to set, it is assumed to update the same version of the document\n          // in order to avoid the increase of storage quota used\n\n          doc._rev = version ? version : doc._rev;\n          Object.assign(doc, data);\n\n          _this.db.put(doc).then(function () {\n            resolve(doc);\n          });\n        }, function (err) {\n          console.error('[SyncStorageManager.set] ', err);\n\n          if (err.name === 'not_found') {\n            var opts = {};\n\n            if (version) {\n              value._rev = version;\n              opts.new_edits = false;\n            }\n\n            _this.db.put(value, opts).then(function () {\n              resolve(value);\n            }, function (err) {\n              reject(err);\n            });\n          } else reject(err);\n        });\n      });\n    }\n    /**\r\n     * Get a entry value from the database for a given key.\r\n     * If no entry is found undefined is returned.\r\n     * @param {!string} key - key that was stored using {@link storageManager.set}\r\n     * @param {!any} value - value which should be found\r\n     * @returns {Promise} result - Promise that will be fulfilled with the value.\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key, value) {\n      var _this2 = this;\n\n      // TODO: add options for pagination for DOs with high number of child objects\n      //    if (!key) throw Error('[SyncStorageManager.get] key is mandatory param');\n      return new Promise(function (resolve, reject) {\n        log.info('[SyncStorageManager.get] key ', key, ' value ', value);\n\n        if (key) {\n          if (!value) {\n            _this2.db.get(key).then(function (doc) {\n              resolve(doc);\n            }, function (err) {\n              if (err.name === 'not_found') resolve(undefined);else reject(err);\n            });\n          } else _this2.db.get(key).then(function (doc) {\n            log.info('[SyncStorageManager.get] retrieved doc ', doc);\n            resolve(doc[value]);\n          }, function (err) {\n            if (err.name === 'not_found') resolve(undefined);else reject(err);\n          });\n        } else {\n          _this2.db.allDocs({\n            include_docs: true\n          }).then(function (docs) {\n            var result = [];\n            docs.rows.forEach(function (doc) {\n              result.push(doc.doc);\n            });\n            resolve(result);\n          }, function (err) {\n            if (err.name === 'not_found') resolve(undefined);else reject(err);\n          });\n        }\n      });\n    }\n    /**\r\n     * Delete a entry from the database for a given key or the full DB in case the key is not provided.\r\n     * @param {!string} key - key that was stored using {@link storageManager.set}\r\n     * @param {!any} value - the value which sould be used to find the storage resource\r\n     * @returns {Promise} result - Promise that will be just fulfilled with no values if something was deleted otherwise it is fullfilled with undefined.\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key, value) {\n      var _this3 = this;\n\n      //todo: if no key delete the db\n      //    if (!key) throw Error('[SyncStorageManager.get] key is mandatory param');\n      return new Promise(function (resolve, reject) {\n        log.info('[SyncStorageManager.delete] key ', key, ' value ', value);\n\n        if (key) {\n          _this3.db.get(key).then(function (doc) {\n            if (!value) {\n              _this3.db.remove(doc).then(function () {\n                resolve();\n              }, resolve(undefined));\n            } else {\n              delete doc[value];\n              resolve(_this3.db.put(doc));\n            }\n          }, function (err) {\n            if (err.name === 'not_found') resolve(undefined);else reject(err);\n          });\n        } else {\n          var db = new pouchdb__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](_this3._remoteStorage);\n          db.destroy().then(function () {\n            return resolve();\n          }, function (err) {\n            return reject(err);\n          });\n        }\n      });\n    }\n    /**\r\n     * Get the version from the database for a given key.\r\n     * If no entry is found undefined is returned.\r\n     * @param {!string} key - key that was stored using {@link storageManager.set}\r\n     * @param {any} value - the value which sould be used to find the storage resource\r\n     * @param {!string} table - table which should be looking for\r\n     * @returns {Promise} result - Promise that will be fulfilled with the version. If not found it is fullfilled with undefined\r\n     * @memberof StorageManager\r\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function getVersion(key) {\n      var _this4 = this;\n\n      if (!key) throw Error('[SyncStorageManager.get] key is mandatory param');\n      return new Promise(function (resolve, reject) {\n        log.info('[SyncStorageManager.getVersion] for key ', key);\n\n        _this4.db.get(key).then(function (doc) {\n          resolve(doc._rev);\n        }, function (err) {\n          if (err.name === 'not_found') resolve(undefined);else reject(err);\n        });\n      });\n    }\n  }]);\n\n  return SyncStorageManager;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (SyncStorageManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar ReThinkCtx =\n/*#__PURE__*/\nfunction () {\n  function ReThinkCtx() {\n    _classCallCheck(this, ReThinkCtx);\n\n    this.defaultBehaviour = true;\n    this.groups = {};\n  }\n\n  _createClass(ReThinkCtx, [{\n    key: "scheme",\n    get: function get() {\n      return this._scheme;\n    },\n    set: function set(params) {\n      var from = params.message.from;\n\n      if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[/* isDataObjectURL */ "s"])(from)) {\n        this._scheme = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[/* divideURL */ "k"])(from).type;\n      } else {\n        this._scheme = undefined;\n      }\n    }\n  }, {\n    key: "date",\n    get: function get() {\n      return this._date;\n    },\n    set: function set(now) {\n      var date = new Date();\n      var day = String(date.getDate());\n\n      if (day.length === 1) {\n        day = \'0\' + day;\n      }\n\n      var month = String(date.getMonth() + 1);\n\n      if (month.length === 1) {\n        month = \'0\' + month;\n      }\n\n      this._date = day + \'/\' + month + \'/\' + date.getFullYear();\n    }\n  }, {\n    key: "domain",\n    get: function get() {\n      return this._domain;\n    },\n    set: function set(params) {\n      if (params.message.body.identity !== undefined) {\n        this._domain = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[/* divideEmail */ "j"])(params.message.body.identity.userProfile.username).domain;\n      }\n    }\n  }, {\n    key: "type",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(params) {\n      var message = params.message;\n\n      if (message.body.value !== undefined) {\n        this._type = message.body.value.resourceType;\n      }\n    }\n  }, {\n    key: "source",\n    get: function get() {\n      return this._source;\n    },\n    set: function set(params) {\n      if (params.message.body.identity !== undefined) {\n        this._source = params.message.body.identity.userProfile.username;\n      }\n    }\n  }, {\n    key: "time",\n    get: function get() {\n      return this._time;\n    },\n    set: function set(now) {\n      now = new Date();\n      var minutes = String(now.getMinutes());\n\n      if (minutes.length === 1) {\n        minutes = \'0\' + minutes;\n      }\n\n      this._time = parseInt(String(now.getHours()) + minutes);\n    }\n  }, {\n    key: "weekday",\n    get: function get() {\n      return this._weekday;\n    },\n    set: function set(now) {\n      this._weekday = String(new Date().getDay());\n    }\n  }]);\n\n  return ReThinkCtx;\n}();\n\n/* harmony default export */ __webpack_exports__["default"] = (ReThinkCtx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcG9saWN5L1JlVGhpbmtDdHguanM/Y2MzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2RpdmlkZUVtYWlsLCBkaXZpZGVVUkwsIGlzRGF0YU9iamVjdFVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuY2xhc3MgUmVUaGlua0N0eCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5kZWZhdWx0QmVoYXZpb3VyID0gdHJ1ZTtcclxuICAgIHRoaXMuZ3JvdXBzID0ge307XHJcbiAgfVxyXG5cclxuICBnZXQgc2NoZW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NjaGVtZTtcclxuICB9XHJcblxyXG4gIGdldCBkYXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGU7XHJcbiAgfVxyXG5cclxuICBnZXQgZG9tYWluKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpbjtcclxuICB9XHJcblxyXG4gIGdldCB0eXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgfVxyXG5cclxuICBnZXQgc291cmNlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZTtcclxuICB9XHJcblxyXG4gIGdldCB0aW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RpbWU7XHJcbiAgfVxyXG5cclxuICBnZXQgd2Vla2RheSgpIHtcclxuICAgIHJldHVybiB0aGlzLl93ZWVrZGF5O1xyXG4gIH1cclxuXHJcbiAgc2V0IHNjaGVtZShwYXJhbXMpIHtcclxuICAgIGxldCBmcm9tID0gcGFyYW1zLm1lc3NhZ2UuZnJvbTtcclxuICAgIGlmIChpc0RhdGFPYmplY3RVUkwoZnJvbSkpIHtcclxuICAgICAgdGhpcy5fc2NoZW1lID0gZGl2aWRlVVJMKGZyb20pLnR5cGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zY2hlbWUgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQgZGF0ZShub3cpIHtcclxuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgIGxldCBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpO1xyXG4gICAgaWYgKGRheS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgZGF5ID0gJzAnICsgZGF5O1xyXG4gICAgfVxyXG4gICAgbGV0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xyXG4gICAgaWYgKG1vbnRoLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBtb250aCA9ICcwJyArIG1vbnRoO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fZGF0ZSA9IGRheSArICcvJyArIG1vbnRoICsgJy8nICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gIH1cclxuXHJcbiAgc2V0IGRvbWFpbihwYXJhbXMpIHtcclxuICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5fZG9tYWluID0gZGl2aWRlRW1haWwocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VybmFtZSkuZG9tYWluO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IHR5cGUocGFyYW1zKSB7XHJcbiAgICBsZXQgbWVzc2FnZSA9IHBhcmFtcy5tZXNzYWdlO1xyXG4gICAgaWYgKG1lc3NhZ2UuYm9keS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuX3R5cGUgPSBtZXNzYWdlLmJvZHkudmFsdWUucmVzb3VyY2VUeXBlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IHNvdXJjZShwYXJhbXMpIHtcclxuICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5fc291cmNlID0gcGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VybmFtZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldCB0aW1lKG5vdykge1xyXG4gICAgbm93ID0gbmV3IERhdGUoKTtcclxuICAgIGxldCBtaW51dGVzID0gU3RyaW5nKG5vdy5nZXRNaW51dGVzKCkpO1xyXG4gICAgaWYgKG1pbnV0ZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIG1pbnV0ZXMgPSAnMCcgKyBtaW51dGVzO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fdGltZSA9IHBhcnNlSW50KFN0cmluZyhub3cuZ2V0SG91cnMoKSkgKyBtaW51dGVzKTtcclxuICB9XHJcblxyXG4gIHNldCB3ZWVrZGF5KG5vdykge1xyXG4gICAgdGhpcy5fd2Vla2RheSA9IFN0cmluZyhuZXcgRGF0ZSgpLmdldERheSgpKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZVRoaW5rQ3R4O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBMEJBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBL0JBO0FBQ0E7QUFDQTtBQStCQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBeENBO0FBQ0E7QUFDQTtBQXdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUExQ0E7QUFDQTtBQUNBO0FBMENBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUE3Q0E7QUFDQTtBQUNBO0FBNkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQS9DQTtBQUNBO0FBQ0E7QUErQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQXBEQTtBQUNBO0FBQ0E7QUFvREE7QUFDQTtBQUNBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/policy/ActionsService.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ActionsService =\n/*#__PURE__*/\nfunction () {\n  function ActionsService(context) {\n    _classCallCheck(this, ActionsService);\n\n    this.context = context;\n  }\n\n  _createClass(ActionsService, [{\n    key: \"enforcePolicies\",\n    value: function enforcePolicies(message, isIncomingMessage) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var policies = _this.context.getPolicies(message, isIncomingMessage);\n\n        if (policies !== undefined) {\n          if (policies.serviceProviderPolicy !== undefined) {\n            policies.serviceProviderPolicy.enforceActions(_this.context, message).then(function (messages) {\n              resolve(messages);\n            }, function (error) {\n              reject(error);\n            });\n          } else {\n            if (policies.userPolicy !== undefined) {\n              policies.userPolicy.enforceActions(_this.context, message).then(function (messages) {\n                resolve(messages);\n              }, function (error) {\n                reject(error);\n              });\n            } else {\n              resolve([message]);\n            }\n          }\n        } else {\n          resolve([message]);\n        }\n      });\n    }\n  }, {\n    key: \"forwardToID\",\n    value: function forwardToID(message, email) {\n      var _this = this;\n\n      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');\n      return new Promise(function (resolve, reject) {\n        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {\n          var splitTo = message.to.split('://');\n\n          if (splitTo[0] !== 'runtime') {\n            _this.context.runtimeRegistry.discoverHypertyPerUser(email).then(function (result) {\n              message.to = result.hypertyURL;\n              message.body.via = undefined;\n              resolve(message);\n\n              _this.context.runtimeRegistry._messageBus.postMessage(message);\n            }, function (error) {\n              reject(error);\n            });\n          } else {\n            resolve(message);\n          }\n        } else {\n          resolve(message);\n        }\n      });\n    }\n  }, {\n    key: \"forwardToHyperty\",\n    value: function forwardToHyperty(message, hypertyURL) {\n      var _this = this;\n\n      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');\n      return new Promise(function (resolve) {\n        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {\n          var splitTo = message.to.split('://');\n\n          if (splitTo[0] !== 'runtime') {\n            message.to = hypertyURL;\n            message.body.via = undefined;\n            resolve(message);\n\n            _this.context.runtimeRegistry._messageBus.postMessage(message);\n          } else {\n            resolve(message);\n          }\n        } else {\n          resolve(message);\n        }\n      });\n    }\n  }, {\n    key: \"sendAutomaticMessage\",\n    value: function sendAutomaticMessage(message, text) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var automaticMessage = {\n          from: message.to,\n          to: message.from,\n          body: {\n            value: text\n          },\n          type: message.type\n        };\n        resolve(message);\n\n        _this.context.runtimeRegistry._messageBus.postMessage(automaticMessage);\n      });\n    }\n  }]);\n\n  return ActionsService;\n}();\n\n/* harmony default export */ var policy_ActionsService = (ActionsService);\n// CONCATENATED MODULE: ./src/policy/Operators.js\nfunction Operators_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Operators_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Operators_createClass(Constructor, protoProps, staticProps) { if (protoProps) Operators_defineProperties(Constructor.prototype, protoProps); if (staticProps) Operators_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Operators =\n/*#__PURE__*/\nfunction () {\n  function Operators() {\n    Operators_classCallCheck(this, Operators);\n  }\n\n  Operators_createClass(Operators, [{\n    key: \"and\",\n    value: function and(params) {\n      return params[0] && params[1];\n    }\n  }, {\n    key: \"between\",\n    value: function between(params) {\n      var start = parseInt(params[0][0]);\n      var end = parseInt(params[0][1]);\n      var now = params[1];\n\n      if (end < start) {\n        now = now < start ? now += 2400 : now;\n        end += 2400;\n      }\n\n      return now > start && now < end;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(params) {\n      return String(params[0]) === '*' || String(params[0]) === String(params[1]);\n    }\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(params) {\n      return params[1] > params[0];\n    }\n  }, {\n    key: \"in\",\n    value: function _in(params) {\n      return params[0].indexOf(params[1]) > -1;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(params) {\n      return params[1] < params[0];\n    }\n  }, {\n    key: \"not\",\n    value: function not(params) {\n      return !params[0];\n    }\n  }, {\n    key: \"or\",\n    value: function or(params) {\n      return params[0] || params[1];\n    }\n  }]);\n\n  return Operators;\n}();\n\n/* harmony default export */ var policy_Operators = (Operators);\n// CONCATENATED MODULE: ./src/policy/PDP.js\nfunction PDP_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction PDP_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PDP_createClass(Constructor, protoProps, staticProps) { if (protoProps) PDP_defineProperties(Constructor.prototype, protoProps); if (staticProps) PDP_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\r\n* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of\r\n* policies. The resource to be verified is specified in the first word of the 'condition' field of\r\n* a Policy object. The implementation that verifies if the message is compliant with a policy is\r\n* specified in a hashtable to allow dynamic definition of the implementation, providing\r\n* extensibility to the Policy Engine functionalities.\r\n*/\n\nvar PDP_PDP =\n/*#__PURE__*/\nfunction () {\n  function PDP(context) {\n    PDP_classCallCheck(this, PDP);\n\n    this.context = context;\n    this.operators = new policy_Operators();\n  }\n\n  PDP_createClass(PDP, [{\n    key: \"evaluatePolicies\",\n    value: function evaluatePolicies(message, isIncomingMessage) {\n      var policies = this.context.getPolicies(message, isIncomingMessage);\n      var result = 'Not Applicable';\n\n      if (policies !== undefined) {\n        result = this.evaluatePolicy(message, policies.serviceProviderPolicy, isIncomingMessage);\n\n        if (result || result === 'Not Applicable') {\n          var userResult = this.evaluatePolicy(message, policies.userPolicy, isIncomingMessage);\n\n          if (userResult !== 'Not Applicable') {\n            result = userResult;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"evaluatePolicy\",\n    value: function evaluatePolicy(message, policy, isIncoming) {\n      var result = 'Not Applicable';\n\n      if (policy) {\n        result = policy.evaluateRules(this.context, message, isIncoming);\n      }\n\n      return result;\n    }\n  }]);\n\n  return PDP;\n}();\n\n/* harmony default export */ var policy_PDP = (PDP_PDP);\n// EXTERNAL MODULE: ./src/policy/combiningAlgorithms/AllowOverrides.js\nvar AllowOverrides = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./src/policy/combiningAlgorithms/BlockOverrides.js\nvar BlockOverrides = __webpack_require__(21);\n\n// EXTERNAL MODULE: ./src/policy/combiningAlgorithms/FirstApplicable.js\nvar FirstApplicable = __webpack_require__(22);\n\n// CONCATENATED MODULE: ./src/policy/conditions/Condition.js\nfunction Condition_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Condition_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Condition_createClass(Constructor, protoProps, staticProps) { if (protoProps) Condition_defineProperties(Constructor.prototype, protoProps); if (staticProps) Condition_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to represent a condition and evaluate its applicability.\r\n*/\n\nvar Condition_Condition =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * Creates a new Condition.\r\n  * @class\r\n  * @param  {string}  attribute\r\n  * @param  {string}  operator\r\n  * @param  {*}       params\r\n  */\n  function Condition(attribute, operator, params) {\n    Condition_classCallCheck(this, Condition);\n\n    this.attribute = attribute;\n    this.operator = operator;\n    this.params = params;\n    this.operators = new policy_Operators();\n  }\n  /**\r\n  * Verifies if the condition is applicable to the message. First, the system value that corresponds to the attribute is retrieved; then, that value is compared with the parameter specified in the condition by executing the operator implementation. If the operator is 'in' and the name of a group is given, then the array holding the members of the group is retrieved before the comparison.\r\n  * @param  {Object}    context   environment where the Policy Engine is being used\r\n  * @param  {Object}    message\r\n  */\n\n\n  Condition_createClass(Condition, [{\n    key: \"isApplicable\",\n    value: function isApplicable(context, message) {\n      context[this.attribute] = {\n        message: message\n      };\n      var value = context[this.attribute];\n      var tempParam;\n\n      if (this.operator === 'in') {\n        if (!Array.isArray(this.params)) {\n          tempParam = context.getGroup(this.params, message.to);\n          return this.operators[this.operator]([tempParam, value]);\n        }\n      }\n\n      return this.operators[this.operator]([this.params, value]);\n    }\n  }]);\n\n  return Condition;\n}();\n\n/* harmony default export */ var conditions_Condition = (Condition_Condition);\n// CONCATENATED MODULE: ./src/policy/conditions/SubscriptionCondition.js\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction SubscriptionCondition_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SubscriptionCondition_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SubscriptionCondition_createClass(Constructor, protoProps, staticProps) { if (protoProps) SubscriptionCondition_defineProperties(Constructor.prototype, protoProps); if (staticProps) SubscriptionCondition_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\r\n* @classdesc Class to represent a subscription condition and evaluate its applicability.\r\n*/\n\nvar SubscriptionCondition =\n/*#__PURE__*/\nfunction (_Condition) {\n  _inherits(SubscriptionCondition, _Condition);\n\n  /**\r\n  * Creates a new SubscriptionCondition.\r\n  * @class\r\n  * @param  {string}  attribute\r\n  * @param  {string}  operator\r\n  * @param  {*}       params\r\n  */\n  function SubscriptionCondition(attribute, operator, params) {\n    SubscriptionCondition_classCallCheck(this, SubscriptionCondition);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SubscriptionCondition).call(this, attribute, operator, params));\n  }\n  /**\r\n  * Verifies if the subscription condition is applicable to the message. First, verifies if the message is of the subscription type; second, verifies if the message is from a remote runtime to guarantee that the subscription is being validated in the destination runtime; third, verifies if the subscription preference is met.\r\n  * @param  {Object}    context   environment where the Policy Engine is being used\r\n  * @param  {Object}    message\r\n  */\n\n\n  SubscriptionCondition_createClass(SubscriptionCondition, [{\n    key: \"isApplicable\",\n    value: function isApplicable(context, message) {\n      var isSubscription = message.type === 'subscribe';\n      var isFromRemoteSM = context.isFromRemoteSM(message.from);\n\n      if (isSubscription & isFromRemoteSM) {\n        return _get(_getPrototypeOf(SubscriptionCondition.prototype), \"isApplicable\", this).call(this, context, message);\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return SubscriptionCondition;\n}(conditions_Condition);\n\n/* harmony default export */ var conditions_SubscriptionCondition = (SubscriptionCondition);\n// CONCATENATED MODULE: ./src/policy/conditions/AdvancedCondition.js\nfunction AdvancedCondition_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction AdvancedCondition_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AdvancedCondition_createClass(Constructor, protoProps, staticProps) { if (protoProps) AdvancedCondition_defineProperties(Constructor.prototype, protoProps); if (staticProps) AdvancedCondition_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\nvar AdvancedCondition_AdvancedCondition =\n/*#__PURE__*/\nfunction () {\n  function AdvancedCondition(condition) {\n    AdvancedCondition_classCallCheck(this, AdvancedCondition);\n\n    this.operators = new policy_Operators();\n\n    if (condition.operators !== undefined) {\n      condition = condition.condition;\n    }\n\n    condition = this.buildCondition(condition);\n    this.condition = condition;\n  }\n\n  AdvancedCondition_createClass(AdvancedCondition, [{\n    key: \"buildCondition\",\n    value: function buildCondition(condition) {\n      if (Array.isArray(condition[1])) {\n        condition[1] = this.buildCondition(condition[1]);\n      } else {\n        if (condition[1].attribute === 'subscription') {\n          condition[1] = new conditions_SubscriptionCondition(condition[1].attribute, condition[1].operator, condition[1].params);\n        } else {\n          condition[1] = new conditions_Condition(condition[1].attribute, condition[1].operator, condition[1].params);\n        }\n      }\n\n      if (condition[2] !== undefined) {\n        if (Array.isArray(condition[2])) {\n          condition[2] = this.buildCondition(condition[2]);\n        } else {\n          if (condition[2].attribute === 'subscription') {\n            condition[2] = new conditions_SubscriptionCondition(condition[2].attribute, condition[2].operator, condition[2].params);\n          } else {\n            condition[2] = new conditions_Condition(condition[2].attribute, condition[2].operator, condition[2].params);\n          }\n        }\n      }\n\n      return condition;\n    }\n  }, {\n    key: \"isApplicable\",\n    value: function isApplicable(context, message, scope, target, operator, left, right) {\n      if (!operator) {\n        operator = this.condition[0];\n        left = this.condition[1];\n        right = this.condition[2];\n      }\n\n      while (!(left instanceof conditions_Condition) & !(left instanceof conditions_SubscriptionCondition) & typeof left !== 'boolean') {\n        left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);\n      }\n\n      if (right !== undefined) {\n        while (!(right instanceof conditions_Condition) & !(right instanceof conditions_SubscriptionCondition) & typeof right !== 'boolean') {\n          right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);\n        }\n      }\n\n      var resultLeft = typeof left === 'boolean' ? left : left.isApplicable(context, message, scope, target);\n      var resultRight;\n\n      if (right !== undefined) {\n        resultRight = typeof right === 'boolean' ? right : right.isApplicable(context, message, scope, target);\n      }\n\n      return this.operators[operator]([resultLeft, resultRight]);\n    }\n  }]);\n\n  return AdvancedCondition;\n}();\n\n/* harmony default export */ var conditions_AdvancedCondition = (AdvancedCondition_AdvancedCondition);\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/policy/Rule.js\nfunction Rule_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Rule_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Rule_createClass(Constructor, protoProps, staticProps) { if (protoProps) Rule_defineProperties(Constructor.prototype, protoProps); if (staticProps) Rule_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar Rule_Rule =\n/*#__PURE__*/\nfunction () {\n  function Rule(decision, condition, scope, target, priority) {\n    Rule_classCallCheck(this, Rule);\n\n    this.decision = decision;\n    this.setCondition(condition);\n    this.priority = priority;\n    this.scope = scope;\n    this.target = target;\n  }\n\n  Rule_createClass(Rule, [{\n    key: \"setCondition\",\n    value: function setCondition(condition) {\n      if (!(condition instanceof conditions_Condition || condition instanceof conditions_AdvancedCondition || condition instanceof conditions_AdvancedCondition)) {\n        var attribute = condition.attribute;\n\n        switch (attribute) {\n          case 'subscription':\n            this.condition = new conditions_AdvancedCondition(condition.attribute, condition.operator, condition.params);\n            break;\n\n          case undefined:\n            this.condition = new conditions_AdvancedCondition(condition);\n            break;\n\n          default:\n            this.condition = new conditions_Condition(condition.attribute, condition.operator, condition.params);\n        }\n      } else {\n        this.condition = condition;\n      }\n    }\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(context, message, isIncoming) {\n      var field = isIncoming ? message.to : message.from;\n      var hypertyName;\n\n      switch (this.scope) {\n        case 'global':\n          break;\n\n        case 'hyperty':\n          if (Object(utils[\"s\" /* isDataObjectURL */])(field)) {\n            var reporter = context.runtimeRegistry.getReporterURLSynchonous(Object(utils[\"B\" /* removePathFromURL */])(field));\n\n            if (reporter !== undefined) {\n              hypertyName = context.runtimeRegistry.getHypertyName(reporter);\n            }\n          } else {\n            if (field.split('://')[0] === 'hyperty') {\n              hypertyName = context.runtimeRegistry.getHypertyName(Object(utils[\"B\" /* removePathFromURL */])(field));\n            }\n          }\n\n          if (hypertyName === this.target) {\n            break;\n          }\n\n          return 'Not Applicable';\n\n        case 'identity':\n          var owner;\n\n          if (Object(utils[\"s\" /* isDataObjectURL */])(field)) {\n            var _reporter = context.runtimeRegistry.getReporterURLSynchonous(Object(utils[\"B\" /* removePathFromURL */])(field));\n\n            owner = context.runtimeRegistry.getHypertyOwner(_reporter);\n          } else {\n            if (field.split('://')[0] === 'hyperty') {\n              owner = context.runtimeRegistry.getHypertyOwner(Object(utils[\"B\" /* removePathFromURL */])(field));\n            }\n          }\n\n          if (owner !== undefined) {\n            owner = Object(utils[\"p\" /* getUserEmailFromURL */])(owner);\n          }\n\n          if (owner === this.target) {\n            break;\n          }\n\n          return 'Not Applicable';\n      }\n\n      if (this.condition.isApplicable(context, message, this.scope, this.target)) {\n        return this.decision;\n      } else {\n        return 'Not Applicable';\n      }\n    }\n  }]);\n\n  return Rule;\n}();\n\n/* harmony default export */ var policy_Rule = (Rule_Rule);\n// CONCATENATED MODULE: ./src/policy/Policy.js\nfunction Policy_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Policy_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Policy_createClass(Constructor, protoProps, staticProps) { if (protoProps) Policy_defineProperties(Constructor.prototype, protoProps); if (staticProps) Policy_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar Policy_Policy =\n/*#__PURE__*/\nfunction () {\n  function Policy(key, rules, actions, combiningAlgorithm) {\n    Policy_classCallCheck(this, Policy);\n\n    if (!key) throw new Error('key is not defined');\n    if (!actions) throw new Error('actions are not defined');\n    this.actions = actions;\n    this.key = key;\n\n    this._setRules(rules);\n\n    this._setCombiningAlgorithm(combiningAlgorithm);\n  }\n\n  Policy_createClass(Policy, [{\n    key: \"addAction\",\n    value: function addAction(method, param) {\n      this.actions.push({\n        method: method,\n        param: param\n      });\n    }\n  }, {\n    key: \"createRule\",\n    value: function createRule(decision, condition, scope, target, priority) {\n      if (priority === undefined) {\n        priority = this.getLastPriority() + 1;\n      }\n\n      var rule = new policy_Rule(decision, condition, scope, target, priority);\n      this.rules.push(rule);\n    }\n  }, {\n    key: \"deleteRule\",\n    value: function deleteRule(rule) {\n      var indexToRemove = this.rules.indexOf(rule);\n      this.rules.splice(indexToRemove, 1);\n    }\n  }, {\n    key: \"enforceActions\",\n    value: function enforceActions(context, message) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var results = [];\n\n        if (_this.actions.length !== 0) {\n          for (var i in _this.actions) {\n            var result = context.pep.actionsService[_this.actions[i].method](message, _this.actions[i].param);\n\n            results.push(result);\n          }\n\n          Promise.all(results).then(function (messages) {\n            resolve(messages);\n          }, function (error) {\n            reject(error);\n          });\n        } else {\n          resolve([message]);\n        }\n      });\n    }\n  }, {\n    key: \"evaluateRules\",\n    value: function evaluateRules(context, message, isIncoming) {\n      var results = [];\n\n      for (var i in this.rules) {\n        results.push(this.rules[i].evaluate(context, message, isIncoming));\n      }\n\n      return this.combiningAlgorithm.combine(results);\n    }\n  }, {\n    key: \"getLastPriority\",\n    value: function getLastPriority() {\n      var priorities = [];\n\n      if (this.rules.length !== 0) {\n        for (var i in this.rules) {\n          priorities.push(this.rules[i].priority);\n        }\n\n        return Math.max.apply(Math, priorities);\n      } else {\n        return -1;\n      }\n    }\n  }, {\n    key: \"getRuleByPriority\",\n    value: function getRuleByPriority(priority) {\n      for (var i in this.rules) {\n        if (String(this.rules[i].priority) === String(priority)) {\n          return this.rules[i];\n        }\n      }\n\n      throw Error('Rule with priority ' + priority + ' does not exist!');\n    }\n  }, {\n    key: \"_setCombiningAlgorithm\",\n    value: function _setCombiningAlgorithm(combiningAlgorithm) {\n      if (!combiningAlgorithm) {\n        combiningAlgorithm = 'blockOverrides';\n      }\n\n      switch (combiningAlgorithm) {\n        case 'blockOverrides':\n          this.combiningAlgorithm = new BlockOverrides[\"a\" /* default */]();\n          break;\n\n        case 'allowOverrides':\n          this.combiningAlgorithm = new AllowOverrides[\"a\" /* default */]();\n          break;\n\n        case 'firstApplicable':\n          this.combiningAlgorithm = new FirstApplicable[\"a\" /* default */]();\n          break;\n\n        default:\n          throw Error('Unknown algorithm: ' + combiningAlgorithm);\n      }\n    }\n  }, {\n    key: \"_setRules\",\n    value: function _setRules(rules) {\n      this.rules = [];\n\n      for (var i in rules) {\n        var rule = rules[i];\n\n        if (rule.priority === undefined) {\n          rule.priority = this.getLastPriority() + 1;\n        }\n\n        if (!(rule instanceof policy_Rule)) {\n          rule = new policy_Rule(rule.decision, rule.condition, rule.scope, rule.target, rule.priority);\n        }\n\n        this.rules.push(rule);\n      }\n    }\n  }, {\n    key: \"sortRules\",\n    value: function sortRules() {\n      return this.rules.sort(function (a, b) {\n        var x = a.priority;\n        var y = b.priority;\n        return x < y ? -1 : x > y ? 1 : 0;\n      });\n    }\n  }]);\n\n  return Policy;\n}();\n\n/* harmony default export */ var policy_Policy = (Policy_Policy);\n// CONCATENATED MODULE: ./src/policy/PEP.js\nfunction PEP_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction PEP_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PEP_createClass(Constructor, protoProps, staticProps) { if (protoProps) PEP_defineProperties(Constructor.prototype, protoProps); if (staticProps) PEP_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar log = loglevel[\"getLogger\"]('PEP');\n\n\n\n\n\nvar PEP_PEP =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * Creates a Policy Enforcement Point (PEP) instance\r\n  * @param    {Object}    context\r\n  */\n  function PEP(context) {\n    PEP_classCallCheck(this, PEP);\n\n    var _this = this;\n\n    _this.pdp = new policy_PDP(context);\n    _this.actionsService = new policy_ActionsService(context);\n    _this.context = context;\n    context.pep = _this; //TODO should be added a trigger to verify when the loadConfigurations is successfully completed\n\n    context.loadConfigurations();\n  }\n  /**\r\n  * return the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\n\n\n  PEP_createClass(PEP, [{\n    key: \"addGUIListeners\",\n    value: function addGUIListeners() {\n      var _this = this;\n\n      _this.context.messageBus.addListener(_this.context.pepURL, function (msg) {\n        var funcName = msg.body.method;\n        var returnedValue;\n\n        if (funcName === 'addToGroup') {\n          var groupName = msg.body.params.groupName;\n          var userEmail = msg.body.params.userEmail;\n          returnedValue = _this.context.addToGroup(groupName, userEmail);\n        } else if (funcName === 'createGroup') {\n          var _groupName = msg.body.params.groupName;\n          returnedValue = _this.context.createGroup(_groupName);\n        } else if (funcName === 'addPolicy') {\n          var source = msg.body.params.source;\n          var key = msg.body.params.key;\n          var policy = msg.body.params.policy;\n          var combiningAlgorithm = msg.body.params.combiningAlgorithm;\n          returnedValue = _this.addPolicy(source, key, policy, combiningAlgorithm);\n        } else if (funcName === 'deleteGroup') {\n          var _groupName2 = msg.body.params.groupName;\n          returnedValue = _this.context.deleteGroup(_groupName2);\n        } else if (funcName === 'removePolicy') {\n          var _source = msg.body.params.source;\n          var _key = msg.body.params.key;\n          returnedValue = _this.removePolicy(_source, _key);\n        } else if (funcName === 'savePolicies') {\n          var _source2 = msg.body.params.source;\n          returnedValue = _this.context.savePolicies(_source2);\n        } else if (funcName === 'userPolicies') {\n          returnedValue = _this.context.userPolicies;\n        } else if (funcName === 'activeUserPolicy') {\n          var userPolicy = msg.body.params.userPolicy;\n\n          if (userPolicy) {\n            _this.context.activeUserPolicy = userPolicy;\n          }\n\n          returnedValue = _this.context.activeUserPolicy;\n        } else if (funcName === 'userPolicy') {\n          var _key2 = msg.body.params.key;\n          returnedValue = _this.context.userPolicies[_key2];\n        } else if (funcName === 'saveActivePolicy') {\n          returnedValue = _this.context.saveActivePolicy();\n        } else if (funcName === 'getMyEmails') {\n          returnedValue = _this.context.getMyEmails();\n        } else if (funcName === 'getMyHyperties') {\n          returnedValue = _this.context.getMyHyperties();\n        } else if (funcName === 'groups') {\n          returnedValue = _this.context.groups;\n        } else if (funcName === 'getGroupsNames') {\n          returnedValue = _this.context.getGroupsNames();\n        }\n\n        if (funcName === 'removeFromGroup') {\n          var _groupName3 = msg.body.params.groupName;\n          var _userEmail = msg.body.params.userEmail;\n          returnedValue = _this.context.removeFromGroup(_groupName3, _userEmail);\n        }\n\n        var value = {\n          type: 'execute',\n          value: returnedValue,\n          code: 200\n        };\n        var replyMsg = {\n          id: msg.id,\n          type: 'response',\n          to: msg.from,\n          from: msg.to,\n          body: value\n        };\n\n        _this.context.messageBus.postMessage(replyMsg);\n      });\n    }\n    /**\r\n    * Adds a policy to the Policy Enforcement Point (PEP). The policy can be created by the service\r\n    * provider or by the user.\r\n    * @param    {String}    source\r\n    * @param    {String}    key\r\n    * @param    {Object}    policy\r\n    */\n\n  }, {\n    key: \"addPolicy\",\n    value: function addPolicy(source, key, policy, combiningAlgorithm) {\n      if (!source) throw new Error('source is not defined');\n      if (!key) throw new Error('key is not defined');\n\n      if (policy === undefined) {\n        policy = new policy_Policy(key, [], [], combiningAlgorithm);\n      } else {\n        if (!(policy instanceof policy_Policy)) {\n          policy = new policy_Policy(policy.key, policy.rules, policy.actions, policy.combiningAlgorithm);\n        }\n      }\n\n      switch (source) {\n        case 'SERVICE_PROVIDER':\n          this.context.savePolicies(source, policy, key);\n          break;\n\n        case 'USER':\n          this.context.userPolicies[key] = policy;\n          this.context.savePolicies(source);\n          break;\n\n        default:\n          throw Error('Unknown policy source: ' + source);\n      }\n    }\n  }, {\n    key: \"authorise\",\n    value: function authorise(message, isIncoming) {\n      var _this2 = this;\n\n      // log.log('[Policy.PEP Authorise] ', message);\n      // log.log(message);\n      if (!message) throw new Error('message is not defined');\n      if (!message.from) throw new Error('message.from is not defined');\n      if (!message.to) throw new Error('message.to is not defined');\n      if (!message.type) throw new Error('message.type is not defined');\n      message.body = message.body || {};\n      return new Promise(function (resolve, reject) {\n        message.body = message.body || {};\n        var _this = _this2;\n\n        var result = _this.pdp.evaluatePolicies(message, isIncoming);\n\n        if (result === 'Not Applicable') {\n          result = _this.context.defaultBehaviour;\n          message.body.auth = false;\n        }\n\n        _this.actionsService.enforcePolicies(message, isIncoming).then(function (messages) {\n          for (var i in messages) {\n            message = messages[i];\n\n            if (result) {\n              message.body.auth = message.body.auth === undefined ? true : message.body.auth;\n              resolve(message);\n            } else {\n              var errorMessage = {\n                body: {\n                  code: 403,\n                  description: 'Blocked by policy'\n                },\n                from: message.to,\n                to: message.from,\n                type: 'response'\n              };\n              reject(errorMessage);\n            }\n          }\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"authoriseSync\",\n    value: function authoriseSync(message) {\n      var result;\n      message.body = message.body || {};\n      result = this.pdp.evaluatePolicies(message, true);\n\n      if (result === 'Not Applicable') {\n        result = this.context.defaultBehaviour;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"removePolicy\",\n    value: function removePolicy(source, key) {\n      if (!source) throw new Error('source is not defined');\n      if (source !== '*' && !key) throw new Error('key is not defined');\n\n      switch (source) {\n        case '*':\n          this.context.serviceProviderPolicy = {};\n          this.context.userPolicies = {};\n          this.context.activeUserPolicy = undefined;\n          this.context.savePolicies('USER');\n          this.context.savePolicies('SERVICE_PROVIDER');\n          this.context.saveActivePolicy();\n          break;\n\n        case 'SERVICE_PROVIDER':\n          delete this.context.serviceProviderPolicy[key];\n          this.context.savePolicies();\n          break;\n\n        case 'USER':\n          delete this.context.userPolicies[key];\n\n          if (key === this.context.activeUserPolicy) {\n            this.context.activeUserPolicy = undefined;\n            this.context.saveActivePolicy();\n          }\n\n          this.context.savePolicies('USER');\n          break;\n\n        default:\n          throw Error('Unknown policy source: ' + source);\n      }\n    }\n  }, {\n    key: \"messageBus\",\n    get: function get() {\n      var _this = this;\n\n      return _this.context.messageBus;\n    }\n    /**\r\n    * Set the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n\n      _this.context.messageBus = messageBus;\n\n      _this.addGUIListeners();\n    }\n  }]);\n\n  return PEP;\n}();\n\n/* harmony default export */ var policy_PEP = __webpack_exports__[\"default\"] = (PEP_PEP);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n")},function(module,exports,__webpack_require__){eval("var rng = __webpack_require__(27);\nvar bytesToUuid = __webpack_require__(28);\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvdXVpZC92MS5qcz9jNDM3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG52YXIgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9icm9vZmEvbm9kZS11dWlkIGZvciBBUEkgZGV0YWlsc1xuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IFtdO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxO1xuXG4gIC8vIG5vZGUgYW5kIGNsb2Nrc2VxIG5lZWQgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gcmFuZG9tIHZhbHVlcyBpZiB0aGV5J3JlIG5vdFxuICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnRcbiAgLy8gc3lzdGVtIGVudHJvcHkuICBTZWUgIzE4OVxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICB2YXIgc2VlZEJ5dGVzID0gcm5nKCk7XG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtcbiAgICAgICAgc2VlZEJ5dGVzWzBdIHwgMHgwMSxcbiAgICAgICAgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1cbiAgICAgIF07XG4gICAgfVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7XG5cbiAgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuICB2YXIgZHQgPSAobXNlY3MgLSBfbGFzdE1TZWNzKSArIChuc2VjcyAtIF9sYXN0TlNlY3MpLzEwMDAwO1xuXG4gIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfVxuXG4gIC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH1cblxuICAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXVpZC52MSgpOiBDYW5cXCd0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlYycpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxO1xuXG4gIC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDtcblxuICAvLyBgdGltZV9sb3dgXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfbWlkYFxuICB2YXIgdG1oID0gKG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCkgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjtcblxuICAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwO1xuXG4gIC8vIGBjbG9ja19zZXFfbG93YFxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7XG5cbiAgLy8gYG5vZGVgXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiA/IGJ1ZiA6IGJ5dGVzVG9VdWlkKGIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHYxO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///34\n")},function(module,exports,__webpack_require__){eval("var rng = __webpack_require__(27);\nvar bytesToUuid = __webpack_require__(28);\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvdXVpZC92NC5qcz9jNjRlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, setImmediate) {(function (global, factory) {\n    true ? module.exports = factory() :\n   undefined;\n}(this, (function () { \'use strict\';\n\n/*\r\n* Dexie.js - a minimalistic wrapper for IndexedDB\r\n* ===============================================\r\n*\r\n* By David Fahlander, david.fahlander@gmail.com\r\n*\r\n* Version 1.5.1, Tue Nov 01 2016\r\n* www.dexie.com\r\n* Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n*/\nvar keys = Object.keys;\nvar isArray = Array.isArray;\nvar _global = typeof self !== \'undefined\' ? self : typeof window !== \'undefined\' ? window : global;\n\nfunction extend(obj, extension) {\n    if (typeof extension !== \'object\') return obj;\n    keys(extension).forEach(function (key) {\n        obj[key] = extension[key];\n    });\n    return obj;\n}\n\nvar getProto = Object.getPrototypeOf;\nvar _hasOwn = {}.hasOwnProperty;\nfunction hasOwn(obj, prop) {\n    return _hasOwn.call(obj, prop);\n}\n\nfunction props(proto, extension) {\n    if (typeof extension === \'function\') extension = extension(getProto(proto));\n    keys(extension).forEach(function (key) {\n        setProp(proto, key, extension[key]);\n    });\n}\n\nfunction setProp(obj, prop, functionOrGetSet, options) {\n    Object.defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === \'function\' ? { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } : { value: functionOrGetSet, configurable: true, writable: true }, options));\n}\n\nfunction derive(Child) {\n    return {\n        from: function (Parent) {\n            Child.prototype = Object.create(Parent.prototype);\n            setProp(Child.prototype, "constructor", Child);\n            return {\n                extend: props.bind(null, Child.prototype)\n            };\n        }\n    };\n}\n\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\nfunction getPropertyDescriptor(obj, prop) {\n    var pd = getOwnPropertyDescriptor(obj, prop),\n        proto;\n    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);\n}\n\nvar _slice = [].slice;\nfunction slice(args, start, end) {\n    return _slice.call(args, start, end);\n}\n\nfunction override(origFunc, overridedFactory) {\n    return overridedFactory(origFunc);\n}\n\nfunction doFakeAutoComplete(fn) {\n    var to = setTimeout(fn, 1000);\n    clearTimeout(to);\n}\n\nfunction assert(b) {\n    if (!b) throw new Error("Assertion Failed");\n}\n\nfunction asap(fn) {\n    if (_global.setImmediate) setImmediate(fn);else setTimeout(fn, 0);\n}\n\n\n\n/** Generate an object (hash map) based on given array.\r\n * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to\r\n *        instert on the resulting object for each item in the array. If this function returns a falsy value, the\r\n *        current item wont affect the resulting object.\r\n */\nfunction arrayToObject(array, extractor) {\n    return array.reduce(function (result, item, i) {\n        var nameAndValue = extractor(item, i);\n        if (nameAndValue) result[nameAndValue[0]] = nameAndValue[1];\n        return result;\n    }, {});\n}\n\nfunction trycatcher(fn, reject) {\n    return function () {\n        try {\n            fn.apply(this, arguments);\n        } catch (e) {\n            reject(e);\n        }\n    };\n}\n\nfunction tryCatch(fn, onerror, args) {\n    try {\n        fn.apply(null, args);\n    } catch (ex) {\n        onerror && onerror(ex);\n    }\n}\n\nfunction getByKeyPath(obj, keyPath) {\n    // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path\n    if (hasOwn(obj, keyPath)) return obj[keyPath]; // This line is moved from last to first for optimization purpose.\n    if (!keyPath) return obj;\n    if (typeof keyPath !== \'string\') {\n        var rv = [];\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            var val = getByKeyPath(obj, keyPath[i]);\n            rv.push(val);\n        }\n        return rv;\n    }\n    var period = keyPath.indexOf(\'.\');\n    if (period !== -1) {\n        var innerObj = obj[keyPath.substr(0, period)];\n        return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));\n    }\n    return undefined;\n}\n\nfunction setByKeyPath(obj, keyPath, value) {\n    if (!obj || keyPath === undefined) return;\n    if (\'isFrozen\' in Object && Object.isFrozen(obj)) return;\n    if (typeof keyPath !== \'string\' && \'length\' in keyPath) {\n        assert(typeof value !== \'string\' && \'length\' in value);\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            setByKeyPath(obj, keyPath[i], value[i]);\n        }\n    } else {\n        var period = keyPath.indexOf(\'.\');\n        if (period !== -1) {\n            var currentKeyPath = keyPath.substr(0, period);\n            var remainingKeyPath = keyPath.substr(period + 1);\n            if (remainingKeyPath === "") {\n                if (value === undefined) delete obj[currentKeyPath];else obj[currentKeyPath] = value;\n            } else {\n                var innerObj = obj[currentKeyPath];\n                if (!innerObj) innerObj = obj[currentKeyPath] = {};\n                setByKeyPath(innerObj, remainingKeyPath, value);\n            }\n        } else {\n            if (value === undefined) delete obj[keyPath];else obj[keyPath] = value;\n        }\n    }\n}\n\nfunction delByKeyPath(obj, keyPath) {\n    if (typeof keyPath === \'string\') setByKeyPath(obj, keyPath, undefined);else if (\'length\' in keyPath) [].map.call(keyPath, function (kp) {\n        setByKeyPath(obj, kp, undefined);\n    });\n}\n\nfunction shallowClone(obj) {\n    var rv = {};\n    for (var m in obj) {\n        if (hasOwn(obj, m)) rv[m] = obj[m];\n    }\n    return rv;\n}\n\nfunction deepClone(any) {\n    if (!any || typeof any !== \'object\') return any;\n    var rv;\n    if (isArray(any)) {\n        rv = [];\n        for (var i = 0, l = any.length; i < l; ++i) {\n            rv.push(deepClone(any[i]));\n        }\n    } else if (any instanceof Date) {\n        rv = new Date();\n        rv.setTime(any.getTime());\n    } else {\n        rv = any.constructor ? Object.create(any.constructor.prototype) : {};\n        for (var prop in any) {\n            if (hasOwn(any, prop)) {\n                rv[prop] = deepClone(any[prop]);\n            }\n        }\n    }\n    return rv;\n}\n\nfunction getObjectDiff(a, b, rv, prfx) {\n    // Compares objects a and b and produces a diff object.\n    rv = rv || {};\n    prfx = prfx || \'\';\n    keys(a).forEach(function (prop) {\n        if (!hasOwn(b, prop)) rv[prfx + prop] = undefined; // Property removed\n        else {\n                var ap = a[prop],\n                    bp = b[prop];\n                if (typeof ap === \'object\' && typeof bp === \'object\' && ap && bp && ap.constructor === bp.constructor)\n                    // Same type of object but its properties may have changed\n                    getObjectDiff(ap, bp, rv, prfx + prop + ".");else if (ap !== bp) rv[prfx + prop] = b[prop]; // Primitive value changed\n            }\n    });\n    keys(b).forEach(function (prop) {\n        if (!hasOwn(a, prop)) {\n            rv[prfx + prop] = b[prop]; // Property added\n        }\n    });\n    return rv;\n}\n\n// If first argument is iterable or array-like, return it as an array\nvar iteratorSymbol = typeof Symbol !== \'undefined\' && Symbol.iterator;\nvar getIteratorOf = iteratorSymbol ? function (x) {\n    var i;\n    return x != null && (i = x[iteratorSymbol]) && i.apply(x);\n} : function () {\n    return null;\n};\n\nvar NO_CHAR_ARRAY = {};\n// Takes one or several arguments and returns an array based on the following criteras:\n// * If several arguments provided, return arguments converted to an array in a way that\n//   still allows javascript engine to optimize the code.\n// * If single argument is an array, return a clone of it.\n// * If this-pointer equals NO_CHAR_ARRAY, don\'t accept strings as valid iterables as a special\n//   case to the two bullets below.\n// * If single argument is an iterable, convert it to an array and return the resulting array.\n// * If single argument is array-like (has length of type number), convert it to an array.\nfunction getArrayOf(arrayLike) {\n    var i, a, x, it;\n    if (arguments.length === 1) {\n        if (isArray(arrayLike)) return arrayLike.slice();\n        if (this === NO_CHAR_ARRAY && typeof arrayLike === \'string\') return [arrayLike];\n        if (it = getIteratorOf(arrayLike)) {\n            a = [];\n            while (x = it.next(), !x.done) {\n                a.push(x.value);\n            }return a;\n        }\n        if (arrayLike == null) return [arrayLike];\n        i = arrayLike.length;\n        if (typeof i === \'number\') {\n            a = new Array(i);\n            while (i--) {\n                a[i] = arrayLike[i];\n            }return a;\n        }\n        return [arrayLike];\n    }\n    i = arguments.length;\n    a = new Array(i);\n    while (i--) {\n        a[i] = arguments[i];\n    }return a;\n}\n\nvar concat = [].concat;\nfunction flatten(a) {\n    return concat.apply([], a);\n}\n\nfunction nop() {}\nfunction mirror(val) {\n    return val;\n}\nfunction pureFunctionChain(f1, f2) {\n    // Enables chained events that takes ONE argument and returns it to the next function in chain.\n    // This pattern is used in the hook("reading") event.\n    if (f1 == null || f1 === mirror) return f2;\n    return function (val) {\n        return f2(f1(val));\n    };\n}\n\nfunction callBoth(on1, on2) {\n    return function () {\n        on1.apply(this, arguments);\n        on2.apply(this, arguments);\n    };\n}\n\nfunction hookCreatingChain(f1, f2) {\n    // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.\n    // This pattern is used in the hook("creating") event.\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res !== undefined) arguments[0] = res;\n        var onsuccess = this.onsuccess,\n            // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res2 !== undefined ? res2 : res;\n    };\n}\n\nfunction hookDeletingChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        f1.apply(this, arguments);\n        var onsuccess = this.onsuccess,\n            // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = this.onerror = null;\n        f2.apply(this, arguments);\n        if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n    };\n}\n\nfunction hookUpdatingChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function (modifications) {\n        var res = f1.apply(this, arguments);\n        extend(modifications, res); // If f1 returns new modifications, extend caller\'s modifications with the result before calling next in chain.\n        var onsuccess = this.onsuccess,\n            // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res === undefined ? res2 === undefined ? undefined : res2 : extend(res, res2);\n    };\n}\n\nfunction reverseStoppableEventChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        if (f2.apply(this, arguments) === false) return false;\n        return f1.apply(this, arguments);\n    };\n}\n\n\n\nfunction promisableChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === \'function\') {\n            var thiz = this,\n                i = arguments.length,\n                args = new Array(i);\n            while (i--) {\n                args[i] = arguments[i];\n            }return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\n// By default, debug will be true only if platform is a web platform and its page is served from localhost.\n// When debug = true, error\'s stacks will contain asyncronic long stacks.\nvar debug = typeof location !== \'undefined\' &&\n// By default, use debug mode if served from localhost.\n/^(http|https):\\/\\/(localhost|127\\.0\\.0\\.1)/.test(location.href);\n\nfunction setDebug(value, filter) {\n    debug = value;\n    libraryFilter = filter;\n}\n\nvar libraryFilter = function () {\n    return true;\n};\n\nvar NEEDS_THROW_FOR_STACK = !new Error("").stack;\n\nfunction getErrorWithStack() {\n    "use strict";\n\n    if (NEEDS_THROW_FOR_STACK) try {\n        // Doing something naughty in strict mode here to trigger a specific error\n        // that can be explicitely ignored in debugger\'s exception settings.\n        // If we\'d just throw new Error() here, IE\'s debugger\'s exception settings\n        // will just consider it as "exception thrown by javascript code" which is\n        // something you wouldn\'t want it to ignore.\n        getErrorWithStack.arguments;\n        throw new Error(); // Fallback if above line don\'t throw.\n    } catch (e) {\n        return e;\n    }\n    return new Error();\n}\n\nfunction prettyStack(exception, numIgnoredFrames) {\n    var stack = exception.stack;\n    if (!stack) return "";\n    numIgnoredFrames = numIgnoredFrames || 0;\n    if (stack.indexOf(exception.name) === 0) numIgnoredFrames += (exception.name + exception.message).split(\'\\n\').length;\n    return stack.split(\'\\n\').slice(numIgnoredFrames).filter(libraryFilter).map(function (frame) {\n        return "\\n" + frame;\n    }).join(\'\');\n}\n\nfunction deprecated(what, fn) {\n    return function () {\n        console.warn(what + " is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. " + prettyStack(getErrorWithStack(), 1));\n        return fn.apply(this, arguments);\n    };\n}\n\nvar dexieErrorNames = [\'Modify\', \'Bulk\', \'OpenFailed\', \'VersionChange\', \'Schema\', \'Upgrade\', \'InvalidTable\', \'MissingAPI\', \'NoSuchDatabase\', \'InvalidArgument\', \'SubTransaction\', \'Unsupported\', \'Internal\', \'DatabaseClosed\', \'IncompatiblePromise\'];\n\nvar idbDomErrorNames = [\'Unknown\', \'Constraint\', \'Data\', \'TransactionInactive\', \'ReadOnly\', \'Version\', \'NotFound\', \'InvalidState\', \'InvalidAccess\', \'Abort\', \'Timeout\', \'QuotaExceeded\', \'Syntax\', \'DataClone\'];\n\nvar errorList = dexieErrorNames.concat(idbDomErrorNames);\n\nvar defaultTexts = {\n    VersionChanged: "Database version changed by other database connection",\n    DatabaseClosed: "Database has been closed",\n    Abort: "Transaction aborted",\n    TransactionInactive: "Transaction has already completed or failed"\n};\n\n//\n// DexieError - base class of all out exceptions.\n//\nfunction DexieError(name, msg) {\n    // Reason we don\'t use ES6 classes is because:\n    // 1. It bloats transpiled code and increases size of minified code.\n    // 2. It doesn\'t give us much in this case.\n    // 3. It would require sub classes to call super(), which\n    //    is not needed when deriving from Error.\n    this._e = getErrorWithStack();\n    this.name = name;\n    this.message = msg;\n}\n\nderive(DexieError).from(Error).extend({\n    stack: {\n        get: function () {\n            return this._stack || (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));\n        }\n    },\n    toString: function () {\n        return this.name + ": " + this.message;\n    }\n});\n\nfunction getMultiErrorMessage(msg, failures) {\n    return msg + ". Errors: " + failures.map(function (f) {\n        return f.toString();\n    }).filter(function (v, i, s) {\n        return s.indexOf(v) === i;\n    }) // Only unique error strings\n    .join(\'\\n\');\n}\n\n//\n// ModifyError - thrown in WriteableCollection.modify()\n// Specific constructor because it contains members failures and failedKeys.\n//\nfunction ModifyError(msg, failures, successCount, failedKeys) {\n    this._e = getErrorWithStack();\n    this.failures = failures;\n    this.failedKeys = failedKeys;\n    this.successCount = successCount;\n}\nderive(ModifyError).from(DexieError);\n\nfunction BulkError(msg, failures) {\n    this._e = getErrorWithStack();\n    this.name = "BulkError";\n    this.failures = failures;\n    this.message = getMultiErrorMessage(msg, failures);\n}\nderive(BulkError).from(DexieError);\n\n//\n//\n// Dynamically generate error names and exception classes based\n// on the names in errorList.\n//\n//\n\n// Map of {ErrorName -> ErrorName + "Error"}\nvar errnames = errorList.reduce(function (obj, name) {\n    return obj[name] = name + "Error", obj;\n}, {});\n\n// Need an alias for DexieError because we\'re gonna create subclasses with the same name.\nvar BaseException = DexieError;\n// Map of {ErrorName -> exception constructor}\nvar exceptions = errorList.reduce(function (obj, name) {\n    // Let the name be "DexieError" because this name may\n    // be shown in call stack and when debugging. DexieError is\n    // the most true name because it derives from DexieError,\n    // and we cannot change Function.name programatically without\n    // dynamically create a Function object, which would be considered\n    // \'eval-evil\'.\n    var fullName = name + "Error";\n    function DexieError(msgOrInner, inner) {\n        this._e = getErrorWithStack();\n        this.name = fullName;\n        if (!msgOrInner) {\n            this.message = defaultTexts[name] || fullName;\n            this.inner = null;\n        } else if (typeof msgOrInner === \'string\') {\n            this.message = msgOrInner;\n            this.inner = inner || null;\n        } else if (typeof msgOrInner === \'object\') {\n            this.message = msgOrInner.name + \' \' + msgOrInner.message;\n            this.inner = msgOrInner;\n        }\n    }\n    derive(DexieError).from(BaseException);\n    obj[name] = DexieError;\n    return obj;\n}, {});\n\n// Use ECMASCRIPT standard exceptions where applicable:\nexceptions.Syntax = SyntaxError;\nexceptions.Type = TypeError;\nexceptions.Range = RangeError;\n\nvar exceptionMap = idbDomErrorNames.reduce(function (obj, name) {\n    obj[name + "Error"] = exceptions[name];\n    return obj;\n}, {});\n\nfunction mapError(domError, message) {\n    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name]) return domError;\n    var rv = new exceptionMap[domError.name](message || domError.message, domError);\n    if ("stack" in domError) {\n        // Derive stack from inner exception if it has a stack\n        setProp(rv, "stack", { get: function () {\n                return this.inner.stack;\n            } });\n    }\n    return rv;\n}\n\nvar fullNameExceptions = errorList.reduce(function (obj, name) {\n    if (["Syntax", "Type", "Range"].indexOf(name) === -1) obj[name + "Error"] = exceptions[name];\n    return obj;\n}, {});\n\nfullNameExceptions.ModifyError = ModifyError;\nfullNameExceptions.DexieError = DexieError;\nfullNameExceptions.BulkError = BulkError;\n\nfunction Events(ctx) {\n    var evs = {};\n    var rv = function (eventName, subscriber) {\n        if (subscriber) {\n            // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.\n            var i = arguments.length,\n                args = new Array(i - 1);\n            while (--i) {\n                args[i - 1] = arguments[i];\n            }evs[eventName].subscribe.apply(null, args);\n            return ctx;\n        } else if (typeof eventName === \'string\') {\n            // Return interface allowing to fire or unsubscribe from event\n            return evs[eventName];\n        }\n    };\n    rv.addEventType = add;\n\n    for (var i = 1, l = arguments.length; i < l; ++i) {\n        add(arguments[i]);\n    }\n\n    return rv;\n\n    function add(eventName, chainFunction, defaultFunction) {\n        if (typeof eventName === \'object\') return addConfiguredEvents(eventName);\n        if (!chainFunction) chainFunction = reverseStoppableEventChain;\n        if (!defaultFunction) defaultFunction = nop;\n\n        var context = {\n            subscribers: [],\n            fire: defaultFunction,\n            subscribe: function (cb) {\n                if (context.subscribers.indexOf(cb) === -1) {\n                    context.subscribers.push(cb);\n                    context.fire = chainFunction(context.fire, cb);\n                }\n            },\n            unsubscribe: function (cb) {\n                context.subscribers = context.subscribers.filter(function (fn) {\n                    return fn !== cb;\n                });\n                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);\n            }\n        };\n        evs[eventName] = rv[eventName] = context;\n        return context;\n    }\n\n    function addConfiguredEvents(cfg) {\n        // events(this, {reading: [functionChain, nop]});\n        keys(cfg).forEach(function (eventName) {\n            var args = cfg[eventName];\n            if (isArray(args)) {\n                add(eventName, cfg[eventName][0], cfg[eventName][1]);\n            } else if (args === \'asap\') {\n                // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack\n                // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.\n                var context = add(eventName, mirror, function fire() {\n                    // Optimazation-safe cloning of arguments into args.\n                    var i = arguments.length,\n                        args = new Array(i);\n                    while (i--) {\n                        args[i] = arguments[i];\n                    } // All each subscriber:\n                    context.subscribers.forEach(function (fn) {\n                        asap(function fireEvent() {\n                            fn.apply(null, args);\n                        });\n                    });\n                });\n            } else throw new exceptions.InvalidArgument("Invalid event config");\n        });\n    }\n}\n\n//\n// Promise Class for Dexie library\n//\n// I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by\n// https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.\n//\n// Modifications needed to be done to support indexedDB because it wont accept setTimeout()\n// (See discussion: https://github.com/promises-aplus/promises-spec/issues/45) .\n// This topic was also discussed in the following thread: https://github.com/promises-aplus/promises-spec/issues/45\n//\n// This implementation will not use setTimeout or setImmediate when it\'s not needed. The behavior is 100% Promise/A+ compliant since\n// the caller of new Promise() can be certain that the promise wont be triggered the lines after constructing the promise.\n//\n// In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another\n// tick. In Dexie v1.4.0, I\'ve rewritten the Promise class entirely. Just some fragments of promise-light is left. I use\n// another strategy now that simplifies everything a lot: to always execute callbacks in a new tick, but have an own microTick\n// engine that is used instead of setImmediate() or setTimeout().\n// Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.\n// Also with inspiration from bluebird, asyncronic stacks in debug mode.\n//\n// Specific non-standard features of this Promise class:\n// * Async static context support (Promise.PSD)\n// * Promise.follow() method built upon PSD, that allows user to track all promises created from current stack frame\n//   and below + all promises that those promises creates or awaits.\n// * Detect any unhandled promise in a PSD-scope (PSD.onunhandled). \n//\n// David Fahlander, https://github.com/dfahlander\n//\n\n// Just a pointer that only this module knows about.\n// Used in Promise constructor to emulate a private constructor.\nvar INTERNAL = {};\n\n// Async stacks (long stacks) must not grow infinitely.\nvar LONG_STACKS_CLIP_LIMIT = 100;\nvar MAX_LONG_STACKS = 20;\nvar stack_being_generated = false;\n\n/* The default "nextTick" function used only for the very first promise in a promise chain.\r\n   As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks\r\n   emulated in this module. For indexedDB compatibility, this means that every method needs to \r\n   execute at least one promise before doing an indexedDB operation. Dexie will always call \r\n   db.ready().then() for every operation to make sure the indexedDB event is started in an\r\n   emulated micro tick.\r\n*/\nvar schedulePhysicalTick = _global.setImmediate ?\n// setImmediate supported. Those modern platforms also supports Function.bind().\nsetImmediate.bind(null, physicalTick) : _global.MutationObserver ?\n// MutationObserver supported\nfunction () {\n    var hiddenDiv = document.createElement("div");\n    new MutationObserver(function () {\n        physicalTick();\n        hiddenDiv = null;\n    }).observe(hiddenDiv, { attributes: true });\n    hiddenDiv.setAttribute(\'i\', \'1\');\n} :\n// No support for setImmediate or MutationObserver. No worry, setTimeout is only called\n// once time. Every tick that follows will be our emulated micro tick.\n// Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug \nfunction () {\n    setTimeout(physicalTick, 0);\n};\n\n// Confifurable through Promise.scheduler.\n// Don\'t export because it would be unsafe to let unknown\n// code call it unless they do try..catch within their callback.\n// This function can be retrieved through getter of Promise.scheduler though,\n// but users must not do Promise.scheduler (myFuncThatThrows exception)!\nvar asap$1 = function (callback, args) {\n    microtickQueue.push([callback, args]);\n    if (needsNewPhysicalTick) {\n        schedulePhysicalTick();\n        needsNewPhysicalTick = false;\n    }\n};\n\nvar isOutsideMicroTick = true;\nvar needsNewPhysicalTick = true;\nvar unhandledErrors = [];\nvar rejectingErrors = [];\nvar currentFulfiller = null;\nvar rejectionMapper = mirror; // Remove in next major when removing error mapping of DOMErrors and DOMExceptions\n\nvar globalPSD = {\n    global: true,\n    ref: 0,\n    unhandleds: [],\n    onunhandled: globalError,\n    //env: null, // Will be set whenever leaving a scope using wrappers.snapshot()\n    finalize: function () {\n        this.unhandleds.forEach(function (uh) {\n            try {\n                globalError(uh[0], uh[1]);\n            } catch (e) {}\n        });\n    }\n};\n\nvar PSD = globalPSD;\n\nvar microtickQueue = []; // Callbacks to call in this or next physical tick.\nvar numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.\nvar tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.\n\n// Wrappers are not being used yet. Their framework is functioning and can be used\n// to replace environment during a PSD scope (a.k.a. \'zone\').\n/* **KEEP** export var wrappers = (() => {\r\n    var wrappers = [];\r\n\r\n    return {\r\n        snapshot: () => {\r\n            var i = wrappers.length,\r\n                result = new Array(i);\r\n            while (i--) result[i] = wrappers[i].snapshot();\r\n            return result;\r\n        },\r\n        restore: values => {\r\n            var i = wrappers.length;\r\n            while (i--) wrappers[i].restore(values[i]);\r\n        },\r\n        wrap: () => wrappers.map(w => w.wrap()),\r\n        add: wrapper => {\r\n            wrappers.push(wrapper);\r\n        }\r\n    };\r\n})();\r\n*/\n\nfunction Promise(fn) {\n    if (typeof this !== \'object\') throw new TypeError(\'Promises must be constructed via new\');\n    this._listeners = [];\n    this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.\n\n    // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()\n    // execute the microtask engine implicitely within the call to resolve() or reject().\n    // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack\n    // only contains library code when calling resolve() or reject().\n    // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from\n    // global scope (event handler, timer etc)!\n    this._lib = false;\n    // Current async scope\n    var psd = this._PSD = PSD;\n\n    if (debug) {\n        this._stackHolder = getErrorWithStack();\n        this._prev = null;\n        this._numPrev = 0; // Number of previous promises (for long stacks)\n        linkToPreviousPromise(this, currentFulfiller);\n    }\n\n    if (typeof fn !== \'function\') {\n        if (fn !== INTERNAL) throw new TypeError(\'Not a function\');\n        // Private constructor (INTERNAL, state, value).\n        // Used internally by Promise.resolve() and Promise.reject().\n        this._state = arguments[1];\n        this._value = arguments[2];\n        if (this._state === false) handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().\n        return;\n    }\n\n    this._state = null; // null (=pending), false (=rejected) or true (=resolved)\n    this._value = null; // error or result\n    ++psd.ref; // Refcounting current scope\n    executePromiseTask(this, fn);\n}\n\nprops(Promise.prototype, {\n\n    then: function (onFulfilled, onRejected) {\n        var _this = this;\n\n        var rv = new Promise(function (resolve, reject) {\n            propagateToListener(_this, new Listener(onFulfilled, onRejected, resolve, reject));\n        });\n        debug && (!this._prev || this._state === null) && linkToPreviousPromise(rv, this);\n        return rv;\n    },\n\n    _then: function (onFulfilled, onRejected) {\n        // A little tinier version of then() that don\'t have to create a resulting promise.\n        propagateToListener(this, new Listener(null, null, onFulfilled, onRejected));\n    },\n\n    catch: function (onRejected) {\n        if (arguments.length === 1) return this.then(null, onRejected);\n        // First argument is the Error type to catch\n        var type = arguments[0],\n            handler = arguments[1];\n        return typeof type === \'function\' ? this.then(null, function (err) {\n            return (\n                // Catching errors by its constructor type (similar to java / c++ / c#)\n                // Sample: promise.catch(TypeError, function (e) { ... });\n                err instanceof type ? handler(err) : PromiseReject(err)\n            );\n        }) : this.then(null, function (err) {\n            return (\n                // Catching errors by the error.name property. Makes sense for indexedDB where error type\n                // is always DOMError but where e.name tells the actual error type.\n                // Sample: promise.catch(\'ConstraintError\', function (e) { ... });\n                err && err.name === type ? handler(err) : PromiseReject(err)\n            );\n        });\n    },\n\n    finally: function (onFinally) {\n        return this.then(function (value) {\n            onFinally();\n            return value;\n        }, function (err) {\n            onFinally();\n            return PromiseReject(err);\n        });\n    },\n\n    // Deprecate in next major. Needed only for db.on.error.\n    uncaught: function (uncaughtHandler) {\n        var _this2 = this;\n\n        // Be backward compatible and use "onuncatched" as the event name on this.\n        // Handle multiple subscribers through reverseStoppableEventChain(). If a handler returns `false`, bubbling stops.\n        this.onuncatched = reverseStoppableEventChain(this.onuncatched, uncaughtHandler);\n        // In case caller does this on an already rejected promise, assume caller wants to point out the error to this promise and not\n        // a previous promise. Reason: the prevous promise may lack onuncatched handler. \n        if (this._state === false && unhandledErrors.indexOf(this) === -1) {\n            // Replace unhandled error\'s destinaion promise with this one!\n            unhandledErrors.some(function (p, i, l) {\n                return p._value === _this2._value && (l[i] = _this2);\n            });\n            // Actually we do this shit because we need to support db.on.error() correctly during db.open(). If we deprecate db.on.error, we could\n            // take away this piece of code as well as the onuncatched and uncaught() method.\n        }\n        return this;\n    },\n\n    stack: {\n        get: function () {\n            if (this._stack) return this._stack;\n            try {\n                stack_being_generated = true;\n                var stacks = getStack(this, [], MAX_LONG_STACKS);\n                var stack = stacks.join("\\nFrom previous: ");\n                if (this._state !== null) this._stack = stack; // Stack may be updated on reject.\n                return stack;\n            } finally {\n                stack_being_generated = false;\n            }\n        }\n    }\n});\n\nfunction Listener(onFulfilled, onRejected, resolve, reject) {\n    this.onFulfilled = typeof onFulfilled === \'function\' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === \'function\' ? onRejected : null;\n    this.resolve = resolve;\n    this.reject = reject;\n    this.psd = PSD;\n}\n\n// Promise Static Properties\nprops(Promise, {\n    all: function () {\n        var values = getArrayOf.apply(null, arguments); // Supports iterables, implicit arguments and array-like.\n        return new Promise(function (resolve, reject) {\n            if (values.length === 0) resolve([]);\n            var remaining = values.length;\n            values.forEach(function (a, i) {\n                return Promise.resolve(a).then(function (x) {\n                    values[i] = x;\n                    if (! --remaining) resolve(values);\n                }, reject);\n            });\n        });\n    },\n\n    resolve: function (value) {\n        if (value instanceof Promise) return value;\n        if (value && typeof value.then === \'function\') return new Promise(function (resolve, reject) {\n            value.then(resolve, reject);\n        });\n        return new Promise(INTERNAL, true, value);\n    },\n\n    reject: PromiseReject,\n\n    race: function () {\n        var values = getArrayOf.apply(null, arguments);\n        return new Promise(function (resolve, reject) {\n            values.map(function (value) {\n                return Promise.resolve(value).then(resolve, reject);\n            });\n        });\n    },\n\n    PSD: {\n        get: function () {\n            return PSD;\n        },\n        set: function (value) {\n            return PSD = value;\n        }\n    },\n\n    newPSD: newScope,\n\n    usePSD: usePSD,\n\n    scheduler: {\n        get: function () {\n            return asap$1;\n        },\n        set: function (value) {\n            asap$1 = value;\n        }\n    },\n\n    rejectionMapper: {\n        get: function () {\n            return rejectionMapper;\n        },\n        set: function (value) {\n            rejectionMapper = value;\n        } // Map reject failures\n    },\n\n    follow: function (fn) {\n        return new Promise(function (resolve, reject) {\n            return newScope(function (resolve, reject) {\n                var psd = PSD;\n                psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()\n                psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.\n                psd.finalize = callBoth(function () {\n                    var _this3 = this;\n\n                    // Unhandled standard or 3rd part promises are put in PSD.unhandleds and\n                    // examined upon scope completion while unhandled rejections in this Promise\n                    // will trigger directly through psd.onunhandled\n                    run_at_end_of_this_or_next_physical_tick(function () {\n                        _this3.unhandleds.length === 0 ? resolve() : reject(_this3.unhandleds[0]);\n                    });\n                }, psd.finalize);\n                fn();\n            }, resolve, reject);\n        });\n    },\n\n    on: Events(null, { "error": [reverseStoppableEventChain, defaultErrorHandler] // Default to defaultErrorHandler\n    })\n\n});\n\nvar PromiseOnError = Promise.on.error;\nPromiseOnError.subscribe = deprecated("Promise.on(\'error\')", PromiseOnError.subscribe);\nPromiseOnError.unsubscribe = deprecated("Promise.on(\'error\').unsubscribe", PromiseOnError.unsubscribe);\n\n/**\r\n* Take a potentially misbehaving resolver function and make sure\r\n* onFulfilled and onRejected are only called once.\r\n*\r\n* Makes no guarantees about asynchrony.\r\n*/\nfunction executePromiseTask(promise, fn) {\n    // Promise Resolution Procedure:\n    // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    try {\n        fn(function (value) {\n            if (promise._state !== null) return;\n            if (value === promise) throw new TypeError(\'A promise cannot be resolved with itself.\');\n            var shouldExecuteTick = promise._lib && beginMicroTickScope();\n            if (value && typeof value.then === \'function\') {\n                executePromiseTask(promise, function (resolve, reject) {\n                    value instanceof Promise ? value._then(resolve, reject) : value.then(resolve, reject);\n                });\n            } else {\n                promise._state = true;\n                promise._value = value;\n                propagateAllListeners(promise);\n            }\n            if (shouldExecuteTick) endMicroTickScope();\n        }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below\n    } catch (ex) {\n        handleRejection(promise, ex);\n    }\n}\n\nfunction handleRejection(promise, reason) {\n    rejectingErrors.push(reason);\n    if (promise._state !== null) return;\n    var shouldExecuteTick = promise._lib && beginMicroTickScope();\n    reason = rejectionMapper(reason);\n    promise._state = false;\n    promise._value = reason;\n    debug && reason !== null && typeof reason === \'object\' && !reason._promise && tryCatch(function () {\n        var origProp = getPropertyDescriptor(reason, "stack");\n        reason._promise = promise;\n        setProp(reason, "stack", {\n            get: function () {\n                return stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;\n            }\n        });\n    });\n    // Add the failure to a list of possibly uncaught errors\n    addPossiblyUnhandledError(promise);\n    propagateAllListeners(promise);\n    if (shouldExecuteTick) endMicroTickScope();\n}\n\nfunction propagateAllListeners(promise) {\n    //debug && linkToPreviousPromise(promise);\n    var listeners = promise._listeners;\n    promise._listeners = [];\n    for (var i = 0, len = listeners.length; i < len; ++i) {\n        propagateToListener(promise, listeners[i]);\n    }\n    var psd = promise._PSD;\n    --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();\n    if (numScheduledCalls === 0) {\n        // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,\n        // and that no deferreds where listening to this rejection or success.\n        // Since there is a risk that our stack can contain application code that may\n        // do stuff after this code is finished that may generate new calls, we cannot\n        // call finalizers here.\n        ++numScheduledCalls;\n        asap$1(function () {\n            if (--numScheduledCalls === 0) finalizePhysicalTick(); // Will detect unhandled errors\n        }, []);\n    }\n}\n\nfunction propagateToListener(promise, listener) {\n    if (promise._state === null) {\n        promise._listeners.push(listener);\n        return;\n    }\n\n    var cb = promise._state ? listener.onFulfilled : listener.onRejected;\n    if (cb === null) {\n        // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()\n        return (promise._state ? listener.resolve : listener.reject)(promise._value);\n    }\n    var psd = listener.psd;\n    ++psd.ref;\n    ++numScheduledCalls;\n    asap$1(callListener, [cb, promise, listener]);\n}\n\nfunction callListener(cb, promise, listener) {\n    var outerScope = PSD;\n    var psd = listener.psd;\n    try {\n        if (psd !== outerScope) {\n            // **KEEP** outerScope.env = wrappers.snapshot(); // Snapshot outerScope\'s environment.\n            PSD = psd;\n            // **KEEP** wrappers.restore(psd.env); // Restore PSD\'s environment.\n        }\n\n        // Set static variable currentFulfiller to the promise that is being fullfilled,\n        // so that we connect the chain of promises (for long stacks support)\n        currentFulfiller = promise;\n\n        // Call callback and resolve our listener with it\'s return value.\n        var value = promise._value,\n            ret;\n        if (promise._state) {\n            ret = cb(value);\n        } else {\n            if (rejectingErrors.length) rejectingErrors = [];\n            ret = cb(value);\n            if (rejectingErrors.indexOf(value) === -1) markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.\n        }\n        listener.resolve(ret);\n    } catch (e) {\n        // Exception thrown in callback. Reject our listener.\n        listener.reject(e);\n    } finally {\n        // Restore PSD, env and currentFulfiller.\n        if (psd !== outerScope) {\n            PSD = outerScope;\n            // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope\'s environment\n        }\n        currentFulfiller = null;\n        if (--numScheduledCalls === 0) finalizePhysicalTick();\n        --psd.ref || psd.finalize();\n    }\n}\n\nfunction getStack(promise, stacks, limit) {\n    if (stacks.length === limit) return stacks;\n    var stack = "";\n    if (promise._state === false) {\n        var failure = promise._value,\n            errorName,\n            message;\n\n        if (failure != null) {\n            errorName = failure.name || "Error";\n            message = failure.message || failure;\n            stack = prettyStack(failure, 0);\n        } else {\n            errorName = failure; // If error is undefined or null, show that.\n            message = "";\n        }\n        stacks.push(errorName + (message ? ": " + message : "") + stack);\n    }\n    if (debug) {\n        stack = prettyStack(promise._stackHolder, 2);\n        if (stack && stacks.indexOf(stack) === -1) stacks.push(stack);\n        if (promise._prev) getStack(promise._prev, stacks, limit);\n    }\n    return stacks;\n}\n\nfunction linkToPreviousPromise(promise, prev) {\n    // Support long stacks by linking to previous completed promise.\n    var numPrev = prev ? prev._numPrev + 1 : 0;\n    if (numPrev < LONG_STACKS_CLIP_LIMIT) {\n        // Prohibit infinite Promise loops to get an infinite long memory consuming "tail".\n        promise._prev = prev;\n        promise._numPrev = numPrev;\n    }\n}\n\n/* The callback to schedule with setImmediate() or setTimeout().\r\n   It runs a virtual microtick and executes any callback registered in microtickQueue.\r\n */\nfunction physicalTick() {\n    beginMicroTickScope() && endMicroTickScope();\n}\n\nfunction beginMicroTickScope() {\n    var wasRootExec = isOutsideMicroTick;\n    isOutsideMicroTick = false;\n    needsNewPhysicalTick = false;\n    return wasRootExec;\n}\n\n/* Executes micro-ticks without doing try..catch.\r\n   This can be possible because we only use this internally and\r\n   the registered functions are exception-safe (they do try..catch\r\n   internally before calling any external method). If registering\r\n   functions in the microtickQueue that are not exception-safe, this\r\n   would destroy the framework and make it instable. So we don\'t export\r\n   our asap method.\r\n*/\nfunction endMicroTickScope() {\n    var callbacks, i, l;\n    do {\n        while (microtickQueue.length > 0) {\n            callbacks = microtickQueue;\n            microtickQueue = [];\n            l = callbacks.length;\n            for (i = 0; i < l; ++i) {\n                var item = callbacks[i];\n                item[0].apply(null, item[1]);\n            }\n        }\n    } while (microtickQueue.length > 0);\n    isOutsideMicroTick = true;\n    needsNewPhysicalTick = true;\n}\n\nfunction finalizePhysicalTick() {\n    var unhandledErrs = unhandledErrors;\n    unhandledErrors = [];\n    unhandledErrs.forEach(function (p) {\n        p._PSD.onunhandled.call(null, p._value, p);\n    });\n    var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.\n    var i = finalizers.length;\n    while (i) {\n        finalizers[--i]();\n    }\n}\n\nfunction run_at_end_of_this_or_next_physical_tick(fn) {\n    function finalizer() {\n        fn();\n        tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);\n    }\n    tickFinalizers.push(finalizer);\n    ++numScheduledCalls;\n    asap$1(function () {\n        if (--numScheduledCalls === 0) finalizePhysicalTick();\n    }, []);\n}\n\nfunction addPossiblyUnhandledError(promise) {\n    // Only add to unhandledErrors if not already there. The first one to add to this list\n    // will be upon the first rejection so that the root cause (first promise in the\n    // rejection chain) is the one listed.\n    if (!unhandledErrors.some(function (p) {\n        return p._value === promise._value;\n    })) unhandledErrors.push(promise);\n}\n\nfunction markErrorAsHandled(promise) {\n    // Called when a reject handled is actually being called.\n    // Search in unhandledErrors for any promise whos _value is this promise_value (list\n    // contains only rejected promises, and only one item per error)\n    var i = unhandledErrors.length;\n    while (i) {\n        if (unhandledErrors[--i]._value === promise._value) {\n            // Found a promise that failed with this same error object pointer,\n            // Remove that since there is a listener that actually takes care of it.\n            unhandledErrors.splice(i, 1);\n            return;\n        }\n    }\n}\n\n// By default, log uncaught errors to the console\nfunction defaultErrorHandler(e) {\n    console.warn(\'Unhandled rejection: \' + (e.stack || e));\n}\n\nfunction PromiseReject(reason) {\n    return new Promise(INTERNAL, false, reason);\n}\n\nfunction wrap(fn, errorCatcher) {\n    var psd = PSD;\n    return function () {\n        var wasRootExec = beginMicroTickScope(),\n            outerScope = PSD;\n\n        try {\n            if (outerScope !== psd) {\n                // **KEEP** outerScope.env = wrappers.snapshot(); // Snapshot outerScope\'s environment\n                PSD = psd;\n                // **KEEP** wrappers.restore(psd.env); // Restore PSD\'s environment.\n            }\n            return fn.apply(this, arguments);\n        } catch (e) {\n            errorCatcher && errorCatcher(e);\n        } finally {\n            if (outerScope !== psd) {\n                PSD = outerScope;\n                // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope\'s environment\n            }\n            if (wasRootExec) endMicroTickScope();\n        }\n    };\n}\n\nfunction newScope(fn, a1, a2, a3) {\n    var parent = PSD,\n        psd = Object.create(parent);\n    psd.parent = parent;\n    psd.ref = 0;\n    psd.global = false;\n    // **KEEP** psd.env = wrappers.wrap(psd);\n\n    // unhandleds and onunhandled should not be specifically set here.\n    // Leave them on parent prototype.\n    // unhandleds.push(err) will push to parent\'s prototype\n    // onunhandled() will call parents onunhandled (with this scope\'s this-pointer though!)\n    ++parent.ref;\n    psd.finalize = function () {\n        --this.parent.ref || this.parent.finalize();\n    };\n    var rv = usePSD(psd, fn, a1, a2, a3);\n    if (psd.ref === 0) psd.finalize();\n    return rv;\n}\n\nfunction usePSD(psd, fn, a1, a2, a3) {\n    var outerScope = PSD;\n    try {\n        if (psd !== outerScope) {\n            // **KEEP** outerScope.env = wrappers.snapshot(); // snapshot outerScope\'s environment.\n            PSD = psd;\n            // **KEEP** wrappers.restore(psd.env); // Restore PSD\'s environment.\n        }\n        return fn(a1, a2, a3);\n    } finally {\n        if (psd !== outerScope) {\n            PSD = outerScope;\n            // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope\'s environment.\n        }\n    }\n}\n\nvar UNHANDLEDREJECTION = "unhandledrejection";\n\nfunction globalError(err, promise) {\n    var rv;\n    try {\n        rv = promise.onuncatched(err);\n    } catch (e) {}\n    if (rv !== false) try {\n        var event,\n            eventData = { promise: promise, reason: err };\n        if (_global.document && document.createEvent) {\n            event = document.createEvent(\'Event\');\n            event.initEvent(UNHANDLEDREJECTION, true, true);\n            extend(event, eventData);\n        } else if (_global.CustomEvent) {\n            event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });\n            extend(event, eventData);\n        }\n        if (event && _global.dispatchEvent) {\n            dispatchEvent(event);\n            if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)\n                // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.\n                try {\n                    _global.onunhandledrejection(event);\n                } catch (_) {}\n        }\n        if (!event.defaultPrevented) {\n            // Backward compatibility: fire to events registered at Promise.on.error\n            Promise.on.error.fire(err, promise);\n        }\n    } catch (e) {}\n}\n\n/* **KEEP** \r\n\r\nexport function wrapPromise(PromiseClass) {\r\n    var proto = PromiseClass.prototype;\r\n    var origThen = proto.then;\r\n    \r\n    wrappers.add({\r\n        snapshot: () => proto.then,\r\n        restore: value => {proto.then = value;},\r\n        wrap: () => patchedThen\r\n    });\r\n\r\n    function patchedThen (onFulfilled, onRejected) {\r\n        var promise = this;\r\n        var onFulfilledProxy = wrap(function(value){\r\n            var rv = value;\r\n            if (onFulfilled) {\r\n                rv = onFulfilled(rv);\r\n                if (rv && typeof rv.then === \'function\') rv.then(); // Intercept that promise as well.\r\n            }\r\n            --PSD.ref || PSD.finalize();\r\n            return rv;\r\n        });\r\n        var onRejectedProxy = wrap(function(err){\r\n            promise._$err = err;\r\n            var unhandleds = PSD.unhandleds;\r\n            var idx = unhandleds.length,\r\n                rv;\r\n            while (idx--) if (unhandleds[idx]._$err === err) break;\r\n            if (onRejected) {\r\n                if (idx !== -1) unhandleds.splice(idx, 1); // Mark as handled.\r\n                rv = onRejected(err);\r\n                if (rv && typeof rv.then === \'function\') rv.then(); // Intercept that promise as well.\r\n            } else {\r\n                if (idx === -1) unhandleds.push(promise);\r\n                rv = PromiseClass.reject(err);\r\n                rv._$nointercept = true; // Prohibit eternal loop.\r\n            }\r\n            --PSD.ref || PSD.finalize();\r\n            return rv;\r\n        });\r\n        \r\n        if (this._$nointercept) return origThen.apply(this, arguments);\r\n        ++PSD.ref;\r\n        return origThen.call(this, onFulfilledProxy, onRejectedProxy);\r\n    }\r\n}\r\n\r\n// Global Promise wrapper\r\nif (_global.Promise) wrapPromise(_global.Promise);\r\n\r\n*/\n\ndoFakeAutoComplete(function () {\n    // Simplify the job for VS Intellisense. This piece of code is one of the keys to the new marvellous intellisense support in Dexie.\n    asap$1 = function (fn, args) {\n        setTimeout(function () {\n            fn.apply(null, args);\n        }, 0);\n    };\n});\n\nfunction rejection(err, uncaughtHandler) {\n    // Get the call stack and return a rejected promise.\n    var rv = Promise.reject(err);\n    return uncaughtHandler ? rv.uncaught(uncaughtHandler) : rv;\n}\n\n/*\r\n * Dexie.js - a minimalistic wrapper for IndexedDB\r\n * ===============================================\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com\r\n *\r\n * Version 1.5.1, Tue Nov 01 2016\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n */\n\nvar DEXIE_VERSION = \'1.5.1\';\nvar maxString = String.fromCharCode(65535);\nvar maxKey = function () {\n    try {\n        IDBKeyRange.only([[]]);return [[]];\n    } catch (e) {\n        return maxString;\n    }\n}();\nvar INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";\nvar STRING_EXPECTED = "String expected.";\nvar connections = [];\nvar isIEOrEdge = typeof navigator !== \'undefined\' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);\nvar hasIEDeleteObjectStoreBug = isIEOrEdge;\nvar hangsOnDeleteLargeKeyRange = isIEOrEdge;\nvar dexieStackFrameFilter = function (frame) {\n    return !/(dexie\\.js|dexie\\.min\\.js)/.test(frame);\n};\n\nsetDebug(debug, dexieStackFrameFilter);\n\nfunction Dexie(dbName, options) {\n    /// <param name="options" type="Object" optional="true">Specify only if you wich to control which addons that should run on this instance</param>\n    var deps = Dexie.dependencies;\n    var opts = extend({\n        // Default Options\n        addons: Dexie.addons, // Pick statically registered addons by default\n        autoOpen: true, // Don\'t require db.open() explicitely.\n        indexedDB: deps.indexedDB, // Backend IndexedDB api. Default to IDBShim or browser env.\n        IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to IDBShim or browser env.\n    }, options);\n    var addons = opts.addons,\n        autoOpen = opts.autoOpen,\n        indexedDB = opts.indexedDB,\n        IDBKeyRange = opts.IDBKeyRange;\n\n    var globalSchema = this._dbSchema = {};\n    var versions = [];\n    var dbStoreNames = [];\n    var allTables = {};\n    ///<var type="IDBDatabase" />\n    var idbdb = null; // Instance of IDBDatabase\n    var dbOpenError = null;\n    var isBeingOpened = false;\n    var openComplete = false;\n    var READONLY = "readonly",\n        READWRITE = "readwrite";\n    var db = this;\n    var dbReadyResolve,\n        dbReadyPromise = new Promise(function (resolve) {\n        dbReadyResolve = resolve;\n    }),\n        cancelOpen,\n        openCanceller = new Promise(function (_, reject) {\n        cancelOpen = reject;\n    });\n    var autoSchema = true;\n    var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB),\n        hasGetAll;\n\n    function init() {\n        // Default subscribers to "versionchange" and "blocked".\n        // Can be overridden by custom handlers. If custom handlers return false, these default\n        // behaviours will be prevented.\n        db.on("versionchange", function (ev) {\n            // Default behavior for versionchange event is to close database connection.\n            // Caller can override this behavior by doing db.on("versionchange", function(){ return false; });\n            // Let\'s not block the other window from making it\'s delete() or open() call.\n            // NOTE! This event is never fired in IE,Edge or Safari.\n            if (ev.newVersion > 0) console.warn(\'Another connection wants to upgrade database \\\'\' + db.name + \'\\\'. Closing db now to resume the upgrade.\');else console.warn(\'Another connection wants to delete database \\\'\' + db.name + \'\\\'. Closing db now to resume the delete request.\');\n            db.close();\n            // In many web applications, it would be recommended to force window.reload()\n            // when this event occurs. To do that, subscribe to the versionchange event\n            // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)\n            // The reason for this is that your current web app obviously has old schema code that needs\n            // to be updated. Another window got a newer version of the app and needs to upgrade DB but\n            // your window is blocking it unless we close it here.\n        });\n        db.on("blocked", function (ev) {\n            if (!ev.newVersion || ev.newVersion < ev.oldVersion) console.warn(\'Dexie.delete(\\\'\' + db.name + \'\\\') was blocked\');else console.warn(\'Upgrade \\\'\' + db.name + \'\\\' blocked by other connection holding version \' + ev.oldVersion / 10);\n        });\n    }\n\n    //\n    //\n    //\n    // ------------------------- Versioning Framework---------------------------\n    //\n    //\n    //\n\n    this.version = function (versionNumber) {\n        /// <param name="versionNumber" type="Number"></param>\n        /// <returns type="Version"></returns>\n        if (idbdb || isBeingOpened) throw new exceptions.Schema("Cannot add version when database is open");\n        this.verno = Math.max(this.verno, versionNumber);\n        var versionInstance = versions.filter(function (v) {\n            return v._cfg.version === versionNumber;\n        })[0];\n        if (versionInstance) return versionInstance;\n        versionInstance = new Version(versionNumber);\n        versions.push(versionInstance);\n        versions.sort(lowerVersionFirst);\n        return versionInstance;\n    };\n\n    function Version(versionNumber) {\n        this._cfg = {\n            version: versionNumber,\n            storesSource: null,\n            dbschema: {},\n            tables: {},\n            contentUpgrade: null\n        };\n        this.stores({}); // Derive earlier schemas by default.\n    }\n\n    extend(Version.prototype, {\n        stores: function (stores) {\n            /// <summary>\n            ///   Defines the schema for a particular version\n            /// </summary>\n            /// <param name="stores" type="Object">\n            /// Example: <br/>\n            ///   {users: "id++,first,last,&amp;username,*email", <br/>\n            ///   passwords: "id++,&amp;username"}<br/>\n            /// <br/>\n            /// Syntax: {Table: "[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,..."}<br/><br/>\n            /// Special characters:<br/>\n            ///  "&amp;"  means unique key, <br/>\n            ///  "*"  means value is multiEntry, <br/>\n            ///  "++" means auto-increment and only applicable for primary key <br/>\n            /// </param>\n            this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;\n\n            // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.\n            var storesSpec = {};\n            versions.forEach(function (version) {\n                // \'versions\' is always sorted by lowest version first.\n                extend(storesSpec, version._cfg.storesSource);\n            });\n\n            var dbschema = this._cfg.dbschema = {};\n            this._parseStoresSpec(storesSpec, dbschema);\n            // Update the latest schema to this version\n            // Update API\n            globalSchema = db._dbSchema = dbschema;\n            removeTablesApi([allTables, db, Transaction.prototype]);\n            setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), READWRITE, dbschema);\n            dbStoreNames = keys(dbschema);\n            return this;\n        },\n        upgrade: function (upgradeFunction) {\n            /// <param name="upgradeFunction" optional="true">Function that performs upgrading actions.</param>\n            var self = this;\n            fakeAutoComplete(function () {\n                upgradeFunction(db._createTransaction(READWRITE, keys(self._cfg.dbschema), self._cfg.dbschema)); // BUGBUG: No code completion for prev version\'s tables wont appear.\n            });\n            this._cfg.contentUpgrade = upgradeFunction;\n            return this;\n        },\n        _parseStoresSpec: function (stores, outSchema) {\n            keys(stores).forEach(function (tableName) {\n                if (stores[tableName] !== null) {\n                    var instanceTemplate = {};\n                    var indexes = parseIndexSyntax(stores[tableName]);\n                    var primKey = indexes.shift();\n                    if (primKey.multi) throw new exceptions.Schema("Primary key cannot be multi-valued");\n                    if (primKey.keyPath) setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);\n                    indexes.forEach(function (idx) {\n                        if (idx.auto) throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");\n                        if (!idx.keyPath) throw new exceptions.Schema("Index must have a name and cannot be an empty string");\n                        setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () {\n                            return "";\n                        }) : "");\n                    });\n                    outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);\n                }\n            });\n        }\n    });\n\n    function runUpgraders(oldVersion, idbtrans, reject) {\n        var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);\n        trans.create(idbtrans);\n        trans._completion.catch(reject);\n        var rejectTransaction = trans._reject.bind(trans);\n        newScope(function () {\n            PSD.trans = trans;\n            if (oldVersion === 0) {\n                // Create tables:\n                keys(globalSchema).forEach(function (tableName) {\n                    createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);\n                });\n                Promise.follow(function () {\n                    return db.on.populate.fire(trans);\n                }).catch(rejectTransaction);\n            } else updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);\n        });\n    }\n\n    function updateTablesAndIndexes(oldVersion, trans, idbtrans) {\n        // Upgrade version to version, step-by-step from oldest to newest version.\n        // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)\n        var queue = [];\n        var oldVersionStruct = versions.filter(function (version) {\n            return version._cfg.version === oldVersion;\n        })[0];\n        if (!oldVersionStruct) throw new exceptions.Upgrade("Dexie specification of currently installed DB version is missing");\n        globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;\n        var anyContentUpgraderHasRun = false;\n\n        var versToRun = versions.filter(function (v) {\n            return v._cfg.version > oldVersion;\n        });\n        versToRun.forEach(function (version) {\n            /// <param name="version" type="Version"></param>\n            queue.push(function () {\n                var oldSchema = globalSchema;\n                var newSchema = version._cfg.dbschema;\n                adjustToExistingIndexNames(oldSchema, idbtrans);\n                adjustToExistingIndexNames(newSchema, idbtrans);\n                globalSchema = db._dbSchema = newSchema;\n                var diff = getSchemaDiff(oldSchema, newSchema);\n                // Add tables           \n                diff.add.forEach(function (tuple) {\n                    createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);\n                });\n                // Change tables\n                diff.change.forEach(function (change) {\n                    if (change.recreate) {\n                        throw new exceptions.Upgrade("Not yet support for changing primary key");\n                    } else {\n                        var store = idbtrans.objectStore(change.name);\n                        // Add indexes\n                        change.add.forEach(function (idx) {\n                            addIndex(store, idx);\n                        });\n                        // Update indexes\n                        change.change.forEach(function (idx) {\n                            store.deleteIndex(idx.name);\n                            addIndex(store, idx);\n                        });\n                        // Delete indexes\n                        change.del.forEach(function (idxName) {\n                            store.deleteIndex(idxName);\n                        });\n                    }\n                });\n                if (version._cfg.contentUpgrade) {\n                    anyContentUpgraderHasRun = true;\n                    return Promise.follow(function () {\n                        version._cfg.contentUpgrade(trans);\n                    });\n                }\n            });\n            queue.push(function (idbtrans) {\n                if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {\n                    // Dont delete old tables if ieBug is present and a content upgrader has run. Let tables be left in DB so far. This needs to be taken care of.\n                    var newSchema = version._cfg.dbschema;\n                    // Delete old tables\n                    deleteRemovedTables(newSchema, idbtrans);\n                }\n            });\n        });\n\n        // Now, create a queue execution engine\n        function runQueue() {\n            return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : Promise.resolve();\n        }\n\n        return runQueue().then(function () {\n            createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)\n        });\n    }\n\n    function getSchemaDiff(oldSchema, newSchema) {\n        var diff = {\n            del: [], // Array of table names\n            add: [], // Array of [tableName, newDefinition]\n            change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}\n        };\n        for (var table in oldSchema) {\n            if (!newSchema[table]) diff.del.push(table);\n        }\n        for (table in newSchema) {\n            var oldDef = oldSchema[table],\n                newDef = newSchema[table];\n            if (!oldDef) {\n                diff.add.push([table, newDef]);\n            } else {\n                var change = {\n                    name: table,\n                    def: newDef,\n                    recreate: false,\n                    del: [],\n                    add: [],\n                    change: []\n                };\n                if (oldDef.primKey.src !== newDef.primKey.src) {\n                    // Primary key has changed. Remove and re-add table.\n                    change.recreate = true;\n                    diff.change.push(change);\n                } else {\n                    // Same primary key. Just find out what differs:\n                    var oldIndexes = oldDef.idxByName;\n                    var newIndexes = newDef.idxByName;\n                    for (var idxName in oldIndexes) {\n                        if (!newIndexes[idxName]) change.del.push(idxName);\n                    }\n                    for (idxName in newIndexes) {\n                        var oldIdx = oldIndexes[idxName],\n                            newIdx = newIndexes[idxName];\n                        if (!oldIdx) change.add.push(newIdx);else if (oldIdx.src !== newIdx.src) change.change.push(newIdx);\n                    }\n                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {\n                        diff.change.push(change);\n                    }\n                }\n            }\n        }\n        return diff;\n    }\n\n    function createTable(idbtrans, tableName, primKey, indexes) {\n        /// <param name="idbtrans" type="IDBTransaction"></param>\n        var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });\n        indexes.forEach(function (idx) {\n            addIndex(store, idx);\n        });\n        return store;\n    }\n\n    function createMissingTables(newSchema, idbtrans) {\n        keys(newSchema).forEach(function (tableName) {\n            if (!idbtrans.db.objectStoreNames.contains(tableName)) {\n                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);\n            }\n        });\n    }\n\n    function deleteRemovedTables(newSchema, idbtrans) {\n        for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {\n            var storeName = idbtrans.db.objectStoreNames[i];\n            if (newSchema[storeName] == null) {\n                idbtrans.db.deleteObjectStore(storeName);\n            }\n        }\n    }\n\n    function addIndex(store, idx) {\n        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });\n    }\n\n    function dbUncaught(err) {\n        return db.on.error.fire(err);\n    }\n\n    //\n    //\n    //      Dexie Protected API\n    //\n    //\n\n    this._allTables = allTables;\n\n    this._tableFactory = function createTable(mode, tableSchema) {\n        /// <param name="tableSchema" type="TableSchema"></param>\n        if (mode === READONLY) return new Table(tableSchema.name, tableSchema, Collection);else return new WriteableTable(tableSchema.name, tableSchema);\n    };\n\n    this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {\n        return new Transaction(mode, storeNames, dbschema, parentTransaction);\n    };\n\n    /* Generate a temporary transaction when db operations are done outside a transactino scope.\r\n    */\n    function tempTransaction(mode, storeNames, fn) {\n        // Last argument is "writeLocked". But this doesnt apply to oneshot direct db operations, so we ignore it.\n        if (!openComplete && !PSD.letThrough) {\n            if (!isBeingOpened) {\n                if (!autoOpen) return rejection(new exceptions.DatabaseClosed(), dbUncaught);\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\n            }\n            return dbReadyPromise.then(function () {\n                return tempTransaction(mode, storeNames, fn);\n            });\n        } else {\n            var trans = db._createTransaction(mode, storeNames, globalSchema);\n            return trans._promise(mode, function (resolve, reject) {\n                newScope(function () {\n                    // OPTIMIZATION POSSIBLE? newScope() not needed because it\'s already done in _promise.\n                    PSD.trans = trans;\n                    fn(resolve, reject, trans);\n                });\n            }).then(function (result) {\n                // Instead of resolving value directly, wait with resolving it until transaction has completed.\n                // Otherwise the data would not be in the DB if requesting it in the then() operation.\n                // Specifically, to ensure that the following expression will work:\n                //\n                //   db.friends.put({name: "Arne"}).then(function () {\n                //       db.friends.where("name").equals("Arne").count(function(count) {\n                //           assert (count === 1);\n                //       });\n                //   });\n                //\n                return trans._completion.then(function () {\n                    return result;\n                });\n            }); /*.catch(err => { // Don\'t do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.\r\n                 trans._reject(err);\r\n                 return rejection(err);\r\n                });*/\n        }\n    }\n\n    this._whenReady = function (fn) {\n        return new Promise(fake || openComplete || PSD.letThrough ? fn : function (resolve, reject) {\n            if (!isBeingOpened) {\n                if (!autoOpen) {\n                    reject(new exceptions.DatabaseClosed());\n                    return;\n                }\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\n            }\n            dbReadyPromise.then(function () {\n                fn(resolve, reject);\n            });\n        }).uncaught(dbUncaught);\n    };\n\n    //\n    //\n    //\n    //\n    //      Dexie API\n    //\n    //\n    //\n\n    this.verno = 0;\n\n    this.open = function () {\n        if (isBeingOpened || idbdb) return dbReadyPromise.then(function () {\n            return dbOpenError ? rejection(dbOpenError, dbUncaught) : db;\n        });\n        debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.\n        isBeingOpened = true;\n        dbOpenError = null;\n        openComplete = false;\n\n        // Function pointers to call when the core opening process completes.\n        var resolveDbReady = dbReadyResolve,\n\n        // upgradeTransaction to abort on failure.\n        upgradeTransaction = null;\n\n        return Promise.race([openCanceller, new Promise(function (resolve, reject) {\n            doFakeAutoComplete(function () {\n                return resolve();\n            });\n\n            // Make sure caller has specified at least one version\n            if (versions.length > 0) autoSchema = false;\n\n            // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:\n            // IE fails when deleting objectStore after reading from it.\n            // A future version of Dexie.js will stopover an intermediate version to workaround this.\n            // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.\n\n            // If no API, throw!\n            if (!indexedDB) throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL " + "(not locally). If using old Safari versions, make sure to include indexedDB polyfill.");\n\n            var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));\n            if (!req) throw new exceptions.MissingAPI("IndexedDB API not available"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134\n            req.onerror = wrap(eventRejectHandler(reject));\n            req.onblocked = wrap(fireOnBlocked);\n            req.onupgradeneeded = wrap(function (e) {\n                upgradeTransaction = req.transaction;\n                if (autoSchema && !db._allowEmptyDB) {\n                    // Unless an addon has specified db._allowEmptyDB, lets make the call fail.\n                    // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.\n                    // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we\n                    // do not create a new database by accident here.\n                    req.onerror = preventDefault; // Prohibit onabort error from firing before we\'re done!\n                    upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)\n                    // Close database and delete it.\n                    req.result.close();\n                    var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!\n                    delreq.onsuccess = delreq.onerror = wrap(function () {\n                        reject(new exceptions.NoSuchDatabase(\'Database \' + dbName + \' doesnt exist\'));\n                    });\n                } else {\n                    upgradeTransaction.onerror = wrap(eventRejectHandler(reject));\n                    var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.\n                    runUpgraders(oldVer / 10, upgradeTransaction, reject, req);\n                }\n            }, reject);\n\n            req.onsuccess = wrap(function () {\n                // Core opening procedure complete. Now let\'s just record some stuff.\n                upgradeTransaction = null;\n                idbdb = req.result;\n                connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.\n\n                if (autoSchema) readGlobalSchema();else if (idbdb.objectStoreNames.length > 0) {\n                    try {\n                        adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));\n                    } catch (e) {\n                        // Safari may bail out if > 1 store names. However, this shouldnt be a showstopper. Issue #120.\n                    }\n                }\n\n                idbdb.onversionchange = wrap(function (ev) {\n                    db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)\n                    db.on("versionchange").fire(ev);\n                });\n\n                if (!hasNativeGetDatabaseNames) {\n                    // Update localStorage with list of database names\n                    globalDatabaseList(function (databaseNames) {\n                        if (databaseNames.indexOf(dbName) === -1) return databaseNames.push(dbName);\n                    });\n                }\n\n                resolve();\n            }, reject);\n        })]).then(function () {\n            // Before finally resolving the dbReadyPromise and this promise,\n            // call and await all on(\'ready\') subscribers:\n            // Dexie.vip() makes subscribers able to use the database while being opened.\n            // This is a must since these subscribers take part of the opening procedure.\n            return Dexie.vip(db.on.ready.fire);\n        }).then(function () {\n            // Resolve the db.open() with the db instance.\n            isBeingOpened = false;\n            return db;\n        }).catch(function (err) {\n            try {\n                // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.\n                upgradeTransaction && upgradeTransaction.abort();\n            } catch (e) {}\n            isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).\n            db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.\n            // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.\n            dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.\n            return rejection(dbOpenError, dbUncaught); // dbUncaught will make sure any error that happened in any operation before will now bubble to db.on.error() thanks to the special handling in Promise.uncaught().\n        }).finally(function () {\n            openComplete = true;\n            resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It\'s just to wake up waiters.\n        });\n    };\n\n    this.close = function () {\n        var idx = connections.indexOf(db);\n        if (idx >= 0) connections.splice(idx, 1);\n        if (idbdb) {\n            try {\n                idbdb.close();\n            } catch (e) {}\n            idbdb = null;\n        }\n        autoOpen = false;\n        dbOpenError = new exceptions.DatabaseClosed();\n        if (isBeingOpened) cancelOpen(dbOpenError);\n        // Reset dbReadyPromise promise:\n        dbReadyPromise = new Promise(function (resolve) {\n            dbReadyResolve = resolve;\n        });\n        openCanceller = new Promise(function (_, reject) {\n            cancelOpen = reject;\n        });\n    };\n\n    this.delete = function () {\n        var hasArguments = arguments.length > 0;\n        return new Promise(function (resolve, reject) {\n            if (hasArguments) throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");\n            if (isBeingOpened) {\n                dbReadyPromise.then(doDelete);\n            } else {\n                doDelete();\n            }\n            function doDelete() {\n                db.close();\n                var req = indexedDB.deleteDatabase(dbName);\n                req.onsuccess = wrap(function () {\n                    if (!hasNativeGetDatabaseNames) {\n                        globalDatabaseList(function (databaseNames) {\n                            var pos = databaseNames.indexOf(dbName);\n                            if (pos >= 0) return databaseNames.splice(pos, 1);\n                        });\n                    }\n                    resolve();\n                });\n                req.onerror = wrap(eventRejectHandler(reject));\n                req.onblocked = fireOnBlocked;\n            }\n        }).uncaught(dbUncaught);\n    };\n\n    this.backendDB = function () {\n        return idbdb;\n    };\n\n    this.isOpen = function () {\n        return idbdb !== null;\n    };\n    this.hasFailed = function () {\n        return dbOpenError !== null;\n    };\n    this.dynamicallyOpened = function () {\n        return autoSchema;\n    };\n\n    //\n    // Properties\n    //\n    this.name = dbName;\n\n    // db.tables - an array of all Table instances.\n    setProp(this, "tables", {\n        get: function () {\n            /// <returns type="Array" elementType="WriteableTable" />\n            return keys(allTables).map(function (name) {\n                return allTables[name];\n            });\n        }\n    });\n\n    //\n    // Events\n    //\n    this.on = Events(this, "error", "populate", "blocked", "versionchange", { ready: [promisableChain, nop] });\n    this.on.error.subscribe = deprecated("Dexie.on.error", this.on.error.subscribe);\n    this.on.error.unsubscribe = deprecated("Dexie.on.error.unsubscribe", this.on.error.unsubscribe);\n\n    this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {\n        return function (subscriber, bSticky) {\n            Dexie.vip(function () {\n                if (openComplete) {\n                    // Database already open. Call subscriber asap.\n                    if (!dbOpenError) Promise.resolve().then(subscriber);\n                    // bSticky: Also subscribe to future open sucesses (after close / reopen) \n                    if (bSticky) subscribe(subscriber);\n                } else {\n                    // Database not yet open. Subscribe to it.\n                    subscribe(subscriber);\n                    // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.\n                    if (!bSticky) subscribe(function unsubscribe() {\n                        db.on.ready.unsubscribe(subscriber);\n                        db.on.ready.unsubscribe(unsubscribe);\n                    });\n                }\n            });\n        };\n    });\n\n    fakeAutoComplete(function () {\n        db.on("populate").fire(db._createTransaction(READWRITE, dbStoreNames, globalSchema));\n        db.on("error").fire(new Error());\n    });\n\n    this.transaction = function (mode, tableInstances, scopeFunc) {\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name="mode" type="String">"r" for readonly, or "rw" for readwrite</param>\n        /// <param name="tableInstances">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>\n        /// <param name="scopeFunc" type="Function">Function to execute with transaction</param>\n\n        // Let table arguments be all arguments between mode and last argument.\n        var i = arguments.length;\n        if (i < 2) throw new exceptions.InvalidArgument("Too few arguments");\n        // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)\n        // and clone arguments except the first one into local var \'args\'.\n        var args = new Array(i - 1);\n        while (--i) {\n            args[i - 1] = arguments[i];\n        } // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.\n        scopeFunc = args.pop();\n        var tables = flatten(args); // Support using array as middle argument, or a mix of arrays and non-arrays.\n        var parentTransaction = PSD.trans;\n        // Check if parent transactions is bound to this db instance, and if caller wants to reuse it\n        if (!parentTransaction || parentTransaction.db !== db || mode.indexOf(\'!\') !== -1) parentTransaction = null;\n        var onlyIfCompatible = mode.indexOf(\'?\') !== -1;\n        mode = mode.replace(\'!\', \'\').replace(\'?\', \'\'); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.\n\n        try {\n            //\n            // Get storeNames from arguments. Either through given table instances, or through given table names.\n            //\n            var storeNames = tables.map(function (table) {\n                var storeName = table instanceof Table ? table.name : table;\n                if (typeof storeName !== \'string\') throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");\n                return storeName;\n            });\n\n            //\n            // Resolve mode. Allow shortcuts "r" and "rw".\n            //\n            if (mode == "r" || mode == READONLY) mode = READONLY;else if (mode == "rw" || mode == READWRITE) mode = READWRITE;else throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);\n\n            if (parentTransaction) {\n                // Basic checks\n                if (parentTransaction.mode === READONLY && mode === READWRITE) {\n                    if (onlyIfCompatible) {\n                        // Spawn new transaction instead.\n                        parentTransaction = null;\n                    } else throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");\n                }\n                if (parentTransaction) {\n                    storeNames.forEach(function (storeName) {\n                        if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {\n                            if (onlyIfCompatible) {\n                                // Spawn new transaction instead.\n                                parentTransaction = null;\n                            } else throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");\n                        }\n                    });\n                }\n            }\n        } catch (e) {\n            return parentTransaction ? parentTransaction._promise(null, function (_, reject) {\n                reject(e);\n            }) : rejection(e, dbUncaught);\n        }\n        // If this is a sub-transaction, lock the parent and then launch the sub-transaction.\n        return parentTransaction ? parentTransaction._promise(mode, enterTransactionScope, "lock") : db._whenReady(enterTransactionScope);\n\n        function enterTransactionScope(resolve) {\n            var parentPSD = PSD;\n            resolve(Promise.resolve().then(function () {\n                return newScope(function () {\n                    // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().\n                    PSD.transless = PSD.transless || parentPSD;\n                    // Our transaction.\n                    //return new Promise((resolve, reject) => {\n                    var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);\n                    // Let the transaction instance be part of a Promise-specific data (PSD) value.\n                    PSD.trans = trans;\n\n                    if (parentTransaction) {\n                        // Emulate transaction commit awareness for inner transaction (must \'commit\' when the inner transaction has no more operations ongoing)\n                        trans.idbtrans = parentTransaction.idbtrans;\n                    } else {\n                        trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.\n                    }\n\n                    // Provide arguments to the scope function (for backward compatibility)\n                    var tableArgs = storeNames.map(function (name) {\n                        return allTables[name];\n                    });\n                    tableArgs.push(trans);\n\n                    var returnValue;\n                    return Promise.follow(function () {\n                        // Finally, call the scope function with our table and transaction arguments.\n                        returnValue = scopeFunc.apply(trans, tableArgs); // NOTE: returnValue is used in trans.on.complete() not as a returnValue to this func.\n                        if (returnValue) {\n                            if (typeof returnValue.next === \'function\' && typeof returnValue.throw === \'function\') {\n                                // scopeFunc returned an iterator with throw-support. Handle yield as await.\n                                returnValue = awaitIterator(returnValue);\n                            } else if (typeof returnValue.then === \'function\' && !hasOwn(returnValue, \'_PSD\')) {\n                                throw new exceptions.IncompatiblePromise("Incompatible Promise returned from transaction scope (read more at http://tinyurl.com/znyqjqc). Transaction scope: " + scopeFunc.toString());\n                            }\n                        }\n                    }).uncaught(dbUncaught).then(function () {\n                        if (parentTransaction) trans._resolve(); // sub transactions don\'t react to idbtrans.oncomplete. We must trigger a acompletion.\n                        return trans._completion; // Even if WE believe everything is fine. Await IDBTransaction\'s oncomplete or onerror as well.\n                    }).then(function () {\n                        return returnValue;\n                    }).catch(function (e) {\n                        //reject(e);\n                        trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!\n                        return rejection(e);\n                    });\n                    //});\n                });\n            }));\n        }\n    };\n\n    this.table = function (tableName) {\n        /// <returns type="WriteableTable"></returns>\n        if (fake && autoSchema) return new WriteableTable(tableName);\n        if (!hasOwn(allTables, tableName)) {\n            throw new exceptions.InvalidTable(\'Table \' + tableName + \' does not exist\');\n        }\n        return allTables[tableName];\n    };\n\n    //\n    //\n    //\n    // Table Class\n    //\n    //\n    //\n    function Table(name, tableSchema, collClass) {\n        /// <param name="name" type="String"></param>\n        this.name = name;\n        this.schema = tableSchema;\n        this.hook = allTables[name] ? allTables[name].hook : Events(null, {\n            "creating": [hookCreatingChain, nop],\n            "reading": [pureFunctionChain, mirror],\n            "updating": [hookUpdatingChain, nop],\n            "deleting": [hookDeletingChain, nop]\n        });\n        this._collClass = collClass || Collection;\n    }\n\n    props(Table.prototype, {\n\n        //\n        // Table Protected Methods\n        //\n\n        _trans: function getTransaction(mode, fn, writeLocked) {\n            var trans = PSD.trans;\n            return trans && trans.db === db ? trans._promise(mode, fn, writeLocked) : tempTransaction(mode, [this.name], fn);\n        },\n        _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {\n            if (fake) return new Promise(fn); // Simplify the work for Intellisense/Code completion.\n            var trans = PSD.trans,\n                tableName = this.name;\n            function supplyIdbStore(resolve, reject, trans) {\n                fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);\n            }\n            return trans && trans.db === db ? trans._promise(mode, supplyIdbStore, writeLocked) : tempTransaction(mode, [this.name], supplyIdbStore);\n        },\n\n        //\n        // Table Public Methods\n        //\n        get: function (key, cb) {\n            var self = this;\n            return this._idbstore(READONLY, function (resolve, reject, idbstore) {\n                fake && resolve(self.schema.instanceTemplate);\n                var req = idbstore.get(key);\n                req.onerror = eventRejectHandler(reject);\n                req.onsuccess = wrap(function () {\n                    resolve(self.hook.reading.fire(req.result));\n                }, reject);\n            }).then(cb);\n        },\n        where: function (indexName) {\n            return new WhereClause(this, indexName);\n        },\n        count: function (cb) {\n            return this.toCollection().count(cb);\n        },\n        offset: function (offset) {\n            return this.toCollection().offset(offset);\n        },\n        limit: function (numRows) {\n            return this.toCollection().limit(numRows);\n        },\n        reverse: function () {\n            return this.toCollection().reverse();\n        },\n        filter: function (filterFunction) {\n            return this.toCollection().and(filterFunction);\n        },\n        each: function (fn) {\n            return this.toCollection().each(fn);\n        },\n        toArray: function (cb) {\n            return this.toCollection().toArray(cb);\n        },\n        orderBy: function (index) {\n            return new this._collClass(new WhereClause(this, index));\n        },\n\n        toCollection: function () {\n            return new this._collClass(new WhereClause(this));\n        },\n\n        mapToClass: function (constructor, structure) {\n            /// <summary>\n            ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making\n            ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.\n            /// </summary>\n            /// <param name="constructor">Constructor function representing the class.</param>\n            /// <param name="structure" optional="true">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>\n            this.schema.mappedClass = constructor;\n            var instanceTemplate = Object.create(constructor.prototype);\n            if (structure) {\n                // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.\n                applyStructure(instanceTemplate, structure);\n            }\n            this.schema.instanceTemplate = instanceTemplate;\n\n            // Now, subscribe to the when("reading") event to make all objects that come out from this table inherit from given class\n            // no matter which method to use for reading (Table.get() or Table.where(...)... )\n            var readHook = function (obj) {\n                if (!obj) return obj; // No valid object. (Value is null). Return as is.\n                // Create a new object that derives from constructor:\n                var res = Object.create(constructor.prototype);\n                // Clone members:\n                for (var m in obj) {\n                    if (hasOwn(obj, m)) try {\n                        res[m] = obj[m];\n                    } catch (_) {}\n                }return res;\n            };\n\n            if (this.schema.readHook) {\n                this.hook.reading.unsubscribe(this.schema.readHook);\n            }\n            this.schema.readHook = readHook;\n            this.hook("reading", readHook);\n            return constructor;\n        },\n        defineClass: function (structure) {\n            /// <summary>\n            ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database\n            ///     as well as making it possible to extend the prototype of the returned constructor function.\n            /// </summary>\n            /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>\n            return this.mapToClass(Dexie.defineClass(structure), structure);\n        }\n    });\n\n    //\n    //\n    //\n    // WriteableTable Class (extends Table)\n    //\n    //\n    //\n    function WriteableTable(name, tableSchema, collClass) {\n        Table.call(this, name, tableSchema, collClass || WriteableCollection);\n    }\n\n    function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {\n        return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {\n            errorList.push(e);\n            done && done();\n        });\n    }\n\n    function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {\n        // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],\n        // else keysOrTuples must be just an array of keys: [key1, key2, ...].\n        return new Promise(function (resolve, reject) {\n            var len = keysOrTuples.length,\n                lastItem = len - 1;\n            if (len === 0) return resolve();\n            if (!hasDeleteHook) {\n                for (var i = 0; i < len; ++i) {\n                    var req = idbstore.delete(keysOrTuples[i]);\n                    req.onerror = wrap(eventRejectHandler(reject));\n                    if (i === lastItem) req.onsuccess = wrap(function () {\n                        return resolve();\n                    });\n                }\n            } else {\n                var hookCtx,\n                    errorHandler = hookedEventRejectHandler(reject),\n                    successHandler = hookedEventSuccessHandler(null);\n                tryCatch(function () {\n                    for (var i = 0; i < len; ++i) {\n                        hookCtx = { onsuccess: null, onerror: null };\n                        var tuple = keysOrTuples[i];\n                        deletingHook.call(hookCtx, tuple[0], tuple[1], trans);\n                        var req = idbstore.delete(tuple[0]);\n                        req._hookCtx = hookCtx;\n                        req.onerror = errorHandler;\n                        if (i === lastItem) req.onsuccess = hookedEventSuccessHandler(resolve);else req.onsuccess = successHandler;\n                    }\n                }, function (err) {\n                    hookCtx.onerror && hookCtx.onerror(err);\n                    throw err;\n                });\n            }\n        }).uncaught(dbUncaught);\n    }\n\n    derive(WriteableTable).from(Table).extend({\n        bulkDelete: function (keys$$1) {\n            if (this.hook.deleting.fire === nop) {\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                    resolve(bulkDelete(idbstore, trans, keys$$1, false, nop));\n                });\n            } else {\n                return this.where(\':id\').anyOf(keys$$1).delete().then(function () {}); // Resolve with undefined.\n            }\n        },\n        bulkPut: function (objects, keys$$1) {\n            var _this = this;\n\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument");\n                if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");\n                if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");\n                if (objects.length === 0) return resolve(); // Caller provided empty list.\n                var done = function (result) {\n                    if (errorList.length === 0) resolve(result);else reject(new BulkError(_this.name + \'.bulkPut(): \' + errorList.length + \' of \' + numObjs + \' operations failed\', errorList));\n                };\n                var req,\n                    errorList = [],\n                    errorHandler,\n                    numObjs = objects.length,\n                    table = _this;\n                if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {\n                    //\n                    // Standard Bulk (no \'creating\' or \'updating\' hooks to care about)\n                    //\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\n                    for (var i = 0, l = objects.length; i < l; ++i) {\n                        req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);\n                        req.onerror = errorHandler;\n                    }\n                    // Only need to catch success or error on the last operation\n                    // according to the IDB spec.\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\n                    req.onsuccess = eventSuccessHandler(done);\n                } else {\n                    var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) {\n                        return getByKeyPath(o, idbstore.keyPath);\n                    });\n                    // Generate map of {[key]: object}\n                    var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) {\n                        return key != null && [key, objects[i]];\n                    });\n                    var promise = !effectiveKeys ?\n\n                    // Auto-incremented key-less objects only without any keys argument.\n                    table.bulkAdd(objects) :\n\n                    // Keys provided. Either as inbound in provided objects, or as a keys argument.\n                    // Begin with updating those that exists in DB:\n                    table.where(\':id\').anyOf(effectiveKeys.filter(function (key) {\n                        return key != null;\n                    })).modify(function () {\n                        this.value = objectLookup[this.primKey];\n                        objectLookup[this.primKey] = null; // Mark as "don\'t add this"\n                    }).catch(ModifyError, function (e) {\n                        errorList = e.failures; // No need to concat here. These are the first errors added.\n                    }).then(function () {\n                        // Now, let\'s examine which items didnt exist so we can add them:\n                        var objsToAdd = [],\n                            keysToAdd = keys$$1 && [];\n                        // Iterate backwards. Why? Because if same key was used twice, just add the last one.\n                        for (var i = effectiveKeys.length - 1; i >= 0; --i) {\n                            var key = effectiveKeys[i];\n                            if (key == null || objectLookup[key]) {\n                                objsToAdd.push(objects[i]);\n                                keys$$1 && keysToAdd.push(key);\n                                if (key != null) objectLookup[key] = null; // Mark as "dont add again"\n                            }\n                        }\n                        // The items are in reverse order so reverse them before adding.\n                        // Could be important in order to get auto-incremented keys the way the caller\n                        // would expect. Could have used unshift instead of push()/reverse(),\n                        // but: http://jsperf.com/unshift-vs-reverse\n                        objsToAdd.reverse();\n                        keys$$1 && keysToAdd.reverse();\n                        return table.bulkAdd(objsToAdd, keysToAdd);\n                    }).then(function (lastAddedKey) {\n                        // Resolve with key of the last object in given arguments to bulkPut():\n                        var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.\n                        return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;\n                    });\n\n                    promise.then(done).catch(BulkError, function (e) {\n                        // Concat failure from ModifyError and reject using our \'done\' method.\n                        errorList = errorList.concat(e.failures);\n                        done();\n                    }).catch(reject);\n                }\n            }, "locked"); // If called from transaction scope, lock transaction til all steps are done.\n        },\n        bulkAdd: function (objects, keys$$1) {\n            var self = this,\n                creatingHook = this.hook.creating.fire;\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument");\n                if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");\n                if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");\n                if (objects.length === 0) return resolve(); // Caller provided empty list.\n                function done(result) {\n                    if (errorList.length === 0) resolve(result);else reject(new BulkError(self.name + \'.bulkAdd(): \' + errorList.length + \' of \' + numObjs + \' operations failed\', errorList));\n                }\n                var req,\n                    errorList = [],\n                    errorHandler,\n                    successHandler,\n                    numObjs = objects.length;\n                if (creatingHook !== nop) {\n                    //\n                    // There are subscribers to hook(\'creating\')\n                    // Must behave as documented.\n                    //\n                    var keyPath = idbstore.keyPath,\n                        hookCtx;\n                    errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);\n                    successHandler = hookedEventSuccessHandler(null);\n\n                    tryCatch(function () {\n                        for (var i = 0, l = objects.length; i < l; ++i) {\n                            hookCtx = { onerror: null, onsuccess: null };\n                            var key = keys$$1 && keys$$1[i];\n                            var obj = objects[i],\n                                effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined,\n                                keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);\n                            if (effectiveKey == null && keyToUse != null) {\n                                if (keyPath) {\n                                    obj = deepClone(obj);\n                                    setByKeyPath(obj, keyPath, keyToUse);\n                                } else {\n                                    key = keyToUse;\n                                }\n                            }\n                            req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\n                            req._hookCtx = hookCtx;\n                            if (i < l - 1) {\n                                req.onerror = errorHandler;\n                                if (hookCtx.onsuccess) req.onsuccess = successHandler;\n                            }\n                        }\n                    }, function (err) {\n                        hookCtx.onerror && hookCtx.onerror(err);\n                        throw err;\n                    });\n\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);\n                    req.onsuccess = hookedEventSuccessHandler(done);\n                } else {\n                    //\n                    // Standard Bulk (no \'creating\' hook to care about)\n                    //\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\n                    for (var i = 0, l = objects.length; i < l; ++i) {\n                        req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);\n                        req.onerror = errorHandler;\n                    }\n                    // Only need to catch success or error on the last operation\n                    // according to the IDB spec.\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\n                    req.onsuccess = eventSuccessHandler(done);\n                }\n            });\n        },\n        add: function (obj, key) {\n            /// <summary>\n            ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.\n            /// </summary>\n            /// <param name="obj" type="Object">A javascript object to insert</param>\n            /// <param name="key" optional="true">Primary key</param>\n            var creatingHook = this.hook.creating.fire;\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                var hookCtx = { onsuccess: null, onerror: null };\n                if (creatingHook !== nop) {\n                    var effectiveKey = key != null ? key : idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined;\n                    var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when("creating") to generate the key.\n                    if (effectiveKey == null && keyToUse != null) {\n                        // Using "==" and "!=" to check for either null or undefined!\n                        if (idbstore.keyPath) setByKeyPath(obj, idbstore.keyPath, keyToUse);else key = keyToUse;\n                    }\n                }\n                try {\n                    var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\n                    req._hookCtx = hookCtx;\n                    req.onerror = hookedEventRejectHandler(reject);\n                    req.onsuccess = hookedEventSuccessHandler(function (result) {\n                        // TODO: Remove these two lines in next major release (2.0?)\n                        // It\'s no good practice to have side effects on provided parameters\n                        var keyPath = idbstore.keyPath;\n                        if (keyPath) setByKeyPath(obj, keyPath, result);\n                        resolve(result);\n                    });\n                } catch (e) {\n                    if (hookCtx.onerror) hookCtx.onerror(e);\n                    throw e;\n                }\n            });\n        },\n\n        put: function (obj, key) {\n            /// <summary>\n            ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.\n            /// </summary>\n            /// <param name="obj" type="Object">A javascript object to insert or update</param>\n            /// <param name="key" optional="true">Primary key</param>\n            var self = this,\n                creatingHook = this.hook.creating.fire,\n                updatingHook = this.hook.updating.fire;\n            if (creatingHook !== nop || updatingHook !== nop) {\n                //\n                // People listens to when("creating") or when("updating") events!\n                // We must know whether the put operation results in an CREATE or UPDATE.\n                //\n                return this._trans(READWRITE, function (resolve, reject, trans) {\n                    // Since key is optional, make sure we get it from obj if not provided\n                    var effectiveKey = key !== undefined ? key : self.schema.primKey.keyPath && getByKeyPath(obj, self.schema.primKey.keyPath);\n                    if (effectiveKey == null) {\n                        // "== null" means checking for either null or undefined.\n                        // No primary key. Must use add().\n                        self.add(obj).then(resolve, reject);\n                    } else {\n                        // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().\n                        trans._lock(); // Needed because operation is splitted into modify() and add().\n                        // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.\n                        obj = deepClone(obj);\n                        self.where(":id").equals(effectiveKey).modify(function () {\n                            // Replace extisting value with our object\n                            // CRUD event firing handled in WriteableCollection.modify()\n                            this.value = obj;\n                        }).then(function (count) {\n                            if (count === 0) {\n                                // Object\'s key was not found. Add the object instead.\n                                // CRUD event firing will be done in add()\n                                return self.add(obj, key); // Resolving with another Promise. Returned Promise will then resolve with the new key.\n                            } else {\n                                return effectiveKey; // Resolve with the provided key.\n                            }\n                        }).finally(function () {\n                            trans._unlock();\n                        }).then(resolve, reject);\n                    }\n                });\n            } else {\n                // Use the standard IDB put() method.\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = function (ev) {\n                        var keyPath = idbstore.keyPath;\n                        if (keyPath) setByKeyPath(obj, keyPath, ev.target.result);\n                        resolve(req.result);\n                    };\n                });\n            }\n        },\n\n        \'delete\': function (key) {\n            /// <param name="key">Primary key of the object to delete</param>\n            if (this.hook.deleting.subscribers.length) {\n                // People listens to when("deleting") event. Must implement delete using WriteableCollection.delete() that will\n                // call the CRUD event. Only WriteableCollection.delete() will know whether an object was actually deleted.\n                return this.where(":id").equals(key).delete();\n            } else {\n                // No one listens. Use standard IDB delete() method.\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = idbstore.delete(key);\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n                });\n            }\n        },\n\n        clear: function () {\n            if (this.hook.deleting.subscribers.length) {\n                // People listens to when("deleting") event. Must implement delete using WriteableCollection.delete() that will\n                // call the CRUD event. Only WriteableCollection.delete() will knows which objects that are actually deleted.\n                return this.toCollection().delete();\n            } else {\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = idbstore.clear();\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n                });\n            }\n        },\n\n        update: function (keyOrObject, modifications) {\n            if (typeof modifications !== \'object\' || isArray(modifications)) throw new exceptions.InvalidArgument("Modifications must be an object.");\n            if (typeof keyOrObject === \'object\' && !isArray(keyOrObject)) {\n                // object to modify. Also modify given object with the modifications:\n                keys(modifications).forEach(function (keyPath) {\n                    setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);\n                });\n                var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);\n                if (key === undefined) return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"), dbUncaught);\n                return this.where(":id").equals(key).modify(modifications);\n            } else {\n                // key to modify\n                return this.where(":id").equals(keyOrObject).modify(modifications);\n            }\n        }\n    });\n\n    //\n    //\n    //\n    // Transaction Class\n    //\n    //\n    //\n    function Transaction(mode, storeNames, dbschema, parent) {\n        var _this2 = this;\n\n        /// <summary>\n        ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.\n        /// </summary>\n        /// <param name="mode" type="String">Any of "readwrite" or "readonly"</param>\n        /// <param name="storeNames" type="Array">Array of table names to operate on</param>\n        this.db = db;\n        this.mode = mode;\n        this.storeNames = storeNames;\n        this.idbtrans = null;\n        this.on = Events(this, "complete", "error", "abort");\n        this.parent = parent || null;\n        this.active = true;\n        this._tables = null;\n        this._reculock = 0;\n        this._blockedFuncs = [];\n        this._psd = null;\n        this._dbschema = dbschema;\n        this._resolve = null;\n        this._reject = null;\n        this._completion = new Promise(function (resolve, reject) {\n            _this2._resolve = resolve;\n            _this2._reject = reject;\n        }).uncaught(dbUncaught);\n\n        this._completion.then(function () {\n            _this2.on.complete.fire();\n        }, function (e) {\n            _this2.on.error.fire(e);\n            _this2.parent ? _this2.parent._reject(e) : _this2.active && _this2.idbtrans && _this2.idbtrans.abort();\n            _this2.active = false;\n            return rejection(e); // Indicate we actually DO NOT catch this error.\n        });\n    }\n\n    props(Transaction.prototype, {\n        //\n        // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)\n        //\n        _lock: function () {\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\n            // Temporary set all requests into a pending queue if they are called before database is ready.\n            ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)\n            if (this._reculock === 1 && !PSD.global) PSD.lockOwnerFor = this;\n            return this;\n        },\n        _unlock: function () {\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\n            if (--this._reculock === 0) {\n                if (!PSD.global) PSD.lockOwnerFor = null;\n                while (this._blockedFuncs.length > 0 && !this._locked()) {\n                    var fnAndPSD = this._blockedFuncs.shift();\n                    try {\n                        usePSD(fnAndPSD[1], fnAndPSD[0]);\n                    } catch (e) {}\n                }\n            }\n            return this;\n        },\n        _locked: function () {\n            // Checks if any write-lock is applied on this transaction.\n            // To simplify the Dexie API for extension implementations, we support recursive locks.\n            // This is accomplished by using "Promise Specific Data" (PSD).\n            // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).\n            // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():\n            //         * callback given to the Promise() constructor  (function (resolve, reject){...})\n            //         * callbacks given to then()/catch()/finally() methods (function (value){...})\n            // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.\n            // Derivation is done so that the inner PSD __proto__ points to the outer PSD.\n            // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.\n            return this._reculock && PSD.lockOwnerFor !== this;\n        },\n        create: function (idbtrans) {\n            var _this3 = this;\n\n            assert(!this.idbtrans);\n            if (!idbtrans && !idbdb) {\n                switch (dbOpenError && dbOpenError.name) {\n                    case "DatabaseClosedError":\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\n                        throw new exceptions.DatabaseClosed(dbOpenError);\n                    case "MissingAPIError":\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\n                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);\n                    default:\n                        // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!\n                        throw new exceptions.OpenFailed(dbOpenError);\n                }\n            }\n            if (!this.active) throw new exceptions.TransactionInactive();\n            assert(this._completion._state === null);\n\n            idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);\n            idbtrans.onerror = wrap(function (ev) {\n                preventDefault(ev); // Prohibit default bubbling to window.error\n                _this3._reject(idbtrans.error);\n            });\n            idbtrans.onabort = wrap(function (ev) {\n                preventDefault(ev);\n                _this3.active && _this3._reject(new exceptions.Abort());\n                _this3.active = false;\n                _this3.on("abort").fire(ev);\n            });\n            idbtrans.oncomplete = wrap(function () {\n                _this3.active = false;\n                _this3._resolve();\n            });\n            return this;\n        },\n        _promise: function (mode, fn, bWriteLock) {\n            var self = this;\n            var p = self._locked() ?\n            // Read lock always. Transaction is write-locked. Wait for mutex.\n            new Promise(function (resolve, reject) {\n                self._blockedFuncs.push([function () {\n                    self._promise(mode, fn, bWriteLock).then(resolve, reject);\n                }, PSD]);\n            }) : newScope(function () {\n                var p_ = self.active ? new Promise(function (resolve, reject) {\n                    if (mode === READWRITE && self.mode !== READWRITE) throw new exceptions.ReadOnly("Transaction is readonly");\n                    if (!self.idbtrans && mode) self.create();\n                    if (bWriteLock) self._lock(); // Write lock if write operation is requested\n                    fn(resolve, reject, self);\n                }) : rejection(new exceptions.TransactionInactive());\n                if (self.active && bWriteLock) p_.finally(function () {\n                    self._unlock();\n                });\n                return p_;\n            });\n\n            p._lib = true;\n            return p.uncaught(dbUncaught);\n        },\n\n        //\n        // Transaction Public Properties and Methods\n        //\n        abort: function () {\n            this.active && this._reject(new exceptions.Abort());\n            this.active = false;\n        },\n\n        tables: {\n            get: deprecated("Transaction.tables", function () {\n                return arrayToObject(this.storeNames, function (name) {\n                    return [name, allTables[name]];\n                });\n            }, "Use db.tables()")\n        },\n\n        complete: deprecated("Transaction.complete()", function (cb) {\n            return this.on("complete", cb);\n        }),\n\n        error: deprecated("Transaction.error()", function (cb) {\n            return this.on("error", cb);\n        }),\n\n        table: deprecated("Transaction.table()", function (name) {\n            if (this.storeNames.indexOf(name) === -1) throw new exceptions.InvalidTable("Table " + name + " not in transaction");\n            return allTables[name];\n        })\n\n    });\n\n    //\n    //\n    //\n    // WhereClause\n    //\n    //\n    //\n    function WhereClause(table, index, orCollection) {\n        /// <param name="table" type="Table"></param>\n        /// <param name="index" type="String" optional="true"></param>\n        /// <param name="orCollection" type="Collection" optional="true"></param>\n        this._ctx = {\n            table: table,\n            index: index === ":id" ? null : index,\n            collClass: table._collClass,\n            or: orCollection\n        };\n    }\n\n    props(WhereClause.prototype, function () {\n\n        // WhereClause private methods\n\n        function fail(collectionOrWhereClause, err, T) {\n            var collection = collectionOrWhereClause instanceof WhereClause ? new collectionOrWhereClause._ctx.collClass(collectionOrWhereClause) : collectionOrWhereClause;\n\n            collection._ctx.error = T ? new T(err) : new TypeError(err);\n            return collection;\n        }\n\n        function emptyCollection(whereClause) {\n            return new whereClause._ctx.collClass(whereClause, function () {\n                return IDBKeyRange.only("");\n            }).limit(0);\n        }\n\n        function upperFactory(dir) {\n            return dir === "next" ? function (s) {\n                return s.toUpperCase();\n            } : function (s) {\n                return s.toLowerCase();\n            };\n        }\n        function lowerFactory(dir) {\n            return dir === "next" ? function (s) {\n                return s.toLowerCase();\n            } : function (s) {\n                return s.toUpperCase();\n            };\n        }\n        function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {\n            var length = Math.min(key.length, lowerNeedle.length);\n            var llp = -1;\n            for (var i = 0; i < length; ++i) {\n                var lwrKeyChar = lowerKey[i];\n                if (lwrKeyChar !== lowerNeedle[i]) {\n                    if (cmp(key[i], upperNeedle[i]) < 0) return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);\n                    if (cmp(key[i], lowerNeedle[i]) < 0) return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);\n                    if (llp >= 0) return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);\n                    return null;\n                }\n                if (cmp(key[i], lwrKeyChar) < 0) llp = i;\n            }\n            if (length < lowerNeedle.length && dir === "next") return key + upperNeedle.substr(key.length);\n            if (length < key.length && dir === "prev") return key.substr(0, upperNeedle.length);\n            return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);\n        }\n\n        function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {\n            /// <param name="needles" type="Array" elementType="String"></param>\n            var upper,\n                lower,\n                compare,\n                upperNeedles,\n                lowerNeedles,\n                direction,\n                nextKeySuffix,\n                needlesLen = needles.length;\n            if (!needles.every(function (s) {\n                return typeof s === \'string\';\n            })) {\n                return fail(whereClause, STRING_EXPECTED);\n            }\n            function initDirection(dir) {\n                upper = upperFactory(dir);\n                lower = lowerFactory(dir);\n                compare = dir === "next" ? simpleCompare : simpleCompareReverse;\n                var needleBounds = needles.map(function (needle) {\n                    return { lower: lower(needle), upper: upper(needle) };\n                }).sort(function (a, b) {\n                    return compare(a.lower, b.lower);\n                });\n                upperNeedles = needleBounds.map(function (nb) {\n                    return nb.upper;\n                });\n                lowerNeedles = needleBounds.map(function (nb) {\n                    return nb.lower;\n                });\n                direction = dir;\n                nextKeySuffix = dir === "next" ? "" : suffix;\n            }\n            initDirection("next");\n\n            var c = new whereClause._ctx.collClass(whereClause, function () {\n                return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);\n            });\n\n            c._ondirectionchange = function (direction) {\n                // This event onlys occur before filter is called the first time.\n                initDirection(direction);\n            };\n\n            var firstPossibleNeedle = 0;\n\n            c._addAlgorithm(function (cursor, advance, resolve) {\n                /// <param name="cursor" type="IDBCursor"></param>\n                /// <param name="advance" type="Function"></param>\n                /// <param name="resolve" type="Function"></param>\n                var key = cursor.key;\n                if (typeof key !== \'string\') return false;\n                var lowerKey = lower(key);\n                if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {\n                    return true;\n                } else {\n                    var lowestPossibleCasing = null;\n                    for (var i = firstPossibleNeedle; i < needlesLen; ++i) {\n                        var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);\n                        if (casing === null && lowestPossibleCasing === null) firstPossibleNeedle = i + 1;else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {\n                            lowestPossibleCasing = casing;\n                        }\n                    }\n                    if (lowestPossibleCasing !== null) {\n                        advance(function () {\n                            cursor.continue(lowestPossibleCasing + nextKeySuffix);\n                        });\n                    } else {\n                        advance(resolve);\n                    }\n                    return false;\n                }\n            });\n            return c;\n        }\n\n        //\n        // WhereClause public methods\n        //\n        return {\n            between: function (lower, upper, includeLower, includeUpper) {\n                /// <summary>\n                ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.\n                /// </summary>\n                /// <param name="lower"></param>\n                /// <param name="upper"></param>\n                /// <param name="includeLower" optional="true">Whether items that equals lower should be included. Default true.</param>\n                /// <param name="includeUpper" optional="true">Whether items that equals upper should be included. Default false.</param>\n                /// <returns type="Collection"></returns>\n                includeLower = includeLower !== false; // Default to true\n                includeUpper = includeUpper === true; // Default to false\n                try {\n                    if (cmp(lower, upper) > 0 || cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)) return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.\n                    return new this._ctx.collClass(this, function () {\n                        return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper);\n                    });\n                } catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n            },\n            equals: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.only(value);\n                });\n            },\n            above: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.lowerBound(value, true);\n                });\n            },\n            aboveOrEqual: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.lowerBound(value);\n                });\n            },\n            below: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.upperBound(value, true);\n                });\n            },\n            belowOrEqual: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.upperBound(value);\n                });\n            },\n            startsWith: function (str) {\n                /// <param name="str" type="String"></param>\n                if (typeof str !== \'string\') return fail(this, STRING_EXPECTED);\n                return this.between(str, str + maxString, true, true);\n            },\n            startsWithIgnoreCase: function (str) {\n                /// <param name="str" type="String"></param>\n                if (str === "") return this.startsWith(str);\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return x.indexOf(a[0]) === 0;\n                }, [str], maxString);\n            },\n            equalsIgnoreCase: function (str) {\n                /// <param name="str" type="String"></param>\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return x === a[0];\n                }, [str], "");\n            },\n            anyOfIgnoreCase: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0) return emptyCollection(this);\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return a.indexOf(x) !== -1;\n                }, set, "");\n            },\n            startsWithAnyOfIgnoreCase: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0) return emptyCollection(this);\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return a.some(function (n) {\n                        return x.indexOf(n) === 0;\n                    });\n                }, set, maxString);\n            },\n            anyOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                var compare = ascending;\n                try {\n                    set.sort(compare);\n                } catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n                if (set.length === 0) return emptyCollection(this);\n                var c = new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.bound(set[0], set[set.length - 1]);\n                });\n\n                c._ondirectionchange = function (direction) {\n                    compare = direction === "next" ? ascending : descending;\n                    set.sort(compare);\n                };\n                var i = 0;\n                c._addAlgorithm(function (cursor, advance, resolve) {\n                    var key = cursor.key;\n                    while (compare(key, set[i]) > 0) {\n                        // The cursor has passed beyond this key. Check next.\n                        ++i;\n                        if (i === set.length) {\n                            // There is no next. Stop searching.\n                            advance(resolve);\n                            return false;\n                        }\n                    }\n                    if (compare(key, set[i]) === 0) {\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\n                        return true;\n                    } else {\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\n                        advance(function () {\n                            cursor.continue(set[i]);\n                        });\n                        return false;\n                    }\n                });\n                return c;\n            },\n\n            notEqual: function (value) {\n                return this.inAnyRange([[-Infinity, value], [value, maxKey]], { includeLowers: false, includeUppers: false });\n            },\n\n            noneOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0) return new this._ctx.collClass(this); // Return entire collection.\n                try {\n                    set.sort(ascending);\n                } catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n                // Transform ["a","b","c"] to a set of ranges for between/above/below: [[-Infinity,"a"], ["a","b"], ["b","c"], ["c",maxKey]]\n                var ranges = set.reduce(function (res, val) {\n                    return res ? res.concat([[res[res.length - 1][1], val]]) : [[-Infinity, val]];\n                }, null);\n                ranges.push([set[set.length - 1], maxKey]);\n                return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });\n            },\n\n            /** Filter out values withing given set of ranges.\r\n            * Example, give children and elders a rebate of 50%:\r\n            *\r\n            *   db.friends.where(\'age\').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});\r\n            *\r\n            * @param {(string|number|Date|Array)[][]} ranges\r\n            * @param {{includeLowers: boolean, includeUppers: boolean}} options\r\n            */\n            inAnyRange: function (ranges, options) {\n                var ctx = this._ctx;\n                if (ranges.length === 0) return emptyCollection(this);\n                if (!ranges.every(function (range) {\n                    return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0;\n                })) {\n                    return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);\n                }\n                var includeLowers = !options || options.includeLowers !== false; // Default to true\n                var includeUppers = options && options.includeUppers === true; // Default to false\n\n                function addRange(ranges, newRange) {\n                    for (var i = 0, l = ranges.length; i < l; ++i) {\n                        var range = ranges[i];\n                        if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {\n                            range[0] = min(range[0], newRange[0]);\n                            range[1] = max(range[1], newRange[1]);\n                            break;\n                        }\n                    }\n                    if (i === l) ranges.push(newRange);\n                    return ranges;\n                }\n\n                var sortDirection = ascending;\n                function rangeSorter(a, b) {\n                    return sortDirection(a[0], b[0]);\n                }\n\n                // Join overlapping ranges\n                var set;\n                try {\n                    set = ranges.reduce(addRange, []);\n                    set.sort(rangeSorter);\n                } catch (ex) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n\n                var i = 0;\n                var keyIsBeyondCurrentEntry = includeUppers ? function (key) {\n                    return ascending(key, set[i][1]) > 0;\n                } : function (key) {\n                    return ascending(key, set[i][1]) >= 0;\n                };\n\n                var keyIsBeforeCurrentEntry = includeLowers ? function (key) {\n                    return descending(key, set[i][0]) > 0;\n                } : function (key) {\n                    return descending(key, set[i][0]) >= 0;\n                };\n\n                function keyWithinCurrentRange(key) {\n                    return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);\n                }\n\n                var checkKey = keyIsBeyondCurrentEntry;\n\n                var c = new ctx.collClass(this, function () {\n                    return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);\n                });\n\n                c._ondirectionchange = function (direction) {\n                    if (direction === "next") {\n                        checkKey = keyIsBeyondCurrentEntry;\n                        sortDirection = ascending;\n                    } else {\n                        checkKey = keyIsBeforeCurrentEntry;\n                        sortDirection = descending;\n                    }\n                    set.sort(rangeSorter);\n                };\n\n                c._addAlgorithm(function (cursor, advance, resolve) {\n                    var key = cursor.key;\n                    while (checkKey(key)) {\n                        // The cursor has passed beyond this key. Check next.\n                        ++i;\n                        if (i === set.length) {\n                            // There is no next. Stop searching.\n                            advance(resolve);\n                            return false;\n                        }\n                    }\n                    if (keyWithinCurrentRange(key)) {\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\n                        return true;\n                    } else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {\n                        // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.\n                        // Continue to next key but don\'t include this one.\n                        return false;\n                    } else {\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\n                        advance(function () {\n                            if (sortDirection === ascending) cursor.continue(set[i][0]);else cursor.continue(set[i][1]);\n                        });\n                        return false;\n                    }\n                });\n                return c;\n            },\n            startsWithAnyOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n\n                if (!set.every(function (s) {\n                    return typeof s === \'string\';\n                })) {\n                    return fail(this, "startsWithAnyOf() only works with strings");\n                }\n                if (set.length === 0) return emptyCollection(this);\n\n                return this.inAnyRange(set.map(function (str) {\n                    return [str, str + maxString];\n                }));\n            }\n        };\n    });\n\n    //\n    //\n    //\n    // Collection Class\n    //\n    //\n    //\n    function Collection(whereClause, keyRangeGenerator) {\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name="whereClause" type="WhereClause">Where clause instance</param>\n        /// <param name="keyRangeGenerator" value="function(){ return IDBKeyRange.bound(0,1);}" optional="true"></param>\n        var keyRange = null,\n            error = null;\n        if (keyRangeGenerator) try {\n            keyRange = keyRangeGenerator();\n        } catch (ex) {\n            error = ex;\n        }\n\n        var whereCtx = whereClause._ctx,\n            table = whereCtx.table;\n        this._ctx = {\n            table: table,\n            index: whereCtx.index,\n            isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,\n            range: keyRange,\n            keysOnly: false,\n            dir: "next",\n            unique: "",\n            algorithm: null,\n            filter: null,\n            replayFilter: null,\n            justLimit: true, // True if a replayFilter is just a filter that performs a "limit" operation (or none at all)\n            isMatch: null,\n            offset: 0,\n            limit: Infinity,\n            error: error, // If set, any promise must be rejected with this error\n            or: whereCtx.or,\n            valueMapper: table.hook.reading.fire\n        };\n    }\n\n    function isPlainKeyRange(ctx, ignoreLimitFilter) {\n        return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);\n    }\n\n    props(Collection.prototype, function () {\n\n        //\n        // Collection Private Functions\n        //\n\n        function addFilter(ctx, fn) {\n            ctx.filter = combine(ctx.filter, fn);\n        }\n\n        function addReplayFilter(ctx, factory, isLimitFilter) {\n            var curr = ctx.replayFilter;\n            ctx.replayFilter = curr ? function () {\n                return combine(curr(), factory());\n            } : factory;\n            ctx.justLimit = isLimitFilter && !curr;\n        }\n\n        function addMatchFilter(ctx, fn) {\n            ctx.isMatch = combine(ctx.isMatch, fn);\n        }\n\n        /** @param ctx {\r\n         *      isPrimKey: boolean,\r\n         *      table: Table,\r\n         *      index: string\r\n         * }\r\n         * @param store IDBObjectStore\r\n         **/\n        function getIndexOrStore(ctx, store) {\n            if (ctx.isPrimKey) return store;\n            var indexSpec = ctx.table.schema.idxByName[ctx.index];\n            if (!indexSpec) throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + store.name + " is not indexed");\n            return store.index(indexSpec.name);\n        }\n\n        /** @param ctx {\r\n         *      isPrimKey: boolean,\r\n         *      table: Table,\r\n         *      index: string,\r\n         *      keysOnly: boolean,\r\n         *      range?: IDBKeyRange,\r\n         *      dir: "next" | "prev"\r\n         * }\r\n         */\n        function openCursor(ctx, store) {\n            var idxOrStore = getIndexOrStore(ctx, store);\n            return ctx.keysOnly && \'openKeyCursor\' in idxOrStore ? idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) : idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);\n        }\n\n        function iter(ctx, fn, resolve, reject, idbstore) {\n            var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;\n            if (!ctx.or) {\n                iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);\n            } else (function () {\n                var set = {};\n                var resolved = 0;\n\n                function resolveboth() {\n                    if (++resolved === 2) resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.\n                }\n\n                function union(item, cursor, advance) {\n                    if (!filter || filter(cursor, advance, resolveboth, reject)) {\n                        var key = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string\n                        if (!hasOwn(set, key)) {\n                            set[key] = true;\n                            fn(item, cursor, advance);\n                        }\n                    }\n                }\n\n                ctx.or._iterate(union, resolveboth, reject, idbstore);\n                iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);\n            })();\n        }\n        function getInstanceTemplate(ctx) {\n            return ctx.table.schema.instanceTemplate;\n        }\n\n        return {\n\n            //\n            // Collection Protected Functions\n            //\n\n            _read: function (fn, cb) {\n                var ctx = this._ctx;\n                if (ctx.error) return ctx.table._trans(null, function rejector(resolve, reject) {\n                    reject(ctx.error);\n                });else return ctx.table._idbstore(READONLY, fn).then(cb);\n            },\n            _write: function (fn) {\n                var ctx = this._ctx;\n                if (ctx.error) return ctx.table._trans(null, function rejector(resolve, reject) {\n                    reject(ctx.error);\n                });else return ctx.table._idbstore(READWRITE, fn, "locked"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.\n            },\n            _addAlgorithm: function (fn) {\n                var ctx = this._ctx;\n                ctx.algorithm = combine(ctx.algorithm, fn);\n            },\n\n            _iterate: function (fn, resolve, reject, idbstore) {\n                return iter(this._ctx, fn, resolve, reject, idbstore);\n            },\n\n            clone: function (props$$1) {\n                var rv = Object.create(this.constructor.prototype),\n                    ctx = Object.create(this._ctx);\n                if (props$$1) extend(ctx, props$$1);\n                rv._ctx = ctx;\n                return rv;\n            },\n\n            raw: function () {\n                this._ctx.valueMapper = null;\n                return this;\n            },\n\n            //\n            // Collection Public methods\n            //\n\n            each: function (fn) {\n                var ctx = this._ctx;\n\n                if (fake) {\n                    var item = getInstanceTemplate(ctx),\n                        primKeyPath = ctx.table.schema.primKey.keyPath,\n                        key = getByKeyPath(item, ctx.index ? ctx.table.schema.idxByName[ctx.index].keyPath : primKeyPath),\n                        primaryKey = getByKeyPath(item, primKeyPath);\n                    fn(item, { key: key, primaryKey: primaryKey });\n                }\n\n                return this._read(function (resolve, reject, idbstore) {\n                    iter(ctx, fn, resolve, reject, idbstore);\n                });\n            },\n\n            count: function (cb) {\n                if (fake) return Promise.resolve(0).then(cb);\n                var ctx = this._ctx;\n\n                if (isPlainKeyRange(ctx, true)) {\n                    // This is a plain key range. We can use the count() method if the index.\n                    return this._read(function (resolve, reject, idbstore) {\n                        var idx = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.range ? idx.count(ctx.range) : idx.count();\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = function (e) {\n                            resolve(Math.min(e.target.result, ctx.limit));\n                        };\n                    }, cb);\n                } else {\n                    // Algorithms, filters or expressions are applied. Need to count manually.\n                    var count = 0;\n                    return this._read(function (resolve, reject, idbstore) {\n                        iter(ctx, function () {\n                            ++count;return false;\n                        }, function () {\n                            resolve(count);\n                        }, reject, idbstore);\n                    }, cb);\n                }\n            },\n\n            sortBy: function (keyPath, cb) {\n                /// <param name="keyPath" type="String"></param>\n                var parts = keyPath.split(\'.\').reverse(),\n                    lastPart = parts[0],\n                    lastIndex = parts.length - 1;\n                function getval(obj, i) {\n                    if (i) return getval(obj[parts[i]], i - 1);\n                    return obj[lastPart];\n                }\n                var order = this._ctx.dir === "next" ? 1 : -1;\n\n                function sorter(a, b) {\n                    var aVal = getval(a, lastIndex),\n                        bVal = getval(b, lastIndex);\n                    return aVal < bVal ? -order : aVal > bVal ? order : 0;\n                }\n                return this.toArray(function (a) {\n                    return a.sort(sorter);\n                }).then(cb);\n            },\n\n            toArray: function (cb) {\n                var ctx = this._ctx;\n                return this._read(function (resolve, reject, idbstore) {\n                    fake && resolve([getInstanceTemplate(ctx)]);\n                    if (hasGetAll && ctx.dir === \'next\' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n                        // Special optimation if we could use IDBObjectStore.getAll() or\n                        // IDBKeyRange.getAll():\n                        var readingHook = ctx.table.hook.reading.fire;\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.limit < Infinity ? idxOrStore.getAll(ctx.range, ctx.limit) : idxOrStore.getAll(ctx.range);\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = readingHook === mirror ? eventSuccessHandler(resolve) : wrap(eventSuccessHandler(function (res) {\n                            try {\n                                resolve(res.map(readingHook));\n                            } catch (e) {\n                                reject(e);\n                            }\n                        }));\n                    } else {\n                        // Getting array through a cursor.\n                        var a = [];\n                        iter(ctx, function (item) {\n                            a.push(item);\n                        }, function arrayComplete() {\n                            resolve(a);\n                        }, reject, idbstore);\n                    }\n                }, cb);\n            },\n\n            offset: function (offset) {\n                var ctx = this._ctx;\n                if (offset <= 0) return this;\n                ctx.offset += offset; // For count()\n                if (isPlainKeyRange(ctx)) {\n                    addReplayFilter(ctx, function () {\n                        var offsetLeft = offset;\n                        return function (cursor, advance) {\n                            if (offsetLeft === 0) return true;\n                            if (offsetLeft === 1) {\n                                --offsetLeft;return false;\n                            }\n                            advance(function () {\n                                cursor.advance(offsetLeft);\n                                offsetLeft = 0;\n                            });\n                            return false;\n                        };\n                    });\n                } else {\n                    addReplayFilter(ctx, function () {\n                        var offsetLeft = offset;\n                        return function () {\n                            return --offsetLeft < 0;\n                        };\n                    });\n                }\n                return this;\n            },\n\n            limit: function (numRows) {\n                this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()\n                addReplayFilter(this._ctx, function () {\n                    var rowsLeft = numRows;\n                    return function (cursor, advance, resolve) {\n                        if (--rowsLeft <= 0) advance(resolve); // Stop after this item has been included\n                        return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.\n                    };\n                }, true);\n                return this;\n            },\n\n            until: function (filterFunction, bIncludeStopEntry) {\n                var ctx = this._ctx;\n                fake && filterFunction(getInstanceTemplate(ctx));\n                addFilter(this._ctx, function (cursor, advance, resolve) {\n                    if (filterFunction(cursor.value)) {\n                        advance(resolve);\n                        return bIncludeStopEntry;\n                    } else {\n                        return true;\n                    }\n                });\n                return this;\n            },\n\n            first: function (cb) {\n                return this.limit(1).toArray(function (a) {\n                    return a[0];\n                }).then(cb);\n            },\n\n            last: function (cb) {\n                return this.reverse().first(cb);\n            },\n\n            filter: function (filterFunction) {\n                /// <param name="jsFunctionFilter" type="Function">function(val){return true/false}</param>\n                fake && filterFunction(getInstanceTemplate(this._ctx));\n                addFilter(this._ctx, function (cursor) {\n                    return filterFunction(cursor.value);\n                });\n                // match filters not used in Dexie.js but can be used by 3rd part libraries to test a\n                // collection for a match without querying DB. Used by Dexie.Observable.\n                addMatchFilter(this._ctx, filterFunction);\n                return this;\n            },\n\n            and: function (filterFunction) {\n                return this.filter(filterFunction);\n            },\n\n            or: function (indexName) {\n                return new WhereClause(this._ctx.table, indexName, this);\n            },\n\n            reverse: function () {\n                this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";\n                if (this._ondirectionchange) this._ondirectionchange(this._ctx.dir);\n                return this;\n            },\n\n            desc: function () {\n                return this.reverse();\n            },\n\n            eachKey: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                return this.each(function (val, cursor) {\n                    cb(cursor.key, cursor);\n                });\n            },\n\n            eachUniqueKey: function (cb) {\n                this._ctx.unique = "unique";\n                return this.eachKey(cb);\n            },\n\n            eachPrimaryKey: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                return this.each(function (val, cursor) {\n                    cb(cursor.primaryKey, cursor);\n                });\n            },\n\n            keys: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                var a = [];\n                return this.each(function (item, cursor) {\n                    a.push(cursor.key);\n                }).then(function () {\n                    return a;\n                }).then(cb);\n            },\n\n            primaryKeys: function (cb) {\n                var ctx = this._ctx;\n                if (hasGetAll && ctx.dir === \'next\' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n                    // Special optimation if we could use IDBObjectStore.getAllKeys() or\n                    // IDBKeyRange.getAllKeys():\n                    return this._read(function (resolve, reject, idbstore) {\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.limit < Infinity ? idxOrStore.getAllKeys(ctx.range, ctx.limit) : idxOrStore.getAllKeys(ctx.range);\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = eventSuccessHandler(resolve);\n                    }).then(cb);\n                }\n                ctx.keysOnly = !ctx.isMatch;\n                var a = [];\n                return this.each(function (item, cursor) {\n                    a.push(cursor.primaryKey);\n                }).then(function () {\n                    return a;\n                }).then(cb);\n            },\n\n            uniqueKeys: function (cb) {\n                this._ctx.unique = "unique";\n                return this.keys(cb);\n            },\n\n            firstKey: function (cb) {\n                return this.limit(1).keys(function (a) {\n                    return a[0];\n                }).then(cb);\n            },\n\n            lastKey: function (cb) {\n                return this.reverse().firstKey(cb);\n            },\n\n            distinct: function () {\n                var ctx = this._ctx,\n                    idx = ctx.index && ctx.table.schema.idxByName[ctx.index];\n                if (!idx || !idx.multi) return this; // distinct() only makes differencies on multiEntry indexes.\n                var set = {};\n                addFilter(this._ctx, function (cursor) {\n                    var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string\n                    var found = hasOwn(set, strKey);\n                    set[strKey] = true;\n                    return !found;\n                });\n                return this;\n            }\n        };\n    });\n\n    //\n    //\n    // WriteableCollection Class\n    //\n    //\n    function WriteableCollection() {\n        Collection.apply(this, arguments);\n    }\n\n    derive(WriteableCollection).from(Collection).extend({\n\n        //\n        // WriteableCollection Public Methods\n        //\n\n        modify: function (changes) {\n            var self = this,\n                ctx = this._ctx,\n                hook = ctx.table.hook,\n                updatingHook = hook.updating.fire,\n                deletingHook = hook.deleting.fire;\n\n            fake && typeof changes === \'function\' && changes.call({ value: ctx.table.schema.instanceTemplate }, ctx.table.schema.instanceTemplate);\n\n            return this._write(function (resolve, reject, idbstore, trans) {\n                var modifyer;\n                if (typeof changes === \'function\') {\n                    // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)\n                    if (updatingHook === nop && deletingHook === nop) {\n                        // Noone cares about what is being changed. Just let the modifier function be the given argument as is.\n                        modifyer = changes;\n                    } else {\n                        // People want to know exactly what is being modified or deleted.\n                        // Let modifyer be a proxy function that finds out what changes the caller is actually doing\n                        // and call the hooks accordingly!\n                        modifyer = function (item) {\n                            var origItem = deepClone(item); // Clone the item first so we can compare laters.\n                            if (changes.call(this, item, this) === false) return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)\n                            if (!hasOwn(this, "value")) {\n                                // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.\n                                deletingHook.call(this, this.primKey, item, trans);\n                            } else {\n                                // No deletion. Check what was changed\n                                var objectDiff = getObjectDiff(origItem, this.value);\n                                var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);\n                                if (additionalChanges) {\n                                    // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.\n                                    item = this.value;\n                                    keys(additionalChanges).forEach(function (keyPath) {\n                                        setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\n                                    });\n                                }\n                            }\n                        };\n                    }\n                } else if (updatingHook === nop) {\n                    // changes is a set of {keyPath: value} and no one is listening to the updating hook.\n                    var keyPaths = keys(changes);\n                    var numKeys = keyPaths.length;\n                    modifyer = function (item) {\n                        var anythingModified = false;\n                        for (var i = 0; i < numKeys; ++i) {\n                            var keyPath = keyPaths[i],\n                                val = changes[keyPath];\n                            if (getByKeyPath(item, keyPath) !== val) {\n                                setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\n                                anythingModified = true;\n                            }\n                        }\n                        return anythingModified;\n                    };\n                } else {\n                    // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and\n                    // allow it to add additional modifications to make.\n                    var origChanges = changes;\n                    changes = shallowClone(origChanges); // Let\'s work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.\n                    modifyer = function (item) {\n                        var anythingModified = false;\n                        var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);\n                        if (additionalChanges) extend(changes, additionalChanges);\n                        keys(changes).forEach(function (keyPath) {\n                            var val = changes[keyPath];\n                            if (getByKeyPath(item, keyPath) !== val) {\n                                setByKeyPath(item, keyPath, val);\n                                anythingModified = true;\n                            }\n                        });\n                        if (additionalChanges) changes = shallowClone(origChanges); // Restore original changes for next iteration\n                        return anythingModified;\n                    };\n                }\n\n                var count = 0;\n                var successCount = 0;\n                var iterationComplete = false;\n                var failures = [];\n                var failKeys = [];\n                var currentKey = null;\n\n                function modifyItem(item, cursor) {\n                    currentKey = cursor.primaryKey;\n                    var thisContext = {\n                        primKey: cursor.primaryKey,\n                        value: item,\n                        onsuccess: null,\n                        onerror: null\n                    };\n\n                    function onerror(e) {\n                        failures.push(e);\n                        failKeys.push(thisContext.primKey);\n                        checkFinished();\n                        return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction\n                    }\n\n                    if (modifyer.call(thisContext, item, thisContext) !== false) {\n                        // If a callback explicitely returns false, do not perform the update!\n                        var bDelete = !hasOwn(thisContext, "value");\n                        ++count;\n                        tryCatch(function () {\n                            var req = bDelete ? cursor.delete() : cursor.update(thisContext.value);\n                            req._hookCtx = thisContext;\n                            req.onerror = hookedEventRejectHandler(onerror);\n                            req.onsuccess = hookedEventSuccessHandler(function () {\n                                ++successCount;\n                                checkFinished();\n                            });\n                        }, onerror);\n                    } else if (thisContext.onsuccess) {\n                        // Hook will expect either onerror or onsuccess to always be called!\n                        thisContext.onsuccess(thisContext.value);\n                    }\n                }\n\n                function doReject(e) {\n                    if (e) {\n                        failures.push(e);\n                        failKeys.push(currentKey);\n                    }\n                    return reject(new ModifyError("Error modifying one or more objects", failures, successCount, failKeys));\n                }\n\n                function checkFinished() {\n                    if (iterationComplete && successCount + failures.length === count) {\n                        if (failures.length > 0) doReject();else resolve(successCount);\n                    }\n                }\n                self.clone().raw()._iterate(modifyItem, function () {\n                    iterationComplete = true;\n                    checkFinished();\n                }, doReject, idbstore);\n            });\n        },\n\n        \'delete\': function () {\n            var _this4 = this;\n\n            var ctx = this._ctx,\n                range = ctx.range,\n                deletingHook = ctx.table.hook.deleting.fire,\n                hasDeleteHook = deletingHook !== nop;\n            if (!hasDeleteHook && isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || !range)) // if no range, we\'ll use clear().\n                {\n                    // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)\n                    // For chromium, this is the way most optimized version.\n                    // For IE/Edge, this could hang the indexedDB engine and make operating system instable\n                    // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)\n                    return this._write(function (resolve, reject, idbstore) {\n                        // Our API contract is to return a count of deleted items, so we have to count() before delete().\n                        var onerror = eventRejectHandler(reject),\n                            countReq = range ? idbstore.count(range) : idbstore.count();\n                        countReq.onerror = onerror;\n                        countReq.onsuccess = function () {\n                            var count = countReq.result;\n                            tryCatch(function () {\n                                var delReq = range ? idbstore.delete(range) : idbstore.clear();\n                                delReq.onerror = onerror;\n                                delReq.onsuccess = function () {\n                                    return resolve(count);\n                                };\n                            }, function (err) {\n                                return reject(err);\n                            });\n                        };\n                    });\n                }\n\n            // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.\n            // Divide into chunks to not starve RAM.\n            // If has delete hook, we will have to collect not just keys but also objects, so it will use\n            // more memory and need lower chunk size.\n            var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;\n\n            return this._write(function (resolve, reject, idbstore, trans) {\n                var totalCount = 0;\n                // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.\n                var collection = _this4.clone({\n                    keysOnly: !ctx.isMatch && !hasDeleteHook }) // load just keys (unless filter() or and() or deleteHook has subscribers)\n                .distinct() // In case multiEntry is used, never delete same key twice because resulting count\n                // would become larger than actual delete count.\n                .limit(CHUNKSIZE).raw(); // Don\'t filter through reading-hooks (like mapped classes etc)\n\n                var keysOrTuples = [];\n\n                // We\'re gonna do things on as many chunks that are needed.\n                // Use recursion of nextChunk function:\n                var nextChunk = function () {\n                    return collection.each(hasDeleteHook ? function (val, cursor) {\n                        // Somebody subscribes to hook(\'deleting\'). Collect all primary keys and their values,\n                        // so that the hook can be called with its values in bulkDelete().\n                        keysOrTuples.push([cursor.primaryKey, cursor.value]);\n                    } : function (val, cursor) {\n                        // No one subscribes to hook(\'deleting\'). Collect only primary keys:\n                        keysOrTuples.push(cursor.primaryKey);\n                    }).then(function () {\n                        // Chromium deletes faster when doing it in sort order.\n                        hasDeleteHook ? keysOrTuples.sort(function (a, b) {\n                            return ascending(a[0], b[0]);\n                        }) : keysOrTuples.sort(ascending);\n                        return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);\n                    }).then(function () {\n                        var count = keysOrTuples.length;\n                        totalCount += count;\n                        keysOrTuples = [];\n                        return count < CHUNKSIZE ? totalCount : nextChunk();\n                    });\n                };\n\n                resolve(nextChunk());\n            });\n        }\n    });\n\n    //\n    //\n    //\n    // ------------------------- Help functions ---------------------------\n    //\n    //\n    //\n\n    function lowerVersionFirst(a, b) {\n        return a._cfg.version - b._cfg.version;\n    }\n\n    function setApiOnPlace(objs, tableNames, mode, dbschema) {\n        tableNames.forEach(function (tableName) {\n            var tableInstance = db._tableFactory(mode, dbschema[tableName]);\n            objs.forEach(function (obj) {\n                tableName in obj || (obj[tableName] = tableInstance);\n            });\n        });\n    }\n\n    function removeTablesApi(objs) {\n        objs.forEach(function (obj) {\n            for (var key in obj) {\n                if (obj[key] instanceof Table) delete obj[key];\n            }\n        });\n    }\n\n    function iterate(req, filter, fn, resolve, reject, valueMapper) {\n\n        // Apply valueMapper (hook(\'reading\') or mappped class)\n        var mappedFn = valueMapper ? function (x, c, a) {\n            return fn(valueMapper(x), c, a);\n        } : fn;\n        // Wrap fn with PSD and microtick stuff from Promise.\n        var wrappedFn = wrap(mappedFn, reject);\n\n        if (!req.onerror) req.onerror = eventRejectHandler(reject);\n        if (filter) {\n            req.onsuccess = trycatcher(function filter_record() {\n                var cursor = req.result;\n                if (cursor) {\n                    var c = function () {\n                        cursor.continue();\n                    };\n                    if (filter(cursor, function (advancer) {\n                        c = advancer;\n                    }, resolve, reject)) wrappedFn(cursor.value, cursor, function (advancer) {\n                        c = advancer;\n                    });\n                    c();\n                } else {\n                    resolve();\n                }\n            }, reject);\n        } else {\n            req.onsuccess = trycatcher(function filter_record() {\n                var cursor = req.result;\n                if (cursor) {\n                    var c = function () {\n                        cursor.continue();\n                    };\n                    wrappedFn(cursor.value, cursor, function (advancer) {\n                        c = advancer;\n                    });\n                    c();\n                } else {\n                    resolve();\n                }\n            }, reject);\n        }\n    }\n\n    function parseIndexSyntax(indexes) {\n        /// <param name="indexes" type="String"></param>\n        /// <returns type="Array" elementType="IndexSpec"></returns>\n        var rv = [];\n        indexes.split(\',\').forEach(function (index) {\n            index = index.trim();\n            var name = index.replace(/([&*]|\\+\\+)/g, ""); // Remove "&", "++" and "*"\n            // Let keyPath of "[a+b]" be ["a","b"]:\n            var keyPath = /^\\[/.test(name) ? name.match(/^\\[(.*)\\]$/)[1].split(\'+\') : name;\n\n            rv.push(new IndexSpec(name, keyPath || null, /\\&/.test(index), /\\*/.test(index), /\\+\\+/.test(index), isArray(keyPath), /\\./.test(index)));\n        });\n        return rv;\n    }\n\n    function cmp(key1, key2) {\n        return indexedDB.cmp(key1, key2);\n    }\n\n    function min(a, b) {\n        return cmp(a, b) < 0 ? a : b;\n    }\n\n    function max(a, b) {\n        return cmp(a, b) > 0 ? a : b;\n    }\n\n    function ascending(a, b) {\n        return indexedDB.cmp(a, b);\n    }\n\n    function descending(a, b) {\n        return indexedDB.cmp(b, a);\n    }\n\n    function simpleCompare(a, b) {\n        return a < b ? -1 : a === b ? 0 : 1;\n    }\n\n    function simpleCompareReverse(a, b) {\n        return a > b ? -1 : a === b ? 0 : 1;\n    }\n\n    function combine(filter1, filter2) {\n        return filter1 ? filter2 ? function () {\n            return filter1.apply(this, arguments) && filter2.apply(this, arguments);\n        } : filter1 : filter2;\n    }\n\n    function readGlobalSchema() {\n        db.verno = idbdb.version / 10;\n        db._dbSchema = globalSchema = {};\n        dbStoreNames = slice(idbdb.objectStoreNames, 0);\n        if (dbStoreNames.length === 0) return; // Database contains no stores.\n        var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), \'readonly\');\n        dbStoreNames.forEach(function (storeName) {\n            var store = trans.objectStore(storeName),\n                keyPath = store.keyPath,\n                dotted = keyPath && typeof keyPath === \'string\' && keyPath.indexOf(\'.\') !== -1;\n            var primKey = new IndexSpec(keyPath, keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== \'string\', dotted);\n            var indexes = [];\n            for (var j = 0; j < store.indexNames.length; ++j) {\n                var idbindex = store.index(store.indexNames[j]);\n                keyPath = idbindex.keyPath;\n                dotted = keyPath && typeof keyPath === \'string\' && keyPath.indexOf(\'.\') !== -1;\n                var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== \'string\', dotted);\n                indexes.push(index);\n            }\n            globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});\n        });\n        setApiOnPlace([allTables, Transaction.prototype], keys(globalSchema), READWRITE, globalSchema);\n    }\n\n    function adjustToExistingIndexNames(schema, idbtrans) {\n        /// <summary>\n        /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db\n        /// </summary>\n        /// <param name="schema" type="Object">Map between name and TableSchema</param>\n        /// <param name="idbtrans" type="IDBTransaction"></param>\n        var storeNames = idbtrans.db.objectStoreNames;\n        for (var i = 0; i < storeNames.length; ++i) {\n            var storeName = storeNames[i];\n            var store = idbtrans.objectStore(storeName);\n            hasGetAll = \'getAll\' in store;\n            for (var j = 0; j < store.indexNames.length; ++j) {\n                var indexName = store.indexNames[j];\n                var keyPath = store.index(indexName).keyPath;\n                var dexieName = typeof keyPath === \'string\' ? keyPath : "[" + slice(keyPath).join(\'+\') + "]";\n                if (schema[storeName]) {\n                    var indexSpec = schema[storeName].idxByName[dexieName];\n                    if (indexSpec) indexSpec.name = indexName;\n                }\n            }\n        }\n    }\n\n    function fireOnBlocked(ev) {\n        db.on("blocked").fire(ev);\n        // Workaround (not fully*) for missing "versionchange" event in IE,Edge and Safari:\n        connections.filter(function (c) {\n            return c.name === db.name && c !== db && !c._vcFired;\n        }).map(function (c) {\n            return c.on("versionchange").fire(ev);\n        });\n    }\n\n    extend(this, {\n        Collection: Collection,\n        Table: Table,\n        Transaction: Transaction,\n        Version: Version,\n        WhereClause: WhereClause,\n        WriteableCollection: WriteableCollection,\n        WriteableTable: WriteableTable\n    });\n\n    init();\n\n    addons.forEach(function (fn) {\n        fn(db);\n    });\n}\n\nvar fakeAutoComplete = function () {}; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())\nvar fake = false; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())\n\nfunction parseType(type) {\n    if (typeof type === \'function\') {\n        return new type();\n    } else if (isArray(type)) {\n        return [parseType(type[0])];\n    } else if (type && typeof type === \'object\') {\n        var rv = {};\n        applyStructure(rv, type);\n        return rv;\n    } else {\n        return type;\n    }\n}\n\nfunction applyStructure(obj, structure) {\n    keys(structure).forEach(function (member) {\n        var value = parseType(structure[member]);\n        obj[member] = value;\n    });\n    return obj;\n}\n\nfunction eventSuccessHandler(done) {\n    return function (ev) {\n        done(ev.target.result);\n    };\n}\n\nfunction hookedEventSuccessHandler(resolve) {\n    // wrap() is needed when calling hooks because the rare scenario of:\n    //  * hook does a db operation that fails immediately (IDB throws exception)\n    //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.\n    //    wrap() will also execute in a virtual tick.\n    //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.\n    //  * If this was the last event in the bulk, the promise will resolve after a physical tick\n    //    and the transaction will have committed already.\n    // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,\n    // because it is always marked with _lib = true when created using Transaction._promise().\n    return wrap(function (event) {\n        var req = event.target,\n            result = req.result,\n            ctx = req._hookCtx,\n            // Contains the hook error handler. Put here instead of closure to boost performance.\n        hookSuccessHandler = ctx && ctx.onsuccess;\n        hookSuccessHandler && hookSuccessHandler(result);\n        resolve && resolve(result);\n    }, resolve);\n}\n\nfunction eventRejectHandler(reject) {\n    return function (event) {\n        preventDefault(event);\n        reject(event.target.error);\n        return false;\n    };\n}\n\nfunction hookedEventRejectHandler(reject) {\n    return wrap(function (event) {\n        // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.\n\n        var req = event.target,\n            err = req.error,\n            ctx = req._hookCtx,\n            // Contains the hook error handler. Put here instead of closure to boost performance.\n        hookErrorHandler = ctx && ctx.onerror;\n        hookErrorHandler && hookErrorHandler(err);\n        preventDefault(event);\n        reject(err);\n        return false;\n    });\n}\n\nfunction preventDefault(event) {\n    if (event.stopPropagation) // IndexedDBShim doesnt support this on Safari 8 and below.\n        event.stopPropagation();\n    if (event.preventDefault) // IndexedDBShim doesnt support this on Safari 8 and below.\n        event.preventDefault();\n}\n\nfunction globalDatabaseList(cb) {\n    var val,\n        localStorage = Dexie.dependencies.localStorage;\n    if (!localStorage) return cb([]); // Envs without localStorage support\n    try {\n        val = JSON.parse(localStorage.getItem(\'Dexie.DatabaseNames\') || "[]");\n    } catch (e) {\n        val = [];\n    }\n    if (cb(val)) {\n        localStorage.setItem(\'Dexie.DatabaseNames\', JSON.stringify(val));\n    }\n}\n\nfunction awaitIterator(iterator) {\n    var callNext = function (result) {\n        return iterator.next(result);\n    },\n        doThrow = function (error) {\n        return iterator.throw(error);\n    },\n        onSuccess = step(callNext),\n        onError = step(doThrow);\n\n    function step(getNext) {\n        return function (val) {\n            var next = getNext(val),\n                value = next.value;\n\n            return next.done ? value : !value || typeof value.then !== \'function\' ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);\n        };\n    }\n\n    return step(callNext)();\n}\n\n//\n// IndexSpec struct\n//\nfunction IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {\n    /// <param name="name" type="String"></param>\n    /// <param name="keyPath" type="String"></param>\n    /// <param name="unique" type="Boolean"></param>\n    /// <param name="multi" type="Boolean"></param>\n    /// <param name="auto" type="Boolean"></param>\n    /// <param name="compound" type="Boolean"></param>\n    /// <param name="dotted" type="Boolean"></param>\n    this.name = name;\n    this.keyPath = keyPath;\n    this.unique = unique;\n    this.multi = multi;\n    this.auto = auto;\n    this.compound = compound;\n    this.dotted = dotted;\n    var keyPathSrc = typeof keyPath === \'string\' ? keyPath : keyPath && \'[\' + [].join.call(keyPath, \'+\') + \']\';\n    this.src = (unique ? \'&\' : \'\') + (multi ? \'*\' : \'\') + (auto ? "++" : "") + keyPathSrc;\n}\n\n//\n// TableSchema struct\n//\nfunction TableSchema(name, primKey, indexes, instanceTemplate) {\n    /// <param name="name" type="String"></param>\n    /// <param name="primKey" type="IndexSpec"></param>\n    /// <param name="indexes" type="Array" elementType="IndexSpec"></param>\n    /// <param name="instanceTemplate" type="Object"></param>\n    this.name = name;\n    this.primKey = primKey || new IndexSpec();\n    this.indexes = indexes || [new IndexSpec()];\n    this.instanceTemplate = instanceTemplate;\n    this.mappedClass = null;\n    this.idxByName = arrayToObject(indexes, function (index) {\n        return [index.name, index];\n    });\n}\n\n// Used in when defining dependencies later...\n// (If IndexedDBShim is loaded, prefer it before standard indexedDB)\nvar idbshim = _global.idbModules && _global.idbModules.shimIndexedDB ? _global.idbModules : {};\n\nfunction safariMultiStoreFix(storeNames) {\n    return storeNames.length === 1 ? storeNames[0] : storeNames;\n}\n\nfunction getNativeGetDatabaseNamesFn(indexedDB) {\n    var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);\n    return fn && fn.bind(indexedDB);\n}\n\n// Export Error classes\nprops(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};\n\n//\n// Static methods and properties\n// \nprops(Dexie, {\n\n    //\n    // Static delete() method.\n    //\n    delete: function (databaseName) {\n        var db = new Dexie(databaseName),\n            promise = db.delete();\n        promise.onblocked = function (fn) {\n            db.on("blocked", fn);\n            return this;\n        };\n        return promise;\n    },\n\n    //\n    // Static exists() method.\n    //\n    exists: function (name) {\n        return new Dexie(name).open().then(function (db) {\n            db.close();\n            return true;\n        }).catch(Dexie.NoSuchDatabaseError, function () {\n            return false;\n        });\n    },\n\n    //\n    // Static method for retrieving a list of all existing databases at current host.\n    //\n    getDatabaseNames: function (cb) {\n        return new Promise(function (resolve, reject) {\n            var getDatabaseNames = getNativeGetDatabaseNamesFn(indexedDB);\n            if (getDatabaseNames) {\n                // In case getDatabaseNames() becomes standard, let\'s prepare to support it:\n                var req = getDatabaseNames();\n                req.onsuccess = function (event) {\n                    resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>\n                };\n                req.onerror = eventRejectHandler(reject);\n            } else {\n                globalDatabaseList(function (val) {\n                    resolve(val);\n                    return false;\n                });\n            }\n        }).then(cb);\n    },\n\n    defineClass: function (structure) {\n        /// <summary>\n        ///     Create a javascript constructor based on given template for which properties to expect in the class.\n        ///     Any property that is a constructor function will act as a type. So {name: String} will be equal to {name: new String()}.\n        /// </summary>\n        /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n        /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>\n\n        // Default constructor able to copy given properties into this object.\n        function Class(properties) {\n            /// <param name="properties" type="Object" optional="true">Properties to initialize object with.\n            /// </param>\n            properties ? extend(this, properties) : fake && applyStructure(this, structure);\n        }\n        return Class;\n    },\n\n    applyStructure: applyStructure,\n\n    ignoreTransaction: function (scopeFunc) {\n        // In case caller is within a transaction but needs to create a separate transaction.\n        // Example of usage:\n        //\n        // Let\'s say we have a logger function in our app. Other application-logic should be unaware of the\n        // logger function and not need to include the \'logentries\' table in all transaction it performs.\n        // The logging should always be done in a separate transaction and not be dependant on the current\n        // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.\n        //\n        //     Dexie.ignoreTransaction(function() {\n        //         db.logentries.add(newLogEntry);\n        //     });\n        //\n        // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction\n        // in current Promise-scope.\n        //\n        // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an\n        // API for this because\n        //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().\n        //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().\n        //  3) setImmediate() is not supported in the ES standard.\n        //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.\n        return PSD.trans ? usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.\n        scopeFunc(); // No need to change scope because there is no ongoing transaction.\n    },\n\n    vip: function (fn) {\n        // To be used by subscribers to the on(\'ready\') event.\n        // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.\n        // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD\n        // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since\n        // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.\n        // Note that this method is only useful for on(\'ready\') subscribers that is returning a Promise from the event. If not using vip()\n        // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by\n        // the caller will not resolve until database is opened.\n        return newScope(function () {\n            PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.\n            return fn();\n        });\n    },\n\n    async: function (generatorFn) {\n        return function () {\n            try {\n                var rv = awaitIterator(generatorFn.apply(this, arguments));\n                if (!rv || typeof rv.then !== \'function\') return Promise.resolve(rv);\n                return rv;\n            } catch (e) {\n                return rejection(e);\n            }\n        };\n    },\n\n    spawn: function (generatorFn, args, thiz) {\n        try {\n            var rv = awaitIterator(generatorFn.apply(thiz, args || []));\n            if (!rv || typeof rv.then !== \'function\') return Promise.resolve(rv);\n            return rv;\n        } catch (e) {\n            return rejection(e);\n        }\n    },\n\n    // Dexie.currentTransaction property\n    currentTransaction: {\n        get: function () {\n            return PSD.trans || null;\n        }\n    },\n\n    // Export our Promise implementation since it can be handy as a standalone Promise implementation\n    Promise: Promise,\n\n    // Dexie.debug proptery:\n    // Dexie.debug = false\n    // Dexie.debug = true\n    // Dexie.debug = "dexie" - don\'t hide dexie\'s stack frames.\n    debug: {\n        get: function () {\n            return debug;\n        },\n        set: function (value) {\n            setDebug(value, value === \'dexie\' ? function () {\n                return true;\n            } : dexieStackFrameFilter);\n        }\n    },\n\n    // Export our derive/extend/override methodology\n    derive: derive,\n    extend: extend,\n    props: props,\n    override: override,\n    // Export our Events() function - can be handy as a toolkit\n    Events: Events,\n    events: { get: deprecated(function () {\n            return Events;\n        }) }, // Backward compatible lowercase version.\n    // Utilities\n    getByKeyPath: getByKeyPath,\n    setByKeyPath: setByKeyPath,\n    delByKeyPath: delByKeyPath,\n    shallowClone: shallowClone,\n    deepClone: deepClone,\n    getObjectDiff: getObjectDiff,\n    asap: asap,\n    maxKey: maxKey,\n    // Addon registry\n    addons: [],\n    // Global DB connection list\n    connections: connections,\n\n    MultiModifyError: exceptions.Modify, // Backward compatibility 0.9.8. Deprecate.\n    errnames: errnames,\n\n    // Export other static classes\n    IndexSpec: IndexSpec,\n    TableSchema: TableSchema,\n\n    //\n    // Dependencies\n    //\n    // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.\n    //\n    // In node.js, however, these properties must be set "manually" before instansiating a new Dexie().\n    // For node.js, you need to require indexeddb-js or similar and then set these deps.\n    //\n    dependencies: {\n        // Required:\n        indexedDB: idbshim.shimIndexedDB || _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,\n        IDBKeyRange: idbshim.IDBKeyRange || _global.IDBKeyRange || _global.webkitIDBKeyRange\n    },\n\n    // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.\n    semVer: DEXIE_VERSION,\n    version: DEXIE_VERSION.split(\'.\').map(function (n) {\n        return parseInt(n);\n    }).reduce(function (p, c, i) {\n        return p + c / Math.pow(10, i * 2);\n    }),\n    fakeAutoComplete: fakeAutoComplete,\n\n    // https://github.com/dfahlander/Dexie.js/issues/186\n    // typescript compiler tsc in mode ts--\x3ees5 & commonJS, will expect require() to return\n    // x.default. Workaround: Set Dexie.default = Dexie.\n    default: Dexie\n});\n\ntryCatch(function () {\n    // Optional dependencies\n    // localStorage\n    Dexie.dependencies.localStorage = (typeof chrome !== "undefined" && chrome !== null ? chrome.storage : void 0) != null ? null : _global.localStorage;\n});\n\n// Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.\nPromise.rejectionMapper = mapError;\n\n// Fool IDE to improve autocomplete. Tested with Visual Studio 2013 and 2015.\ndoFakeAutoComplete(function () {\n    Dexie.fakeAutoComplete = fakeAutoComplete = doFakeAutoComplete;\n    Dexie.fake = fake = true;\n});\n\nreturn Dexie;\n\n})));\n//# sourceMappingURL=dexie.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13), __webpack_require__(39).setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n')},,,function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(40);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(13), __webpack_require__(31)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/sandbox/Sandbox.js\nvar Sandbox = __webpack_require__(5);\n\n// EXTERNAL MODULE: ./src/sandbox/SandboxRegistry.js\nvar SandboxRegistry = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./src/bus/MiniBus.js\nvar MiniBus = __webpack_require__(9);\n\n// CONCATENATED MODULE: ./src/sandbox/WindowSandbox.js\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n // Mockup code for testing\n\nvar WindowSandbox_WindowSandbox =\n/*#__PURE__*/\nfunction (_Sandbox) {\n  _inherits(WindowSandbox, _Sandbox);\n\n  function WindowSandbox(capabilities) {\n    var _this2;\n\n    _classCallCheck(this, WindowSandbox);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(WindowSandbox).call(this));\n\n    var _this = _assertThisInitialized(_this2);\n\n    _this.type = Sandbox[\"a\" /* SandboxType */].WINDOW;\n    _this.capabilities = capabilities;\n    console.log('[WindowSandbox] New with capabilities: ', capabilities); //simulate sandbox frontier\n\n    _this._bus = new MiniBus[\"a\" /* default */]();\n\n    _this._bus._onPostMessage = function (msg) {\n      console.log('[WindowSandbox]._onPostMessage -> external (out)', 'from: ', msg.from, 'to: ', msg.to, 'msg: ', msg); //redirect messages to the external part of the sandbox\n\n      _this._onMessage(msg);\n    };\n\n    _this._sbr = new SandboxRegistry[\"a\" /* default */](_this._bus);\n\n    _this._sbr._create = function (url, instance, config, factory) {\n      console.log('SandboxRegistry._create ', url, config, factory);\n\n      instance._start(url, _this2._bus, config, factory);\n      /*      window.eval(sourceCode);\r\n      \r\n            let component;\r\n            if (typeof activate === 'function') {\r\n              component = activate(url, this._bus, config, factory);\r\n            }\r\n      \r\n            if (typeof activate.default === 'function') {\r\n              component = activate.default(url, this._bus, config, factory);\r\n            }\r\n      \r\n            //for testing, this make components accessible from browser console\r\n            window.components[url] = component;\r\n      \r\n            return component;*/\n\n\n      return;\n    };\n\n    return _this2;\n  }\n\n  _createClass(WindowSandbox, [{\n    key: \"_onPostMessage\",\n    value: function _onPostMessage(msg) {\n      var _this = this;\n\n      console.log('SandboxBrowser._onPostMessage -> internal (in)', 'from: ', msg.from, 'to: ', msg.to, 'msg: ', msg); //redirect messages to the internal part of the sandbox\n\n      _this._bus._onMessage(msg);\n    }\n  }]);\n\n  return WindowSandbox;\n}(Sandbox[\"b\" /* default */]);\n\n/* harmony default export */ var sandbox_WindowSandbox = (WindowSandbox_WindowSandbox);\n// CONCATENATED MODULE: ./src/sandbox/SandboxBrowser.js\nfunction SandboxBrowser_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { SandboxBrowser_typeof = function _typeof(obj) { return typeof obj; }; } else { SandboxBrowser_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return SandboxBrowser_typeof(obj); }\n\nfunction SandboxBrowser_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SandboxBrowser_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SandboxBrowser_createClass(Constructor, protoProps, staticProps) { if (protoProps) SandboxBrowser_defineProperties(Constructor.prototype, protoProps); if (staticProps) SandboxBrowser_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction SandboxBrowser_possibleConstructorReturn(self, call) { if (call && (SandboxBrowser_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return SandboxBrowser_assertThisInitialized(self); }\n\nfunction SandboxBrowser_getPrototypeOf(o) { SandboxBrowser_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SandboxBrowser_getPrototypeOf(o); }\n\nfunction SandboxBrowser_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction SandboxBrowser_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) SandboxBrowser_setPrototypeOf(subClass, superClass); }\n\nfunction SandboxBrowser_setPrototypeOf(o, p) { SandboxBrowser_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SandboxBrowser_setPrototypeOf(o, p); }\n\n\n\n\n // Mockup code for testing\n\nvar SandboxBrowser_SandboxBrowser =\n/*#__PURE__*/\nfunction (_Sandbox) {\n  SandboxBrowser_inherits(SandboxBrowser, _Sandbox);\n\n  function SandboxBrowser(capabilities) {\n    var _this2;\n\n    SandboxBrowser_classCallCheck(this, SandboxBrowser);\n\n    _this2 = SandboxBrowser_possibleConstructorReturn(this, SandboxBrowser_getPrototypeOf(SandboxBrowser).call(this));\n\n    var _this = SandboxBrowser_assertThisInitialized(_this2);\n\n    _this.type = Sandbox[\"a\" /* SandboxType */].NORMAL;\n    console.log('[SandboxBrowser] New with capabilities: ', capabilities); //simulate sandbox frontier\n\n    _this._bus = new MiniBus[\"a\" /* default */]();\n\n    _this._bus._onPostMessage = function (msg) {\n      console.log('SandboxBrowser._onPostMessage -> external (out)', 'from: ', msg.from, 'to: ', msg.to); //redirect messages to the external part of the sandbox\n\n      _this._onMessage(msg);\n    };\n\n    _this._sbr = new SandboxRegistry[\"a\" /* default */](_this._bus);\n\n    _this._sbr._create = function (url, instance, config, factory) {\n      console.log('SandboxRegistry._create ', url, config);\n\n      instance._start(url, _this2._bus, config, factory);\n      /*      window.eval(sourceCode);\r\n      \r\n            let component;\r\n            if (typeof activate === 'function') {\r\n              component = activate(url, this._bus, config, factory);\r\n            }\r\n      \r\n            if (typeof activate.default === 'function') {\r\n              component = activate.default(url, this._bus, config, factory);\r\n            }\r\n      \r\n            //for testing, this make components accessible from browser console\r\n            if (!window.components) window.components = {};\r\n            window.components[url] = component;\r\n      \r\n            return component;*/\n\n\n      return;\n    };\n\n    return _this2;\n  }\n\n  SandboxBrowser_createClass(SandboxBrowser, [{\n    key: \"_onPostMessage\",\n    value: function _onPostMessage(msg) {\n      var _this = this;\n\n      console.log('SandboxBrowser._onPostMessage -> internal (in)', 'from: ', msg.from, 'to: ', msg.to); //redirect messages to the internal part of the sandbox\n\n      _this._bus._onMessage(msg);\n    }\n  }]);\n\n  return SandboxBrowser;\n}(Sandbox[\"b\" /* default */]);\n\n/* harmony default export */ var sandbox_SandboxBrowser = (SandboxBrowser_SandboxBrowser);\n// CONCATENATED MODULE: ./src/sandbox/AppSandboxBrowser.js\nfunction AppSandboxBrowser_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { AppSandboxBrowser_typeof = function _typeof(obj) { return typeof obj; }; } else { AppSandboxBrowser_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return AppSandboxBrowser_typeof(obj); }\n\nfunction AppSandboxBrowser_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction AppSandboxBrowser_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AppSandboxBrowser_createClass(Constructor, protoProps, staticProps) { if (protoProps) AppSandboxBrowser_defineProperties(Constructor.prototype, protoProps); if (staticProps) AppSandboxBrowser_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction AppSandboxBrowser_possibleConstructorReturn(self, call) { if (call && (AppSandboxBrowser_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return AppSandboxBrowser_assertThisInitialized(self); }\n\nfunction AppSandboxBrowser_getPrototypeOf(o) { AppSandboxBrowser_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AppSandboxBrowser_getPrototypeOf(o); }\n\nfunction AppSandboxBrowser_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction AppSandboxBrowser_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) AppSandboxBrowser_setPrototypeOf(subClass, superClass); }\n\nfunction AppSandboxBrowser_setPrototypeOf(o, p) { AppSandboxBrowser_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AppSandboxBrowser_setPrototypeOf(o, p); }\n\n// jshint activate\n// activate\n\n\n\n // Mockup code for testing\n\nvar AppSandboxBrowser_AppSandboxBrowser =\n/*#__PURE__*/\nfunction (_Sandbox) {\n  AppSandboxBrowser_inherits(AppSandboxBrowser, _Sandbox);\n\n  function AppSandboxBrowser(capabilities) {\n    var _this2;\n\n    AppSandboxBrowser_classCallCheck(this, AppSandboxBrowser);\n\n    _this2 = AppSandboxBrowser_possibleConstructorReturn(this, AppSandboxBrowser_getPrototypeOf(AppSandboxBrowser).call(this));\n\n    var _this = AppSandboxBrowser_assertThisInitialized(_this2);\n\n    _this.type = Sandbox[\"a\" /* SandboxType */].APP;\n    console.log('[AppSandboxBrowser] new with capabilities: ', capabilities); //simulate sandbox frontier\n\n    _this._bus = new MiniBus[\"a\" /* default */]();\n\n    _this._bus._onPostMessage = function (msg) {\n      console.log('AppSandboxBrowser._onPostMessage -> external (out)', 'from: ', msg.from, 'to: ', msg.to); //redirect messages to the external part of the sandbox\n\n      _this._onMessage(msg);\n    };\n\n    _this._sbr = new SandboxRegistry[\"a\" /* default */](_this._bus); //    _this._sbr._create = (url, sourceCode, config, factory) => {\n\n    _this._sbr._create = function (url, instance, config, factory) {\n      console.log('SandboxRegistry._create ', url, config);\n\n      instance._start(url, _this2._bus, config, factory); //      window.eval(sourceCode);\n      //      import(importPath).then((component)=>{\n      //        let component;\n\n      /*        if (typeof activate === 'function') {\r\n                component = activate(url, this._bus, config, factory);\r\n              }\r\n      \r\n              if (typeof activate.default === 'function') {\r\n                component = activate.default(url, this._bus, config, factory);\r\n              }\r\n      \r\n              //for testing, this make components accessible from browser console\r\n              if (!window.components) window.components = {};\r\n              window.components[url] = component;*/\n\n\n      return; //      });\n    };\n\n    return _this2;\n  }\n\n  AppSandboxBrowser_createClass(AppSandboxBrowser, [{\n    key: \"_onPostMessage\",\n    value: function _onPostMessage(msg) {\n      var _this = this;\n\n      console.log('AppSandboxBrowser._onPostMessage -> internal (in)', 'from: ', msg.from, 'to: ', msg.to); //redirect messages to the internal part of the sandbox\n\n      _this._bus._onMessage(msg);\n    }\n  }]);\n\n  return AppSandboxBrowser;\n}(Sandbox[\"b\" /* default */]);\n\n/* harmony default export */ var sandbox_AppSandboxBrowser = (AppSandboxBrowser_AppSandboxBrowser);\n// CONCATENATED MODULE: ./src/rethink/Request.js\nfunction Request_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Request_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Request_createClass(Constructor, protoProps, staticProps) { if (protoProps) Request_defineProperties(Constructor.prototype, protoProps); if (staticProps) Request_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar methods = {\n  GET: 'get',\n  POST: 'post',\n  DELETE: 'delete',\n  UPDATE: 'update'\n};\n\nvar Request =\n/*#__PURE__*/\nfunction () {\n  function Request() {\n    var _this = this;\n\n    Request_classCallCheck(this, Request);\n\n    this._withCredentials = false;\n    Object.keys(methods).forEach(function (method) {\n      switch (method) {\n        case 'GET':\n          _this[methods[method]] = function (url) {\n            return _this._makeLocalRequest(method, url);\n          };\n\n          break;\n\n        case 'POST':\n        case 'DELETE':\n        case 'UPDATE':\n          _this[methods[method]] = function (url) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            return _this._makeLocalRequest(method, url, options);\n          };\n\n          break;\n      }\n    });\n  }\n\n  Request_createClass(Request, [{\n    key: \"_makeLocalRequest\",\n    value: function _makeLocalRequest(method, url, options) {\n      var _this2 = this;\n\n      if (!options) {\n        options = null;\n      }\n\n      console.log('method:', method, '| url: ', url, options ? ' | payload:' + JSON.stringify(options) : '');\n      return new Promise(function (resolve, reject) {\n        var protocolmap = {\n          'hyperty-catalogue://': 'https://',\n          'https://': 'https://',\n          'http://': 'https://'\n        };\n        var foundProtocol = false;\n\n        for (var protocol in protocolmap) {\n          if (url.slice(0, protocol.length) === protocol) {\n            // console.log(\"exchanging \" + protocol + \" with \" + protocolmap[protocol]);\n            url = protocolmap[protocol] + url.slice(protocol.length, url.length);\n            foundProtocol = true;\n            break;\n          }\n        }\n\n        if (!foundProtocol) {\n          reject('Invalid protocol of url: ' + url);\n          return;\n        }\n\n        var xhr = new XMLHttpRequest();\n\n        if (_this2._withCredentials) {\n          xhr.withCredentials = _this2._withCredentials;\n        }\n\n        _this2.xhr = xhr;\n        xhr.addEventListener('readystatechange', function (event) {\n          var xhr = event.currentTarget;\n\n          if (xhr.readyState === 4) {\n            // console.log(\"got response:\", xhr);\n            if (xhr.status >= 200 || xhr.status <= 299) {\n              resolve(xhr.responseText);\n            } else {\n              console.log('rejecting promise because of response code: 200 != ', xhr.status, xhr.responseText);\n              reject(xhr.responseText);\n            }\n          }\n        });\n        xhr.open(method, url);\n\n        if (method === 'POST') {\n          /*\r\n          xhr.setRequestHeader('content-type', 'application/json');\r\n          xhr.setRequestHeader('cache-control', 'no-cache');\r\n          */\n          xhr.send(options.body);\n        } else {\n          xhr.send();\n        }\n      });\n    }\n  }, {\n    key: \"withCredentials\",\n    set: function set() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._withCredentials = value;\n    },\n    get: function get() {\n      return this._withCredentials;\n    }\n  }]);\n\n  return Request;\n}();\n\n/* harmony default export */ var rethink_Request = (Request);\n// EXTERNAL MODULE: ./src/storage-manager/StorageManager.js\nvar StorageManager = __webpack_require__(29);\n\n// EXTERNAL MODULE: ./src/storage-manager/SyncStorageManager.js\nvar SyncStorageManager = __webpack_require__(30);\n\n// CONCATENATED MODULE: ./src/rethink/RuntimeCapabilities.js\nfunction RuntimeCapabilities_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction RuntimeCapabilities_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RuntimeCapabilities_createClass(Constructor, protoProps, staticProps) { if (protoProps) RuntimeCapabilities_defineProperties(Constructor.prototype, protoProps); if (staticProps) RuntimeCapabilities_defineProperties(Constructor, staticProps); return Constructor; }\n\n// TODO: import and extend the class of the service-framework\n// service-framework/dist/RuntimeCapabilities;\nvar RuntimeCapabilities =\n/*#__PURE__*/\nfunction () {\n  function RuntimeCapabilities(storageManager) {\n    RuntimeCapabilities_classCallCheck(this, RuntimeCapabilities);\n\n    if (!storageManager) throw new Error('The Runtime Capabilities need the storageManager');\n    this.storageManager = storageManager;\n  }\n  /**\r\n   * Returns as a promise RuntimeCapabilities json object with all available capabilities of the runtime.\r\n   * If it was not yet persisted in the Storage Manager it collects all required info from the platform and saves in the storage manager.\r\n   * @returns {Promise<object>}\r\n   */\n\n\n  RuntimeCapabilities_createClass(RuntimeCapabilities, [{\n    key: \"getRuntimeCapabilities\",\n    value: function getRuntimeCapabilities() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        Promise.all([_this._getEnvironment(), _this._getMediaDevices()]).then(function (result) {\n          var capabilities = {};\n          result.forEach(function (capability) {\n            Object.assign(capabilities, capability);\n          });\n\n          _this.storageManager.set('capabilities', '1', capabilities);\n\n          resolve(capabilities);\n        })[\"catch\"](function (error) {\n          reject(error);\n        });\n      });\n    }\n    /**\r\n     * returns as a promise a boolean according to available capabilities.\r\n     * @returns {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable(capability) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.storageManager.get('capabilities').then(function (capabilities) {\n          console.log('[RuntimeCapabilities isAvailable?] ' + capability + ' is ', capabilities.hasOwnProperty(capability) && capabilities[capability]);\n\n          if (capabilities.hasOwnProperty(capability) && capabilities[capability]) {\n            resolve(true);\n          } else {\n            resolve(false);\n          }\n        });\n      });\n    }\n    /**\r\n     * it refreshes previously collected capabilities and updates the storage manager\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3.getRuntimeCapabilities().then(resolve)[\"catch\"](reject);\n      });\n    } // TODO: organize the code in separated files\n\n  }, {\n    key: \"_getEnvironment\",\n    value: function _getEnvironment() {\n      // TODO: this should be more effective and check the environment\n      return {\n        browser: !!(window && navigator),\n        windowSandbox: !!(window && navigator),\n        node: !!!(window && navigator)\n      };\n    } // TODO: organize the code in separated files\n\n  }, {\n    key: \"_getMediaDevices\",\n    value: function _getMediaDevices() {\n      return new Promise(function (resolve) {\n        var capability = {};\n\n        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n          console.log('enumerateDevices() not supported.');\n          resolve(capability);\n          return;\n        } // List cameras and microphones.\n\n\n        navigator.mediaDevices.enumerateDevices().then(function (devices) {\n          devices.forEach(function (device) {\n            // console.log(device.kind, device.label, device.deviceId);\n            if (device.kind === 'audioinput' && device.deviceId === 'default') {\n              capability.mic = true;\n            }\n\n            if (device.kind === 'videoinput') {\n              capability.camera = true;\n            }\n          });\n          resolve(capability);\n        })[\"catch\"](function (err) {\n          resolve(capability);\n          console.log(err.name + ': ' + err.message);\n        });\n      });\n    }\n  }]);\n\n  return RuntimeCapabilities;\n}();\n\n/* harmony default export */ var rethink_RuntimeCapabilities = (RuntimeCapabilities);\n// EXTERNAL MODULE: ./node_modules/dexie/dist/dexie.js\nvar dexie = __webpack_require__(36);\nvar dexie_default = /*#__PURE__*/__webpack_require__.n(dexie);\n\n// EXTERNAL MODULE: ./node_modules/pouchdb/lib/index-browser.es.js\nvar index_browser_es = __webpack_require__(23);\n\n// CONCATENATED MODULE: ./src/rethink/runtimeFactory.js\n\n\n\n //import {RuntimeCatalogue} from 'service-framework/dist/RuntimeCatalogue';\n//import PersistenceManager from 'service-framework/dist/PersistenceManager';\n\n\n\n // import StorageManagerFake from './StorageManagerFake';\n\n\n/*import 'dexie-observable';\r\nimport 'dexie-syncable';\r\n\r\nimport SyncClient from 'sync-client/dist/sync-client';*/\n\n\nvar runtimeFactory_runtimeFactory = Object.create({\n  createSandbox: function createSandbox(capabilities) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      var sandbox;\n      var isWindowSandbox = '';\n      var SandboxCapabilities = {};\n      if (capabilities.hasOwnProperty('windowSandbox') && capabilities.windowSandbox) isWindowSandbox = 'windowSandbox'; // TODO this should be corrected.. now is only for testing\n\n      _this.capabilitiesManager.isAvailable(isWindowSandbox).then(function (result) {\n        if (result) {\n          // TODO: to be retrieved from capabilitiesManager\n          SandboxCapabilities = {\n            windowSandbox: true\n          };\n          console.info('[createSandbox ] - windowSandbox');\n          sandbox = new sandbox_WindowSandbox(SandboxCapabilities);\n        } else {\n          console.info('[createSandbox ] - sandbox');\n          sandbox = new sandbox_SandboxBrowser(SandboxCapabilities);\n        }\n\n        resolve(sandbox);\n      })[\"catch\"](function (reason) {\n        console.log('[createSandbox ] By default create a normal sandbox: ', reason);\n        console.info('[createSandbox ] - sandbox');\n        sandbox = new sandbox_SandboxBrowser(capabilities);\n        resolve(sandbox);\n      });\n    });\n  },\n  createAppSandbox: function createAppSandbox() {\n    return new sandbox_AppSandboxBrowser();\n  },\n  createHttpRequest: function createHttpRequest() {\n    var request = new rethink_Request();\n    return request;\n  },\n  atob: function (_atob) {\n    function atob(_x) {\n      return _atob.apply(this, arguments);\n    }\n\n    atob.toString = function () {\n      return _atob.toString();\n    };\n\n    return atob;\n  }(function (b64) {\n    return atob(b64);\n  }),\n  storageManager: function storageManager(name, schemas) {\n    if (!this.databases) {\n      this.databases = {};\n    }\n\n    if (!this.storeManager) {\n      this.storeManager = {};\n    }\n\n    if (navigator && navigator.storage && navigator.storage.persist) {\n      navigator.storage.persist().then(function (persistent) {\n        if (persistent) {\n          console.log('Storage will not be cleared except by explicit user action');\n        } else {\n          console.log('Storage may be cleared by the UA under storage pressure.');\n        }\n      });\n    } // Using the implementation of Service Framework\n    // Dexie is the IndexDB Wrapper\n\n\n    if (!this.databases.hasOwnProperty(name)) {\n      var stores = {};\n\n      if (schemas) {\n        stores = schemas;\n      } else {\n        stores[name] = 'key,version,value';\n      }\n\n      this.databases[name] = new dexie_default.a(name, {\n        addons: []\n      });\n      this.databases[name].version(1).stores(stores);\n\n      if (!this.storeManager.hasOwnProperty(name)) {\n        this.storeManager[name] = new StorageManager[\"a\" /* default */](this.databases[name], name, schemas);\n      }\n    }\n\n    return this.storeManager[name];\n  },\n  syncStorageManager: function syncStorageManager(name, remote) {\n    if (!this.databases) {\n      this.databases = {};\n    }\n\n    if (!this.storeManager) {\n      this.storeManager = {};\n    }\n\n    if (navigator && navigator.storage && navigator.storage.persist) {\n      navigator.storage.persist().then(function (persistent) {\n        if (persistent) {\n          console.log('Storage will not be cleared except by explicit user action');\n        } else {\n          console.log('Storage may be cleared by the UA under storage pressure.');\n        }\n      });\n    } // PouchDB is the IndexDB Wrapper for databases synchronised with backends\n\n\n    if (!this.databases.hasOwnProperty(name)) {\n      this.databases[name] = new index_browser_es[\"a\" /* default */](name);\n\n      if (!this.storeManager.hasOwnProperty(name)) {\n        this.storeManager[name] = new SyncStorageManager[\"a\" /* default */](this.databases[name], name, remote);\n      }\n    }\n\n    return this.storeManager[name];\n  },\n\n  /*  persistenceManager() {\r\n      if (!this.localStorage) {\r\n        window.localStorage;\r\n        this.localStorage = new PersistenceManager(localStorage);\r\n      }\r\n  \r\n      return this.localStorage;\r\n    },\r\n  \r\n    createRuntimeCatalogue() {\r\n  \r\n      if (!this.catalogue) {\r\n        this.catalogue = new RuntimeCatalogue(this);\r\n      }\r\n  \r\n      return this.catalogue;\r\n    },*/\n  isOnline: function isOnline() {\n    return window.navigator.onLine;\n  },\n  listenOnline: function listenOnline(callback) {\n    window.addEventListener('online', callback);\n  },\n  listenOffline: function listenOffline(callback) {\n    window.addEventListener('offline', callback);\n  },\n  runtimeCapabilities: function runtimeCapabilities() {\n    if (!this.capabilitiesManager) {\n      var storageManager = this.storageManager('capabilities');\n      this.capabilitiesManager = new rethink_RuntimeCapabilities(storageManager);\n    }\n\n    return this.capabilitiesManager;\n  }\n});\n/* harmony default export */ var rethink_runtimeFactory = (runtimeFactory_runtimeFactory);\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/rethink/IdentitiesGUI.js\nfunction IdentitiesGUI_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction IdentitiesGUI_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction IdentitiesGUI_createClass(Constructor, protoProps, staticProps) { if (protoProps) IdentitiesGUI_defineProperties(Constructor.prototype, protoProps); if (staticProps) IdentitiesGUI_defineProperties(Constructor, staticProps); return Constructor; }\n\n// jshint browser:true, jquery: true\n\n\nvar IdentitiesGUI_IdentitiesGUI =\n/*#__PURE__*/\nfunction () {\n  function IdentitiesGUI(guiURL, idmURL, messageBus) {\n    IdentitiesGUI_classCallCheck(this, IdentitiesGUI);\n\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n\n    var _this = this;\n\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n\n    _this._messageBus.addListener(guiURL, function (msg) {\n      var funcName = msg.body.method;\n      console.log('[IdentitiesGUI.listener] received msg: ' + msg);\n\n      if (funcName === 'login') {\n        var urlreceived = msg.body.params.urlreceived;\n\n        _this._openPopup(urlreceived).then(function (returnedValue) {\n          var value = {\n            type: 'execute',\n            value: returnedValue,\n            code: 200\n          };\n          var replyMsg = {\n            id: msg.id,\n            type: 'response',\n            to: msg.from,\n            from: msg.to,\n            body: value\n          };\n\n          _this._messageBus.postMessage(replyMsg);\n        });\n\n        return;\n      }\n    });\n  }\n\n  IdentitiesGUI_createClass(IdentitiesGUI, [{\n    key: \"callIdentityModuleFunc\",\n    value: function callIdentityModuleFunc(methodName, parameters) {\n      var _this2 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var message = {\n          type: 'execute',\n          to: _this._idmURL,\n          from: _this._guiURL,\n          body: {\n            resource: 'identity',\n            method: methodName,\n            params: parameters\n          }\n        };\n\n        _this2._messageBus.postMessage(message, function (res) {\n          if (res.body.code < 299) {\n            var result = res.body.value;\n            resolve(result);\n          } else {\n            resolve(res.body);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_openPopup\",\n    value: function _openPopup(urlreceived) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        console.log('[IdentitiesGUI._openPopup] url: ' + urlreceived);\n\n        function wait(ms) {\n          var start = new Date().getTime();\n          var end = start;\n\n          while (end < start + ms) {\n            end = new Date().getTime();\n          }\n        }\n\n        var win;\n\n        if (!urlreceived) {\n          win = window.open('', 'openIDrequest', 'location=1,status=1');\n          _this3.win = win;\n          resolve();\n        } else {\n          if (!win) {\n            win = window.open('', 'openIDrequest', 'location=1,status=1');\n            _this3.win = win;\n          }\n\n          wait(1000);\n          win = _this3.win;\n          win.location.href = urlreceived;\n        } //      let win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');\n\n\n        if (window.cordova) {\n          win.addEventListener('loadstart', function (e) {\n            var url = e.url;\n            var code = /\\&code=(.+)$/.exec(url);\n            var error = /\\&error=(.+)$/.exec(url);\n\n            if (code || error) {\n              win.close();\n              return resolve(url);\n            } else {\n              return reject('openPopup error 1 - should not happen');\n            }\n          });\n        } else {\n          var pollTimer = setInterval(function () {\n            try {\n              if (win.closed) {\n                //              return reject('Some error occured when trying to get identity.');\n                clearInterval(pollTimer);\n              } //            if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {\n\n\n              if (win.document.URL.indexOf(location.origin) !== -1) {\n                window.clearInterval(pollTimer);\n                var url = win.document.URL; //              win.close();\n                //              return resolve(url);\n\n                resolve(url);\n                return win.close();\n              }\n            } catch (e) {//return reject('openPopup error 2 - should not happen');\n              //console.log(e);\n            }\n          }, 500);\n        }\n      });\n    }\n  }, {\n    key: \"authorise\",\n    value: function authorise(idp, resource) {\n      var _this4 = this;\n\n      return this._openPopup().then(function (res) {\n        var data = {\n          scope: resource,\n          idpDomain: idp\n        };\n        return _this4.callIdentityModuleFunc('getAccessTokenAuthorisationEndpoint', data);\n      }).then(function (value) {\n        console.log('[IdentitiesGUI.authorise] receivedURL from idp Proxy: ' + value);\n        return _this4._openPopup(value);\n      }).then(function (result) {\n        console.log('[IdentitiesGUI.authorise.openPopup.result]', result); // resource as array\n\n        var data = {\n          resources: [resource],\n          idpDomain: idp,\n          login: result\n        };\n        return _this4.callIdentityModuleFunc('getAccessToken', data);\n      }).then(function (result) {\n        if (result.hasOwnProperty('code') && result.code > 299) {\n          console.error('[IdentitiesGUI.authorise.getAccessToken] error', result);\n          return result;\n        } else {\n          console.log('[IdentitiesGUI.authorise.getAccessToken.result]', result);\n          return _this4.callIdentityModuleFunc('addAccessToken', result);\n        }\n      }).then(function (value) {\n        //        this._drawer.open = false;\n        return value;\n      });\n    }\n  }, {\n    key: \"unauthorise\",\n    value: function unauthorise(idp, resource) {\n      var data = {\n        resources: [resource],\n        domain: idp\n      };\n      return this.callIdentityModuleFunc('unauthorise', Object(utils[\"i\" /* deepClone */])(data)).then(function (result) {\n        console.log('[IdentitiesGUI.unauthorise] result: ' + result);\n        return result;\n      });\n    }\n  }, {\n    key: \"reauthorise\",\n    value: function reauthorise(url, idp, resource) {\n      var _this5 = this;\n\n      return this._openPopup(url).then(function (result) {\n        console.log('[IdentitiesGUI.reauthorise.openPopup.result]', result); // resource as array\n\n        var data = {\n          resources: [resource],\n          idpDomain: idp,\n          login: result\n        };\n        return _this5.callIdentityModuleFunc('getAccessToken', data);\n      }).then(function (result) {\n        if (result.hasOwnProperty('code') && result.code > 299) {\n          console.error('[IdentitiesGUI.authorise.getAccessToken] error', result);\n          return result;\n        } else {\n          console.log('[IdentitiesGUI.authorise.getAccessToken.result]', result);\n          return _this5.callIdentityModuleFunc('addAccessToken', result);\n        }\n      }).then(function (value) {\n        //        this._drawer.open = false;\n        return value;\n      });\n    }\n  }, {\n    key: \"loginWithIDP\",\n    value: function loginWithIDP(idp) {\n      var _this6 = this;\n\n      var _publicKey;\n\n      return this._openPopup().then(function (result) {\n        return _this6.callIdentityModuleFunc('getMyPublicKey', {});\n      }).then(function (publicKey) {\n        _publicKey = publicKey;\n        var data = {\n          contents: publicKey,\n          origin: 'origin',\n          usernameHint: undefined,\n          idpDomain: idp\n        };\n        return _this6.callIdentityModuleFunc('sendGenerateMessage', data);\n      }).then(function (value) {\n        console.log('[IdentitiesGUI.loginWithIDP] received reply to request for Login URL from idp Proxy: ' + value + '...');\n\n        if (value.hasOwnProperty('description') && value.description.hasOwnProperty('loginUrl')) {\n          var url = value.description.loginUrl;\n          var finalURL; //check if the receivedURL contains the redirect field and replace it\n\n          if (url.indexOf('redirect_uri') !== -1) {\n            var firstPart = url.substring(0, url.indexOf('redirect_uri'));\n            var secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n            var secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length); //check if the reddirect field is the last field of the URL\n\n            if (secondPart.indexOf('&') !== -1) {\n              finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n            } else {\n              finalURL = firstPart + 'redirect_uri=' + location.origin;\n            }\n          }\n\n          _this6.resultURL = finalURL || url;\n          console.log('[IdentitiesGUI.openPopup]', _this6.resultURL);\n          return _this6._openPopup(_this6.resultURL);\n        }\n      }).then(function (identity) {\n        console.log('[IdentitiesGUI.loginWithIDP] identity', identity);\n        var data = {\n          contents: _publicKey,\n          origin: 'origin',\n          usernameHint: identity,\n          idpDomain: idp\n        };\n        return _this6.callIdentityModuleFunc('sendGenerateMessage', data);\n      }).then(function (result) {\n        console.log('[IdentitiesGUI.loginWithIDP] sendGenerateMessage.result', result);\n        return _this6.callIdentityModuleFunc('addAssertion', result);\n      }).then(function (value) {\n        //        this._drawer.open = false;\n        var userURL = {\n          type: 'identity',\n          value: value.userProfile.userURL\n        }; // const userIdentity = {type: 'identity', value: value.userProfile};\n\n        console.log('[IdentitiesGUI.loginWithIDP] final identity ', value); //      this._alreadyLogin = true;\n\n        return userURL; // return userIdentity;\n      });\n    }\n  }, {\n    key: \"logOut\",\n    value: function logOut() {\n      var _this = this;\n\n      console.log('[IdentitiesGUI.logOut]');\n      return new Promise(function (resolve, reject) {\n        //      this._alreadyLogin = false;\n        resolve(true);\n      });\n    }\n  }]);\n\n  return IdentitiesGUI;\n}();\n\n/* harmony default export */ var rethink_IdentitiesGUI = (IdentitiesGUI_IdentitiesGUI);\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(1);\nvar loglevel_default = /*#__PURE__*/__webpack_require__.n(loglevel);\n\n// CONCATENATED MODULE: ./src/logLevels.js\n\nvar a = loglevel_default.a.getLogger('address-allocation');\nvar b = loglevel_default.a.getLogger('Bus');\nvar c = loglevel_default.a.getLogger('MessageBus');\nvar d = loglevel_default.a.getLogger('CoreDiscovery');\nvar e = loglevel_default.a.getLogger('StorageManager');\nvar f = loglevel_default.a.getLogger('HypertyResourcesStorage');\nvar g = loglevel_default.a.getLogger('IdentityModule');\nvar h = loglevel_default.a.getLogger('PEP');\nvar logLevels_i = loglevel_default.a.getLogger('P2PConnectionResolve');\nvar j = loglevel_default.a.getLogger('Registry');\nvar k = loglevel_default.a.getLogger('RuntimeUA');\nvar l = loglevel_default.a.getLogger('Loader');\nvar m = loglevel_default.a.getLogger('Descriptors');\nvar n = loglevel_default.a.getLogger('DataObjectsStorage');\nvar o = loglevel_default.a.getLogger('Subscription');\nvar p = loglevel_default.a.getLogger('SubscriptionManager');\nvar q = loglevel_default.a.getLogger('ObserverObject');\nvar r = loglevel_default.a.getLogger('ReporterObject');\nvar s = loglevel_default.a.getLogger('SynSubscription');\nvar t = loglevel_default.a.getLogger('SyncherManager');\nvar u = loglevel_default.a.getLogger('IdentityHandler');\nvar v = loglevel_default.a.getLogger('CryptoManager');\nvar x = loglevel_default.a.getLogger('Pipeline');\nvar f1 = loglevel_default.a.getLogger('Syncher');\n\n/**\r\n  0 actual logging methods, ordered and available as:\r\n\r\n      0 - log.trace(msg)\r\n      1 - log.debug(msg)\r\n      2 - log.info(msg)\r\n      3 - log.warn(msg)\r\n      4 - log.error(msg)\r\n\r\n  log.log(msg) is also available, as an alias for log.debug(msg), to improve compatibility with console, and make migration easier.\r\n\r\n  Exact output formatting of these will depend on the console available in the current context of your application. For example, many environments will include a full stack trace with all trace() calls, and icons or similar to highlight other calls.\r\n\r\n  These methods should never fail in any environment, even if no console object is currently available, and should always fall back to an available log method even if the specific method called (e.g. warn) isn't available.\r\n\r\n  Be aware that all this means that these method won't necessarily always produce exactly the output you expect in every environment; loglevel only guarantees that these methods will never explode on you, and that it will call the most relevant method it can find, with your argument. Firefox is a notable example here: due to a current Firefox bug log.trace(msg) calls in Firefox will print only the stacktrace, and won't include any passed message arguments.\r\n\r\n*/\n// address-allocation\n\na.setLevel(0); // Bus\n\nb.setLevel(3); // MessageBus\n\nc.setLevel(3); // CoreDiscovery\n\nd.setLevel(5); // StorageManager\n\ne.setLevel(0); // HypertyResourcesStorage\n\nf.setLevel(3); // IdentityModule\n\ng.setLevel(0); // PEP\n\nh.setLevel(3); // P2PConnectionResolve\n\nlogLevels_i.setLevel(3); // Registry\n\nj.setLevel(0); // RuntimeUA\n\nk.setLevel(0); // Loader\n\nl.setLevel(0); // Descriptors\n\nm.setLevel(3); // DataObjectsStorage\n\nn.setLevel(0); // Subscription\n\no.setLevel(3); // SubscriptionManager\n\np.setLevel(3); // ObserverObject\n\nq.setLevel(0); // ReporterObject\n\nr.setLevel(0); // SynSubscription\n\ns.setLevel(3); // SyncherManager\n\nt.setLevel(0); // IdentityHandler\n\nu.setLevel(3); // CryptoManager\n\nv.setLevel(0); // Pipeline\n\nx.setLevel(0); // Syncher\n\nf1.setLevel(0); // Syncher DataObjectObserver\n\nf1.setLevel(0);\n// CONCATENATED MODULE: ./src/runtime/runtimeUtils.js\nvar runtimeUtils = {\n  runtimeDescriptor: {},\n  runtimeCapabilities: {\n    constraints: {}\n  }\n};\n// CONCATENATED MODULE: ./src/allocation/AddressAllocation.js\nfunction AddressAllocation_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction AddressAllocation_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AddressAllocation_createClass(Constructor, protoProps, staticProps) { if (protoProps) AddressAllocation_defineProperties(Constructor.prototype, protoProps); if (staticProps) AddressAllocation_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log system\n\nvar log = loglevel[\"getLogger\"]('address-allocation');\n // TODO: this could not be the best way to do a Singleton but at this moment it works;\n\nvar instance;\n/**\r\n * Class will ask to the message node for addresses\r\n */\n\nvar AddressAllocation_AddressAllocation =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _url: URL\r\n  _bus: MiniBus\r\n  */\n\n  /**\r\n   * Create an Address Allocation\r\n   * @param  {URL.URL}      url - url from who is sending the message\r\n   * @param  {MiniBus}      bus - MiniBus used for address allocation\r\n   */\n  function AddressAllocation(url, bus, registry, subscriptionManager) {\n    AddressAllocation_classCallCheck(this, AddressAllocation);\n\n    if (!instance) {\n      this._url = url + '/address-allocation';\n      this._bus = bus;\n      this._registry = registry;\n      this._subscriptionManager = subscriptionManager;\n      instance = this;\n    } else {\n      return instance;\n    }\n  }\n\n  AddressAllocation_createClass(AddressAllocation, [{\n    key: \"create\",\n\n    /**\r\n     *\r\n     * Ask for creation of a number of Hyperty addresses, to the domain message node.\r\n     *\r\n     * @param {Domain} domain - domain of the message node\r\n     * @param {Number} number - number of address to be allocated\r\n     * @param {Descriptor} info - descriptor to search for the hyperty (TODO:// this should be confirmed)\r\n     * @see https://github.com/reTHINK-project/specs/blob/master/datamodel/core/hyperty-catalogue/readme.md#catalogue-data-model\r\n     * @param {scheme} scheme - scheme of address to be created or reused, like: hyperty, comm, context, etc;\r\n     * @param {boolean|URL.HypertyURL} reuseURL - reuseURL is used to reuse the hypertyURL previously registred;\r\n     * @returns {Promise<Object, Error>} this is Promise and returns an object with the address information\r\n     *\r\n     * @memberOf AddressAllocation\r\n     */\n    value: function create(domain, number, info, scheme, reuseURL) {\n      log.log('[AddressAllocation.create] info ', info); //debugger;\n\n      if (reuseURL) {\n        if (typeof reuseURL === 'boolean') {\n          if (reuseURL) {\n            return this._reuseAllocatedAddress(domain, number, info, scheme, reuseURL);\n          } else {\n            return this._allocateNewAddress(domain, scheme, number, info);\n          }\n        }\n\n        if (typeof reuseURL === 'string' && Object(utils[\"v\" /* isURL */])(reuseURL)) {\n          //return this._reuseAllocatedAddress(domain, number, info, scheme, reuseURL);\n          return new Promise(function (resolve, reject) {\n            var value = {\n              newAddress: false,\n              address: [reuseURL]\n            };\n            return resolve(value);\n          });\n        }\n      } else {\n        log.log('[AddressAllocation] - new address will be allocated'); // if there is no URL saved request a new URL\n\n        return this._allocateNewAddress(domain, scheme, number, info);\n      }\n    }\n  }, {\n    key: \"_reuseAllocatedAddress\",\n    value: function _reuseAllocatedAddress(domain, number, info, scheme, reuseURL) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        console.log('REUSETEST -  _reuseAllocatedAddress', domain, number, info, scheme, reuseURL);\n\n        _this2._registry.checkRegisteredURLs(info, reuseURL).then(function (urls) {\n          console.log('REUSETEST -  registeredurls', urls);\n\n          if (urls) {\n            log.info('[AddressAllocation - ' + scheme + '] - Reuse URL');\n            var value = {\n              newAddress: false,\n              address: urls\n            };\n            resolve(value);\n          } else {\n            if (typeof reuseURL === 'string') {\n              log.info('[AddressAllocation - reuseURL] - Object ' + reuseURL + ' not found');\n              reject('URL Not Found');\n            } else if (typeof reuseURL === 'boolean') {\n              _this2._allocateNewAddress(domain, scheme, number, info).then(resolve)[\"catch\"](reject);\n            } else {\n              reject('URL Not Found');\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_allocateNewAddress\",\n    value: function _allocateNewAddress(domain, scheme, number, info) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var addresses = [];\n        var i;\n\n        for (i = 0; i < number; i++) {\n          addresses.push(scheme + '://' + domain + '/' + Object(utils[\"n\" /* generateGUID */])());\n        }\n\n        var result = {\n          newAddress: true,\n          address: addresses\n        };\n\n        if (scheme === 'hyperty') {\n          if (info.hasOwnProperty('configuration') && info.configuration.hasOwnProperty('domain_routing') && !info.configuration.domain_routing) resolve(result);else {\n            _this._subscriptionManager.createSubscription(domain, addresses, _this._url).then(function () {\n              resolve(result);\n            });\n          }\n        } else resolve(result);\n        /*      let msg = {\r\n                type: 'create', from: this._url, to: 'domain://msg-node.' + domain + '/address-allocation',\r\n                body: {value: { number: number } }\r\n              };\r\n        \r\n              if (scheme !== 'hyperty') msg.body.scheme = scheme;\r\n        \r\n              log.info('[AddressAllocation - ' + scheme + '] - Request new URL');\r\n        \r\n              this._bus.postMessage(msg, (reply) => {\r\n                if (reply.body.code === 200) {\r\n                  let result = {newAddress: true, address: reply.body.value.allocated};\r\n                  resolve(result);\r\n                } else {\r\n                  reject(reply.body.desc);\r\n                }\r\n              });*/\n\n      });\n    }\n    /**\r\n    * Send a request to the domain message node, to deallocate one or more addresses\r\n    * @param  {Domain} domain - Domain of the message node.\r\n    * @param  {addresses} addresses to request the deallocation\r\n    * @returns {Promise}  the response by the message node\r\n    */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(domain, addresses) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        resolve(200);\n        /*      let message = {\r\n                type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/address-allocation',\r\n                body: {childrenResources: addresses}\r\n              };\r\n        \r\n              _this._bus.postMessage(message, (reply) => {\r\n                if (reply.body.code === 200) {\r\n                  resolve(reply.body.code);\r\n                } else {\r\n                  reject(reply.body.desc);\r\n                }\r\n              });*/\n      });\n    }\n  }, {\n    key: \"url\",\n\n    /**\r\n     * get the URL value\r\n     * @return {string} The url value;\r\n     */\n    get: function get() {\n      return this._url;\n    }\n  }], [{\n    key: \"instance\",\n    get: function get() {\n      if (!instance) {\n        throw new Error('The address allocation was not instantiated');\n      }\n\n      return instance;\n    }\n  }]);\n\n  return AddressAllocation;\n}();\n\n/* harmony default export */ var allocation_AddressAllocation = (AddressAllocation_AddressAllocation);\n// CONCATENATED MODULE: ./src/registry/RegistryDataModel.js\nfunction RegistryDataModel_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction RegistryDataModel_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RegistryDataModel_createClass(Constructor, protoProps, staticProps) { if (protoProps) RegistryDataModel_defineProperties(Constructor.prototype, protoProps); if (staticProps) RegistryDataModel_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\r\n*   Registry Data Model includes all Objects to be handled by the Registry functionality including\r\n*/\nvar RegistryDataModel =\n/*#__PURE__*/\nfunction () {\n  function RegistryDataModel(id, url, descriptorURL, p2pRequester, startingTime, lastModified, status, stubs, stubsConfiguration) {\n    RegistryDataModel_classCallCheck(this, RegistryDataModel);\n\n    var _this = this;\n\n    _this._id = id;\n    _this._url = url;\n    _this._descriptorURL = descriptorURL;\n    _this._startingTime = startingTime;\n    _this._lastModified = lastModified;\n    _this._status = status;\n    _this._stubs = stubs;\n    _this._stubsConfiguration = stubsConfiguration;\n    _this._p2pRequester = p2pRequester;\n  }\n\n  RegistryDataModel_createClass(RegistryDataModel, [{\n    key: \"id\",\n    get: function get() {\n      var _this = this;\n\n      return _this._id;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      var _this = this;\n\n      return _this._url;\n    }\n  }, {\n    key: \"descriptorURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._descriptorURL;\n    }\n  }, {\n    key: \"p2pRequester\",\n    get: function get() {\n      var _this = this;\n\n      return _this._p2pRequester;\n    }\n  }, {\n    key: \"lastModified\",\n    get: function get() {\n      var _this = this;\n\n      return _this._lastModified;\n    }\n  }]);\n\n  return RegistryDataModel;\n}();\n\n/* harmony default export */ var registry_RegistryDataModel = (RegistryDataModel);\n// CONCATENATED MODULE: ./src/registry/HypertyInstance.js\nfunction HypertyInstance_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { HypertyInstance_typeof = function _typeof(obj) { return typeof obj; }; } else { HypertyInstance_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return HypertyInstance_typeof(obj); }\n\nfunction HypertyInstance_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction HypertyInstance_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HypertyInstance_createClass(Constructor, protoProps, staticProps) { if (protoProps) HypertyInstance_defineProperties(Constructor.prototype, protoProps); if (staticProps) HypertyInstance_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction HypertyInstance_possibleConstructorReturn(self, call) { if (call && (HypertyInstance_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return HypertyInstance_assertThisInitialized(self); }\n\nfunction HypertyInstance_getPrototypeOf(o) { HypertyInstance_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return HypertyInstance_getPrototypeOf(o); }\n\nfunction HypertyInstance_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction HypertyInstance_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) HypertyInstance_setPrototypeOf(subClass, superClass); }\n\nfunction HypertyInstance_setPrototypeOf(o, p) { HypertyInstance_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return HypertyInstance_setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\r\n*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.\r\n*/\n\nvar HypertyInstance =\n/*#__PURE__*/\nfunction (_RegistryDataModel) {\n  HypertyInstance_inherits(HypertyInstance, _RegistryDataModel);\n\n  function HypertyInstance(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context, p2pHandler, p2pRequester, dataSchemes, resources, startingTime, lastModified) {\n    var _this2;\n\n    HypertyInstance_classCallCheck(this, HypertyInstance);\n\n    _this2 = HypertyInstance_possibleConstructorReturn(this, HypertyInstance_getPrototypeOf(HypertyInstance).call(this, id, url, descriptorURL, p2pRequester, startingTime, lastModified));\n\n    var _this = HypertyInstance_assertThisInitialized(_this2);\n\n    _this._descriptor = descriptor;\n    _this._hypertyURL = hypertyURL;\n    _this._user = user;\n    _this._guid = guid;\n    _this._runtime = runtime;\n    _this._context = context;\n    _this._p2pHandler = p2pHandler;\n    _this._dataSchemes = dataSchemes;\n    _this._resources = resources;\n    return _this2;\n  }\n\n  HypertyInstance_createClass(HypertyInstance, [{\n    key: \"user\",\n    set: function set(identity) {\n      var _this = this;\n\n      _this.user = identity;\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._user;\n    }\n  }, {\n    key: \"hypertyURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._hypertyURL;\n    }\n  }, {\n    key: \"descriptor\",\n    get: function get() {\n      var _this = this;\n\n      return _this._descriptor;\n    }\n  }, {\n    key: \"objectName\",\n    get: function get() {\n      var _this = this;\n\n      return _this._descriptor._objectName;\n    }\n  }, {\n    key: \"p2pHandler\",\n    get: function get() {\n      var _this = this;\n\n      return _this._p2pHandler;\n    }\n  }, {\n    key: \"dataSchemes\",\n    get: function get() {\n      var _this = this;\n\n      return _this._dataSchemes;\n    }\n  }, {\n    key: \"resources\",\n    get: function get() {\n      var _this = this;\n\n      return _this._resources;\n    }\n  }, {\n    key: \"runtimeURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._runtime;\n    }\n  }]);\n\n  return HypertyInstance;\n}(registry_RegistryDataModel);\n\n/* harmony default export */ var registry_HypertyInstance = (HypertyInstance);\n// CONCATENATED MODULE: ./src/registry/DomainRegistration.js\nfunction DomainRegistration_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DomainRegistration_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DomainRegistration_createClass(Constructor, protoProps, staticProps) { if (protoProps) DomainRegistration_defineProperties(Constructor.prototype, protoProps); if (staticProps) DomainRegistration_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar DomainRegistration_log = loglevel[\"getLogger\"]('Registry');\n\n\n/**\r\n* Runtime DomainRegistration Interface\r\n*/\n\nvar DomainRegistration_DomainRegistration =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.\r\n  * @param  {MessageBus}          messageBus                msgbus\r\n  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL\r\n  * @param  {DomainURL}           domain        remoteRegistry\r\n  */\n  function DomainRegistration(runtimeURL, registryURL, domain, messageBus) {\n    DomainRegistration_classCallCheck(this, DomainRegistration);\n\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\n    if (!registryURL) throw new Error('registryURL is missing.');\n    if (!domain) throw new Error('domain is missing.');\n    if (!messageBus) throw new Error('messageBus is missing.');\n\n    var _this = this;\n\n    _this.registryURL = registryURL;\n    _this.runtimeURL = runtimeURL;\n    _this._registrationRetries = 5; // number of attempts to register Hyperties and DataObjects when errors occurs\n    // the expires in 3600, represents 1 hour\n    //the expires is in seconds, unit of measure received by the domain registry\n\n    _this.expiresTime = 3600;\n    _this._domain = domain;\n    _this._messageBus = messageBus;\n  }\n  /**\r\n  *  function to unregister an hypertyInstance in the Domain Registry\r\n  *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n  *\r\n  */\n\n\n  DomainRegistration_createClass(DomainRegistration, [{\n    key: \"unregisterHyperty\",\n    value: function unregisterHyperty(hypertyInstance) {\n      var _this = this;\n\n      var message = {\n        type: 'update',\n        from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain,\n        body: {\n          resource: '/hyperty/' + hypertyInstance,\n          value: 'disconnected',\n          attribute: 'status'\n        }\n      };\n\n      _this._messageBus.postMessage(message, function (reply) {\n        DomainRegistration_log.log('[DomainRegistration] unregister hyperty Reply', reply);\n      });\n    }\n    /**\r\n    *  function to unregister a Data Object in the Domain Registry\r\n    *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n    *\r\n    */\n\n  }, {\n    key: \"unregisterDataObject\",\n    value: function unregisterDataObject(url) {\n      var _this = this;\n\n      var message = {\n        type: 'update',\n        from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain,\n        body: {\n          resource: url,\n          value: {\n            status: 'disconnected'\n          }\n        }\n      };\n\n      _this._messageBus.postMessage(message, function (reply) {\n        DomainRegistration_log.log('[DomainRegistration] unregister dataObject Reply', reply);\n      });\n    }\n    /**\r\n    *  function to delete an dataObjectInstance in the Domain Registry\r\n    *  @param   {String}    name      DataObjectName\r\n    */\n\n  }, {\n    key: \"deleteDataObjectInstance\",\n    value: function deleteDataObjectInstance(name) {\n      var _this = this;\n\n      var message = {\n        type: 'delete',\n        from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain,\n        body: {\n          value: {\n            name: name\n          }\n        }\n      };\n\n      _this._messageBus.postMessage(message, function (reply) {\n        DomainRegistration_log.log('[DomainRegistration] unregister dataObject Reply', reply);\n      });\n    }\n    /**\r\n    * Function to update an Hyperty\r\n    */\n\n  }, {\n    key: \"updateHypertyInstance\",\n    value: function updateHypertyInstance(resource, value) {\n      var _this = this;\n\n      var message = {\n        type: 'UPDATE',\n        from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain,\n        body: {\n          resource: resource,\n          value: value\n        }\n      };\n\n      _this._messageBus.post.postMessage(message, function (reply) {// log.log('[Registry] Updated hyperty reply', reply);\n      });\n    }\n    /**\r\n    * To register a new Data Object in the Domain Registry.\r\n    * @param  {JSON}     registration                   registration data to be used\r\n    * @param  {boolean}     resume                     if this is just to update the registration with the resume of a data object\r\n    */\n\n  }, {\n    key: \"registerDataObject\",\n    value: function registerDataObject(registration, resume, p2pHandlerStub) {\n      var _this = this;\n\n      var p2pHandler;\n      var p2pRequester;\n      return new Promise(function (resolve, reject) {\n        var dataScheme = [];\n        var filteredDataScheme = registration.url.split(':');\n        dataScheme.push(filteredDataScheme[0]);\n\n        if (Object.keys(p2pHandlerStub).length !== 0) {\n          p2pHandler = p2pHandlerStub[_this.runtimeURL].url;\n          p2pRequester = runtimeUtils.runtimeDescriptor.p2pRequesterStub;\n        }\n\n        registration.startingTime = registration.created;\n        delete registration.authorise;\n        delete registration.created;\n        delete registration.mutual;\n        delete registration.resume;\n        if (!registration.expires) registration.expires = _this.expiresTime;\n        registration.dataSchemes = dataScheme;\n\n        if (p2pHandler) {\n          registration.p2pHandler = p2pHandler;\n          registration.p2pRequester = p2pRequester;\n        }\n\n        registration.status = 'live';\n        var message;\n\n        if (!resume) {\n          DomainRegistration_log.log('[Registry.registerDataObject] registering new data object URL', registration);\n          message = {\n            type: 'create',\n            from: _this.registryURL,\n            to: 'domain://registry.' + _this._domain,\n            body: {\n              value: registration,\n              policy: 'policy'\n            }\n          };\n        } else {\n          DomainRegistration_log.log('[Registry.registerDataObject] registering previously registered data object URL', registration);\n          message = {\n            type: 'update',\n            to: 'domain://registry.' + _this._domain,\n            from: _this.registryURL,\n            body: {\n              resource: registration.url,\n              value: {\n                status: 'live'\n              }\n            }\n          };\n        }\n\n        try {\n          _this._messageBus.postMessageWithRetries(message, _this._registrationRetries, function (reply) {\n            // log.log('[Registry.registerDataObject] ===> registerDataObject Reply: ', reply);\n            if (reply.body.code === 200) {\n              resolve(registration);\n            } else {\n              reject('error on register DataObject');\n            }\n          });\n        } catch (e) {\n          DomainRegistration_log.error(e);\n          reject(e);\n        } //timer to keep the registration alive\n        // the time is defined by a little less than half of the expires time defined\n\n\n        var keepAliveTimer = setInterval(function () {\n          var message = {\n            type: 'update',\n            from: _this.registryURL,\n            to: 'domain://registry.' + _this._domain,\n            body: {\n              resource: registration.url,\n              value: {\n                status: 'live'\n              },\n              method: 'refresh'\n            }\n          };\n\n          _this._messageBus.postMessage(message, function (reply) {// log.log('[Registry.registerDataObject] KeepAlive Reply: ', reply);\n          });\n        }, registration.expires / 1.1 / 2 * 1000);\n      });\n    }\n    /**\r\n    * To register a new Hyperty in the Domain Registry.\r\n    * @param  {HypertyInstance}     hyperty            Hyperty to be registered\r\n    * @param  {boolean}     resume                     if this is just to update the registration with the resume of a data object\r\n    */\n\n  }, {\n    key: \"registerHyperty\",\n    value: function registerHyperty(hyperty, resume) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var runtime = _this.runtimeURL;\n        var status = 'live'; //message to register the new hyperty, within the domain registry\n\n        var message;\n        var registrationExpires = _this.expiresTime;\n        var messageValue = {\n          user: hyperty.user.email,\n          descriptor: hyperty.descriptorURL,\n          url: hyperty.hypertyURL,\n          expires: registrationExpires,\n          resources: hyperty.resources,\n          dataSchemes: hyperty.dataSchemes,\n          runtime: runtime,\n          status: status\n        }; // set a different expires if defined in the hyperty configuration\n\n        if (hyperty.p2pHandler) {\n          messageValue.p2pHandler = hyperty.p2pHandler;\n          messageValue.p2pRequester = hyperty.p2pRequester;\n        } // set a different expires value if configured in the Hyperty descriptor\n\n\n        if (hyperty.descriptor.configuration && hyperty.descriptor.configuration.expires) registrationExpires = hyperty.descriptor.configuration.expires;\n\n        if (!resume) {\n          // log.log('[Registry registerHyperty] registering new Hyperty URL', addressURL.address[0]);\n          // set a different expires if defined in the hyperty configuration\n          // log.log('[Registry registerHyperty] registering new Hyperty at domain registry ', messageValue);\n          message = {\n            type: 'create',\n            from: _this.registryURL,\n            to: 'domain://registry.' + _this._domain,\n            body: {\n              value: messageValue,\n              policy: 'policy'\n            }\n          };\n        } else {\n          // log.log('[Registry registerHyperty] registering previously registered Hyperty URL', addressURL.address[0]);\n          message = {\n            type: 'update',\n            to: 'domain://registry.' + _this._domain,\n            from: _this.registryURL,\n            body: {\n              resource: hyperty.hypertyURL,\n              value: {\n                status: 'live',\n                user: hyperty.user.email\n              }\n            }\n          };\n\n          if (hyperty.p2pHandler) {\n            message.body.value.p2pHandler = hyperty.p2pHandler;\n            message.body.value.p2pRequester = hyperty.p2pRequester;\n          }\n        } // log.log('[Registry registerHyperty] Hyperty registration at domain registry  - ', message);\n\n\n        try {\n          _this._messageBus.postMessageWithRetries(message, _this._registrationRetries, function (reply) {\n            // log.log('[Registry registerHyperty] Hyperty registration response: ', reply);\n            if (reply.body.code === 200) {\n              var result = {\n                url: hyperty.hypertyURL\n              };\n\n              if (hyperty.p2pHandler) {\n                result.p2pHandler = hyperty.p2pHandler;\n                result.p2pRequester = hyperty.p2pRequester;\n              }\n\n              resolve(result);\n            } else if (reply.body.code === 404) {\n              // log.log('[Registry registerHyperty] The update was not possible. Registering new Hyperty at domain registry');\n              message = {\n                type: 'create',\n                from: _this.registryURL,\n                to: 'domain://registry.' + _this._domain,\n                body: {\n                  value: messageValue,\n                  policy: 'policy'\n                }\n              };\n\n              try {\n                _this._messageBus.postMessageWithRetries(message, _this._registrationRetries, function (reply) {\n                  // log.log('[Registry registerHyperty] Hyperty registration update response: ', reply);\n                  if (reply.body.code === 200) {\n                    var _result = {\n                      url: hyperty.hypertyURL\n                    };\n\n                    if (hyperty.p2pHandler) {\n                      _result.p2pHandler = hyperty.p2pHandler;\n                      _result.p2pRequester = hyperty.p2pRequester;\n                    }\n\n                    resolve(_result);\n                  } else {\n                    throw new Error('Failed to register an Hyperty: ' + reply);\n                  }\n                });\n              } catch (e) {\n                DomainRegistration_log.error(e);\n                reject(e);\n              }\n            } else {\n              throw new Error('Failed to register an Hyperty to domain: ', reply);\n            }\n          });\n        } catch (e) {\n          DomainRegistration_log.error(e);\n          reject(e);\n        } //timer to keep the registration alive\n        // the time is defined by a little less than half of the expires time defined\n\n\n        var keepAliveTimer = setInterval(function () {\n          var message = {\n            type: 'update',\n            from: _this.registryURL,\n            to: 'domain://registry.' + _this._domain,\n            body: {\n              resource: hyperty.hypertyURL,\n              value: {\n                status: 'live'\n              },\n              method: 'refresh'\n            }\n          };\n\n          _this._messageBus.postMessage(message, function (reply) {// log.log('[Registry registerHyperty] KeepAlive Reply: ', reply);\n          });\n        }, registrationExpires / 1.1 / 2 * 1000);\n      });\n    }\n  }]);\n\n  return DomainRegistration;\n}();\n\n/* harmony default export */ var registry_DomainRegistration = (DomainRegistration_DomainRegistration);\n// CONCATENATED MODULE: ./src/registry/P2PConnectionResolve.js\nfunction P2PConnectionResolve_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction P2PConnectionResolve_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction P2PConnectionResolve_createClass(Constructor, protoProps, staticProps) { if (protoProps) P2PConnectionResolve_defineProperties(Constructor.prototype, protoProps); if (staticProps) P2PConnectionResolve_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar P2PConnectionResolve_log = loglevel[\"getLogger\"]('P2PConnectionResolve');\n/**\r\n*   To process address resolution for p2p connections\r\n*/\n\nvar P2PConnectionResolve =\n/*#__PURE__*/\nfunction () {\n  function P2PConnectionResolve(registry) {\n    P2PConnectionResolve_classCallCheck(this, P2PConnectionResolve);\n\n    var _this = this;\n\n    _this._registry = registry;\n    _this._remoteP2PEntities = {}; // All remote entities and associated runtime url that are reachable with existing p2p connections\n  }\n  /**\r\n  * Verifies if remote Entity can be reached with a P2P Connection.\r\n  * @param  {URL.URL}        info           object URL\r\n  * @return {HypertyDataObjectInstance}  addressURL     return the Data Object instance registered URL, return undefined otherwise\r\n  */\n\n\n  P2PConnectionResolve_createClass(P2PConnectionResolve, [{\n    key: \"checkP2P\",\n    value: function checkP2P(msg) {\n      if (!msg.hasOwnProperty('to')) {\n        // throw Error('The p2p verification was failed');\n        return Promise.reject('The p2p verification was failed');\n      }\n\n      var scheme = msg.to.split('://')[0];\n      var comp = msg.to.split('://')[1].split('/')[2];\n      var url;\n      if (comp) url = msg.to.substring(0, msg.to.indexOf('/' + comp));else url = msg.to;\n      var p2p = {};\n      if (msg.body && msg.body.p2p) p2p.p2p = msg.body.p2p;\n\n      if (msg.body && msg.body.p2pHandler && msg.body.p2pRequester) {\n        p2p.p2pHandler = msg.body.p2pHandler;\n        p2p.p2pRequester = msg.body.p2pRequester;\n        p2p.runtime = msg.body.p2pHandler.split('/p2phandler/')[0];\n      }\n\n      switch (scheme) {\n        case 'runtime':\n          return this.checkP2PRuntime(url, p2p);\n          break;\n\n        default:\n          return this.checkP2PEntity(url, p2p);\n          break;\n      }\n    }\n    /**\r\n    * Verifies if remote Entity (Hyperty or Data Object) can be reached with a P2P Connection.\r\n    * @param  {string}        url           Remote Entity URL to be checked\r\n    * @param  {object}        p2p           p2p information to be used including ´runtime´ with remote Runtime URL, 'p2pHandler' remote P2P Handler Stub URL and p2pRequester with Catalogue URL of P2P Requester to be used\r\n    * @return {promise} registeredEntity     if p2p connection is possible it returns p2p information to be used in the connection, otherwise the promise is rejected\r\n    */\n\n  }, {\n    key: \"checkP2PEntity\",\n    value: function checkP2PEntity(url, p2p) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var remoteEntity = _this._remoteP2PEntities[url];\n        if (remoteEntity) resolve(remoteEntity);else if (p2p.runtime) resolve(p2p); // use provided p2p if available in the message body\n        else if (p2p.p2p) {\n            // otherwise look on Domain Registry\n            P2PConnectionResolve_log.log('[Registry - checkP2PEntity] - search in Domain Registry: ', url);\n            var message = {\n              type: 'read',\n              from: _this._registry.registryURL,\n              to: 'domain://registry.' + _this._registry._domain,\n              body: {\n                resource: url\n              }\n            };\n\n            _this._registry._messageBus.postMessage(message, function (reply) {\n              P2PConnectionResolve_log.log('[Registry - checkP2PEntity] Domain Registry reply', reply);\n\n              if ('value' in reply.body) {\n                //todo: store retrieved entity\n                var resolvedEntity = reply.body.value;\n\n                if (resolvedEntity.hasOwnProperty('p2pHandler')) {\n                  resolve(resolvedEntity);\n                } else {\n                  reject('[Registry checkP2PEntity] Hyperty found does not support P2P', reply.body.value);\n                }\n              } else {\n                reject('[Registry checkP2PEntity] Hyperty with P2PHandler not found', reply.body.code);\n              }\n            });\n          } else reject('[Registry checkP2PEntity] No P2P Connection available for ', url);\n      });\n    }\n    /**\r\n    * Verifies if remote Runtime can be reached with a P2P Connection.\r\n    * @param  {URL.URL}        runtimeURL           Runtime URL\r\n    * @return {Object}  p2pConnection    return the P2PConnection instance registered URL, return undefined otherwise\r\n    */\n\n  }, {\n    key: \"checkP2PRuntime\",\n    value: function checkP2PRuntime(runtimeURL, p2p) {\n      var _this = this;\n\n      var registeredRuntime = {}; // look on locally stored p2p connections\n\n      return new Promise(function (resolve, reject) {\n        if (_this._registry.p2pConnectionList[runtimeURL]) {\n          resolve({\n            runtime: runtimeURL\n          });\n        } else if (p2p.runtime) {\n          registeredRuntime = p2p;\n          resolve(registeredRuntime);\n        } else reject('[Registry.P2PConnectionResolve.checkP2PRuntime] No P2P Connection found to ', runtimeURL);\n      });\n    }\n    /**\r\n    * Verifies if remote Hyperty can be reached with a P2P Connection.\r\n    * @param  {JSON}        info           object or entity charateristics info\r\n    * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise\r\n    */\n\n  }, {\n    key: \"checkP2PHyperty\",\n    value: function checkP2PHyperty(hypertyURL, p2p) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var hyperty; // look on locally stored hyperties\n\n        for (var i in _this._registry.remoteHypertyList) {\n          hyperty = _this._registry.remoteHypertyList[i];\n          P2PConnectionResolve_log.log('[Registry - checkP2PHyperty] - for each Hyperty: ', hyperty); // todo: change to \"hyperty.url\" to be aligned with hyperty instance data model spec\n\n          if (hyperty.hypertyID === hypertyURL) {\n            if (hyperty.hasOwnProperty('p2pHandler')) {\n              resolve(hyperty);\n            } else {\n              reject('[Registry checkP2PHyperty] Hyperty found does not support P2P', hyperty);\n            }\n\n            return;\n          }\n        }\n\n        if (!hyperty && p2p.runtime) resolve(p2p); // use provided p2p if available in the message body\n        else if (!hyperty && p2p.p2p) {\n            // otherwise look on Domain Registry\n            P2PConnectionResolve_log.log('[Registry - checkP2PHyperty] - search in Domain Registry: ', hyperty);\n            var message = {\n              type: 'read',\n              from: _this._registry.registryURL,\n              to: 'domain://registry.' + _this._registry._domain,\n              body: {\n                resource: hypertyURL\n              }\n            };\n\n            _this._registry._messageBus.postMessage(message, function (reply) {\n              P2PConnectionResolve_log.log('[Registry - checkP2PHyperty] Domain Registry reply', reply);\n\n              if ('value' in reply.body) {\n                //todo: store retrieved hyperty\n                var resolvedHyperty = reply.body.value;\n\n                _this._registry.remoteHypertyList.push(resolvedHyperty);\n\n                if (resolvedHyperty.hasOwnProperty('p2pHandler')) {\n                  resolve(resolvedHyperty);\n                } else {\n                  reject('[Registry checkP2PHyperty] Hyperty found does not support P2P', reply.body.value);\n                }\n              } else {\n                reject('[Registry checkP2PHyperty] Hyperty with P2PHandler not found', reply.body.code);\n              }\n            });\n          } else reject('[Registry checkP2PHyperty] No P2P Connection available for ', hypertyURL);\n      });\n    }\n    /**\r\n    * Verifies if remote Data Object can be reached with a P2P Connection.\r\n    * @param  {URL.URL}        DataObjectURL           object URL\r\n    * @return {HypertyDataObjectInstance}  addressURL     return the Data Object instance registered URL, return undefined otherwise\r\n    */\n\n  }, {\n    key: \"checkP2PDataObject\",\n    value: function checkP2PDataObject(url, p2p) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        // look on locally stored Remote Data Objects\n        var dataobject = _this._registry.remoteDataObjectList.filter(function (i) {\n          return _this._registry.remoteDataObjectList[i].url === url;\n        });\n\n        if (dataobject.length !== 0 && dataobject[0].p2pRequester) {\n          resolve(dataobject[0]);\n        } else if (dataobject.length !== 0) {\n          reject('[Registry checkP2PDataObject] Data Object found does not support P2P', dataobject[0]);\n        } else if (dataobject.length === 0 && p2p.runtime) resolve(p2p); // use provided p2p info if available in the message body\n        else if (dataobject.length && p2p.p2p) {\n            // otherwise look on Domain Registry\n            // look on Domain Registry\n            var message = {\n              type: 'read',\n              from: _this._registry.registryURL,\n              to: 'domain://registry.' + _this._registry._domain,\n              body: {\n                resource: url\n              }\n            };\n\n            _this._registry._messageBus.postMessage(message, function (reply) {\n              P2PConnectionResolve_log.log('discover data object per url reply', reply);\n\n              if ('value' in reply.body) {\n                //todo: store retrieved hyperty\n                var resolvedDataObject = reply.body.value;\n\n                _this._registry.remoteDataObjectList.push(resolvedDataObject);\n\n                if (resolvedDataObject.p2pRequester) {\n                  resolve(resolvedDataObject);\n                } else {\n                  reject('[Registry checkP2PDataObject] Data Object found does not support P2P', reply.body.value);\n                }\n              } else {\n                reject('[Registry checkP2PDataObject] not found', reply.body.code);\n              }\n            });\n          } else reject('[Registry checkP2PDataObject] no P2P Connection found');\n      });\n    }\n  }, {\n    key: \"addRemoteP2PEntity\",\n    value: function addRemoteP2PEntity(url, runtime) {\n      this._remoteP2PEntities[url] = runtime;\n    }\n  }, {\n    key: \"removeRemoteP2PEntity\",\n    value: function removeRemoteP2PEntity(url) {\n      delete this._remoteP2PEntities[url];\n    }\n  }, {\n    key: \"reconnectP2PRequester\",\n    value: function reconnectP2PRequester(p2pRequester) {\n      var _this = this;\n\n      P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] lets try to reconnect P2P Requester Stub: ', p2pRequester);\n      return new Promise(function (resolve, reject) {\n        var remoteRuntime = p2pRequester.runtime;\n        var message = {\n          type: 'execute',\n          from: _this._registry.registryURL,\n          to: p2pRequester.url,\n          body: {\n            method: 'connect',\n            params: [p2pRequester.p2pHandler]\n          }\n        }; // lets prepare the p2pRequesterSTub reconnect by setting an observer to its status changes\n\n        _this._registry.watchingYou.observe('p2pRequesterStub', function (change) {\n          P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequesterStubs changed ' + _this._registry.p2pRequesterStub);\n\n          if (change.keypath.split('.')[0] === remoteRuntime && change.name === 'status') {\n            switch (change.newValue) {\n              case 'live':\n                P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequester is live ' + _this._registry.p2pRequesterStub[remoteRuntime]);\n                resolve(_this._registry.p2pRequesterStub[remoteRuntime].url);\n                break;\n\n              case 'failed':\n                P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequester reconnect failed ' + _this._registry.p2pRequesterStub[remoteRuntime]);\n                reject('P2P Requester reconnect failed');\n                break;\n\n              default:\n            }\n          }\n        }); //  stub load\n\n\n        _this._registry._messageBus.postMessage(message, function (reply) {\n          P2PConnectionResolve_log.log('[P2PConenctionResolve.reconnectP2PRequester] reconnect request reply', reply);\n        });\n      });\n    }\n  }]);\n\n  return P2PConnectionResolve;\n}();\n\n/* harmony default export */ var registry_P2PConnectionResolve = (P2PConnectionResolve);\n// EXTERNAL MODULE: ./node_modules/proxy-observe/index.js\nvar proxy_observe = __webpack_require__(26);\n\n// CONCATENATED MODULE: ./src/utils/WatchingYou.js\nfunction WatchingYou_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction WatchingYou_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction WatchingYou_createClass(Constructor, protoProps, staticProps) { if (protoProps) WatchingYou_defineProperties(Constructor.prototype, protoProps); if (staticProps) WatchingYou_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar WatchingYou =\n/*#__PURE__*/\nfunction () {\n  function WatchingYou() {\n    WatchingYou_classCallCheck(this, WatchingYou);\n\n    this._watching = {};\n    this._observers = [];\n  }\n\n  WatchingYou_createClass(WatchingYou, [{\n    key: \"watch\",\n    value: function watch(key, object) {\n      var _this = this;\n\n      var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (deep) {\n        this._watching[key] = Object.deepObserve(object, function (changes) {\n          changes.every(function (change) {\n            _this._fireEvent(key, change);\n          });\n        });\n      } else {\n        this._watching[key] = Object.observe(object, function (changes) {\n          changes.every(function (change) {\n            _this._fireEvent(key, change);\n          });\n        });\n      }\n\n      return this._watching[key];\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(key, callback) {\n      this._observers.push({\n        key: key,\n        callback: callback\n      });\n    }\n  }, {\n    key: \"_fireEvent\",\n    value: function _fireEvent(key, change) {\n      this._observers.filter(function (observe) {\n        return observe.key === key;\n      }).forEach(function (observe) {\n        observe.callback(change);\n      });\n    }\n  }]);\n\n  return WatchingYou;\n}();\n\n/* harmony default export */ var utils_WatchingYou = (WatchingYou);\n/*let watchChanges = new WatchChanges();\r\nlet p2pRequesterStub = watchChanges.watch('p2p', {}, true);\r\nlet stub = watchChanges.watch('stub', {});\r\n\r\nwatchChanges.observe('p2p', (change) => {\r\n  console.log('p2pRequesterStub: ' + change.name + ' - ' + JSON.stringify(change.newValue));\r\n});\r\n\r\nwatchChanges.observe('p2p', (change) => {\r\n  console.log('p2pRequesterStub: ' + change.name + ' - ' + JSON.stringify(change.newValue));\r\n});\r\n\r\nwatchChanges.observe('stub', (change) => {\r\n  console.log('stub ' + change.name);\r\n});\r\n\r\np2pRequesterStub.a = {};\r\nstub.b = {name: 'vitor'};\r\np2pRequesterStub.a.name = 'Hello';\r\nstub.b = {name: 'vitor'};\r\np2pRequesterStub.a.age = '32';\r\np2pRequesterStub.a.name = 'World';*/\n// CONCATENATED MODULE: ./src/Utils.js\n\n\n// CONCATENATED MODULE: ./src/registry/Registry.js\nfunction Registry_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { Registry_typeof = function _typeof(obj) { return typeof obj; }; } else { Registry_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return Registry_typeof(obj); }\n\nfunction Registry_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Registry_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Registry_createClass(Constructor, protoProps, staticProps) { if (protoProps) Registry_defineProperties(Constructor.prototype, protoProps); if (staticProps) Registry_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar Registry_log = loglevel[\"getLogger\"]('Registry');\n\n\n\n\n\n\n\n\n // import DiscoveryServiceFramework from './DiscoveryServiceFramework';\n\nvar STATUS = {\n  CREATED: 'created',\n  LIVE: 'live',\n  DEPLOYING: 'deploying',\n  DEPLOYED: 'deployed',\n  PROGRESS: 'in-progress',\n  DISCONNECTED: 'disconnected',\n  FAILED: 'deployment-failed',\n  DEAD: 'dead'\n};\n/*import IdentityManager from './IdentityManager';\r\nimport Discovery from './Discovery';*/\n\n/**\r\n* Runtime Registry Interface\r\n*/\n\nvar Registry_Registry =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL\r\n  * @param  {AppSandbox}          appSandbox            appSandbox\r\n  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue\r\n  * @param  {DomainURL}           remoteRegistry        remoteRegistry\r\n  * @param  {storageManager}      storageManager\r\n  */\n  function Registry(runtimeURL, appSandbox, identityModule, runtimeCapabilities, storageManager, p2pHandlerURL, remoteRegistry) {\n    Registry_classCallCheck(this, Registry);\n\n    // how some functions receive the parameters for example:\n    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);\n    // registry.registerStub(sandbox, 'sp1');\n    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');\n    // registry.resolve('hyperty-runtime://sp1/123');\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\n    if (!storageManager) throw new Error('storageManager is missing.');\n    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/\n\n    var _this = this;\n\n    _this.registryURL = runtimeURL + '/registry/';\n    _this.appSandbox = appSandbox;\n    _this.runtimeURL = runtimeURL;\n    _this.p2pHandlerURL = p2pHandlerURL;\n    _this.remoteRegistry = remoteRegistry;\n    _this.idModule = identityModule;\n    _this.storageManager = storageManager;\n    _this.runtimeCapabilities = runtimeCapabilities;\n    _this.identifier = Object(utils[\"n\" /* generateGUID */])();\n    _this.hypertiesListToRemove = {};\n    _this.hypertiesList = [];\n    _this.remoteHypertyList = [];\n    _this.remoteDataObjectList = [];\n    _this.idpLegacyProxyList = {};\n    _this.watchingYou = new utils_WatchingYou();\n    _this.p2pHandlerStub = {};\n    _this.p2pRequesterStub = _this.watchingYou.watch('p2pRequesterStub', {}, true);\n    _this.p2pConnectionList = _this.watchingYou.watch('p2pConnectionList', {}, true);\n    _this.p2pHandlerAssociation = {};\n    _this.protostubsList = _this.watchingYou.watch('protostubsList', {}, true);\n    _this.idpProxyList = _this.watchingYou.watch('idpProxyList', {}, true);\n    _this.dataObjectList = {};\n    _this.subscribedDataObjectList = {};\n    _this.sandboxesList = {\n      sandbox: {},\n      appSandbox: {}\n    };\n    _this.pepList = {};\n    _this.registries = {};\n    _this._domain = Object(utils[\"k\" /* divideURL */])(_this.registryURL).domain;\n    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;\n    var p2pConnectionResolve = new registry_P2PConnectionResolve(_this);\n    _this._p2pConnectionResolve = p2pConnectionResolve;\n    _this._hypertyUrls = {};\n    _this._dataObjectUrls = {};\n  }\n\n  Registry_createClass(Registry, [{\n    key: \"loadRegistry\",\n    value: function loadRegistry() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this.storageManager.get('registry:HypertyURLs').then(function (urlsList) {\n          if (urlsList) _this._hypertyUrls = urlsList;\n\n          _this.storageManager.get('registry:DataObjectURLs').then(function (urlsList) {\n            if (urlsList) _this._dataObjectUrls = urlsList;\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_getIdentityAssociated\",\n    value: function _getIdentityAssociated(type, hypertyURL) {\n      var _this = this;\n\n      for (var hyperty in _this.hypertiesList) {\n        var value = _this.hypertiesList[hyperty];\n\n        if (value._hypertyURL === hypertyURL) {\n          switch (type) {\n            case 'username':\n              return value._user.username;\n\n            case 'cn':\n              return value._user.cn;\n\n            case 'locale':\n              return value._user.locale;\n\n            case 'avatar':\n              return value._user.avatar;\n\n            case 'userURL':\n              return value._user.userURL;\n\n            case '.':\n              return value._user;\n\n            default:\n              return '';\n          }\n        }\n      }\n\n      return '';\n    }\n    /**\r\n    * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.\r\n    */\n\n  }, {\n    key: \"getAppSandbox\",\n    value: function getAppSandbox() {\n      var _this = this;\n\n      return _this.appSandbox;\n    }\n    /**\r\n    * This function returns the user associated to the hyperty URL\r\n    * @param    {String}    hypertyURL      hyperty URL\r\n    * @return   {String}    userURL         user URL\r\n    */\n\n  }, {\n    key: \"getHypertyOwner\",\n    value: function getHypertyOwner(hypertyURL) {\n      var _this = this;\n\n      var userURL;\n\n      for (var index in _this.hypertiesList) {\n        var hyperty = _this.hypertiesList[index];\n\n        if (hyperty.hypertyURL === hypertyURL) {\n          return hyperty.user.userURL;\n        }\n      }\n\n      return userURL;\n    }\n    /**\r\n    * This function returns the user associated to the hyperty URL\r\n    * @param    {String}    dataObjectURL      dataObjectURL URL\r\n    * @return   {String}    userURL         user URL\r\n    */\n\n  }, {\n    key: \"getDataObjectReporter\",\n    value: function getDataObjectReporter(dataObjectURL) {\n      var _this = this;\n\n      var DOurl = Object(utils[\"B\" /* removePathFromURL */])(dataObjectURL);\n\n      for (var index in _this.dataObjectList) {\n        var dataObject = _this.dataObjectList[index];\n\n        if (dataObject.url === DOurl) {\n          return dataObject.reporter;\n        }\n      }\n\n      return null;\n    }\n    /**\r\n    * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty\r\n    * @param    {String}    url      hyperty or dataObject URL\r\n    * @return   {String}    hypertyName     hyperty Name\r\n    */\n\n  }, {\n    key: \"getHypertyName\",\n    value: function getHypertyName(url) {\n      var _this = this;\n\n      var isHypertyURL = Object(utils[\"k\" /* divideURL */])(url).type === 'hyperty'; //value to be returned in the end\n\n      var hypertyName; //if is not an hyperty, check if is a dataObject and obtain his reporter\n\n      var hypertyURL = isHypertyURL ? url : _this.getReporterURLSynchonous(url);\n\n      for (var index in _this.hypertiesList) {\n        var hyperty = _this.hypertiesList[index];\n\n        if (hyperty.hypertyURL === hypertyURL) {\n          hypertyName = hyperty.objectName;\n          break;\n        }\n      }\n\n      return hypertyName;\n    }\n    /**\r\n    * function to return the reporterURL associated with the dataobject URL\r\n    * @param    {String}     dataObjectURL    dataObjectURL\r\n    * @return   {String}     reporterURL      reporterURL\r\n    */\n\n  }, {\n    key: \"getReporterURL\",\n    value: function getReporterURL(dataObjectURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var dataObject = _this.dataObjectList[dataObjectURL];\n\n        if (dataObject) {\n          resolve(dataObject.reporter);\n        } else {\n          reject('No reporter was found');\n        }\n      });\n    }\n    /**\r\n    * function to return the reporterURL associated with the dataobject URL. no promise returned\r\n    * @param    {String}     dataObjectURL    dataObjectURL\r\n    * @return   {String}     reporterURL      reporterURL\r\n    */\n\n  }, {\n    key: \"getReporterURLSynchonous\",\n    value: function getReporterURLSynchonous(dataObjectURL) {\n      var _this = this;\n\n      var dataObject = _this.dataObjectList[dataObjectURL];\n      return dataObject ? dataObject.reporter : undefined;\n    }\n    /**\r\n    * returns the hyperty URL that subscribed the dataObject\r\n    * @param    {String}     url            url format\r\n    * @return   {String}    Hyperty URL subscribed to the URL\r\n    */\n\n  }, {\n    key: \"getDataObjectSubscriberHyperty\",\n    value: function getDataObjectSubscriberHyperty(url) {\n      var _this = this;\n\n      return _this.subscribedDataObjectList[url];\n    }\n    /**\r\n    * register a desired dataObject to subscribe\r\n    * @param    {String}    dataObjectURL      dataObject URL\r\n    */\n\n  }, {\n    key: \"registerSubscribedDataObject\",\n    value: function registerSubscribedDataObject(dataObjectURL, hypertyURL) {\n      var _this = this;\n\n      if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {\n        _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;\n      }\n    }\n    /**\r\n    * Function to return the list of pre authorised users received in the creation of a data object\r\n    * @param    {String}            dataObjectURL    dataObjectURL\r\n    * @return   {Array<String>}     preAuth         List of pre authorised users\r\n    */\n\n  }, {\n    key: \"getPreAuthSubscribers\",\n    value: function getPreAuthSubscribers(dataObjectURL) {\n      var _this = this;\n\n      var dataObject = _this.dataObjectList[dataObjectURL];\n      var preAuth = [];\n\n      if (dataObject) {\n        preAuth = dataObject.authorise;\n      }\n\n      return preAuth;\n    }\n    /**\r\n    * send requests to unregister all hyperties registered in domain registry\r\n    * @return   {Promise}     return a promise if the result of unregistration all hyperties\r\n    */\n\n  }, {\n    key: \"unregisterAllHyperties\",\n    value: function unregisterAllHyperties() {\n      var _this = this;\n\n      var unregisterResults = [];\n      return new Promise(function (resolve, reject) {\n        for (var index in _this.hypertiesList) {\n          var hyperty = _this.hypertiesList[index];\n\n          var result = _this.unregisterHypertyInstance(hyperty.hypertyURL);\n\n          unregisterResults.push(result);\n        }\n\n        Promise.all(unregisterResults).then(function () {\n          resolve('successfully unregistered all hyperties');\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n    /**\r\n    *  function to unregister an hypertyInstance in the Domain Registry\r\n    *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n    *\r\n    */\n\n  }, {\n    key: \"unregisterHypertyInstance\",\n    value: function unregisterHypertyInstance(hypertyInstance) {\n      //TODO working but the user\n      var _this = this;\n\n      var closeMsg = {\n        type: 'execute',\n        from: _this.registryURL,\n        to: hypertyInstance,\n        body: {\n          method: 'close'\n        }\n      }; // Send message to hyperty to close\n\n      _this._messageBus.postMessage(closeMsg, function (reply) {\n        Registry_log.log('[Registry.unregisterHypertyInstance] Close Reply', reply);\n\n        _this._domainRegistration.unregisterHyperty(hypertyInstance);\n      });\n    }\n    /**\r\n    *  function to unregister a Data Object in the Domain Registry\r\n    *  @param   {String}      hypertyInstance   HypertyInsntance url\r\n    *\r\n    */\n\n  }, {\n    key: \"unregisterDataObject\",\n    value: function unregisterDataObject(url) {\n      this._domainRegistration.unregisterDataObject(url);\n    }\n    /**\r\n    * register a new subscriber in the dataObject registered\r\n    * @param  {String}   dataObjectURL    dataObject URL\r\n    * @param  {String}   subscriberURL    subscriber URL\r\n    */\n\n  }, {\n    key: \"registerSubscriber\",\n    value: function registerSubscriber(dataObjectURL, subscriberURL) {\n      var _this = this;\n\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      if (dataObject) {\n        if (!dataObject.subscribers) dataObject.subscribers = [];\n        dataObject.subscribers.push(subscriberURL);\n        _this.dataObjectList[dataObjectURL] = dataObject;\n      }\n    }\n    /**\r\n    * get the subscribers registered within a dataObject\r\n    * @param  {String}          dataObjectURL    dataObject URL\r\n    * @param  {Array<String>}   Substribers List\r\n    */\n\n  }, {\n    key: \"getDataObjectSubscribers\",\n    value: function getDataObjectSubscribers(dataObjectURL) {\n      var _this = this;\n\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      if (dataObject) {\n        return dataObject.subscribers;\n      } else {\n        throw 'No dataObject was found';\n      }\n    }\n    /**\r\n    * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.\r\n    * @param  {String}      identifier                  identifier\r\n    * @param  {String}      dataObjectschema            dataObjectschema\r\n    * @param  {String}      dataObjectUrl               dataObjectUrl\r\n    * @param {String}      dataObjectReporter           dataObjectReporter\r\n    * @param  {Array}     resources                     dataObject resources\r\n    * @param  {Array}     authorise                     list of pre authorised authorised IDs\r\n    */\n    //registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, resources, addressURL, authorise) {\n\n  }, {\n    key: \"registerDataObject\",\n    value: function registerDataObject(objectRegistration) {\n      var _this = this;\n\n      var registration = Object(utils[\"i\" /* deepClone */])(objectRegistration);\n      return new Promise(function (resolve, reject) {\n        _this.dataObjectList[objectRegistration.url] = objectRegistration; //      _this.storageManager.get('registry:DataObjectURLs').then((urlsList) => {\n\n        /*        if (!urlsList) {\r\n                  urlsList = {};\r\n                }*/\n        //update the list with the new elements\n\n        _this._dataObjectUrls[objectRegistration.name + objectRegistration.schema + objectRegistration.resources + objectRegistration.reporter] = objectRegistration.url; // step to obtain the list of all URL registered to updated with the new one.\n\n        _this.storageManager.set('registry:DataObjectURLs', 0, _this._dataObjectUrls).then(function () {\n          if (_this.isInterworkingProtoStub(registration.reporter)) {\n            registration.interworking = true;\n          }\n\n          var domainRegistration = true;\n          if (registration.hasOwnProperty(\"domain_registration\")) domainRegistration = registration.domain_registration;\n          if (domainRegistration) _this._domainRegistration.registerDataObject(registration, objectRegistration.resume, _this.p2pHandlerStub).then(function (registered) {\n            resolve(registered);\n          });else resolve(registration);\n        })[\"catch\"](function (reason) {\n          Registry_log.error('[Registry registerDataObject] Error: ', reason);\n          reject(reason);\n        });\n      }); //    });\n    }\n  }, {\n    key: \"_getResourcesAndSchemes\",\n    value: function _getResourcesAndSchemes(descriptor) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var resources; // check if the hyperty resources is a vector or a string\n        // TODO delete later when catalogue is fixed\n\n        if (typeof descriptor.hypertyType === 'string') {\n          resources = [];\n          resources.push(descriptor.hypertyType);\n        } else {\n          resources = descriptor.hypertyType;\n        }\n\n        var objName = descriptor.objectName;\n        var descriptorDataSchema = descriptor.dataObjects;\n        var dataSchemasArray = []; //this will create a array with a Promise in each position\n\n        for (var index in descriptorDataSchema) {\n          dataSchemasArray.push(_this.getDataSchemaDescriptor(descriptorDataSchema[index]));\n        } // as soon as the previous array is completed, this will wait for the resolve of all promises in the array\n\n\n        Promise.all(dataSchemasArray).then(function (dataSchemas) {\n          var filteredDataSchemas = [];\n\n          for (var _index in dataSchemas) {\n            var dataSchema = dataSchemas[_index];\n            filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme);\n          } // log.log('[Registry] Hyperty Schemas', filteredDataSchemas);\n          // log.log('[Registry] Hyperty resources', resources);\n\n\n          resolve({\n            resources: resources,\n            dataSchema: filteredDataSchemas,\n            name: objName\n          });\n        });\n      });\n    }\n    /**\r\n       * Get DataSchemaDescriptor -> hack to remove runtime catalogue. \r\n       * definitive solution should use Hyperty configuration or scheme defined at Hyperty descriptor level.\r\n       * @param dataSchemaURL - e.g. mydomain.com/.well-known/dataschema/MyDataSchema\r\n       * @param {boolean} [getFull] - boolean to decide to get the descriptor with the sourcePackage or (potentially) without\r\n       * @param {JSON} constraints - constraints object\r\n       * @returns {Promise}\r\n       */\n\n  }, {\n    key: \"getDataSchemaDescriptor\",\n    value: function getDataSchemaDescriptor(dataSchemaURL) {\n      var getFull = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var constraints = arguments.length > 2 ? arguments[2] : undefined;\n      //    return this.getDescriptor(dataSchemaURL, this.createDataSchema, getFull, constraints)\n      return new Promise(function (resolve) {\n        var schema = dataSchemaURL.split('/dataschema/')[1];\n        Registry_log.log('[RuntimeCatalogue.getDataSchemaDescriptor] schema ', schema);\n        var descriptor = {\n          sourcePackage: {\n            sourceCode: {\n              properties: {}\n            }\n          }\n        }; //      let scheme = properties.scheme ? properties.scheme.co : [];\n\n        switch (schema) {\n          case 'Context':\n          case 'ContextReporter':\n          case 'ContextObserver':\n            descriptor.sourcePackage.sourceCode.properties.scheme = 'context';\n            break;\n\n          case 'Connection':\n            descriptor.sourcePackage.sourceCode.properties.scheme = 'connection';\n            break;\n\n          case 'WalletData':\n            descriptor.sourcePackage.sourceCode.properties.scheme = 'walletData';\n            break;\n\n          case 'Communication':\n            descriptor.sourcePackage.sourceCode.properties.scheme = 'comm';\n            descriptor.sourcePackage.sourceCode.properties.childrens = ['resources'];\n            break;\n\n          case 'HelloWorldDataSchema':\n            descriptor.sourcePackage.sourceCode.properties.scheme = 'hello';\n            break;\n\n          default:\n            descriptor.sourcePackage.sourceCode.properties.scheme = 'resource';\n            descriptor.sourcePackage.sourceCode.properties.childrens = [];\n            break;\n        }\n\n        resolve(descriptor);\n      });\n    }\n    /**\r\n    * method that returns previously registered Hyperty or DataObjects URLS, for given characteristics\r\n    * @param  {JSON}        info           object or hyperty charateristics info\r\n    * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise\r\n    */\n\n  }, {\n    key: \"checkRegisteredURLs\",\n    value: function checkRegisteredURLs(info, reuseURL) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var objectType = info.reporter ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';\n\n        if (typeof reuseURL === 'string') {\n          objectType = reuseURL && Object(utils[\"k\" /* divideURL */])(reuseURL).type !== 'hyperty' ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';\n        } //debugger;\n\n\n        _this.storageManager.get(objectType).then(function (urlsList) {\n          if (!urlsList) {\n            urlsList = {};\n          }\n\n          if (typeof reuseURL === 'string') {\n            Registry_log.info('[Registry - checkRegisteredURLs] - look for ' + reuseURL + ' on ', urlsList);\n            var searchResult = Object.keys(urlsList).map(function (key) {\n              var indexOf = urlsList[key].indexOf(reuseURL);\n              return urlsList[key][indexOf];\n            });\n            Registry_log.info('[Registry - checkRegisteredURLs] - found ' + searchResult.length + ' results on ', searchResult);\n\n            if (searchResult.length === 1) {\n              return resolve(searchResult);\n            } else {\n              return resolve(undefined);\n            }\n          }\n\n          if (objectType === 'registry:HypertyURLs') {\n            _this._getResourcesAndSchemes(info).then(function (value) {\n              if (urlsList[value.resources + value.dataSchema + value.name]) {\n                // log.log('[Registry] reusage of hyperty URL');\n                return resolve(urlsList[value.resources + value.dataSchema + value.name]);\n              } else {\n                // log.log('[Registry] no hyperty URL was previously registered ');\n                return resolve(undefined);\n              }\n            });\n          } else {\n            var characteristics = info.name + info.schema + info.resources + info.reporter;\n\n            if (urlsList[characteristics]) {\n              // log.log('[Registry] reusage of dataObject URL');\n              if (typeof urlsList[characteristics] === 'string') {\n                var arrayToResolve = [];\n                arrayToResolve.push(urlsList[characteristics]);\n                return resolve(arrayToResolve);\n              } else {\n                return resolve(urlsList[characteristics]);\n              }\n            } else {\n              // log.log('[Registry] no dataObject URL was previously registered');\n              return resolve(undefined);\n            }\n          }\n        });\n      });\n    }\n    /**\r\n    * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.\r\n    * @param  {Sandbox}             sandbox               sandbox\r\n    * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor\r\n    * @param {object} IdpConstraint - constraints to be used when selecting the identity to be associated with the Hyperty including origin, idp, and idHint.\r\n    * @return {HypertyURL}          HypertyURL\r\n    */\n\n  }, {\n    key: \"registerHyperty\",\n    value: function registerHyperty(sandbox, importPath, descriptor, addressURL, IdpConstraint) {\n      var _this = this;\n\n      var hypertyCapabilities;\n      return new Promise(function (resolve, reject) {\n        _this.idModule.getIdentityAssertion(IdpConstraint).then(function (result) {\n          var userProfile = result.userProfile; // log.log('[Registry registerHyperty] userProfile', userProfile);\n\n          if (_this._messageBus === undefined) {\n            reject('[Registry registerHyperty] MessageBus is undefined');\n          } else {\n            //call check if the protostub exist: to be removed\n\n            /*  _this.resolve(domainUrl).then(function(a) {\r\n              // log.log('[Registry registerHyperty] stub to domain registry- ', a);*/\n            //          _this.storageManager.get('registry:HypertyURLs').then((urlsList) => {\n            // log.log('[Registry registerHyperty] storageManager] - ', urlsList);\n            _this._getResourcesAndSchemes(descriptor).then(function (value) {\n              hypertyCapabilities = value;\n              /*              if (!urlsList) {\r\n                              urlsList = {};\r\n                            }*/\n\n              _this._hypertyUrls[hypertyCapabilities.resources + hypertyCapabilities.dataSchema + hypertyCapabilities.name] = addressURL.address;\n\n              _this.storageManager.set('registry:HypertyURLs', 0, _this._hypertyUrls).then(function () {\n                //check whether the received sanbox e ApplicationSandbox or a normal sandbox\n                if (sandbox.type === 'app') {\n                  _this.sandboxesList.appSandbox[addressURL.address[0]] = sandbox;\n                } else if (sandbox.type === 'normal') {\n                  _this.sandboxesList.sandbox[addressURL.address[0]] = sandbox;\n                } else {\n                  reject('Wrong SandboxType');\n                }\n\n                var p2pHandler;\n                var p2pRequester;\n\n                if (Object.keys(_this.p2pHandlerStub).length !== 0) {\n                  p2pHandler = _this.p2pHandlerStub[_this.runtimeURL].url;\n                  p2pRequester = runtimeUtils.runtimeDescriptor.p2pRequesterStub;\n                }\n\n                var hyperty = new registry_HypertyInstance(_this.identifier, _this.registryURL, importPath, descriptor, addressURL.address[0], userProfile, 'guid', _this.runtimeURL, 'ctx', p2pHandler, p2pRequester, hypertyCapabilities.dataSchema, hypertyCapabilities.resources);\n\n                _this.hypertiesList.push(hyperty);\n                /*--- start here move p2p and domain registry related features to a separated function.-------..*/\n\n\n                var registrationAtdomain = true;\n\n                if (descriptor.hasOwnProperty(\"configuration\") && descriptor.configuration.hasOwnProperty(\"domain_registration\")) {\n                  registrationAtdomain = descriptor.configuration.domain_registration;\n                }\n\n                if (registrationAtdomain) _this._domainRegistration.registerHyperty(hyperty, addressURL.newAddress).then(function (registered) {\n                  resolve(registered);\n                });else resolve({\n                  url: hyperty.hypertyURL\n                });\n                /*------------------- END HERE MOVE DOMAIN REGISTRY ------------------*/\n              })[\"catch\"](function (reason) {\n                // log.log('[Registry registerHyperty] Error: ', reason);\n                reject(reason);\n              });\n            }); //          });\n\n          }\n        }, function (err) {\n          reject('[Registry registerHyperty] ', err);\n        });\n      });\n    }\n    /**\r\n    * To unregister a previously registered Hyperty\r\n    * @param  {HypertyURL}          HypertyURL url        url\r\n    */\n\n  }, {\n    key: \"unregisterHyperty\",\n    value: function unregisterHyperty(url) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var found = false;\n        var index = 0;\n\n        for (index = 0; index < _this.hypertiesList.length; index++) {\n          var hyperty = _this.hypertiesList[index];\n\n          if (hyperty !== undefined) {\n            if (hyperty.hypertyURL === url) {\n              found = true;\n              break;\n            }\n          }\n        }\n\n        if (found === false) {\n          reject('Hyperty not found');\n        } else {\n          delete _this.hypertiesList[index];\n          resolve('Hyperty successfully deleted');\n        }\n      });\n    }\n    /**\r\n    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).\r\n    * @param  {DomainURL}           DomainURL            url\r\n    * @return {RuntimeURL}           RuntimeURL\r\n    */\n\n  }, {\n    key: \"discoverProtostub\",\n    value: function discoverProtostub(url) {\n      if (!url) throw new Error('Parameter url needed');\n\n      var _this = this;\n\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(url);\n      var domainURL = dividedURL.domain;\n\n      if (_this.protostubsList.hasOwnProperty(domainURL) && _this.protostubsList[domainURL].status === STATUS.LIVE) {\n        return _this.protostubsList[domainURL];\n      } else {\n        _this.protostubsList[domainURL] = {\n          status: STATUS.DEPLOYING\n        };\n        throw new Error('[Registry - discoverProtoStub ] Message Node Protostub Not Found. Creating one');\n      }\n    }\n    /**\r\n    * To discover protocol stubs available in the runtime for a certain remote runtime URL. If available, it returns the runtime url for the protocol stub that connects to the requested domain.\r\n    * Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).\r\n    * @param  {RuntimeURL}           RuntimeURL            url\r\n    * @return {p2pRequester}           RuntimeURL\r\n    */\n\n  }, {\n    key: \"discoverP2PStub\",\n    value: function discoverP2PStub(runtimeURL) {\n      var _this = this;\n\n      if (runtimeURL) {\n        if (_this.p2pRequesterStub.hasOwnProperty(runtimeURL) && _this.p2pRequesterStub[runtimeURL].status === STATUS.LIVE) {\n          return _this.p2pRequesterStub[runtimeURL];\n        } else {\n          _this.p2pRequesterStub[runtimeURL] = {\n            status: STATUS.CREATED\n          };\n          throw new Error('[Registry - discoverP2PStub ] P2P Requester Stub Not Found. Creating one');\n        }\n      } else {\n        if (_this.p2pHandlerStub.hasOwnProperty(_this.runtimeURL)) {\n          return _this.p2pHandlerStub[_this.runtimeURL];\n        } else {\n          _this.p2pHandlerStub[_this.runtimeURL] = {\n            status: STATUS.CREATED\n          };\n          throw new Error('[Registry - discoverP2PStub ] P2P Handler Stub Not Found.');\n        }\n      }\n    }\n    /**\r\n     * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\r\n     * @param  {Sandbox}       Sandbox\r\n     * @param  {stubID}        Domain or hyperty runtime to register the stub\r\n     * @param  {descriptorURL}     Catalogue URL of the Protostub descriptor\r\n     * @param  {descriptor}     Protostub descriptor\r\n     * @return {RuntimeProtoStubURL}\r\n     */\n\n  }, {\n    key: \"registerStub\",\n    value: function registerStub(sandbox, stubID, p2pConfig, descriptorURL, descriptor) {\n      var _this = this;\n\n      var _stubDescriptor = descriptor;\n      return new Promise(function (resolve, reject) {\n        var runtimeProtoStubURL; //check if messageBus is registered in registry or not\n\n        if (_this._messageBus === undefined) {\n          reject('MessageBus not found on registerStub');\n        }\n\n        Registry_log.info('[Registry - registerStub] - stubID ', stubID);\n        /* if (!stubID.indexOf('msg-node.')) {\r\n          stubID = stubID.substring(stubID.indexOf('.') + 1);\r\n        }*/\n\n        var P2PRequesterStub;\n\n        if (p2pConfig) {\n          if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {\n            runtimeProtoStubURL = _this.p2pHandlerURL;\n            _this.p2pHandlerStub[stubID] = {\n              url: runtimeProtoStubURL,\n              status: STATUS.CREATED\n            };\n            _this.p2pHandlerAssociation[_this.runtimeURL] = [];\n            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\n            Registry_log.info('[Registry - registerStub - P2PHandlerStub] - ', stubID, ' - ', runtimeProtoStubURL);\n            resolve(_this.p2pHandlerStub[stubID]);\n          } else {\n            P2PRequesterStub = p2pConfig.p2pRequesterStub;\n            runtimeProtoStubURL = 'runtime://' + Object(utils[\"k\" /* divideURL */])(p2pConfig.remoteRuntimeURL).domain + '/p2prequester/' + Object(utils[\"n\" /* generateGUID */])();\n            Registry_log.info('[Registry - registerStub - P2PRequesterStub] - ', P2PRequesterStub, ' - ', runtimeProtoStubURL); // to be clarified what is this p2pHandlerAssociation\n\n            _this.p2pHandlerAssociation[_this.runtimeURL].push(runtimeProtoStubURL);\n\n            _this.p2pRequesterStub[stubID] = {\n              url: runtimeProtoStubURL,\n              status: STATUS.CREATED\n            };\n            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox; //Setup P2P Requester path into MN\n\n            var msg = {\n              type: 'subscribe',\n              from: _this.registryURL,\n              to: 'domain://msg-node.' + _this._domain + '/sm',\n              body: {\n                subscribe: [runtimeProtoStubURL],\n                source: _this.registryURL\n              }\n            };\n\n            _this._messageBus.postMessage(msg, function (reply) {// log.log('[Registry - register Stub] p2pRequester path setup: ', reply);\n            });\n\n            resolve(_this.p2pRequesterStub[stubID]);\n          }\n        } else {\n          console.log('[Registry - registerStub - Normal Stub] descriptor', descriptor);\n\n          if (!Registry_typeof(descriptor) === 'string' && descriptor.hasOwnProperty('_interworking') && descriptor._interworking) {\n            runtimeProtoStubURL = 'runtime://' + stubID + '/protostub/' + 'scheme1';\n          } else {\n            runtimeProtoStubURL = 'runtime://' + stubID + '/protostub/' + Object(utils[\"n\" /* generateGUID */])();\n          }\n\n          Registry_log.info('[Registry - registerStub - Normal Stub] - ', stubID); // TODO: Optimize this\n\n          _this.protostubsList[stubID] = {\n            url: runtimeProtoStubURL,\n            status: STATUS.DEPLOYING\n          };\n\n          if (descriptorURL) {\n            _this.protostubsList[stubID].descriptorURL = descriptorURL;\n          }\n\n          if (_stubDescriptor && _stubDescriptor.interworking) {\n            _this.protostubsList[stubID].interworking = _stubDescriptor.interworking;\n          }\n\n          _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\n          resolve(_this.protostubsList[stubID]);\n        } // resolve(runtimeProtoStubURL);\n\n\n        _this._messageBus.addListener(runtimeProtoStubURL + '/status', function (msg) {\n          _this._onProtostubStatusEvent(msg);\n        });\n      });\n    }\n    /**\r\n    * To Process status events fired by protostubs\r\n    * @param  {Message}   message     Event Message\r\n    */\n\n  }, {\n    key: \"_onProtostubStatusEvent\",\n    value: function _onProtostubStatusEvent(msg) {\n      var _this = this; // log.log('[Registry onProtostubStatusEvent]: ', msg);\n\n\n      var runtimeProtoStubURL = msg.from;\n\n      if (!msg.to.includes('/status')) {\n        Registry_log.error('[Registry onProtostubStatusEvent] Not Status Event: ', msg);\n        return;\n      } else {\n        // broadcast Protostub status event to all Hyperties\n        var from = msg.from;\n        msg.from = _this.runtimeURL;\n        msg.to = _this.runtimeURL + '/status';\n        msg.body.resource = from;\n\n        _this._messageBus.postMessage(msg);\n      } // process status events from message node protostubs\n\n\n      if (runtimeProtoStubURL.includes('/protostub/')) {\n        // TODO: uncomment below when protostubs are updated with new status value \"live\"\n        Object.keys(_this.protostubsList).filter(function (key) {\n          return _this.protostubsList[key].url === runtimeProtoStubURL;\n        }).map(function (key) {\n          _this.protostubsList[key].status = msg.body.value; // log.log('[Registry - onProtostubStatusEvent] - Protostub status: ', _this.protostubsList[key]);\n        });\n      } else {\n        // process status events from p2p connections\n        if (msg.body.resource) {\n          var remoteRuntimeURL = msg.body.resource;\n\n          if (_this.p2pConnectionList[remoteRuntimeURL]) {\n            _this.p2pConnectionList[remoteRuntimeURL].status = msg.body.value;\n            _this.p2pConnectionList[remoteRuntimeURL].url = runtimeProtoStubURL;\n          } else {\n            var p2pConnection = {\n              status: msg.body.value,\n              url: runtimeProtoStubURL\n            };\n            _this.p2pConnectionList[remoteRuntimeURL] = p2pConnection;\n          } // log.log('[Registry - onProtostubStatusEvent] - P2PConnection status: ', _this.p2pConnectionList[remoteRuntimeURL]);\n          // Update P2P Requester protostub if it is coming from there\n\n\n          if (runtimeProtoStubURL.includes('/p2prequester/')) {\n            _this.p2pRequesterStub[remoteRuntimeURL].status = msg.body.value; // log.log('[Registry - onProtostubStatusEvent] - P2P Requester status: ', _this.p2pRequesterStub[remoteRuntimeURL]);\n          } else {\n            // if from P2PHandler with status disconencted, lets remove from p2pConnectionList\n            if (msg.body.value === 'disconnected') delete _this.p2pConnectionList[remoteRuntimeURL];\n          }\n        } else {\n          if (runtimeProtoStubURL.includes('/p2prequester/')) {\n            // It is an event from P2P Requester without mandatory \"resource\" field\n            Registry_log.error('[Registry onProtostubStatusEvent] resource missing: ', msg);\n            return;\n          } else {\n            // It is an event from P2P Handler\n            _this.p2pHandlerStub[_this.runtimeURL].status = msg.body.value; // log.log('[Registry - onProtostubStatusEvent] - P2PHandler Stub status: ', _this.p2pHandlerStub[_this.runtimeURL]);\n          }\n        }\n      }\n    }\n    /**\r\n    * To unregister a previously registered protocol stub\r\n    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL\r\n    */\n\n  }, {\n    key: \"unregisterStub\",\n    value: function unregisterStub(hypertyRuntimeURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this.protostubsList.hasOwnProperty(hypertyRuntimeURL)) {\n          delete _this.protostubsList[hypertyRuntimeURL];\n          resolve('ProtostubURL removed');\n        } else {\n          reject('Error on unregisterStub: Hyperty not found');\n        }\n      });\n    }\n    /**\r\n     * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\r\n     * @param {Sandbox}        Sandbox\r\n     * @param  {DomainURL}     DomainURL service provider domain\r\n     * @return {RuntimeIdpProxyURL}\r\n     */\n\n  }, {\n    key: \"registerIdpProxy\",\n    value: function registerIdpProxy(sandbox, domainURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var idpProxyStubURL; //check if messageBus is registered in registry or not\n\n        if (_this._messageBus === undefined) {\n          reject('MessageBus not found on registerStub');\n        }\n\n        idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + Object(utils[\"n\" /* generateGUID */])(); // TODO: Optimize this\n\n        _this.idpProxyList[domainURL] = {\n          url: idpProxyStubURL,\n          status: STATUS.DEPLOYING\n        };\n        _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox; // sandbox.addListener('*', function(msg) {\n        //   _this._messageBus.postMessage(msg);\n        // });\n\n        resolve(idpProxyStubURL);\n\n        _this._messageBus.addListener(idpProxyStubURL + '/status', function (msg) {\n          _this._onIdpProxyStatusEvent(msg);\n        });\n      });\n    }\n    /**\r\n    * To Process status events fired by Idp Proxies\r\n    * @param  {Message}   message     Event Message\r\n    */\n\n  }, {\n    key: \"_onIdpProxyStatusEvent\",\n    value: function _onIdpProxyStatusEvent(msg) {\n      var _this = this; // log.log('[Registry onIdpProxyStatusEvent]: ', msg);\n\n\n      var idpProxyURL = msg.from;\n\n      if (!msg.to.includes('/status')) {\n        Registry_log.error('[Registry onIdpProxyStatusEvent] Not Status Event: ', msg);\n        return;\n      }\n\n      Object.keys(_this.idpProxyList).filter(function (key) {\n        return _this.idpProxyList[key].url === idpProxyURL;\n      }).map(function (key) {\n        _this.idpProxyList[key].status = msg.body.value; // log.log('[Registry - onIdpProxyStatusEvent] - Idp Proxy status: ', _this.idpProxyList[key]);\n      });\n    }\n    /**\r\n    * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers\r\n    * @param  {DomainURL}           DomainURL            url\r\n    * @return {RuntimeURL}           RuntimeURL         idpProxyUrl\r\n    */\n\n  }, {\n    key: \"discoverIdpProxy\",\n    value: function discoverIdpProxy(url) {\n      if (!url) throw new Error('Parameter url needed');\n\n      var _this = this;\n\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(url);\n      var domainURL = dividedURL.domain;\n\n      if (_this.idpProxyList.hasOwnProperty(domainURL) && _this.idpProxyList[domainURL].status === STATUS.LIVE) {\n        return _this.idpProxyList[domainURL];\n      } else {\n        _this.idpProxyList[domainURL] = {\n          status: STATUS.PROGRESS\n        };\n        throw new Error('[Registry - discoverIdpProxy ] Idp Proxy Not Found. Creating one');\n      }\n    }\n    /**\r\n    * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.\r\n    * @param  {Message.Message} postMessage postMessage\r\n    * @param  {HypertyURL}          HypertyURL            hyperty\r\n    * @return {HypertyRuntimeURL}   HypertyRuntimeURL\r\n    */\n\n  }, {\n    key: \"registerPEP\",\n    value: function registerPEP(postMessage, hyperty) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        //TODO check what parameter in the postMessage the pep is.\n        _this.pepList[hyperty] = postMessage;\n        resolve('PEP registered with success');\n      });\n    }\n    /**\r\n    * To unregister a previously registered protocol stub\r\n    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL\r\n    */\n\n  }, {\n    key: \"unregisterPEP\",\n    value: function unregisterPEP(HypertyRuntimeURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var result = _this.pepList[HypertyRuntimeURL];\n\n        if (result === undefined) {\n          reject('Pep Not found.');\n        } else {\n          resolve('PEP successfully removed.');\n        }\n      });\n    }\n    /**\r\n    * To discover sandboxes available in the runtime for a certain domain and a certain set of capabilities. Required by the runtime UA to avoid more than one sandbox for the same domain.\r\n    * @param  {DomainURL} DomainURL url\r\n    * @return {RuntimeSandbox}           RuntimeSandbox\r\n    */\n\n  }, {\n    key: \"getSandbox\",\n    value: function getSandbox(url, constraints) {\n      if (!url) throw new Error('Parameter url needed'); // log.log('[Registry getSandbox] getSandbox for: ', url, ' and capabilities: ', constraints);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var request; //first try to find the url in the appSandbox list\n\n        request = _this.sandboxesList.appSandbox[url]; //if no appSandbox was found, try to search in the normal sandboxes list\n\n        if (!request) {\n          request = _this.sandboxesList.sandbox[url];\n\n          if (!request) {\n            var domain;\n\n            if (url.includes('://')) {\n              domain = Object(utils[\"k\" /* divideURL */])(url).domain;\n            } else {\n              domain = url;\n            } // search in the sandboxes list for a entry containing the domain given\n\n\n            for (var sandbox in _this.sandboxesList.sandbox) {\n              //todo: uncomment sandbox constraints match condition with runtime sharing\n              if (sandbox.includes(domain) && _this.sandboxesList.sandbox[sandbox].matches(constraints)) {\n                var _ret = function () {\n                  var current = _this.sandboxesList.sandbox[sandbox];\n                  var match = Object.keys(constraints).filter(function (constraint) {\n                    return constraint === 'browser' && current.type === Sandbox[\"a\" /* SandboxType */].NORMAL || constraint === 'windowSanbox' && current.type === Sandbox[\"a\" /* SandboxType */].WINDOW;\n                  }).length > 0 ? true : false;\n\n                  if (match) {\n                    request = current;\n                  }\n\n                  return \"break\";\n                }();\n\n                if (_ret === \"break\") break;\n              }\n            }\n          }\n        }\n\n        if (!request) {\n          reject('no sandbox found for: ' + url);\n        } else {\n          resolve(request);\n        }\n      });\n    }\n  }, {\n    key: \"resolveNormalStub\",\n    value: function resolveNormalStub(url) {\n      // log.log('resolveNormalStub ' + url);\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //split the url to find the domainURL. deals with the url for example as:\n        //\"hyperty-runtime://sp1/protostub/123\",\n        var dividedURL = Object(utils[\"k\" /* divideURL */])(url);\n        var domainUrl = dividedURL.domain;\n        var type = dividedURL.type;\n\n        if (url.includes(_this.runtimeURL) || url.includes('://sandbox/')) {\n          Registry_log.error('[Registry - resolve] URL to be resolved should have listeners ', url);\n          return reject('[Registry - resolve] URL to be resolved should have listeners ', url);\n        } // resolve the domain protostub in case of a message to global registry\n\n\n        if (url.includes('global://registry')) {\n          domainUrl = _this._domain;\n        } else {\n          if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {\n            domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);\n          }\n        }\n\n        _this.isLegacy(url).then(function (isLegacy) {\n          // if legacy it should resolve for <protocol>.<domain>\n          if (isLegacy && type !== 'domain-idp') {\n            domainUrl = type + '.' + Object(utils[\"q\" /* getUserIdentityDomain */])(url);\n          }\n\n          Registry_log.info('[Registry.resolve] domainUrl:', domainUrl);\n          var registredComponent;\n\n          if (type === 'domain-idp') {\n            registredComponent = _this.idpProxyList.hasOwnProperty(domainUrl) ? _this.idpProxyList[domainUrl] : false;\n          } else {\n            registredComponent = _this.protostubsList.hasOwnProperty(domainUrl) ? _this.protostubsList[domainUrl] : false;\n          }\n\n          Registry_log.info('[Registry.resolve] registred:', registredComponent); // TODO since the protostubs have other states this should be revised, because the status could change from DEPLOYED to LIVE\n          // TODO and this validation will trigger a new load of IDPProxy or Protostub;\n\n          if (registredComponent && registredComponent.hasOwnProperty('status') && (registredComponent.status === STATUS.DEPLOYED || registredComponent.status === STATUS.CREATED || registredComponent.status === STATUS.LIVE || registredComponent.status === STATUS.DISCONNECTED)) {\n            Registry_log.info('[Registry.resolve] Resolved: ', registredComponent.url, registredComponent.status);\n            resolve(registredComponent.url);\n          } else {\n            //todo: use switch-case to support other types of stubs\n            if (type === 'domain-idp') {\n              // The IdP Proxy does not exist, let's prepare its deployment by watching its status\n              _this.watchingYou.observe('idpProxyList', function (change) {\n                // log.log('[Registry - resolveNormalStub] idpProxyList changed ' + _this.idpProxyList);\n                var keypath = change.keypath;\n                if (keypath.includes('status')) keypath = keypath.replace('.status', '');\n\n                if (keypath === domainUrl && change.name === 'status' && change.newValue === STATUS.CREATED) {\n                  // log.log('[Registry - resolveNormalStub] idpProxyList is live ' + _this.idpProxyList[domainUrl]);\n                  resolve(_this.idpProxyList[domainUrl].url);\n                }\n              });\n\n              if (!registredComponent || registredComponent.status === STATUS.FAILED) {\n                // this process will load the idp proxy, because is not yet registered;\n                Registry_log.info('[Registry.resolveNormalStub] deploy new IDPProxy: ', domainUrl);\n\n                _this.loader.loadIdpProxy(domainUrl).then(function () {\n                  Registry_log.info('[Registry.resolveNormalStub] IdP Proxy deployed: ', _this.idpProxyList[domainUrl]);\n                })[\"catch\"](function (reason) {\n                  Registry_log.error('[Registry.resolve] Error resolving Load IDPProxy: ', reason);\n                  _this.idpProxyList[domainUrl].status = 'deployment-failed';\n                  reject(reason);\n                });\n              }\n            } else {\n              // The protoStub does not exist, let's prepare its deployment by watching its status\n              _this.watchingYou.observe('protostubsList', function (change) {\n                // log.log('[Registry - resolveNormalStub] protostubsList changed ' + _this.protostubsList);\n                var keypath = change.keypath;\n                if (keypath.includes('status')) keypath = keypath.replace('.status', '');\n\n                if (keypath === domainUrl && change.name === 'status' && change.newValue === STATUS.CREATED) {\n                  // log.log('[Registry - resolve] protostub is live ' + _this.protostubsList[domainUrl]);\n                  resolve(_this.protostubsList[domainUrl].url);\n                }\n              });\n\n              if (!registredComponent || registredComponent.status === STATUS.FAILED) {\n                // lets deploy the protostub\n                Registry_log.info('[Registry.resolve] trigger new ProtocolStub: ', domainUrl);\n\n                _this.loader.loadStub(domainUrl).then(function () {// log.log('[Registry - resolveNormalStub] Stub deployed: ', _this.protostubsList[domainUrl]);\n                })[\"catch\"](function (reason) {\n                  Registry_log.error('[Registry.resolveNormalStub] Error resolving Load ProtocolStub: ', reason);\n                  reject(reason);\n                });\n              }\n            }\n          }\n        })[\"catch\"](function (reason) {\n          Registry_log.error('[Registry.resolve] Error resolving islegacy: ', reason);\n          reject(reason);\n        });\n      });\n    }\n    /**\r\n    * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).\r\n    * @param  {URL.URL}  url       url\r\n    * @return {Promise<URL.URL>}                 Promise <URL.URL>\r\n    */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(msg) {\n      Registry_log.info('[Registry - Resolve] -  ', msg);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var url = msg.to ? msg.to : msg;\n        var p2p = msg.body && msg.body.p2p ? msg.body.p2p : false; // log.log('P2P: ', p2p, url);\n        // log.log('P2P - p2pHandlerStub: ', !_this.p2pHandlerStub[_this.runtimeURL], _this.p2pHandlerStub, _this.runtimeURL);\n        // log.log('P2P - isBackendServiceURL: ', isBackendServiceURL(url), isBackendServiceURL, url);\n        // log.log('P2P - includes runtimeURL: ', url.includes(_this.runtimeURL));\n        // log.log('P2P - includes p2phandler: ', url.includes('/p2phandler/'));\n        // log.log('P2P - includes p2prequester: ', url.includes('/p2prequester/'));\n        // Skip p2p procedure when not supported by the Runtime or for backend services\n\n        if (!_this.p2pHandlerStub[_this.runtimeURL] || Object(utils[\"r\" /* isBackendServiceURL */])(url) || url.includes(_this.runtimeURL) || url.includes('/p2phandler/') || url.includes('/p2prequester/')) {\n          Registry_log.info('[Registry - resolve] - Resolve normal stub: ', _this.p2pHandlerStub, _this.runtimeURL, Object(utils[\"r\" /* isBackendServiceURL */])(url), p2p, url);\n\n          _this.resolveNormalStub(url).then(function (returnURL) {\n            resolve(returnURL);\n          });\n        } else {\n          Registry_log.info('[Registry - resolve] - checkP2P: ', p2p, url, _this._p2pConnectionResolve);\n\n          _this._p2pConnectionResolve.checkP2P(msg).then(function (registeredP2P) {\n            // log.log('[Registry - resolve] found registered P2P: ', registeredP2P);\n            var p2pConnection = _this.p2pConnectionList[registeredP2P.runtime];\n\n            if (!p2pConnection) {\n              p2pConnection = registeredP2P;\n              _this.p2pConnectionList[registeredP2P.runtime] = p2pConnection;\n            }\n\n            switch (p2pConnection.status) {\n              case STATUS.LIVE:\n                msg.body.peer = registeredP2P.runtime;\n                resolve(p2pConnection.url, msg);\n                break;\n\n              case STATUS.CREATED: // p2p connection setup is ongoing, use MN Stub\n\n              case STATUS.PROGRESS:\n                _this.resolveNormalStub(url).then(function (returnURL) {\n                  resolve(returnURL);\n                });\n\n                break;\n\n              case STATUS.DISCONNECTED:\n                // p2p connection stub was disconnected, let's ask to connect again\n                Registry_log.info('[Registry - Resolve] - p2pConnection is disconnected lets try to reconnect');\n\n                _this._p2pConnectionResolve.reconnectP2PRequester(p2pConnection).then(function (returnURL) {\n                  // log.log('[Registry - Resolve] - was reconnected with p2pRequesterStubt: ', returnURL);\n                  resolve(returnURL);\n                }, function (reason) {\n                  Registry_log.info('[Registry - Resolve] - Reason: ', reason);\n\n                  _this.resolveNormalStub(url).then(function (returnURL) {\n                    resolve(returnURL);\n                  });\n                });\n\n                break;\n\n              default:\n                Registry_log.info('[Registry - resolve] - P2P: ', p2p);\n\n                if (!p2p) {\n                  // no p2p connection exists and the message sender does not ask one. Lets use the MN Stub\n                  _this.resolveNormalStub(url).then(function (returnURL) {\n                    resolve(returnURL);\n                  });\n                } else {\n                  _this._setupP2PRequester(registeredP2P).then(function (returnURL) {\n                    // no p2p connection exists but the message sender is asking one. Lets try to setup one\n                    resolve(returnURL);\n                  }, function (reason) {\n                    Registry_log.info('[Registry - Resolve] - Reason: ', reason);\n\n                    _this.resolveNormalStub(url).then(function (returnURL) {\n                      resolve(returnURL);\n                    });\n                  });\n                }\n\n                break;\n            }\n          }, function (reason) {\n            Registry_log.info('[Registry - Resolve] - Reason: ', reason);\n\n            _this.resolveNormalStub(url).then(function (returnURL) {\n              resolve(returnURL);\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_setupP2PRequester\",\n    value: function _setupP2PRequester(input) {\n      var _this = this;\n\n      Registry_log.log('[Registry._setupP2PConnection] loadStub with p2pRequester: ', input);\n      return new Promise(function (resolve, reject) {\n        var remoteRuntime = input.runtime;\n        var p2pConfig = {\n          remoteRuntimeURL: remoteRuntime,\n          p2pHandler: input.p2pHandler,\n          p2pRequesterStub: true\n        }; // lets prepare the p2pRequesterSTub deployment by setting an observer to its status changes\n\n        _this.watchingYou.observe('p2pRequesterStub', function (change) {\n          Registry_log.log('[Registry._setupP2PConnection] p2pRequesterStubs changed ' + _this.p2pRequesterStub);\n\n          if (change.keypath.split('.')[0] === remoteRuntime && change.name === 'status' && change.newValue === STATUS.LIVE) {\n            Registry_log.log('[Registry._setupP2PConnection] p2pRequester is live ' + _this.p2pRequesterStub[remoteRuntime]);\n            resolve(_this.p2pRequesterStub[remoteRuntime].url);\n          }\n        }); //  stub load\n\n\n        _this.loader.loadStub(input.p2pRequester, p2pConfig).then(function () {\n          Registry_log.log('[Registry._setupP2PConnection] p2pRequester deployed: ', _this.p2pRequesterStub[remoteRuntime]);\n        })[\"catch\"](function (error) {\n          reject(error);\n        });\n      });\n    }\n    /**\r\n    * To verify if url is for a legacy service.\r\n    * @param  {URL.URL}  url      url\r\n    * @return {boolean}\r\n    */\n\n  }, {\n    key: \"isLegacy\",\n    value: function isLegacy(url) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (url === _this._domain) {\n          return resolve(false);\n        }\n\n        Registry_log.log('[Registry] [Registry.Registry.isLegacy] ', url); // TODO: to be defined in the runtime configuration\n\n        var nonLegacy = ['hyperty-runtime', 'domain', 'global', 'hyperty'];\n        var urlDivided = Object(utils[\"k\" /* divideURL */])(url);\n\n        if (nonLegacy.indexOf(urlDivided.type) !== -1 || urlDivided.domain === _this._domain) {\n          return resolve(false);\n        } // process User URLs\n\n\n        if (url.split('@').length > 1) {\n          var domain = urlDivided.domain; // log.log('[Registry] [Registry.Registry.isLegacy] domain: ', domain);\n\n          if (_this.idpLegacyProxyList.hasOwnProperty(domain)) {\n            var result = _this.idpLegacyProxyList[domain];\n\n            if (result.interworking) {\n              return resolve(result.interworking);\n            } else {\n              return resolve(false);\n            }\n          }\n\n          _this._loader.descriptors.getIdpProxyDescriptor(domain).then(function (result) {\n            // log.log('[Registry] [Registry.Registry.isLegacy] Legacy stub descriptor: ', result);\n            if (result.interworking) {\n              _this.idpLegacyProxyList[domain] = result;\n              resolve(result.interworking);\n            } else {\n              resolve(false);\n            }\n          })[\"catch\"](function (reason) {\n            Registry_log.warn('problem loading idp proxy descriptor for domain:', domain, ' because ', reason);\n            reject(reason);\n          });\n        } else {\n          // process protostub URLs\n          resolve(_this.isInterworkingProtoStub(url));\n        }\n      });\n    }\n    /**\r\n    * To verify if URL is locally registered or not.\r\n    * @param  {URL.URL}  url      url\r\n    * @return {boolean}\r\n    */\n\n  }, {\n    key: \"isLocal\",\n    value: function isLocal(url) {\n      var runtimeScheme = ['hyperty-runtime', 'runtime'];\n      var hypertyScheme = ['hyperty'];\n      var urlScheme = url.split('://')[0]; // Process Runtime Core URLs.\n      // Messages originated from protostubs should also not include the runtimeURL in its URL.\n\n      if (runtimeScheme.indexOf(urlScheme) !== -1) {\n        return url.includes(this.runtimeURL);\n      } // Process Hyperty URLs\n      // Todo: hypertiesList should be an object not an array\n\n\n      if (hypertyScheme.indexOf(urlScheme) !== -1) {\n        for (var index in this.hypertiesList) {\n          var hyperty = this.hypertiesList[index];\n\n          if (hyperty.hypertyURL === url) {\n            return true;\n          }\n        }\n\n        return false;\n      } // Process Data Object URLs\n\n\n      if (url.includes('/subscription')) {\n        url = url.substring(0, url.indexOf('/subscription'));\n      }\n\n      var dataObject = this.dataObjectList[url];\n\n      if (dataObject) {\n        if (dataObject.interworking) {\n          return !dataObject.interworking;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n    * To verify if protostub is to interwork with a legacy domain.\r\n    * @param  {URL.URL}  runtimeProtostubURL      The runtime URL of the Protostub\r\n    * @return {boolean}\r\n    */\n\n  }, {\n    key: \"isInterworkingProtoStub\",\n    value: function isInterworkingProtoStub(runtimeProtostubURL) {\n      var _this = this;\n\n      if (typeof runtimeProtostubURL === 'boolean') {\n        return false;\n      }\n\n      if (!runtimeProtostubURL.includes('/protostub/')) {\n        return false;\n      }\n\n      var filtered = Object.keys(_this.protostubsList).filter(function (key) {\n        return _this.protostubsList[key].url === runtimeProtostubURL;\n      }).map(function (key) {\n        if (_this.protostubsList[key].hasOwnProperty('interworking')) {\n          return _this.protostubsList[key].interworking;\n        } else {\n          return false;\n        }\n      })[0];\n      return filtered;\n    }\n  }, {\n    key: \"loader\",\n    set: function set(loader) {\n      var _this = this;\n\n      _this._loader = loader;\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._loader;\n    }\n    /**\r\n    * return the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n\n  }, {\n    key: \"messageBus\",\n    get: function get() {\n      var _this = this;\n\n      return _this._messageBus;\n    }\n    /**\r\n    * Set the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n\n      _this._messageBus = messageBus;\n\n      _this._messageBus.addListener(_this.registryURL, function (msg) {\n        // log.log('[Registry listener] ', msg);\n        var isHyperty = Object(utils[\"t\" /* isHypertyURL */])(msg.from);\n        var hasCriteria = msg.body.hasOwnProperty('criteria');\n        var isURLResource;\n        var isUserResource;\n        var isHypertyResource;\n\n        if (msg.body.hasOwnProperty('resource') && msg.body.resource !== '.') {\n          isURLResource = Object(utils[\"v\" /* isURL */])(msg.body.resource);\n          isUserResource = Object(utils[\"w\" /* isUserURL */])(msg.body.resource);\n          isHypertyResource = Object(utils[\"t\" /* isHypertyURL */])(msg.body.resource);\n        }\n\n        var isDelete = msg.type === 'delete';\n        var hasName;\n        var hasUser;\n\n        if (msg.body.hasOwnProperty('value')) {\n          hasName = msg.body.value.hasOwnProperty('name');\n          hasUser = msg.body.value.hasOwnProperty('user');\n        }\n\n        if (msg.type === 'response') {\n          Registry_log.error('[Register listener] skipping ', msg);\n          return;\n        } // msg sent by identity manager library\n\n\n        var userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);\n\n        var reply = {\n          id: msg.id,\n          type: 'response',\n          to: msg.from,\n          from: msg.to,\n          body: {\n            resource: userUrl\n          }\n        };\n        reply.body.code = userUrl ? 200 : 404;\n\n        _this._messageBus.postMessage(reply);\n      }); // Install AddressAllocation\n\n\n      var addressAllocation = allocation_AddressAllocation.instance;\n      _this.addressAllocation = addressAllocation;\n      _this._domainRegistration = new registry_DomainRegistration(_this.runtimeURL, _this.registryURL, _this._domain, messageBus); // log.log('[Registry - AddressAllocation] - ', addressAllocation);\n    }\n  }]);\n\n  return Registry;\n}();\n\n/* harmony default export */ var registry_Registry = (Registry_Registry);\n// CONCATENATED MODULE: ./src/runtime/runtimeConfiguration.js\nvar runtimeConfiguration_runtimeConfiguration = {\n  // TODO this should be changed with the definition used for indexeddb\n  // look at: https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\n  // Now we are using the definition for Dexie; (http://dexie.org/docs/Version/Version.stores())\n  storageSchemas: {\n    capabilities: {\n      capabilities: 'key,version,value'\n    },\n    subscriptions: {\n      subscriptions: 'key,version,value'\n    },\n    runtime: {\n      'runtime:URL': 'key,version,value',\n      'p2pHandler:URL': 'key,version,value'\n    },\n    registry: {\n      'registry:DataObjectURLs': 'key,version,value',\n      'registry:HypertyURLs': 'key,version,value'\n    },\n    cryptoManager: {\n      userAsymmetricKey: 'key,version,value',\n      dataObjectSessionKeys: 'key,version,value'\n    },\n    identity: {\n      accessTokens: 'key,version,value',\n      identities: 'userURL, userProfile.email, userProfile.userURL, userProfile.name'\n    },\n    runtimeCatalogue: {\n      runtimeCatalogue: '&cguid, accessControlPolicy, constraints, dataObjects, type, objectName, sourcePackage, version, url'\n    },\n    policy: {\n      'rethink:activePolicy': 'key,version,value',\n      'rethink:groups': 'key,version,value',\n      'rethink:userPolicies': 'key,version,value',\n      'rethink:spPolicies': 'key,version,value'\n    },\n    syncherManager: {\n      'syncherManager:ObjectURLs': 'key,version,value',\n      'remotes': 'key,version,value'\n    },\n    hypertyResources: {\n      hypertyResources: '&resourceURL, name, contentUrl, content, created, reporter, resourceType'\n    }\n  },\n  runtimeURLS: {\n    registry: {\n      prefix: 'hyperty-runtime://',\n      suffix: 'registry'\n    },\n    identityModule: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/idm'\n    },\n    runtimeUA: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/ua'\n    },\n    catalogue: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/catalogue'\n    },\n    graphConnector: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/graph'\n    },\n    syncManager: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/sm'\n    }\n  },\n  catalogueURLs: {\n    protocolstub: {\n      prefix: 'https://',\n      suffix: '/.well-known/protocolstub/',\n      fallback: 'https://%domain%/.well-known/protocolstub/'\n    },\n    'idp-proxy': {\n      prefix: 'https://',\n      suffix: '/.well-known/idp-proxy/',\n      fallback: 'https://%domain%/.well-known/idp-proxy/',\n      all: '/all.json'\n    }\n  },\n  msgNodeURL: {\n    prefix: 'domain://msg-node.',\n    suffix: '',\n    hypertyAddressAllocation: '/hyperty-address-allocation',\n    objectAddressAllocation: '/object-address-allocation',\n    subscriptionManagement: '/sm'\n  },\n  domainRegistryURL: {\n    prefix: 'domain://registry.',\n    suffix: ''\n  },\n  globalRegistryURL: 'global://registry.',\n  remoteStorage: 'https://admin:admin@backup.rethink.alticelabs.com'\n};\n// CONCATENATED MODULE: ./src/identity/Identities.js\nfunction Identities_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Identities_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Identities_createClass(Constructor, protoProps, staticProps) { if (protoProps) Identities_defineProperties(Constructor.prototype, protoProps); if (staticProps) Identities_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar Identities_log = loglevel[\"getLogger\"]('IdentityModule');\n\n\n/**\r\n* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.\r\n*\r\n*/\n\nvar Identities_Identities =\n/*#__PURE__*/\nfunction () {\n  function Identities(type, storageManager) {\n    Identities_classCallCheck(this, Identities);\n\n    var _this = this;\n\n    _this._watchingYou = new utils_WatchingYou();\n    _this._storageManager = storageManager;\n    _this._guid;\n    _this._type = type;\n    _this._identities = {};\n    _this._accessTokens = _this.watchingYou.watch('accessTokens', {}, true);\n  }\n\n  Identities_createClass(Identities, [{\n    key: \"reset\",\n    value: function reset() {\n      this._identities = {};\n      console.log(this);\n      this.currentIdentity = undefined;\n      this.defaultIdentity = undefined;\n    }\n  }, {\n    key: \"getIdentity\",\n    value: function getIdentity(identifier) {\n      return Object.assign({}, this._identities[identifier]);\n    }\n  }, {\n    key: \"loadIdentities\",\n    value: function loadIdentities() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this._storageManager.get(null, null, 'identities').then(function (identities) {\n          Identities_log.info('[Identities.Load Identities] identities: ', identities);\n\n          if (identities) {\n            _this._identities = identities; // let's set as default identity the one that expires later\n\n            _this.identifiers.forEach(function (id) {\n              var timeNow = Object(utils[\"C\" /* secondsSinceEpoch */])();\n              var identity = _this._identities[id];\n              var expires = identity.expires; //            if (!identity.hasOwnProperty('interworking')\n              //            || !identity.interworking) {\n\n              _this.defaultIdentity = id;\n\n              if (parseInt(expires) > timeNow) {\n                _this.defaultIdentity.expires = parseInt(expires);\n                _this.currentIdentity = id;\n              }\n            });\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"loadAccessTokens\",\n    value: function loadAccessTokens() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this._storageManager.get('accessTokens').then(function (accessTokens) {\n          if (accessTokens) _this._accessTokens = accessTokens;\n          resolve();\n        });\n      });\n    } // to confirm if this function is required when the App constraints the identity selection\n\n  }, {\n    key: \"addIdentity\",\n    value: function addIdentity(identity) {\n      var _this2 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this._isValid(identity)) {\n          var id = identity.identifiers[0];\n          Object.assign(_this2._identities[id], identity);\n\n          _this2._storeIdentity(identity).then(function () {\n            _this2._identities[id].status = 'created';\n            resolve();\n          });\n        } else {\n          reject('[Identities.addIdentity] invalid IdAssertion');\n        }\n      });\n    }\n  }, {\n    key: \"addAssertion\",\n    value: function addAssertion(assertion) {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this._isValid(assertion)) {\n          assertion.userProfile.guid = _this._guid;\n          var userUrl = assertion.userProfile.userURL;\n          if (!_this.identities[userUrl]) _this._identities[userUrl] = assertion;else _this.identities[userUrl] = assertion;\n\n          _this._store().then(function () {\n            _this3._identities[userUrl].status = 'created';\n\n            if (_this.defaultIdentity == false) {\n              _this.defaultIdentity = userUrl;\n            }\n\n            resolve(assertion);\n          });\n        } else {\n          reject('[Identities.addAssertion] invalid IdAssertion: ', assertion);\n        }\n      });\n    }\n  }, {\n    key: \"removeIdentity\",\n    value: function removeIdentity(userUrl) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        delete _this.identities[userUrl];\n\n        _this._store().then(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"addAccessToken\",\n    value: function addAccessToken(accessToken) {\n      var _this = this;\n\n      Identities_log.info('[Identities.addAccessToken] ', accessToken);\n      return new Promise(function (resolve, reject) {\n        if (_this._isValidAccessToken(accessToken)) {\n          //        let newAccessToken = deepClone(accessToken);\n          _this._accessTokens[accessToken.domain] = accessToken;\n\n          _this._storeAccessTokens().then(function () {\n            _this._accessTokens[accessToken.domain].status = 'created';\n            resolve(accessToken);\n          });\n        } else {\n          reject('[Identities.addIdentity] invalid AccessToken: ', accessToken);\n        }\n      });\n    }\n  }, {\n    key: \"setAccessTokenInProgress\",\n    value: function setAccessTokenInProgress(domain) {\n      if (this._accessTokens[domain]) this._accessTokens[domain].status = 'in-progress';else this._accessTokens[domain] = {\n        status: 'in-progress'\n      };\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken(domain, resources) {\n      var accessToken = this._accessTokens[domain];\n\n      if (!accessToken) {\n        return undefined;\n      } else if (resources.every(function (i) {\n        return accessToken.resources.indexOf(i) != -1;\n      })) {\n        return this._accessTokens[domain];\n      } else {\n        return new Error('[Identities.getAccessToken] Not found for ', domain);\n      }\n    }\n  }, {\n    key: \"removeAccessToken\",\n    value: function removeAccessToken(domain, resources) {\n      var _this4 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var accessToken = _this4._accessTokens[domain];\n\n        if (!accessToken) {\n          resolve();\n        } else if (resources.every(function (i) {\n          return accessToken.resources.indexOf(i) != -1;\n        })) {\n          delete _this4._accessTokens[domain];\n\n          _this._storeAccessTokens().then(function () {\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: \"updateAssertion\",\n    value: function updateAssertion(assertion) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var userUrl = assertion.userProfile.userURL;\n\n        if (!_this.identities[userUrl]) {\n          return reject('[Identities.updateAssertion] Identity not found for ', userUrl);\n        } else {\n          _this.identities[userUrl] = assertion;\n\n          _this._store().then(function () {\n            resolve();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"updateAccessToken\",\n    value: function updateAccessToken(accessToken) {\n      var _this = this;\n\n      Identities_log.info('[Identities.updateAccessToken] ', accessToken);\n      return new Promise(function (resolve, reject) {\n        if (_this._isValidAccessToken(accessToken)) {\n          _this._accessTokens[accessToken.domain].expires = accessToken.expires;\n          _this._accessTokens[accessToken.domain].accessToken = accessToken.accessToken;\n\n          _this._storeAccessTokens().then(function () {\n            _this._accessTokens[accessToken.domain].status = 'created';\n            resolve(accessToken);\n          });\n        } else {\n          reject('[Identities.updateAccessToken] invalid AccessToken: ', accessToken);\n        }\n      });\n    }\n  }, {\n    key: \"addIdAssertion\",\n    value: function addIdAssertion(identifier, assertion, idp, scope) {\n      var _this = this;\n\n      var newIdAssertion = new IdAssertion(assertion, idp, scope);\n\n      _this.idAssertionList.push(newIdAssertion);\n    } //TODO: complete with more verifications. To be moved to Identity?\n\n  }, {\n    key: \"_isValid\",\n    value: function _isValid(identity) {\n      if (!identity.hasOwnProperty('assertion')) {\n        return false;\n      }\n\n      var splitedAssertion = identity.assertion.split('.');\n      var assertionParsed; //verify if the token contains the 3 components, or just the assertion\n\n      try {\n        if (splitedAssertion[1]) {\n          assertionParsed = Object(utils[\"g\" /* decode */])(splitedAssertion[1]);\n        } else {\n          assertionParsed = Object(utils[\"g\" /* decode */])(identity.assertion);\n        }\n      } catch (err) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_isValidAccessToken\",\n    value: function _isValidAccessToken(accessToken) {\n      if (!accessToken.hasOwnProperty('accessToken')) {\n        return false;\n      }\n\n      if (!accessToken.hasOwnProperty('domain')) {\n        return false;\n      }\n\n      if (!(accessToken.hasOwnProperty('resources') && Array.isArray(accessToken.resources))) {\n        return false;\n      }\n\n      if (!(accessToken.hasOwnProperty('expires') && Number.isInteger(accessToken.expires))) {\n        return false;\n      }\n\n      if (!accessToken.hasOwnProperty('input')) {\n        return false;\n      }\n\n      return true;\n    } //TODO: add function to only set one new identity using the new indexed storage manager\n\n  }, {\n    key: \"_store\",\n    value: function _store() {\n      var _this5 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var store = Object.keys(_this5._identities).map(function (userURL) {\n          return _this._storageManager.set(userURL, 0, _this5._identities[userURL], 'identities');\n        });\n        Promise.all(store).then(function () {\n          resolve();\n        })[\"catch\"](function (err) {\n          reject('On _sendReporterSessionKey from method storeIdentity error: ' + err);\n        });\n      });\n    }\n  }, {\n    key: \"_storeAccessTokens\",\n    value: function _storeAccessTokens() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var accessTokens = Object(utils[\"i\" /* deepClone */])(_this._accessTokens);\n\n        _this._storageManager.set('accessTokens', 0, accessTokens).then(function () {\n          resolve();\n        })[\"catch\"](function (err) {\n          reject('On _sendReporterSessionKey from method storeIdentity error: ' + err);\n        });\n      });\n    }\n  }, {\n    key: \"identities\",\n    get: function get() {\n      return this._identities;\n    }\n  }, {\n    key: \"accessTokens\",\n    get: function get() {\n      return this._accessTokens;\n    }\n  }, {\n    key: \"watchingYou\",\n    get: function get() {\n      return this._watchingYou;\n    }\n  }, {\n    key: \"guid\",\n    set: function set(guid) {\n      this._guid = guid;\n    },\n    get: function get() {\n      return this._guid;\n    }\n  }, {\n    key: \"defaultIdentity\",\n    set: function set(identifier) {\n      if (this.identities[identifier]) this._defaultIdentity = identifier;else throw new Error('[Identities.set defaultIdentity ] Error: identity does not exist here: ', identifier);\n    },\n    get: function get() {\n      if (this._defaultIdentity) return Object.assign({}, this.identities[this._defaultIdentity]);else return false;\n    }\n  }, {\n    key: \"currentIdentity\",\n    set: function set(identifier) {\n      if (this.identities[identifier]) this._currentIdentity = identifier;else throw '[Identities.set currentIdentity ] Error: identity does not exist here: ', identifier;\n    },\n    get: function get() {\n      return Object.assign({}, this.identities[this._currentIdentity]);\n    }\n  }, {\n    key: \"identifiers\",\n    get: function get() {\n      return Object.keys(this._identities);\n    }\n  }]);\n\n  return Identities;\n}(); // move to Identity service framework?\n\n\nvar IdAssertion =\n/*#__PURE__*/\nfunction () {\n  function IdAssertion(assertion, idp, userProfile) {\n    Identities_classCallCheck(this, IdAssertion);\n\n    var _this = this;\n\n    _this._assertion = assertion;\n    _this._idp = idp;\n    _this._userProfile = userProfile;\n  }\n\n  Identities_createClass(IdAssertion, [{\n    key: \"assertion\",\n    get: function get() {\n      return this._assertion;\n    }\n  }, {\n    key: \"idp\",\n    get: function get() {\n      return this._idp;\n    }\n  }, {\n    key: \"userProfile\",\n    get: function get() {\n      return this._userProfile;\n    }\n  }]);\n\n  return IdAssertion;\n}();\n\nvar IdValidation =\n/*#__PURE__*/\nfunction () {\n  function IdValidation(identity, contents) {\n    Identities_classCallCheck(this, IdValidation);\n\n    var _this = this;\n\n    _this.identity = identity;\n    _this.contents = contents;\n  }\n\n  Identities_createClass(IdValidation, [{\n    key: \"validates\",\n    value: function validates(identity, contents) {//TODO implement the logic\n    }\n  }]);\n\n  return IdValidation;\n}();\n\n/* harmony default export */ var identity_Identities = (Identities_Identities);\n// CONCATENATED MODULE: ./src/identity/GuiFake.js\nfunction GuiFake_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Log System\n\nvar GuiFake_log = loglevel[\"getLogger\"]('IdentityModule');\n/**\r\n* fake class for the gui to select the identity,\r\n* TODO replace with the proper identity GUI\r\n*\r\n*/\n\nvar GuiFake = function GuiFake(url, messageBus) {\n  GuiFake_classCallCheck(this, GuiFake);\n\n  GuiFake_log.log('FakeGUI_deployed');\n\n  var _this = this;\n\n  _this._url = url;\n  _this._waitTime = 10000;\n  _this._messageBus = messageBus;\n\n  _this._messageBus.addListener(_this._url, function (msg) {\n    if (msg.hasOwnProperty('type') && msg.type === 'create' && msg.body.hasOwnProperty('value') && msg.body.value.hasOwnProperty('identities') && msg.body.value.hasOwnProperty('idps')) {\n      var identities = msg.body.value.identities;\n      var idps = msg.body.value.idps;\n      var value;\n\n      if (identities[0] !== undefined) {\n        value = {\n          type: 'identity',\n          value: identities[0],\n          code: 200\n        };\n      } else {\n        value = {\n          type: 'idp',\n          value: idps[2].domain,\n          code: 200\n        };\n      }\n\n      var replyMsg = {\n        id: msg.id,\n        type: 'response',\n        to: msg.from,\n        from: msg.to,\n        body: value\n      }; // to test on the identity side the listener without the timeout\n      // can represent the time the user takes to choose and identity\n\n      if (msg.body.value === 'wait') {\n        setTimeout(function () {\n          _this._messageBus.postMessage(replyMsg);\n        }, _this._waitTime);\n      } else {\n        _this._messageBus.postMessage(replyMsg);\n      }\n    } else {\n      GuiFake_log.log('Ignoring messages not intended to FakeGUI.', msg);\n    }\n  });\n};\n\n/* harmony default export */ var identity_GuiFake = (GuiFake);\n// CONCATENATED MODULE: ./src/identity/IdentityModule.js\nfunction IdentityModule_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction IdentityModule_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction IdentityModule_createClass(Constructor, protoProps, staticProps) { if (protoProps) IdentityModule_defineProperties(Constructor.prototype, protoProps); if (staticProps) IdentityModule_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar IdentityModule_log = loglevel[\"getLogger\"]('IdentityModule');\n\n\n\n\n/**\r\n*\r\n* The Identity Module (Id Module) is the component responsible for handling the\r\n* user identity and the association of this identity with the Hyperty instances,\r\n* in order to make Hyperty instances identifiable. The identity in the reTHINK project\r\n* is not fixed to a unique Identity Service Provider, but obtained through several\r\n* different Identity sources. With this approach, the Id Module provides to the user the\r\n* option to choose the preferred method for authentication.\r\n* This module will thus able to support multiple Identity acquisition methods,\r\n* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.\r\n* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,\r\n*  which can be used by the Identity Module to associate it with a Hyperty instance.\r\n*\r\n* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication\r\n* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction\r\n* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.\r\n*\r\n* When a request for a user identity is made using the method loginWithRP(identifier, scope),\r\n* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package\r\n* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token\r\n* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.\r\n* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint\r\n* on the Identity Provider Authorization Server, and after the validation is done,\r\n* an ID token is obtained with the information according to the scope required.\r\n* This ID token is then preserved in this module that can obtained through the getIdentities()\r\n* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.\r\n*\r\n*/\n\nvar IdentityModule_IdentityModule =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * This is the constructor to initialise the Identity Module it does not require any input.\r\n  */\n  function IdentityModule(runtimeURL, runtimeCapabilities, storageManager, dataObjectsStorage, cryptoManager) {\n    IdentityModule_classCallCheck(this, IdentityModule);\n\n    var _this = this;\n\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\n    if (!storageManager) throw new Error('storageManager is missing');\n    if (!cryptoManager) throw new Error('cryptoManager is missing');\n    _this._runtimeURL = runtimeURL;\n    _this.dataObjectsStorage = dataObjectsStorage;\n    _this._idmURL = _this._runtimeURL + '/idm';\n    _this._guiURL = _this._runtimeURL + '/identity-gui';\n    _this.runtimeCapabilities = runtimeCapabilities;\n    _this._domain = Object(utils[\"k\" /* divideURL */])(_this._runtimeURL).domain; //to store items with this format: {identity: identityURL, token: tokenID}\n\n    _this._identities = new identity_Identities('human', storageManager); // to be reviewed: watchingYou identitiesList or identities?\n    //    _this.identitiesList = _this.watchingYou.watch('identitiesList', {}, true);\n\n    _this._crypto = cryptoManager;\n    /*    _this.emailsList = [];\r\n    let newIdentity = new Identity('guid', 'HUMAN');\r\n    _this.identity = newIdentity;\r\n    _this.currentIdentity;\r\n    _this.identities.defaultIdentity;*/\n    //stores the association of the dataObject and the Hyperty registered within\n\n    _this.dataObjectsIdentity = {}; // is this needed?\n\n    _this._listOfIdps = []; // variable to know if the GUI is deployed to choose the identity. if the real GUI is not deployed, a fake gui is deployed instead.\n\n    _this.guiDeployed = false;\n  } //******************* GET AND SET METHODS *******************\n\n  /**\r\n  * return the messageBus in this Registry\r\n  * @param {MessageBus}           messageBus\r\n  */\n\n\n  IdentityModule_createClass(IdentityModule, [{\n    key: \"getIdentity\",\n    //******************* IDENTITY RELEATED METHODS *******************\n\n    /**\r\n    * gets all the information from a given userURL\r\n    * @param  {String}  userURL     user url\r\n    * @return {JSON}    identity    identity bundle from the userURL\r\n    */\n    value: function getIdentity(userURL) {\n      return this.identities.getIdentity(userURL);\n    }\n    /**\r\n    * Function to set the current Identity with a given Identity\r\n    * @param {Identity}        identity         identity\r\n    */\n\n    /*  setCurrentIdentity(identity) {\r\n      let _this = this;\r\n      _this.currentIdentity = identity;\r\n    }*/\n\n    /**\r\n    * Function to return all the identities registered within a session by a user.\r\n    * These identities are returned in an array containing a JSON package for each user identity.\r\n    * @return {Array<Identities>}         Identities\r\n    */\n\n  }, {\n    key: \"getIdentitiesToChoose\",\n    value: function getIdentitiesToChoose() {\n      var _this2 = this;\n\n      //    let identities = _this.identities.identifiers;\n      // let idps = [\n      //   { domain: 'google.com', type: 'idToken'},\n      //   { domain: 'microsoft.com', type: 'idToken'},\n      //   { domain: 'orange.fr', type: 'idToken'},\n      //   { domain: 'slack.com', type: 'Legacy'}\n      // ];\n      // todo: retrieve available idps from runtime catalogue\n      // todo: enable oauth idps\n      // let idps = [\n      //   { domain: 'google.com', type: 'idToken' },\n      //   { domain: 'microsoft.com', type: 'idToken' },\n      //   { domain: 'facebook.com', type: 'idToken' },\n      //   { domain: 'slack.com', type: 'idToken' }\n      // ];\n      return new Promise(function (resolve) {\n        var prefix = runtimeConfiguration_runtimeConfiguration['catalogueURLs']['idp-proxy'].prefix;\n        var suffix = runtimeConfiguration_runtimeConfiguration['catalogueURLs']['idp-proxy'].suffix;\n        var all = runtimeConfiguration_runtimeConfiguration['catalogueURLs']['idp-proxy'].all;\n        var url = prefix + _this2._domain + suffix + all;\n        Promise.all([_this2.runtimeCapabilities.isAvailable('browser'), _this2.runtimeCapabilities.isAvailable('node')]).then(function (result) {\n          var isBrowser = result[0];\n          var isNode = result[1];\n          var constraints = {\n            constraints: {}\n          };\n          constraints.constraints.node = isNode;\n          constraints.constraints.browser = isBrowser;\n\n          _this2._getAllIdps(url).then(function (idps) {\n            var listOfIdps = idps.map(function (key) {\n              return {\n                domain: key,\n                type: 'idToken'\n              };\n            });\n            IdentityModule_log.info('[IdentityModule.getIdentityAssertion:getIdentitiesToChoose]', idps, listOfIdps);\n            _this2._listOfIdps = listOfIdps;\n            return resolve({\n              defaultIdentity: _this2.identities.defaultIdentity,\n              identities: _this2.identities.identities,\n              idps: listOfIdps\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_getAllIdps\",\n    value: function _getAllIdps(allUrl) {\n      //  let allUrl = 'https://' + this._domain + '/.well-known/idp-proxy/all.json';\n      return new Promise(function (resolve, reject) {\n        fetch(allUrl).then(function (result) {\n          /*    $.ajax({\r\n                url: hypertiesURL,\r\n                success: function(result) {*/\n          console.log(result);\n          result.json().then(function (idps) {\n            console.log(idps);\n            /*          let response = [];\r\n                    if (typeof hyperties === 'object') {\r\n                      hyperties.forEach(function(key) {\r\n                        response.push(key);\r\n                      });\r\n                    } else if (typeof hyperties === 'string') {\r\n                      response = JSON.parse(hyperties);\r\n                    }*/\n\n            resolve(idps['idps']);\n          });\n        }, function (reason) {\n          //      fail: function(reason) {\n          reject(reason); //        notification(reason, 'warn');\n        });\n      });\n    }\n    /**\r\n    * Function to return the selected Identity within a session\r\n    * @return {Identity}        identity         identity\r\n    */\n\n    /*  getCurrentIdentity() {\r\n      let _this = this;\r\n      return _this.currentIdentity;\r\n    }*/\n\n  }, {\n    key: \"init\",\n    value: function init(guid) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this._identities.loadIdentities().then(function () {\n          if (!guid) {\n            _this._crypto.getMyPublicKey().then(function (key) {\n              var hash = _this._crypto.crypto._sha256(Object(utils[\"E\" /* stringify */])(key)).then(function (hash) {\n                guid = 'user-guid://' + hash;\n                _this.identities.guid = guid;\n\n                _this._identities.loadAccessTokens().then(function () {\n                  resolve();\n                });\n              })[\"catch\"](function (error) {\n                console.log('[IdentityModule] error', error);\n              });\n            });\n          } else {\n            _this.identities.guid = guid;\n\n            _this._identities.loadAccessTokens().then(function () {\n              resolve();\n            });\n          }\n        });\n      });\n    }\n    /**\r\n    * Function that fetch an identityAssertion from a user.\r\n    *\r\n    * @return {IdAssertion}              IdAssertion\r\n    */\n\n  }, {\n    key: \"getIdentityAssertion\",\n    value: function getIdentityAssertion(identityBundle) {\n      IdentityModule_log.log('[IdentityModule.getIdentityAssertion:identityBundle]', identityBundle);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //CHECK whether is browser environment or nodejs\n        //if it is browser, then create a fake identity\n        _this.runtimeCapabilities.isAvailable('browser').then(function (result) {\n          IdentityModule_log.log('runtime browser identity acquisition', result);\n          if (!result) return; //todo: only idp should be mandatory when identityBundle exists\n\n          if (identityBundle && identityBundle.hasOwnProperty('idp')) {\n            var idp = identityBundle.idp;\n            var origin = identityBundle.hasOwnProperty('origin') ? identityBundle.origin : 'origin';\n            var idHint = identityBundle.hasOwnProperty('idHint') ? identityBundle.idHint : '';\n\n            if (_this.identities.defaultIdentity) {\n              var assertion = _this.identities.defaultIdentity;\n\n              if (assertion.expires > Object(utils[\"C\" /* secondsSinceEpoch */])()) {\n                return resolve(assertion);\n              } else if (assertion.hasOwnProperty('refresh')) {\n                IdentityModule_log.log('[Identity.IdentityModule.getIdentityAssertion] refreshing assertion: ', assertion);\n\n                _this._refreshIdAssertion().then(function (newAssertion) {\n                  IdentityModule_log.log('[IdentityModule.getIdentityAssertion] refreshed assertion.', newAssertion);\n                  return resolve(newAssertion);\n                }, function (error) {\n                  IdentityModule_log.error('[IdentityModule.getIdentityAssertion] error on refresIdAssertion: ', error, ' Asking for a new IdAssertion.');\n\n                  _this._getIdAssertionForDomain(origin, idp, idHint).then(function (assertion) {\n                    resolve(assertion);\n                  }, function (error) {\n                    reject(error);\n                  });\n                });\n              } else {\n                _this._getIdAssertionForDomain(origin, idp, idHint).then(function (assertion) {\n                  resolve(assertion);\n                }, function (error) {\n                  reject(error);\n                });\n              }\n            } else {\n              _this._getIdAssertionForDomain(origin, idp, idHint).then(function (assertion) {\n                resolve(assertion);\n              }, function (error) {\n                reject(error);\n              });\n            }\n          } else if (_this.identities.defaultIdentity) {\n            var _assertion = _this.identities.defaultIdentity;\n\n            if (_assertion.expires > Object(utils[\"C\" /* secondsSinceEpoch */])()) {\n              return resolve(_assertion);\n            } else if (_assertion.hasOwnProperty('refresh')) {\n              IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshing assertion: ', _assertion);\n\n              _this._refreshIdAssertion(_assertion).then(function (newAssertion) {\n                IdentityModule_log.log('[IdentityModule.getIdentityAssertion] refreshed assertion.', newAssertion);\n                return resolve(newAssertion);\n              }, function (error) {\n                IdentityModule_log.error('[IdentityModule.getIdentityAssertion] error on refresIdAssertion: ', error, ' Asking for a new IdAssertion.');\n\n                _this.selectIdentityFromGUI().then(function (assertion) {\n                  IdentityModule_log.log('[IdentityModule] Identity selected from GUI.');\n                  _this.identities.defaultIdentity = assertion.userProfile.userURL;\n                  return resolve(assertion);\n                }, function (err) {\n                  return reject(err);\n                });\n              });\n            } else {\n              _this.selectIdentityFromGUI().then(function (assertion) {\n                IdentityModule_log.log('[IdentityModule] Identity selected from GUI.');\n                _this.identities.defaultIdentity = assertion.userProfile.userURL;\n                return resolve(assertion);\n              }, function (err) {\n                return reject(err);\n              });\n            }\n          } else {\n            _this.selectIdentityFromGUI().then(function (assertion) {\n              IdentityModule_log.log('[IdentityModule] Identity selected from GUI.');\n              _this.identities.defaultIdentity = assertion.userProfile.userURL;\n              return resolve(assertion);\n            }, function (err) {\n              return reject(err);\n            });\n          }\n        })[\"catch\"](function (error) {\n          IdentityModule_log.error('Error on identity acquisition ', error);\n          return reject(error);\n        });\n\n        _this.runtimeCapabilities.isAvailable('node').then(function (result) {\n          IdentityModule_log.log('node identity acquisition', result);\n          if (!result) return;\n\n          if (_this.identities.currentIdentity) {\n            //TODO verify whether the token is still valid or not.\n            // should be needed to make further requests, to obtain a valid token\n            return resolve(_this.identities.currentIdentity);\n          } else {\n            IdentityModule_log.log('getIdentityAssertion for nodejs');\n            var idp = {\n              type: 'idp',\n              value: 'nodejs-idp',\n              code: 200,\n              auth: false\n            };\n\n            _this.callNodeJsGenerateMethods(idp.value, 'origin').then(function (value) {\n              resolve(value);\n            }, function (err) {\n              reject(err);\n            });\n          }\n        })[\"catch\"](function (error) {\n          IdentityModule_log.error('Error on identity acquisition ', error);\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"_getIdAssertionForDomain\",\n    value: function _getIdAssertionForDomain(origin, idp, idHint) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.selectIdentityForHyperty(origin, idp, idHint).then(function (assertion) {\n          IdentityModule_log.log('[IdentityModule._getIdAssertionForDomain] Identity selected by hyperty.');\n          return resolve(assertion);\n        }, function (err) {\n          // if it got an error then just select identity from GUI\n          // log.error('[IdentityModule] Could not select identity from hyperty.');\n          _this.selectIdentityFromGUI().then(function (newAssertion) {\n            IdentityModule_log.log('[IdentityModule._getIdAssertionForDomain] Identity selected by hyperty.');\n            return resolve(newAssertion);\n          }, function (err) {\n            return reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_refreshIdAssertion\",\n    value: function _refreshIdAssertion(assertion) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.sendRefreshMessage(assertion).then(function (newAssertion) {\n          IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshed assertion: ', newAssertion);\n\n          _this.identities.updateAssertion(newAssertion).then(function () {\n            resolve(newAssertion);\n          }, function (err) {\n            IdentityModule_log.error('[IdentityModule.getValidToken] error updating the assertion ', err);\n            reject(err);\n          });\n        }, function (err) {\n          IdentityModule_log.error('[IdentityModule.getValidToken] error refreshing the assertion ', err);\n          reject(err);\n        });\n      });\n    }\n    /**\r\n    * Function to return all the users URLs registered within a session\r\n    * These users URLs are returned in an array of strings.\r\n    * @return {Array<String>}         users\r\n    */\n\n  }, {\n    key: \"getUsersIDs\",\n    value: function getUsersIDs() {\n      /*  log.log('[getUsersIDs:emailFormat]', emailFormat);\r\n        log.log('getUsersIDs:emailFormat', emailFormat);\r\n        let _this = this;\r\n        let users = [];*/\n      //if request comes with the emailFormat option, then convert url to email format\n\n      /*    let converter = (emailFormat) ? getUserEmailFromURL : (value) => { return value; };\r\n        for (let index in _this.identities) {\r\n        let identity = _this.identities[index];\r\n        users.push(converter(identity.identity));\r\n      }*/\n      return this.identities.identifiers;\n    }\n    /**\r\n    * Function to remove an identity\r\n    * @param {String}    userURL      userURL\r\n    * @return {Promise}\r\n    */\n\n  }, {\n    key: \"deleteIdentity\",\n    value: function deleteIdentity(userURL) {\n      return this.identities.removeIdentity(userURL);\n    }\n    /**\r\n    * Function to unregister an identity from the emailsList array and not show in to the GUI\r\n    * @param {String}    email      email\r\n    */\n\n    /*  unregisterIdentity(email) {\r\n      let _this = this;\r\n        for (let e in _this.emailsList) {\r\n        if (_this.emailsList[e] === email) {\r\n          _this.emailsList.splice(e, 1);\r\n        }\r\n      }\r\n    }*/\n    // to be used when runtime is not executed in a sandbox\n\n  }, {\n    key: \"listenShowAdmin\",\n    value: function listenShowAdmin(callback) {\n      this._showAdmin = callback;\n    }\n    /**\r\n    * Function that sends a request to the GUI using messages. Sends all identities registered and\r\n    * the Idps supported, and return the identity/idp received by the GUI\r\n    * @param {Array<identity>}  identities      list of identitiies\r\n    * @param {Array<String>}    idps            list of idps to authenticate\r\n    * @return {Promise}         returns a chosen identity or idp\r\n    */\n\n  }, {\n    key: \"requestIdentityToGUI\",\n    value: function requestIdentityToGUI(identities, idps) {\n      IdentityModule_log.log('[IdentityModule.requestIdentityToGUI:identities]', identities);\n      IdentityModule_log.log('[IdentityModule.requestIdentityToGUI:idps]', idps);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //condition to check if the real GUI is deployed. If not, deploys a fake gui\n        if (_this.guiDeployed === false) {\n          var guiFakeURL = _this._guiURL;\n          var guiFake = new identity_GuiFake(guiFakeURL, _this._messageBus);\n          _this.guiFake = guiFake;\n          _this.guiDeployed = true;\n        }\n\n        var message = {\n          type: 'create',\n          to: _this._guiURL,\n          from: _this._idmURL,\n          body: {\n            value: {\n              identities: identities,\n              idps: idps\n            }\n          }\n        };\n\n        var callback = function callback(msg) {\n          _this._messageBus.removeResponseListener(_this._idmURL, msg.id); // todo: to return the user URL and not the email or identifier\n\n\n          if (msg.body.code === 200) {\n            var selectedIdentity = msg.body;\n            IdentityModule_log.log('selectedIdentity: ', selectedIdentity.value);\n            resolve(selectedIdentity);\n          } else {\n            reject('error on requesting an identity to the GUI');\n          }\n        }; //postMessage with callback but without timeout\n\n\n        try {\n          _this._messageBus.postMessage(message, callback, false);\n        } catch (err) {\n          reject('In method callIdentityModuleFunc error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"callNodeJsGenerateMethods\",\n    value: function callNodeJsGenerateMethods(idp, origin) {\n      IdentityModule_log.log('[callNodeJsGenerateMethods:idp]', idp);\n      IdentityModule_log.log('[callNodeJsGenerateMethods:origin]', origin);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //debugger;\n        var publicKey; //let keyPair = nodeJSKeyPairPopulate;\n        //generates the RSA key pair\n\n        _this._crypto.getMyPublicKey().then(function (key) {\n          IdentityModule_log.log('[callNodeJsGenerateMethods:key]', key);\n          publicKey = Object(utils[\"E\" /* stringify */])(key);\n          IdentityModule_log.log('[callNodeJsGenerateMethods] NO_URL');\n          return _this.generateAssertion(publicKey, origin, 'url', idp);\n        }).then(function (value) {\n          if (value) {\n            resolve(value);\n          } else {\n            reject('Error on obtaining Identity');\n          }\n        })[\"catch\"](function (err) {\n          IdentityModule_log.log(err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"callGenerateMethods\",\n    value: function callGenerateMethods(idp, origin) {\n      IdentityModule_log.log('[callGenerateMethods:idp]', idp);\n      IdentityModule_log.log('[callGenerateMethods:origin]', origin);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var publicKey; //generates the RSA key pair\n\n        _this._crypto.getMyPublicKey().then(function (key) {\n          IdentityModule_log.log('[callGenerateMethods:key]', key);\n          publicKey = Object(utils[\"E\" /* stringify */])(key); //        userkeyPair = keyPair;\n\n          IdentityModule_log.log('generateAssertion:no_hint');\n          return _this.generateAssertion(publicKey, origin, '', idp);\n        }).then(function (url) {\n          _this.myHint = url;\n          IdentityModule_log.log('generateAssertion:hint');\n          return _this.generateAssertion(publicKey, origin, url, idp);\n        }).then(function (value) {\n          if (value) {\n            resolve(value);\n          } else {\n            reject('Error on obtaining Identity');\n          }\n        })[\"catch\"](function (err) {\n          IdentityModule_log.error(err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"loginSelectedIdentity\",\n    value: function loginSelectedIdentity(publicKey, origin, idp, loginUrl) {\n      IdentityModule_log.log('[loginSelectedIdentity:publicKey]', publicKey);\n      IdentityModule_log.log('[loginSelectedIdentity:origin]', origin);\n      IdentityModule_log.log('[loginSelectedIdentity:idp]', idp); //    log.log('[loginSelectedIdentity:keyPair]', keyPair);\n\n      IdentityModule_log.log('[loginSelectedIdentity:loginUrl]', loginUrl);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        IdentityModule_log.log('[IdentityModule] openPopup');\n\n        _this.callIdentityModuleFunc('openPopup', {\n          urlreceived: loginUrl\n        }).then(function (idCode) {\n          return idCode;\n        }, function (err) {\n          IdentityModule_log.error('Error while logging in for the selected identity.');\n          return reject(err);\n        }).then(function (idCode) {\n          _this.sendGenerateMessage(publicKey, origin, idCode, idp).then(function (newResponse) {\n            if (newResponse.hasOwnProperty('assertion')) {\n              _this.identities.addAssertion(newResponse).then(function (result) {\n                resolve('Login was successfull');\n              })[\"catch\"](function (err) {\n                reject('Login has failed:' + err);\n              });\n            } else {\n              IdentityModule_log.error('Error while logging in for the selected identity.');\n              return reject('Could not generate a valid assertion for selected identity.');\n            }\n          })[\"catch\"](function (err) {\n            reject('On loginSelectedIdentity from method sendGenerateMessage error:  ' + err);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"selectIdentityForHyperty\",\n    value: function selectIdentityForHyperty(origin, idp, idHint) {\n      IdentityModule_log.log('[selectIdentityForHyperty:origin]', origin);\n      IdentityModule_log.log('[selectIdentityForHyperty:idp]', idp);\n      IdentityModule_log.log('[selectIdentityForHyperty:idHint]', idHint);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //generates the RSA key pair\n        _this._crypto.getMyPublicKey().then(function (key) {\n          var publicKey = Object(utils[\"E\" /* stringify */])(key);\n\n          _this.sendGenerateMessage(publicKey, origin, idHint, idp).then(function (response) {\n            if (response.hasOwnProperty('assertion')) {\n              // identity was logged in, just save it\n              _this.identities.addAssertion(response).then(function (value) {\n                return resolve(response);\n              }, function (err) {\n                return reject(err);\n              });\n            } else if (response.hasOwnProperty('loginUrl')) {\n              // identity was not logged in\n              _this.loginSelectedIdentity(publicKey, origin, idp, response.loginUrl).then(function (value) {\n                return resolve(value);\n              }, function (err) {\n                return reject(err);\n              });\n            } else {\n              // you should never get here, if you do then the IdP Proxy is not well implemented\n              // log.error('GenerateAssertion returned invalid response.');\n              IdentityModule_log.log('Proceeding by logging in.');\n\n              _this.callGenerateMethods(idp, origin).then(function (value) {\n                return resolve(value);\n              }, function (err) {\n                return reject(err);\n              });\n            }\n          })[\"catch\"](function (err) {\n            reject('On selectIdentityForHyperty from method sendGenerateMessage error:  ' + err);\n          });\n        })[\"catch\"](function (err) {\n          reject('On selectIdentityForHyperty from method generateRSAKeyPair error:  ' + err);\n        });\n      });\n    }\n  }, {\n    key: \"selectIdentityFromGUI\",\n    value: function selectIdentityFromGUI(origin) {\n      var _this3 = this;\n\n      IdentityModule_log.log('[IdentityModule.selectIdentityFromGUI:origin]', origin);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3.getIdentitiesToChoose().then(function (identitiesInfo) {\n          return _this.requestIdentityToGUI(identitiesInfo.identities, identitiesInfo.idps);\n        }).then(function (value) {\n          if (value.type === 'identity') {\n            //  let chosenID = getUserURLFromEmail(value.value);\n            // hack while the user url is not returned from requestIdentityToGUI;\n\n            /*          let chosenID = 'user://' + _this.identities.currentIdentity.idp.domain + '/' + value.value;\r\n              _this.identities.defaultIdentity = _this.identities.currentIdentity;*/\n            // returns the identity info from the chosen id\n            //          if (_this.identities.currentIdentity) resolve(_this.identities.currentIdentity.assertion);\n            if (_this.identities.identities[value.value]) resolve(_this.identities.identities[value.value]);else reject('[IdentityModule.selectIdentityFromGUI] identity not found: ', value.value);\n          } else if (value.type === 'idp') {\n            _this.callGenerateMethods(value.value, origin).then(function (value) {\n              return resolve(value);\n            }, function (err) {\n              return reject(err);\n            });\n          } else {\n            return reject('error on GUI received message.');\n          }\n        })[\"catch\"](function (err) {\n          reject('On selectIdentityFromGUI from method requestIdentityToGUI error:  ' + err);\n        });\n      });\n    }\n  }, {\n    key: \"callIdentityModuleFunc\",\n    value: function callIdentityModuleFunc(methodName, parameters, domain, resource) {\n      IdentityModule_log.log('[callIdentityModuleFunc:methodName]', methodName);\n      IdentityModule_log.log('[callIdentityModuleFunc:parameters]', parameters);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this._showAdmin) {\n          if (methodName === 'getAccessToken') {\n            _this._showAdmin(methodName, parameters.urlreceived, domain, resource).then(function (result) {\n              resolve(result);\n            });\n          } else _this._showAdmin(methodName);\n        } else {\n          var message = {\n            type: 'execute',\n            to: _this._guiURL,\n            from: _this._idmURL,\n            body: {\n              resource: 'identity',\n              method: methodName,\n              params: parameters\n            }\n          }; //post msg with callback but without timout\n\n          var callback = function callback(msg) {\n            _this._messageBus.removeResponseListener(_this._idmURL, msg.id);\n\n            var result = msg.body.value;\n            resolve(result);\n          };\n\n          try {\n            _this._messageBus.postMessage(message, callback, false);\n          } catch (err) {\n            reject('In method callIdentityModuleFunc error: ' + err);\n          }\n        }\n      });\n    } //******************* TOKEN METHODS *******************\n\n    /**\r\n    * get a Token to be added to a message\r\n    * @param  {String}  fromURL     origin of the message\r\n    * @param  {String}  toURL     target of the messageok\r\n    * @return {JSON}    token    token to be added to the message\r\n    */\n\n  }, {\n    key: \"getToken\",\n    value: function getToken(msg) {\n      var _this = this;\n\n      var fromURL = msg.from;\n      var toUrl = msg.to;\n\n      if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('source')) {\n        fromURL = msg.body.source;\n      }\n\n      if (msg.type === 'forward') {\n        fromURL = msg.body.from;\n      }\n\n      if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('subscriber')) {\n        fromURL = msg.body.subscriber;\n      }\n\n      return new Promise(function (resolve, reject) {\n        IdentityModule_log.log('[IdentityModule.getToken] for msg ', msg); //log.log('toUrl', toUrl);\n\n        _this.registry.isLegacy(toUrl).then(function (result) {\n          // log.log('[Identity.IdentityModule.getToken] isLEGACY: ', result);\n          if (result) {\n            _this._getAccessToken(msg).then(function (token) {\n              IdentityModule_log.log('[IdentityModule.getToken] access token ', token);\n              resolve(Object(utils[\"i\" /* deepClone */])(token));\n            })[\"catch\"](function (err) {\n              reject('[IdentityModule.getToken] Access Token error ' + err);\n            });\n          } else {\n            _this._getValidToken(fromURL).then(function (token) {\n              resolve(token);\n            })[\"catch\"](function (err) {\n              reject('On getToken from method _getValidToken error: ' + err);\n            });\n          }\n        })[\"catch\"](function (err) {\n          reject('On getToken from method isLegacy error: ' + err);\n        });\n      });\n    }\n    /**\r\n    * get an Id Token for a HypertyURL\r\n    * @param  {String}  hypertyURL     the Hyperty address\r\n    * @return {JSON}    token    Id token to be added to the message\r\n    */\n\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken(hypertyURL) {\n      IdentityModule_log.info('getIdToken:hypertyURL ', hypertyURL);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var splitURL = hypertyURL.split('://');\n        var userURL;\n\n        if (splitURL[0] !== 'hyperty') {\n          // it is a Data Object URL\n          _this._getHypertyFromDataObject(hypertyURL).then(function (returnedHypertyURL) {\n            userURL = _this.registry.getHypertyOwner(returnedHypertyURL);\n\n            if (userURL) {\n              var identity = _this.identities.getIdentity(userURL);\n\n              if (identity) return resolve(identity);else return reject('[IdentityModule.getIdToken] Identity not found for: ', userURL);\n            } else {\n              return reject('[IdentityModule.getIdToken] User not found for hyperty: ', returnedHypertyURL);\n            }\n          })[\"catch\"](function (reason) {\n            IdentityModule_log.error('[IdentityModule.getIdToken] Error: ', reason);\n            reject(reason);\n          });\n        } else {\n          userURL = _this.registry.getHypertyOwner(hypertyURL);\n\n          if (userURL) {\n            var identity = _this.identities.getIdentity(userURL);\n\n            if (identity) return resolve(identity);else return reject('[IdentityModule.getIdToken] Identity not found for: ', userURL);\n          } else {\n            return reject('[IdentityModule.getIdToken] User not found for hyperty: ', userURL);\n          }\n        }\n      });\n    }\n    /**\r\n    * get an Access Token for an external API\r\n    * @param  {String}  url     the external url\r\n    * @return {JSON}    token    Access token to be added to the message\r\n    */\n\n  }, {\n    key: \"_getAccessToken\",\n    value: function _getAccessToken(msg) {\n      var url = msg.to;\n\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        if (!msg.hasOwnProperty('body')) {\n          return reject('[IdentityModule._getAccessToken] missing mandatory msg body: ', msg);\n        }\n\n        if (!msg.body.hasOwnProperty('value')) {\n          return reject('[IdentityModule._getAccessToken] missing mandatory msg body value: ', msg);\n        }\n\n        if (!msg.body.value.hasOwnProperty('resources')) {\n          return reject('[IdentityModule._getAccessToken] missing mandatory msg body value resources: ', msg);\n        }\n\n        var domainToCheck = Object(utils[\"k\" /* divideURL */])(url).domain;\n\n        if (url.includes('protostub')) {\n          domainToCheck = domainToCheck.replace(domainToCheck.split('.')[0] + '.', '');\n        }\n\n        var resources = msg.body.value.resources;\n\n        _this._getAccessTokenForDomain(domainToCheck, resources).then(function (token) {\n          resolve(token);\n        });\n      });\n    }\n  }, {\n    key: \"_getAccessTokenForDomain\",\n    value: function _getAccessTokenForDomain(domainToCheck, resources) {\n      var _this = this;\n\n      var token;\n      return new Promise(function (resolve, reject) {\n        try {\n          token = _this.identities.getAccessToken(domainToCheck, resources);\n        } catch (e) {\n          return reject('[IdentityModule._getAccessTokenForDomain] Access Token error ' + err);\n        }\n\n        if (!token) {\n          _this._getNewAccessToken(domainToCheck, resources).then(function (token) {\n            IdentityModule_log.log('[Identity.IdentityModule._getAccessTokenForDomain] new Access Token ', token);\n            return resolve(token);\n          })[\"catch\"](function (err) {\n            reject('[IdentityModule._getAccessTokenForDomain] on getNewAccessToken ' + err);\n          });\n        } else if (token.status === 'in-progress') {\n          return resolve(_this._inProgressAccessToken(domainToCheck, resources));\n        } else {\n          var timeNow = Object(utils[\"C\" /* secondsSinceEpoch */])();\n          IdentityModule_log.log('[Identity.IdentityModule._getAccessTokenForDomain] found  Access Token ', token);\n\n          if (timeNow >= token.expires) {\n            //        if (true) {\n            if (token.hasOwnProperty(\"refresh\")) {\n              _this._refreshAccessToken(Object(utils[\"i\" /* deepClone */])(token)).then(function (newToken) {\n                return resolve(_this.identities.updateAccessToken(newToken));\n              });\n            } else {\n              _this._revokeAccessToken(token, domainToCheck, resources).then(function () {\n                setTimeout(function () {\n                  return _this._getNewAccessToken(domainToCheck, resources);\n                }, 1000);\n              });\n            }\n          } else return resolve(Object(utils[\"i\" /* deepClone */])(token));\n        }\n      });\n    }\n  }, {\n    key: \"_revokeAccessToken\",\n    value: function _revokeAccessToken(token, domain, resources) {\n      var _this = this; //    let domain = _this._resolveDomain(oldIdentity.idp);\n      //    let message;\n      //    let assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\n\n\n      IdentityModule_log.log('[IdentityModule._revokeAccessToken] to be revoked ', token);\n      return new Promise(function (resolve, reject) {\n        //      let domain = _this._resolveDomain(token.domain);\n        var message;\n        message = {\n          type: 'execute',\n          to: _this._resolveDomain(token.domain),\n          from: _this._idmURL,\n          body: {\n            method: 'revokeAccessToken',\n            params: {\n              token: token\n            }\n          }\n        };\n        IdentityModule_log.log('[IdentityModule._revokeAccessToken] revoke msg ', message);\n\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            var result = res.body.value;\n            if (result) _this._identities.removeAccessToken(domain, resources).then(function () {\n              resolve(result);\n            });\n            resolve();\n          });\n        } catch (err) {\n          reject('In IdentityModule._revokeAccessToken on postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"_inProgressAccessToken\",\n    value: function _inProgressAccessToken(domain, resources) {\n      var _this4 = this;\n\n      this.identities.watchingYou.observe('accessTokens', function (change) {\n        IdentityModule_log.log('[IdentityModule._inProgressAccessToken] accessTokens changed ' + _this4.identities.accessTokens);\n        var keypath = change.keypath;\n\n        if (keypath.includes('status')) {\n          keypath = keypath.replace('.status', '');\n        }\n\n        if (keypath === domain && change.name === 'status' && change.newValue === 'created') {\n          // log.log('[Identity.IdentityModule.getToken] token is created ' + _this.identitiesList[domain]);\n          return _this4.identities.getAccessToken(domain, resources);\n        }\n      });\n    }\n  }, {\n    key: \"_getNewAccessToken\",\n    value: function _getNewAccessToken(domain, resources) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.identities.setAccessTokenInProgress(domain);\n\n        var message = {\n          type: 'execute',\n          to: _this._resolveDomain(domain),\n          from: _this._idmURL,\n          body: {\n            method: 'getAccessTokenAuthorisationEndpoint',\n            params: resources\n          }\n        }; //let's first get the authorisation URL from the Idp Proxy\n\n        _this._messageBus.postMessage(message, function (res) {\n          if (res.body.code > 299) {\n            return reject('[IdentityModule._getNewAccessToken] Error on getAccessTokenAuthorisationEndpoint from IdP Proxy: ', res.body.desc);\n          } // let's ask the user for authorisation\n\n\n          _this.callIdentityModuleFunc('getAccessToken', {\n            urlreceived: res.body.value\n          }, domain, resources[0]).then(function (authorisation) {\n            IdentityModule_log.log('[IdentityModule:callIdentityModuleFunc:openPopup] auhtorisation result: ', authorisation);\n            message.body.method = 'getAccessToken';\n            message.body.params = {\n              resources: resources,\n              login: authorisation\n            }; //wihtout callback to avoid timeout errors?\n            // let's ask Access Token from the Idp Proxy\n\n            _this._messageBus.postMessage(message, function (res) {\n              if (res.body.code > 299) return reject('[IdentityModule._getNewAccessToken] Error on getAccessToken from IdP Proxy: ', res.body.desc);\n\n              _this.identities.addAccessToken(res.body.value).then(function (token) {\n                IdentityModule_log.info('[IdentityModule._getNewAccessToken] resolving token: ', token);\n                return resolve(res.body.value);\n              }, function (err) {\n                reject(err);\n              });\n            });\n          }, function (err) {\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_refreshAccessToken\",\n    value: function _refreshAccessToken(outdatedToken) {\n      var _this = this; //    let domain = _this._resolveDomain(oldIdentity.idp);\n      //    let message;\n      //    let assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\n\n\n      IdentityModule_log.log('IdentityModule._refreshAccessToken:outdatedToken', outdatedToken);\n      return new Promise(function (resolve, reject) {\n        var domain = _this._resolveDomain(outdatedToken.domain);\n\n        var message;\n        message = {\n          type: 'execute',\n          to: domain,\n          from: _this._idmURL,\n          body: {\n            method: 'refreshAccessToken',\n            params: {\n              token: outdatedToken\n            }\n          }\n        };\n\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            var result = res.body.value;\n            resolve(result);\n          });\n        } catch (err) {\n          reject('In IdentityModule._refreshAccessToken on postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"sendRefreshMessage\",\n    value: function sendRefreshMessage(oldIdentity) {\n      var _this = this; //    let domain = _this._resolveDomain(oldIdentity.idp);\n      //    let message;\n      //    let assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\n\n\n      IdentityModule_log.log('sendRefreshMessage:oldIdentity', oldIdentity);\n      return new Promise(function (resolve, reject) {\n        var domain = _this._resolveDomain(oldIdentity.idp.domain);\n\n        var message;\n\n        var assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\n\n        IdentityModule_log.info('sendRefreshMessage:oldIdentity', oldIdentity);\n        message = {\n          type: 'execute',\n          to: domain,\n          from: _this._idmURL,\n          body: {\n            resource: 'identity',\n            method: 'refreshAssertion',\n            params: {\n              identity: assertion\n            }\n          }\n        };\n\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            if (res.body.code < 300) {\n              var result = res.body.value;\n              resolve(result);\n            } else resolve(oldIdentity);\n          });\n        } catch (err) {\n          reject('In sendRefreshMessage on postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken(idpDomain, resources, login) {\n      IdentityModule_log.log('[getAccessToken:idpDomain]', idpDomain);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var domain = _this._resolveDomain(idpDomain);\n\n        var message;\n        message = {\n          type: 'execute',\n          to: domain,\n          from: _this._idmURL,\n          body: {\n            resource: 'identity',\n            method: 'getAccessToken',\n            params: {\n              resources: resources,\n              login: login\n            }\n          }\n        };\n\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            if (res.body.code < 299) {\n              var result = res.body.value;\n              resolve(result);\n            } else resolve(res.body);\n          });\n        } catch (err) {\n          reject('IdentityModule.In getAccessToken: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"getAccessTokenAuthorisationEndpoint\",\n    value: function getAccessTokenAuthorisationEndpoint(scope, idpDomain) {\n      IdentityModule_log.log('[getAccessTokenAuthorisationEndpoint:idpDomain]', idpDomain);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var domain = _this._resolveDomain(idpDomain);\n\n        var message;\n        message = {\n          type: 'execute',\n          to: domain,\n          from: _this._idmURL,\n          body: {\n            resource: 'identity',\n            method: 'getAccessTokenAuthorisationEndpoint',\n            params: {\n              resources: scope\n            }\n          }\n        };\n\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            var result = res.body.value;\n            resolve(result);\n          });\n        } catch (err) {\n          reject('In getAccessTokenAuthorisationEndpoint: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"sendGenerateMessage\",\n    value: function sendGenerateMessage(contents, origin, usernameHint, idpDomain) {\n      IdentityModule_log.log('[sendGenerateMessage:contents]', contents);\n      IdentityModule_log.log('[sendGenerateMessage:origin]', origin);\n      IdentityModule_log.log('[sendGenerateMessage:usernameHint]', usernameHint);\n      IdentityModule_log.log('[sendGenerateMessage:idpDomain]', idpDomain);\n      IdentityModule_log.log('sendGenerateMessage_hint');\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var domain = _this._resolveDomain(idpDomain);\n\n        var message;\n        message = {\n          type: 'execute',\n          to: domain,\n          from: _this._idmURL,\n          body: {\n            resource: 'identity',\n            method: 'generateAssertion',\n            params: {\n              contents: contents,\n              origin: origin,\n              usernameHint: usernameHint\n            }\n          }\n        };\n\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            if (res.body.code < 300) resolve(res.body.value);else reject(res.body);\n          });\n        } catch (err) {\n          reject('In sendGenerateMessage: ' + err);\n        }\n      });\n    }\n    /**\r\n    * Requests the IdpProxy from a given Domain for an identityAssertion\r\n    *\r\n    * @param  {DOMString} contents     contents\r\n    * @param  {DOMString} origin       origin\r\n    * @param  {DOMString} usernameHint usernameHint\r\n    * @param  {JSON}      keyPair       user keyPair\r\n    * @return {IdAssertion}              IdAssertion\r\n    */\n\n  }, {\n    key: \"generateAssertion\",\n    value: function generateAssertion(contents, origin, usernameHint, idpDomain) {\n      IdentityModule_log.log('[generateAssertion:contents]', contents);\n      IdentityModule_log.log('[generateAssertion:origin]', origin);\n      IdentityModule_log.log('[generateAssertion:usernameHint]', usernameHint); //    log.log('[generateAssertion:keyPair]', keyPair);\n\n      IdentityModule_log.log('[generateAssertion:idpDomain]', idpDomain);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        IdentityModule_log.log('[IdentityModule:sendGenerateMessage:sendGenerateMessage]', usernameHint);\n\n        _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then(function (result) {\n          if (result) {\n            _this.identities.addAssertion(result).then(function (value) {\n              resolve(result);\n            }, function (err) {\n              reject(err);\n            });\n          } else {\n            reject('error on obtaining identity information');\n          }\n        }, function (error) {\n          if (error.hasOwnProperty('description') && error.description.hasOwnProperty('loginUrl')) {\n            _this.callIdentityModuleFunc('login', {\n              urlreceived: error.description.loginUrl\n            }).then(function (value) {\n              IdentityModule_log.log('[IdentityModule:callIdentityModuleFunc:openPopup]', usernameHint);\n              resolve(value);\n            }, function (err) {\n              reject(err);\n            });\n          } else {\n            IdentityModule_log.error('[IdentityModule:sendGenerateMessage] generate assertion with hint error ', error);\n            reject(error);\n          }\n        })[\"catch\"](function (err) {\n          reject('On generateAssertion from method sendGenerateMessage error: ' + err);\n        });\n      });\n    }\n    /**\r\n    * Requests the IdpProxy from a given Domain to validate an IdentityAssertion\r\n    * Returns a promise with the result from the validation.\r\n    * @param  {DOMString} assertion\r\n    * @param  {DOMString} origin       origin\r\n    * @return {Promise}         Promise         promise with the result from the validation\r\n    */\n\n  }, {\n    key: \"validateAssertion\",\n    value: function validateAssertion(assertion, origin, idpDomain) {\n      IdentityModule_log.log('[validateAssertion:assertion]', assertion);\n      IdentityModule_log.log('[validateAssertion:origin]', origin);\n      IdentityModule_log.log('[validateAssertion:idpDomain]', idpDomain);\n\n      var _this = this;\n\n      var domain = _this._resolveDomain(idpDomain);\n\n      var message = {\n        type: 'execute',\n        to: domain,\n        from: _this._idmURL,\n        body: {\n          resource: 'identity',\n          method: 'validateAssertion',\n          params: {\n            assertion: assertion,\n            origin: origin\n          }\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        try {\n          _this._messageBus.postMessage(message, function (result) {\n            if (result.body.code === 200) {\n              resolve(result.body.value);\n            } else {\n              reject('error', result.body.code);\n            }\n          });\n        } catch (err) {\n          reject('On validateAssertion from method postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"addGUIListeners\",\n    value: function addGUIListeners() {\n      var _this = this;\n\n      _this._messageBus.addListener(_this._idmURL, function (msg) {\n        var funcName = msg.body.method;\n        IdentityModule_log.log('[IdentityModule:addGUIListeners]', msg, msg.body, funcName);\n        var returnedValue;\n\n        if (funcName === 'deployGUI') {\n          returnedValue = _this.deployGUI();\n        } else if (funcName === 'getIdentitiesToChoose') {\n          _this.getIdentitiesToChoose().then(function (result) {\n            // if the function requested is not a promise\n            var value = {\n              type: 'execute',\n              value: result,\n              code: 200\n            };\n            var replyMsg = {\n              id: msg.id,\n              type: 'response',\n              to: msg.from,\n              from: msg.to,\n              body: value\n            };\n\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\n            }\n          });\n\n          return;\n        } else if (funcName === 'unregisterIdentity') {\n          var email = msg.body.params.email;\n          returnedValue = _this.unregisterIdentity(email);\n        } else if (funcName === 'getMyPublicKey') {\n          // because generateRSAKeyPair is a promise\n          // we have to send the message only after getting the key pair\n          _this._crypto.getMyPublicKey().then(function (pubKey) {\n            pubKey = Object(utils[\"E\" /* stringify */])(pubKey);\n            var value = {\n              type: 'execute',\n              value: pubKey,\n              code: 200\n            };\n            var replyMsg = {\n              id: msg.id,\n              type: 'response',\n              to: msg.from,\n              from: msg.to,\n              body: value\n            };\n\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners from if generateRSAKeyPair method postMessage error: ' + err);\n            }\n          });\n\n          return;\n        } else if (funcName === 'sendGenerateMessage') {\n          var contents = msg.body.params.contents;\n          var origin = msg.body.params.origin;\n          var usernameHint = msg.body.params.usernameHint;\n          var idpDomain = msg.body.params.idpDomain;\n          var _replyMsg = {\n            id: msg.id,\n            type: 'response',\n            to: msg.from,\n            from: msg.to\n          };\n\n          _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then(function (returnedValue) {\n            var value = {\n              type: 'execute',\n              value: returnedValue,\n              code: 200\n            };\n            _replyMsg.body = value;\n\n            try {\n              _this._messageBus.postMessage(_replyMsg);\n            } catch (err) {\n              IdentityModule_log.error('IdentityModule.addGUIListeners sendGenerateMessage error: ' + err);\n            }\n          }, function (err) {\n            IdentityModule_log.info('IDPProxy generateAssertion reply error ' + err);\n            _replyMsg.body = err;\n\n            _this._messageBus.postMessage(_replyMsg);\n          });\n\n          return;\n        } else if (funcName === 'getAccessTokenAuthorisationEndpoint') {\n          var scope = msg.body.params.scope;\n          var _idpDomain = msg.body.params.idpDomain;\n\n          _this.getAccessTokenAuthorisationEndpoint(scope, _idpDomain).then(function (returnedValue) {\n            var value = {\n              type: 'execute',\n              value: returnedValue,\n              code: 200\n            };\n            var replyMsg = {\n              id: msg.id,\n              type: 'response',\n              to: msg.from,\n              from: msg.to,\n              body: value\n            };\n\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners from if sendGenerateMessage method postMessage error: ' + err);\n            }\n          });\n\n          return;\n        } else if (funcName === 'addAccessToken') {\n          var accessToken = msg.body.params;\n\n          _this.identities.addAccessToken(accessToken).then(function (returnedValue) {\n            var value = {\n              type: 'execute',\n              value: returnedValue,\n              code: 200\n            };\n            var replyMsg = {\n              id: msg.id,\n              type: 'response',\n              to: msg.from,\n              from: msg.to,\n              body: value\n            };\n\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\n            }\n          });\n\n          return;\n        } else if (funcName === 'getAccessToken') {\n          var domain = msg.body.params.idpDomain;\n          var resources = msg.body.params.resources;\n          var login = msg.body.params.login;\n          var _replyMsg2 = {\n            id: msg.id,\n            type: 'response',\n            to: msg.from,\n            from: msg.to\n          };\n\n          _this.getAccessToken(domain, resources, login).then(function (returnedValue) {\n            var value = {\n              type: 'execute',\n              value: returnedValue,\n              code: 200\n            };\n            _replyMsg2.body = value;\n\n            try {\n              _this._messageBus.postMessage(_replyMsg2);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners from if sendGenerateMessage method postMessage error: ' + err);\n            }\n          }, function (error) {\n            try {\n              _replyMsg2.body = error;\n\n              _this._messageBus.postMessage(_replyMsg2);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners from if sendGenerateMessage method postMessage error: ' + err);\n            }\n          });\n\n          return;\n        } else if (funcName === 'addAssertion') {\n          var result = msg.body.params; //        let keyPair = msg.body.params.keyPair;\n\n          _this.identities.addAssertion(result).then(function (returnedValue) {\n            var value = {\n              type: 'execute',\n              value: returnedValue,\n              code: 200\n            };\n            var replyMsg = {\n              id: msg.id,\n              type: 'response',\n              to: msg.from,\n              from: msg.to,\n              body: value\n            };\n\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\n            }\n          });\n\n          return;\n        } else if (funcName === 'refreshAccessToken') {\n          var _domain = msg.body.params.domain;\n          var _resources = msg.body.params.resources;\n\n          _this._getAccessTokenForDomain(_domain, _resources).then(function (token) {\n            var replyMsg = {\n              id: msg.id,\n              type: 'response',\n              to: msg.from,\n              from: msg.to,\n              body: {\n                value: token.accessToken,\n                code: 200\n              }\n            };\n\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              IdentityModule_log.error('On addGUIListeners for refreshAccessToken request: ' + err);\n            }\n          });\n\n          return;\n        } else if (funcName === 'unauthorise') {\n          var _domain2 = msg.body.params.domain;\n          var _resources2 = msg.body.params.resources;\n\n          try {\n            _this._revokeAccessToken(_this.identities.getAccessToken(_domain2, _resources2), _domain2, _resources2);\n          } catch (e) {\n            return reject('[IdentityModule.addGUIListeners] unauthorise error ' + err);\n          }\n\n          var _replyMsg3 = {\n            id: msg.id,\n            type: 'response',\n            to: msg.from,\n            from: msg.to,\n            body: {\n              value: true,\n              code: 200\n            }\n          };\n\n          try {\n            _this._messageBus.postMessage(_replyMsg3);\n          } catch (err) {\n            IdentityModule_log.error('On addGUIListeners for refreshAccessToken request: ' + err);\n          }\n\n          return;\n        }\n        /*else if (funcName === 'selectIdentityForHyperty') {\r\n         let origin = msg.body.params.origin;\r\n         let idp = msg.body.params.idp;\r\n         let idHint = msg.body.params.idHint;\r\n         _this.selectIdentityForHyperty(origin, idp, idHint);\r\n         return;\r\n        }*/\n        // if the function requested is not a promise\n\n\n        var value = {\n          type: 'execute',\n          value: returnedValue,\n          code: 200\n        };\n        var replyMsg = {\n          id: msg.id,\n          type: 'response',\n          to: msg.from,\n          from: msg.to,\n          body: value\n        };\n\n        try {\n          _this._messageBus.postMessage(replyMsg);\n        } catch (err) {\n          IdentityModule_log.error('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: \"deployGUI\",\n    value: function deployGUI() {\n      var _this = this;\n\n      _this.guiDeployed = true;\n    } //******************* PRIVATE METHODS *******************\n\n    /**\r\n     * GetValidToken is for non legacy hyperties and verifies if the Token is still valid\r\n     * if the token is invalid it requests a new token\r\n     * @param  {String} hypertyURL hypertyURL\r\n     * @return {Promise}\r\n     */\n\n  }, {\n    key: \"_getValidToken\",\n    value: function _getValidToken(hypertyURL) {\n      IdentityModule_log.log('[IdentityModule._getValidToken]:hypertyURL', hypertyURL);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.getIdToken(hypertyURL).then(function (assertion) {\n          IdentityModule_log.log('[IdentityModule._getValidToken] retrieved IdAssertion', assertion);\n          var timeNow = Object(utils[\"C\" /* secondsSinceEpoch */])();\n          if (!assertion.hasOwnProperty('expires')) return resolve(assertion);\n          var expirationDate = assertion.expires;\n          /* if (completeId.hasOwnProperty('info')) {\r\n            if (completeId.info.hasOwnProperty('expires')) {\r\n              expirationDate = completeId.info.expires;\r\n            } else if (completeId.info.hasOwnProperty('tokenIDJSON')) {\r\n              expirationDate = completeId.info.tokenIDJSON.exp;\r\n            } else {\r\n              // throw 'The ID Token does not have an expiration time';\r\n              log.info('The ID Token does not have an expiration time');\r\n              resolve(assertion);\r\n            }\r\n          } else if (completeId.hasOwnProperty('infoToken') && completeId.infoToken.hasOwnProperty('exp')) {\r\n            expirationDate = completeId.infoToken.exp;\r\n          } else {\r\n            // throw 'The ID Token does not have an expiration time';\r\n            log.info('The ID Token does not have an expiration time');\r\n            resolve(assertion);\r\n          }*/\n\n          IdentityModule_log.log('[Identity.IdentityModule.getValidToken] Token expires in', expirationDate);\n          IdentityModule_log.log('[Identity.IdentityModule.getValidToken] time now:', timeNow);\n\n          if (timeNow >= expirationDate) {\n            //        if (timeNow >= 0) {\n            if (assertion.hasOwnProperty('refresh')) {\n              IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshing assertion: ', assertion);\n\n              _this.sendRefreshMessage(assertion).then(function (newAssertion) {\n                IdentityModule_log.log('[Identity.IdentityModule.getValidToken] refreshed assertion: ', newAssertion);\n\n                _this.identities.updateAssertion(newAssertion).then(function () {\n                  resolve(newAssertion);\n                }, function (err) {\n                  IdentityModule_log.error('[IdentityModule.getValidToken] error updating the assertion ', err);\n                  reject(err);\n                });\n              }, function (err) {\n                IdentityModule_log.error('[IdentityModule.getValidToken] error refreshing the assertion ', err);\n                reject(err);\n              });\n            } else {\n              // no refresh token available, user has to authenticate again to get a new assertion\n              // generate new idToken\n              _this.callGenerateMethods(assertion.idp.domain).then(function (value) {\n                resolve(value);\n              })[\"catch\"](function (err) {\n                reject('[IdentityModule.getValidToken] error when generating a new assertion ' + err);\n              });\n            }\n          } else {\n            resolve(assertion);\n          }\n        })[\"catch\"](function (error) {\n          IdentityModule_log.error('[IdentityModule.getValidToken] error on getIdToken', error);\n          reject(error);\n        });\n      });\n    }\n    /**\r\n    * returns the reporter associated to the dataObject URL\r\n    * @param   {String}   dataObjectURL         dataObject url\r\n    * @return   {String}  reporter              dataObject url reporter\r\n    */\n\n  }, {\n    key: \"_getHypertyFromDataObject\",\n    value: function _getHypertyFromDataObject(dataObjectURL) {\n      IdentityModule_log.info('_getHypertyFromDataObject:dataObjectURL', dataObjectURL);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var splitedURL = Object(utils[\"k\" /* divideURL */])(dataObjectURL);\n        var domain = splitedURL.domain;\n        var finalURL = Object(utils[\"z\" /* parseMessageURL */])(dataObjectURL); // check if is the creator of the hyperty\n\n        var reporterURL = _this.registry.getReporterURLSynchonous(finalURL);\n\n        IdentityModule_log.info('_getHypertyFromDataObject:reporterURL', reporterURL);\n\n        if (reporterURL) {\n          resolve(reporterURL);\n        } else {\n          // check if there is already an association from an hypertyURL to the dataObject\n          var storedReporterURL = _this.dataObjectsIdentity[finalURL];\n          IdentityModule_log.info('_getHypertyFromDataObject:storedReporterURL', storedReporterURL);\n\n          if (storedReporterURL) {\n            resolve(storedReporterURL);\n          } else {\n            // check if there is any hyperty that subscribed the dataObjectURL\n            var subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);\n\n            IdentityModule_log.info('_getHypertyFromDataObject:subscriberHyperty', subscriberHyperty);\n\n            if (subscriberHyperty) {\n              resolve(subscriberHyperty);\n            } else {\n              // search in domain registry for the hyperty associated to the dataObject\n              // search in case is a subscriber who wants to know the reporter\n              // To be reviewed in order to avoid the discovery transaction\n              _this._coreDiscovery.discoverDataObjectPerURL(finalURL, domain).then(function (dataObject) {\n                IdentityModule_log.info('_getHypertyFromDataObject:dataObject', dataObject);\n                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;\n                IdentityModule_log.info('_getHypertyFromDataObject:dataObject.reporter', dataObject.reporter);\n                resolve(dataObject.reporter);\n              }, function (err) {\n                reject(err);\n              });\n            }\n          }\n        }\n      });\n    }\n    /**\r\n    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL\r\n    * @param {String}     idpDomain     idpDomain (Optional)\r\n    */\n\n  }, {\n    key: \"_resolveDomain\",\n    value: function _resolveDomain(idpDomain) {\n      if (!idpDomain) {\n        return 'domain-idp://google.com';\n      } else {\n        return 'domain-idp://' + idpDomain;\n      }\n    }\n    /*\r\n      _secondsSinceEpoch() {\r\n        return Math.floor(Date.now() / 1000);\r\n      }*/\n\n  }, {\n    key: \"messageBus\",\n    get: function get() {\n      var _this = this;\n\n      return _this._messageBus;\n    }\n    /**\r\n    * Set the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n\n      _this._messageBus = messageBus;\n\n      _this.addGUIListeners();\n    }\n    /**\r\n    * return the coreDiscovery component\r\n    * do we need this??\r\n    */\n\n  }, {\n    key: \"coreDiscovery\",\n    get: function get() {\n      var _this = this;\n\n      return _this._coreDiscovery;\n    }\n    /**\r\n    * Set the coreDiscovery component\r\n    * @param {coreDiscovery} coreDiscovery\r\n    */\n    ,\n    set: function set(coreDiscovery) {\n      var _this = this;\n\n      _this._coreDiscovery = coreDiscovery;\n    }\n    /**\r\n    * return the registry in this idModule\r\n    * @param {registry}           registry\r\n    */\n\n  }, {\n    key: \"registry\",\n    get: function get() {\n      var _this = this;\n\n      return _this._registry;\n    }\n    /**\r\n    * Set the registry in this idModule\r\n    * @param {registry}     reg\r\n    */\n    ,\n    set: function set(registry) {\n      var _this = this;\n\n      _this._registry = registry;\n    }\n  }, {\n    key: \"identities\",\n    get: function get() {\n      var _this = this;\n\n      return _this._identities;\n    },\n    set: function set(identities) {\n      var _this = this;\n\n      _this._identities = identities;\n    }\n  }, {\n    key: \"idps\",\n    get: function get() {\n      return this._listOfIdps;\n    }\n  }]);\n\n  return IdentityModule;\n}();\n\n/* harmony default export */ var identity_IdentityModule = (IdentityModule_IdentityModule);\n// CONCATENATED MODULE: ./src/runtime/MsgBusHandlers.js\nfunction MsgBusHandlers_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction MsgBusHandlers_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction MsgBusHandlers_createClass(Constructor, protoProps, staticProps) { if (protoProps) MsgBusHandlers_defineProperties(Constructor.prototype, protoProps); if (staticProps) MsgBusHandlers_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n *  Class where message bus handlers are built. To be used by the RuntimeUA to initialise the runtime UA.\r\n */\n//import { log as logLevels } from '../logLevels';\n// Log System\n\nvar MsgBusHandlers_log = loglevel[\"getLogger\"]('RuntimeUA');\n\nvar MsgBusHandlers =\n/*#__PURE__*/\nfunction () {\n  function MsgBusHandlers(pep, idm, crypto) {\n    MsgBusHandlers_classCallCheck(this, MsgBusHandlers);\n\n    if (!pep) throw Error('[MsgBusHandlers] pep input paramenter is mandatory');\n    if (!idm) throw Error('[MsgBusHandlers] idm input paramente is mandatory');\n    if (!crypto) throw Error('[MsgBusHandlers] crypto input paramente is mandatory');\n    this.policyEngine = pep;\n    this.identityManager = idm;\n    this.cryptoManager = crypto;\n  } // Policy based access control for incoming messages\n\n\n  MsgBusHandlers_createClass(MsgBusHandlers, [{\n    key: \"pepInHandler\",\n    get: function get() {\n      var _this = this;\n\n      return function (ctx) {\n        _this.policyEngine.authorise(ctx.msg, true).then(function (changedMgs) {\n          ctx.msg = changedMgs;\n          ctx.next();\n        })[\"catch\"](function (reason) {\n          MsgBusHandlers_log.error(reason);\n          ctx.fail(reason);\n        });\n      };\n    } // Policy based access control for outgoing messages\n\n  }, {\n    key: \"pepOutHandler\",\n    get: function get() {\n      var _this = this;\n\n      return function (ctx) {\n        _this.policyEngine.authorise(ctx.msg, false).then(function (changedMgs) {\n          ctx.msg = changedMgs;\n          ctx.next();\n        })[\"catch\"](function (reason) {\n          MsgBusHandlers_log.error(reason);\n          ctx.fail(reason);\n        });\n      };\n    } // Add Identity info to messages\n\n  }, {\n    key: \"idmHandler\",\n    get: function get() {\n      var _this = this;\n\n      return function (ctx) {\n        _this.identityManager.processMessage(ctx.msg).then(function (changedMgs) {\n          ctx.msg = changedMgs;\n          ctx.next();\n        })[\"catch\"](function (reason) {\n          MsgBusHandlers_log.error(reason);\n          ctx.fail(reason);\n        });\n      };\n    } // encrypt messages\n\n  }, {\n    key: \"encryptHandler\",\n    get: function get() {\n      var _this = this;\n\n      return function (ctx) {\n        _this.cryptoManager.encryptMessage(ctx.msg).then(function (changedMgs) {\n          ctx.msg = changedMgs;\n          ctx.next();\n        })[\"catch\"](function (reason) {\n          MsgBusHandlers_log.error(reason);\n          ctx.fail(reason);\n        });\n      };\n    } // decrypt messages\n\n  }, {\n    key: \"decryptHandler\",\n    get: function get() {\n      var _this = this;\n\n      return function (ctx) {\n        _this.cryptoManager.decryptMessage(ctx.msg).then(function (changedMgs) {\n          ctx.msg = changedMgs;\n          ctx.next();\n        })[\"catch\"](function (reason) {\n          MsgBusHandlers_log.warn(reason);\n          ctx.fail(reason);\n        });\n      };\n    }\n  }]);\n\n  return MsgBusHandlers;\n}();\n\n/* harmony default export */ var runtime_MsgBusHandlers = (MsgBusHandlers);\n// CONCATENATED MODULE: ./src/identity/IdentityHandler.js\nfunction IdentityHandler_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction IdentityHandler_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction IdentityHandler_createClass(Constructor, protoProps, staticProps) { if (protoProps) IdentityHandler_defineProperties(Constructor.prototype, protoProps); if (staticProps) IdentityHandler_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Provides an API to manage identities from msg bus pipeline\r\n* TODO: rename to something like IdentityPipelineHandler in order not to conflict with framework related IdentityHandler\r\n*/\n\n\n\nvar IdentityHandler_log = loglevel[\"getLogger\"]('IdentityHandler');\n\nvar IdentityHandler_IdentityHandler =\n/*#__PURE__*/\nfunction () {\n  function IdentityHandler(idm) {\n    IdentityHandler_classCallCheck(this, IdentityHandler);\n\n    var _this = this;\n\n    _this._idm = idm;\n  }\n\n  IdentityHandler_createClass(IdentityHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      console.log('IM reset'); // this._idm.identities.reset();\n\n      this._idm.identities = new identity_Identities(this._idm.identities._type, this._idm.identities._storageManager);\n      console.log(this._idm.identities);\n    }\n  }, {\n    key: \"_isToSetID\",\n    value: function _isToSetID(message) {\n      var schemasToIgnore = ['domain-idp', 'runtime', 'domain'];\n      var _from = message.from;\n\n      if (message.body && message.body.hasOwnProperty('source')) {\n        _from = message.body.source;\n      }\n\n      if (message.body && message.body.hasOwnProperty('subscriber')) {\n        _from = message.body.subscriber;\n      }\n\n      if (message.type === 'forward') {\n        return false;\n      }\n\n      if (message.type === 'event') {\n        return false;\n      } // Signalling Messages between P2P Stubs don't have Identities. FFS\n\n\n      if (_from.includes('/p2prequester/') || _from.includes('/p2phandler/')) {\n        return false;\n      }\n\n      var splitFrom = _from.split('://');\n\n      var fromSchema = splitFrom[0];\n      var isToIgnore = schemasToIgnore.indexOf(fromSchema) === -1;\n      return isToIgnore;\n    }\n  }, {\n    key: \"processMessage\",\n    value: function processMessage(message) {\n      var _this2 = this;\n\n      IdentityHandler_log.log('[IdentityHandler.processMessage] ', message);\n      return new Promise(function (resolve, reject) {\n        // skip messages that don't need identity tokens in the body\n        if (!_this2._isToSetID(message)) return resolve(message);\n\n        if (message.body && message.body.value && message.body.value.anonymous) {\n          if (message.body.identity && message.body.identity.guid) message.body.identity = {\n            userProfile: {\n              guid: message.body.identity.guid\n            }\n          };else message.body.identity = {\n            userProfile: {\n              guid: 'anonymous'\n            }\n          };\n          return resolve(message);\n        }\n        /*      let from = message.from;\r\n        let sourceURL = undefined;\r\n        if ( message.hasOwnProperty('body') && message.body.hasOwnProperty('source')) {\r\n          from = message.body.source;\r\n        }\r\n          if (message.type === 'forward') {\r\n          from = message.body.from;\r\n        }\r\n          if (message.hasOwnProperty('body') && message.body.hasOwnProperty('subscriber')) {\r\n          from = message.body.subscriber;\r\n        }*/\n\n\n        _this2._idm.getToken(message).then(function (identity) {\n          if (!message.hasOwnProperty('body')) message.body = {};\n          message.body.identity = identity;\n          resolve(message);\n        })[\"catch\"](function (reason) {\n          IdentityHandler_log.error(reason);\n          reject(reason);\n        });\n      });\n    }\n  }]);\n\n  return IdentityHandler;\n}();\n\n/* harmony default export */ var identity_IdentityHandler = (IdentityHandler_IdentityHandler);\n// EXTERNAL MODULE: ./src/policy/PEP.js + 8 modules\nvar PEP = __webpack_require__(33);\n\n// EXTERNAL MODULE: ./src/bus/Bus.js\nvar Bus = __webpack_require__(10);\n\n// CONCATENATED MODULE: ./src/bus/Pipeline.js\nfunction Pipeline_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Pipeline_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Pipeline_createClass(Constructor, protoProps, staticProps) { if (protoProps) Pipeline_defineProperties(Constructor.prototype, protoProps); if (staticProps) Pipeline_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\nvar Pipeline_log = loglevel[\"getLogger\"]('Pipeline');\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.\r\n* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.\r\n*/\n\n\n\nvar Pipeline =\n/*#__PURE__*/\nfunction () {\n  /* public\r\n    handlers: ((PipeContext) => void)[]\r\n    onFail: (error) => void\r\n  */\n  function Pipeline(_onFail) {\n    Pipeline_classCallCheck(this, Pipeline);\n\n    var _this = this;\n\n    _this.handlers = [];\n    _this.onFail = _onFail;\n  }\n  /**\r\n   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.\r\n   * @param  {Message} msg       Message for the queue\r\n   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.\r\n   */\n\n\n  Pipeline_createClass(Pipeline, [{\n    key: \"process\",\n    value: function process(msg, onDeliver) {\n      var _this = this;\n\n      if (_this.handlers.length > 0) {\n        var iter = new Iterator(_this.handlers);\n        iter.next(new PipeContext(_this, iter, msg, onDeliver));\n      } else {\n        onDeliver(msg);\n      }\n    }\n  }]);\n\n  return Pipeline;\n}();\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Wrapper around a message that adds actions that can be fired by any interceptor handler.\r\n* The Pipeline is asynchronous, so an handler should always call an action, the default one is \"next()\"\r\n*/\n\n\nvar PipeContext =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n    _inStop: boolean\r\n      _pipeline: Pipeline\r\n    _iter: Iterator\r\n    _msg: Message\r\n  */\n  function PipeContext(pipeline, iter, msg, onDeliver) {\n    Pipeline_classCallCheck(this, PipeContext);\n\n    var _this = this;\n\n    _this._inStop = false;\n    _this._pipeline = pipeline;\n    _this._iter = iter;\n    _this._msg = msg;\n    _this._onDeliver = onDeliver;\n  }\n\n  Pipeline_createClass(PipeContext, [{\n    key: \"next\",\n\n    /**\r\n     * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.\r\n     */\n    value: function next() {\n      var _this = this;\n\n      if (!_this._inStop) {\n        if (_this._iter.hasNext) {\n          _this._iter.next(_this);\n        } else {\n          _this._onDeliver(_this._msg);\n        }\n      }\n    }\n    /**\r\n     * Proceed directly to the onDeliver handler, unless there was an error.\r\n     */\n\n  }, {\n    key: \"deliver\",\n    value: function deliver() {\n      var _this = this;\n\n      if (!_this._inStop) {\n        _this._inStop = true;\n\n        _this._onDeliver(_this._msg);\n      }\n    }\n    /**\r\n     * Mark the context with an error and proceed to the onFail handler.\r\n     * @param  {[type]} error [description]\r\n     */\n\n  }, {\n    key: \"fail\",\n    value: function fail(error) {\n      var _this = this;\n\n      if (!_this._inStop) {\n        _this._inStop = true;\n\n        if (_this._pipeline.onFail) {\n          _this._pipeline.onFail(error);\n        }\n      }\n    }\n  }, {\n    key: \"pipeline\",\n    get: function get() {\n      return this._pipeline;\n    }\n  }, {\n    key: \"msg\",\n    get: function get() {\n      return this._msg;\n    },\n    set: function set(inMsg) {\n      this._msg = inMsg;\n    }\n  }]);\n\n  return PipeContext;\n}();\n\nvar Iterator =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n    _index: number\r\n    _array: []\r\n  */\n  function Iterator(array) {\n    Pipeline_classCallCheck(this, Iterator);\n\n    this._index = -1;\n    this._array = array;\n  }\n\n  Pipeline_createClass(Iterator, [{\n    key: \"hasNext\",\n    get: function get() {\n      return this._index < this._array.length - 1;\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      this._index++;\n      return this._array[this._index];\n    }\n  }]);\n\n  return Iterator;\n}();\n\n/* harmony default export */ var bus_Pipeline = (Pipeline);\n// CONCATENATED MODULE: ./src/bus/MessageBus.js\nfunction MessageBus_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { MessageBus_typeof = function _typeof(obj) { return typeof obj; }; } else { MessageBus_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return MessageBus_typeof(obj); }\n\nfunction MessageBus_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction MessageBus_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction MessageBus_createClass(Constructor, protoProps, staticProps) { if (protoProps) MessageBus_defineProperties(Constructor.prototype, protoProps); if (staticProps) MessageBus_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction MessageBus_possibleConstructorReturn(self, call) { if (call && (MessageBus_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return MessageBus_assertThisInitialized(self); }\n\nfunction MessageBus_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction MessageBus_getPrototypeOf(o) { MessageBus_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return MessageBus_getPrototypeOf(o); }\n\nfunction MessageBus_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) MessageBus_setPrototypeOf(subClass, superClass); }\n\nfunction MessageBus_setPrototypeOf(o, p) { MessageBus_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return MessageBus_setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log system\n\nvar MessageBus_log = loglevel[\"getLogger\"]('MessageBus');\n\n\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Message BUS Interface is an extension of the Bus\r\n* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)\r\n*/\n\nvar MessageBus_MessageBus =\n/*#__PURE__*/\nfunction (_Bus) {\n  MessageBus_inherits(MessageBus, _Bus);\n\n  /* private\r\n  _registry: Registry\r\n  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }\r\n    _pipeline: Pipeline\r\n  */\n  //TODO: future optimization\n  //1. message batch processing with setInterval\n  //2. resolve default gateway/protostub with register.resolve\n  function MessageBus(registry, runtimeUrl) {\n    var _this2;\n\n    MessageBus_classCallCheck(this, MessageBus);\n\n    _this2 = MessageBus_possibleConstructorReturn(this, MessageBus_getPrototypeOf(MessageBus).call(this));\n    _this2._registry = registry;\n    _this2._forwards = {};\n    _this2._runtimeUrl = runtimeUrl;\n    _this2._pipelineIn = new bus_Pipeline(function (error) {\n      MessageBus_log.error('PIPELINE-ERROR: ', JSON.stringify(error));\n    });\n    _this2._pipelineOut = new bus_Pipeline(function (error) {\n      MessageBus_log.error('PIPELINE-ERROR: ', JSON.stringify(error));\n    });\n    return _this2;\n  }\n\n  MessageBus_createClass(MessageBus, [{\n    key: \"postMessage\",\n\n    /**\r\n     * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.\r\n     * External routing use the registry.resolve(..) method to decide the destination sandbox.\r\n     * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\r\n     * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\r\n     * @return {number}                  the Message id\r\n     */\n    value: function postMessage(inMsg, responseCallback, timeout) {\n      MessageBus_log.info('onPOSTMessage: ', inMsg);\n\n      var _this = this;\n\n      var deliver = function deliver(msg) {\n        _this._responseCallback(inMsg, responseCallback, timeout);\n\n        if (!_this._onResponse(msg)) {\n          var itemList = _this._subscriptions[msg.to];\n\n          if (itemList) {\n            //do not publish on default address, because of loopback cycle\n            _this._publishOn(itemList, msg);\n          } else if (!msg.to.includes(_this._runtimeUrl)) {\n            //if there is no listener, send to external interface\n            _this._onPostMessage(msg);\n          }\n        }\n      };\n\n      _this._genId(inMsg);\n\n      if (_this._isToProcess(inMsg)) {\n        var isIncoming = _this._isIncomingMessage(inMsg);\n\n        if (isIncoming) _this._pipelineIn.process(inMsg, deliver);else _this._pipelineOut.process(inMsg, deliver);\n      } else deliver(inMsg);\n\n      return inMsg.id;\n    }\n  }, {\n    key: \"_isToProcess\",\n    value: function _isToProcess(message) {\n      var schemasToIgnore = ['domain', 'domain-idp', 'global', 'hyperty-runtime', 'runtime'];\n      var splitFrom = message.from.split('://');\n      var fromSchema = splitFrom[0];\n      var splitTo = message.to.split('://');\n      var toSchema = splitTo[0];\n      var from = message.from;\n      var to = message.to; // Signalling messages between P2P Stubs don't have to be verified. FFS\n\n      if (message.body && message.body.source) {\n        from = message.body.source;\n      }\n\n      if (message.body && message.body.subscriber) {\n        from = message.body.subscriber;\n      }\n\n      if (from.indexOf('/p2phandler/') !== -1 || from.indexOf('/p2prequester/') !== -1 || to.indexOf('/p2phandler/') !== -1 || to.indexOf('/p2prequester/') !== -1) {\n        return false;\n      }\n\n      if (this._registry.isLocal(from) && this._registry.isLocal(message.to)) return false;\n\n      if (message.from === fromSchema || message.to === toSchema || message.type === 'read' || message.type === 'response' || message.from.includes('hyperty://') && message.type === 'delete') {\n        return false;\n      } else {\n        return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;\n      }\n    }\n  }, {\n    key: \"_isIncomingMessage\",\n    value: function _isIncomingMessage(message) {\n      var from;\n\n      if (message.type === 'forward') {\n        MessageBus_log.info('[MessageBus - isIncomingMessage] - message.type: ', message.type);\n        from = message.body.from;\n      } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('source') && message.body.source) {\n        MessageBus_log.info('[MessageBus - isIncomingMessage] - message.body.source: ', message.body.source);\n        from = message.body.source;\n      } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('subscriber') && message.body.subscriber) {\n        //TODO: this subscriber validation should not exist, because is outdated\n        //TODO: the syncher and syncher manager not following the correct spec;\n        MessageBus_log.info('[MessageBus - isIncomingMessage] - message.body.subscriber: ', message.body.subscriber);\n        from = message.body.subscriber;\n      } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('reporter') && message.body.reporter) {\n        //TODO: this subscriber validation should not exist, because is outdated\n        //TODO: the syncher and syncher manager not following the correct spec;\n        MessageBus_log.info('[MessageBus - isIncomingMessage] - message.body.reporter: ', message.body.reporter);\n        from = message.body.reporter;\n      } else {\n        MessageBus_log.info('[MessageBus - isIncomingMessage] - message.from ', message.from);\n        from = message.from;\n      }\n\n      MessageBus_log.info('[MessageBus - isIncomingMessage] - check if isLocal: ', from);\n      return !this._registry.isLocal(from);\n    }\n    /**\r\n     * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.\r\n     * This means, even if there is a listener for the address, it will also send the message to the external routing.\r\n     * @param {URL} from Publish address.\r\n     */\n\n  }, {\n    key: \"addPublish\",\n    value: function addPublish(from) {\n      var _this3 = this;\n\n      var _this = this; //verify if forward exist\n\n\n      var refCount = _this._forwards[from];\n\n      if (!refCount) {\n        var forwardListener = _this.addListener(from, function (msg) {\n          MessageBus_log.info('MB-PUBLISH: ( ' + from + ' )'); // hack to skip external routes for messages coming from external hosts \n          // and messages targeting internal core runtime components\n\n          if (!(msg.body && msg.body.source && msg.body.source.includes('/protostub/')) && !msg.to.includes(_this._runtimeUrl)) _this._onPostMessage(msg);\n        });\n\n        refCount = {\n          counter: 0,\n          fl: forwardListener,\n          remove: function remove() {\n            _this3.counter--;\n\n            if (_this3.counter === 0) {\n              _this3.fl.remove();\n\n              delete _this._forwards[from];\n            }\n          }\n        };\n        _this._forwards[from] = refCount;\n      }\n\n      refCount.counter++;\n      return refCount;\n    }\n    /**\r\n     * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.\r\n     * @param {URL} from Message destination, it's actually the field \"to\" of the message.\r\n     * @param {URL} to   Forward address.\r\n     */\n\n  }, {\n    key: \"addForward\",\n    value: function addForward(from, to) {\n      var _this = this;\n\n      return _this.addListener(from, function (msg) {\n        MessageBus_log.info('MB-FORWARD: ( ' + from + ' to ' + to + ' )');\n\n        _this.forward(to, msg);\n      });\n    }\n    /**\r\n     * Just forward's a message to the forward address. Listeners should be available for the forward address.\r\n     * @param  {URL} url Forward address.\r\n     * @param  {Message} msg Message to forward\r\n     */\n\n  }, {\n    key: \"forward\",\n    value: function forward(url, msg) {\n      var _this = this;\n\n      var itemList = _this._subscriptions[url];\n\n      if (itemList) {\n        _this._publishOn(itemList, msg);\n      }\n    } //default route, if there are no listeners available for a message destination.\n\n  }, {\n    key: \"_onPostMessage\",\n    value: function _onPostMessage(msg) {\n      var _this = this; //resolve external protostub...\n\n\n      _this._registry.resolve(msg).then(function (route, msg2route) {\n        if (msg2route) _this.forward(route, msg2route);else _this.forward(route, msg);\n      })[\"catch\"](function (e) {\n        MessageBus_log.error('RESOLVE-ERROR: ', e);\n      });\n    }\n  }, {\n    key: \"pipelineIn\",\n    get: function get() {\n      return this._pipelineIn;\n    }\n  }, {\n    key: \"pipelineOut\",\n    get: function get() {\n      return this._pipelineOut;\n    }\n  }]);\n\n  return MessageBus;\n}(Bus[\"a\" /* default */]);\n\n/* harmony default export */ var bus_MessageBus = (MessageBus_MessageBus);\n// CONCATENATED MODULE: ./src/cryptoManager/utf8.js\n// Marshals a string to Uint8Array.\nfunction encodeUTF8(s) {\n  var i = 0;\n  var bytes = new Uint8Array(s.length * 4);\n\n  for (var ci = 0; ci != s.length; ci++) {\n    try {\n      var xxx = s.charCodeAt(ci);\n    } catch (err) {\n      console.log(err.message);\n      return;\n    }\n\n    var c = s.charCodeAt(ci);\n\n    if (c < 128) {\n      bytes[i++] = c;\n      continue;\n    }\n\n    if (c < 2048) {\n      bytes[i++] = c >> 6 | 192;\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) throw 'UTF-8 encode: incomplete surrogate pair';\n        var c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) throw 'UTF-8 encode: second char code 0x' + c2.toString(16) + ' at index ' + ci + ' in surrogate pair out of range';\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes[i++] = c >> 18 | 240;\n        bytes[i++] = c >> 12 & 63 | 128;\n      } else {\n        // c <= 0xffff\n        bytes[i++] = c >> 12 | 224;\n      }\n\n      bytes[i++] = c >> 6 & 63 | 128;\n    }\n\n    bytes[i++] = c & 63 | 128;\n  }\n\n  return bytes.subarray(0, i);\n} // Unmarshals an Uint8Array to string.\n\nfunction decodeUTF8(bytes) {\n  var s = '';\n  var i = 0;\n\n  while (i < bytes.length) {\n    var c = bytes[i++];\n\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= bytes.length) throw 'UTF-8 decode: incomplete 2-byte sequence';\n        c = (c & 31) << 6 | bytes[i] & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= bytes.length) throw 'UTF-8 decode: incomplete 3-byte sequence';\n        c = (c & 15) << 12 | (bytes[i] & 63) << 6 | bytes[++i] & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= bytes.length) throw 'UTF-8 decode: incomplete 4-byte sequence';\n        c = (c & 7) << 18 | (bytes[i] & 63) << 12 | (bytes[++i] & 63) << 6 | bytes[++i] & 63;\n      } else throw 'UTF-8 decode: unknown multibyte start 0x' + c.toString(16) + ' at index ' + (i - 1);\n\n      ++i;\n    }\n\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3FF | 0xdc00);\n    } else throw 'UTF-8 decode: code point 0x' + c.toString(16) + ' exceeds UTF-16 reach';\n  }\n\n  return s;\n}\n// CONCATENATED MODULE: ./src/cryptoManager/Crypto.js\nfunction Crypto_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Crypto_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Crypto_createClass(Constructor, protoProps, staticProps) { if (protoProps) Crypto_defineProperties(Constructor.prototype, protoProps); if (staticProps) Crypto_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Crypto_log = loglevel[\"getLogger\"]('CryptoManager');\n/**\r\n* Class with the cryptographic functions for the authentication protocol\r\n*\r\n*/\n\nvar Crypto_Crypto =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * Runtimefactory is passed in the costructor, because the nodeJS has a different crypto module\r\n  * from the browser. RuntimeFactory provides a wrapper for the fuctions of nodeJS, so they can be\r\n  * invoked browser like.\r\n  */\n  function Crypto(runtimeFactory) {\n    Crypto_classCallCheck(this, Crypto);\n\n    var _this = this;\n\n    typeof runtimeFactory.createWebcrypto === 'function' ? _this._crypto = runtimeFactory.createWebcrypto() : _this._crypto = crypto;\n  }\n  /**\r\n  * Performs a RSA encryption\r\n  * @param   {ArrayBuffer}    value    the public key\r\n  * @param   {BufferSource}    value    data to be encryped\r\n  * @return  {Uint8Array}   encrypted data\r\n  */\n\n\n  Crypto_createClass(Crypto, [{\n    key: \"encryptRSA\",\n    value: function encryptRSA(pubKey, data) {\n      Crypto_log.log('encryptRSA:pubKey', pubKey);\n      Crypto_log.log('encryptRSA:data', data);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function (publicKey) {\n          _this._crypto.subtle.encrypt({\n            name: 'RSA-OAEP'\n          }, publicKey, //from generateKey or importKey above\n          data //ArrayBuffer of data you want to encrypt\n          ).then(function (encrypted) {\n            //returns an ArrayBuffer containing the encrypted data\n            // log.log('crypto-encryptRSA', new Uint8Array(encrypted));\n            resolve(new Uint8Array(encrypted));\n          })[\"catch\"](function (err) {\n            // log.log('crypto-encryptRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * Performs a RSA decryption\r\n    * @param   {ArrayBuffer}    value    the private key\r\n    * @param   {BufferSource}    value    data to be decrypted\r\n    * @return  {Uint8Array}   decrypted data\r\n    */\n\n  }, {\n    key: \"decryptRSA\",\n    value: function decryptRSA(privKey, data) {\n      Crypto_log.log('decryptRSA:privKey', privKey);\n      Crypto_log.log('decryptRSA:data', data);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._importRSAdecryptKey(privKey).then(function (privateKey) {\n          _this._crypto.subtle.decrypt({\n            name: 'RSA-OAEP'\n          }, privateKey, //from generateKey or importKey above\n          data //ArrayBuffer of the data\n          ).then(function (decrypted) {\n            var decryptedData = new Uint8Array(decrypted); // log.log('crypto-decryptRSA', decryptedData);\n\n            resolve(decryptedData);\n          })[\"catch\"](function (err) {\n            // log.log('crypto-decryptRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * Performs a RSA sign\r\n    * @param   {ArrayBuffer}    value    the private key\r\n    * @param   {BufferSource}    value    data to be signed\r\n    * @return  {Uint8Array}   data signature\r\n    */\n\n  }, {\n    key: \"signRSA\",\n    value: function signRSA(privKey, data) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._importRSAsignKey(privKey).then(function (privateKey) {\n          _this._crypto.subtle.sign({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, privateKey, //from generateKey or importKey above\n          encodeUTF8(data) //ArrayBuffer of data you want to sign\n          ).then(function (signature) {\n            //returns an ArrayBuffer containing the signature\n            // log.log('crypto-signRSA', new Uint8Array(signature));\n            resolve(new Uint8Array(signature));\n          })[\"catch\"](function (err) {\n            // log.log('crypto-signRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * Performs a RSA signature verification\r\n    * @param   {ArrayBuffer}    value    the public key\r\n    * @param   {BufferSource}    value    data to be verified\r\n    * @return  {Boolean}   result of the signature verification\r\n    */\n\n  }, {\n    key: \"verifyRSA\",\n    value: function verifyRSA(pubKey, data, signature) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._importRSAverifyKey(pubKey).then(function (publicKey) {\n          _this._crypto.subtle.verify({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, publicKey, //from generateKey or importKey above\n          signature, //ArrayBuffer of the signature\n          encodeUTF8(data) //ArrayBuffer of the data\n          ).then(function (isvalid) {\n            //returns a boolean on whether the signature is true or not\n            // log.log('crypto-verifyRSA', isvalid);\n            resolve(isvalid);\n          })[\"catch\"](function (err) {\n            // log.log('crypto-verifyRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * Performs a RSA signature verification\r\n    * @param   {ArrayBuffer}    value    the public key\r\n    * @param   {BufferSource}    value    data to be verified\r\n    * @return  {Boolean}   result of the signature verification\r\n    */\n\n  }, {\n    key: \"encryptAES\",\n    value: function encryptAES(key, data, iv) {\n      Crypto_log.log('encryptAES:key', key);\n      Crypto_log.log('encryptAES:data', data);\n      Crypto_log.log('encryptAES:iv', iv);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._importAESkey(key).then(function (aesKey) {\n          _this._crypto.subtle.encrypt({\n            name: 'AES-CBC',\n            //Don't re-use initialization vectors!\n            //Always generate a new iv every time your encrypt!\n            iv: iv\n          }, aesKey, //from generateKey or importKey above\n          encodeUTF8(data) //ArrayBuffer of data you want to encrypt\n          ).then(function (encrypted) {\n            //returns an ArrayBuffer containing the encrypted data\n            // log.log('crypto-encryptAES', new Uint8Array(encrypted));\n            resolve(new Uint8Array(encrypted));\n          })[\"catch\"](function (err) {\n            // log.log('crypto-encryptAES', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"decryptAES\",\n    value: function decryptAES(key, data, iv) {\n      Crypto_log.log('decryptAES:key', key);\n      Crypto_log.log('decryptAES:data', data);\n      Crypto_log.log('decryptAES:iv', iv);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._importAESkey(key).then(function (aesKey) {\n          _this._crypto.subtle.decrypt({\n            name: 'AES-CBC',\n            iv: iv\n          }, aesKey, //from generateKey or importKey above\n          data //ArrayBuffer of the data\n          ).then(function (decrypted) {\n            var decodedData = decodeUTF8(new Uint8Array(decrypted));\n            Crypto_log.log('crypto-decryptAES', decodedData);\n            resolve(decodedData);\n          })[\"catch\"](function (err) {\n            // log.log('crypto-decryptAES', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * creates a hash using the HMAC algorithm\r\n    * @param  {byteArray}    key       key to be used in the hmac\r\n    * @param  {string}      data       information to be hashed\r\n    * @return  {byteArray}   signature  resulting hash\r\n    */\n\n  }, {\n    key: \"hashHMAC\",\n    value: function hashHMAC(key, data) {\n      Crypto_log.log('hashHMAC:key', key);\n      Crypto_log.log('hashHMAC:data', data);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof data != 'string') {\n          data = JSON.stringify(data);\n          Crypto_log.log('Converting hashHMAC inpured DATA');\n          Crypto_log.log('HHashHMAC:', data);\n        }\n\n        _this._importHMACkey(key).then(function (hmacKey) {\n          _this._crypto.subtle.sign({\n            name: 'HMAC'\n          }, hmacKey, //from generateKey or importKey above\n          encodeUTF8(data) //ArrayBuffer of data you want to sign\n          ).then(function (signature) {\n            Crypto_log.log('HashHMAC signature:', new Uint8Array(signature)); // log.log('crypto-hashHMAC', signature);\n            //returns an ArrayBuffer containing the signature\n\n            resolve(new Uint8Array(signature));\n          })[\"catch\"](function (err) {\n            // log.log('crypto-hashHMAC', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * verifies an hash using the HMAC algorithm\r\n    * @param  {byteArray}    key       key to be used in the hmac\r\n    * @param  {string}      data       information to be hashed to compare\r\n    * @param  {byteArray}  signature   hash to compare with the received data\r\n    * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received\r\n    */\n\n  }, {\n    key: \"verifyHMAC\",\n    value: function verifyHMAC(key, data, signature) {\n      Crypto_log.log('verifyHMAC:key', key);\n      Crypto_log.log('verifyHMAC:data', data);\n      Crypto_log.log('verifyHMAC:signature', signature);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._importHMACkey(key).then(function (hmacKey) {\n          if (typeof data != 'string') {\n            data = JSON.stringify(data);\n            Crypto_log.log('Converting verifyHMAC inputed DATA:', data);\n          }\n\n          _this._crypto.subtle.verify({\n            name: 'HMAC'\n          }, hmacKey, //from generateKey or importKey above\n          signature, //ArrayBuffer of the signature\n          encodeUTF8(data) //ArrayBuffer of the data\n          ).then(function (isvalid) {\n            //returns a boolean on whether the signature is true or not\n            // log.log('crypto-verifyHMAC', isvalid);\n            Crypto_log.log('verifyHMAC result', isvalid);\n            isvalid ? resolve(isvalid) : reject(isvalid);\n          })[\"catch\"](function (err) {\n            Crypto_log.error('crypto-verifyHMAC', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * generates a RSA public/private key pair with a modulus length of 2048 bits\r\n    * @return  {JSON}   keyPair    json containing the public and private keys\r\n    */\n\n  }, {\n    key: \"generateRSAKeyPair\",\n    value: function generateRSAKeyPair() {\n      var _this = this;\n\n      var keyPair = {};\n      return new Promise(function (resolve, reject) {\n        _this._crypto.subtle.generateKey({\n          name: 'RSA-PSS',\n          modulusLength: 2048,\n          //can be 1024, 2048, or 4096\n          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n          hash: {\n            name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n\n          }\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\n        ).then(function (key) {\n          //returns a keypair object\n          // log.log(key);\n          _this._crypto.subtle.exportKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n          key.publicKey //can be a publicKey or privateKey, as long as extractable was true\n          ).then(function (publicKey) {\n            //returns the exported key data\n            keyPair[\"public\"] = new Uint8Array(publicKey);\n            return _this._crypto.subtle.exportKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n            key.privateKey //can be a publicKey or privateKey, as long as extractable was true\n            );\n          }).then(function (privateKey) {\n            keyPair[\"private\"] = new Uint8Array(privateKey); // log.log('crypto-generateRSAKeyPair', keyPair);\n\n            resolve(keyPair);\n          })[\"catch\"](function (err) {\n            Crypto_log.error(err);\n            reject(err);\n          });\n        })[\"catch\"](function (err) {\n          Crypto_log.error(err);\n          reject(err);\n        });\n      });\n    }\n    /**\r\n    * Generates a 128 bit random value.\r\n    * @return {byteArray}  array    random value\r\n    */\n\n  }, {\n    key: \"generateIV\",\n    value: function generateIV() {\n      var _this = this;\n\n      var array = new Uint8Array(16);\n\n      _this._crypto.getRandomValues(array);\n\n      return array;\n    }\n    /**\r\n    * Generates a 256 bit random value. 32 bits are extrated from the machine time,\r\n    * the remaining are generated randomly\r\n    * @return {byteArray}  array    random value\r\n    */\n\n  }, {\n    key: \"generateRandom\",\n    value: function generateRandom() {\n      var _this = this;\n\n      var array = new Uint8Array(32);\n\n      _this._crypto.getRandomValues(array);\n\n      var date = Date.now();\n      var dateEncoded = encodeUTF8(date.toString()); //extract the least significant 4 bytes in the date\n\n      var finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length); // add in the first 4 bytes of the array the bytes extracted previously;\n\n      for (var i = 0; i < 4; i++) {\n        array[i] = finalDate[i];\n      }\n\n      return array;\n    }\n    /**\r\n    * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly\r\n    * @return {byteArray}  array    premaster secret key\r\n    */\n\n  }, {\n    key: \"generatePMS\",\n    value: function generatePMS() {\n      var _this = this;\n\n      var array = new Uint8Array(48);\n\n      _this._crypto.getRandomValues(array);\n\n      return array;\n    }\n    /**\r\n    * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and\r\n    * two randoms\r\n    * @return {byteArray}  array    master secret key with 48 bytes\r\n    */\n\n  }, {\n    key: \"generateMasterSecret\",\n    value: function generateMasterSecret(hmacKey, data) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var key = new Uint8Array(48);\n        var seed = data;\n\n        _this._digest(hmacKey).then(function (digestedKey) {\n          _this.hashHMAC(digestedKey, seed).then(function (keypart0) {\n            //copy the first 32 bytes into the key\n            for (var i = 0; i < 32; i++) {\n              key[i] = keypart0[i];\n            }\n\n            return _this.hashHMAC(digestedKey, seed + keypart0);\n          }).then(function (keypart1) {\n            //copy the first 16 bytes to the key remaining 16 bytes\n            for (var i = 0; i < 16; i++) {\n              key[i + 32] = keypart1[i];\n            } // log.log('crypto-generateMasterSecret', key);\n\n\n            resolve(key);\n          })[\"catch\"](function (err) {\n            // log.log('crypto-generateMasterSecret', err);\n            reject(err);\n          });\n        });\n      });\n    }\n    /**\r\n    * generates both users MAC and encryption keys. generate as output an array\r\n    * with 4 byteArray each with 32 bytes\r\n    * @param  {byteArray}        secret       secret to be used in the HMAC function\r\n    * @param  {String}           data         information to be used as seed\r\n    * @return {Array<byteArray>} key          array with the information to generate keys\r\n    */\n\n  }, {\n    key: \"generateKeys\",\n    value: function generateKeys(hmacKey, data) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var key = [];\n        var seed = data; // iterate 4 times to obtain a 1024 key size\n\n        _this.hashHMAC(hmacKey, seed).then(function (keypart0) {\n          key.push(keypart0);\n          return _this.hashHMAC(hmacKey, seed + keypart0);\n        }).then(function (keypart1) {\n          key.push(keypart1);\n          return _this.hashHMAC(hmacKey, seed + keypart1);\n        }).then(function (keypart2) {\n          key.push(keypart2);\n          return _this.hashHMAC(hmacKey, seed + keypart2);\n        }).then(function (keypart3) {\n          key.push(keypart3); // log.log('crypto-generateKeys', key);\n\n          resolve(key);\n        })[\"catch\"](function (err) {\n          // log.log('crypto-generateKeys', err);\n          reject(err);\n        }); // log.log(hmacKey, data);\n\n      });\n    }\n  }, {\n    key: \"_importRSAsignKey\",\n    value: function _importRSAsignKey(privKey) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        privKey, {\n          //these are the algorithm options\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: {\n            name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n\n          }\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['sign'] //'verify' for public key import, 'sign' for private key imports\n        ).then(function (privateKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // log.log('crypto-_importRSAsignKey', privateKey);\n          resolve(privateKey);\n        })[\"catch\"](function (err) {\n          Crypto_log.error('crypto-_importRSAsignKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_importRSAverifyKey\",\n    value: function _importRSAverifyKey(pubKey) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        pubKey, {\n          //these are the algorithm options\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: {\n            name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n\n          }\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['verify'] //'verify' for public key import, 'sign' for private key imports\n        ).then(function (publicKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // log.log('crypto-_importRSAverifyKey', publicKey);\n          resolve(publicKey);\n        })[\"catch\"](function (err) {\n          Crypto_log.error('crypto-_importRSAverifyKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_importRSAencryptKey\",\n    value: function _importRSAencryptKey(pubKey) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        pubKey, {\n          //these are the algorithm options\n          name: 'RSA-OAEP',\n          hash: {\n            name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n\n          }\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or\n        //'decrypt' or 'unwrapKey' for private key imports\n        ).then(function (publicKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // log.log('crypto-_importRSAencryptKey', publicKey);\n          resolve(publicKey);\n        })[\"catch\"](function (err) {\n          Crypto_log.error('crypto-_importRSAencryptKey', err.name);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_importRSAdecryptKey\",\n    value: function _importRSAdecryptKey(privKey) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        privKey, {\n          //these are the algorithm options\n          name: 'RSA-OAEP',\n          hash: {\n            name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n\n          }\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or\n        //'decrypt' or 'unwrapKey' for private key imports\n        ).then(function (privateKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // log.log('crypto-_importRSAdecryptKey', privateKey);\n          resolve(privateKey);\n        })[\"catch\"](function (err) {\n          Crypto_log.error('crypto-_importRSAdecryptKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"concatPMSwithRandoms\",\n    value: function concatPMSwithRandoms(pms, toRandom, fromRandom) {\n      var finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length); // add PremasterKey\n\n      for (var i = 0; i < pms.length; i++) {\n        finalKey[i] = pms[i];\n      } //add to random\n\n\n      for (var _i = 0; _i < toRandom.length; _i++) {\n        finalKey[_i + pms.length] = pms[_i];\n      } //add from random\n\n\n      for (var _i2 = 0; _i2 < fromRandom.length; _i2++) {\n        finalKey[_i2 + pms.length + toRandom.length] = pms[_i2];\n      }\n\n      return finalKey;\n    }\n  }, {\n    key: \"_generate256bitKey\",\n    value: function _generate256bitKey() {\n      var _this = this;\n\n      var array = new Uint8Array(32);\n\n      _this._crypto.getRandomValues(array);\n\n      return array;\n    }\n    /**\r\n    * imports the secret to the HMAC function\r\n    * @param  {byteArray}   arrayBuffer     bytes to import as key\r\n    * @return {JSON}       key              key ready to be used in the HMAC cryptographic function\r\n    */\n\n  }, {\n    key: \"_importHMACkey\",\n    value: function _importHMACkey(arrayBuffer) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._digest(arrayBuffer).then(function (key) {\n          _this._crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'\n          key, {\n            //this is the algorithm options\n            name: 'HMAC',\n            hash: {\n              name: 'SHA-256'\n            },\n            //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n            length: 256 //optional, if you want your key length to differ from the hash function's block length\n\n          }, true, //whether the key is extractable (i.e. can be used in exportKey)\n          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\n          ).then(function (key) {\n            //returns the symmetric key\n            // log.log('crypto-_importHMACkey', key);\n            resolve(key);\n          })[\"catch\"](function (err) {\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_digest\",\n    value: function _digest(value) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._crypto.subtle.digest({\n          name: 'SHA-256'\n        }, value //The data you want to hash as an ArrayBuffer\n        ).then(function (hash) {\n          //returns the hash as an ArrayBuffer\n          // log.log('crypto-digest', new Uint8Array(hash));\n          resolve(new Uint8Array(hash));\n        })[\"catch\"](function (err) {\n          Crypto_log.error(err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_importAESkey\",\n    value: function _importAESkey(arrayBuffer) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'\n        arrayBuffer, {\n          //this is the algorithm options\n          name: 'AES-CBC'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'\n        ).then(function (key) {\n          //returns the symmetric key\n          // log.log('crypto-importAESkey', key);\n          resolve(key);\n        })[\"catch\"](function (err) {\n          Crypto_log.error('crypto-importAESkey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_sha256\",\n    value: function _sha256(str) {\n      var _this = this;\n\n      var buffer = new TextEncoder('utf-8').encode(str);\n      return _this._crypto.subtle.digest('SHA-256', buffer).then(function (hash) {\n        return _this._hex(hash);\n      });\n    }\n  }, {\n    key: \"_hex\",\n    value: function _hex(buffer) {\n      var hexCodes = [];\n      var view = new DataView(buffer);\n\n      for (var i = 0; i < view.byteLength; i += 4) {\n        // Using getUint32 reduces the number of iterations needed (we process 4 bytes each time)\n        var value = view.getUint32(i);\n        var stringValue = value.toString(16);\n        var padding = '00000000';\n        var paddedValue = (padding + stringValue).slice(-padding.length);\n        hexCodes.push(paddedValue);\n      } // Join all the hex strings into one\n\n\n      return hexCodes.join('');\n    }\n  }]);\n\n  return Crypto;\n}();\n\n/* harmony default export */ var cryptoManager_Crypto = (Crypto_Crypto);\n// CONCATENATED MODULE: ./src/cryptoManager/CryptoManager.js\nfunction CryptoManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction CryptoManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction CryptoManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) CryptoManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) CryptoManager_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar CryptoManager_log = loglevel[\"getLogger\"]('CryptoManager');\n\n\n/**\r\n*  The Crypto Manager provides manages cryptographic features for the runtime including:\r\n*  - Mutual Authentication between peers\r\n*  - Crypto Keys\r\n*  - e2e encryption and decription of communication between Hyperties and dta objects\r\n*\r\n*/\n\nvar CryptoManager_CryptoManager =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * This is the constructor to initialise the CryptoManager, it does not require any input.\r\n  * The init() must called in order to set mandatories attributes\r\n  */\n  function CryptoManager(storageManager) {\n    CryptoManager_classCallCheck(this, CryptoManager);\n\n    this.storageManager = storageManager;\n    this.userDefaultKeyRef = 'userAsymmetricKey';\n  }\n\n  CryptoManager_createClass(CryptoManager, [{\n    key: \"init\",\n    value: function init(runtimeURL, runtimeCapabilities, storageManager, dataObjectsStorage, registry, coreDiscovery, idm, runtimeFactory) {\n      var _this = this;\n\n      if (!runtimeURL) throw new Error('[] runtimeURL is missing.');\n      if (!storageManager) throw new Error('storageManager is missing');\n      if (!runtimeFactory) throw new Error('runtimeFactory is missing');\n      _this._runtimeURL = runtimeURL;\n      _this._cryptoManagerURL = _this._runtimeURL + '/cryptoManager'; //_this._myURL = _this._runtimeURL + '/crypto';\n\n      _this.storageManager = storageManager;\n      _this.dataObjectsStorage = dataObjectsStorage;\n      _this.runtimeCapabilities = runtimeCapabilities;\n      _this._runtimeFactory = runtimeFactory;\n      _this._domain = Object(utils[\"k\" /* divideURL */])(_this._runtimeURL).domain;\n      _this.crypto = new cryptoManager_Crypto(_this._runtimeFactory); // hashTable to store all the crypto information between two hyperties\n\n      _this.chatKeys = {}; // hashTable to store the symmetric keys to be used in the chat group\n\n      _this.dataObjectSessionKeys = {}; //failsafe to enable/disable all the criptographic functions\n\n      _this.isToUseEncryption = true;\n      _this._registry = registry;\n      _this._coreDiscovery = coreDiscovery;\n      _this._idm = idm;\n    } //******************* GET AND SET METHODS *******************\n\n    /**\r\n    * return the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n\n  }, {\n    key: \"loadSessionKeys\",\n    // to be used to initialise IDM with SessionKeys used in previous session\n    value: function loadSessionKeys() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n          if (sessionKeys) _this.dataObjectSessionKeys = sessionKeys;else _this.dataObjectSessionKeys = {};\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"_isFromRemoteSM\",\n    value: function _isFromRemoteSM(from) {\n      var splitFrom = from.split('://');\n      return splitFrom[0] === 'runtime' && from !== this._runtimeURL + '/sm';\n    }\n  }, {\n    key: \"addCryptoGUIListeners\",\n    value: function addCryptoGUIListeners() {\n      //TODO: Change the GUI invocation of this method\n      var _this = this;\n\n      _this._messageBus.addListener(_this._cryptoManagerURL, function (msg) {\n        var funcName = msg.body.method; //let returnedValue;\n\n        if (funcName === 'generateRSAKeyPair') {\n          _this._crypto.getMyPublicKey().then(function (key) {\n            var value = {\n              type: 'execute',\n              value: key,\n              code: 200\n            };\n            var replyMsg = {\n              id: msg.id,\n              type: 'response',\n              to: msg.from,\n              from: msg.to,\n              body: value\n            };\n\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              CryptoManager_log.error('On addGUIListeners from if generateRSAKeyPair method postMessage error: ' + err);\n            }\n          });\n\n          return;\n        }\n      });\n    } //******************* ENCRYPTION METHODS *******************\n\n    /**\r\n    * Identifies the messages to be encrypted\r\n    * @param {Message}    message\r\n    * @returns {boolean}  returns true if the message requires encryption\r\n    */\n\n  }, {\n    key: \"_isToEncrypt\",\n    value: function _isToEncrypt(message) {\n      var _this = this;\n\n      CryptoManager_log.log('[CryptoManager._isToEncrypt]', message);\n      var isCreate = message.type === 'create';\n      var isFromHyperty = message.from.includes('hyperty://');\n      var isToHyperty = message.to.includes('hyperty://');\n      var isToDataObject = Object(utils[\"s\" /* isDataObjectURL */])(message.to);\n\n      var reporter = _this.registry.getDataObjectReporter(message.to);\n\n      var doMutualAuthentication = message.hasOwnProperty('body') && message.body.hasOwnProperty('mutual') ? message.body.mutual : message.hasOwnProperty('body') && message.body.hasOwnProperty('value') && message.body.value.hasOwnProperty('mutual') ? message.body.value.mutual : true;\n      if (!doMutualAuthentication) return false;\n\n      if (reporter !== null && Object(utils[\"u\" /* isLegacy */])(reporter)) {\n        return false;\n      } //if is not to apply encryption, then returns resolve\n\n\n      if (!this.isToUseEncryption && !(message.type === 'handshake')) {\n        CryptoManager_log.info('not handshake: encryption disabled');\n        return false;\n      }\n\n      if (message.type === 'update') {\n        CryptoManager_log.info('update:encryption disabled');\n        return false;\n      }\n\n      if (message.type === 'forward') {\n        CryptoManager_log.info('forward:encryption disabled');\n        return false;\n      }\n\n      if (Object(utils[\"u\" /* isLegacy */])(message.to)) return false;\n      return isCreate && isFromHyperty && isToHyperty || isCreate && isFromHyperty && isToDataObject && doMutualAuthentication || message.type === 'handshake' || message.type === 'update' && doMutualAuthentication;\n    }\n  }, {\n    key: \"_isToDecrypt\",\n    value: function _isToDecrypt(message) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        // For sybscribe message let's start the mutualAuthentication\n        var isSubscription = message.type === 'subscribe';\n\n        var isFromRemoteSM = _this._isFromRemoteSM(message.from);\n\n        var mutual = message.body.hasOwnProperty('value') && message.body.value.hasOwnProperty('mutual') ? message.body.value.mutual : message.body.hasOwnProperty('mutual') ? message.body.mutual : true; //      let mutual = message.body.hasOwnProperty('mutual') ? message.body.mutual : false;\n\n        if (isSubscription && isFromRemoteSM && mutual) {\n          //  if (isSubscription && isFromRemoteSM ) {\n          CryptoManager_log.log('[CryptoManager._isToDecrypt] _doMutualAuthenticationPhase1');\n          console.log('[CryptoManager._isToDecrypt] ', message);\n\n          var reporter = _this.registry.getDataObjectReporter(message.to);\n\n          if (reporter !== null && Object(utils[\"u\" /* isLegacy */])(reporter)) {\n            return resolve(false);\n          }\n\n          _this._doMutualAuthenticationPhase1(message).then(function () {\n            resolve(false);\n          }, function (error) {\n            reject(error);\n          }); //      } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('value') && typeof message.body.value === 'string') {\n\n        } else if (message.hasOwnProperty('body') && message.body.hasOwnProperty('value') && typeof message.body.value === 'string' && mutual) {\n          CryptoManager_log.log('[CryptoManager._isToDecrypt] true');\n          resolve(true);\n        } else {\n          CryptoManager_log.log('[CryptoManager._isToDecrypt] false');\n          resolve(false);\n        }\n      })[\"catch\"](function (error) {\n        CryptoManager_log.error('[CryptoManager._isToDecrypt]', error);\n      });\n    }\n  }, {\n    key: \"encryptMessage\",\n    value: function encryptMessage(message) {\n      //log.info('encryptMessage:message', message);\n      var _this = this;\n\n      CryptoManager_log.log('encrypt message ');\n      return new Promise(function (resolve, reject) {\n        var isHandShakeType = message.type === 'handshake'; //if is not to apply encryption, then returns resolve\n\n        if (!_this._isToEncrypt(message)) {\n          // log.log('decryption disabled');\n          return resolve(message);\n        }\n\n        var dataObjectURL = Object(utils[\"z\" /* parseMessageURL */])(message.to);\n        var isToDataObject = Object(utils[\"s\" /* isDataObjectURL */])(dataObjectURL);\n        var isToLegacyIdentity = Object(utils[\"u\" /* isLegacy */])(message.to);\n        var isFromHyperty = Object(utils[\"k\" /* divideURL */])(message.from).type === 'hyperty';\n        var isToHyperty = Object(utils[\"k\" /* divideURL */])(message.to).type === 'hyperty';\n\n        if (message.type === 'update') {\n          CryptoManager_log.log('encrypt message: message type update');\n          return resolve(message);\n        }\n\n        if (isToLegacyIdentity) {\n          resolve(message);\n        } else if (isFromHyperty && isToHyperty) {\n          var userURL = _this._registry.getHypertyOwner(message.from);\n\n          if (userURL) {\n            // check if exists any keys between two users\n            var chatKeys = _this.chatKeys[message.from + '<->' + message.to];\n\n            if (!chatKeys) {\n              chatKeys = _this._newChatCrypto(message, userURL); //log.log('createChatKey encrypt', message.from + message.to);\n\n              _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\n              message.body.handshakePhase = 'startHandShake';\n            }\n\n            if (chatKeys.authenticated && !isHandShakeType) {\n              var iv = _this.crypto.generateIV();\n\n              _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, Object(utils[\"E\" /* stringify */])(message.body.value), iv).then(function (encryptedValue) {\n                var filteredMessage = _this._filterMessageToHash(message, Object(utils[\"E\" /* stringify */])(message.body.value) + Object(utils[\"E\" /* stringify */])(iv), chatKeys.hypertyFrom.messageInfo);\n\n                _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(function (hash) {\n                  //log.log('result of hash ', hash);\n                  var value = {\n                    iv: Object(utils[\"m\" /* encode */])(iv),\n                    value: Object(utils[\"m\" /* encode */])(encryptedValue),\n                    hash: Object(utils[\"m\" /* encode */])(hash)\n                  };\n                  message.body.value = Object(utils[\"m\" /* encode */])(value);\n                  resolve(message);\n                });\n              }); // if is a handshake message, just resolve it\n\n            } else if (isHandShakeType) {\n              resolve(message); // else, starts a new handshake protocol\n            } else {\n              _this._doHandShakePhase(message, chatKeys).then(function (value) {\n                _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;\n\n                _this._messageBus.postMessage(value.message);\n\n                reject('encrypt handshake protocol phase ');\n              });\n            }\n          } else {\n            reject('In encryptMessage: Hyperty owner URL was not found');\n          } //if from hyperty to a dataObjectURL\n\n        } else if (isFromHyperty && isToDataObject) {\n          //log.log('dataObject value to encrypt: ', message.body.value);\n          //log.log('IdentityModule - encrypt from hyperty to dataobject ', message);\n          _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n            sessionKeys = Object(utils[\"d\" /* chatkeysToArrayCloner */])(sessionKeys || {});\n            var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\n\n            _this.dataObjectsStorage.getDataObject(dataObjectURL).then(function (isHypertyReporter) {\n              //if no key exists, create a new one if is the reporter of dataObject\n              if (!dataObjectKey) {\n                // if the hyperty is the reporter of the dataObject then generates a session key\n                if (isHypertyReporter.reporter && isHypertyReporter.reporter === message.from) {\n                  var sessionKey = _this.crypto.generateRandom();\n\n                  _this.dataObjectSessionKeys[dataObjectURL] = {\n                    sessionKey: sessionKey,\n                    isToEncrypt: true\n                  };\n                  var dataObjectSessionKeysClone = Object(utils[\"e\" /* chatkeysToStringCloner */])(_this.dataObjectSessionKeys); //TODO: check if this does not need to be stored\n\n                  _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone)[\"catch\"](function (err) {\n                    reject('On encryptMessage from method storageManager.set error: ' + err);\n                  });\n\n                  dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];\n                }\n              } //check if there is already a session key for the chat room\n\n\n              if (dataObjectKey) {\n                // and if is to apply encryption, encrypt the messages\n                if (dataObjectKey.isToEncrypt) {\n                  var _iv = _this.crypto.generateIV();\n\n                  var stringifiedIV = Object(utils[\"E\" /* stringify */])(_iv);\n                  var stringifiedMessageBody = Object(utils[\"E\" /* stringify */])(message.body.value);\n\n                  _this.crypto.encryptAES(dataObjectKey.sessionKey, stringifiedMessageBody, _iv).then(function (encryptedValue) {\n                    delete message.body.identity.assertion; //TODO: Check why assertion is comming on the message!\n\n                    delete message.body.identity.expires; //TODO: Check why expires is comming on the message!\n\n                    var filteredMessage = _this._filterMessageToHash(message, stringifiedMessageBody + stringifiedIV);\n\n                    _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(function (hash) {\n                      // log.log('hash ', hash);\n                      var newValue = {\n                        value: Object(utils[\"m\" /* encode */])(encryptedValue),\n                        iv: Object(utils[\"m\" /* encode */])(_iv),\n                        hash: Object(utils[\"m\" /* encode */])(hash)\n                      };\n                      message.body.value = Object(utils[\"E\" /* stringify */])(newValue);\n                      resolve(message);\n                    });\n                  }); // if not, just send the message\n\n                } else {\n                  resolve(message);\n                } // start the generation of a new session Key\n\n              } else {\n                reject('Data object key could not be defined: Failed to decrypt message ');\n              }\n            })[\"catch\"](function (err) {\n              reject('On encryptMessage from method dataObjectsStorage.getDataObject error: ' + err);\n            });\n          })[\"catch\"](function (err) {\n            reject('On encryptMessage from method storageManager.get error: ' + err);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"encryptDataObject\",\n    value: function encryptDataObject(dataObject, sender) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        CryptoManager_log.info('dataObject value to encrypt: ', dataObject);\n        var dataObjectURL = Object(utils[\"z\" /* parseMessageURL */])(sender);\n\n        _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n          sessionKeys = Object(utils[\"d\" /* chatkeysToArrayCloner */])(sessionKeys || {});\n          var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null; //check if there is already a session key for the chat room\n\n          if (dataObjectKey) {\n            // and if is to apply encryption, encrypt the messages\n            if (dataObjectKey.isToEncrypt) {\n              var iv = _this.crypto.generateIV();\n\n              _this.crypto.encryptAES(dataObjectKey.sessionKey, Object(utils[\"E\" /* stringify */])(dataObject), iv).then(function (encryptedValue) {\n                var newValue = {\n                  value: Object(utils[\"m\" /* encode */])(encryptedValue),\n                  iv: Object(utils[\"m\" /* encode */])(iv)\n                }; //log.log('encrypted dataObject', newValue);\n\n                return resolve(newValue);\n              })[\"catch\"](function (err) {\n                reject('On encryptDataObject from method encryptAES error: ' + err);\n              }); // if not, just send the message\n\n            } else {\n              CryptoManager_log.info('The dataObject is not encrypted');\n              return resolve(dataObject);\n            } // start the generation of a new session Key\n\n          } else {\n            return reject('No dataObjectKey for this dataObjectURL:', dataObjectURL);\n          }\n        })[\"catch\"](function (err) {\n          reject('On encryptDataObject from method storageManager.get error: ' + err);\n        });\n      });\n    }\n  }, {\n    key: \"decryptMessage\",\n    value: function decryptMessage(message) {\n      var _this = this; //  log.log('decryptMessage:message', message);\n\n\n      return new Promise(function (resolve, reject) {\n        var isHandShakeType = message.type === 'handshake';\n\n        _this._isToDecrypt(message).then(function (isToDecrypt) {\n          //if is not to apply encryption, then returns resolve\n          if (!isToDecrypt) return resolve(message);\n          var dataObjectURL = Object(utils[\"z\" /* parseMessageURL */])(message.to);\n          var isToDataObject = Object(utils[\"s\" /* isDataObjectURL */])(dataObjectURL);\n          var isFromHyperty = Object(utils[\"k\" /* divideURL */])(message.from).type === 'hyperty';\n          var isToHyperty = Object(utils[\"k\" /* divideURL */])(message.to).type === 'hyperty';\n\n          if (message.type === 'update') {\n            return resolve(message);\n          } //is is hyperty to hyperty communication\n\n\n          if (isFromHyperty && isToHyperty) {\n            // log.log('decrypt hyperty to hyperty');\n            var userURL = _this._registry.getHypertyOwner(message.to);\n\n            if (userURL) {\n              var chatKeys = _this.chatKeys[message.to + '<->' + message.from];\n\n              if (!chatKeys) {\n                chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');\n                _this.chatKeys[message.to + '<->' + message.from] = chatKeys;\n              }\n\n              if (chatKeys.authenticated && !isHandShakeType) {\n                var value = Object(utils[\"g\" /* decode */])(message.body.value);\n                var iv = Object(utils[\"h\" /* decodeToUint8Array */])(value.iv);\n                var data = Object(utils[\"h\" /* decodeToUint8Array */])(value.value);\n                var hash = Object(utils[\"h\" /* decodeToUint8Array */])(value.hash);\n\n                _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {\n                  // log.log('decrypted value ', decryptedData);\n                  message.body.value = decryptedData;\n\n                  var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                  _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {\n                    //log.log('result of hash verification! ', result);\n                    message.body.assertedIdentity = true;\n                    resolve(message);\n                  });\n                });\n              } else if (isHandShakeType) {\n                _this._doHandShakePhase(message, chatKeys).then(function (value) {\n                  //if it was started by doMutualAuthentication then ends the protocol\n                  if (value === 'handShakeEnd') {//reject('decrypt handshake protocol phase');\n                    // if was started by a message, then resend that message\n                  } else {\n                    _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;\n\n                    _this._messageBus.postMessage(value.message); //reject('decrypt handshake protocol phase ');\n\n                  }\n                });\n              } else {\n                reject('wrong message do decrypt');\n              }\n            } else {\n              reject('error on decrypt message');\n            } //if from hyperty to a dataObjectURL\n\n          } else if (isFromHyperty && isToDataObject) {\n            // log.log('dataObject value to decrypt: ', message.body);\n            _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n              sessionKeys = Object(utils[\"d\" /* chatkeysToArrayCloner */])(sessionKeys || {});\n              var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\n\n              if (dataObjectKey) {\n                //check if is to apply encryption\n                if (dataObjectKey.isToEncrypt) {\n                  var parsedValue = Object(utils[\"x\" /* parse */])(message.body.value);\n\n                  var _iv2 = Object(utils[\"h\" /* decodeToUint8Array */])(parsedValue.iv);\n\n                  var encryptedValue = Object(utils[\"h\" /* decodeToUint8Array */])(parsedValue.value);\n\n                  var _hash = Object(utils[\"h\" /* decodeToUint8Array */])(parsedValue.hash);\n\n                  _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, _iv2).then(function (decryptedValue) {\n                    var parsedValue = Object(utils[\"x\" /* parse */])(decryptedValue); // log.log('decrypted Value,', parsedValue);\n\n                    message.body.value = parsedValue;\n\n                    var filteredMessage = _this._filterMessageToHash(message, Object(utils[\"E\" /* stringify */])(parsedValue) + Object(utils[\"E\" /* stringify */])(_iv2));\n\n                    _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, _hash).then(function (result) {\n                      CryptoManager_log.log('Received message HMAC result', result);\n                      message.body.assertedIdentity = true;\n                      resolve(message);\n                    })[\"catch\"](function (err) {\n                      reject('Message HMAC is invalid: ' + err);\n                    });\n                  }); //if not, just return the message\n\n                } else {\n                  message.body.assertedIdentity = true;\n                  resolve(message);\n                }\n              } else {\n                message.body.assertedIdentity = true;\n                resolve(message); //reject('no sessionKey for chat room found');\n              }\n            });\n          } else {\n            reject('wrong message to decrypt');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"decryptDataObject\",\n    value: function decryptDataObject(dataObject, sender) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //if is not to apply encryption, then returns resolve\n        if (!_this.isToUseEncryption) {\n          // log.log('decryption disabled');\n          return resolve(dataObject);\n        }\n\n        var dataObjectURL = Object(utils[\"z\" /* parseMessageURL */])(sender); // log.log('dataObject value to decrypt: ', dataObject);\n\n        _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n          sessionKeys = Object(utils[\"d\" /* chatkeysToArrayCloner */])(sessionKeys);\n          var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\n\n          if (dataObjectKey) {\n            //check if is to apply encryption\n            if (dataObjectKey.isToEncrypt) {\n              var iv = Object(utils[\"h\" /* decodeToUint8Array */])(dataObject.iv);\n              var encryptedValue = Object(utils[\"h\" /* decodeToUint8Array */])(dataObject.value);\n\n              _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(function (decryptedValue) {\n                var parsedValue = Object(utils[\"x\" /* parse */])(decryptedValue);\n                var newValue = {\n                  value: parsedValue,\n                  iv: Object(utils[\"m\" /* encode */])(iv)\n                }; // log.log('decrypted dataObject,', newValue);\n\n                return resolve(newValue);\n              })[\"catch\"](function (err) {\n                reject('On decryptDataObject from method encryptAES error: ' + err);\n              }); //if not, just return the dataObject\n\n            } else {\n              // log.log('The dataObject is not encrypted');\n              return resolve(dataObject);\n            }\n          } else {\n            return reject('No dataObjectKey for this dataObjectURL:', dataObjectURL);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_doMutualAuthenticationPhase1\",\n    value: function _doMutualAuthenticationPhase1(message) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var to = message.to.split('/'); //let subsIndex = to.indexOf('subscription');\n        //let isDataObjectSubscription = subsIndex !== -1;\n\n        to.pop();\n        var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];\n\n        _this._doMutualAuthenticationPhase2(dataObjectURL, message.body.subscriber).then(function () {\n          _this._registry.registerSubscriber(dataObjectURL, message.body.subscriber);\n\n          resolve();\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"_doMutualAuthenticationPhase2\",\n    value: function _doMutualAuthenticationPhase2(sender, receiver) {\n      CryptoManager_log.info('doMutualAuthentication:sender ', sender);\n      CryptoManager_log.info('doMutualAuthentication:receiver ', receiver);\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var dataObjectURL; // check if the sender is a dataObject and if so stores that value\n\n        var reporterURL = _this._registry.getReporterURLSynchonous(sender);\n\n        if (reporterURL) {\n          dataObjectURL = sender;\n          sender = reporterURL;\n        }\n\n        var msg = {\n          to: receiver,\n          from: sender,\n          callback: undefined,\n          body: {\n            handshakePhase: 'startHandShake',\n            ignore: 'ignoreMessage'\n          }\n        };\n\n        if (!sender || !receiver) {\n          return reject('sender or receiver missing on doMutualAuthentication');\n        }\n\n        var chatKeys = _this.chatKeys[sender + '<->' + receiver];\n\n        var userURL = _this._registry.getHypertyOwner(sender);\n\n        if (userURL) {\n          if (!chatKeys) {\n            // callback to resolve when finish the mutual authentication\n            var resolved = function resolved(value) {\n              // log.log('callback value:', value);\n              resolve(value);\n            };\n\n            msg.callback = resolved;\n            msg.dataObjectURL = dataObjectURL;\n            chatKeys = _this._newChatCrypto(msg, userURL);\n            _this.chatKeys[sender + '<->' + receiver] = chatKeys;\n          }\n\n          if (chatKeys.authenticated) {\n            var startSessionKeyExchange = {\n              to: sender,\n              from: receiver\n            };\n            chatKeys.dataObjectURL = dataObjectURL;\n\n            _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(function (value) {\n              _this._messageBus.postMessage(value.message);\n\n              resolve('exchange of chat sessionKey initiated');\n            })[\"catch\"](function (err) {\n              reject('On doMutualAuthentication from method _sendReporterSessionKey error: ' + err);\n            });\n          } else {\n            _this._doHandShakePhase(msg, chatKeys);\n          }\n        } else {\n          reject('Mutual authentication error: Hyperty owner could not be resolved');\n        }\n      });\n    }\n    /**\r\n    * returns the reporter associated to the dataObject URL\r\n    * @param   {String}   dataObjectURL         dataObject url\r\n    * @return   {String}  reporter              dataObject url reporter\r\n    */\n\n    /*  _getHypertyFromDataObject(dataObjectURL) {\r\n      log.info('_getHypertyFromDataObject:dataObjectURL', dataObjectURL);\r\n      let _this = this;\r\n        return new Promise(function(resolve, reject) {\r\n          let splitedURL = divideURL(dataObjectURL);\r\n        let domain = splitedURL.domain;\r\n        let finalURL = _this._parseMessageURL(dataObjectURL);\r\n          // check if is the creator of the hyperty\r\n        let reporterURL = _this.registry.getReporterURLSynchonous(finalURL);\r\n        log.info('_getHypertyFromDataObject:reporterURL', reporterURL);\r\n          if (reporterURL) {\r\n          resolve(reporterURL);\r\n        } else {\r\n          // check if there is already an association from an hypertyURL to the dataObject\r\n          let storedReporterURL = _this.dataObjectsIdentity[finalURL];\r\n          log.info('_getHypertyFromDataObject:storedReporterURL', storedReporterURL);\r\n            if (storedReporterURL) {\r\n            resolve(storedReporterURL);\r\n          } else {\r\n            // check if there is any hyperty that subscribed the dataObjectURL\r\n            let subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);\r\n            log.info('_getHypertyFromDataObject:subscriberHyperty', subscriberHyperty);\r\n              if (subscriberHyperty) {\r\n              resolve(subscriberHyperty);\r\n            } else {\r\n              // search in domain registry for the hyperty associated to the dataObject\r\n              // search in case is a subscriber who wants to know the reporter\r\n              _this._coreDiscovery.discoverDataObjectPerURL(finalURL, domain).then(dataObject => {\r\n                log.info('_getHypertyFromDataObject:dataObject', dataObject);\r\n                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;\r\n                log.info('_getHypertyFromDataObject:dataObject.reporter', dataObject.reporter);\r\n                resolve(dataObject.reporter);\r\n              }, err => {\r\n                reject(err);\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }*/\n\n  }, {\n    key: \"_sendReporterSessionKey\",\n    value: function _sendReporterSessionKey(message, chatKeys) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];\n        var reporterSessionKeyMsg;\n        var valueToEncrypt;\n        var sessionKey;\n        var iv;\n        var value = {}; //if there is not yet a session Key, generates a new one\n\n        if (!sessionKeyBundle) {\n          sessionKey = _this.crypto.generateRandom();\n          _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = {\n            sessionKey: sessionKey,\n            isToEncrypt: true\n          };\n          var dataObjectSessionKeysClone = Object(utils[\"e\" /* chatkeysToStringCloner */])(_this.dataObjectSessionKeys);\n\n          _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone)[\"catch\"](function (err) {\n            reject('On _sendReporterSessionKey from method storageManager.set(dataObjectSessionKeys...) error: ' + err);\n          });\n        } else {\n          sessionKey = sessionKeyBundle.sessionKey;\n        }\n\n        try {\n          valueToEncrypt = Object(utils[\"m\" /* encode */])({\n            value: Object(utils[\"m\" /* encode */])(sessionKey),\n            dataObjectURL: chatKeys.dataObjectURL\n          });\n        } catch (err) {\n          return reject('On _sendReporterSessionKey from method storageManager.set error valueToEncrypt: ' + err);\n        }\n\n        iv = _this.crypto.generateIV();\n        value.iv = Object(utils[\"m\" /* encode */])(iv);\n\n        _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(function (encryptedValue) {\n          reporterSessionKeyMsg = {\n            type: 'handshake',\n            to: message.from,\n            from: message.to,\n            body: {\n              handshakePhase: 'reporterSessionKey',\n              value: Object(utils[\"m\" /* encode */])(encryptedValue)\n            }\n          };\n\n          var filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);\n\n          return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n        }).then(function (hashedMessage) {\n          var valueWithHash = Object(utils[\"m\" /* encode */])({\n            value: reporterSessionKeyMsg.body.value,\n            hash: Object(utils[\"m\" /* encode */])(hashedMessage),\n            iv: value.iv\n          });\n          reporterSessionKeyMsg.body.value = valueWithHash;\n          resolve({\n            message: reporterSessionKeyMsg,\n            chatKeys: chatKeys\n          });\n        })[\"catch\"](function (err) {\n          reject('On _sendReporterSessionKey from chained promises encryptAES error: ' + err);\n        });\n      });\n    }\n    /**\r\n    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL\r\n    * @param {String}     idpDomain     idpDomain (Optional)\r\n    */\n\n  }, {\n    key: \"_resolveDomain\",\n    value: function _resolveDomain(idpDomain) {\n      if (!idpDomain) {\n        return 'domain-idp://google.com';\n      } else {\n        return 'domain-idp://' + idpDomain;\n      }\n    }\n  }, {\n    key: \"_doHandShakePhase\",\n    value: function _doHandShakePhase(message, chatKeys) {\n      // log('_doHandShakePhase:dataObject', message);\n      //\tlog('_doHandShakePhase:chatKeys', chatKeys);\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var handshakeType = message.body.handshakePhase;\n        var iv;\n        var hash;\n        var value = {};\n        var filteredMessage;\n        var privateKeyHolder;\n        CryptoManager_log.info('handshake phase: ', handshakeType);\n\n        switch (handshakeType) {\n          case 'startHandShake':\n            {\n              chatKeys.keys.fromRandom = _this.crypto.generateRandom();\n              var startHandShakeMsg = {\n                type: 'handshake',\n                to: message.to,\n                from: message.from,\n                body: {\n                  handshakePhase: 'senderHello',\n                  value: Object(utils[\"m\" /* encode */])(chatKeys.keys.fromRandom)\n                }\n              };\n              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo); // check if was the encrypt function or the mutual authentication that request the\n              // start of the handShakePhase.\n\n              if (chatKeys.initialMessage) {\n                resolve({\n                  message: startHandShakeMsg,\n                  chatKeys: chatKeys\n                });\n              } else {\n                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\n\n                _this._messageBus.postMessage(startHandShakeMsg);\n              }\n\n              break;\n            }\n\n          case 'senderHello':\n            {\n              CryptoManager_log.log('senderHello');\n              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);\n              chatKeys.keys.fromRandom = Object(utils[\"h\" /* decodeToUint8Array */])(message.body.value);\n              chatKeys.keys.toRandom = _this.crypto.generateRandom();\n              var senderHelloMsg = {\n                type: 'handshake',\n                to: message.from,\n                from: message.to,\n                body: {\n                  handshakePhase: 'receiverHello',\n                  value: Object(utils[\"m\" /* encode */])(chatKeys.keys.toRandom)\n                }\n              };\n              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);\n              resolve({\n                message: senderHelloMsg,\n                chatKeys: chatKeys\n              });\n              break;\n            }\n\n          case 'receiverHello':\n            {\n              CryptoManager_log.log('receiverHello');\n\n              _this.getMyPrivateKey().then(function (privateKey) {\n                privateKeyHolder = privateKey;\n                chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);\n                return _this._idm.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp.domain);\n              }).then(function (value) {\n                //TODO remove later this verification as soon as all the IdP proxy are updated in the example\n                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;\n                var receiverPublicKey = Object(utils[\"A\" /* parseToUint8Array */])(encodedpublicKey);\n\n                var premasterSecret = _this.crypto.generatePMS();\n\n                var toRandom = message.body.value;\n                chatKeys.hypertyTo.assertion = message.body.identity.assertion;\n                chatKeys.hypertyTo.publicKey = receiverPublicKey;\n                chatKeys.hypertyTo.userID = message.body.identity.userProfile.userURL;\n                chatKeys.keys.toRandom = Object(utils[\"h\" /* decodeToUint8Array */])(toRandom);\n                chatKeys.keys.premasterKey = premasterSecret;\n\n                var concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\n\n                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom); //generate the master key\n              }).then(function (masterKey) {\n                chatKeys.keys.masterKey = masterKey;\n                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom); //generate the symmetric and hash keys\n              }).then(function (keys) {\n                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);\n                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);\n                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);\n                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);\n                iv = _this.crypto.generateIV();\n                value.iv = Object(utils[\"m\" /* encode */])(iv);\n                var messageStructure = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate'\n                  }\n                }; // hash the value and the iv\n\n                filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n              }).then(function (hash) {\n                value.hash = Object(utils[\"m\" /* encode */])(hash); //encrypt the data\n\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);\n              }).then(function (encryptedData) {\n                value.symetricEncryption = Object(utils[\"m\" /* encode */])(encryptedData);\n                return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);\n              }).then(function (encryptedValue) {\n                value.assymetricEncryption = Object(utils[\"m\" /* encode */])(encryptedValue);\n                var messageStructure = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate'\n                  }\n                };\n\n                var messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);\n\n                return _this.crypto.signRSA(privateKeyHolder, Object(utils[\"m\" /* encode */])(chatKeys.handshakeHistory) + Object(utils[\"m\" /* encode */])(messageToHash));\n              }).then(function (signature) {\n                value.signature = Object(utils[\"m\" /* encode */])(signature);\n                var receiverHelloMsg = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate',\n                    value: Object(utils[\"m\" /* encode */])(value)\n                  }\n                };\n                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\n                resolve({\n                  message: receiverHelloMsg,\n                  chatKeys: chatKeys\n                });\n              }, function (error) {\n                return reject(error);\n              });\n\n              break;\n            }\n\n          case 'senderCertificate':\n            {\n              CryptoManager_log.log('senderCertificate');\n              var receivedValue = Object(utils[\"g\" /* decode */])(message.body.value);\n\n              _this.getMyPrivateKey().then(function (privateKey) {\n                privateKeyHolder = privateKey;\n                return _this._idm.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp.domain);\n              }).then(function (value) {\n                var encryptedPMS = Object(utils[\"h\" /* decodeToUint8Array */])(receivedValue.assymetricEncryption); //TODO remove later this verification as soon as all the IdP proxy are updated in the example\n\n                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;\n                var senderPublicKey = Object(utils[\"A\" /* parseToUint8Array */])(encodedpublicKey);\n                chatKeys.hypertyTo.assertion = message.body.identity.assertion;\n                chatKeys.hypertyTo.publicKey = senderPublicKey;\n                chatKeys.hypertyTo.userID = message.body.identity.userProfile.userURL;\n                return _this.crypto.decryptRSA(privateKeyHolder, encryptedPMS);\n              }, function (error) {\n                // log.log(error);\n                reject('Error during authentication of identity: ', error.message); //obtain the PremasterKey using the private key\n              }).then(function (pms) {\n                chatKeys.keys.premasterKey = new Uint8Array(pms);\n                var signature = Object(utils[\"h\" /* decodeToUint8Array */])(receivedValue.signature);\n\n                var receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);\n\n                return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, Object(utils[\"m\" /* encode */])(chatKeys.handshakeHistory) + Object(utils[\"m\" /* encode */])(receivedmsgToHash), signature); // validates the signature received\n              }).then(function (signValidationResult) {\n                //log.log('SenderCertificate - signature validation result ', signValidationResult);\n                var concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\n\n                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom); // generates the master keys from the Premaster key and the randoms\n              }).then(function (masterKey) {\n                chatKeys.keys.masterKey = masterKey;\n                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom); // generates the symmetric keys to be used in the symmetric encryption\n              }).then(function (keys) {\n                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);\n                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);\n                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);\n                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);\n                iv = Object(utils[\"h\" /* decodeToUint8Array */])(receivedValue.iv);\n                var data = Object(utils[\"h\" /* decodeToUint8Array */])(receivedValue.symetricEncryption);\n                return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);\n              }).then(function (decryptedData) {\n                // log.log('decryptedData', decryptedData);\n                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);\n                var hashReceived = Object(utils[\"h\" /* decodeToUint8Array */])(receivedValue.hash);\n                filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);\n              }).then(function (verifiedHash) {\n                // log.log('result of hash verification ', verifiedHash);\n                var receiverFinishedMessage = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverFinishedMessage'\n                  }\n                };\n                iv = _this.crypto.generateIV();\n                value.iv = Object(utils[\"m\" /* encode */])(iv);\n                filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo); //log.log('TIAGO: doHandShakePhase verifiedHash');\n\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n              }).then(function (hash) {\n                value.hash = Object(utils[\"m\" /* encode */])(hash);\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);\n              }).then(function (encryptedValue) {\n                value.value = Object(utils[\"m\" /* encode */])(encryptedValue);\n                var receiverFinishedMessage = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverFinishedMessage',\n                    value: Object(utils[\"m\" /* encode */])(value)\n                  }\n                };\n                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);\n                chatKeys.authenticated = true;\n                resolve({\n                  message: receiverFinishedMessage,\n                  chatKeys: chatKeys\n                });\n              })[\"catch\"](function (err) {\n                reject('On _doHandShakePhase from senderCertificate error: ' + err);\n              });\n\n              break;\n            }\n\n          case 'receiverFinishedMessage':\n            {\n              chatKeys.authenticated = true;\n              value = Object(utils[\"g\" /* decode */])(message.body.value);\n              iv = Object(utils[\"h\" /* decodeToUint8Array */])(value.iv);\n              var data = Object(utils[\"h\" /* decodeToUint8Array */])(value.value);\n              hash = Object(utils[\"h\" /* decodeToUint8Array */])(value.hash);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {\n                // log.log('decryptedData', decryptedData);\n                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {\n                  // check if there was an initial message that was blocked and send it\n                  if (chatKeys.initialMessage) {\n                    var initialMessage = {\n                      type: 'create',\n                      to: message.from,\n                      from: message.to,\n                      body: {\n                        value: chatKeys.initialMessage.body.value\n                      }\n                    };\n                    resolve({\n                      message: initialMessage,\n                      chatKeys: chatKeys\n                    }); //sends the sessionKey to the subscriber hyperty\n                  } else {\n                    _this._sendReporterSessionKey(message, chatKeys).then(function (value) {\n                      resolve(value);\n                    })[\"catch\"](function (err) {\n                      reject('On _doHandShakePhase from receiverFinishedMessage error: ' + err);\n                    });\n                  }\n                });\n              });\n\n              break;\n            }\n\n          case 'reporterSessionKey':\n            {\n              CryptoManager_log.log('reporterSessionKey');\n              var valueIVandHash = Object(utils[\"g\" /* decode */])(message.body.value);\n              hash = Object(utils[\"h\" /* decodeToUint8Array */])(valueIVandHash.hash);\n              iv = Object(utils[\"h\" /* decodeToUint8Array */])(valueIVandHash.iv);\n              var encryptedValue = Object(utils[\"h\" /* decodeToUint8Array */])(valueIVandHash.value);\n              var parsedValue;\n              var sessionKey;\n              var dataObjectURL;\n              var receiverAcknowledgeMsg; //log.log('[IdentityModule reporterSessionKey] - decryptAES: ', chatKeys.keys.hypertyToSessionKey, encryptedValue, iv);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(function (decryptedValue) {\n                parsedValue = Object(utils[\"g\" /* decode */])(decryptedValue);\n                sessionKey = Object(utils[\"h\" /* decodeToUint8Array */])(parsedValue.value);\n                dataObjectURL = parsedValue.dataObjectURL;\n\n                var messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);\n\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);\n              }).then(function (hashResult) {\n                // log.log('hash successfully validated ', hashResult);\n                _this.dataObjectSessionKeys[dataObjectURL] = {\n                  sessionKey: sessionKey,\n                  isToEncrypt: true\n                };\n                var dataObjectSessionKeysClone = Object(utils[\"e\" /* chatkeysToStringCloner */])(_this.dataObjectSessionKeys);\n\n                _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone)[\"catch\"](function (err) {\n                  reject('On _sendReporterSessionKey from method reporterSessionKey error: ' + err);\n                });\n\n                iv = _this.crypto.generateIV();\n                value.iv = Object(utils[\"m\" /* encode */])(iv);\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);\n              }).then(function (encryptedValue) {\n                receiverAcknowledgeMsg = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverAcknowledge'\n                  }\n                };\n                value.value = Object(utils[\"m\" /* encode */])(encryptedValue);\n\n                var messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);\n\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);\n              }).then(function (hashedMessage) {\n                var finalValue = Object(utils[\"m\" /* encode */])({\n                  value: value.value,\n                  hash: Object(utils[\"m\" /* encode */])(hashedMessage),\n                  iv: value.iv\n                });\n                receiverAcknowledgeMsg.body.value = finalValue;\n                resolve({\n                  message: receiverAcknowledgeMsg,\n                  chatKeys: chatKeys\n                });\n              })[\"catch\"](function (err) {\n                reject('On _doHandShakePhase from reporterSessionKey error: ' + err);\n              });\n\n              break;\n            }\n\n          case 'receiverAcknowledge':\n            {\n              CryptoManager_log.log('receiverAcknowledge');\n              var receivedvalueIVandHash = Object(utils[\"g\" /* decode */])(message.body.value);\n              var receivedHash = Object(utils[\"h\" /* decodeToUint8Array */])(receivedvalueIVandHash.hash);\n              iv = Object(utils[\"h\" /* decodeToUint8Array */])(receivedvalueIVandHash.iv);\n              var receivedEncryptedValue = Object(utils[\"h\" /* decodeToUint8Array */])(receivedvalueIVandHash.value);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(function (decryptedValue) {\n                var filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);\n\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);\n              }).then(function (hashResult) {\n                // log.log('hashResult ', hashResult);\n                var callback = chatKeys.callback;\n\n                if (callback) {\n                  callback('handShakeEnd');\n                }\n\n                resolve('handShakeEnd');\n              })[\"catch\"](function (err) {\n                reject('On _doHandShakePhase from receiverAcknowledge error: ' + err);\n              });\n\n              break;\n            }\n\n          default:\n            reject(message);\n        }\n      });\n    }\n    /**\r\n    * filter the messages to hash, by removing some fields not generated by the runtime core\r\n    * @param {Message}  message                     message\r\n    * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted\r\n    * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message\r\n    * @return {Message}  new message filtered\r\n    */\n\n  }, {\n    key: \"_filterMessageToHash\",\n    value: function _filterMessageToHash(message, decryptedValue, identity) {\n      return {\n        type: message.type,\n        from: message.from,\n        to: message.to,\n        body: {\n          identity: identity || message.body.identity,\n          value: decryptedValue || message.body.value,\n          handshakePhase: message.body.handshakePhase\n        }\n      };\n    }\n    /**\r\n    * generates the initial structure for the keys between two users\r\n    * @param {JSON}    message              initial message that triggers the mutual authentication\r\n    * @param {String}  userURL              userURL\r\n    * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto\r\n    * @return {JSON} newChatCrypto  new JSON structure for the chat crypto\r\n    */\n\n  }, {\n    key: \"_newChatCrypto\",\n    value: function _newChatCrypto(message, userURL, receiver) {\n      var _this = this; //check whether is the sender or the receiver to create a new chatCrypto\n      //to mantain consistency on the keys if the receiver create a new chatCrypto,\n      //then invert the fields\n\n\n      var from = receiver ? message.to : message.from;\n      var to = receiver ? message.from : message.to;\n\n      var userInfo = _this._idm.getIdentity(userURL);\n\n      var newChatCrypto = {\n        hypertyFrom: {\n          hyperty: from,\n          userID: userInfo.userProfile.userURL,\n          //privateKey: \"getMyPublicKey\",\n          //publicKey: \"getMyPrivateKey\",\n          assertion: userInfo.assertion,\n          messageInfo: userInfo\n        },\n        hypertyTo: {\n          hyperty: to,\n          userID: undefined,\n          publicKey: undefined,\n          assertion: undefined\n        },\n        keys: {\n          hypertyToSessionKey: undefined,\n          hypertyFromSessionKey: undefined,\n          hypertyToHashKey: undefined,\n          hypertyFromHashKey: undefined,\n          toRandom: undefined,\n          fromRandom: undefined,\n          premasterKey: undefined,\n          masterKey: undefined\n        },\n        handshakeHistory: {\n          senderHello: undefined,\n          receiverHello: undefined,\n          senderCertificate: undefined,\n          receiverFinishedMessage: undefined\n        },\n        initialMessage: message.body.ignore ? undefined : message,\n        callback: message.callback,\n        authenticated: false,\n        dataObjectURL: message.dataObjectURL\n      };\n      return newChatCrypto;\n    }\n    /**\r\n    * Retrieves a public keys given a user refrence. If no key is found,\r\n    generates a new key asymmetric key and retrieves the public keys.\r\n    * @param   {userRef}    String    user reference for the key pair\r\n    * @return  {Array}   public key\r\n    */\n\n  }, {\n    key: \"getMyPublicKey\",\n    value: function getMyPublicKey() {\n      var userRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.userDefaultKeyRef;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.storageManager.get(userRef).then(function (storedKeyPair) {\n          if (storedKeyPair) {\n            return resolve(storedKeyPair[\"public\"]);\n          }\n\n          _this._generateAndStoreNewAsymetricKey(userRef).then(function (generatedKeyPair) {\n            resolve(generatedKeyPair[\"public\"]);\n          })[\"catch\"](function (err) {\n            CryptoManager_log.error('[getMyPublicKey:_generateAndStoreNewAsymetricKey:err]: ' + err.message);\n            reject(err);\n          });\n        })[\"catch\"](function (err) {\n          CryptoManager_log.error('[getMyPublicKey:storageManager:err]: ' + err.message);\n          reject(err);\n        });\n      });\n    }\n    /**\r\n    * Retrieves a private keys given a user refrence. If no key is found,\r\n    generates a new key asymmetric key and retrieves the private key.\r\n    * @param   {userRef}    String    user reference for the key pair\r\n    * @return  {Array}   private key\r\n    **/\n\n  }, {\n    key: \"getMyPrivateKey\",\n    value: function getMyPrivateKey() {\n      var userRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.userDefaultKeyRef;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.storageManager.get(userRef).then(function (storedKeyPair) {\n          if (storedKeyPair) {\n            return resolve(storedKeyPair[\"private\"]);\n          }\n\n          _this._generateAndStoreNewAsymetricKey(userRef).then(function (generatedKeyPair) {\n            resolve(generatedKeyPair[\"private\"]);\n          })[\"catch\"](function (err) {\n            CryptoManager_log.error('[getMyPrivateKey:_generateAndStoreNewAsymetricKey:err]: ' + err.message);\n            reject(err);\n          });\n        })[\"catch\"](function (err) {\n          CryptoManager_log.error('[getMyPrivateKey:storageManager:err]: ' + err.message);\n          reject(err);\n        });\n      });\n    }\n    /**\r\n    * Generates a new key pair, stores and retrives the key pair.\r\n    * @param   {userRef}    String    user reference for the key pair\r\n    * @return  {Array}   private key\r\n    **/\n\n  }, {\n    key: \"_generateAndStoreNewAsymetricKey\",\n    value: function _generateAndStoreNewAsymetricKey(userRef) {\n      var _this = this;\n\n      var keyPair = undefined;\n      return new Promise(function (resolve, reject) {\n        //      _this.crypto.generateRSAKeyPair().then(generatedKeyPair => {\n        var generatedKeyPair = {};\n        generatedKeyPair[\"private\"] = Object(utils[\"n\" /* generateGUID */])();\n        generatedKeyPair[\"public\"] = Object(utils[\"n\" /* generateGUID */])();\n        CryptoManager_log.log('_generateAndStoreNewAsymetricKey:userAsymmetricKeyGenerated', generatedKeyPair);\n        keyPair = generatedKeyPair;\n\n        _this.storageManager.set(userRef, 0, generatedKeyPair); //      }).then(storedReference => {\n        //        log.log('_generateAndStoreNewAsymetricKey:userAsymmetricKeySuccess', storedReference);\n\n\n        resolve(keyPair);\n      })[\"catch\"](function (err) {\n        CryptoManager_log.error('[_generateAndStoreNewAsymetricKey:err]: ' + err.message);\n        reject(err);\n      }); //    });\n    }\n  }, {\n    key: \"messageBus\",\n    get: function get() {\n      var _this = this;\n\n      return _this._messageBus;\n    }\n    /**\r\n    * Set the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n\n      _this._messageBus = messageBus;\n\n      _this.addCryptoGUIListeners();\n    }\n    /**\r\n    * return the coreDiscovery component\r\n    */\n\n  }, {\n    key: \"coreDiscovery\",\n    get: function get() {\n      var _this = this;\n\n      return _this._coreDiscovery;\n    }\n    /**\r\n    * return user's public key\r\n    */\n\n    /*  getMyPublicKey() {\r\n      // to be implemented\r\n        return new Promise((resolve)=> {\r\n        resolve('mypublickey');\r\n        });\r\n    }\r\n    */\n\n    /**\r\n    * Set the coreDiscovery component\r\n    * @param {coreDiscovery} coreDiscovery\r\n    */\n    ,\n    set: function set(coreDiscovery) {\n      var _this = this;\n\n      _this._coreDiscovery = coreDiscovery;\n    }\n    /**\r\n    * return the registry in this idModule\r\n    * @param {registry}           registry\r\n    */\n\n  }, {\n    key: \"registry\",\n    get: function get() {\n      var _this = this;\n\n      return _this._registry;\n    }\n    /**\r\n    * Set the registry in this idModule\r\n    * @param {registry}     reg\r\n    */\n    ,\n    set: function set(registry) {\n      var _this = this;\n\n      _this._registry = registry;\n    }\n  }]);\n\n  return CryptoManager;\n}();\n/*\r\nconst nodeJSKeyPairPopulate = { public: [48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 228, 43, 101, 12, 121, 7, 157, 71, 81, 58, 219, 32, 10, 108, 193, 179, 212, 116, 255, 59, 217, 32, 161, 201, 53, 171, 226, 199, 137, 202, 171, 60, 82, 53, 125, 62, 177, 126, 165, 24, 141, 30, 15, 226, 59, 107, 34, 7, 13, 149, 112, 125, 10, 230, 191, 156, 164, 177, 10, 185, 13, 66, 3, 217, 166, 244, 90, 119, 111, 27, 145, 104, 71, 189, 166, 226, 255, 133, 83, 151, 231, 101, 151, 89, 22, 19, 65, 154, 10, 53, 208, 218, 252, 219, 37, 50, 212, 86, 145, 107, 132, 90, 233, 202, 227, 108, 114, 141, 29, 73, 187, 31, 13, 234, 0, 232, 24, 191, 35, 149, 179, 138, 214, 159, 245, 162, 148, 221, 118, 17, 105, 89, 151, 146, 209, 55, 236, 61, 143, 233, 228, 10, 115, 8, 81, 197, 45, 123, 187, 223, 176, 254, 165, 69, 143, 29, 100, 114, 17, 130, 226, 223, 33, 11, 240, 81, 61, 172, 191, 157, 246, 202, 87, 131, 221, 88, 48, 127, 159, 119, 160, 152, 117, 61, 253, 174, 65, 214, 203, 218, 63, 50, 78, 160, 181, 221, 211, 128, 70, 178, 191, 170, 0, 13, 122, 173, 12, 203, 252, 4, 184, 225, 252, 7, 62, 96, 116, 15, 216, 158, 55, 85, 48, 16, 9, 206, 119, 74, 112, 243, 136, 84, 184, 223, 254, 101, 91, 61, 10, 91, 85, 192, 147, 144, 57, 29, 66, 238, 199, 244, 193, 194, 150, 232, 200, 107, 2, 3, 1, 0, 1],\r\n  private: [48, 130, 4, 191, 2, 1, 0, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 4, 169, 48, 130, 4, 165, 2, 1, 0, 2, 130, 1, 1, 0, 228, 43, 101, 12, 121, 7, 157, 71, 81, 58, 219, 32, 10, 108, 193, 179, 212, 116, 255, 59, 217, 32, 161, 201, 53, 171, 226, 199, 137, 202, 171, 60, 82, 53, 125, 62, 177, 126, 165, 24, 141, 30, 15, 226, 59, 107, 34, 7, 13, 149, 112, 125, 10, 230, 191, 156, 164, 177, 10, 185, 13, 66, 3, 217, 166, 244, 90, 119, 111, 27, 145, 104, 71, 189, 166, 226, 255, 133, 83, 151, 231, 101, 151, 89, 22, 19, 65, 154, 10, 53, 208, 218, 252, 219, 37, 50, 212, 86, 145, 107, 132, 90, 233, 202, 227, 108, 114, 141, 29, 73, 187, 31, 13, 234, 0, 232, 24, 191, 35, 149, 179, 138, 214, 159, 245, 162, 148, 221, 118, 17, 105, 89, 151, 146, 209, 55, 236, 61, 143, 233, 228, 10, 115, 8, 81, 197, 45, 123, 187, 223, 176, 254, 165, 69, 143, 29, 100, 114, 17, 130, 226, 223, 33, 11, 240, 81, 61, 172, 191, 157, 246, 202, 87, 131, 221, 88, 48, 127, 159, 119, 160, 152, 117, 61, 253, 174, 65, 214, 203, 218, 63, 50, 78, 160, 181, 221, 211, 128, 70, 178, 191, 170, 0, 13, 122, 173, 12, 203, 252, 4, 184, 225, 252, 7, 62, 96, 116, 15, 216, 158, 55, 85, 48, 16, 9, 206, 119, 74, 112, 243, 136, 84, 184, 223, 254, 101, 91, 61, 10, 91, 85, 192, 147, 144, 57, 29, 66, 238, 199, 244, 193, 194, 150, 232, 200, 107, 2, 3, 1, 0, 1, 2, 130, 1, 0, 103, 244, 137, 118, 116, 82, 14, 203, 102, 107, 253, 88, 12, 199, 222, 60, 243, 136, 86, 157, 74, 224, 190, 53, 113, 57, 157, 250, 49, 130, 96, 31, 252, 136, 152, 70, 143, 17, 215, 96, 103, 51, 18, 35, 141, 212, 210, 205, 9, 216, 83, 70, 245, 71, 138, 119, 112, 229, 164, 176, 9, 37, 81, 161, 193, 154, 68, 249, 115, 106, 201, 6, 12, 225, 144, 126, 141, 210, 141, 242, 128, 159, 221, 163, 222, 21, 233, 230, 167, 206, 59, 24, 250, 233, 81, 122, 102, 26, 6, 233, 72, 133, 47, 77, 155, 238, 86, 6, 139, 24, 131, 163, 179, 112, 48, 247, 142, 6, 207, 204, 173, 223, 140, 199, 150, 95, 123, 152, 202, 155, 131, 238, 62, 96, 133, 4, 217, 51, 121, 30, 38, 178, 189, 216, 44, 35, 241, 93, 7, 62, 90, 111, 216, 66, 209, 243, 128, 234, 141, 84, 135, 181, 13, 38, 220, 114, 245, 240, 178, 95, 220, 206, 11, 186, 234, 213, 66, 121, 83, 68, 89, 75, 46, 183, 145, 183, 147, 160, 215, 118, 198, 125, 181, 146, 30, 251, 58, 87, 47, 209, 237, 97, 24, 47, 179, 6, 110, 242, 99, 150, 226, 148, 198, 174, 146, 101, 213, 87, 178, 10, 223, 105, 18, 56, 53, 22, 212, 158, 170, 176, 51, 86, 145, 125, 124, 44, 9, 85, 19, 144, 246, 170, 78, 124, 30, 32, 12, 166, 174, 139, 77, 63, 173, 82, 10, 153, 2, 129, 129, 0, 248, 18, 143, 246, 137, 136, 145, 219, 178, 39, 27, 94, 64, 90, 47, 163, 114, 60, 63, 187, 131, 143, 244, 16, 42, 128, 231, 117, 92, 98, 219, 155, 62, 107, 252, 17, 245, 45, 160, 225, 103, 142, 72, 36, 193, 150, 235, 214, 175, 62, 212, 56, 45, 9, 0, 60, 114, 107, 134, 228, 204, 131, 131, 214, 94, 201, 148, 159, 99, 139, 181, 13, 119, 38, 30, 107, 166, 165, 203, 43, 34, 20, 207, 171, 32, 58, 167, 62, 196, 153, 103, 204, 213, 247, 48, 111, 227, 59, 95, 97, 194, 187, 53, 10, 247, 108, 58, 86, 28, 29, 113, 8, 110, 171, 220, 245, 11, 82, 233, 223, 91, 68, 166, 117, 174, 187, 62, 77, 2, 129, 129, 0, 235, 118, 2, 105, 239, 212, 30, 104, 157, 41, 109, 11, 248, 152, 22, 236, 97, 40, 153, 131, 228, 5, 86, 187, 113, 126, 144, 76, 141, 79, 110, 250, 146, 152, 49, 58, 156, 201, 176, 92, 189, 209, 30, 112, 108, 175, 204, 204, 247, 164, 46, 129, 239, 98, 127, 49, 145, 218, 63, 193, 124, 174, 18, 98, 201, 99, 154, 162, 138, 78, 159, 253, 3, 248, 3, 209, 36, 239, 193, 155, 193, 5, 19, 236, 37, 78, 118, 135, 250, 199, 7, 141, 248, 120, 36, 136, 93, 98, 174, 60, 18, 215, 93, 174, 107, 141, 116, 145, 167, 221, 210, 169, 247, 67, 254, 222, 161, 134, 63, 221, 90, 87, 42, 99, 227, 81, 173, 151, 2, 129, 129, 0, 133, 23, 168, 103, 83, 232, 146, 160, 181, 23, 40, 38, 204, 13, 214, 203, 49, 41, 195, 227, 189, 181, 8, 243, 119, 106, 75, 67, 250, 250, 10, 234, 98, 118, 26, 250, 35, 121, 132, 124, 10, 76, 26, 198, 165, 154, 108, 19, 117, 88, 23, 17, 192, 143, 184, 177, 181, 141, 157, 4, 185, 248, 193, 77, 204, 243, 7, 170, 240, 4, 111, 113, 183, 0, 27, 136, 20, 19, 149, 74, 33, 241, 218, 108, 236, 80, 171, 148, 16, 116, 97, 109, 83, 74, 88, 145, 94, 239, 102, 192, 19, 114, 207, 5, 128, 51, 111, 164, 237, 86, 154, 99, 52, 197, 62, 57, 182, 6, 152, 245, 61, 137, 58, 105, 159, 2, 84, 109, 2, 129, 129, 0, 226, 67, 111, 132, 95, 91, 101, 177, 63, 189, 44, 53, 193, 184, 92, 230, 223, 98, 133, 74, 209, 86, 52, 7, 65, 195, 206, 100, 81, 178, 144, 65, 167, 151, 42, 79, 89, 149, 18, 173, 188, 21, 244, 251, 49, 230, 41, 150, 153, 46, 35, 38, 231, 99, 174, 56, 115, 32, 215, 253, 85, 147, 108, 197, 147, 34, 236, 216, 222, 177, 57, 90, 136, 114, 207, 48, 46, 31, 90, 220, 18, 58, 143, 239, 111, 214, 27, 95, 6, 36, 53, 229, 62, 108, 45, 39, 1, 30, 47, 178, 56, 164, 206, 56, 42, 208, 46, 193, 61, 31, 147, 45, 147, 23, 187, 22, 50, 255, 111, 229, 132, 199, 152, 75, 142, 136, 209, 151, 2, 129, 129, 0, 165, 56, 232, 76, 55, 57, 240, 159, 92, 207, 220, 143, 130, 30, 57, 234, 251, 172, 171, 180, 54, 159, 229, 96, 246, 73, 112, 146, 75, 157, 242, 201, 161, 218, 37, 176, 35, 170, 50, 90, 148, 102, 191, 199, 239, 174, 78, 72, 67, 85, 199, 45, 149, 145, 132, 161, 212, 33, 157, 75, 216, 79, 39, 233, 18, 210, 255, 26, 72, 229, 239, 44, 12, 147, 158, 176, 192, 95, 126, 32, 175, 23, 226, 131, 139, 197, 175, 193, 62, 8, 151, 252, 68, 154, 94, 89, 189, 125, 90, 30, 36, 175, 73, 230, 194, 13, 233, 247, 123, 60, 241, 47, 171, 51, 189, 112, 111, 213, 141, 89, 70, 249, 236, 63, 236, 110, 115, 208]};\r\n*/\n\n\n/* harmony default export */ var cryptoManager_CryptoManager = (new CryptoManager_CryptoManager());\n// CONCATENATED MODULE: ./src/runtime/Loader.js\nfunction Loader_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Loader_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Loader_createClass(Constructor, protoProps, staticProps) { if (protoProps) Loader_defineProperties(Constructor.prototype, protoProps); if (staticProps) Loader_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar Loader_log = loglevel[\"getLogger\"]('Loader'); //import path from 'path';\n//import System from 'systemjs/dist/system';\n\n\n\n\nvar Loader_Loader =\n/*#__PURE__*/\nfunction () {\n  function Loader(runtimeURL, runtimeConfiguration, runtimeDescriptorsInstance) {\n    Loader_classCallCheck(this, Loader);\n\n    if (!runtimeConfiguration) throw Error('[Runtime.Loader] The descriptor need to know the runtime configuration');\n    if (!runtimeDescriptorsInstance) throw Error('[Runtime.Loader] The descriptor need to know the runtime Descriptor instance');\n    this.log = Loader_log;\n    this.runtimeConfiguration = runtimeConfiguration;\n    this.descriptors = runtimeDescriptorsInstance;\n    console.log(System);\n    console.log(allocation_AddressAllocation); //    System.noConflict();\n  }\n  /**\r\n   * Set runtime url\r\n   * @param  {string} value runtimeURL\r\n   */\n\n\n  Loader_createClass(Loader, [{\n    key: \"loadHyperty\",\n\n    /**\r\n     * Deploy Hyperty from Catalogue URL\r\n     *\r\n     * @see https://github.com/reTHINK-project/specs/tree/master/datamodel/core/address\r\n     *\r\n     * @param {URL.HypertyCatalogueURL} hypertyCatalogueURL - The Catalogue URL used to identify descriptors in the Catalogue.\r\n     * @param {boolean|URL.HypertyURL} [reuseURL=false] reuseURL - reuseURL is used to reuse the hypertyURL previously registred, by default the reuse is disabled;\r\n     * @param {URL} appURL - the app url origin address;\r\n     * @param {object} IdpConstraint - constraints to be used when selecting the identity to be associated with the Hyperty including origin, idp, and idHint.\r\n     * @returns {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\r\n     *\r\n     * @memberOf Loader\r\n     */\n    value: function loadHyperty(hypertyUrl) {\n      var _this = this;\n\n      var reuseURL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var IdpConstraint = arguments.length > 2 ? arguments[2] : undefined;\n      var appURL = arguments.length > 3 ? arguments[3] : undefined;\n      if (!this._readyToUse()) return false;\n      if (!hypertyUrl) throw new Error('[Runtime.Loader] hypertyUrl parameter is needed');\n\n      var _hypertyURL;\n\n      var _hypertySandbox; //    let _hypertySourcePackage;\n\n\n      var haveError = false; //    let hyperty = instance.name;\n\n      var descriptorUrl = hypertyUrl.replace('.js', '.json');\n      var hyperty;\n      return new Promise(function (resolve, reject) {\n        var errorReason = function errorReason(reason) {\n          Loader_log.info('[Runtime.Loader] Something failed on the deploy hyperty: ', reason);\n          reject(reason);\n        };\n\n        var handleError = function handleError(reason) {\n          haveError = true;\n          reject(reason);\n        };\n\n        System[\"import\"](hypertyUrl).then(function (result) {\n          hyperty = new result[\"default\"]();\n          Loader_log.log('[Loader._load] first import result ' + hyperty.name);\n          return;\n        }).then(function () {\n          return _this.descriptors.getDescriptor(descriptorUrl);\n        }).then(function (descriptor) {\n          Loader_log.info('[Runtime.Loader.loadHyperty] hyperty Instance ', hyperty);\n          var _hypertyDescriptor = descriptor;\n          _hypertyDescriptor.dataObjects[0] = _hypertyDescriptor.dataObjects[0].replace('%domain%', _this._registry._domain); // at this point, we have completed \"step 2 and 3\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\n\n          Loader_log.info('[Runtime.Loader] 1: return hyperty descriptor: ', _hypertyDescriptor);\n          _hypertySandbox = _this.registry.getAppSandbox();\n          var numberOfAddresses = 1; //debugger;\n\n          _this._addressAllocation.create(_this._registry._domain, numberOfAddresses, _hypertyDescriptor, 'hyperty', reuseURL).then(function (addresses) {\n            if (haveError) return false;\n            Loader_log.info('[Runtime.Loader] 6: return the addresses for the hyperty', addresses); // Register hyperty\n\n            return _this.registry.registerHyperty(_hypertySandbox, descriptorUrl, _hypertyDescriptor, addresses, IdpConstraint);\n          }, handleError).then(function (registrationResult) {\n            if (haveError) return false;\n            Loader_log.info('[Runtime.Loader] 7: registration result', registrationResult); // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n            _hypertyURL = registrationResult.url; // Extend original hyperty configuration;\n\n            var configuration = {};\n\n            if (!Object(utils[\"l\" /* emptyObject */])(_hypertyDescriptor.configuration)) {\n              try {\n                configuration = Object.assign({}, JSON.parse(_hypertyDescriptor.configuration));\n              } catch (e) {\n                configuration = _hypertyDescriptor.configuration;\n              }\n            }\n\n            configuration.runtimeURL = _this._runtimeURL;\n\n            if (registrationResult.p2pHandler) {\n              configuration.p2pHandler = registrationResult.p2pHandler;\n              configuration.p2pRequester = registrationResult.p2pRequester;\n            } // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n\n            try {\n              //            return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);\n              return _hypertySandbox.deployComponent(hyperty, _hypertyURL, configuration);\n            } catch (e) {\n              Loader_log.info('[Runtime.Loader] Error on deploy component:', e);\n              reject(e);\n            }\n          }, handleError).then(function (deployComponentStatus) {\n            if (haveError) return false;\n            Loader_log.info('[Runtime.Loader] 8: Deploy component status for hyperty: ', deployComponentStatus); // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n            // Add the message bus listener to the appSandbox or hypertSandbox;\n\n            _this.messageBus.addListener(_hypertyURL, function (msg) {\n              _hypertySandbox.postMessage(msg);\n            }); // Add the message bus listener to the appSandbox or hypertSandbox;\n\n\n            _this.messageBus.addListener(_this.runtimeURL + '/status', function (msg) {\n              _hypertySandbox.postMessage(msg);\n            }); // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n\n            var deployed = {\n              runtimeHypertyURL: _hypertyURL,\n              status: deployComponentStatus,\n              name: hyperty.name,\n              instance: hyperty\n            };\n            Loader_log.info('[Runtime.Loader] Hyperty deployed: ', deployed);\n            resolve(hyperty); // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n            Loader_log.info('[Runtime.Loader] ------------------ END ------------------------');\n          }, handleError)[\"catch\"](errorReason);\n        });\n      });\n    }\n    /**\r\n    * Deploy Stub from Catalogue URL or domain url\r\n    * @param  {URL.URL}     protostubURL    Catalogue URL for the ProtoStub to be loaded or the domain to be target by the protostub\r\n    * @param  {Object}      p2pConfig       configuration of p2p\r\n    */\n\n  }, {\n    key: \"loadStub\",\n    value: function loadStub(protostubURL, p2pConfig) {\n      var _this2 = this;\n\n      if (!this._readyToUse()) return false;\n      if (!protostubURL) throw new Error('[Runtime.Loader.loadStub]ProtoStub descriptor url parameter is needed');\n      return new Promise(function (resolve, reject) {\n        // to analyse if domain for p2pHandlers should be something else and not the default domain itself\n        var domain = Object(utils[\"k\" /* divideURL */])(protostubURL).domain;\n\n        if (!domain) {\n          domain = protostubURL;\n        }\n\n        var _stubSandbox;\n\n        var _stubDescriptor;\n\n        var _runtimeProtoStubURL;\n\n        var _stubSourcePackage;\n\n        var haveError = false;\n        var stubId;\n        var stubInstance;\n\n        var errorReason = function errorReason(reason) {\n          Loader_log.info('[Runtime.Loader.loadStub]Something failed on the deploy of protocolstub: ', reason);\n          reject(reason);\n        };\n\n        var handleError = function handleError(reason) {\n          haveError = true;\n          reject(reason);\n        }; // Discover Protocol Stub\n\n\n        var discoverStub;\n        var isP2PHandler = false;\n        var isP2PRequester = false;\n        var stubCapabilities = {};\n        Loader_log.info('[Runtime.Loader.loadStub] starting loading for ', protostubURL, ' with p2pconfig ', p2pConfig);\n        Loader_log.info('[Runtime.Loader.loadStub]Discover or Create a new ProtoStub for domain: ', domain); // step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n        try {\n          if (p2pConfig) {\n            if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {\n              // step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              isP2PHandler = true;\n              stubId = _this2.runtimeURL;\n              discoverStub = _this2.registry.discoverP2PStub();\n            } else {\n              isP2PRequester = true;\n              var p2pHandlerRuntimeURL = p2pConfig.remoteRuntimeURL;\n              stubId = p2pHandlerRuntimeURL; // step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              // step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n              discoverStub = _this2.registry.discoverP2PStub(p2pHandlerRuntimeURL);\n            }\n          } else {\n            // step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            stubId = domain;\n            discoverStub = _this2.registry.discoverProtostub(domain);\n          } // Is registed?\n\n\n          Loader_log.info('[Runtime.Loader.loadStub]1. Proto Stub Discovered for ', protostubURL, ': ', discoverStub); // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          resolve(discoverStub);\n          Loader_log.info(' [Runtime.Loader]------------------- END ---------------------------\\n');\n        } catch (reason) {\n          // is not registed?\n          Loader_log.info('[Runtime.Loader.loadStub]1. Proto Stub not found ' + reason); // see promise chaining at https://javascript.info/promise-chaining\n          // step 8 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          return _this2._load('protocolstub', protostubURL).then(function (result) {\n            if (haveError) return false; // step 9 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _stubDescriptor = result.descriptor;\n            Loader_log.info('[Runtime.Loader.loadStub]2. return the ProtoStub descriptor ', _stubDescriptor);\n            stubInstance = result.instance;\n            /*            let sourcePackageURL = stubDescriptor.sourcePackageURL;\r\n            \r\n                        if (sourcePackageURL === '/sourcePackage') {\r\n                          return stubDescriptor.sourcePackage;\r\n                        }*/\n            // step 10 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            //            return this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n\n            /*          }, handleError)\r\n                      .catch(errorReason)\r\n                      .then((stubSourcePackage) => {\r\n                        if (haveError) return false;*/\n            // According to debug, it seems RuntimeCatalogue does not support yet constraints. It appears empty!!!!\n\n            if (_stubDescriptor && _stubDescriptor.constraints) {\n              stubCapabilities = _stubDescriptor.constraints;\n            } // step 11 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n\n            Loader_log.info('[Runtime.Loader.loadStub]3. return the ProtoStub Source Code'); //            _stubSourcePackage = stubSourcePackage;\n            // this will return the sandbox or one promise to getSandbox;\n            // step 12 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            return _this2.registry.getSandbox(domain, stubCapabilities);\n          }).then(function (stubSandbox) {\n            if (haveError) return false; // step 15 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            Loader_log.info('[Runtime.Loader.loadStub]4. if the sandbox is registered then return the sandbox ', stubSandbox);\n            _stubSandbox = stubSandbox;\n            return stubSandbox;\n          })[\"catch\"](function (reason) {\n            if (haveError) return false; // step 13 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            Loader_log.info('[Runtime.Loader.loadStub]5. Sandbox was not found, creating a new one ', reason); // check if the sandbox is registed for this stub descriptor url;\n            // step 14 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            return _this2._runtimeFactory.createSandbox(stubCapabilities).then(function (sandbox) {\n              sandbox.addListener('*', function (msg) {\n                _this2.messageBus.postMessage(msg);\n              });\n              return sandbox;\n            });\n          }).then(function (sandbox) {\n            if (haveError) return false; // step 16 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            Loader_log.info('[Runtime.Loader.loadStub]6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n            _stubSandbox = sandbox; // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            return _this2.registry.registerStub(_stubSandbox, stubId, p2pConfig, protostubURL, _stubDescriptor);\n          }, handleError).then(function (runtimeProtoStub) {\n            if (haveError) return false; // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            Loader_log.info('[Runtime.Loader.loadStub] 7. return the runtime protostub url: ', runtimeProtoStub);\n            _runtimeProtoStubURL = runtimeProtoStub.url; // Extend original hyperty configuration;\n\n            var configuration = {};\n\n            if (!Object(utils[\"l\" /* emptyObject */])(_stubDescriptor.configuration)) {\n              try {\n                configuration = Object.assign({}, JSON.parse(_stubDescriptor.configuration));\n              } catch (e) {\n                configuration = _stubDescriptor.configuration;\n              }\n            }\n\n            if (p2pConfig) {\n              try {\n                configuration = Object.assign(configuration, JSON.parse(p2pConfig));\n              } catch (e) {\n                configuration = Object.assign(configuration, p2pConfig);\n              }\n            } // required for protostub session\n\n\n            configuration.runtimeURL = _this2._runtimeURL; // step 24 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            try {\n              // step 26 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              Loader_log.info('[Runtime.Loader.loadStub] 8: adding sandbox listener to protostubURL : ', _runtimeProtoStubURL); // step 27 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              // Add the message bus listener\n\n              _this2.messageBus.addListener(_runtimeProtoStubURL, function (msg) {\n                _stubSandbox.postMessage(msg);\n              });\n\n              return _stubSandbox.deployComponent(stubInstance, _runtimeProtoStubURL, configuration);\n            } catch (e) {\n              Loader_log.error('[Runtime.Loader.loadStub] Error on deploy component:', e);\n              reject(e);\n            }\n          }, handleError).then(function () {\n            if (haveError) return false; // step 28 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            var registeredStub;\n\n            if (p2pConfig) {\n              Loader_log.log('[Runtime.Loader.loadStub] p2pConfig: ', p2pConfig);\n              if (p2pConfig.hasOwnProperty('isHandlerStub')) registeredStub = _this2.registry.p2pHandlerStub[_this2._runtimeURL];\n              if (p2pConfig.hasOwnProperty('p2pRequesterStub')) registeredStub = _this2.registry.p2pRequesterStub[p2pConfig.remoteRuntimeURL];\n            } else {\n              registeredStub = _this2.registry.protostubsList[domain];\n            }\n\n            Loader_log.log('[Runtime.Loader.loadStub] Stub: ', registeredStub);\n            resolve(stubInstance);\n            Loader_log.info('[Runtime.Loader.loadStub]------------------- END ---------------------------\\n');\n          }, handleError)[\"catch\"](errorReason);\n        }\n      });\n    }\n  }, {\n    key: \"_load\",\n    value: function _load(type, url) {\n      var _this3 = this;\n\n      //    return new Promise((resolve, reject) => {\n      var domain;\n      var stub;\n      var originDividedURL = Object(utils[\"k\" /* divideURL */])(this.runtimeURL);\n      var originDomain = originDividedURL.domain;\n      var loader = new System.constructor();\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(url);\n      domain = dividedURL.domain;\n      var path = dividedURL.identity;\n      /*      let constraints = this.constraints;\r\n      \r\n            constraints.constraints.onlyAccessToken = true;\r\n            constraints.constraints.onlyIdAssertionValidation = true;\r\n            console.log('LOG HERE', constraints);*/\n\n      if (url.includes('://')) {\n        domain = dividedURL.domain;\n\n        if (path) {\n          stub = path.substring(path.lastIndexOf('/') + 1);\n        } else {\n          stub = 'default';\n        }\n      } else {\n        stub = 'default';\n        domain = url;\n      }\n\n      var resource = Object(utils[\"o\" /* getConfigurationResources */])(this.runtimeConfiguration, 'catalogueURLs', type);\n      var ext = type === 'idp-proxy' ? '.idp' : '.ps';\n      var loadingUrl = resource.prefix + domain + resource.suffix + stub + ext + '.js';\n      Loader_log.log('[Loader._load] first import for ' + url);\n      var protostubURL = resource.prefix + domain + resource.suffix + stub + ext + '.json';\n      return loader[\"import\"](loadingUrl).then(function (result) {\n        var instance = new result[\"default\"]();\n        Loader_log.log('[Loader._load] first import result ' + instance.name);\n        return instance;\n      }).then(function (instance) {\n        return _this3.descriptors.getDescriptor(protostubURL, instance).then(function (descriptor) {\n          return {\n            \"descriptor\": descriptor,\n            \"instance\": instance\n          };\n        });\n      })[\"catch\"](function () {\n        stub = domain;\n        domain = originDomain;\n        var loadingUrl2 = Object(utils[\"c\" /* buildURL */])(_this3.runtimeConfiguration, 'catalogueURLs', type, stub, true);\n        var descriptorUrl2 = loadingUrl2.replace('.js', '.json');\n        Loader_log.log('[Loader._load] 2nd import for ' + loadingUrl2);\n        return loader[\"import\"](loadingUrl2).then(function (result2) {\n          var instance2 = new result2[\"default\"]();\n          Loader_log.log('[Loader._load] 2nd import result ' + instance2.name);\n          return instance2;\n        }).then(function (inst) {\n          return _this3.descriptors.getDescriptor(descriptorUrl2).then(function (desc) {\n            // return function or json\n            return {\n              \"descriptor\": desc,\n              \"instance\": inst\n            };\n          });\n        });\n      });\n    }\n    /**\r\n    * Deploy idpProxy from Catalogue URL or domain url\r\n    * @param  {URL.URL}     domain          domain\r\n    */\n\n  }, {\n    key: \"loadIdpProxy\",\n    value: function loadIdpProxy(idpProxyURL) {\n      var _this4 = this;\n\n      if (!this._readyToUse()) return false;\n      if (!idpProxyURL) throw new Error('[Runtime.Loader] IdpProxy descriptor url parameter is needed');\n      return new Promise(function (resolve, reject) {\n        var domain = Object(utils[\"k\" /* divideURL */])(idpProxyURL).domain;\n\n        if (!domain) {\n          domain = idpProxyURL;\n        }\n\n        var _proxySandbox;\n\n        var _proxyDescriptor;\n\n        var _runtimeIdpProxyURL;\n\n        var _proxySourcePackage;\n\n        var haveError = false;\n        var idpProxy;\n\n        var errorReason = function errorReason(reason) {\n          Loader_log.info('[Runtime.Loader] Something failed on the deploy of IdpProxy: ', reason);\n          reject(reason);\n        };\n\n        var handleError = function handleError(reason) {\n          haveError = true;\n          reject(reason);\n        }; // Discover IDPProxy\n\n\n        Loader_log.info('[Runtime.Loader] ------------------- IDP Proxy Deploy ---------------------------\\n');\n        Loader_log.info('[Runtime.Loader] Discover or Create a new IdpProxy for domain/URL: ', domain);\n\n        try {\n          var runtimeIdpProxyURL = _this4.registry.discoverIdpProxy(domain); // Is registed?\n\n\n          Loader_log.info('[Runtime.Loader] 1. IDPProxy Discovered: ', runtimeIdpProxyURL); // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          var _idpProxy = _this4.registry.idpProxyList[domain];\n          Loader_log.log('Deployed: ', _idpProxy);\n          resolve(_idpProxy);\n          Loader_log.info('[Runtime.Loader] ------------------- END ---------------------------\\n');\n        } catch (reason) {\n          // is not registed?\n          Loader_log.info('[Runtime.Loader] 1. IdpProxy not found:', reason); // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          // this.descriptors.getIdpProxyDescriptor(idpProxyURL)\n\n          _this4._load('idp-proxy', idpProxyURL).then(function (result) {\n            Loader_log.info('[Runtime.Loader] 2. Return the IDPProxy descriptor'); // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _proxyDescriptor = result.descriptor;\n            idpProxy = result.instance;\n            /*            let sourcePackageURL = proxyDescriptor.sourcePackageURL;\r\n            \r\n                        if (sourcePackageURL === '/sourcePackage') {\r\n                          return proxyDescriptor.sourcePackage;\r\n                        }\r\n            \r\n                        // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n                        return this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\r\n                      }, handleError)\r\n                      .then((sourcePackage) => {\r\n                        if (haveError) return false;\r\n                        log.info('[Runtime.Loader] 3. return the IDPProxy source package');\r\n            \r\n                        // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\r\n            \r\n                        _proxySourcePackage = sourcePackage;\r\n            \r\n                        // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;\r\n                        let policy = true;\r\n                        return policy;\r\n                      }, handleError)\r\n                      .then((policy) => {\r\n                        if (haveError) return false;*/\n            // this will return the sandbox or one promise to getSandbox;\n\n            return _this4.registry.getSandbox(domain);\n          }).then(function (proxySandbox) {\n            if (haveError) return false;\n            Loader_log.info('[Runtime.Loader] 4. if the sandbox is registered then return the sandbox', proxySandbox);\n            _proxySandbox = proxySandbox;\n            return proxySandbox;\n          })[\"catch\"](function (reason) {\n            if (haveError) return false;\n            Loader_log.info('[Runtime.Loader] 5. Sandbox was not found, creating a new one', reason);\n            var proxyCapabilities = {};\n\n            if (_proxyDescriptor && _proxyDescriptor.hasOwnProperty('capabilities')) {\n              _proxyDescriptor = _proxyDescriptor.stubCapabilities;\n            }\n\n            return _this4._runtimeFactory.createSandbox(proxyCapabilities).then(function (sandbox) {\n              sandbox.addListener('*', function (msg) {\n                _this4.messageBus.postMessage(msg);\n              });\n              return sandbox;\n            });\n          }).then(function (sandbox) {\n            if (haveError) return false;\n            Loader_log.info('[Runtime.Loader] 6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n            _proxySandbox = sandbox; // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            return _this4.registry.registerIdpProxy(sandbox, domain);\n          }, handleError).then(function (runtimeIdpProxyURL) {\n            if (haveError) return false;\n            Loader_log.info('[Runtime.Loader] 7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL); // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _runtimeIdpProxyURL = runtimeIdpProxyURL; // Extend original hyperty configuration;\n\n            var configuration = {};\n\n            if (!Object(utils[\"l\" /* emptyObject */])(_proxyDescriptor.configuration)) {\n              try {\n                configuration = Object.assign({}, JSON.parse(_proxyDescriptor.configuration));\n              } catch (e) {\n                configuration = _proxyDescriptor.configuration;\n              }\n            }\n\n            configuration.runtimeURL = _this4._runtimeURL; // Deploy Component step xxx\n\n            try {\n              // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              // Add the message bus listener\n              _this4.messageBus.addListener(_runtimeIdpProxyURL, function (msg) {\n                _proxySandbox.postMessage(msg);\n              });\n\n              return _proxySandbox.deployComponent(idpProxy, runtimeIdpProxyURL, configuration);\n            } catch (e) {\n              Loader_log.info('[Runtime.Loader] Error on deploy component:', e);\n              reject(e);\n            }\n          }, handleError).then(function () {\n            if (haveError) return false; // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            // Load Stub function resolved with success;\n            // let idpProxy = {\n            //   runtimeIdpProxyURL: _runtimeIdpProxyURL,\n            //   status: deployComponentStatus\n            // };\n            //this.registry.idpProxyList[domain].status = 'deployed';\n\n            var registeredIdpProxy = _this4.registry.idpProxyList[domain];\n            Loader_log.log('[Runtime.Loader.loadIdpProxy] 8: loaded: ', registeredIdpProxy);\n            resolve(registeredIdpProxy);\n            Loader_log.info('[Runtime.Loader.loadIdpProxy] ------------------- END ---------------------------\\n');\n          }, handleError)[\"catch\"](errorReason);\n        }\n      });\n    } // Check if the loader is ready to load all components\n\n  }, {\n    key: \"_readyToUse\",\n    value: function _readyToUse() {\n      var status = false;\n      if (!this._runtimeURL) throw new Error('[Runtime.Loader] The loader need the runtime url address');\n      if (!this._messagesBus) throw new Error('[Runtime.Loader] The loader need the messageBus component');\n      if (!this._registry) throw new Error('[Runtime.Loader] The loader need the registry component');\n      if (!this._runtimeFactory) throw new Error('[Runtime.Loader] The loader need the runtime factory component');\n      status = true;\n      return status;\n    }\n  }, {\n    key: \"runtimeURL\",\n    set: function set(value) {\n      this._runtimeURL = value;\n    }\n    /**\r\n     * Get runtime url\r\n     * @return {string} value runtimeURL\r\n     */\n    ,\n    get: function get() {\n      return this._runtimeURL;\n    }\n    /**\r\n     * Set Registry component\r\n     * @param  {Registry} value Registry Component\r\n     */\n\n  }, {\n    key: \"registry\",\n    set: function set(value) {\n      this._registry = value; // Install AddressAllocation\n\n      var addressAllocation = allocation_AddressAllocation.instance;\n      this._addressAllocation = addressAllocation;\n      Loader_log.log('[Loader - AddressAllocation] - ', addressAllocation);\n    }\n    /**\r\n     * Get Registry component\r\n     * @return {Registry} Registry component\r\n     */\n    ,\n    get: function get() {\n      return this._registry;\n    }\n    /**\r\n     * Set Message Bus component\r\n     * @param  {MessageBus} value Message bus component\r\n     */\n\n  }, {\n    key: \"messageBus\",\n    set: function set(value) {\n      this._messagesBus = value;\n    }\n    /**\r\n     * Get Message Bus component\r\n     * @return {MessageBus} Message Bus component\r\n     */\n    ,\n    get: function get() {\n      return this._messagesBus;\n    }\n    /**\r\n     * Set Runtime Factory component\r\n     * @param  {runtimeFactory} value Factory includes the specific implementations for each environment\r\n     */\n\n  }, {\n    key: \"runtimeFactory\",\n    set: function set(value) {\n      this._runtimeFactory = value;\n    }\n    /**\r\n     * Get Runtime Factory component\r\n     * @return {runtimeFactory} Runtime Factory component\r\n     */\n    ,\n    get: function get() {\n      return this._runtimeFactory;\n    }\n  }]);\n\n  return Loader;\n}();\n\n/* harmony default export */ var runtime_Loader = (Loader_Loader);\n// CONCATENATED MODULE: ./src/runtime/Storage.js\n\nvar storages = {};\nfunction Storage_storage(runtimeFactory, runtimeStatusUpdate) {\n  if (!runtimeFactory) throw new Error('The runtime factory is a needed parameter');\n  console.log('[Storage.storage] storageSchemas ', runtimeConfiguration_runtimeConfiguration.storageSchemas);\n  Object.keys(runtimeConfiguration_runtimeConfiguration.storageSchemas).forEach(function (key) {\n    if (!storages.hasOwnProperty(key)) {\n      storages[key] = runtimeFactory.storageManager(key, runtimeConfiguration_runtimeConfiguration.storageSchemas[key], runtimeStatusUpdate);\n    }\n  });\n  return storages;\n}\nfunction createSyncDB(name, runtimeFactory) {\n  var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!name) throw new Error('[Runtime.Storage.createSyncDB] name is a needed parameter');\n  if (!runtimeFactory) throw new Error('[Runtime.Storage.createSyncDB] The runtime factory is a needed parameter');\n  var remote = url ? url : runtimeConfiguration_runtimeConfiguration.remoteStorage;\n  return runtimeFactory.syncStorageManager(name, remote);\n}\n// CONCATENATED MODULE: ./src/runtime/Descriptors.js\nfunction Descriptors_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Descriptors_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Descriptors_createClass(Constructor, protoProps, staticProps) { if (protoProps) Descriptors_defineProperties(Constructor.prototype, protoProps); if (staticProps) Descriptors_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar Descriptors_log = loglevel[\"getLogger\"]('Descriptors');\n\nvar Descriptors_Descriptors =\n/*#__PURE__*/\nfunction () {\n  function Descriptors(runtimeURL, runtimeConfiguration) {\n    Descriptors_classCallCheck(this, Descriptors);\n\n    if (!runtimeURL) throw Error('The descriptor need to know the runtime url to be used');\n    if (!runtimeConfiguration) throw Error('The descriptor needs the runtime configuration');\n    this.log = Descriptors_log;\n    this.runtimeConfiguration = runtimeConfiguration;\n    this.runtimeURL = runtimeURL;\n    this.constraints = runtimeUtils.runtimeCapabilities;\n  }\n\n  Descriptors_createClass(Descriptors, [{\n    key: \"getDescriptor\",\n    value: function getDescriptor(url) {\n      return fetch(url).then(function (result) {\n        return result.json();\n      });\n    }\n  }, {\n    key: \"getHypertyDescriptor\",\n    value: function getHypertyDescriptor(hypertyURL) {\n      return this.catalogue.getHypertyDescriptor(hypertyURL, true, this.constraints);\n    }\n  }, {\n    key: \"getStubDescriptor\",\n    value: function getStubDescriptor(stubURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var domain;\n        var protostub;\n        var protoStubURL;\n        var originDividedURL = Object(utils[\"k\" /* divideURL */])(_this.runtimeURL);\n        var originDomain = originDividedURL.domain;\n\n        if (stubURL.includes('://')) {\n          var dividedURL = Object(utils[\"k\" /* divideURL */])(stubURL);\n          domain = dividedURL.domain;\n          var path = dividedURL.identity;\n\n          if (path) {\n            protostub = path.substring(path.lastIndexOf('/') + 1);\n          } else {\n            protostub = 'default';\n          }\n        } else {\n          protostub = 'default';\n          domain = stubURL;\n        }\n\n        protoStubURL = Object(utils[\"c\" /* buildURL */])(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub', protostub);\n\n        if (domain !== _this.runtimeConfiguration.domain) {\n          if (!stubURL.indexOf('https') || !stubURL.indexOf('hyperty-catalogue')) {\n            protoStubURL = stubURL;\n          } else {\n            // TODO: check how to load form different configuration domain\n            var resource = Object(utils[\"o\" /* getConfigurationResources */])(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');\n            protoStubURL = resource.prefix + domain + resource.suffix + protostub;\n          }\n        }\n\n        Descriptors_log.log('Load ProtocolStub for domain, ' + domain + ' : ', protoStubURL);\n        return _this.catalogue.getStubDescriptor(protoStubURL, true, _this.constraints).then(function (result) {\n          resolve(result);\n        })[\"catch\"](function (error) {\n          // log.log('Error: ', error);\n          protostub = domain;\n          domain = originDomain;\n          var resource = Object(utils[\"o\" /* getConfigurationResources */])(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');\n          protoStubURL = resource.prefix + domain + resource.suffix + protostub; // log.log('Fallback -> Load Protocolstub for domain, ' + domain + ' : ', protostub);\n\n          return _this.catalogue.getStubDescriptor(protoStubURL, true, _this.constraints);\n        }).then(function (result) {\n          resolve(result);\n        })[\"catch\"](function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"getIdpProxyDescriptor\",\n    value: function getIdpProxyDescriptor(idpProxyURL) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var domain;\n        var idpproxy;\n        var originDividedURL = Object(utils[\"k\" /* divideURL */])(_this2.runtimeURL);\n        var originDomain = originDividedURL.domain;\n        var constraints = _this2.constraints;\n        constraints.constraints.onlyAccessToken = true;\n        constraints.constraints.onlyIdAssertionValidation = true;\n        console.log('LOG HERE', constraints);\n\n        if (idpProxyURL.includes('://')) {\n          var dividedURL = Object(utils[\"k\" /* divideURL */])(idpProxyURL);\n          domain = dividedURL.domain;\n          var path = dividedURL.identity;\n\n          if (path) {\n            idpproxy = path.substring(path.lastIndexOf('/') + 1);\n          } else {\n            idpproxy = 'default';\n          }\n        } else {\n          idpproxy = 'default';\n          domain = idpProxyURL;\n        }\n\n        var resource = Object(utils[\"o\" /* getConfigurationResources */])(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy');\n        idpProxyURL = resource.prefix + domain + resource.suffix + idpproxy; // log.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);\n\n        return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL, true, constraints).then(function (result) {\n          resolve(result);\n        })[\"catch\"](function () {\n          idpproxy = domain;\n          domain = originDomain;\n          idpProxyURL = Object(utils[\"c\" /* buildURL */])(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy', idpproxy); // log.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);\n\n          return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL, true, constraints);\n        }).then(function (result) {\n          resolve(result);\n        })[\"catch\"](function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }]);\n\n  return Descriptors;\n}();\n\n/* harmony default export */ var runtime_Descriptors = (Descriptors_Descriptors);\n// CONCATENATED MODULE: ./src/discovery/CoreDiscovery.js\nfunction CoreDiscovery_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction CoreDiscovery_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction CoreDiscovery_createClass(Constructor, protoProps, staticProps) { if (protoProps) CoreDiscovery_defineProperties(Constructor.prototype, protoProps); if (staticProps) CoreDiscovery_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar CoreDiscovery_log = loglevel[\"getLogger\"]('CoreDiscovery');\n\n/**\r\n* Core Discovery interface\r\n* Class to allow applications to search for hyperties and DataObjects using the message bus\r\n*/\n\nvar CoreDiscovery_CoreDiscovery =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * To initialise the Discovery, which will provide the support for hyperties to\r\n  * query users registered in outside the internal core.\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  * @param  {RuntimeURL}          runtimeURL            runtimeURL\r\n  * @param  {graphConnector}    graphConnector\r\n  */\n  function CoreDiscovery(runtimeURL, msgBus, graphConnector, runtimeFactory, registry) {\n    CoreDiscovery_classCallCheck(this, CoreDiscovery);\n\n    if (!runtimeFactory) throw Error('The catalogue needs the runtimeFactory');\n\n    var _this = this;\n\n    this._messageBus = msgBus;\n    _this.graphConnector = graphConnector;\n    _this.httpRequest = runtimeFactory.createHttpRequest();\n    _this.domain = Object(utils[\"k\" /* divideURL */])(runtimeURL).domain;\n    _this.discoveryURL = runtimeURL + '/discovery/';\n    _this.registry = registry;\n\n    _this.messageBus.addListener(_this.discoveryURL, function (msg) {\n      _this.discoveryManager(msg).then(function (result) {\n        //FLOW-OUT: message response\n        _this.messageBus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 200,\n            value: result\n          }\n        });\n      })[\"catch\"](function (err) {\n        var description;\n        var code;\n\n        if (err === 'GraphConnector') {\n          description = 'This search is not available at the moment. Try later.';\n          code = 500;\n        } else {\n          description = 'Not Found';\n          code = 404;\n        } //FLOW-OUT: error message response\n\n\n        _this.messageBus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: code,\n            description: description\n          }\n        });\n      });\n    });\n  }\n  /**\r\n   * Returns the MessageBus.\r\n   */\n\n\n  CoreDiscovery_createClass(CoreDiscovery, [{\n    key: \"discoveryManager\",\n\n    /* function to decide what discovery method to call and later return the response msg  */\n    value: function discoveryManager(msg) {\n      var _this = this;\n\n      var domain = Object(utils[\"k\" /* divideURL */])(msg.from).domain;\n      var atributes = msg.body.resource.split('/').filter(Boolean);\n      var resources = [];\n      var dataSchemes = [];\n      CoreDiscovery_log.log('[CoreDiscovery.discoveryManager] received: ', msg);\n\n      if (msg.body.criteria) {\n        if (msg.body.criteria.resources) {\n          resources = msg.body.criteria.resources;\n        }\n\n        if (msg.body.criteria.dataSchemes) {\n          dataSchemes = msg.body.criteria.dataSchemes;\n        }\n      }\n\n      switch (atributes[1]) {\n        case 'user':\n          if (atributes[0] == 'hyperty') {\n            return _this.discoverHyperties(msg.body.resource.split('user/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          } else {\n            return _this.discoverDataObjects(msg.body.resource.split('user/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          }\n\n          break;\n\n        case 'url':\n          if (atributes[0] == 'hyperty') {\n            return _this.discoverHypertyPerURL(msg.body.resource.split('url/')[1], msg.body.criteria.domain);\n          } else {\n            return _this.discoverDataObjectPerURL(msg.body.resource.split('url/')[1], msg.body.criteria.domain);\n          }\n\n          break;\n\n        case 'name':\n          return _this.discoverDataObjectsPerName(msg.body.resource.split('name/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          break;\n\n        case 'reporter':\n          return _this.discoverDataObjectsPerReporter(msg.body.resource.split('reporter/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          break;\n\n        case 'guid':\n          if (typeof _this.graphConnector !== 'undefined' && _this.graphConnector !== null) {\n            if (atributes[0] == 'hyperty') {\n              return _this.discoverHypertiesPerGUID(msg.body.resource.split('user-guid://')[1], dataSchemes, resources);\n            } else {\n              return _this.discoverDataObjectsPerGUID(msg.body.resource.split('user-guid://')[1], dataSchemes, resources);\n            }\n\n            break;\n          } else {\n            return Promise.reject('GraphConnector');\n            break;\n          }\n\n        case 'userprofile':\n          if (typeof _this.graphConnector !== 'undefined' && _this.graphConnector !== null) {\n            if (atributes[0] == 'hyperty') {\n              return _this.discoverHypertiesPerUserProfileData(msg.body.resource.split('userprofile/')[1], dataSchemes, resources);\n            } else {\n              return _this.discoverDataObjectsPerUserProfileData(msg.body.resource.split('userprofile/')[1], dataSchemes, resources);\n            }\n\n            break;\n          } else {\n            return Promise.reject('GraphConnector');\n            break;\n          }\n\n      }\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerUserProfileData\",\n    value: function discoverHypertiesPerUserProfileData(userIdentifier, dataSchemes, resources) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //translate user identifier (e.g. email, name...) into the associated GUIDs\n        _this.discoverGUIDPerUserIdentifier(userIdentifier).then(function (guids) {\n          var hypertiesPromises = guids.map(function (guid) {\n            return new Promise(function (resolve, reject) {\n              _this.discoverHypertiesPerGUID(guid, dataSchemes, resources).then(function (hyperties) {\n                resolve(hyperties);\n              })[\"catch\"](function (err) {\n                resolve([]);\n              });\n            });\n          });\n          Promise.all(hypertiesPromises).then(function (hypertiesResult) {\n            var hyperties = [].concat.apply([], hypertiesResult);\n\n            if (hyperties.length === 0) {\n              return reject('No hyperties were found');\n            }\n\n            resolve(hyperties);\n          });\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for DataObjects registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerUserProfileData\",\n    value: function discoverDataObjectsPerUserProfileData(userIdentifier, dataSchemes, resources) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //translate user identifier (e.g. email, name...) into the associated GUIDs\n        _this.discoverGUIDPerUserIdentifier(userIdentifier).then(function (guids) {\n          var dataObjectsPromises = guids.map(function (guid) {\n            return new Promise(function (resolve, reject) {\n              _this.discoverDataObjectsPerGUID(guid, dataSchemes, resources).then(function (dataObjects) {\n                resolve(dataObjects);\n              })[\"catch\"](function (err) {\n                resolve([]);\n              });\n            });\n          });\n          Promise.all(dataObjectsPromises).then(function (dataObjectsResult) {\n            var dataObjects = [].concat.apply([], dataObjectsResult);\n\n            if (dataObjects.length === 0) {\n              return reject('No dataObjects were found');\n            }\n\n            resolve(dataObjects);\n          });\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n    * @param  {String}             guid\r\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerGUID\",\n    value: function discoverHypertiesPerGUID(guid, dataSchemes, resources) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //translate GUID into the user IDs to query the domain registry\n        _this.discoverUserIdsPerGUID(guid).then(function (uids) {\n          //translate user IDs into the associated hyperties registered in some domain\n          var hypertiesPromises = uids.map(function (uid) {\n            return new Promise(function (resolve, reject) {\n              _this.discoverHyperties(uid.uID, dataSchemes, resources, uid.domain).then(function (hyperties) {\n                resolve(hyperties);\n              })[\"catch\"](function (err) {\n                resolve([]);\n              });\n            });\n          });\n          Promise.all(hypertiesPromises).then(function (hypertiesResult) {\n            var hyperties = [].concat.apply([], hypertiesResult);\n\n            if (hyperties.length === 0) {\n              return reject('No hyperties were found');\n            } // log.log('Hyperties : ', hyperties);\n\n\n            resolve(hyperties);\n          });\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for DataObjects registered in domain registry associated with some GUID\r\n    * @param  {String}             guid\r\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerGUID\",\n    value: function discoverDataObjectsPerGUID(guid, dataSchemes, resources) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //translate GUID into the user IDs to query the domain registry\n        _this.discoverUserIdsPerGUID(guid).then(function (uids) {\n          //translate user IDs into the associated dataObjects registered in some domain\n          var dataObjectPromises = uids.map(function (uid) {\n            return new Promise(function (resolve, reject) {\n              _this.discoverDataObjects(uid.uID, dataSchemes, resources, uid.domain).then(function (dataObjects) {\n                resolve(dataObjects);\n              })[\"catch\"](function (err) {\n                resolve([]);\n              });\n            });\n          });\n          Promise.all(dataObjectPromises).then(function (dataObjectsResult) {\n            var dataObjects = [].concat.apply([], dataObjectsResult);\n\n            if (dataObjects.length === 0) {\n              return reject('No dataObjects were found');\n            } // log.log('DataObjects : ', dataObjects);\n\n\n            resolve(dataObjects);\n          });\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    }\n    /** Advanced Search for Hyperties registered in domain registry and associated with some user ID\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverHyperties\",\n    value: function discoverHyperties(user, dataSchemes, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {}\n      };\n\n      if (user.indexOf('user://') > -1) {\n        msg.body.resource = user;\n      } else {\n        msg.body.resource = '/hyperty/idp-identifier/' + user;\n      }\n\n      if (dataSchemes.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n\n        msg.body.criteria.dataSchemes = dataSchemes;\n      }\n\n      if (resources.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n\n        msg.body.criteria.resources = resources;\n      }\n\n      return new Promise(function (resolve, reject) {\n        // log.log(\"[CoreDiscovery.discoverHyperties] sending msg \", msg);\n        _this.messageBus.postMessage(msg, function (reply) {\n          // log.log(\"[CoreDiscovery.discoverHyperties] rcved reply \", reply);\n          if (reply.body.code === 200 || reply.body.code === 500) {\n            var hyperties = reply.body.value;\n            var finalHyperties = [];\n\n            for (var key in hyperties) {\n              finalHyperties.push(hyperties[key]);\n            }\n\n            if (finalHyperties.length > 0) {\n              // log.log(\"[CoreDiscovery.discoverHyperties] Hyperties Found: \", finalHyperties);\n              resolve(finalHyperties);\n            } else {\n              return reject('No Hyperty was found');\n            }\n          } else {\n            return reject('No Hyperty was found');\n          }\n          /*_this.registry.isLegacy(user).then((legacy) => {\r\n                if (legacy) resolve([{hypertyID: user }])\r\n                else return reject('No Hyperty was found');\r\n            });*/\n\n        });\n      });\n    }\n    /** Advanced Search for DataObjects registered in domain registry and associated with some user ID\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    dataSchemes (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjects\",\n    value: function discoverDataObjects(user, dataSchemes, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      var dataObjectsArray = [];\n      activeDomain = !domain ? _this.domain : domain;\n      return new Promise(function (resolve, reject) {\n        //translate user identifier (e.g. email, name...) into the associated hyperties\n        _this.discoverHyperties(user, [], [], activeDomain).then(function (hyperties) {\n          var finalHyperties = [];\n\n          for (var key in hyperties) {\n            finalHyperties.push(hyperties[key]);\n          } //translate hyperties URLs into the associated dataObjects registered in some domain\n\n\n          var dataObjectsPromises = finalHyperties.map(function (hyperty) {\n            return new Promise(function (resolve, reject) {\n              _this.discoverDataObjectsPerReporter(hyperty.hypertyID, dataSchemes, resources, activeDomain).then(function (dataObject) {\n                resolve(dataObject);\n              })[\"catch\"](function (err) {\n                resolve([]);\n              });\n            });\n          });\n          Promise.all(dataObjectsPromises).then(function (dataObjectsResult) {\n            var dataObjects = [].concat.apply([], dataObjectsResult);\n            dataObjects.forEach(function (dataObject) {\n              dataObjectsArray.push(dataObject);\n            });\n            var finalDataObjects = [];\n\n            for (var key in dataObjectsArray) {\n              finalDataObjects.push(dataObjectsArray[key]);\n            }\n\n            if (finalDataObjects.length === 0) {\n              return reject('No dataObjects were found');\n            } // log.log('DataObjects Found: ', finalDataObjects);\n\n\n            resolve(finalDataObjects);\n          });\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    }\n    /**\r\n    * function to request about hyperties registered in domain registry, and\r\n    * return the hyperty information, if found.\r\n    * @param  {String}              url  dataObject URL\r\n    * @param  {String}            domain (Optional)\r\n    * @return {Promise}          Promise\r\n    */\n\n  }, {\n    key: \"discoverHypertyPerURL\",\n    value: function discoverHypertyPerURL(url, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: url\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code !== 200 && reply.body.code !== 500) {\n            return reject('No Hyperty was found');\n          }\n\n          var hyperty = reply.body.value;\n\n          if (hyperty) {\n            // log.log('Hyperty found: ', hyperty);\n            resolve(hyperty);\n          } else {\n            return reject('No Hyperty was found');\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * return the dataObject information, if found.\r\n    * @param  {String}              url  dataObject URL\r\n    * @param  {String}            domain (Optional)\r\n    * @return {Promise}          Promise\r\n    */\n\n  }, {\n    key: \"discoverDataObjectPerURL\",\n    value: function discoverDataObjectPerURL(url, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: url\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          var dataObject = reply.body.value;\n\n          if (dataObject) {\n            // log.log('DataObject found: ', dataObject);\n            resolve(dataObject);\n          } else {\n            return reject('DataObject not found');\n          }\n        });\n      });\n    }\n    /** Advanced Search for dataObjects registered in domain registry\r\n    * @param  {String}           name                  name of the dataObject\r\n    * @param  {Array<string>}    dataSchemes (Optional)     types of dataObject schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObject resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerName\",\n    value: function discoverDataObjectsPerName(name, dataSchemes, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: name\n        }\n      };\n\n      if (dataSchemes.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n\n        msg.body.criteria.dataSchemes = dataSchemes;\n      }\n\n      if (resources.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n\n        msg.body.criteria.resources = resources;\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          var dataObjects = reply.body.value;\n          var finalDataObjects = [];\n\n          for (var key in dataObjects) {\n            finalDataObjects.push(dataObjects[key]);\n          }\n\n          if (finalDataObjects.length > 0) {\n            // log.log(\"DataObjects Found: \", finalDataObjects);\n            resolve(finalDataObjects);\n          } else {\n            return reject('No DataObject was found');\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about specific reporter dataObject registered in domain registry, and\r\n    * return the dataObjects from that reporter.\r\n    * @param  {String}           reporter                         dataObject reporter\r\n    * @param  {Array<string>}    scdataSchemeshema                (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources                        (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain                           (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerReporter\",\n    value: function discoverDataObjectsPerReporter(reporter, dataSchemes, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: '/comm',\n          criteria: {\n            reporter: reporter\n          }\n        }\n      };\n\n      if (dataSchemes.length > 0) {\n        msg.body.criteria.dataSchemes = dataSchemes;\n      }\n\n      if (resources.length > 0) {\n        msg.body.criteria.resources = resources;\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          var dataObjects = reply.body.value;\n          var finalDataObjects = [];\n\n          for (var key in dataObjects) {\n            finalDataObjects.push(dataObjects[key]);\n          }\n\n          if (finalDataObjects.length > 0) {\n            // log.log(\"DataObjects Found: \", finalDataObjects);\n            resolve(finalDataObjects);\n          } else {\n            return reject('No DataObject was found');\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request global registry about the user IDs associated with some GUID\r\n    * @param  {String}              guid\r\n    * @return {Promise}          Promise\r\n    */\n\n  }, {\n    key: \"discoverUserIdsPerGUID\",\n    value: function discoverUserIdsPerGUID(guid) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        // log.log(\"GO graphConnector:\", guid);\n        _this.graphConnector.queryGlobalRegistry(guid).then(function (graphConnectorContactData) {\n          // log.log('Information returned from Global Registry: ', graphConnectorContactData);\n          if (typeof graphConnectorContactData === 'string' || !graphConnectorContactData) {\n            return reject('Unsuccessful discover userIDs by GUID');\n          } else {\n            var userids = graphConnectorContactData.userIDs;\n\n            if (userids.length === 0) {\n              return reject('UserIDs not available');\n            }\n\n            resolve(userids);\n          }\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    }\n    /**\r\n    * function to request discovery service about the GUID associated with some user identifier (eg email, name ...)\r\n    * @param  {String}            userIdentifier\r\n    * @return {Promise}           Promise\r\n    */\n\n  }, {\n    key: \"discoverGUIDPerUserIdentifier\",\n    value: function discoverGUIDPerUserIdentifier(userIdentifier) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var lookupURLDiscoveryService = 'https://rethink.tlabscloud.com/discovery/rest/discover/lookup?searchquery=';\n\n        _this.httpRequest.get(lookupURLDiscoveryService + userIdentifier).then(function (json) {\n          // log.log('discover GUID by user identifier', json);\n          var response = JSON.parse(json);\n          var filteredGuid = response.results.filter(function (x) {\n            return x.rethinkID != undefined;\n          });\n\n          if (filteredGuid.length === 0) {\n            return reject('Unsuccessful discover GUID by user identifier');\n          }\n\n          var guids = filteredGuid.map(function (x) {\n            return x.rethinkID;\n          });\n          return resolve(guids);\n        })[\"catch\"](function (err) {\n          // log.log(\"HTTP Request error: \", err);\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"messageBus\",\n    get: function get() {\n      return this._messageBus;\n    }\n    /**\r\n     * Sets the MessageBus.\r\n     * @param {MessageBus}           messageBus    The Message Bus.\r\n     */\n    ,\n    set: function set(messageBus) {\n      this._messageBus = messageBus;\n    }\n  }]);\n\n  return CoreDiscovery;\n}();\n\n/* harmony default export */ var discovery_CoreDiscovery = (CoreDiscovery_CoreDiscovery);\n// CONCATENATED MODULE: ./src/store-objects/DataObjectsStorage.js\nfunction DataObjectsStorage_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DataObjectsStorage_typeof = function _typeof(obj) { return typeof obj; }; } else { DataObjectsStorage_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DataObjectsStorage_typeof(obj); }\n\nfunction DataObjectsStorage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObjectsStorage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObjectsStorage_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObjectsStorage_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObjectsStorage_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar DataObjectsStorage_log = loglevel[\"getLogger\"]('DataObjectsStorage');\n\n\n\nvar DataObjectsStorage_DataObjectsStorage =\n/*#__PURE__*/\nfunction () {\n  function DataObjectsStorage(storageManager) {\n    var storedDataObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var factory = arguments.length > 2 ? arguments[2] : undefined;\n    var runtimeUrl = arguments.length > 3 ? arguments[3] : undefined;\n\n    DataObjectsStorage_classCallCheck(this, DataObjectsStorage);\n\n    if (!storageManager) throw new Error('[Store Data Objects] - Needs the storageManager component');\n    this._storageManager = storageManager;\n    this._storeDataObject = storedDataObjects;\n    this._cache = {};\n    this._createSyncDB = createSyncDB; // to create Data Objects to be synched with remote storages\n\n    this._remotes = {}; // List of DO synched with remote storages\n\n    this._factory = factory;\n    this._table = 'syncherManager:ObjectURLs';\n    this._remoteStorageTable = 'dataObjectStorage';\n    this._remoteSchema = 'url';\n    this._runtimeUrl = runtimeUrl;\n  } // load Data Objects synched with remote Storages\n\n\n  DataObjectsStorage_createClass(DataObjectsStorage, [{\n    key: \"loadRemote\",\n    value: function loadRemote() {\n      var _this2 = this;\n\n      var resume = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var loading = [];\n        var synching = [];\n\n        _this._storageManager.get(null, null, 'remotes').then(function (remotes) {\n          // in case we don't have any remotes locally stored\n          DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] remotes: ', remotes);\n          if (!remotes) resolve();\n          if (!resume) _this._remotes = remotes;\n          DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] loading: ', _this._remotes);\n          var remoteObjects = Object.keys(remotes); // in case we don't have any remotes locally stored\n\n          if (remoteObjects.length === 0) resolve();\n          remoteObjects.forEach(function (db) {\n            var table = 'do-' + db.split('/')[3];\n            _this._remotes[db] = createSyncDB(table, _this2._factory); //            _this._remotes[remote] = createSyncDB(remote, _this._factory, 'remoteDataObjectStorage' );\n\n            loading.push(_this._remotes[db].get());\n          });\n          Promise.all(loading).then(function (remotes) {\n            DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] loaded: ', remotes); //TODO: init this._storeDataObject with loaded data objects\n\n            /*          Object.keys(remotes).forEach((remote) => {\r\n            \r\n                        synching.push(_this.sync(remote));\r\n                      });\r\n                      Promise.all(synching).then((dataObjs) => {*/\n\n            var dataObjs = remotes;\n            if (dataObjs.length === 0) resolve();\n            dataObjs.forEach(function (dO) {\n              var dataObj = _this._remoteDoc2dataObject(dO); //              Object.keys(dO).forEach((i) => {\n\n\n              DataObjectsStorage_log.log('[StoreDataObjects.loadRemote] loaded remote ', dataObj); //              if (dO[remote].isReporter) {\n\n              var type = _this2._getTypeOfObject(dataObj.isReporter);\n\n              if (!_this._storeDataObject) _this._storeDataObject = {};\n              if (!_this._storeDataObject.hasOwnProperty(type)) _this._storeDataObject[type] = {};\n              _this._storeDataObject[type][dataObj.url] = dataObj; //             });\n              //            });\n\n              resolve(_this._storeDataObject);\n            }, function (error) {\n              reject(error);\n            });\n          });\n        }, function (error) {\n          reject(error);\n        });\n\n        resolve();\n      });\n    } // delete Data Objects synched with remote Storages\n\n  }, {\n    key: \"deleteRemotes\",\n    value: function deleteRemotes() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var deleting = [];\n        var disconnecting = [];\n\n        _this._storageManager.get(null, null, 'remotes').then(function (remotes) {\n          // in case we don't have any remotes locally stored\n          DataObjectsStorage_log.info('[StoreDataObjects.deleteRemotes] remotes: ', remotes);\n          if (!remotes) resolve();\n          var remoteObjects = Object.keys(_this._remotes); // in case we don't have any remotes locally stored\n\n          if (remoteObjects.length === 0) resolve();\n          remoteObjects.forEach(function (db) {\n            deleting.push(_this._remotes[db].disconnect());\n            deleting.push(_this._remotes[db][\"delete\"]());\n          });\n          Promise.all(deleting).then(function () {\n            DataObjectsStorage_log.log('[StoreDataObjects.deleteRemotes] deleted.');\n            resolve();\n          }, function (error) {\n            resolve();\n          });\n        });\n\n        resolve();\n      });\n    }\n    /**\r\n     * @description should set the initial state of the dataObjectURL to be resumed if necessary;\r\n     *\r\n     * @param {DataObjectURL} url - dataObjectURL to be saved;\r\n     * @param {Boolean} isReporter - the object to be saved is a reporter\r\n     * @param {SchemaURL} schema - the schema url\r\n     * @param {String} status - the status of current dataObject\r\n     * @param {HypertyURL} reporter - the Reporter hypertyURL\r\n     * @param {Array<HypertyURL>} subscription - list of subscriptions\r\n     * @param {Array<DataObjectChild>} children - list of childs of dataObjectURL\r\n     * @param {Array<String>} childrens - list of childrens, like, 'chatmessage';\r\n     * @param {Array<UserURL} subscriberUser - list of subscribed users;\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(metadata) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        var storeDataObject = _this3._storeDataObject ? _this3._storeDataObject : {};\n\n        var type = _this3._getTypeOfObject(metadata.isReporter);\n\n        if (!storeDataObject.hasOwnProperty(type)) storeDataObject[type] = {};\n\n        if (!storeDataObject[type].hasOwnProperty(metadata.url)) {\n          storeDataObject[type][metadata.url] = {};\n          storeDataObject[type][metadata.url].subscriptions = []; // TODO:do we need this?\n\n          storeDataObject[type][metadata.url].subscriberUsers = []; // TODO:do we need this?\n\n          storeDataObject[type][metadata.url].childrenObjects = {};\n          storeDataObject[type][metadata.url].data = {};\n        }\n\n        Object.assign(storeDataObject[type][metadata.url], metadata);\n        delete storeDataObject[type][metadata.url].subscriberUser;\n        delete storeDataObject[type][metadata.url].subscriberHyperty;\n        storeDataObject[type][metadata.url].backup = metadata.hasOwnProperty('backup') ? metadata.backup : false;\n        /*if (schema) storeDataObject[type][metadata.url].schema = schema;\r\n        if (status) storeDataObject[type][metadata.url].status = status;\r\n        if (childrenResources) storeDataObject[type][metadata.url].childrenResources = childrenResources;*/\n\n        if (metadata.subscriberHyperty && !metadata.isReporter) {\n          // TODO: do we need this?\n          _this3._updateToArray(storeDataObject[type], metadata.url, 'subscriptions', metadata.subscriberHyperty);\n        } //storeDataObject[type][metadata.url].owner = owner;\n\n\n        if (metadata.subscriberUser) {\n          // TODO: do we need this?\n          if (storeDataObject[type][metadata.url].subscriberUsers.indexOf(metadata.subscriberUser)) {\n            _this3._updateToArray(storeDataObject[type], metadata.url, 'subscriberUsers', metadata.subscriberUser);\n          }\n        }\n\n        _this3._storeDataObject = storeDataObject;\n        var backup = metadata.hasOwnProperty('backup') ? metadata.backup : false;\n        var table = backup ? metadata.url : _this3._table; //      let db = backup ? table.split('://')[1] : this._table;\n\n        var db = backup ? 'do-' + table.split('/')[3] : _this3._table;\n\n        if (backup && !_this3._remotes[metadata.url]) {\n          var schema = {};\n          schema[table] = _this3._remoteSchema;\n          _this3._remotes[metadata.url] = createSyncDB(db, _this3._factory);\n        } // Save Data Object URL at remotes table to support resumes\n\n\n        if (backup) _this3._storageManager.set(table, 0, db, 'remotes');\n        var storage = backup ? _this3._remotes[table] : _this3._storageManager;\n\n        if (backup) {\n          // lets connect to remote storage to enable sync\n          storage.set(table, storeDataObject[type][metadata.url]).then(function () {\n            if (metadata.isReporter) storage.connect();\n            resolve(storeDataObject[type][metadata.url]);\n          }, function (error) {\n            DataObjectsStorage_log.error('[DataObjectStorage.set] failed to save into remote storage: ', error);\n            reject(error);\n          });\n        } else {\n          console.log('[DataObjectStorage.set] _storeDataObject before filter ', _this3._storeDataObject);\n          storage.set(db, 1, _this3._filterRemotes(_this3._storeDataObject), table).then(function () {\n            resolve(storeDataObject[type][metadata.url]);\n          });\n        }\n      });\n    } // to filter Data Objects that are stored outside the ObjectURLs table\n\n  }, {\n    key: \"_filterRemotes\",\n    value: function _filterRemotes(storeDataObject) {\n      var remotes = Object.keys(this._remotes);\n      var filtered = Object(utils[\"i\" /* deepClone */])(storeDataObject);\n      console.log('[DataObjectStorage._filterRemotes] starting filtering ', filtered);\n      remotes.forEach(function (remote) {\n        if (filtered['reporters'] && filtered['reporters'][remote]) {\n          delete filtered['reporters'][remote];\n          console.log('[DataObjectStorage._filterRemotes] filter updated ', filtered);\n        } else delete filtered['observers'][remote];\n      });\n      console.log('[DataObjectStorage._filterRemotes] ', filtered);\n      return filtered;\n    } // Initial Sync of Observer to avoid later mismatches with sync revisions\n    // OUtdated: not used anymore\n\n    /*\r\n      initialObserverSync(resource, backupRevision) {\r\n        // to be completed\r\n        let table = resource.split('/')[3];\r\n    \r\n        let _this = this;\r\n    \r\n        let options = {table: table, observer: true, baseRevision: backupRevision, syncedRevision: backupRevision};\r\n    \r\n        console.log('[DataObjectStorage.initialObserverSync] object: ', resource, ' revision ', backupRevision)\r\n    \r\n        _this._remotes[resource]options).then(()=> {\r\n    \r\n          console.log('[DataObjectStorage.initialObserverSync] connected ');\r\n    \r\n                setTimeout(function() {\r\n                  _this._remotes[resource].disconnect().then(()=>{\r\n                    console.log('[DataObjectStorage.initialObserverSync] disconnected ');\r\n                },(error)=> {\r\n                  log.error('[DataObjectStorage.initialObserverSync] Error disconnecting with remote storage');\r\n                  reject(error);\r\n                });\r\n                }, 15000)\r\n    \r\n        }, (error) => {\r\n          log.error('[DataObjectStorage.initialObserverSync] Error connecting to remote storage');\r\n          reject(error)\r\n        });\r\n    \r\n      }*/\n\n    /**\r\n     * @description should save and update the current dataObject data information\r\n     *\r\n     * @param {Boolean} isReporter - the object to be saved is a reporter\r\n     * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\r\n     * @param {String} attribute - attribute inside the data which will be saved\r\n     * @param {any} data - value will be saved inside the attribute;\r\n     */\n\n  }, {\n    key: \"saveData\",\n    value: function saveData(isReporter, resource, attribute, value, updateRuntimeStatus) {\n      var storeDataObject = this._storeDataObject;\n\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        DataObjectsStorage_log.log('[StoreDataObjects - save data] - not saved');\n        return;\n      }\n\n      DataObjectsStorage_log.log('[StoreDataObjects - saveData] - ', isReporter, type, resource, attribute, value);\n\n      if (!storeDataObject[type][resource].hasOwnProperty('data')) {\n        storeDataObject[type][resource].data = {};\n      }\n\n      if (attribute) {\n        var data;\n        if (DataObjectsStorage_typeof(value) === 'object') data = Object(utils[\"i\" /* deepClone */])(value);else data = value;\n        Object(utils[\"a\" /* assign */])(storeDataObject[type][resource].data, attribute, data);\n      } else {\n        storeDataObject[type][resource].data = Object(utils[\"i\" /* deepClone */])(value) || {};\n      }\n\n      this._storeDataObject = storeDataObject;\n      var db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\n      var storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager; //    let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\n\n      if (storeDataObject[type][resource].backup) {\n        // should we remove childrens?\n        return storage.set(db, storeDataObject[type][resource]);\n      } else {\n        return storage.set('syncherManager:ObjectURLs', 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\n      }\n    }\n  }, {\n    key: \"saveChildrens\",\n    value: function saveChildrens(isReporter, resource, attribute, value) {\n      var _this4 = this;\n\n      var storeDataObject = this._storeDataObject;\n\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        DataObjectsStorage_log.log('[StoreDataObjects - save childrens] - not saved');\n        return;\n      }\n\n      if (!storeDataObject[type][resource].hasOwnProperty('childrens')) {\n        storeDataObject[type][resource].childrenObjects = {};\n      }\n      /*    if (!storeDataObject[type][resource].childrenObjects.hasOwnProperty('resources')) {\r\n            storeDataObject[type][resource].childrenObjects.resources = {};\r\n          }*/\n\n\n      if (attribute) {\n        Object(utils[\"a\" /* assign */])(storeDataObject[type][resource].childrenObjects, attribute, Object(utils[\"i\" /* deepClone */])(value));\n      } else {\n        storeDataObject[type][resource].childrenObjects = Object(utils[\"i\" /* deepClone */])(value) || {};\n      }\n\n      this._storeDataObject = storeDataObject;\n      var db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\n      var storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager;\n      /*   let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\r\n         let data = storeDataObject[type][resource].backup ? storeDataObject[type][resource] : this._filterRemotes(storeDataObject);\r\n         storage.set(db, 1, data, table).then(() => {\r\n           return storeDataObject[type][resource];\r\n         });*/\n\n      if (storeDataObject[type][resource].backup) {\n        return storage.set(attribute, value).then(function () {\n          // backup child object if reporter is local\n          if (_this4._runtimeUrl === value.value.runtime) storage.backup(attribute);\n        });\n      } else {\n        return storage.set('syncherManager:ObjectURLs', 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\n      }\n    }\n    /**\r\n     * @description should save and update the current dataObject information\r\n     *\r\n     * @param {Boolean} isReporter - the object to be saved is a reporter\r\n     * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\r\n     * @param {String} attribute - attribute inside the data which will be saved\r\n     * @param {any} data - value will be saved inside the attribute;\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(isReporter, resource, attribute, value, updateRuntimeStatus) {\n      var storeDataObject = this._storeDataObject;\n\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        DataObjectsStorage_log.log('[StoreDataObjects - update] - not saved');\n        return;\n      }\n\n      DataObjectsStorage_log.log('[StoreDataObjects - update] - ', isReporter, type, resource, attribute, value);\n\n      if (storeDataObject[type] && storeDataObject[type][resource] && resource && attribute && value) {\n        if (attribute === 'subscriptions' || attribute === 'subscriberUsers') {\n          var update = true;\n\n          if (attribute === 'subscriptions') {\n            update = !this._isOwner(storeDataObject[type][resource], value);\n          }\n\n          if (update) this._updateToArray(storeDataObject[type], resource, attribute, value);\n        } else {\n          storeDataObject[type][resource][attribute] = value;\n        }\n\n        this._storeDataObject = storeDataObject;\n        var db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\n        var storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager;\n        /*      let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\r\n              let data = storeDataObject[type][resource].backup ? storeDataObject[type][resource] : this._filterRemotes(storeDataObject);\r\n              storage.set(db, 1, data, table, updateRuntimeStatus).then(() => {\r\n                return storeDataObject[type][resource];\r\n              });*/\n\n        if (storeDataObject[type][resource].backup) {\n          //just update the attribute that is changing\n          return storage.set(db, storeDataObject[type][resource]);\n        } else {\n          return storage.set('syncherManager:ObjectURLs', 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\n        }\n      }\n    }\n    /**\r\n     * @description should delete stored information from the dataObject\r\n     *\r\n     * @param {Boolean} isReporter - the object to be saved is a reporter\r\n     * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\r\n     * @param {String} attribute - attribute inside the data which will be saved\r\n     * @param {any} data - value will be saved inside the attribute;\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(isReporter, resource, attribute, value) {\n      var storeDataObject = this._storeDataObject;\n\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        DataObjectsStorage_log.log('[StoreDataObjects - delete] - not saved');\n        return;\n      }\n\n      if (storeDataObject[type] && storeDataObject[type][resource] && resource && attribute && value) {\n        if (attribute === 'subscriptions' || attribute === 'subscriberUsers') {\n          this._removeFromArray(storeDataObject[type], resource, attribute, value);\n        } else {\n          delete storeDataObject[type][resource][attribute];\n        }\n\n        this._storeDataObject = storeDataObject;\n        var db = storeDataObject[type][resource].backup ? storeDataObject[type][resource].url : 'syncherManager:ObjectURLs';\n        var storage = storeDataObject[type][resource].backup ? this._remotes[db] : this._storageManager;\n        /*     let table = storeDataObject[type][resource].backup ? db.split('/')[3] : this._table;\r\n             let data = storeDataObject[type][resource].backup ? storeDataObject[type][resource] : this._filterRemotes(storeDataObject);\r\n             storage.set(db, 1, data, table);\r\n        \n             return storeDataObject[type][resource];*/\n\n        if (storeDataObject[type][resource].backup) {\n          return storage.set(db, storeDataObject[type][resource]);\n        } else {\n          return storage.set(db, 1, this._filterRemotes(storeDataObject), this._table, updateRuntimeStatus);\n        }\n      }\n    }\n    /**\r\n     * Delete Data Object from the storage\r\n     */\n\n  }, {\n    key: \"deleteResource\",\n    value: function deleteResource(resource) {\n      var _this5 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (resource) {\n          //        return this.getAll().then((storedDataObjects) => {\n          DataObjectsStorage_log.log('[DataObjectStorage.deleteResource] deleting: ', resource); //          let this._storeDataObject = Object.assign(this._storeDataObject || {});\n\n          var backup;\n          var db;\n          var storage;\n\n          if (_this._storeDataObject.hasOwnProperty('observers') && _this._storeDataObject.observers.hasOwnProperty(resource)) {\n            backup = _this._storeDataObject.observers[resource].backup ? _this._storeDataObject.observers[resource].backup : false;\n            db = backup ? _this._storeDataObject.observers[resource].url : 'syncherManager:ObjectURLs';\n            storage = backup ? _this._remotes[db] : _this._storageManager;\n            delete _this._storeDataObject.observers[resource];\n          }\n\n          if (_this._storeDataObject.hasOwnProperty('reporters') && _this._storeDataObject.reporters.hasOwnProperty(resource)) {\n            backup = _this._storeDataObject.reporters[resource].backup ? _this._storeDataObject.reporters[resource].backup : false;\n            db = backup ? _this._storeDataObject.reporters[resource].url : 'syncherManager:ObjectURLs';\n            storage = backup ? _this._remotes[db] : _this._storageManager;\n            delete _this._storeDataObject.reporters[resource];\n          } //          this._storeDataObject = this._storeDataObject;\n\n\n          if (backup && storage) {\n            storage[\"delete\"]().then(function () {\n              DataObjectsStorage_log.log('[DataObjectStorage.deleteResource] deleting sync db ', resource);\n              delete _this._remotes[db];\n              delete _this._factory.databases['do-' + db.split('/')[3]];\n              delete _this._factory.storeManager['do-' + db.split('/')[3]];\n\n              _this._storageManager[\"delete\"](resource, null, 'remotes');\n            });\n          } else {\n            delete _this._factory.databases[db];\n            delete _this._factory.storeManager[db];\n            storage.set(db, 1, _this5._filterRemotes(_this._storeDataObject));\n          }\n\n          return resolve(); //        });\n        } else {\n          reject(new Error('[StoreDataObjects] - Can\\'t delete this ' + resource));\n        }\n      });\n    }\n    /*  getAll() {\r\n    \r\n        let _this = this;\r\n    \r\n        return new Promise((resolve, reject) => {\r\n          _this._storeDataObject = this._storageManager.get('syncherManager:ObjectURLs').then((objects) => {\r\n            _this._storeDataObject = objects;\r\n            _this.loadRemote(true).then((storedObjects) => {\r\n              resolve(_this._storeDataObject);\r\n            });\r\n    \r\n          });\r\n    \r\n        });\r\n        //    return this._storageManager.get('syncherManager:ObjectURLs');\r\n      }*/\n    // To sync local storage with remote storage server\n\n  }, {\n    key: \"sync\",\n    value: function sync(resource) {\n      var _this = this;\n\n      console.log('[DataObjectStorage._sync] resource: ', resource);\n      return new Promise(function (resolve, reject) {\n        if (_this._remotes[resource]) {\n          _this._remotes[resource].get(resource, 'isReporter').then(function (isReporter) {\n            _this._remotes[resource].get(resource, 'subscriptions').then(function (subscriptions) {\n              _this._remotes[resource].sync().then(function () {\n                _this._remotes[resource].get().then(function (doc) {\n                  //          this._remotes[resource].get().then((dataObject)=>{\n                  DataObjectsStorage_log.info('[DataObjectStorage.sync] returning synched DO: ', doc); //          if (!isReporter) _this._remotes[resource].disconnect();\n                  // to ensure local data object as the right value for isReporter\n                  // remote data object should always have isReporter = true.\n                  //doc[0].isReporter = isReporter;\n\n                  var dO = _this._remoteDoc2dataObject(doc);\n\n                  dO.isReporter = isReporter;\n                  dO.subscriptions = subscriptions;\n\n                  if (_this._storeDataObject.hasOwnProperty('observers') && _this._storeDataObject.observers.hasOwnProperty(resource)) {\n                    _this._storeDataObject.observers[resource] = dO;\n                  }\n\n                  if (_this._storeDataObject.hasOwnProperty('reporters') && _this._storeDataObject.reporters.hasOwnProperty(resource)) {\n                    _this._storeDataObject.reporters[resource] = dO;\n                  }\n\n                  _this._remotes[resource].set(resource, dO).then(function () {\n                    resolve(dO);\n                  });\n                }, function (error) {\n                  DataObjectsStorage_log.error('[DataObjectStorage.sync] Error ', error);\n                  reject(error);\n                });\n              }, function (error) {\n                DataObjectsStorage_log.error('[DataObjectStorage.sync] Error ', error);\n                reject(error);\n              });\n            });\n          });\n        } else {\n          var warning = resource + ' not found in local storage.';\n          DataObjectsStorage_log.warn('[DataObjectStorage.sync] warning ', warning);\n          reject(warning);\n        }\n      });\n    }\n  }, {\n    key: \"_remoteDoc2dataObject\",\n    value: function _remoteDoc2dataObject(doc) {\n      if (doc.length > 1) {\n        //has childrens\n        var dataObject = doc[doc.length - 1];\n        dataObject.childrenObjects = {};\n        var i;\n\n        for (i = 0; i < doc.length - 1; i++) {\n          dataObject.childrenObjects[doc[i]._id] = doc[i];\n        }\n\n        return dataObject;\n      } else return doc[0];\n    }\n  }, {\n    key: \"stopSync\",\n    value: function stopSync(resource) {\n      if (this._remotes[resource]) this._remotes[resource].disconnect();\n    }\n    /**\r\n    * @description should look for a specific dataObjectURL\r\n    *\r\n    * @param {DataObjectURL} resource - the dataObjectURL will be searched\r\n    *\r\n    * @returns Promise<Object> object with the dataObject information;\r\n    */\n\n  }, {\n    key: \"getDataObject\",\n    value: function getDataObject(resource) {\n      var _this6 = this;\n\n      return new Promise(function (resolve, reject) {\n        /*      this._remotes[resource].get().then((dataObject)=> {\r\n                return resolve(dataObject);\r\n              } , () => {\r\n                this._storageManager.get('syncherManager:ObjectURLs').then((storedDataObject) => {*/\n        var storedDataObject = _this6._storeDataObject;\n        var observers = storedDataObject.hasOwnProperty('observers') ? storedDataObject.observers : {};\n        var reporters = storedDataObject.hasOwnProperty('reporters') ? storedDataObject.reporters : {};\n        var currentReporter = Object.keys(reporters).find(function (value) {\n          return value === resource;\n        });\n        var currentObserver = Object.keys(observers).find(function (value) {\n          return value === resource;\n        });\n        var dataObject;\n\n        if (currentObserver) {\n          dataObject = storedDataObject.observers[currentObserver];\n        }\n\n        if (currentReporter) {\n          dataObject = storedDataObject.reporters[currentReporter];\n        }\n\n        DataObjectsStorage_log.info('[StoreDataObjects - getDataObject] - for observer: ', currentObserver);\n        DataObjectsStorage_log.info('[StoreDataObjects - getDataObject] - for reporters: ', currentReporter);\n        DataObjectsStorage_log.info('[StoreDataObjects - getDataObject] - resolve: ', dataObject);\n        return dataObject ? resolve(dataObject) : reject('No dataObject was found'); //        });\n        //      });\n      });\n    }\n    /**\r\n     * @description should get the dataObject information by the message\r\n     *\r\n     * @param {Object} msg - message would be analised to get the current dataObject information\r\n     * @param {Boolean} isReporter - the object to be saved is a reporter\r\n     *\r\n     * @returns Promise<object> should retun an object with the dataObject or null\r\n     */\n\n  }, {\n    key: \"getResourcesByCriteria\",\n    value: function getResourcesByCriteria(msg, isReporter) {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        var type = _this7._getTypeOfObject(isReporter); //      this.getAll(isReporter).then((storedDataObjects) => {\n\n\n        var storedDataObjects = _this7._storeDataObject;\n\n        if (!storedDataObjects) {\n          DataObjectsStorage_log.log('[DataObjectsStorage.getResourcesByCriteria] don\\'t have stored data objects');\n          return resolve(null);\n        }\n\n        if (msg.body && msg.body.hasOwnProperty('resume') && !msg.body.resume) {\n          return resolve(null);\n        } // check if the message have other criteria\n        // if not search for on the 'from' of the message.\n\n\n        var result = [];\n\n        var hasSubscription = _this7._hasSubscription(storedDataObjects[type], msg.from);\n\n        var isOwner = _this7._searchOwner(storedDataObjects[type], msg.from);\n\n        var isToProtoStubResume = _this7._checkProtostubResume(storedDataObjects, msg);\n\n        DataObjectsStorage_log.log('[StoredDataObjects - getResourcesByCriteria]:', storedDataObjects, msg, hasSubscription, isOwner);\n\n        if (msg.hasOwnProperty('from') && hasSubscription || isOwner || isToProtoStubResume) {\n          var resource;\n\n          if (isOwner) {\n            resource = _this7._getResourcesByOwner(storedDataObjects[type], msg.from);\n          } else {\n            resource = _this7._getResourcesBySubscription(storedDataObjects[type], msg.from);\n          }\n\n          var identityFoundData = [];\n          if (msg.body && msg.body.identity) identityFoundData = _this7._getResourcesByIdentity(storedDataObjects[type], msg.body.identity); //TODO: remove schema since metadata already includes the schema?\n\n          var schemaFoundData = [];\n          if (msg.body && msg.body.schema) schemaFoundData = _this7._getResourcesBySchema(storedDataObjects[type], msg.body.schema);\n          var metadataFound = [];\n\n          if (msg.body && msg.body.value) {\n            var metadata = msg.body.value;\n            delete metadata.data;\n            metadataFound = _this7._getResourcesByMetadata(storedDataObjects[type], metadata);\n          }\n\n          var dataFound = [];\n          if (msg.body && msg.body.value && msg.body.value.data) dataFound = _this7._getResourcesByData(storedDataObjects[type], msg.body.value.data); // you can pass as arrays as you want.. it will be merged in on place\n          // removed duplicates;\n\n          result = _this7._intersection(resource, identityFoundData, schemaFoundData, dataFound, metadataFound);\n\n          if (result.length == 0 && isToProtoStubResume && type == 'observers' && msg.from.split('protostub').length > 0) {\n            var storedObservers = storedDataObjects[type];\n            var fromDomain = Object(utils[\"k\" /* divideURL */])(msg.from).domain;\n\n            if (storedObservers) {\n              Object.keys(storedObservers).filter(function (objectURL) {\n                var subscriptions = storedObservers[objectURL].subscriptions;\n                var hasSubscription = false;\n                subscriptions.forEach(function (subscription) {\n                  var subscriptionDomain = Object(utils[\"k\" /* divideURL */])(subscription).domain;\n\n                  if (subscriptionDomain == fromDomain) {\n                    result.push(objectURL);\n                  }\n                });\n              });\n            }\n          }\n        } else {\n          return resolve(null);\n        }\n\n        var init = {};\n        result.forEach(function (key) {\n          var currentIsReporter = storedDataObjects[type][key];\n          init[key] = currentIsReporter;\n          return init;\n        });\n        DataObjectsStorage_log.log('[Store Data Objects] - ', init);\n        resolve(init);\n      }); //    });\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_getResourcesByIdentity\",\n    value: function _getResourcesByIdentity(storedData, userURL) {\n      if (!storedData) return [];\n      return Object.keys(storedData).filter(function (objectURL) {\n        return storedData[objectURL].subscriberUsers.filter(function (current) {\n          return current === userURL;\n        }).length;\n      });\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_getResourcesByOwner\",\n    value: function _getResourcesByOwner(storedData, owner) {\n      if (!storedData) return [];\n      return Object.keys(storedData).filter(function (objectURL) {\n        return storedData[objectURL].reporter === owner;\n      });\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_getResourcesBySubscription\",\n    value: function _getResourcesBySubscription(storedData, subscription) {\n      if (!storedData) return [];\n      return Object.keys(storedData).filter(function (objectURL) {\n        return storedData[objectURL].subscriptions.filter(function (current) {\n          return current === subscription;\n        }).length;\n      });\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_getResourcesBySchema\",\n    value: function _getResourcesBySchema(storedData, schema) {\n      return Object.keys(storedData).filter(function (objectURL) {\n        var currentObject = storedData[objectURL];\n        return Object.keys(currentObject).filter(function (key) {\n          return key === 'schema' && currentObject[key] === schema;\n        }).length;\n      });\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_getResourcesByMetadata\",\n    value: function _getResourcesByMetadata(storedData, metadata) {\n      if (!metadata) return [];\n      return Object.keys(storedData).filter(function (objectURL) {\n        var currentObject = storedData[objectURL];\n        return Object.keys(currentObject).filter(function (key) {\n          // search on storeDataObjects for specific key provided from data;\n          return Object.keys(metadata).filter(function (searchFor) {\n            return key === searchFor && currentObject[key] === metadata[searchFor];\n          }).length;\n        }).length;\n      });\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_getResourcesByData\",\n    value: function _getResourcesByData(storedData, data) {\n      if (!data) return [];\n      return Object.keys(storedData).filter(function (objectURL) {\n        var currentObject = storedData[objectURL].hasOwnProperty('data') ? storedData[objectURL].data : {};\n        return Object.keys(currentObject).filter(function (key) {\n          // search on storeDataObjects for specific key provided from data;\n          return Object.keys(data).filter(function (searchFor) {\n            return key === searchFor && currentObject[key] === data[searchFor];\n          }).length;\n        }).length;\n      });\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_hasSubscription\",\n    value: function _hasSubscription(storedData, subscription) {\n      if (!storedData) return false;\n      return Object.keys(storedData).filter(function (objectURL) {\n        return storedData[objectURL].subscriptions.filter(function (current) {\n          return current === subscription;\n        }).length;\n      }).length > 0 ? true : false;\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_searchOwner\",\n    value: function _searchOwner(storedData, from) {\n      if (!storedData) return false;\n      return Object.keys(storedData).filter(function (objectURL) {\n        return storedData[objectURL].reporter === from;\n      }).length > 0 ? true : false;\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_checkProtostubResume\",\n    value: function _checkProtostubResume(storedDataObjects, msg) {\n      //return msg.from.includes('protostub');\n      if (!storedDataObjects) return false;\n\n      if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('value') && msg.body.value.hasOwnProperty('reporter')) {\n        var reporter = msg.body.value.reporter;\n\n        if (storedDataObjects.hasOwnProperty('reporters')) {\n          var reportersStored = storedDataObjects.reporters;\n          return Object.keys(reportersStored).filter(function (objectURL) {\n            return reportersStored[objectURL].reporter === reporter;\n          }).length > 0 ? true : false;\n        } else {\n          return false;\n        }\n      } else if (storedDataObjects.hasOwnProperty('observers')) {\n        var storedObservers = storedDataObjects.observers;\n        var fromDomain = Object(utils[\"k\" /* divideURL */])(msg.from).domain;\n        return Object.keys(storedObservers).filter(function (objectURL) {\n          var subscriptions = storedObservers[objectURL].subscriptions;\n          var hasSubscription = false;\n          subscriptions.forEach(function (subscription) {\n            var subscriptionDomain = Object(utils[\"k\" /* divideURL */])(subscription).domain;\n\n            if (subscriptionDomain == fromDomain) {\n              hasSubscription = true;\n            }\n          });\n\n          if (hasSubscription) {\n            return true;\n          }\n        }).length > 0 ? true : false;\n      }\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_isOwner\",\n    value: function _isOwner(value, url) {\n      if (!value) return false;\n      return value.reporter === url ? true : false;\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_intersection\",\n    value: function _intersection() {\n      var args = Array.from(arguments);\n      var result = args.reduce(function (first, second) {\n        return first.concat(second);\n      }).filter(function (value, index, self) {\n        return self.indexOf(value) === index;\n      });\n      DataObjectsStorage_log.log('DataObjectsStorage._intersection] Result an unique array of strings: ', result);\n      return result;\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_updateToArray\",\n    value: function _updateToArray(storeDataObject, resource, key, value) {\n      DataObjectsStorage_log.log('[DataObjectsStorage] - _updateToArray: ', storeDataObject, resource, key, value);\n      if (storeDataObject[resource][key].indexOf(value) === -1) storeDataObject[resource][key].push(value);\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_removeFromArray\",\n    value: function _removeFromArray(storeDataObject, resource, key, value) {\n      var indexOfValue = storeDataObject[resource][key].indexOf(value);\n      if (indexOfValue === -1) storeDataObject[resource][key].splice(indexOfValue, 1);\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_hasValue\",\n    value: function _hasValue(obj, key, value) {\n      return obj.hasOwnProperty(key) && obj[key] === value;\n    }\n    /**\r\n     * @private\r\n     * @todo documentation\r\n     */\n\n  }, {\n    key: \"_getTypeOfObject\",\n    value: function _getTypeOfObject(isReporter) {\n      return isReporter ? 'reporters' : 'observers';\n    }\n  }]);\n\n  return DataObjectsStorage;\n}();\n\n/* harmony default export */ var store_objects_DataObjectsStorage = (DataObjectsStorage_DataObjectsStorage);\n// CONCATENATED MODULE: ./src/utils/PromiseQueue.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction PromiseQueue_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction PromiseQueue_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PromiseQueue_createClass(Constructor, protoProps, staticProps) { if (protoProps) PromiseQueue_defineProperties(Constructor.prototype, protoProps); if (staticProps) PromiseQueue_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PromiseQueue =\n/*#__PURE__*/\nfunction () {\n  // TODO: Improve this Queuing\n  function PromiseQueue(concurrency) {\n    PromiseQueue_classCallCheck(this, PromiseQueue);\n\n    this.flushing = false;\n    this.Promise = Promise;\n    this.concurrency = typeof concurrency !== 'number' ? 1 : concurrency;\n    this.promises = [];\n    this.queue = [];\n    this.isProcessing = false;\n  }\n\n  PromiseQueue_createClass(PromiseQueue, [{\n    key: \"done\",\n    value: function done(cb) {\n      this.callback = cb;\n    }\n  }, {\n    key: \"add\",\n    value: function add(promise) {\n      var _this = this;\n\n      this.queue.push(promise);\n\n      if (!this.isProcessing) {\n        return this.queue.reduce(function (promiseChain, currentTask) {\n          return promiseChain.then(function (chainResults) {\n            return currentTask.then(function (currentResult) {\n              return [].concat(_toConsumableArray(chainResults), [currentResult]);\n            });\n          });\n        }, Promise.resolve([])).then(function (arrayOfResults) {\n          // Do something with all results\n          _this.isProcessing = false;\n        });\n      }\n    }\n  }]);\n\n  return PromiseQueue;\n}();\n\n/* harmony default export */ var utils_PromiseQueue = (PromiseQueue);\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResourcesStorage.js\nfunction HypertyResourcesStorage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction HypertyResourcesStorage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HypertyResourcesStorage_createClass(Constructor, protoProps, staticProps) { if (protoProps) HypertyResourcesStorage_defineProperties(Constructor.prototype, protoProps); if (staticProps) HypertyResourcesStorage_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar HypertyResourcesStorage_log = loglevel[\"getLogger\"]('HypertyResourcesStorage');\n\n\n\nvar HypertyResourcesStorage_HypertyResourcesStorage =\n/*#__PURE__*/\nfunction () {\n  function HypertyResourcesStorage(runtimeURL, bus, storageManager, hypertyResources) {\n    HypertyResourcesStorage_classCallCheck(this, HypertyResourcesStorage);\n\n    if (!storageManager) throw new Error('[HypertyResourcesStorage constructor] mandatory storageManager parameter missing');\n    if (!runtimeURL) throw new Error('[HypertyResourcesStorage constructor] mandatory runtimeURL parameter missing');\n    if (!bus) throw new Error('[HypertyResourcesStorage constructor] mandatory bus parameter missing');\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._storageLimit = 0.9; // the save storageLimit;\n\n    _this._url = runtimeURL + '/storage';\n    _this._storageManager = storageManager;\n    _this.promiseQueue = new utils_PromiseQueue();\n    _this._hypertyResources = hypertyResources;\n    bus.addListener(_this._url, function (msg) {\n      HypertyResourcesStorage_log.info('[HypertyResourcesStorage] Message RCV: ', msg);\n\n      switch (msg.type) {\n        case 'create':\n          _this._onCreate(msg);\n\n          break;\n\n        case 'read':\n          _this._onRead(msg);\n\n          break;\n\n        case 'delete':\n          _this._onDelete(msg);\n\n          break;\n      }\n    });\n  }\n  /**\r\n   * check the available storage quota\r\n   *\r\n   * @memberof HypertyResourcesStorage\r\n   */\n\n\n  HypertyResourcesStorage_createClass(HypertyResourcesStorage, [{\n    key: \"checkStorageQuota\",\n    value: function checkStorageQuota() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this2._availableQuota && _this2._usage) {\n          return resolve(Object(utils[\"b\" /* availableSpace */])(_this2._usage, _this2._availableQuota));\n        }\n\n        if (navigator) {\n          navigator.storage.estimate().then(function (estimate) {\n            _this2._availableQuota = estimate.quota;\n            _this2._usage = estimate.usage;\n            resolve(Object(utils[\"b\" /* availableSpace */])(_this2._usage, _this2._availableQuota));\n          })[\"catch\"](function (reason) {\n            HypertyResourcesStorage_log.error('[HypertyResourcesStorage] CheckStorageQuota error: ', reason);\n            reject(reason);\n          });\n        }\n      });\n    }\n    /**\r\n     * @description should save an HypertyResource contained in the body of a create message request;\r\n     *\r\n     * @param {string} message - message containing the hyperty resource to be stored\r\n     */\n\n  }, {\n    key: \"_onCreate\",\n    value: function _onCreate(message) {\n      var _this = this;\n\n      if (!message.body || !message.body.value) throw new Error('[HypertyResourcesStorage._onCreate] mandatory message body value missing: ', message);\n      var content = message.body.value;\n      var contentURL = content.contentURL;\n      var resourceURL = '';\n\n      if (!contentURL) {\n        contentURL = [];\n        resourceURL = _this._url + '/' + Object(utils[\"n\" /* generateGUID */])();\n      } else {\n        var currentURL = contentURL[0];\n        var resource = currentURL.substr(currentURL.lastIndexOf('/') + 1);\n        resourceURL = _this._url + '/' + resource;\n      }\n\n      if (!_this._hypertyResources.hasOwnProperty(resourceURL)) {\n        contentURL.push(resourceURL);\n        content.contentURL = contentURL;\n      }\n\n      this._hypertyResources[resourceURL] = content;\n      this.promiseQueue.add(this._toSave(resourceURL, message, content));\n    }\n  }, {\n    key: \"_toSave\",\n    value: function _toSave(resourceURL, message, content) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        var error = function error(reason) {\n          var response = {\n            from: message.to,\n            to: message.from,\n            id: message.id,\n            type: 'response',\n            body: {\n              value: resourceURL,\n              code: 500,\n              description: reason\n            }\n          };\n\n          _this3._bus.postMessage(response);\n\n          return reject(reason);\n        };\n\n        _this3.checkStorageQuota().then(function (result) {\n          if (content.size > result.quota) {\n            var msg = 'The storage do not have space to store that resource';\n            error(msg);\n            throw Error(msg);\n          }\n\n          var spaceAvailable = result.quota;\n          var allocated = result.usage + content.size;\n\n          if (result.percent >= _this3._storageLimit || allocated > spaceAvailable) {\n            return _this3._getOlderResources(content.size);\n          } else {\n            return true;\n          }\n        }).then(function () {\n          return _this3._storageManager.set(resourceURL, 1, content);\n        }).then(function () {\n          var response = {\n            from: message.to,\n            to: message.from,\n            id: message.id,\n            type: 'response',\n            body: {\n              value: resourceURL,\n              code: 200\n            }\n          };\n\n          _this3._bus.postMessage(response);\n\n          HypertyResourcesStorage_log.log('Success');\n          return resolve();\n        })[\"catch\"](error);\n      });\n    }\n  }, {\n    key: \"_getOlderResources\",\n    value: function _getOlderResources(size) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this4._storageManager.get().then(function (result) {\n          var resources = Object.keys(result);\n          var total = 0;\n          var reduced = resources.sort(function (a, b) {\n            return result[a].created < result[b].created;\n          }).reduce(function (previousResource, currentResource) {\n            var current = _this4._hypertyResources[currentResource];\n            HypertyResourcesStorage_log.log('[HypertyResourcesStorage] _getOlderResources: ', total, size, currentResource, _this4._availableQuota);\n\n            if (total <= size) {\n              total += current.size;\n              previousResource.push(currentResource);\n            }\n\n            return previousResource;\n          }, []);\n          var deleting = reduced.map(function (key) {\n            return _this4._storageManager[\"delete\"](key);\n          });\n          Promise.all(deleting).then(function () {\n            resolve(true);\n          })[\"catch\"](function (reason) {\n            reject(reason);\n          });\n        });\n      });\n    }\n    /**\r\n     * @description should return an HypertyResource stored in the Storage Manager identified by the content url contained in the body of a read message request;\r\n     *\r\n     * @param {string} message - message containing the hyperty resource to be stored\r\n     */\n\n  }, {\n    key: \"_onRead\",\n    value: function _onRead(message) {\n      var _this = this;\n\n      if (!message.body || !message.body.resource) throw new Error('[HypertyResourcesStorage._onRead] mandatory message body resource missing: ', message);\n      var contentUrl = message.body.resource;\n      var response = {\n        from: message.to,\n        to: message.from,\n        id: message.id,\n        type: 'response',\n        body: {}\n      }; // let content = _this._hypertyResources[contentUrl];\n\n      HypertyResourcesStorage_log.info('[HypertyResourcesStorage._onRead] get resourceURL:', contentUrl);\n\n      this._storageManager.get('resourceURL', contentUrl).then(function (content) {\n        HypertyResourcesStorage_log.info('[HypertyResourcesStorage._onRead] found content:', content);\n\n        if (content) {\n          if (content.resourceType === 'file') {\n            _this._onReadFile(response, content);\n          } else {\n            response.body.code = 200;\n            response.body.p2p = true;\n            response.body.value = content;\n\n            _this._bus.postMessage(response);\n          }\n        } else {\n          response.body.code = 404;\n          response.body.desc = 'Content Not Found for ' + contentUrl;\n\n          _this._bus.postMessage(response);\n        }\n      }); //response.body.code = 404;\n      //_this._hypertyResources[contentUrl] = message.body.value;\n\n    }\n  }, {\n    key: \"_onReadFile\",\n    value: function _onReadFile(response, resource) {\n      var _this = this;\n\n      var reader = new FileReader();\n\n      reader.onload = function (theFile) {\n        HypertyResourcesStorage_log.info('[FileHypertyResource.init] file loaded ', theFile);\n        response.body.code = 200;\n        response.body.p2p = true;\n        response.body.value = Object(utils[\"i\" /* deepClone */])(resource);\n        response.body.value.content = theFile.target.result;\n\n        _this._bus.postMessage(response);\n      };\n\n      if (resource.mimetype.includes('text/')) {\n        reader.readAsText(resource.content);\n      } else {\n        var current = resource.content;\n        var blob;\n\n        if (Array.isArray(current)) {\n          blob = new Blob(current, {\n            type: resource.mimetype\n          });\n        } else {\n          blob = new Blob([current], {\n            type: resource.mimetype\n          });\n        }\n\n        reader.readAsArrayBuffer(blob);\n      }\n    }\n    /**\r\n     * @description should delete an HypertyResource from the storage;\r\n     *\r\n     * @param {string} message - message containing the content URL of the hyperty resource to be deleted\r\n     */\n\n  }, {\n    key: \"_onDelete\",\n    value: function _onDelete(message) {\n      var _this = this;\n\n      if (!message.body) throw new Error('[HypertyResourcesStorage._onDelete] mandatory message body missing: ', message);\n\n      if (message.body.resource) {\n        delete _this._hypertyResources[message.body.resource];\n      } else if (message.body.resources) {\n        message.body.resources.forEach(function (resource) {\n          delete _this._hypertyResources[resource];\n        });\n      } else {\n        throw new Error('[HypertyResourcesStorage._onDelete] mandatory resource missing: ', message);\n      }\n\n      _this._storageManager[\"delete\"]('resourceURL', message.body.resource).then(function () {\n        var response = {\n          from: message.to,\n          to: message.from,\n          id: message.id,\n          type: 'response',\n          body: {\n            code: 200\n          }\n        };\n\n        _this._bus.postMessage(response);\n      })[\"catch\"](function (reason) {\n        var response = {\n          from: message.to,\n          to: message.from,\n          id: message.id,\n          type: 'response',\n          body: {\n            code: 400,\n            description: reason\n          }\n        };\n\n        _this._bus.postMessage(response);\n      });\n    }\n  }]);\n\n  return HypertyResourcesStorage;\n}();\n\n/* harmony default export */ var hyperty_resource_HypertyResourcesStorage = (HypertyResourcesStorage_HypertyResourcesStorage);\n// CONCATENATED MODULE: ./src/syncher/Subscription.js\nfunction Subscription_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Subscription_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Subscription_createClass(Constructor, protoProps, staticProps) { if (protoProps) Subscription_defineProperties(Constructor.prototype, protoProps); if (staticProps) Subscription_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar Subscription_log = loglevel[\"getLogger\"]('SynSubscription');\n\nvar Subscription =\n/*#__PURE__*/\nfunction () {\n  function Subscription(bus, owner, url, isReporter) {\n    Subscription_classCallCheck(this, Subscription);\n\n    var _this = this;\n\n    var childBaseURL = url + '/children/';\n    var changeURL = url + '/changes'; //process delete message\n\n    _this._deleteListener = bus.addListener(changeURL, function (msg) {\n      if (msg.type === 'delete') {\n        Subscription_log.log('Subscription-DELETE: ', msg); //FLOW-OUT: message sent to all subscribers\n\n        var deleteMessageToHyperty = {\n          type: 'delete',\n          from: msg.from,\n          to: owner,\n          body: {\n            identity: msg.body.identity,\n            resource: url\n          }\n        }; //send delete to hyperty\n\n        bus.postMessage(deleteMessageToHyperty, function (reply) {\n          Subscription_log.log('Subscription-DELETE-REPLY: ', reply);\n\n          if (reply.body.code === 200) {\n            _this._releaseListeners();\n          }\n        });\n      }\n    }); //add change publish address or forward\n\n    if (isReporter) {\n      _this._changeListener = bus.addPublish(changeURL);\n    } else {\n      _this._changeListener = bus.addForward(changeURL, owner);\n    }\n\n    _this._childrenListeners = []; //    log.log('[Subscription] - childID', childrens);\n    //    childrens.forEach((child) => {\n    //    let childId = childBaseURL + child;\n    //      log.log('[Subscription] - childID', childBaseURL);\n    //add children publish address\n\n    var childrenForward = bus.addPublish(childBaseURL);\n\n    _this._childrenListeners.push(childrenForward); //add self forward if an observer\n\n\n    if (!isReporter) {\n      var selfForward = bus.addForward(childBaseURL, owner);\n\n      _this._childrenListeners.push(selfForward);\n    } //    });\n\n  }\n\n  Subscription_createClass(Subscription, [{\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._deleteListener.remove();\n\n      _this._changeListener.remove();\n\n      _this._childrenListeners.forEach(function (forward) {\n        forward.remove();\n      });\n    }\n  }]);\n\n  return Subscription;\n}();\n\n/* harmony default export */ var syncher_Subscription = (Subscription);\n// CONCATENATED MODULE: ./src/syncher/ReporterObject.js\nfunction ReporterObject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ReporterObject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ReporterObject_createClass(Constructor, protoProps, staticProps) { if (protoProps) ReporterObject_defineProperties(Constructor.prototype, protoProps); if (staticProps) ReporterObject_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar ReporterObject_log = loglevel[\"getLogger\"]('ReporterObject');\n\n\n\n\nvar ReporterObject_ReporterObject =\n/*#__PURE__*/\nfunction () {\n  function ReporterObject(parent, owner, url, childrens, offline) {\n    ReporterObject_classCallCheck(this, ReporterObject);\n\n    var _this = this;\n\n    _this._parent = parent;\n    _this._owner = owner;\n    _this._url = url;\n    _this._bus = parent._bus;\n    _this._domain = Object(utils[\"k\" /* divideURL */])(url).domain;\n    _this._objSubscriptorURL = _this._url + '/subscription';\n    _this._subscriptions = {};\n    _this._childrens = childrens;\n    _this._childrenListeners = [];\n    _this._forwards = {};\n    _this._isToSaveData = false;\n\n    _this._allocateListeners();\n\n    _this._offline = offline ? offline : false;\n  }\n\n  ReporterObject_createClass(ReporterObject, [{\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      var _this2 = this;\n\n      var _this = this; //add subscription listener...\n\n\n      _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, function (msg) {\n        ReporterObject_log.info('[SyncherManager.ReporterObject received ]', msg);\n\n        switch (msg.type) {\n          case 'subscribe':\n            _this._onRemoteSubscribe(msg);\n\n            break;\n\n          case 'unsubscribe':\n            _this._onRemoteUnSubscribe(msg);\n\n            break;\n\n          case 'response':\n            _this._onRemoteResponse(msg);\n\n            break;\n\n          case 'forward':\n            _this._onForwardedRemoteSubscribe(msg);\n\n            break;\n        }\n      });\n      var changeURL = _this._url + '/changes';\n      _this._changeListener = _this._bus.addListener(changeURL, function (msg) {\n        ReporterObject_log.info('[SyncherManager.ReporterObject ] SyncherManager-' + changeURL + '-RCV: ', msg); //do not save changes to backupRevision to avoid infinite loops\n\n        if (_this2._isToSaveData && msg.body.attribute) {\n          var updateRuntimeStatus = msg.body.attribute !== 'backupRevision' ? true : false;\n          ReporterObject_log.log('[SyncherManager.ReporterObject ] SyncherManager - save data: ', msg);\n\n          _this._parent._dataObjectsStorage.update(true, _this._url, 'version', msg.body.version, updateRuntimeStatus);\n\n          _this._parent._dataObjectsStorage.update(true, _this._url, 'lastModified', msg.body.lastModified, updateRuntimeStatus);\n\n          _this._parent._dataObjectsStorage.saveData(true, _this._url, msg.body.attribute, msg.body.value, updateRuntimeStatus);\n        }\n      });\n    }\n  }, {\n    key: \"_onForwardedRemoteSubscribe\",\n    // To handle subscriptions sent while the reporter was offline ie forwarded by a Offline Subscription Manager service\n    value: function _onForwardedRemoteSubscribe(msg) {\n      this._onRemoteSubscribe(msg.body);\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._subscriptionListener.remove();\n\n      _this._changeListener.remove();\n\n      _this._childrenListeners.forEach(function (cl) {\n        cl.remove();\n      });\n\n      Object.keys(_this._forwards).forEach(function (key) {\n        _this.forwardUnSubscribe(key);\n      }); //remove all subscriptions\n\n      Object.keys(_this._subscriptions).forEach(function (key) {\n        _this._subscriptions[key]._releaseListeners();\n      });\n    }\n  }, {\n    key: \"resumeSubscriptions\",\n    value: function resumeSubscriptions(subscriptions) {\n      var _this = this;\n\n      if (!subscriptions) return;\n      Object.keys(subscriptions).forEach(function (key) {\n        var hypertyURL = subscriptions[key];\n        ReporterObject_log.log('[SyncherManager.ReporterObject] - resume subscriptions', _this, hypertyURL, _this._childrens);\n\n        if (!_this._subscriptions[hypertyURL]) {\n          _this._subscriptions[hypertyURL] = new syncher_Subscription(_this._bus, _this._owner, _this._url, true);\n        }\n      });\n    }\n    /**\r\n     * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object\r\n     * @param  {string} address - URL to register the listeners\r\n     * @return {Promise} Return Promise OK or error\r\n     */\n\n  }, {\n    key: \"forwardSubscribe\",\n    value: function forwardSubscribe(addresses) {\n      var _this = this; //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n\n\n      var nodeSubscribeMsg = {\n        type: 'subscribe',\n        from: _this._parent._url,\n        to: 'domain://msg-node.' + _this._domain + '/sm',\n        body: {\n          resources: addresses,\n          source: _this._owner\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this._bus.postMessageWithRetries(nodeSubscribeMsg, 10, function (reply) {\n          ReporterObject_log.log('[SyncherManager.ReporterObject ]forward-subscribe-response(reporter): ', reply);\n\n          if (reply.body.code === 200) {\n            var newForward = _this._bus.addForward(_this._url, _this._owner);\n\n            _this._forwards[addresses[0]] = newForward;\n            resolve();\n          } else {\n            reject('Error on msg-node subscription: ' + reply.body.desc);\n          }\n        });\n      });\n    }\n    /**\r\n     * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward\r\n     * @param  {string} address - URL to un-register the listeners\r\n     */\n\n  }, {\n    key: \"forwardUnSubscribe\",\n    value: function forwardUnSubscribe(address) {\n      var _this = this;\n\n      _this._forwards[address].remove();\n\n      delete _this._forwards[address]; //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n\n      var nodeUnSubscribeMsg = {\n        type: 'unsubscribe',\n        from: _this._parent._url,\n        to: 'domain://msg-node.' + _this._domain + '/sm',\n        body: {\n          resources: [address],\n          source: _this._owner\n        }\n      };\n\n      _this._bus.postMessage(nodeUnSubscribeMsg);\n    }\n    /**\r\n     * Register listeners for a list of childrens. Public channels used to transmit messages.\r\n     * @param  {string[]} childrens - channels to register\r\n     * @return {Promise} Return Promise OK or error\r\n     */\n\n  }, {\n    key: \"addChildrens\",\n    value: function addChildrens() {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this._childrens.length === 0) {\n          resolve();\n          return;\n        }\n\n        var childBaseURL = _this._url + '/children/';\n        ReporterObject_log.log('[SyncherManager.ReporterObject - addChildrens] - childrens: ', childBaseURL);\n        /*    childrens.forEach((child) => {\r\n              _this._childrens.push(child);\r\n            });*/\n\n        /*\r\n        _this._childrens.forEach((child) => {\r\n          let childId = childBaseURL + child;\r\n            let selfForward = _this._bus.addForward(childId, owner);\r\n          _this._childrenListeners.push(selfForward);\r\n        });*/\n\n        var subscriptions = []; //      childrens.forEach((child) => subscriptions.push(childBaseURL + child));\n\n        subscriptions.push(childBaseURL); //_this._storageSubscriptions[_this._objSubscriptorURL] = {url: _this._url, owner: _this._owner, childrens: _this._childrens};\n        //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n\n        var nodeSubscribeMsg = {\n          type: 'subscribe',\n          from: _this._parent._url,\n          to: 'domain://msg-node.' + _this._domain + '/sm',\n          body: {\n            resources: subscriptions,\n            source: _this._owner\n          }\n        };\n\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          ReporterObject_log.log('[SyncherManager.ReporterObject ]node-subscribe-response(reporter):', reply);\n\n          if (reply.body.code === 200) {\n            //add children listeners on local ...\n            subscriptions.forEach(function (childURL) {\n              var childListener = _this._bus.addListener(childURL, function (msg) {\n                //TODO: what todo here? Save childrens?\n                ReporterObject_log.log('[SyncherManager.ReporterObject received]', msg);\n\n                if (msg.type === 'create' && msg.to.includes('children') && _this3._isToSaveData) {\n                  // if the value is not encrypted lets encrypt it\n                  // todo: should be subject to some policy\n                  var splitedReporterURL = Object(utils[\"D\" /* splitObjectURL */])(msg.to);\n                  var url = splitedReporterURL.url;\n                  if (!msg.body.hasOwnProperty('mutual')) msg.body.mutual = true; //remove false when mutualAuthentication is enabled\n\n                  if (!(typeof msg.body.value === 'string') && msg.body.mutual) {\n                    ReporterObject_log.log('[SyncherManager.ReporterObject] encrypting received data ', msg.body.value);\n                    cryptoManager_CryptoManager.encryptDataObject(msg.body.value, url).then(function (encryptedValue) {\n                      ReporterObject_log.log('[SyncherManager.ReporterObject] encrypted data ', encryptedValue);\n\n                      _this._storeChildObject(msg, JSON.stringify(encryptedValue));\n                    })[\"catch\"](function (reason) {\n                      ReporterObject_log.warn('[SyncherManager._decryptChildrens] failed : ', reason, ' Storing unencrypted');\n\n                      _this._storeChildObject(msg, msg.body.value);\n                    });\n                  } else {\n                    _this._storeChildObject(msg, msg.body.value);\n                  }\n                }\n              });\n\n              _this._childrenListeners.push(childListener);\n\n              var selfForward = _this._bus.addForward(childURL, _this._owner);\n\n              _this._childrenListeners.push(selfForward);\n            });\n            resolve();\n          } else {\n            reject('Error on msg-node subscription: ' + reply.body.desc);\n          }\n        });\n      });\n    } // store childObject\n\n  }, {\n    key: \"_storeChildObject\",\n    value: function _storeChildObject(msg, data) {\n      var _this = this;\n\n      var splitedReporterURL = Object(utils[\"D\" /* splitObjectURL */])(msg.to);\n      var url = splitedReporterURL.url;\n      var resource = splitedReporterURL.resource;\n      var value;\n      /*    if (msg.body.identity) {\r\n            value.identity = msg.body.identity;\r\n            delete value.identity.assertion;\r\n            delete value.identity.expires;\r\n          }*/\n\n      var objectURLResource = msg.body.resource;\n      var attribute = resource;\n      if (objectURLResource === 'heartbeat') value = data;else value = {\n        identity: msg.body.identity,\n        value: data\n      }; //    if (objectURLResource) attribute += '.' + objectURLResource;\n\n      if (objectURLResource) attribute = objectURLResource; // this identity data is not needed to be stored\n\n      console.log('[SyncherManager.ReporterObject._storeChildObject] : ', url, attribute, value);\n\n      _this._parent._dataObjectsStorage.saveChildrens(true, url, attribute, value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      var domain = Object(utils[\"k\" /* divideURL */])(_this._owner).domain; //FLOW-OUT: message sent directly to all subscribers of the reporter\n\n      _this._bus.postMessage({\n        type: 'delete',\n        from: _this._objSubscriptorURL,\n        to: _this._url + '/changes'\n      }); //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component\n\n\n      _this._bus.postMessage({\n        type: 'delete',\n        from: _this._parent._url,\n        to: 'domain://msg-node.' + domain + '/object-address-allocation',\n        body: {\n          resource: _this._url,\n          childrenResources: _this._childrens\n        }\n      });\n\n      _this._releaseListeners();\n\n      delete _this._parent._reporters[_this._url];\n    }\n  }, {\n    key: \"_onRemoteResponse\",\n    value: function _onRemoteResponse(msg) {\n      var _this = this;\n\n      _this._bus.postMessage({\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: _this._url,\n        body: {\n          code: msg.body.code,\n          identity: msg.body.identity,\n          source: msg.from\n        }\n      });\n    } //FLOW-IN: message received from Syncher -> subscribe\n\n  }, {\n    key: \"_onRemoteSubscribe\",\n    value: function _onRemoteSubscribe(msg) {\n      var _this = this;\n\n      var hypertyURL = msg.body.subscriber; //validate if subscription already exists?\n\n      if (_this._subscriptions[hypertyURL]) {\n        // let errorMsg = {\n        //   id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n        //   body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' +  hypertyURL + ') already exists!' }\n        // };\n        //\n        // _this._bus.postMessage(errorMsg);\n        // return;\n        // new version because of reusage\n        _this._subscriptions[hypertyURL]._releaseListeners();\n      } //ask to subscribe to Syncher? (depends on the operation mode)\n      //TODO: get mode from object!\n\n\n      var mode = 'sub/pub';\n\n      if (mode === 'sub/pub') {\n        //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward\n        var forwardMsg = {\n          type: 'forward',\n          from: _this._url,\n          to: _this._owner,\n          body: {\n            type: msg.type,\n            from: hypertyURL,\n            to: _this._url,\n            identity: msg.body.identity\n          }\n        }; //TODO: For Further Study\n\n        if (msg.body.hasOwnProperty('mutual')) forwardMsg.body.mutual = msg.body.mutual;\n\n        _this._bus.postMessage(forwardMsg, function (reply) {\n          ReporterObject_log.log('[SyncherManager.ReporterObject ]forward-reply: ', reply);\n\n          if (reply.body.code === 200) {\n            if (!_this._subscriptions[hypertyURL]) {\n              ReporterObject_log.log('[SyncherManager.ReporterObject] - _onRemoteSubscribe:', _this._childrens);\n              _this._subscriptions[hypertyURL] = new syncher_Subscription(_this._bus, _this._owner, _this._url, true);\n            }\n          } // Store for each reporter hyperty the dataObject\n\n\n          var userURL;\n\n          if (msg.body.identity && msg.body.identity.userProfile.userURL) {\n            userURL = msg.body.identity.userProfile.userURL;\n\n            _this._parent._dataObjectsStorage.update(true, _this._url, 'subscriberUsers', userURL);\n          } //TODO: mutual and sessionkeys updates were removed. FFS\n\n          /*        if (msg.body.hasOwnProperty('mutual')) {\r\n          //          _this._parent._identityModule.updateIsToEncryptForDataObjectSessionKey(_this._url, msg.body.mutual).then(()=>{\r\n              _this._parent._dataObjectsStorage.update(true, _this._url, 'mutual', msg.body.mutual);\r\n          //          });\r\n          }*/\n\n\n          _this._parent._dataObjectsStorage.update(true, _this._url, 'subscriptions', hypertyURL);\n\n          reply.body.owner = _this._owner; //FLOW-OUT: subscription response sent (forward from internal Hyperty)\n\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: reply.body\n          });\n        });\n      }\n    } //FLOW-IN: message received from remote ObserverObject -> removeSubscription\n\n  }, {\n    key: \"_onRemoteUnSubscribe\",\n    value: function _onRemoteUnSubscribe(msg) {\n      var _this = this;\n\n      var unsubscriber = msg.body.source;\n      var subscription = _this._subscriptions[unsubscriber];\n\n      if (subscription) {\n        subscription._releaseListeners();\n\n        delete _this._subscriptions[unsubscriber];\n        var forwardMsg = {\n          type: 'forward',\n          from: _this._url,\n          to: _this._owner,\n          body: {\n            type: msg.type,\n            from: unsubscriber,\n            to: _this._url,\n            identity: msg.body.identity\n          }\n        };\n\n        _this._bus.postMessage(forwardMsg);\n      }\n    }\n  }, {\n    key: \"offline\",\n    get: function get() {\n      return this._offline;\n    }\n  }, {\n    key: \"isToSaveData\",\n    set: function set(value) {\n      this._isToSaveData = value;\n    }\n  }]);\n\n  return ReporterObject;\n}();\n\n/* harmony default export */ var syncher_ReporterObject = (ReporterObject_ReporterObject);\n// CONCATENATED MODULE: ./src/syncher/ObserverObject.js\nfunction ObserverObject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ObserverObject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ObserverObject_createClass(Constructor, protoProps, staticProps) { if (protoProps) ObserverObject_defineProperties(Constructor.prototype, protoProps); if (staticProps) ObserverObject_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar ObserverObject_log = loglevel[\"getLogger\"]('ObserverObject');\n\n\n\n\nvar ObserverObject_ObserverObject =\n/*#__PURE__*/\nfunction () {\n  function ObserverObject(parent, url, childrens) {\n    var _this2 = this;\n\n    ObserverObject_classCallCheck(this, ObserverObject);\n\n    var _this = this;\n\n    _this._parent = parent;\n    _this._url = url;\n    _this._childrens = childrens;\n    _this._bus = parent._bus;\n    _this._subscriptions = {};\n    _this._storageSubscriptions = {};\n    _this._childrenListeners = [];\n    this._isToSaveData = false;\n    var changeURL = _this._url + '/changes';\n    _this._changeListener = _this._bus.addListener(changeURL, function (msg) {\n      ObserverObject_log.log('[SyncherManager.ObserverObject ] SyncherManager-' + changeURL + '-RCV: ', msg); //TODO: what todo here? Save changes?\n\n      if (_this2._isToSaveData && msg.body.attribute) {\n        ObserverObject_log.log('[SyncherManager.ObserverObject ] SyncherManager - save data: ', msg);\n\n        _this._parent._dataObjectsStorage.update(false, _this._url, 'version', msg.body.version);\n\n        _this._parent._dataObjectsStorage.update(false, _this._url, 'lastModified', msg.body.lastModified);\n\n        _this._parent._dataObjectsStorage.saveData(false, _this._url, msg.body.attribute, msg.body.value);\n      }\n    });\n  }\n\n  ObserverObject_createClass(ObserverObject, [{\n    key: \"_newSubscription\",\n    value: function _newSubscription(hyperty) {\n      var _this = this;\n\n      var subscription = _this._subscriptions[hyperty];\n      ObserverObject_log.log('[Observer Object - new subscription] - ', _this._subscriptions, hyperty, _this._subscriptions.hasOwnProperty(hyperty));\n\n      if (!subscription) {\n        _this._subscriptions[hyperty] = new syncher_Subscription(_this._bus, hyperty, _this._url, false);\n      }\n    }\n  }, {\n    key: \"addSubscription\",\n    value: function addSubscription(hyperty) {\n      var _this = this;\n\n      _this._newSubscription(hyperty);\n    }\n  }, {\n    key: \"addChildrens\",\n    value: function addChildrens() {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        if (_this._childrens.length === 0) {\n          resolve();\n          return;\n        }\n\n        var childBaseURL = _this._url + '/children/';\n        ObserverObject_log.log('[SyncherManager.ObserverObject - addChildrens] - childrens: ', childBaseURL); //      childrens.forEach((child) => {\n\n        var childListener = _this._bus.addListener(childBaseURL, function (msg) {\n          //TODO: what todo here? Save childrens?\n          ObserverObject_log.log('[SyncherManager.ObserverObject received]', msg);\n\n          if (msg.type === 'create' && msg.to.includes('children') && _this3._isToSaveData) {\n            var splitedReporterURL = Object(utils[\"D\" /* splitObjectURL */])(msg.to);\n            var url = splitedReporterURL.url;\n            if (!msg.body.hasOwnProperty('mutual')) msg.body.mutual = true; //remove false when mutualAuthentication is enabled\n\n            if (!(typeof msg.body.value === 'string') && msg.body.mutual) {\n              ObserverObject_log.log('[SyncherManager.ObserverObject] encrypting received data ', msg.body.value);\n              cryptoManager_CryptoManager.encryptDataObject(msg.body.value, url).then(function (encryptedValue) {\n                ObserverObject_log.log('[SyncherManager.ObserverObject] encrypted data ', encryptedValue);\n\n                _this._storeChildObject(msg, JSON.stringify(encryptedValue));\n              })[\"catch\"](function (reason) {\n                ObserverObject_log.warn('[SyncherManager.ObserverObject._encryptChild] failed, storing unencrypted ', reason);\n\n                _this._storeChildObject(msg, msg.body.value);\n              });\n            } else {\n              _this._storeChildObject(msg, msg.body.value);\n            }\n          }\n\n          ObserverObject_log.log('[SyncherManager.ObserverObject children Listeners]', _this._childrenListeners, childListener);\n\n          if (_this._childrenListeners.indexOf(childListener) === -1) {\n            _this._childrenListeners.push(childListener);\n          }\n        });\n      }); //    });\n    } // store childObject\n\n  }, {\n    key: \"_storeChildObject\",\n    value: function _storeChildObject(msg, data) {\n      var _this = this;\n\n      var splitedReporterURL = Object(utils[\"D\" /* splitObjectURL */])(msg.to);\n      var url = splitedReporterURL.url;\n      var resource = splitedReporterURL.resource;\n      var value = {};\n      /*    let value = {\r\n            identity: msg.body.identity,\r\n            value: data\r\n          };*/\n      // this identity data is not needed to be stored\n\n      /*    delete value.identity.assertion;\r\n          delete value.identity.expires;*/\n\n      var objectURLResource = msg.body.resource;\n      var attribute = resource;\n\n      if (objectURLResource === 'heartbeat') {\n        value = data;\n      } else {\n        value.identity = msg.body.identity;\n        value.value = data;\n      } //    if (objectURLResource) attribute += '.' + objectURLResource;\n\n\n      if (objectURLResource) attribute = objectURLResource;\n      ObserverObject_log.log('[SyncherManager.ObserverObject._storeChildObject] : ', url, attribute, value);\n\n      _this._parent._dataObjectsStorage.saveChildrens(false, url, attribute, value);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(msg) {\n      var _this = this;\n\n      var hyperty = msg.from;\n      var domain = Object(utils[\"k\" /* divideURL */])(hyperty).domain;\n      var objURLSubscription = _this._url + '/subscription';\n      var subscription = _this._subscriptions[hyperty];\n\n      if (subscription) {\n        //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe\n        _this._bus.postMessage({\n          type: 'unsubscribe',\n          from: _this._parent._url,\n          to: objURLSubscription,\n          body: {\n            source: hyperty,\n            identity: msg.body.identity\n          }\n        }); //TODO: should I wait for response before unsubscribe on msg-node\n        //FLOW-OUT: message sent to msg-node SubscriptionManager component\n\n\n        _this._bus.postMessage({\n          type: 'unsubscribe',\n          from: _this._parent._url,\n          to: 'domain://msg-node.' + domain + '/sm',\n          body: {\n            resource: _this._url,\n            resources: [_this._url + '/children/']\n          }\n        });\n\n        subscription._releaseListeners();\n\n        delete _this._subscriptions[hyperty];\n      }\n    }\n  }, {\n    key: \"isToSaveData\",\n    set: function set(value) {\n      this._isToSaveData = value;\n    }\n  }]);\n\n  return ObserverObject;\n}();\n\n/* harmony default export */ var syncher_ObserverObject = (ObserverObject_ObserverObject);\n// CONCATENATED MODULE: ./src/syncher/SyncherManager.js\nfunction SyncherManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SyncherManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SyncherManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) SyncherManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) SyncherManager_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar SyncherManager_log = loglevel[\"getLogger\"]('SyncherManager');\n //import { schemaValidation } from '../utils/schemaValidation';\n\n\n\n\n\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Core Syncronization system.\r\n */\n\nvar SyncherManager_SyncherManager =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _url: URL\r\n  _bus: MiniBus\r\n  _registry: Registry\r\n  _allocator: AddressAllocation\r\n    _reporters: { ObjectURL: ReporterObject }\r\n  _observers: { ObjectURL: ObserverObject }\r\n  */\n  function SyncherManager(runtimeURL, bus, registry, storageManager, allocator, storeDataObjects, identityModule) {\n    SyncherManager_classCallCheck(this, SyncherManager);\n\n    if (!runtimeURL) throw new Error('[Syncher Manager] - needs the runtimeURL parameter');\n    if (!bus) throw new Error('[Syncher Manager] - needs the MessageBus instance');\n    if (!registry) throw new Error('[Syncher Manager] - needs the Registry instance');\n    if (!storageManager) throw new Error('[Syncher Manager] - need the storageManager instance');\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._registry = registry;\n    _this._storageManager = storageManager;\n    _this._identityModule = identityModule; //TODO: these should be saved in persistence engine?\n\n    _this.runtimeURL = runtimeURL;\n    _this._url = runtimeURL + '/sm';\n    _this._objectURL = runtimeURL + '/object-allocation';\n    _this._reporters = {};\n    _this._observers = {};\n    _this._dataObjectsStorage = storeDataObjects;\n    console.log('[NOTSAVING] storeDataObjects', storeDataObjects); //TODO: this should not be hardcoded!\n\n    _this._domain = Object(utils[\"k\" /* divideURL */])(runtimeURL).domain;\n\n    if (allocator) {\n      _this._allocator = allocator;\n    } else {\n      _this._allocator = allocation_AddressAllocation.instance;\n    }\n\n    SyncherManager_log.log('[SyncherManager - AddressAllocation] - ', _this._allocator);\n    bus.addListener(_this._url, function (msg) {\n      SyncherManager_log.info('[SyncherManager] RCV: ', msg);\n\n      switch (msg.type) {\n        case 'create':\n          _this._onCreate(msg);\n\n          break;\n\n        case 'delete':\n          _this._onDelete(msg);\n\n          break;\n\n        case 'subscribe':\n          _this._onLocalSubscribe(msg);\n\n          break;\n\n        case 'unsubscribe':\n          _this._onLocalUnSubscribe(msg);\n\n          break;\n\n        case 'read':\n          _this._onRead(msg);\n\n          break;\n\n        case 'execute':\n          _this._onExecute(msg);\n\n          break;\n      }\n    });\n  }\n\n  SyncherManager_createClass(SyncherManager, [{\n    key: \"_onExecute\",\n    //FLOW-IN: message received from Syncher -> read\n    value: function _onExecute(msg) {\n      var _this = this;\n\n      var reply = {\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        id: msg.id\n      };\n      SyncherManager_log.info('[SyncherManager.onExecute] new message', msg);\n\n      if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('method') && msg.body.hasOwnProperty('params')) {\n        switch (msg.body.method) {\n          case 'sync':\n            _this._dataObjectsStorage.sync(msg.body.params[0], msg.body.params[1], false);\n\n            break;\n\n          case 'stopSync':\n            _this._dataObjectsStorage.stopSync(msg.body.params[0]);\n\n            break;\n        }\n\n        reply.body = {\n          code: 200\n        };\n\n        _this._bus.postMessage(reply);\n      } else {\n        reply.body = {\n          code: 400,\n          desc: 'missing body or body method / params mandatory fields'\n        };\n        SyncherManager_log.error('[SyncherManager.onExecute] error. Missing body or body method / params mandatory fields', msg);\n\n        _this._bus.postMessage(reply);\n      }\n    } //FLOW-IN: message received from Syncher -> read\n\n  }, {\n    key: \"_onRead\",\n    value: function _onRead(msg) {\n      var _this = this;\n\n      var reply = {\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        id: msg.id\n      };\n      SyncherManager_log.info('[SyncherManager.onRead] new message', msg);\n\n      if (msg.hasOwnProperty('body') && msg.body.hasOwnProperty('resource')) {\n        _this._dataObjectsStorage.sync(msg.body.resource, true).then(function (dataObject) {\n          reply.body = {\n            code: 200,\n            value: dataObject\n          };\n          SyncherManager_log.info('[SyncherManager.onRead] found object: ', dataObject);\n\n          _this._bus.postMessage(reply);\n        }, function (error) {\n          reply.body = {\n            code: 404,\n            desc: error\n          };\n          SyncherManager_log.warn('[SyncherManager.onRead] warning: ', error);\n\n          _this._bus.postMessage(reply);\n        });\n      } else {\n        reply.body = {\n          code: 400,\n          desc: 'missing body or body resource mandatory fields'\n        };\n        SyncherManager_log.error('[SyncherManager.onRead] error. Missing body or body resource mandatory fields', msg);\n\n        _this._bus.postMessage(reply);\n      }\n    } //FLOW-IN: message received from Syncher -> create\n\n  }, {\n    key: \"_onCreate\",\n    value: function _onCreate(msg) {\n      var _this2 = this;\n\n      var from = msg.from;\n      var to = msg.to;\n\n      var _this = this; // check if message is to save new childrenObjects in the local storage\n      // TODO: check if message is to store new child in the local storage and call storeChild. How to distinguish from others?\n      //debugger;\n\n\n      if (msg.body.attribute) {\n        this._storeChildrens(msg);\n      } else {\n        if (!msg.body.hasOwnProperty('resume') || msg.body.hasOwnProperty('resume') && !msg.body.resume) {\n          // check if this is an invitation message\n          if (msg.body.authorise) {\n            this._authorise(msg);\n\n            SyncherManager_log.info('[SyncherManager.onCreate - invite observers]', msg);\n          } else {\n            // this is to create a new data object\n            SyncherManager_log.info('[SyncherManager.onCreate - Create New Object]', msg);\n\n            this._newCreate(msg);\n          }\n        } else {\n          // If from the hyperty side, call the resumeReporter we will have resume = true'\n          // so we will create an resumed object and will try to resume the object previously saved;\n          this._dataObjectsStorage.getResourcesByCriteria(msg, true).then(function (result) {\n            SyncherManager_log.info('[SyncherManager - Create Resumed] - ResourcesByCriteria | Message: ', msg, ' result: ', result);\n\n            if (result && Object.keys(result).length > 0) {\n              var listOfReporters = [];\n              Object.keys(result).forEach(function (objURL) {\n                listOfReporters.push(_this._resumeCreate(msg, result[objURL]));\n              });\n              Promise.all(listOfReporters).then(function (resumedReporters) {\n                SyncherManager_log.log('[SyncherManager - Create Resumed]', resumedReporters); // TODO: shoud send the information if some object was failing;\n\n                var successfullyResumed = Object.values(resumedReporters).filter(function (reporter) {\n                  return reporter !== false;\n                });\n                SyncherManager_log.info('[SyncherManager.onCreate] returning resumed objects : ', successfullyResumed); //FLOW-OUT: message response to Syncher -> create resume\n\n                _this2._bus.postMessage({\n                  id: msg.id,\n                  type: 'response',\n                  from: to,\n                  to: from,\n                  body: {\n                    code: 200,\n                    value: Object(utils[\"i\" /* deepClone */])(successfullyResumed)\n                  }\n                });\n                /*successfullyResumed.forEach((reporter) => {\r\n                  if (reporter.backup) {\r\n                    this._dataObjectsStorage.sync(reporter.url);\r\n                  }\r\n                });*/\n\n              });\n            } else {\n              //forward to hyperty:\n              var reply = {};\n              reply.id = msg.id;\n              reply.from = msg.to;\n              reply.to = msg.from;\n              reply.type = 'response';\n              reply.body = {\n                code: 404,\n                desc: 'No data objects reporters to be resumed'\n              };\n\n              _this2._bus.postMessage(reply);\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_storeChildrens\",\n    value: function _storeChildrens(msg) {\n      var _this = this;\n\n      var resource = msg.body.resource;\n      var attribute = msg.body.attribute;\n\n      if (attribute === 'childrenObjects') {\n        _this._dataObjectsStorage.saveChildrens(false, resource, undefined, msg.body.value);\n      } else {\n        _this._dataObjectsStorage.saveChildrens(true, resource, attribute, msg.body.value);\n      }\n    }\n  }, {\n    key: \"_newCreate\",\n    value: function _newCreate(msg) {\n      var _this3 = this;\n\n      var _this = this;\n\n      var owner = msg.from;\n      var domain = Object(utils[\"k\" /* divideURL */])(msg.from).domain; // if reporter is in a Interworking Protostub the runtime domain backend services will be used\n\n      if (_this._registry.isInterworkingProtoStub(msg.from)) {\n        domain = Object(utils[\"k\" /* divideURL */])(_this.runtimeURL).domain;\n      } //    let domainRegistration = msg.body.value.hasOwnProperty('domain_registration') ? msg.body.value.domain_registration : true;\n\n\n      var domainRouting = msg.body.value.hasOwnProperty('domain_routing') ? msg.body.value.domain_routing : true; // Process invitation message to observers\n\n      /*if (msg.body.authorise) {\r\n        _this._authorise(msg);\r\n        return;\r\n      }*/\n      //get schema from catalogue and parse -> (scheme, children)\n\n      _this._registry.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {\n        var properties = descriptor.sourcePackage.sourceCode.properties;\n        var scheme = properties.scheme ? properties.scheme : 'resource';\n        var childrens = properties.childrens ? properties.childrens : []; // Do schema validation\n        // TODO: check if is need to handle with the result of validation\n        //      schemaValidation(scheme, descriptor, msg.body.value);\n\n        var objectInfo = {\n          name: msg.body.value.name,\n          schema: msg.body.value.schema,\n          reporter: msg.body.value.reporter,\n          resources: msg.body.value.resources\n        }; // should resuse data object url if it passed\n\n        var reuseDataObject = msg.body.value.resource;\n        var numOfAddress = 1; //debugger;\n        //request address allocation of a new object from the msg-node\n        //_this._allocator.create(domain, numOfAddress, objectInfo, scheme, reuseDataObject).then((allocated) => {\n\n        _this._allocator.create(domain, numOfAddress, objectInfo, scheme, reuseDataObject).then(function (allocated) {\n          var objectRegistration = Object(utils[\"i\" /* deepClone */])(msg.body.value);\n          objectRegistration.url = allocated.address[0];\n          objectRegistration.authorise = msg.body.authorise;\n          objectRegistration.childrens = childrens; //objectRegistration.expires = 30;//TODO: get it from data object configuration description when present\n\n          delete objectRegistration.data;\n          SyncherManager_log.log('[SyncherManager._newCreate] ALLOCATOR CREATE:', allocated);\n          var subscriptionURL = objectRegistration.url + '/subscription';\n          SyncherManager_log.log('[SyncherManager._newCreate] Subscription URL', subscriptionURL); //To register the dataObject in the runtimeRegistry\n\n          SyncherManager_log.info('[SyncherManager._newCreate] Register Object: ', objectRegistration); //_this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, allocated, msg.body.authorise).then((resolve) => {\n\n          _this._registry.registerDataObject(objectRegistration).then(function (registeredObject) {\n            SyncherManager_log.log('[SyncherManager._newCreate] DataObject successfully registered', registeredObject); //all OK -> create reporter and register listeners\n\n            var reporter;\n\n            if (!_this3._reporters[objectRegistration.url]) {\n              var offline = objectRegistration.offline ? objectRegistration.offline : false;\n              reporter = new syncher_ReporterObject(_this, owner, objectRegistration.url, childrens, offline);\n            } else {\n              reporter = _this3._reporters[objectRegistration.url];\n            }\n\n            SyncherManager_log.log('[SyncherManager - new Create] - ', msg); // Store for each reporter hyperty the dataObject\n\n            var userURL; // let interworking = false;\n\n            if (msg.body.hasOwnProperty('identity') && msg.body.identity.userProfile && msg.body.identity.userProfile.userURL) {\n              userURL = msg.body.identity.userProfile.userURL; // if (!userURL.includes('user://')) {\n              //   interworking = true;\n              // }\n            } else {\n              userURL = _this._registry.getHypertyOwner(msg.from); // if (!userURL) {\n              //   interworking = true;\n              // }\n            } // should we use the msg.body.value instead?\n\n\n            var metadata = Object(utils[\"i\" /* deepClone */])(objectRegistration);\n            metadata.subscriberUser = userURL;\n            metadata.isReporter = true; // Store the dataObject information\n            //if (!interworking) {\n\n            if (msg.body.hasOwnProperty('store') && msg.body.store) {\n              reporter.isToSaveData = true;\n              metadata.isToSaveData = true;\n\n              if (msg.body.value.data) {\n                metadata.data = Object(utils[\"i\" /* deepClone */])(msg.body.value.data); //              _this._dataObjectsStorage.saveData(true, objectRegistration.url, null, msg.body.value.data); }\n                //            _this._dataObjectsStorage.update(true, objectRegistration.url, 'isToSaveData', true);\n                //            if (msg.body.value.data) { _this._dataObjectsStorage.saveData(true, objectRegistration.url, null, msg.body.value.data); }\n              }\n            }\n\n            _this._dataObjectsStorage.set(metadata).then(function (storeObject) {\n              if (metadata.offline) {\n                //register new DataObject at Offline Subscription Manager\n                msg.body.identity.guid = _this._identityModule._identities.guid;\n                var forward = {\n                  from: msg.to,\n                  to: metadata.offline + '/register',\n                  type: 'forward',\n                  body: msg\n                };\n                forward.body.body.resource = objectRegistration.url;\n                forward.body.body.value = metadata;\n                SyncherManager_log.log('[SyncherManager.newCreate] registering new object at offline manager ', forward);\n\n                _this._bus.postMessage(forward);\n              } //}\n\n\n              var responseMsg = {\n                id: msg.id,\n                type: 'response',\n                from: msg.to,\n                to: owner,\n                body: {\n                  code: 200,\n                  resource: objectRegistration.url,\n                  childrenResources: childrens\n                }\n              }; // adding listeners to forward to reporter\n\n              if (domainRouting) {\n                reporter.forwardSubscribe([objectRegistration.url, subscriptionURL]).then(function () {\n                  reporter.addChildrens().then(function () {\n                    _this._reporters[objectRegistration.url] = reporter; //FLOW-OUT: message response to Syncher -> create\n\n                    _this._bus.postMessage(responseMsg);\n                  });\n                });\n              } else {\n                reporter.addChildrens().then(function () {\n                  _this._reporters[objectRegistration.url] = reporter; //FLOW-OUT: message response to Syncher -> create\n\n                  _this._bus.postMessage(responseMsg);\n                });\n              }\n            }, function (error) {\n              SyncherManager_log.error(error);\n            });\n          }, function (error) {\n            SyncherManager_log.error(error);\n          });\n        });\n      })[\"catch\"](function (reason) {\n        //FLOW-OUT: error message response to Syncher -> create\n        var responseMsg = {\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: owner,\n          body: {\n            code: 500,\n            desc: reason\n          }\n        };\n\n        _this._bus.postMessage(responseMsg);\n      });\n    }\n  }, {\n    key: \"_resumeCreate\",\n    value: function _resumeCreate(msg, storedObject) {\n      var _this4 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var owner = msg.from;\n        var schema = storedObject.schema;\n        var resource = storedObject.url;\n        var domainRegistration = storedObject.hasOwnProperty('domain_registration') ? storedObject.domain_registration : true;\n        var initialData = storedObject.data;\n        SyncherManager_log.log('[SyncherManager] - resume create', msg, storedObject); //get schema from catalogue and parse -> (scheme, children)\n\n        _this._registry.getDataSchemaDescriptor(schema).then(function (descriptor) {\n          var properties = descriptor.sourcePackage.sourceCode.properties;\n          var scheme = properties.scheme ? properties.scheme.constant : 'resource';\n          var childrens = properties.childrens ? properties.childrens : [];\n          SyncherManager_log.log('[SyncherManager] - getDataSchemaDescriptor: ', descriptor, childrens); // Do schema validation\n          // TODO: check if is need to handle with the result of validation\n          //        schemaValidation(scheme, descriptor, initialData);\n          //all OK -> create reporter and register listeners\n\n          var reporter;\n          var offline;\n\n          if (!_this4._reporters[resource]) {\n            offline = storedObject.offline ? storedObject.offline : false;\n            reporter = new syncher_ReporterObject(_this, owner, resource, childrens, offline);\n          } else {\n            reporter = _this4._reporters[resource];\n          }\n\n          reporter.isToSaveData = storedObject.isToSaveData;\n\n          if (offline) {\n            //update new DataObject at Offline Subscription Manager\n            var _msg = {\n              from: _this._url,\n              to: offline + '/register',\n              type: 'update',\n              body: {}\n            };\n            SyncherManager_log.log('[SyncherManager._resumeCreate] update object at offline manager ', _msg);\n\n            _this._bus.postMessage(_msg);\n          }\n\n          if (domainRegistration) {\n            reporter.forwardSubscribe([storedObject.url]).then(function () {\n              SyncherManager_log.log('[SyncherManager._resumeCreate] resumingReporterSubscription ', storedObject);\n\n              _this._resumeReporterSubscriptions(msg, storedObject, reporter, childrens, domainRegistration).then(function (resumeObject) {\n                SyncherManager_log.log('[SyncherManager._resumeCreate] resolved resumed object ', resumeObject);\n                resolve(resumeObject);\n              });\n            });\n          } else resolve(_this._resumeReporterSubscriptions(msg, storedObject, reporter, childrens, domainRegistration)); //  resolve();\n\n        })[\"catch\"](function (reason) {\n          SyncherManager_log.error('[SyncherManager - resume create] - fail on getDataSchemaDescriptor: ', reason);\n          resolve(false);\n        });\n      });\n    }\n  }, {\n    key: \"_resumeReporterSubscriptions\",\n    value: function _resumeReporterSubscriptions(msg, storedObject, reporter, childrens, domainRegistration) {\n      var _this = this;\n\n      var resource = storedObject.url;\n      var objectRegistration = Object(utils[\"i\" /* deepClone */])(msg.body.value);\n      objectRegistration.url = storedObject.url;\n      objectRegistration.expires = storedObject.expires;\n      objectRegistration.domain_registration = domainRegistration;\n      delete objectRegistration.data;\n      return new Promise(function (resolve) {\n        reporter.addChildrens().then(function () {\n          reporter.resumeSubscriptions(storedObject.subscriptions);\n          _this._reporters[resource] = reporter;\n          SyncherManager_log.info('[SyncherManager - resume create] - resolved resumed: ', storedObject);\n          return _this._decryptChildrens(storedObject, childrens);\n        }).then(function (decryptedObject) {\n          SyncherManager_log.info('[SyncherManager._resumeReporterSubscriptions] Register Object: ', objectRegistration);\n\n          _this._registry.registerDataObject(objectRegistration).then(function (registered) {\n            SyncherManager_log.log('[SyncherManager._resumeReporterSubscriptions] DataObject registration successfully updated', registered);\n            SyncherManager_log.log('[SyncherManager._resumeReporterSubscriptions] resolving object', decryptedObject);\n            resolve(decryptedObject);\n          }); // log.log('result of previous promise');\n\n        })[\"catch\"](function (reason) {\n          SyncherManager_log.error('[SyncherManager - resume create] - fail on addChildrens: ', reason);\n          resolve(false);\n        });\n      });\n    } // to decrypt DataChildObjects if they are encrypted\n\n  }, {\n    key: \"_decryptChildrens\",\n    value: function _decryptChildrens(encryptedObject, childrens) {\n      var _this = this;\n\n      var storedObject = Object(utils[\"i\" /* deepClone */])(encryptedObject);\n      return new Promise(function (resolve) {\n        if (!childrens) {\n          resolve(storedObject);\n        } else {\n          var childrensObj = Object.keys(storedObject.childrenObjects);\n\n          if (childrensObj.length === 0) {\n            resolve(storedObject);\n          }\n\n          childrens.forEach(function (children) {\n            //          let childObjects = storedObject.childrenObjects[children];\n            var childObjects = storedObject.childrenObjects;\n            SyncherManager_log.log('[SyncherManager._decryptChildrens] dataObjectChilds to decrypt ', childObjects);\n            var listOfDecryptedObjects = [];\n            Object.keys(childObjects).forEach(function (childId) {\n              var child = childObjects[childId];\n              var owner = childId.split('#')[0];\n\n              if (typeof child.value === 'string') {\n                SyncherManager_log.log('[SyncherManager._decryptChildrens] createdBy ', owner, ' object: ', child.value);\n                var decrypted = cryptoManager_CryptoManager.decryptDataObject(JSON.parse(child.value), storedObject.url);\n                listOfDecryptedObjects.push(decrypted);\n              }\n            });\n            Promise.all(listOfDecryptedObjects).then(function (decryptedObjects) {\n              SyncherManager_log.log('[SyncherManager._decryptChildrens] returning decrypted ', decryptedObjects);\n              decryptedObjects.forEach(function (decryptedObject) {\n                var childId = decryptedObject.value.url;\n                storedObject.childrenObjects[childId].value = decryptedObject.value;\n              });\n              SyncherManager_log.log('[SyncherManager._decryptChildrens] storedObject ', storedObject);\n              resolve(storedObject);\n            })[\"catch\"](function (reason) {\n              SyncherManager_log.warn('[SyncherManager._decryptChildrens] failed : ', reason);\n            });\n          });\n        }\n      });\n    } // Process invitations to observers\n\n  }, {\n    key: \"_authorise\",\n    value: function _authorise(msg) {\n      var _this = this;\n\n      if (!msg.body.resource) {\n        throw new Error('[SyncherManager._authorise] invitation request without data object url:', msg);\n      }\n\n      var objSubscriptorURL = msg.body.resource + '/subscription';\n      var p2p = msg.body.p2p ? msg.body.p2p : false;\n      SyncherManager_log.log('[SyncherManager -  authorise] - ', msg);\n\n      if (msg.body.authorise) {\n        msg.body.authorise.forEach(function (hypertyURL) {\n          //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification\n          _this._bus.postMessage({\n            type: 'create',\n            from: objSubscriptorURL,\n            to: hypertyURL,\n            body: {\n              p2p: p2p,\n              identity: msg.body.identity,\n              source: msg.from,\n              value: msg.body.value,\n              schema: msg.body.schema\n            }\n          }, function (reply) {\n            // lets forward the invitation response\n            var response = {\n              from: msg.to,\n              to: msg.from,\n              id: msg.id,\n              type: reply.type,\n              body: reply.body\n            };\n\n            _this._bus.postMessage(response);\n          });\n        });\n      }\n    } //FLOW-IN: message received from DataObjectReporter -> delete\n\n  }, {\n    key: \"_onDelete\",\n    value: function _onDelete(msg) {\n      var _this = this;\n\n      var objURL = msg.body.resource;\n      var object = _this._reporters[objURL];\n\n      if (object) {\n        //TODO: is there any policy verification before delete?\n        if (object.offline) {\n          //register new DataObject at Offline Subscription Manager\n          var forward = {\n            from: msg.to,\n            to: object.offline + '/register',\n            type: 'forward',\n            body: msg\n          };\n          SyncherManager_log.log('[SyncherManager._onDelete] unregistering object from offline manager ', forward);\n\n          _this._bus.postMessage(forward);\n        }\n\n        object[\"delete\"]();\n\n        this._dataObjectsStorage.deleteResource(objURL).then(function (result) {\n          SyncherManager_log.log('[SyncherManager - onDelete] - deleteResource: ', result);\n\n          _this._registry.unregisterDataObject(objURL); //TODO: unregister object?\n\n\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 200\n            }\n          });\n        });\n      }\n    } //FLOW-IN: message received from local Syncher -> subscribe\n\n  }, {\n    key: \"_onLocalSubscribe\",\n    value: function _onLocalSubscribe(msg) {\n      var _this5 = this;\n\n      //debugger;\n      if (msg.body.hasOwnProperty('resume') && msg.body.resume) {\n        this._dataObjectsStorage.getResourcesByCriteria(msg, false).then(function (result) {\n          SyncherManager_log.info('[SyncherManager.onLocalSubscribe. resume]: ', msg, ' result: ', result);\n\n          if (result && Object.keys(result).length > 0) {\n            var listOfObservers = []; // TODO: should reuse the stored information\n\n            Object.keys(result).forEach(function (objURL) {\n              SyncherManager_log.log('[SyncherManager - resume Subscribe] - reuse current object url: ', result[objURL]);\n              listOfObservers.push(_this5._resumeSubscription(msg, result[objURL]));\n            });\n            Promise.all(listOfObservers).then(function (resumedObservers) {\n              SyncherManager_log.log('[SyncherManager - Observers Resumed]', resumedObservers); // TODO: shoud send the information if some object is failing;\n\n              var successfullyResumed = Object.values(resumedObservers).filter(function (observer) {\n                return observer !== false;\n              });\n              var response = {\n                id: msg.id,\n                type: 'response',\n                from: msg.to,\n                to: msg.from,\n                body: {\n                  code: 200,\n                  value: successfullyResumed\n                }\n              };\n              SyncherManager_log.log('[SyncherManager - Observers Resumed] replying ', response); //FLOW-OUT: message response to Syncher -> create\n\n              _this5._bus.postMessage(response);\n            });\n          } else {\n            //forward to hyperty:\n            var reply = {};\n            reply.id = msg.id;\n            reply.from = msg.to;\n            reply.to = msg.from;\n            reply.type = 'response';\n            reply.body = {\n              code: 404,\n              desc: 'No data objects observers to be resumed'\n            };\n\n            _this5._bus.postMessage(reply);\n          }\n        });\n      } else {\n        SyncherManager_log.log('[SyncherManager.onLocalSubscribe - new Subscribe] - ', msg.body.schema, msg.body.resource);\n\n        this._newSubscription(msg);\n      }\n    }\n  }, {\n    key: \"_newSubscription\",\n    value: function _newSubscription(msg) {\n      var _this = this;\n\n      var objURL = msg.body.resource;\n      var hypertyURL = msg.from;\n      var domain = Object(utils[\"k\" /* divideURL */])(objURL).domain;\n      var domainSubscription = msg.body.hasOwnProperty('domain_subscription') ? msg.body.domain_subscription : true;\n      var childBaseURL = objURL + '/children/'; //get schema from catalogue and parse -> (children)\n\n      _this._registry.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {\n        var properties = descriptor.sourcePackage.sourceCode.properties;\n        var childrens = properties.childrens ? properties.childrens : [];\n        var subscriptions = [];\n        subscriptions.push(objURL + '/changes'); //      childrens.forEach((child) => subscriptions.push(childBaseURL + child));\n\n        subscriptions.push(childBaseURL); //children addresses\n\n        if (domainSubscription) {\n          //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\n          var nodeSubscribeMsg = {\n            type: 'subscribe',\n            from: _this._url,\n            to: 'domain://msg-node.' + domain + '/sm',\n            body: {\n              identity: msg.body.identity,\n              resources: subscriptions,\n              source: hypertyURL\n            }\n          }; //subscribe in msg-node\n\n          _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n            SyncherManager_log.log('node-subscribe-response(observer): ', reply);\n            console.log('REUSETEST SyncherManager - node-subscribe-response(observer): ', reply);\n\n            if (reply.body.code === 200) {\n              _this._newReporterSubscribe(msg, hypertyURL, objURL, childrens);\n            } else {\n              //listener rejected\n              _this._bus.postMessage({\n                id: msg.id,\n                type: 'response',\n                from: msg.to,\n                to: hypertyURL,\n                body: reply.body\n              });\n            }\n          });\n        } else _this._newReporterSubscribe(msg, hypertyURL, objURL, childrens);\n      });\n    }\n  }, {\n    key: \"_newReporterSubscribe\",\n    value: function _newReporterSubscribe(msg, hypertyURL, objURL, childrens) {\n      var _this = this;\n\n      var objURLSubscription = objURL + '/subscription'; //FLOW-OUT: reply with provisional response\n\n      _this._bus.postMessage({\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: hypertyURL,\n        body: {\n          code: 100,\n          childrenResources: childrens,\n          schema: msg.body.schema,\n          resource: msg.body.resource\n        }\n      }); //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\n\n\n      var objSubscribeMsg = {\n        type: 'subscribe',\n        from: _this._url,\n        to: objURLSubscription,\n        body: {\n          identity: msg.body.identity,\n          subscriber: hypertyURL\n        }\n      }; //TODO: For Further Study\n\n      if (msg.body.hasOwnProperty('mutual')) objSubscribeMsg.body.mutual = msg.body.mutual;\n      SyncherManager_log.log('[SyncherManager._newSubscription]', objSubscribeMsg, msg);\n      console.log('REUSETEST SyncherManager - [SyncherManager._newSubscription]', objSubscribeMsg, msg); //subscribe to reporter SM\n\n      _this._bus.postMessage(objSubscribeMsg, function (reply) {\n        SyncherManager_log.log('reporter-subscribe-response-new: ', reply);\n        console.log('REUSETEST SyncherManager - reporter-subscribe-response-new: ', reply);\n        if (reply.body.code === 200) _this._processSuccessfullSubscription(reply, hypertyURL, objURL, childrens, msg);else if (msg.body.offline) _this._processOfflineSubscription(objSubscribeMsg, msg.body.offline, hypertyURL, objURL, childrens, msg);else {//TODO: send response back to Hyperty with error message received in the reply\n        }\n      });\n    }\n  }, {\n    key: \"_processOfflineSubscription\",\n    value: function _processOfflineSubscription(subscription, redirectTo, hypertyURL, objURL, childrens, msg) {\n      var _this = this;\n\n      var forward = {\n        from: subscription.from,\n        type: 'forward',\n        to: redirectTo,\n        body: subscription\n      };\n      console.log('[SyncherManager._processOfflineSubscription] forwading ', forward);\n\n      _this._bus.postMessage(forward, function (reply) {\n        SyncherManager_log.log('[SyncherManager._processOfflineSubscription] reply ', reply);\n        if (reply.body.code === 200) _this._processSuccessfullSubscription(reply, hypertyURL, objURL, childrens, msg);else {//TODO: send response back to Hyperty with error message received in the reply\n        }\n      });\n    }\n  }, {\n    key: \"_processSuccessfullSubscription\",\n    value: function _processSuccessfullSubscription(reply, hypertyURL, objURL, childrens, msg) {\n      var _this = this;\n\n      SyncherManager_log.log('[SyncherManager._newSubscription] - observers: ', _this._observers, objURL, _this._observers[objURL]);\n      console.log('REUSETEST SyncherManager - 200 code[SyncherManager._newSubscription] - observers: ', _this._observers, objURL, _this._observers[objURL]);\n      var observer = _this._observers[objURL];\n\n      if (!observer) {\n        observer = new syncher_ObserverObject(_this, objURL, childrens);\n        SyncherManager_log.log('[SyncherManager._newSubscription] - observers: create new ObserverObject: ', observer);\n        _this._observers[objURL] = observer; // register new hyperty subscription\n\n        observer.addSubscription(hypertyURL); // add childrens and listeners to save data if necessary\n\n        observer.addChildrens();\n      }\n\n      var interworking = false; //debugger;\n      // Store for each reporter hyperty the dataObject\n\n      var userURL;\n\n      if (msg.body.hasOwnProperty('identity') && msg.body.identity.userProfile && msg.body.identity.userProfile.userURL) {\n        userURL = msg.body.identity.userProfile.userURL;\n\n        if (!userURL.includes('user://')) {\n          interworking = true;\n        }\n      } else {\n        userURL = _this._registry.getHypertyOwner(msg.from);\n        if (!userURL) interworking = true;\n      }\n\n      var metadata = Object(utils[\"i\" /* deepClone */])(reply.body.value); // let childrenObjects = metadata.childrenObjects || {};\n\n      delete metadata.data;\n      delete metadata.childrenObjects;\n      metadata.childrens = childrens;\n      metadata.subscriberUser = userURL;\n      metadata.isReporter = false;\n      metadata.subscriberHyperty = hypertyURL;\n\n      if (!interworking) {\n        //_this._dataObjectsStorage.set(objURL, false, msg.body.schema, 'on', reply.body.owner, hypertyURL, childrens, userURL);\n        _this._dataObjectsStorage.set(metadata);\n\n        if (metadata.hasOwnProperty('store') && metadata.store || metadata.hasOwnProperty('isToSaveData') && metadata.isToSaveData) {\n          observer.isToSaveData = true;\n\n          _this._dataObjectsStorage.update(false, objURL, 'isToSaveData', true);\n\n          _this._dataObjectsStorage.saveData(false, objURL, null, reply.body.value.data); //                  if (childrens) _this._dataObjectsStorage.initialObserverSync(objURL, reply.body.value.data.backupRevision);\n\n        }\n      } //forward to hyperty:\n\n\n      reply.id = msg.id;\n      reply.from = _this._url;\n      reply.to = hypertyURL;\n      reply.body.schema = msg.body.schema;\n      reply.body.resource = msg.body.resource; //TODO: For Further Study\n\n      if (msg.body.hasOwnProperty('mutual')) reply.body.mutual = msg.body.mutual;\n      SyncherManager_log.log('[subscribe] - new subscription: ', msg, reply, observer);\n\n      this._bus.postMessage(reply);\n    }\n  }, {\n    key: \"_resumeSubscription\",\n    value: function _resumeSubscription(msg, storedObject) {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        var objURL = storedObject.url;\n        var schema = storedObject.schema;\n        var hypertyURL = msg.from; // let objURLSubscription = objURL + '/subscription';\n\n        var childBaseURL = objURL + '/children/';\n        SyncherManager_log.log('[SyncherManager - ReuseSubscription] - objURL: ', objURL, ' - schema:', schema); //get schema from catalogue and parse -> (children)\n        // TODO: remove this since children resources should be available in the DataObjectsStorage\n\n        _this6._registry.getDataSchemaDescriptor(schema).then(function (descriptor) {\n          var properties = descriptor.sourcePackage.sourceCode.properties;\n          var childrens = properties.childrens ? properties.childrens : []; //children addresses\n\n          var subscriptions = [];\n          subscriptions.push(objURL + '/changes'); //        childrens.forEach((child) => subscriptions.push(childBaseURL + child));\n\n          subscriptions.push(childBaseURL); //FLOW-OUT: reply with provisional response\n\n          _this6._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: hypertyURL,\n            body: {\n              code: 100,\n              childrenResources: childrens,\n              schema: schema,\n              resource: objURL\n            }\n          }); //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\n\n          /*let objSubscribeMsg = {\r\n            type: 'subscribe', from: this._url, to: objURLSubscription,\r\n            body: { subscriber: hypertyURL, identity: msg.body.identity }\r\n          };\r\n            //subscribe to reporter SM\r\n          this._bus.postMessage(objSubscribeMsg, (reply) => {*/\n\n\n          var observer = _this6._observers[objURL];\n\n          if (!observer) {\n            observer = new syncher_ObserverObject(_this6, objURL, childrens);\n            observer.isToSaveData = storedObject.isToSaveData;\n            _this6._observers[objURL] = observer;\n          } //register new hyperty subscription\n\n\n          observer.addSubscription(hypertyURL);\n          observer.addChildrens(); // Object.assign(storedObject.data, reply.body.value.data);\n          // Object.assign(storedObject.childrens, reply.body.value.childrens);\n          //log.log('[subscribe] - resume subscription: ', msg, reply, storedObject, observer);\n\n          return _this6._decryptChildrens(storedObject, childrens);\n        }).then(function (decryptedObject) {\n          // log.log('result of previous promise');\n          resolve(decryptedObject);\n        })[\"catch\"](function (reason) {\n          SyncherManager_log.error('[SyncherManager - resume subscription] - fail on getDataSchemaDescriptor: ', reason);\n          resolve(false);\n        });\n      });\n    } //FLOW-IN: message received from local DataObjectObserver -> unsubscribe\n\n  }, {\n    key: \"_onLocalUnSubscribe\",\n    value: function _onLocalUnSubscribe(msg) {\n      var _this = this;\n\n      var hypertyURL = msg.from;\n      var objURL = msg.body.resource;\n      var observer = _this._observers[objURL];\n\n      if (observer) {\n        //TODO: is there any policy verification before delete?\n        observer.removeSubscription(msg); //TODO: destroy object in the registry?\n\n        _this._bus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 200\n          }\n        });\n\n        this._dataObjectsStorage.deleteResource(objURL); //TODO: remove Object if no more subscription?\n\n\n        delete _this._observers[objURL];\n      }\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._url;\n    }\n  }]);\n\n  return SyncherManager;\n}();\n\n/* harmony default export */ var syncher_SyncherManager = (SyncherManager_SyncherManager);\n// CONCATENATED MODULE: ./src/subscriptionManager/Subscription.js\nfunction subscriptionManager_Subscription_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction subscriptionManager_Subscription_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction subscriptionManager_Subscription_createClass(Constructor, protoProps, staticProps) { if (protoProps) subscriptionManager_Subscription_defineProperties(Constructor.prototype, protoProps); if (staticProps) subscriptionManager_Subscription_defineProperties(Constructor, staticProps); return Constructor; }\n\n// Log System\n\nvar subscriptionManager_Subscription_log = loglevel[\"getLogger\"]('Subscription');\n\nvar Subscription_Subscription =\n/*#__PURE__*/\nfunction () {\n  function Subscription(bus, subscriber, resource) {\n    subscriptionManager_Subscription_classCallCheck(this, Subscription);\n\n    var _this = this;\n\n    _this._subscriber = subscriber;\n    _this.resource = resource;\n    subscriptionManager_Subscription_log.log('[SubscriptionManager.Subscription] new: ', subscriber, resource); //add forward\n\n    _this._listener = bus.addForward(resource, subscriber);\n  }\n\n  subscriptionManager_Subscription_createClass(Subscription, [{\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._listener.remove();\n    }\n  }]);\n\n  return Subscription;\n}();\n\n/* harmony default export */ var subscriptionManager_Subscription = (Subscription_Subscription);\n// CONCATENATED MODULE: ./src/subscriptionManager/SubscriptionManager.js\nfunction SubscriptionManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SubscriptionManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SubscriptionManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) SubscriptionManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) SubscriptionManager_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar SubscriptionManager_log = loglevel[\"getLogger\"]('SubscriptionManager');\n\n\n/**\r\n * @author paulo-g-chainho@alticelabs.com\r\n * Subscription Manager used to manage routing paths at the runtime.\r\n */\n\nvar SubscriptionManager_SubscriptionManager =\n/*#__PURE__*/\nfunction () {\n  function SubscriptionManager(runtimeURL, bus, storage) {\n    SubscriptionManager_classCallCheck(this, SubscriptionManager);\n\n    if (!runtimeURL) throw new Error('[SubscriptionManager] - needs the runtimeURL parameter');\n    if (!bus) throw new Error('[SubscriptionManager] - needs the MessageBus instance');\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._storage = storage;\n    _this._subscriptions = {};\n    _this._subscriptionsStorage = {}; //TODO: these should be saved in persistence engine?\n\n    _this.runtimeURL = runtimeURL;\n    _this._url = runtimeURL + '/subscriptions'; //TODO: this should not be hardcoded!\n\n    _this._domain = Object(utils[\"k\" /* divideURL */])(runtimeURL).domain;\n    bus.addListener(_this._url, function (msg) {\n      SubscriptionManager_log.info('[SubscriptionManager] RCV: ', msg);\n\n      switch (msg.type) {\n        case 'subscribe':\n          _this._onSubscribe(msg);\n\n          break;\n\n        case 'unsubscribe':\n          _this._onUnSubscribe(msg);\n\n          break;\n\n        case 'read':\n          _this._onRead(msg);\n\n          break;\n      }\n    });\n  }\n\n  SubscriptionManager_createClass(SubscriptionManager, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this._storage.get('subscriptions').then(function (subscriptions) {\n          SubscriptionManager_log.log('[SubscriptionManager.init] resume subscriptions: ', subscriptions);\n\n          if (subscriptions) {\n            _this._subscriptionsStorage = subscriptions;\n            Object.values(subscriptions).forEach(function (subscription) {\n              _this.createSubscription(subscription.domain, subscription.resources, subscription.subscriber, subscription.identity);\n            });\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"_onSubscribe\",\n    //message received to set a routing path\n    value: function _onSubscribe(msg) {\n      var _this = this;\n\n      var resources = msg.body.resources;\n      var subscriber = msg.from;\n      var domain = Object(utils[\"k\" /* divideURL */])(resources[0]).domain; //we are assuming resources are all from the same domain\n\n      var identity = msg.body.identity;\n\n      _this.createSubscription(domain, resources, subscriber, identity).then(function (reply) {\n        //forward to hyperty:\n        reply.id = msg.id;\n        reply.from = _this._url;\n        reply.to = subscriber;\n        reply.body = msg.body;\n        reply.body.code = 200;\n        SubscriptionManager_log.log('[SubscriptionManager] - craeteSubscription: ', msg, reply, subscriber);\n\n        _this._bus.postMessage(reply);\n\n        if (!_this._subscriptionsStorage[subscriber]) {\n          _this._subscriptionsStorage[subscriber] = {\n            domain: domain,\n            resources: resources,\n            subscriber: subscriber,\n            identity: identity\n          };\n        } else {\n          resources.forEach(function (resource) {\n            if (!_this._subscriptionsStorage[subscriber].resources.includes(resource)) {\n              _this._subscriptionsStorage[subscriber].resources.push(resource);\n            }\n          });\n        }\n\n        _this._storage.set('subscriptions', 1, _this._subscriptionsStorage);\n      });\n    }\n  }, {\n    key: \"createSubscription\",\n    value: function createSubscription(domain, resources, subscriber, identity) {\n      var _this = this; //debugger;\n\n\n      return new Promise(function (resolve) {\n        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\n        var nodeSubscribeMsg = {\n          type: 'subscribe',\n          from: _this._url,\n          to: 'domain://msg-node.' + domain + '/sm',\n          body: {\n            identity: identity,\n            resources: resources,\n            source: subscriber\n          }\n        }; //subscribe in msg-node\n\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          SubscriptionManager_log.log('[SubscriptionManager] node-subscribe-response: ', reply); //if (reply.body.code === 200) {//TODO: uncomment when  MN replies with correct response body code\n          //TODO: support multiple routes for multiple resources\n\n          var subscription = _this._subscriptions[subscriber];\n          SubscriptionManager_log.log('[SubscriptionManager] - ', _this._subscriptions, resources, _this._subscriptions.hasOwnProperty(subscriber));\n\n          if (!subscription) {\n            _this._subscriptions[subscriber] = {};\n          }\n\n          resources.forEach(function (resource) {\n            _this._subscriptions[subscriber][resource] = new subscriptionManager_Subscription(_this._bus, subscriber, resource);\n          });\n          resolve(reply);\n        });\n      });\n    } // message received to remove routing path\n\n  }, {\n    key: \"_onUnSubscribe\",\n    value: function _onUnSubscribe(msg) {\n      var _this = this;\n\n      var unsubscriber = msg.from;\n      var resource = msg.body.resource;\n\n      if (_this._subscriptions[unsubscriber] && _this._subscriptions[unsubscriber][resource]) {\n        var domain = Object(utils[\"k\" /* divideURL */])(resource).domain;\n        var subscription = _this._subscriptions[unsubscriber][resource]; //FLOW-OUT: message sent to msg-node SubscriptionManager component\n\n        _this._bus.postMessage({\n          type: 'unsubscribe',\n          from: _this._url,\n          to: 'domain://msg-node.' + domain + '/sm',\n          body: {\n            resources: [resource],\n            source: unsubscriber\n          }\n        });\n\n        subscription._releaseListeners();\n\n        delete _this._subscriptions[unsubscriber][resource];\n\n        if (_this._subscriptionsStorage[unsubscriber]) {\n          var i = _this._subscriptionsStorage[unsubscriber].resources.indexOf(resource);\n\n          if (i != -1) {\n            _this._subscriptionsStorage[unsubscriber].resources.splice(i, 1);\n          }\n\n          _this._storage.set('subscriptions', 1, _this._subscriptionsStorage);\n        }\n      }\n\n      _this._bus.postMessage({\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 200\n        }\n      });\n    } //message received to read existing routing paths. At this point limited to read all existing routing paths set for one listener\n\n  }, {\n    key: \"_onRead\",\n    value: function _onRead(msg) {\n      var _this = this;\n\n      var listenerAddress = msg.body.resource;\n      var reply;\n      SubscriptionManager_log.log('[SubscriptionManager] - request to read Subscriptions: ', msg);\n\n      _this._storage.get('subscriptions').then(function (subscriptions) {\n        if (subscriptions && subscriptions[listenerAddress]) {\n          var resources = subscriptions[listenerAddress].resources;\n          reply = {\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 200,\n              value: resources\n            }\n          };\n        } else {\n          reply = {\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 404,\n              description: 'Not Found'\n            }\n          };\n        }\n\n        _this._bus.postMessage(reply);\n      });\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._url;\n    }\n  }]);\n\n  return SubscriptionManager;\n}();\n\n/* harmony default export */ var subscriptionManager_SubscriptionManager = (SubscriptionManager_SubscriptionManager);\n// EXTERNAL MODULE: ./src/policy/combiningAlgorithms/AllowOverrides.js\nvar AllowOverrides = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./src/policy/combiningAlgorithms/BlockOverrides.js\nvar BlockOverrides = __webpack_require__(21);\n\n// EXTERNAL MODULE: ./src/policy/combiningAlgorithms/FirstApplicable.js\nvar FirstApplicable = __webpack_require__(22);\n\n// EXTERNAL MODULE: ./src/policy/ReThinkCtx.js\nvar ReThinkCtx = __webpack_require__(32);\n\n// CONCATENATED MODULE: ./src/policy/context/RuntimeCoreCtx.js\nfunction RuntimeCoreCtx_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { RuntimeCoreCtx_typeof = function _typeof(obj) { return typeof obj; }; } else { RuntimeCoreCtx_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return RuntimeCoreCtx_typeof(obj); }\n\nfunction RuntimeCoreCtx_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction RuntimeCoreCtx_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RuntimeCoreCtx_createClass(Constructor, protoProps, staticProps) { if (protoProps) RuntimeCoreCtx_defineProperties(Constructor.prototype, protoProps); if (staticProps) RuntimeCoreCtx_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction RuntimeCoreCtx_possibleConstructorReturn(self, call) { if (call && (RuntimeCoreCtx_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return RuntimeCoreCtx_assertThisInitialized(self); }\n\nfunction RuntimeCoreCtx_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction RuntimeCoreCtx_getPrototypeOf(o) { RuntimeCoreCtx_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return RuntimeCoreCtx_getPrototypeOf(o); }\n\nfunction RuntimeCoreCtx_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) RuntimeCoreCtx_setPrototypeOf(subClass, superClass); }\n\nfunction RuntimeCoreCtx_setPrototypeOf(o, p) { RuntimeCoreCtx_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return RuntimeCoreCtx_setPrototypeOf(o, p); }\n\n\nvar RuntimeCoreCtx_log = loglevel[\"getLogger\"]('PEP');\n\n\n\n\n\n\nvar RuntimeCoreCtx_RuntimeCoreCtx =\n/*#__PURE__*/\nfunction (_ReThinkCtx) {\n  RuntimeCoreCtx_inherits(RuntimeCoreCtx, _ReThinkCtx);\n\n  function RuntimeCoreCtx(runtimeURL, idModule, runtimeRegistry, storageManager, runtimeCapabilities) {\n    var _this2;\n\n    RuntimeCoreCtx_classCallCheck(this, RuntimeCoreCtx);\n\n    _this2 = RuntimeCoreCtx_possibleConstructorReturn(this, RuntimeCoreCtx_getPrototypeOf(RuntimeCoreCtx).call(this));\n    _this2._runtimeURL = runtimeURL;\n    _this2._pepURL = _this2._runtimeURL + '/pep';\n    _this2._guiURL = _this2._runtimeURL + '/policy-gui';\n    _this2.idModule = idModule;\n    _this2.runtimeRegistry = runtimeRegistry;\n    _this2.activeUserPolicy = undefined;\n    _this2.serviceProviderPolicy = {};\n    _this2.userPolicies = {};\n    _this2.storageManager = storageManager;\n    _this2.runtimeCapabilities = runtimeCapabilities;\n    return _this2;\n  }\n\n  RuntimeCoreCtx_createClass(RuntimeCoreCtx, [{\n    key: \"loadConfigurations\",\n    value: function loadConfigurations() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        console.log(_this.storageManager);\n\n        _this.storageManager.get('rethink:activePolicy').then(function (value) {\n          _this.activeUserPolicy = value;\n          return _this.storageManager.get('rethink:groups');\n        }).then(function (groupInfo) {\n          var groups = groupInfo;\n          _this.groups = groups === undefined ? {} : groups;\n          return _this.storageManager.get('rethink:spPolicies');\n        }).then(function (policiesInfo) {\n          var spPolicies = policiesInfo;\n          _this.serviceProviderPolicy = spPolicies === undefined ? {} : spPolicies;\n\n          _this._loadUserPolicies().then(function () {\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"getPolicies\",\n    value: function getPolicies(message, isIncomingMessage) {\n      var policies = {};\n\n      if (this.activeUserPolicy !== undefined) {\n        policies.userPolicy = this.userPolicies[this.activeUserPolicy];\n      }\n\n      policies.serviceProviderPolicy = this.getServiceProviderPolicy(message, isIncomingMessage);\n      return policies;\n    }\n  }, {\n    key: \"_isValidUpdate\",\n    value: function _isValidUpdate(message) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (message.from.split('://').length > 1) {\n          _this.idModule._getHypertyFromDataObject(message.from).then(function (hypertyURL) {\n            if (hypertyURL === message.body.source) {\n              resolve(message);\n            } else {\n              reject('The source of the message is not valid.');\n            }\n          }, function (error) {\n            reject(error);\n          });\n        } else {\n          resolve(message);\n        }\n      });\n    }\n  }, {\n    key: \"getMyEmails\",\n    value: function getMyEmails() {\n      var identities = this.idModule.getIdentities();\n      var emails = [];\n\n      for (var i in identities) {\n        emails.push(Object(utils[\"p\" /* getUserEmailFromURL */])(identities[i].identity));\n      }\n\n      return emails;\n    }\n  }, {\n    key: \"getMyHyperties\",\n    value: function getMyHyperties() {\n      var hyperties = this.runtimeRegistry.hypertiesList;\n      var hypertiesNames = [];\n\n      for (var i in hyperties) {\n        var hypertyName = hyperties[i].objectName;\n\n        if (hypertiesNames.indexOf(hypertyName) === -1) {\n          hypertiesNames.push(hypertyName);\n        }\n      }\n\n      return hypertiesNames;\n    }\n  }, {\n    key: \"getServiceProviderPolicy\",\n    value: function getServiceProviderPolicy(message, isIncoming) {\n      var policy;\n\n      if (isIncoming) {\n        var toHyperty = this.runtimeRegistry.getHypertyName(message.to);\n        policy = this.serviceProviderPolicy[toHyperty];\n      } else {\n        var fromHyperty = this.runtimeRegistry.getHypertyName(message.from);\n        policy = this.serviceProviderPolicy[fromHyperty];\n      }\n\n      return policy;\n    }\n  }, {\n    key: \"getURL\",\n    value: function getURL(url) {\n      var splitURL = url.split('/');\n      return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\n    }\n    /**\r\n    * Creates a group with the given name.\r\n    * @param  {String}  groupName\r\n    */\n\n  }, {\n    key: \"_loadUserPolicies\",\n    value: function _loadUserPolicies() {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.storageManager.get('rethink:userPolicies').then(function (value) {\n          var policies = value;\n\n          if (policies !== undefined) {\n            for (var i in policies) {\n              _this3.pep.addPolicy('USER', i, policies[i]);\n            }\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"_getLastComponentOfURL\",\n    value: function _getLastComponentOfURL(url) {\n      var split = url.split('/');\n      return split[split.length - 1];\n    }\n  }, {\n    key: \"_getPoliciesJSON\",\n    value: function _getPoliciesJSON(policies) {\n      for (var i in policies) {\n        var combiningAlgorithm = policies[i].combiningAlgorithm;\n\n        if (combiningAlgorithm instanceof BlockOverrides[\"a\" /* default */]) {\n          policies[i].combiningAlgorithm = 'blockOverrides';\n        } else {\n          if (combiningAlgorithm instanceof AllowOverrides[\"a\" /* default */]) {\n            policies[i].combiningAlgorithm = 'allowOverrides';\n          } else {\n            if (combiningAlgorithm instanceof FirstApplicable[\"a\" /* default */]) {\n              policies[i].combiningAlgorithm = 'firstApplicable';\n            } else {\n              policies[i].combiningAlgorithm = undefined;\n            }\n          }\n        }\n      }\n\n      return policies;\n    }\n  }, {\n    key: \"saveActivePolicy\",\n    value: function saveActivePolicy() {\n      var _this4 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.storageManager.set('rethink:activePolicy', 0, _this4.activeUserPolicy).then(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"saveGroups\",\n    value: function saveGroups() {\n      var _this5 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.storageManager.set('rethink:groups', 0, _this5.groups).then(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"savePolicies\",\n    value: function savePolicies(source, policy, key) {\n      var policiesJson;\n\n      switch (source) {\n        case 'USER':\n          policiesJson = JSON.stringify(this.userPolicies);\n          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));\n          this.storageManager.set('rethink:userPolicies', 0, policiesJson);\n          break;\n\n        case 'SERVICE_PROVIDER':\n          if (policy !== undefined & key !== undefined) {\n            this.serviceProviderPolicy[key] = policy;\n          }\n\n          policiesJson = JSON.stringify(this.serviceProviderPolicy);\n          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));\n          this.storageManager.set('rethink:spPolicies', 0, policiesJson);\n          break;\n\n        default:\n          throw Error('Unknown policy source: ' + source);\n      }\n    }\n  }, {\n    key: \"getGroupsNames\",\n    value: function getGroupsNames() {\n      var myGroups = this.groups;\n      var groupsNames = [];\n\n      if (myGroups !== undefined) {\n        for (var groupName in myGroups) {\n          groupsNames.push(groupName);\n        }\n      }\n\n      return groupsNames;\n    }\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(groupName, destination) {\n      var members = [];\n\n      if (groupName === 'preauthorised') {\n        var dataObjectURL = destination.split('/');\n        dataObjectURL.pop();\n        dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];\n        members = this.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);\n      } else {\n        if (this.groups[groupName] !== undefined) {\n          members = this.groups[groupName];\n        }\n      }\n\n      return members;\n    }\n    /**\r\n    * Creates a group with the given name.\r\n    * @param  {String}  groupName\r\n    */\n\n  }, {\n    key: \"createGroup\",\n    value: function createGroup(groupName) {\n      this.groups[groupName] = [];\n      this.saveGroups();\n    }\n  }, {\n    key: \"deleteGroup\",\n    value: function deleteGroup(groupName) {\n      delete this.groups[groupName];\n      this.saveGroups();\n    }\n    /**\r\n    * Adds the given user email to the group with the given name.\r\n    * @param  {String}  userEmail\r\n    * @param  {String}  groupName\r\n    */\n\n  }, {\n    key: \"addToGroup\",\n    value: function addToGroup(groupName, userEmail) {\n      var myGroups = this.groups;\n\n      if (myGroups[groupName] !== undefined) {\n        if (myGroups[groupName].indexOf(userEmail) === -1) {\n          myGroups[groupName].push(userEmail);\n          this.saveGroups();\n        }\n      } else {\n        throw Error('Group \"' + groupName + '\" does not exist!');\n      }\n    }\n  }, {\n    key: \"removeFromGroup\",\n    value: function removeFromGroup(groupName, userEmail) {\n      var group = this.groups[groupName];\n      group.splice(group.indexOf(userEmail), 1);\n      this.saveGroups();\n    }\n  }, {\n    key: \"pepURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._pepURL;\n    }\n  }, {\n    key: \"guiURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._guiURL;\n    }\n  }, {\n    key: \"runtimeURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._runtimeURL;\n    }\n    /**\r\n    * return the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n\n  }, {\n    key: \"messageBus\",\n    get: function get() {\n      var _this = this;\n\n      return _this._messageBus;\n    }\n    /**\r\n    * Set the messageBus in this Registry\r\n    * @param {MessageBus}           messageBus\r\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n\n      _this._messageBus = messageBus;\n    }\n  }, {\n    key: \"subscription\",\n    get: function get() {\n      return this._subscription;\n    },\n    set: function set(params) {\n      this._subscription = params.message.body.subscriber;\n    }\n  }]);\n\n  return RuntimeCoreCtx;\n}(ReThinkCtx[\"default\"]);\n\n/* harmony default export */ var context_RuntimeCoreCtx = (RuntimeCoreCtx_RuntimeCoreCtx);\n// CONCATENATED MODULE: ./src/runtime/RuntimeUA.js\nfunction RuntimeUA_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction RuntimeUA_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RuntimeUA_createClass(Constructor, protoProps, staticProps) { if (protoProps) RuntimeUA_defineProperties(Constructor.prototype, protoProps); if (staticProps) RuntimeUA_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n // Log System\n\n\nvar RuntimeUA_log = loglevel[\"getLogger\"]('RuntimeUA'); //Main dependecies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n //import GraphConnector from '../graphconnector/GraphConnector';\n\n\n\n\n\n\n\n/**\r\n * Runtime User Agent Interface will process all the dependecies of the core runtime;\r\n * @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n * @version 0.4.0\r\n *\r\n * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;\r\n * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;\r\n * @property {IdentityModule} identityModule - Identity Module;\r\n * @property {PEP} policyEngine - Policy Engine Module;\r\n * @property {Registry} registry - Registry Module;\r\n * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)\r\n * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts\r\n * @property {CoreDiscovery} coreDiscovery - Discovery for discovery hyperties/dataObjects\r\n */\n\nvar RuntimeUA_RuntimeUA =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of Runtime User Agent\r\n   * @param {descriptor} runtimeDescriptor - pass all the hyperty runtime descriptor\r\n   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;\r\n   * @param {domain} domainURL - specify the domain base for the runtime;\r\n   */\n  function RuntimeUA(runtimeDescriptor, runtimeFactory, domain) {\n    RuntimeUA_classCallCheck(this, RuntimeUA);\n\n    if (!runtimeDescriptor) throw new Error('The runtime descriptor is a needed parameter');\n    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');\n    if (!domain) throw new Error('You need the domain of runtime'); // Configuration object with information related with servers\n\n    this.runtimeConfiguration = Object.assign({\n      domain: domain\n    }, runtimeConfiguration_runtimeConfiguration);\n    this.runtimeFactory = runtimeFactory;\n    this.log = RuntimeUA_log;\n    this.logLevels = loglevel_default.a;\n\n    if (runtimeDescriptor.p2pHandlerStub && typeof runtimeDescriptor.p2pHandlerStub === 'string' && runtimeDescriptor.p2pHandlerStub.includes('://')) {\n      this.p2p = true;\n    } else {\n      this.p2p = false;\n    }\n\n    runtimeUtils.runtimeDescriptor = runtimeDescriptor;\n    this.runtimeUtils = runtimeUtils;\n    this.storages = {};\n    /*    if (typeof runtimeFactory.createRuntimeCatalogue === 'function') {\r\n          this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();\r\n        } else {\r\n          throw new Error('Check your Runtime Factory because it needs the Runtime Catalogue implementation');\r\n        }*/\n\n    /*    if (typeof runtimeFactory.persistenceManager === 'function') {\r\n          this.persistenceManager = runtimeFactory.persistenceManager();\r\n        } else {\r\n          throw new Error('Check your Runtime Factory because it needs the Persistence Manager implementation');\r\n        }*/\n\n    if (typeof runtimeFactory.storageManager === 'function') {\n      this.storages = Storage_storage(runtimeFactory, this);\n    } else {\n      throw new Error('Check your Runtime Factory because it needs the Storage Manager implementation');\n    }\n\n    if (typeof runtimeFactory.runtimeCapabilities === 'function') {\n      this.runtimeCapabilities = runtimeFactory.runtimeCapabilities(this.storages.capabilities);\n    } else {\n      RuntimeUA_log.info('Check your RuntimeFactory because it needs the Runtime Capabilities implementation');\n    }\n  }\n  /**\r\n   * Intialize the installation of runtime\r\n   *\r\n   * @access public\r\n   * @return {Promise<Boolean, Error>} this is Promise and if the installation process happened without any problems returns true otherwise the error.\r\n   *\r\n   * @memberOf RuntimeUA\r\n   */\n\n\n  RuntimeUA_createClass(RuntimeUA, [{\n    key: \"init\",\n    value: function init(guid) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.domain = _this2.runtimeConfiguration.domain;\n        RuntimeUA_log.info('[RuntimeUA - init] Starting ');\n\n        try {\n          var getCapabilities = _this2.runtimeCapabilities.getRuntimeCapabilities();\n\n          var getRuntimeURL = _this2.storages.runtime.get('runtime:URL');\n\n          var getStoredDataObjects = _this2.storages.syncherManager.get('syncherManager:ObjectURLs');\n\n          var getHypertyStorageObjects = _this2.storages.hypertyResources.get();\n\n          var getP2PHandlerURL = _this2.storages.runtime.get('p2pHandler:URL'); //        let getRemotes = this.storages.syncherManager.get('remotes');\n\n\n          Promise.all([getRuntimeURL, getCapabilities, getStoredDataObjects, getHypertyStorageObjects, getP2PHandlerURL]).then(function (results) {\n            _this2.runtimeURL = results[0] ? results[0].runtimeURL : results[0];\n\n            if (!_this2.runtimeURL) {\n              _this2.runtimeURL = 'runtime://' + _this2.domain + '/' + Object(utils[\"n\" /* generateGUID */])();\n\n              _this2.storages.runtime.set('runtime:URL', 1, {\n                runtimeURL: _this2.runtimeURL\n              });\n            }\n\n            _this2.capabilities = results[1];\n            Object.assign(runtimeUtils.runtimeCapabilities.constraints, results[1]);\n            _this2._dataObjectsStorage = new store_objects_DataObjectsStorage(_this2.storages.syncherManager, results[2] || {}, _this2.runtimeFactory, _this2.runtimeURL);\n            _this2._hypertyResources = results[3] || {};\n            _this2.p2pHandlerURL = results[4] ? results[4].p2pHandlerURL : results[4];\n\n            if (!_this2.p2pHandlerURL) {\n              _this2.p2pHandlerURL = _this2.runtimeURL + '/p2phandler/' + Object(utils[\"n\" /* generateGUID */])();\n              RuntimeUA_log.info('[RuntimeUA - init] P2PHandlerURL: ', _this2.p2pHandlerURL);\n\n              _this2.storages.runtime.set('p2pHandler:URL', 1, {\n                p2pHandlerURL: _this2.p2pHandlerURL\n              });\n            }\n            /*          log.info('[RuntimeUA - init] dataObjectsStorage remote load starting');\r\n                      this._dataObjectsStorage.loadRemote().then(()=> {\r\n                        log.info('[RuntimeUA - init] dataObjectsStorage remote load concluded');*/\n\n\n            return _this2._loadComponents(guid); //          });\n          }).then(function (status) {\n            _this2._setNetworkStatusListeners();\n\n            _this2._hypertyResourcesStorage = new hyperty_resource_HypertyResourcesStorage(_this2.runtimeURL, _this2.messageBus, _this2.storages.hypertyResources, _this2._hypertyResources);\n\n            if (_this2.p2p) {\n              RuntimeUA_log.info('[RuntimeUA - init] load p2pHandler: ', status);\n              return _this2._loadP2PHandler();\n            } else {\n              RuntimeUA_log.info('[RuntimeUA - init] P2P not supported');\n              return 'P2P Not Supported';\n            }\n          }).then(function (result) {\n            RuntimeUA_log.info('[runtime ua - init] - status: ', result);\n            resolve(true);\n          }, function (reason) {\n            RuntimeUA_log.error('ERROR: ', reason);\n            resolve(true);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n  }, {\n    key: \"_setNetworkStatusListeners\",\n    value: function _setNetworkStatusListeners() {\n      this.runtimeFactory.listenOnline(this._updateRuntimeStatus('online'));\n      this.runtimeFactory.listenOffline(this._updateRuntimeStatus('offline'));\n    }\n  }, {\n    key: \"_updateRuntimeStatus\",\n    value: function _updateRuntimeStatus(event) {\n      var _this = this;\n\n      _this.messageBus.postMessage({\n        from: this.runtimeURL,\n        to: this.runtimeURL + '/status',\n        type: 'update',\n        body: event\n      });\n    }\n  }, {\n    key: \"_loadP2PHandler\",\n    value: function _loadP2PHandler() {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        var runtimeDescriptor = runtimeUtils.runtimeDescriptor;\n        var p2pStubHandler = runtimeDescriptor.p2pHandlerStub;\n        var p2pConfig = {\n          isHandlerStub: true,\n          runtimeURL: _this3.runtimeURL\n        };\n        RuntimeUA_log.log('[RuntimeUA loadP2PHandler] P2PStubHandler: ', p2pStubHandler);\n\n        _this3.loader.loadStub(p2pStubHandler, p2pConfig).then(function (result) {\n          var runtimeUAURL = _this3.runtimeURL + '/ua';\n          var msg = {\n            type: 'subscribe',\n            from: runtimeUAURL,\n            to: 'domain://msg-node.' + _this3.domain + '/sm',\n            body: {\n              subscribe: [result.url],\n              source: _this3.runtimeURL\n            }\n          };\n\n          _this3.messageBus.addListener(runtimeUAURL, function (msg) {\n            RuntimeUA_log.log('[runtime ua - listener] - receive msg: ', msg);\n          });\n\n          _this3.messageBus.postMessage(msg, function (reply) {\n            RuntimeUA_log.log('[runtime ua - postMessage] - reply: ', reply);\n          });\n\n          RuntimeUA_log.info('[runtime ua - p2p installation] - success: ', result);\n          resolve(true);\n        })[\"catch\"](function (reason) {\n          RuntimeUA_log.info('[runtime ua - p2p installation] - fail: ', reason);\n          resolve(false);\n        });\n      });\n    }\n    /**\r\n     *\r\n     * @access private\r\n     * @return {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\r\n     *\r\n     * @memberOf RuntimeUA\r\n     */\n\n  }, {\n    key: \"_loadComponents\",\n    value: function _loadComponents(guid) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          // Prepare the on instance to handle with the fallbacks and runtimeCatalogue;\n          _this4.descriptorInstance = new runtime_Descriptors(_this4.runtimeURL, _this4.runtimeConfiguration); // Prepare the loader to load the hyperties, protostubs and idpproxy;\n\n          _this4.loader = new runtime_Loader(_this4.runtimeURL, _this4.runtimeConfiguration, _this4.descriptorInstance); // Instantiate the identity Module\n\n          _this4.identityModule = new identity_IdentityModule(_this4.runtimeURL, _this4.runtimeCapabilities, _this4.storages.identity, _this4._dataObjectsStorage, cryptoManager_CryptoManager); // Use the sandbox factory to create an AppSandbox;\n          // In the future can be decided by policyEngine if we need\n          // create a AppSandbox or not;\n\n          var appSandbox = _this4.runtimeFactory.createAppSandbox(); // Instantiate the Registry Module\n\n\n          _this4.registry = new registry_Registry(_this4.runtimeURL, appSandbox, _this4.identityModule, _this4.runtimeCapabilities, _this4.storages.registry, _this4.p2pHandlerURL); // Set the loader to load Hyperties, Stubs and IdpProxies\n\n          _this4.registry.loader = _this4.loader; // Instantiate the Message Bus\n\n          _this4.messageBus = new bus_MessageBus(_this4.registry, _this4.runtimeURL); // Instanciate the SubscriptionManager;\n\n          _this4.subscriptionManager = new subscriptionManager_SubscriptionManager(_this4.runtimeURL, _this4.messageBus, _this4.storages.subscriptions); // Prepare the address allocation instance;\n\n          _this4.addressAllocation = new allocation_AddressAllocation(_this4.runtimeURL, _this4.messageBus, _this4.registry, _this4.subscriptionManager); // Instantiate the Policy Engine\n\n          _this4.policyEngine = new PEP[\"default\"](new context_RuntimeCoreCtx(_this4.runtimeURL, _this4.identityModule, _this4.registry, _this4.storages.policy, _this4.runtimeCapabilities)); // Instantiate Discovery\n\n          _this4.coreDiscovery = new discovery_CoreDiscovery(_this4.runtimeURL, _this4.messageBus, _this4.graphConnector, _this4.runtimeFactory, _this4.registry); // Instantiate the identityHandler\n\n          _this4.identityHandler = new identity_IdentityHandler(_this4.identityModule); // initialise the CryptoManager\n\n          cryptoManager_CryptoManager.init(_this4.runtimeURL, _this4.runtimeCapabilities, _this4.storages.cryptoManager, _this4._dataObjectsStorage, _this4.registry, _this4.coreDiscovery, _this4.identityModule, _this4.runtimeFactory); // Instantiate the Graph Connector\n          //        this.graphConnector = process.env.MODE !== 'light' ? new GraphConnector(this.runtimeURL, this.messageBus, this.storageManager) : null;\n\n          _this4.handlers = new runtime_MsgBusHandlers(_this4.policyEngine, _this4.identityHandler, cryptoManager_CryptoManager); // (un)comment bellow to not encrypt messages\n\n          _this4.messageBus.pipelineOut.handlers = [_this4.handlers.idmHandler, _this4.handlers.pepOutHandler];\n          _this4.messageBus.pipelineIn.handlers = [_this4.handlers.pepInHandler]; // (un)comment bellow to encrypt messages\n          //      this.messageBus.pipelineOut.handlers = [this.handlers.idmHandler, this.handlers.pepOutHandler, this.handlers.encryptHandler];\n          //      this.messageBus.pipelineIn.handlers = [this.handlers.decryptHandler, this.handlers.pepInHandler];\n          // Add to App Sandbox the listener;\n\n          appSandbox.addListener('*', function (msg) {\n            _this4.messageBus.postMessage(msg);\n          });\n          cryptoManager_CryptoManager.messageBus = _this4.messageBus; // Register messageBus on Registry\n\n          _this4.registry.messageBus = _this4.messageBus; // Policy Engine\n\n          _this4.policyEngine.messageBus = _this4.messageBus; // Register messageBus on IDM\n\n          _this4.identityModule.messageBus = _this4.messageBus; // Register registry on IdentityModule\n\n          _this4.identityModule.registry = _this4.registry; // Register coreDiscovery on IdentityModule\n\n          _this4.identityModule.coreDiscovery = _this4.coreDiscovery; // Use sandbox factory to use specific methods\n          // and set the message bus to the factory\n\n          _this4.runtimeFactory.messageBus = _this4.messageBus; // Instanciate the SyncherManager;\n\n          _this4.syncherManager = new syncher_SyncherManager(_this4.runtimeURL, _this4.messageBus, _this4.registry, _this4.storages.syncherManager, null, _this4._dataObjectsStorage, _this4.identityModule); // Set into loader the needed components;\n\n          _this4.loader.runtimeURL = _this4.runtimeURL;\n          _this4.loader.messageBus = _this4.messageBus;\n          _this4.loader.registry = _this4.registry;\n          _this4.loader.runtimeFactory = _this4.runtimeFactory; //Instantiate Discovery Lib for notification testing\n          // this.discovery = new Discovery(\"hyperty://localhost/test\", this.runtimeURL, this.messageBus);\n          // this.loadStub(\"localhost\");\n          // setTimeout(() => {\n          //   this.discovery.discoverHypertiesDO(\"user://google.com/openidtest20@gmail.com\")\n          //   .then(hyperties => {\n          //     hyperties.forEach(hyperty =>{\n          //       hyperty.onLive(() => log.log(`Notification from ${hyperty.data.hypertyID} changed to live`));\n          //       hyperty.onDisconnected(() => log.log(`Notification from ${hyperty.data.hypertyID} changed to disconnected`));\n          //     });\n          //   });\n          // }, 2000);\n          // this.subscriptionManager.init().then(()=>{\n          //   resolve(true);\n          // });\n\n          var prepareComponents = [];\n          prepareComponents.push(_this4.subscriptionManager.init());\n          prepareComponents.push(_this4.identityModule.init(guid));\n          prepareComponents.push(cryptoManager_CryptoManager.loadSessionKeys());\n          prepareComponents.push(_this4.registry.loadRegistry());\n          prepareComponents.push(_this4._dataObjectsStorage.loadRemote());\n          Promise.all(prepareComponents).then(function (result) {\n            if (result.length === 5) {\n              resolve(true);\n            } else {\n              reject('[RuntimeUA._loadComponents] Error ] ', result);\n            }\n          })[\"catch\"](function (reason) {\n            throw Error(reason);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n    /**\r\n     * Deploy Hyperty from Catalogue URL\r\n     *\r\n     * @see https://github.com/reTHINK-project/specs/tree/master/datamodel/core/address\r\n     *\r\n     * @param {URL.HypertyCatalogueURL} hypertyCatalogueURL - The Catalogue URL used to identify descriptors in the Catalogue.\r\n     * @param {boolean|URL.HypertyURL} [reuseURL=false] reuseURL - reuseURL is used to reuse the hypertyURL previously registred, by default the reuse is disabled;\r\n     * @param {URL} appURL - the app url address; // TODO: improve this description;\r\n     * @returns {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\r\n     *\r\n     * @memberOf RuntimeUA\r\n     */\n\n  }, {\n    key: \"loadHyperty\",\n    value: function loadHyperty(hypertyCatalogueURL) {\n      var reuseURL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var appURL = arguments.length > 2 ? arguments[2] : undefined;\n      if (!hypertyCatalogueURL) throw new Error('Hyperty descriptor url parameter is needed');\n      return this.loader.loadHyperty(hypertyCatalogueURL, reuseURL, appURL);\n    }\n    /**\r\n    * Deploy Stub from Catalogue URL or domain url\r\n    * @param  {URL.URL}     domain          domain\r\n    */\n\n  }, {\n    key: \"loadStub\",\n    value: function loadStub(protocolstubCatalogueURL) {\n      if (!protocolstubCatalogueURL) throw new Error('ProtoStub descriptor url parameter is needed');\n      return this.loader.loadStub(protocolstubCatalogueURL);\n    }\n    /**\r\n    * Deploy idpProxy from Catalogue URL or domain url\r\n    * @param  {URL.URL}     domain          domain\r\n    */\n\n  }, {\n    key: \"loadIdpProxy\",\n    value: function loadIdpProxy(ipdProxyCatalogueURL) {\n      RuntimeUA_log.log('ipdProxyCatalogueURL', ipdProxyCatalogueURL);\n      if (!ipdProxyCatalogueURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');\n      return this.loader.loadIdpProxy(ipdProxyCatalogueURL);\n    }\n    /**\r\n     * Used to close all the runtime; Unregister all hyperties;\r\n     * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(logOut) {\n      console.log('Runtime core logout: ', logOut);\n\n      var _this = this;\n\n      if (logOut === true) {\n        this.identityHandler.reset();\n      }\n\n      RuntimeUA_log.info('Unregister all hyperties');\n      return new Promise(function (resolve, reject) {\n        _this.registry.unregisterAllHyperties().then(function (result) {\n          RuntimeUA_log.info('All the hyperties are unregisted with Success:', result);\n          resolve(true);\n        })[\"catch\"](function (reason) {\n          RuntimeUA_log.error('Failed to unregister the hyperties', reason);\n          reject(false);\n        });\n      });\n    }\n    /**\r\n     * Used to reset the runtime by deleting all data from the storage manager;\r\n     * @return {Promise<Boolean>} result of the reset method, with true or false to the operation success;\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this5 = this;\n\n      console.log('RuntimeUA.Runtime core reset: ');\n      var reseting = [];\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //TODO: delegate db reset operation to each component\n        //    this.identityManager.reset();\n        _this5._dataObjectsStorage.deleteRemotes().then(function () {\n          return;\n        }).then(function () {\n          _this5.storages.identity.get(false, false, 'identities').then(function (identities) {\n            var identitiesKeys = Object.keys(identities);\n            identitiesKeys.forEach(function (key) {\n              reseting.push(_this5.storages.identity[\"delete\"](key, false, 'identities'));\n            });\n            reseting.push(_this5.storages.capabilities[\"delete\"]('capabilities'));\n            reseting.push(_this5.storages.cryptoManager[\"delete\"]('userAsymmetricKey'));\n            reseting.push(_this5.storages.hypertyResources[\"delete\"]('hypertyResources'));\n            reseting.push(_this5.storages.identity[\"delete\"]('accessTokens'));\n            reseting.push(_this5.storages.registry[\"delete\"]('registry:DataObjectURLs'));\n            reseting.push(_this5.storages.registry[\"delete\"]('registry:HypertyURLs'));\n            reseting.push(_this5.storages.runtime[\"delete\"]('p2pHandler:URL'));\n            reseting.push(_this5.storages.runtime[\"delete\"]('runtime:URL')); //    reseting.push(this.storages.runtimeCatalogue.delete('runtimeCatalogue'));\n\n            reseting.push(_this5.storages.subscriptions[\"delete\"]('subscriptions'));\n            reseting.push(_this5.storages.syncherManager[\"delete\"]('syncherManager:ObjectURLs'));\n            reseting.push(_this5.storages.syncherManager[\"delete\"]('remotes'));\n            Promise.all(reseting).then(function (result) {\n              RuntimeUA_log.info('[RuntimeUA.reset] reset with Success:', result);\n              return resolve(true);\n            })[\"catch\"](function (reason) {\n              RuntimeUA_log.error('Failed to reset all DBs', reason);\n              resolve(false);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return RuntimeUA;\n}();\n\n/* harmony default export */ var runtime_RuntimeUA = (RuntimeUA_RuntimeUA);\n// CONCATENATED MODULE: ./src/rethink/rethink.js\n// jshint\n// Runtime\n //import MiniBus from 'runtime-core/dist/minibus';\n//import RuntimeCatalogue from 'runtime-core/dist/RuntimeCatalogue';\n\n\n //import runtimeConfiguration from './runtimeConfiguration';\n\nwindow.components = {}; //let minibus = new MiniBus();\n\nvar rethink_runtimeDescriptor = {\n  \"sourcePackageURL\": \"/sourcePackage\",\n  \"version\": \"0.20\",\n  \"description\": \"\",\n  \"language\": \"Javascript\",\n  \"cguid\": \"3bc366f2d0ba3d681e7a3899917c5d3de\",\n  \"type\": \"Runtimes\",\n  \"runtimeType\": \"browser\",\n  \"p2pHandlerStub\": \"\",\n  \"p2pRequesterStub\": \"\",\n  \"constraints\": {\n    \"browser\": true,\n    \"mic\": true,\n    \"camera\": true,\n    \"sensor\": false,\n    \"webrtc\": true,\n    \"ortc\": true,\n    \"http\": true,\n    \"https\": true,\n    \"ws\": true,\n    \"wss\": true,\n    \"coap\": false,\n    \"datachannel\": false\n  },\n  \"objectName\": \"Runtime\",\n  \"configuration\": {},\n  \"messageSchemas\": [],\n  \"dataObjects\": [],\n  \"signature\": \"\",\n  \"accessControlPolicy\": \"somePolicy\"\n};\nvar rethink = {\n  install: function install() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        domain = _ref.domain,\n        guid = _ref.guid,\n        runtimeURL = _ref.runtimeURL,\n        development = _ref.development;\n\n    return new Promise(function (resolve, reject) {\n      var runtime = new runtime_RuntimeUA(rethink_runtimeDescriptor, rethink_runtimeFactory, domain);\n      window.rethink = runtime;\n      runtime.init(guid).then(function (result) {\n        var idmGuiURL = runtime.identityModule._runtimeURL + '/identity-gui';\n        var idmURL = runtime.identityModule._runtimeURL + '/idm';\n        var messageBus = runtime.messageBus;\n        var idm = runtime.identityModule;\n        var identitiesGUI = new rethink_IdentitiesGUI(idmGuiURL, idmURL, messageBus);\n        console.log('identitiesGUI: ', identitiesGUI);\n        var runtimeProxy = {\n          requireHyperty: function requireHyperty(hyperty) {\n            return new Promise(function (resolve, reject) {\n              //TODO: Work the message errors, probably use message factory\n              runtime.loadHyperty(hyperty, true).then(function (hypertyInstance) {\n                console.log('[rethink.requireHyperty] loaded: ', hypertyInstance.name);\n                resolve(hypertyInstance);\n              })[\"catch\"](function (reason) {\n                reject(reason);\n              });\n            });\n          },\n          requireProtostub: function requireProtostub(domain) {\n            return new Promise(function (resolve, reject) {\n              //TODO: Work the message errors, probably use message factory\n              runtime.loadStub(domain).then(function (instance) {\n                /*                let protostubURL = result.url || result.runtimeProtoStubURL;\r\n                                let protostubComponent = window.components[protostubURL];\r\n                                let protostub = {\r\n                                  runtimeProtostubURL: protostubURL,\r\n                                  status: result.status,\r\n                                  instance: protostubComponent.instance,\r\n                                  name: protostubComponent.name\r\n                                };*/\n                console.log('[rethink.requireProtostub] loaded: ', instance);\n                resolve(instance);\n              })[\"catch\"](function (reason) {\n                reject(reason);\n              });\n            });\n          },\n          authorise: function authorise(idp, scope) {\n            return new Promise(function (resolve, reject) {\n              identitiesGUI.authorise(idp, scope).then(function (result) {\n                if (result.hasOwnProperty('accessToken')) {\n                  console.log('[rethink.authorise] authorised: ', result);\n                  resolve(result); //                event.source.postMessage({ to: 'runtime:not-authorised', body: JSON.stringify(result) }, '*');\n                } else {\n                  console.warn('[rethink.authorise] not authorised: ', result);\n                  reject(result); //                event.source.postMessage({ to: 'runtime:authorised', body: JSON.stringify(result) }, '*');\n                }\n              });\n            });\n          },\n          unauthorise: function unauthorise(idp, scope) {\n            return new Promise(function (resolve, reject) {\n              identitiesGUI.unauthorise(idp, scope).then(function (result) {\n                if (result) {\n                  console.log('[rethink.unauthorise] ', result);\n                  resolve(result); //                event.source.postMessage({ to: 'runtime:not-authorised', body: JSON.stringify(result) }, '*');\n                } else {\n                  console.warn('[rethink.unauthorise] failed: ', result);\n                  reject(result); //                event.source.postMessage({ to: 'runtime:authorised', body: JSON.stringify(result) }, '*');\n                }\n              });\n            });\n          },\n          login: function login(idp) {\n            return new Promise(function (resolve, reject) {\n              identitiesGUI.loginWithIDP(idp).then(function (result) {\n                //              event.source.postMessage({ to: 'runtime:loggedIn', body: result }, '*');\n                console.log('[rethink.login] loggedin: ', result);\n                resolve(result);\n              });\n            });\n          },\n          listenShowAdmin: function listenShowAdmin() {\n            return new Promise(function (resolve, reject) {\n              var loaded = function loaded(method, url, domain, resource) {\n                console.log('[rethink.listenShowAdmin]');\n                if (method === 'login') resolve({\n                  \"method\": method\n                });else resolve({\n                  \"method\": method,\n                  \"domain\": domain,\n                  \"resource\": resource,\n                  \"reauthorise\": function reauthorise() {\n                    return identitiesGUI.reauthorise(url, domain, resource);\n                  }\n                });\n              };\n\n              idm.listenShowAdmin(loaded);\n            });\n          },\n          reset: function reset() {\n            return new Promise(function (resolve, reject) {\n              //TODO: Work the message errors, probably use message factory\n              runtime.reset().then(function (result) {\n                resolve(result);\n              })[\"catch\"](function (reason) {\n                reject(reason);\n              });\n            });\n          },\n          close: function close() {\n            var logOut = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            console.log('[rethink.close] logout: ', logOut);\n            return new Promise(function (resolve, reject) {\n              runtime.close(logOut).then(function (result) {\n                //              event.source.postMessage({ to: 'runtime:runtimeClosed', body: result }, '*');\n                //  send logout\n                if (logOut) {\n                  identitiesGUI.logOut().then(function (result) {\n                    console.log('[rethink.close] closed: ', result);\n                    resolve(result);\n                  });\n                } else {\n                  console.log('[rethink.close] closed: ', result);\n                  resolve(result);\n                }\n              })[\"catch\"](function (result) {\n                console.log('[rethink.close] closed: ', result);\n                resolve(result);\n              });\n            });\n          },\n          listenOnline: function listenOnline(callback) {\n            return rethink_runtimeFactory.listenOnline(callback);\n          },\n          listenOffline: function listenOffline(callback) {\n            return rethink_runtimeFactory.listenOffline(callback);\n          }\n        };\n        resolve(runtimeProxy);\n      });\n    })[\"catch\"](function (reason) {\n      console.error(reason);\n      reject(reason);\n    }); //    });\n  }\n};\n/* harmony default export */ var rethink_rethink = (rethink);\n// CONCATENATED MODULE: ./src/rethink.js\n/* concated harmony reexport rethink */__webpack_require__.d(__webpack_exports__, \"rethink\", function() { return rethink_rethink; });\n/* concated harmony reexport IdentitiesGUI */__webpack_require__.d(__webpack_exports__, \"IdentitiesGUI\", function() { return rethink_IdentitiesGUI; });\n/* concated harmony reexport Request */__webpack_require__.d(__webpack_exports__, \"Request\", function() { return rethink_Request; });\n/* concated harmony reexport RuntimeCapabilities */__webpack_require__.d(__webpack_exports__, \"RuntimeCapabilities\", function() { return rethink_RuntimeCapabilities; });\n/* concated harmony reexport runtimeFactory */__webpack_require__.d(__webpack_exports__, \"runtimeFactory\", function() { return rethink_runtimeFactory; });\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n")}])});