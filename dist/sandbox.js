// version: 0.15.0
// date: Wed Jan 16 2019 10:36:42 GMT+0000 (GMT)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


// version: 0.15.0
// date: Wed Jan 16 2019 10:36:42 GMT+0000 (GMT)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


!function(c,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("sandbox",[],e):"object"==typeof exports?exports.sandbox=e():c.sandbox=e()}(window,function(){return function(c){var e={};function n(t){if(e[t])return e[t].exports;var l=e[t]={i:t,l:!1,exports:{}};return c[t].call(l.exports,l,l.exports,n),l.l=!0,l.exports}return n.m=c,n.c=e,n.d=function(c,e,t){n.o(c,e)||Object.defineProperty(c,e,{enumerable:!0,get:t})},n.r=function(c){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},n.t=function(c,e){if(1&e&&(c=n(c)),8&e)return c;if(4&e&&"object"==typeof c&&c&&c.__esModule)return c;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:c}),2&e&&"string"!=typeof c)for(var l in c)n.d(t,l,function(e){return c[e]}.bind(null,l));return t},n.n=function(c){var e=c&&c.__esModule?function(){return c.default}:function(){return c};return n.d(e,"a",e),e},n.o=function(c,e){return Object.prototype.hasOwnProperty.call(c,e)},n.p="",n(n.s=28)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return divideURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return emptyObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return secondsSinceEpoch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return deepClone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return removePathFromURL; });\n/* unused harmony export getUserURLFromEmail */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return getUserEmailFromURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return convertToUserURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return isDataObjectURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return isLegacy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return isURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return isUserURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return isHypertyURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return getConfigurationResources; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return buildURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return generateGUID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return getUserIdentityDomain; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return isBackendServiceURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return divideEmail; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"D\", function() { return splitObjectURL; });\n/* unused harmony export checkAttribute */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return parseAttributes; });\n/* unused harmony export isEmpty */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return chatkeysToStringCloner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return chatkeysToArrayCloner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return parseMessageURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return availableSpace; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return encode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return decode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return decodeToUint8Array; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"E\", function() { return stringify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return parseToUint8Array; });\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * Support module with some functions will be useful\r\n * @module utils\r\n */\n\n/**\r\n * @typedef divideURL\r\n * @type Object\r\n * @property {string} type The type of URL\r\n * @property {string} domain The domain of URL\r\n * @property {string} identity The identity of URL\r\n */\n\n/**\r\n * Divide an url in type, domain and identity\r\n * @param  {URL.URL} url - url address\r\n * @return {divideURL} the result of divideURL\r\n */\nfunction divideURL(url) {\n  function recurse(value) {\n    var regex = /([a-zA-Z-]*)(:\\/\\/(?:\\.)?|:)([-a-zA-Z0-9@:%._+~#=]{2,256})([-a-zA-Z0-9@:%._+~#=/]*)/gi;\n    var subst = '$1,$3,$4';\n    var parts = value.replace(regex, subst).split(',');\n    return parts;\n  }\n\n  var parts = recurse(url); // If the url has no scheme\n\n  if (parts[0] === url && !parts[0].includes('@')) {\n    var _result = {\n      type: '',\n      domain: url,\n      identity: ''\n    };\n    console.warn('[DivideURL] DivideURL don\\'t support url without scheme. Please review your url address', url);\n    return _result;\n  } // check if the url has the scheme and includes an @\n\n\n  if (parts[0] === url && parts[0].includes('@')) {\n    var scheme = parts[0] === url ? 'smtp' : parts[0];\n    parts = recurse(scheme + '://' + parts[0]);\n  } // if the domain includes an @, divide it to domain and identity respectively\n\n\n  if (parts[1].includes('@')) {\n    parts[2] = parts[0] + '://' + parts[1];\n    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);\n  }\n  /*else if (parts[2].includes('/')) {\r\n  parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);\r\n  }*/\n\n\n  var result = {\n    type: parts[0],\n    domain: parts[1],\n    identity: parts[2]\n  };\n  return result;\n}\n/**\r\n * Check if an Object is empty\r\n * @param  {Object} object Object to be checked\r\n * @return {Boolean}       status of Object, empty or not (true|false);\r\n */\n\nfunction emptyObject(object) {\n  return Object.keys(object).length > 0 ? false : true;\n}\nfunction secondsSinceEpoch() {\n  return Math.floor(Date.now() / 1000);\n}\n/**\r\n * Make a COPY of the original data\r\n * @param  {Object}  obj - object to be cloned\r\n * @return {Object}\r\n */\n\nfunction deepClone(obj) {\n  //TODO: simple but inefficient JSON deep clone...\n  if (obj) return JSON.parse(JSON.stringify(obj));\n}\nfunction removePathFromURL(url) {\n  var splitURL = url.split('/');\n  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\n}\n/**\r\n * Obtains the user URL that corresponds to a given email\r\n * @param  {string} userEmail The user email\r\n * @return {URL.URL} userURL The user URL\r\n */\n\nfunction getUserURLFromEmail(userEmail) {\n  var indexOfAt = userEmail.indexOf('@');\n  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);\n}\n/**\r\n * Obtains the user email that corresponds to a given URL\r\n * @param  {URL.URL} userURL The user URL\r\n * @return {string} userEmail The user email\r\n */\n\nfunction getUserEmailFromURL(userURL) {\n  var url = divideURL(userURL);\n  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'\n}\n/**\r\n * Check if the user identifier is already in the URL format, if not, convert to URL format\r\n * @param  {string}   identifier  user identifier\r\n * @return {string}   userURL    the user URL\r\n */\n\nfunction convertToUserURL(identifier) {\n  // check if the identifier is already in the url format\n  if (identifier.substring(0, 7) === 'user://') {\n    var dividedURL = divideURL(identifier); //check if the url is well formated\n\n    if (dividedURL.domain && dividedURL.identity) {\n      return identifier;\n    } else {\n      throw 'userURL with wrong format';\n    } //if not, convert the user email to URL format\n\n  } else {\n    return getUserURLFromEmail(identifier);\n  }\n}\nfunction isDataObjectURL(url) {\n  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];\n  var splitURL = url.split('://');\n  var urlSchema = splitURL[0];\n  return schemasToIgnore.indexOf(urlSchema) === -1;\n}\nfunction isLegacy(url) {\n  if (url.split('@').length > 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isURL(url) {\n  return url.split('/').length >= 3;\n}\nfunction isUserURL(url) {\n  return divideURL(url).type === 'user';\n}\nfunction isHypertyURL(url) {\n  return divideURL(url).type === 'hyperty';\n}\n/**\r\n * get information relative each component configured on runtime configuration;\r\n * @param  {object} configuration object with all configuration\r\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\r\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\r\n * @return {object}               return an object with all configurations;\r\n */\n\nfunction getConfigurationResources(configuration, component, resource) {\n  var objectResource = configuration[component];\n  var resourceType = objectResource[resource];\n  return resourceType;\n}\n/**\r\n * Build a full url with the runtime configuration;\r\n * @param  {object} configuration object with all configuration\r\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\r\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\r\n * @param  {string} type          resource to get, like a hyperty name or protocolstub name;\r\n * @param  {boolean} useFallback  if true the function will check if have a fallback url;\r\n * @return {string}               partial url to contact the resource;\r\n */\n\nfunction buildURL(configuration, component, resource, type) {\n  var useFallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var objectResource = configuration[component];\n  var url;\n\n  if (!objectResource.hasOwnProperty(resource)) {\n    throw Error('The configuration ' + JSON.stringify(objectResource, '', 2) + ' don\\'t have the ' + resource + ' resource you are looking for');\n  }\n\n  var resourceType = objectResource[resource];\n\n  if (type) {\n    url = resourceType.prefix + configuration.domain + resourceType.suffix + type;\n\n    if (resourceType.hasOwnProperty('fallback') && useFallback) {\n      if (resourceType.fallback.indexOf('%domain%')) {\n        url = resourceType.fallback.replace(/(%domain%)/g, configuration.domain) + type;\n      } else {\n        url = resourceType.fallback + type;\n      }\n    }\n  } else {\n    url = resourceType.prefix + configuration.domain + resourceType.suffix;\n  } // console.log(url);\n\n\n  return url;\n}\n/**\r\n * Generate a Global Unique ID\r\n *\r\n * @returns String;\r\n */\n\nfunction generateGUID() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\nfunction getUserIdentityDomain(url) {\n  var dividedURL = divideURL(url);\n  var splitedDomain = dividedURL.domain.split('.');\n  var splitedLength = splitedDomain.length;\n\n  if (splitedLength == 1) {\n    return splitedDomain[splitedLength - 1];\n  }\n\n  var domain = splitedDomain[splitedLength - 2] + '.' + splitedDomain[splitedLength - 1];\n  return domain;\n}\n/**\r\n * Check if URL is from a backend service\r\n * @param  {string} url     URL to be processed\r\n * @return {boolean}\r\n */\n\nfunction isBackendServiceURL(url) {\n  var dividedURL = divideURL(url);\n  var splitedDomain = dividedURL.domain.split('.');\n  var backendSchemes = ['domain', 'global', 'domain-idp']; // should be defined in the runtime configuration\n\n  var backendSubDomains = ['registry', 'msg-node']; // should be defined in the runtime configuration\n\n  var subDomain;\n\n  if (splitedDomain.length > 1) {\n    subDomain = splitedDomain.filter(function (item) {\n      return backendSubDomains.indexOf(item) !== -1;\n    })[0];\n  }\n\n  if (subDomain && backendSubDomains.indexOf(subDomain) !== -1) {\n    return true;\n  }\n\n  if (dividedURL.type) {\n    return backendSchemes.indexOf(dividedURL.type) !== -1;\n  }\n\n  return false;\n}\nfunction divideEmail(email) {\n  var indexOfAt = email.indexOf('@');\n  var result = {\n    username: email.substring(0, indexOfAt),\n    domain: email.substring(indexOfAt + 1, email.length)\n  };\n  return result;\n}\nfunction assign(obj, keyPath, value) {\n  if (!obj) obj = {};\n  if (typeof keyPath === 'string') keyPath = parseAttributes(keyPath);\n  var lastKeyIndex = keyPath.length - 1;\n\n  for (var i = 0; i < lastKeyIndex; ++i) {\n    var key = keyPath[i];\n\n    if (!(key in obj)) {\n      obj[key] = {};\n    }\n\n    obj = obj[key];\n  }\n\n  obj[keyPath[lastKeyIndex]] = value;\n}\nfunction splitObjectURL(dataObjectURL) {\n  console.info('[utils - splitObjectURL]: ', dataObjectURL);\n  var splitedURL = dataObjectURL.split('/');\n  var url = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];\n  var resource = splitedURL[5];\n  var result = {\n    url: url,\n    resource: resource\n  };\n  console.info('[utils - splitObjectURL]: ', result);\n  return result;\n}\nfunction checkAttribute(path) {\n  var regex = /((([a-zA-Z]+):\\/\\/([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})\\/[a-zA-Z0-9.]+@[a-zA-Z0-9]+(-)?[a-zA-Z0-9]+(\\.)?[a-zA-Z0-9]{2,10}?\\.[a-zA-Z]{2,10})(.+(?=.identity))?/gm;\n  var list = [];\n  var final = [];\n  var test = path.match(regex);\n\n  if (test == null) {\n    final = path.split('.');\n  } else {\n    var m;\n\n    while ((m = regex.exec(path)) !== null) {\n      // This is necessary to avoid infinite loops with zero-width matches\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      } // The result can be accessed through the `m`-variable.\n\n\n      m.forEach(function (match, groupIndex) {\n        if (groupIndex === 0) {\n          list.push(match);\n        }\n      });\n    }\n\n    var result;\n    list.forEach(function (url) {\n      result = path.replace(url, '*-*');\n      final = result.split('.').map(function (item) {\n        if (item === '*-*') {\n          return url;\n        }\n\n        return item;\n      });\n    });\n  }\n\n  console.log('[RuntimeCore.Utils.checkAttribute]', final);\n  return final;\n}\nfunction parseAttributes(path) {\n  var regex = /([0-9a-zA-Z][-\\w]*):\\/\\//g;\n  var string3 = 'identity';\n\n  if (!path.includes('://')) {\n    return path.split('.');\n  } else {\n    var string1 = path.split(regex)[0];\n    var array1 = string1.split('.');\n    var string2 = path.replace(string1, '');\n\n    if (path.includes(string3)) {\n      var array2 = string2.split(string3 + '.');\n      console.log('array2 ' + array2);\n      string2 = array2[0].slice('.', -1);\n      array2 = array2[1].split('.');\n      array1.push(string2, string3);\n      array1 = array1.concat(array2);\n    } else {\n      array1.push(string2);\n    }\n\n    return array1.filter(Boolean);\n  }\n}\nfunction isEmpty(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return JSON.stringify(obj) === JSON.stringify({});\n}\nfunction chatkeysToStringCloner(sessionKeys) {\n  var dataObjectSessionKeysClone = {};\n  var fields = Object.keys(sessionKeys);\n\n  if (fields) {\n    try {\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        dataObjectSessionKeysClone[field] = {};\n        dataObjectSessionKeysClone[field].sessionKey = sessionKeys[field].sessionKey.toString();\n        dataObjectSessionKeysClone[field].isToEncrypt = sessionKeys[field].isToEncrypt;\n      }\n    } catch (err) {\n      console.error('_chatkeysToStringCloner:err', err);\n    }\n  }\n\n  return dataObjectSessionKeysClone;\n}\nfunction chatkeysToArrayCloner(sessionKeys) {\n  var dataObjectSessionKeysClone = {};\n  var fields = Object.keys(sessionKeys);\n\n  if (fields) {\n    try {\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        dataObjectSessionKeysClone[field] = {};\n        var arrayValues = JSON.parse('[' + sessionKeys[field].sessionKey + ']');\n        dataObjectSessionKeysClone[field].sessionKey = new Uint8Array(arrayValues);\n        dataObjectSessionKeysClone[field].isToEncrypt = sessionKeys[field].isToEncrypt;\n      }\n    } catch (err) {\n      console.error('_chatkeysToArrayCloner:err', err);\n    }\n  }\n\n  return dataObjectSessionKeysClone;\n}\nfunction parseMessageURL(URL) {\n  var splitedToURL = URL.split('/');\n\n  if (splitedToURL.length <= 6) {\n    return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];\n  } else {\n    return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];\n  }\n}\nfunction availableSpace(usage, quota) {\n  var available = (usage / quota).toFixed(2);\n  return {\n    quota: quota,\n    usage: usage,\n    percent: Number(available)\n  };\n}\n/**\r\n* Encodes a JS object to base 64 encode\r\n* @param   {Object}    value    byteArray value\r\n* @return  {string}   encoded value\r\n*/\n\nfunction encode(value) {\n  try {\n    var stringValue = stringify(value);\n    return btoa(stringValue);\n  } catch (err) {\n    console.error('[Utils.encode:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n  * Decode a base64 string to object\r\n  * @param   {string_b64}    value    value encoded in base 64\r\n  * @return  {Object} decodedValue\r\n  */\n\nfunction decode(value) {\n  try {\n    return JSON.parse(atob(value));\n  } catch (err) {\n    console.log('[Utils.decode:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n* Decode a base64 string to Uint8Array\r\n* @param   {string_b64}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\n\nfunction decodeToUint8Array(value) {\n  try {\n    return new Uint8Array(decode(value));\n  } catch (err) {\n    console.error('[Utils.decodeToUint8Array:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n* Converts a JS object to string\r\n* NOTE: Special conversion for Uint8Arrays\r\n* @param   {Object}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\n\nfunction stringify(value) {\n  try {\n    var stringValue;\n\n    if (value.constructor === Uint8Array) {\n      stringValue = '[' + value.toString() + ']'; // the [] is for JSON.parse compatibility\n    } else {\n      stringValue = JSON.stringify(value);\n    }\n\n    return stringValue;\n  } catch (err) {\n    console.error('[Utils.stringify:err] ' + err);\n    throw err;\n  }\n}\n/**\r\n* Converts a stringified object to object\r\n* @param   {String}    value    byteArray value\r\n* @return  {Object}   encoded value\r\n*/\n\nfunction parse(value) {\n  try {\n    return JSON.parse(value);\n  } catch (err) {\n    console.error('[Utils.parse:err]' + err);\n    console.trace();\n    console.error('That that cause the error:', value);\n    throw err;\n  }\n}\n/**\r\n* Converts a stringified object to object\r\n* @param   {String}    value    byteArray value\r\n* @return  {Uint8Array}   encoded value\r\n*/\n\nfunction parseToUint8Array(value) {\n  try {\n    return new Uint8Array(parse(value));\n  } catch (err) {\n    console.error('[Utils.parseToUint8Array:err]' + err);\n    throw err;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    "use strict";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    "use strict";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = "undefined";\n\n    var logMethods = [\n        "trace",\n        "debug",\n        "info",\n        "warn",\n        "error"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === \'function\') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === \'debug\') {\n            methodName = \'log\';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, \'log\');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn\'t present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = "loglevel";\n      if (name) {\n        storageKey += ":" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || \'silent\').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + "=" + levelName + ";";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + "=");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,\n          "ERROR": 4, "SILENT": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return "No console available for logging";\n              }\n          } else {\n              throw "log.setLevel() called with invalid level: " + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== "string" || name === "") {\n          throw new TypeError("You must supply a name when creating a logger.");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SandboxType; });\n/* harmony import */ var _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);\n/* harmony import */ var _bus_MiniBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n\nvar SandboxType = {\n  APP: \'app\',\n  NORMAL: \'normal\',\n  WINDOW: \'window\'\n};\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Base class to implement external sandbox component\r\n */\n\nvar Sandbox =\n/*#__PURE__*/\nfunction (_MiniBus) {\n  _inherits(Sandbox, _MiniBus);\n\n  function Sandbox(capabilities) {\n    var _this2;\n\n    _classCallCheck(this, Sandbox);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Sandbox).call(this));\n\n    var _this = _assertThisInitialized(_assertThisInitialized(_this2));\n\n    if (capabilities) {\n      _this.capabilities = capabilities;\n    }\n\n    return _this2;\n  }\n  /**\r\n   * Deploy an instance of the component into the sandbox.\r\n   * @param  {string} componentSourceCode Component source code (Hyperty, ProtoStub, etc)\r\n   * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\r\n   * @param  {Config} configuration Config parameters of the component\r\n   * @return {Promise<string>} return deployed if successful, or any other string with an error\r\n   */\n\n\n  _createClass(Sandbox, [{\n    key: "deployComponent",\n    value: function deployComponent(componentSourceCode, componentURL, configuration) {\n      var _this = this; // let messageFactory = _this.messageFactory;\n\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: deploy message for the internal SandboxRegistry -> _onDeploy\n        var deployMessage = {\n          type: \'create\',\n          from: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].ExternalDeployAddress,\n          to: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].InternalDeployAddress,\n          body: {\n            url: componentURL,\n            sourceCode: componentSourceCode,\n            config: configuration\n          }\n        }; //send message into the sandbox internals and wait for reply\n\n        _this.postMessage(deployMessage, function (reply) {\n          if (reply.body.code === 200) {\n            //is this response complaint with the spec?\n            resolve(\'deployed\');\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n    /**\r\n     * Remove the instance of a previously deployed component.\r\n     * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\r\n     * @return {Promise<string>} return undeployed if successful, or any other string with an error\r\n     */\n\n  }, {\n    key: "removeComponent",\n    value: function removeComponent(componentURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: un-deploy message for the internal SandboxRegistry -> _onRemove\n        var removeMessage = {\n          type: \'delete\',\n          from: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].ExternalDeployAddress,\n          to: _SandboxRegistry__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].InternalDeployAddress,\n          body: {\n            url: componentURL\n          }\n        }; //send message into the sandbox internals and wait for reply\n\n        _this.postMessage(removeMessage, function (reply) {\n          if (reply.body.code === 200) {\n            //is this response complaint with the spec?\n            resolve(\'undeployed\');\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n    /**\r\n    * Matches Sandbox capabilities against provided capabilities. Used to check if sandbox provides all required capabilities\r\n    * @param  {RuntimeCapabilities} constraints set of RuntimeCapabilities to match with.\r\n    * @return {boolean} return true if constraints are matched false otherwise\r\n     */\n\n  }, {\n    key: "matches",\n    value: function matches(constraints) {\n      var _this = this;\n\n      var filtered = Object.keys(constraints).filter(function (key) {\n        return !(_this.capabilities[key] && _this.capabilities[key] === constraints[key]);\n      });\n\n      if (filtered.length === 0) {\n        return true;\n      } else {\n        return !constraints[filtered];\n      }\n    }\n  }]);\n\n  return Sandbox;\n}(_bus_MiniBus__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);\n\n/* harmony default export */ __webpack_exports__["b"] = (Sandbox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL3NyYy9zYW5kYm94L1NhbmRib3guanM/NzU2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcbmltcG9ydCBTYW5kYm94UmVnaXN0cnkgZnJvbSAnLi9TYW5kYm94UmVnaXN0cnknO1xyXG5pbXBvcnQgTWluaUJ1cyBmcm9tICcuLi9idXMvTWluaUJ1cyc7XHJcblxyXG5cclxuZXhwb3J0IGxldCBTYW5kYm94VHlwZSA9IHtBUFA6ICdhcHAnLCBOT1JNQUw6ICdub3JtYWwnLCBXSU5ET1c6ICd3aW5kb3cnfTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiAqIEJhc2UgY2xhc3MgdG8gaW1wbGVtZW50IGV4dGVybmFsIHNhbmRib3ggY29tcG9uZW50XHJcbiAqL1xyXG5jbGFzcyBTYW5kYm94IGV4dGVuZHMgTWluaUJ1cyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhcGFiaWxpdGllcykge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoY2FwYWJpbGl0aWVzKSAgICAgIHsgX3RoaXMuY2FwYWJpbGl0aWVzID0gY2FwYWJpbGl0aWVzOyB9XHJcblxyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlcGxveSBhbiBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IGludG8gdGhlIHNhbmRib3guXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBjb21wb25lbnRTb3VyY2VDb2RlIENvbXBvbmVudCBzb3VyY2UgY29kZSAoSHlwZXJ0eSwgUHJvdG9TdHViLCBldGMpXHJcbiAgICogQHBhcmFtICB7VVJMfSBjb21wb25lbnRVUkwgSHlwZXJ0eSwgUHJvdG9TdHViLCBvciBhbnkgb3RoZXIgY29tcG9uZW50IGFkZHJlc3MuXHJcbiAgICogQHBhcmFtICB7Q29uZmlnfSBjb25maWd1cmF0aW9uIENvbmZpZyBwYXJhbWV0ZXJzIG9mIHRoZSBjb21wb25lbnRcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IHJldHVybiBkZXBsb3llZCBpZiBzdWNjZXNzZnVsLCBvciBhbnkgb3RoZXIgc3RyaW5nIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICBkZXBsb3lDb21wb25lbnQoY29tcG9uZW50U291cmNlQ29kZSwgY29tcG9uZW50VVJMLCBjb25maWd1cmF0aW9uKSB7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICAvLyBsZXQgbWVzc2FnZUZhY3RvcnkgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAvL0ZMT1ctT1VUOiBkZXBsb3kgbWVzc2FnZSBmb3IgdGhlIGludGVybmFsIFNhbmRib3hSZWdpc3RyeSAtPiBfb25EZXBsb3lcclxuICAgICAgbGV0IGRlcGxveU1lc3NhZ2UgPSB7XHJcbiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IFNhbmRib3hSZWdpc3RyeS5FeHRlcm5hbERlcGxveUFkZHJlc3MsIHRvOiBTYW5kYm94UmVnaXN0cnkuSW50ZXJuYWxEZXBsb3lBZGRyZXNzLFxyXG4gICAgICAgIGJvZHk6IHsgdXJsOiBjb21wb25lbnRVUkwsIHNvdXJjZUNvZGU6IGNvbXBvbmVudFNvdXJjZUNvZGUsIGNvbmZpZzogY29uZmlndXJhdGlvbiB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvL3NlbmQgbWVzc2FnZSBpbnRvIHRoZSBzYW5kYm94IGludGVybmFscyBhbmQgd2FpdCBmb3IgcmVwbHlcclxuICAgICAgX3RoaXMucG9zdE1lc3NhZ2UoZGVwbG95TWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAvL2lzIHRoaXMgcmVzcG9uc2UgY29tcGxhaW50IHdpdGggdGhlIHNwZWM/XHJcbiAgICAgICAgICByZXNvbHZlKCdkZXBsb3llZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgdGhlIGluc3RhbmNlIG9mIGEgcHJldmlvdXNseSBkZXBsb3llZCBjb21wb25lbnQuXHJcbiAgICogQHBhcmFtICB7VVJMfSBjb21wb25lbnRVUkwgSHlwZXJ0eSwgUHJvdG9TdHViLCBvciBhbnkgb3RoZXIgY29tcG9uZW50IGFkZHJlc3MuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm4gdW5kZXBsb3llZCBpZiBzdWNjZXNzZnVsLCBvciBhbnkgb3RoZXIgc3RyaW5nIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50VVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIC8vRkxPVy1PVVQ6IHVuLWRlcGxveSBtZXNzYWdlIGZvciB0aGUgaW50ZXJuYWwgU2FuZGJveFJlZ2lzdHJ5IC0+IF9vblJlbW92ZVxyXG4gICAgICBsZXQgcmVtb3ZlTWVzc2FnZSA9IHtcclxuICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogU2FuZGJveFJlZ2lzdHJ5LkV4dGVybmFsRGVwbG95QWRkcmVzcywgdG86IFNhbmRib3hSZWdpc3RyeS5JbnRlcm5hbERlcGxveUFkZHJlc3MsXHJcbiAgICAgICAgYm9keTogeyB1cmw6IGNvbXBvbmVudFVSTCB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvL3NlbmQgbWVzc2FnZSBpbnRvIHRoZSBzYW5kYm94IGludGVybmFscyBhbmQgd2FpdCBmb3IgcmVwbHlcclxuICAgICAgX3RoaXMucG9zdE1lc3NhZ2UocmVtb3ZlTWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAvL2lzIHRoaXMgcmVzcG9uc2UgY29tcGxhaW50IHdpdGggdGhlIHNwZWM/XHJcbiAgICAgICAgICByZXNvbHZlKCd1bmRlcGxveWVkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogTWF0Y2hlcyBTYW5kYm94IGNhcGFiaWxpdGllcyBhZ2FpbnN0IHByb3ZpZGVkIGNhcGFiaWxpdGllcy4gVXNlZCB0byBjaGVjayBpZiBzYW5kYm94IHByb3ZpZGVzIGFsbCByZXF1aXJlZCBjYXBhYmlsaXRpZXNcclxuICAqIEBwYXJhbSAge1J1bnRpbWVDYXBhYmlsaXRpZXN9IGNvbnN0cmFpbnRzIHNldCBvZiBSdW50aW1lQ2FwYWJpbGl0aWVzIHRvIG1hdGNoIHdpdGguXHJcbiAgKiBAcmV0dXJuIHtib29sZWFufSByZXR1cm4gdHJ1ZSBpZiBjb25zdHJhaW50cyBhcmUgbWF0Y2hlZCBmYWxzZSBvdGhlcndpc2VcclxuICAgKi9cclxuXHJcbiAgbWF0Y2hlcyhjb25zdHJhaW50cykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhjb25zdHJhaW50cykuZmlsdGVyKChrZXkpID0+IHtcclxuICAgICAgcmV0dXJuICEoX3RoaXMuY2FwYWJpbGl0aWVzW2tleV0gJiYgX3RoaXMuY2FwYWJpbGl0aWVzW2tleV0gPT09IGNvbnN0cmFpbnRzW2tleV0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PT0gMCkgICAgICB7IHJldHVybiB0cnVlOyB9ICAgIGVsc2UgICAgICB7IHJldHVybiAhKGNvbnN0cmFpbnRzW2ZpbHRlcmVkXSk7IH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTYW5kYm94O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBO0FBQ0E7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7Ozs7O0FBSUE7Ozs7O0FBRUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFQQTtBQVNBO0FBRUE7Ozs7Ozs7Ozs7O0FBT0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBRkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7Ozs7QUF0RkE7QUFDQTtBQXlGQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _SandboxFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Base class to implement internal deploy manager of components.\r\n */\n\n/**\r\n * @author micaelpedrosa@gmail.com\r\n * Internal component registry of all sandboxes.\r\n * Process internal request's for component deploy.\r\n */\n\nvar SandboxRegistry =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _components: <url: instance>\r\n  */\n  function SandboxRegistry(bus) {\n    _classCallCheck(this, SandboxRegistry);\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._factory = new _SandboxFactory__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](bus);\n    _this._components = {};\n    bus.addListener(SandboxRegistry.InternalDeployAddress, function (msg) {\n      console.log('SandboxRegistry-RCV: ', msg); // let responseMsg = {\n      //   id: msg.id, type: 'response', from: SandboxRegistry.InternalDeployAddress, to: SandboxRegistry.ExternalDeployAddress\n      // };\n\n      switch (msg.type) {\n        case 'create':\n          _this._onDeploy(msg);\n\n          break;\n\n        case 'delete':\n          _this._onRemove(msg);\n\n          break;\n      }\n    });\n  }\n\n  _createClass(SandboxRegistry, [{\n    key: \"_responseMsg\",\n    value: function _responseMsg(msg, code, value) {\n      var _this = this; // let messageFactory = _this.messageFactory;\n      //FLOW-OUT: generic response message to external Sandbox (deploy and un-deploy responses)\n\n\n      var responseMsg = {\n        id: msg.id,\n        type: 'response',\n        from: SandboxRegistry.InternalDeployAddress,\n        to: SandboxRegistry.ExternalDeployAddress\n      }; // Chanege the origin message, because the response;\n      // msg.from = SandboxRegistry.InternalDeployAddress;\n      // msg.to = SandboxRegistry.ExternalDeployAddress;\n\n      var body = {};\n      if (code) body.code = code;\n      if (value) body.desc = value;\n      responseMsg.body = body; // return messageFactory.createResponse(msg, code, value);\n\n      return responseMsg;\n    } //FLOW-IN: message from the runtime core Sandbox -> deployComponent\n\n  }, {\n    key: \"_onDeploy\",\n    value: function _onDeploy(msg) {\n      var _this = this;\n\n      var config = msg.body.config;\n      var componentURL = msg.body.url;\n      var sourceCode = msg.body.sourceCode;\n      var responseCode;\n      var responseDesc;\n\n      if (!_this._components.hasOwnProperty(componentURL)) {\n        try {\n          console.log('SandboxRegistry-onDeploy: ', msg);\n          _this._components[componentURL] = _this._create(componentURL, sourceCode, config, _this._factory);\n          responseCode = 200;\n        } catch (error) {\n          responseCode = 500;\n          responseDesc = error;\n        }\n      } else {\n        responseCode = 500;\n        responseDesc = 'Instance ' + componentURL + ' already exist!';\n      }\n\n      var responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\n\n      _this._bus.postMessage(responseMsg);\n    } //FLOW-IN: message from the runtime core Sandbox -> removeComponent\n\n  }, {\n    key: \"_onRemove\",\n    value: function _onRemove(msg) {\n      var _this = this;\n\n      var componentURL = msg.body.url;\n      var responseCode;\n      var responseDesc;\n\n      if (_this._components.hasOwnProperty(componentURL)) {\n        //remove component from the pool and all listeners\n        delete _this._components[componentURL];\n\n        _this._bus.removeAllListenersOf(componentURL);\n\n        responseCode = 200;\n      } else {\n        responseCode = 500;\n        responseDesc = 'Instance ' + componentURL + ' doesn\\'t exist!';\n      }\n\n      var responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\n\n      _this._bus.postMessage(responseMsg);\n    }\n    /**\r\n     * This method should be implemented by the internal sandbox code.\r\n     * @param  {ComponentURL} url URL used for the instance\r\n     * @param  {string} sourceCode Code of the component\r\n     * @param  {Config} config Configuration parameters\r\n     * @return {Object} Returns instance of the component or throw an error \"throw 'error message'\"\r\n     */\n\n  }, {\n    key: \"_create\",\n    value: function _create(url, sourceCode, config, factory) {//implementation specific\n\n      /* example code:\r\n        eval(sourceCode);\r\n        return activate(url, _this._bus, config);\r\n      */\n    }\n  }, {\n    key: \"components\",\n    get: function get() {\n      return this._components;\n    }\n  }]);\n\n  return SandboxRegistry;\n}();\n\nSandboxRegistry.ExternalDeployAddress = 'hyperty-runtime://sandbox/external';\nSandboxRegistry.InternalDeployAddress = 'hyperty-runtime://sandbox/internal';\n/* harmony default export */ __webpack_exports__[\"a\"] = (SandboxRegistry);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_0__["getLogger"](\'RegistrationStatus\');\n\n/**\r\n* The RegistrationStatus lib allows to monitor registration status of an Hyperty or Data Object\r\n*\r\n*/\n\nvar RegistrationStatus =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * @param {URL} url URL address of the entity to be monitored\r\n  * @param {URL} runtimeURL the current URL of the Runtime Instance used\r\n  * @param {HypertyURL} owner the URL of the Hyperty instance that is using this lib\r\n  * @param {MiniBus} owner the URL of the Hyperty instance that is using this lib\r\n  *\r\n  */\n  function RegistrationStatus(url, runtimeURL, owner, msgBus) {\n    _classCallCheck(this, RegistrationStatus);\n\n    this._registryObjectURL = url;\n    this._runtimeURL = runtimeURL;\n    this._domain = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[/* divideURL */ "k"])(runtimeURL).domain;\n    this._discoveredObjectURL = owner;\n    this._messageBus = msgBus;\n    this._subscriptionSet = false;\n    this._subscribers = {\n      live: {},\n      disconnected: {}\n    };\n  }\n\n  _createClass(RegistrationStatus, [{\n    key: "onLive",\n    value: function onLive(subscriber, callback) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._subscriptionSet) {\n          _this._subscribe().then(function () {\n            _this._subscribers.live[subscriber] = callback;\n            resolve();\n          }).catch(function (err) {\n            return reject(err);\n          });\n        } else {\n          _this._subscribers.live[subscriber] = callback;\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: "onDisconnected",\n    value: function onDisconnected(subscriber, callback) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2._subscriptionSet) {\n          _this2._subscribe().then(function () {\n            _this2._subscribers.disconnected[subscriber] = callback;\n            resolve();\n          }).catch(function (err) {\n            return reject(err);\n          });\n        } else {\n          _this2._subscribers.disconnected[subscriber] = callback;\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: "_subscribe",\n    value: function _subscribe() {\n      var _this3 = this;\n\n      var msg = {\n        type: \'subscribe\',\n        from: this._discoveredObjectURL,\n        to: this._runtimeURL + \'/subscriptions\',\n        body: {\n          resources: [this._registryObjectURL + \'/registration\']\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this3._messageBus.postMessage(msg, function (reply) {\n          log.log("[DiscoveredObject.subscribe] ".concat(_this3._registryObjectURL, " rcved reply "), reply);\n\n          if (reply.body.code === 200) {\n            _this3._generateListener(_this3._registryObjectURL + \'/registration\');\n\n            _this3._subscriptionSet = true;\n            resolve();\n          } else {\n            log.error(\'Error subscribing \', _this3._registryObjectURL);\n            reject(\'Error subscribing \' + _this3._registryObjectURL);\n          }\n        });\n      });\n    }\n  }, {\n    key: "_generateListener",\n    value: function _generateListener(notificationURL) {\n      var _this4 = this;\n\n      this._messageBus.addListener(notificationURL, function (msg) {\n        log.log("[DiscoveredObject.notification] ".concat(_this4._registryObjectURL, ": "), msg);\n\n        _this4._processNotification(msg);\n      });\n    }\n  }, {\n    key: "_processNotification",\n    value: function _processNotification(msg) {\n      var _this5 = this;\n\n      var status = msg.body.value;\n      setTimeout(function () {\n        // Hack to give time for onLive Hyperties to get ready. To be removed when Hyperty State machaine is implemented\n        Object.keys(_this5._subscribers[status]).forEach(function (subscriber) {\n          return _this5._subscribers[status][subscriber]();\n        });\n      }, 5000);\n    }\n  }, {\n    key: "_unsubscribe",\n    value: function _unsubscribe() {\n      var _this6 = this;\n\n      var msg = {\n        type: \'unsubscribe\',\n        from: this._discoveredObjectURL,\n        to: this._runtimeURL + \'/subscriptions\',\n        body: {\n          resource: this._registryObjectURL + \'/registration\'\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this6._messageBus.postMessage(msg, function (reply) {\n          log.log("[DiscoveredObject.unsubscribe] ".concat(_this6._registryObjectURL, " rcved reply "), reply);\n\n          if (reply.body.code === 200) {\n            resolve();\n          } else {\n            log.error(\'Error unsubscribing \', _this6._registryObjectURL);\n            reject(\'Error unsubscribing \' + _this6._registryObjectURL);\n          }\n        });\n      });\n    }\n  }, {\n    key: "unsubscribeLive",\n    value: function unsubscribeLive(subscriber) {\n      var _this7 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (subscriber in _this7._subscribers.live) {\n          //TODO: unsubscribe outside this condition\n          delete _this7._subscribers.live[subscriber];\n        }\n\n        if (_this7._areSubscriptionsEmpty()) {\n          _this7._unsubscribe().then(function () {\n            return resolve();\n          }).catch(function (err) {\n            return reject(err);\n          });\n        } else {\n          resolve();\n        }\n        /*  } else {\r\n            reject(`${subscriber} doesn\'t subscribe onLive for ${this._registryObjectURL}`);\r\n          }*/\n\n      });\n    }\n  }, {\n    key: "unsubscribeDisconnected",\n    value: function unsubscribeDisconnected(subscriber) {\n      var _this8 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (subscriber in _this8._subscribers.disconnected) {\n          delete _this8._subscribers.disconnected[subscriber];\n\n          if (_this8._areSubscriptionsEmpty()) {\n            _this8._unsubscribe().then(function () {\n              return resolve();\n            }).catch(function (err) {\n              return reject(err);\n            });\n          } else {\n            resolve();\n          }\n        } else {\n          reject("".concat(subscriber, " doesn\'t subscribe onDisconnected for ").concat(_this8._registryObjectURL));\n        }\n      });\n    }\n  }, {\n    key: "_areSubscriptionsEmpty",\n    value: function _areSubscriptionsEmpty() {\n      return Object.keys(this._subscribers.live).length === 0 && Object.keys(this._subscribers.disconnected).length === 0;\n    }\n  }]);\n\n  return RegistrationStatus;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (RegistrationStatus);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _Bus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Message BUS Interface is an extension of the Bus\r\n* It is used mainly in the internal sandbox routing.\r\n*/\n\nvar MiniBus =\n/*#__PURE__*/\nfunction (_Bus) {\n  _inherits(MiniBus, _Bus);\n\n  function MiniBus() {\n    _classCallCheck(this, MiniBus);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MiniBus).call(this));\n  }\n  /**\r\n   * Post a message for routing. Message is routed directly to the external routing _onPostMessage.\r\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\r\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a "Timeout".\r\n   * @return {number}                  the Message id\r\n   */\n\n\n  _createClass(MiniBus, [{\n    key: "postMessage",\n    value: function postMessage(inMsg, responseCallback, timeout) {\n      var _this = this;\n\n      _this._genId(inMsg);\n\n      _this._responseCallback(inMsg, responseCallback, timeout); //always send to external (to core MessageBus)\n\n\n      _this._onPostMessage(inMsg);\n\n      return inMsg.id;\n    } //internal method used when a message is received by an external routing system\n\n  }, {\n    key: "_onMessage",\n    value: function _onMessage(msg) {\n      var _this = this;\n\n      if (!_this._onResponse(msg)) {\n        var itemList = _this._subscriptions[msg.to];\n\n        if (itemList) {\n          _this._publishOn(itemList, msg);\n\n          if (!msg.to.startsWith(\'hyperty\')) {\n            _this._publishOnDefault(msg);\n          }\n        } else {\n          _this._publishOnDefault(msg);\n        }\n      }\n    }\n  }]);\n\n  return MiniBus;\n}(_Bus__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);\n\n/* harmony default export */ __webpack_exports__["a"] = (MiniBus);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL3NyYy9idXMvTWluaUJ1cy5qcz9kOWFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuaW1wb3J0IEJ1cyBmcm9tICcuL0J1cyc7XHJcblxyXG4vKipcclxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiogTWVzc2FnZSBCVVMgSW50ZXJmYWNlIGlzIGFuIGV4dGVuc2lvbiBvZiB0aGUgQnVzXHJcbiogSXQgaXMgdXNlZCBtYWlubHkgaW4gdGhlIGludGVybmFsIHNhbmRib3ggcm91dGluZy5cclxuKi9cclxuY2xhc3MgTWluaUJ1cyBleHRlbmRzIEJ1cyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBvc3QgYSBtZXNzYWdlIGZvciByb3V0aW5nLiBNZXNzYWdlIGlzIHJvdXRlZCBkaXJlY3RseSB0byB0aGUgZXh0ZXJuYWwgcm91dGluZyBfb25Qb3N0TWVzc2FnZS5cclxuICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBpbk1zZyAgICAgICAgICAgIEpTT04gd2l0aCBtYW5kYXRvcnkgTWVzc2FnZSBzdHJ1Y3R1cmUge2lkLCB0eXBlLCBmcm9tLCB0b31cclxuICAgKiBAcGFyYW0gIHtDYWxsYmFja30gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBjYWxsYmFjayBpZiBhIHJlc3BvbnNlIGlzIGV4cGVjdGVkIGZyb20gdGhlIHJlcXVlc3QuIEEgcmVzcG9uc2Ugd2lsbCBiZSBhbHdheXMgc2VudCwgZXZlbiBpZiBpdCBpcyBhIFwiVGltZW91dFwiLlxyXG4gICAqIEByZXR1cm4ge251bWJlcn0gICAgICAgICAgICAgICAgICB0aGUgTWVzc2FnZSBpZFxyXG4gICAqL1xyXG4gIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrLCB0aW1lb3V0KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9nZW5JZChpbk1zZyk7XHJcbiAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjaywgdGltZW91dCk7XHJcblxyXG4gICAgLy9hbHdheXMgc2VuZCB0byBleHRlcm5hbCAodG8gY29yZSBNZXNzYWdlQnVzKVxyXG4gICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UoaW5Nc2cpO1xyXG5cclxuICAgIHJldHVybiBpbk1zZy5pZDtcclxuICB9XHJcblxyXG4gIC8vaW50ZXJuYWwgbWV0aG9kIHVzZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgYnkgYW4gZXh0ZXJuYWwgcm91dGluZyBzeXN0ZW1cclxuICBfb25NZXNzYWdlKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHtcclxuICAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbbXNnLnRvXTtcclxuICAgICAgaWYgKGl0ZW1MaXN0KSB7XHJcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcclxuICAgICAgICBpZiAoIW1zZy50by5zdGFydHNXaXRoKCdoeXBlcnR5JykpIHtcclxuICAgICAgICAgIF90aGlzLl9wdWJsaXNoT25EZWZhdWx0KG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIF90aGlzLl9wdWJsaXNoT25EZWZhdWx0KG1zZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNaW5pQnVzO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTtBQUVBOzs7Ozs7QUFLQTs7Ozs7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQUVBO0FBRUE7Ozs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQXZDQTtBQUNBO0FBMENBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log system\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_0__["getLogger"](\'Bus\');\n/**\r\n* @author micaelpedrosa@gmail.com\r\n* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.\r\n* Components that need a message system should receive this class as a dependency or extend it.\r\n* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener\r\n*/\n\nvar Bus =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _msgId: number;\r\n  _subscriptions: <url: MsgListener[]>\r\n    _responseTimeOut: number\r\n  _responseCallbacks: <url+id: (msg) => void>\r\n    */\n  function Bus() {\n    _classCallCheck(this, Bus);\n\n    var _this = this;\n\n    _this._msgId = 0;\n    _this._subscriptions = {};\n    _this._responseTimeOut = 15000; //default to 3s\n\n    _this._responseCallbacks = {};\n\n    _this._registerExternalListener();\n  }\n  /**\r\n  * Register listener to receive message when "msg.to === url".\r\n  * Special url "*" for default listener is accepted to intercept all messages.\r\n  * @param {URL} url Address to intercept, tha is in the message "to"\r\n  * @param {Listener} listener listener\r\n  * @return {MsgListener} instance of MsgListener\r\n  */\n\n\n  _createClass(Bus, [{\n    key: "addListener",\n    value: function addListener(url, listener) {\n      var _this = this;\n\n      var item = new MsgListener(_this._subscriptions, url, listener);\n      var itemList = _this._subscriptions[url];\n\n      if (!itemList) {\n        itemList = [];\n        _this._subscriptions[url] = itemList;\n      }\n\n      itemList.push(item);\n      return item;\n    }\n    /**\r\n     * Manually add a response listener. Only one listener per message ID should exist.\r\n     * ATENTION, there is no timeout for this listener.\r\n     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.\r\n     * @param {URL} url Origin address of the message sent, "msg.from".\r\n     * @param {number} msgId Message ID that is returned from the postMessage.\r\n     * @param {Function} responseListener Callback function for the response\r\n     */\n\n  }, {\n    key: "addResponseListener",\n    value: function addResponseListener(url, msgId, responseListener) {\n      this._responseCallbacks[url + msgId] = responseListener;\n    }\n    /**\r\n     * Remove the response listener.\r\n     * @param {URL} url Origin address of the message sent, "msg.from".\r\n     * @param {number} msgId  Message ID that is returned from the postMessage\r\n     */\n\n  }, {\n    key: "removeResponseListener",\n    value: function removeResponseListener(url, msgId) {\n      delete this._responseCallbacks[url + msgId];\n    }\n    /**\r\n     * Remove all existent listeners for the URL\r\n     * @param  {URL} url Address registered\r\n     */\n\n  }, {\n    key: "removeAllListenersOf",\n    value: function removeAllListenersOf(url) {\n      delete this._subscriptions[url];\n    }\n    /**\r\n     * Helper method to bind listeners (in both directions) into other MiniBus target.\r\n     * @param  {URL} outUrl Outbound URL, register listener for url in direction "this -> target"\r\n     * @param  {URL} inUrl Inbound URL, register listener for url in direction "target -> this"\r\n     * @param  {MiniBus} target The other target MiniBus\r\n     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.\r\n     */\n\n  }, {\n    key: "bind",\n    value: function bind(outUrl, inUrl, target) {\n      var _this2 = this;\n\n      var _this = this;\n\n      var thisListn = _this.addListener(outUrl, function (msg) {\n        target.postMessage(msg);\n      });\n\n      var targetListn = target.addListener(inUrl, function (msg) {\n        _this.postMessage(msg);\n      });\n      return {\n        thisListener: thisListn,\n        targetListener: targetListn,\n        unbind: function unbind() {\n          _this2.thisListener.remove();\n\n          _this2.targetListener.remove();\n        }\n      };\n    } //publish on default listeners\n\n  }, {\n    key: "_publishOnDefault",\n    value: function _publishOnDefault(msg) {\n      //is there any "*" (default) listeners?\n      var itemList = this._subscriptions[\'*\'];\n\n      if (itemList) {\n        this._publishOn(itemList, msg);\n      }\n    } //publish on a subscription list.\n\n  }, {\n    key: "_publishOn",\n    value: function _publishOn(itemList, msg) {\n      itemList.forEach(function (sub) {\n        sub._callback(msg);\n      });\n    }\n  }, {\n    key: "_responseCallback",\n    value: function _responseCallback(inMsg, responseCallback) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var _this = this; //automatic management of response handlers\n\n\n      if (responseCallback) {\n        var responseId = inMsg.from + inMsg.id;\n        _this._responseCallbacks[responseId] = responseCallback;\n\n        if (timeout) {\n          setTimeout(function () {\n            var responseFun = _this._responseCallbacks[responseId];\n            delete _this._responseCallbacks[responseId];\n\n            if (responseFun) {\n              var errorMsg = {\n                id: inMsg.id,\n                type: \'response\',\n                body: {\n                  code: 408,\n                  desc: \'Response timeout!\',\n                  value: inMsg\n                }\n              };\n              responseFun(errorMsg);\n            }\n          }, _this._responseTimeOut);\n        }\n      }\n    } //TODO: provisional responses should reset timeout\n\n  }, {\n    key: "_onResponse",\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      if (msg.type === \'response\') {\n        var responseId = msg.to + msg.id;\n        var responseFun = _this._responseCallbacks[responseId];\n\n        if (msg.body.code >= 200) {\n          //if it\'s a provisional response, don\'t delete response listener\n          delete _this._responseCallbacks[responseId];\n        }\n\n        if (responseFun) {\n          responseFun(msg);\n          return true;\n        }\n      }\n\n      return false;\n    } //receive messages from external interface\n\n  }, {\n    key: "_onMessage",\n    value: function _onMessage(msg) {\n      var _this = this;\n\n      if (!_this._onResponse(msg)) {\n        var itemList = _this._subscriptions[msg.to];\n\n        if (itemList) {\n          _this._publishOn(itemList, msg);\n        } else {\n          _this._publishOnDefault(msg);\n        }\n      }\n    }\n  }, {\n    key: "_genId",\n    value: function _genId(inMsg) {\n      //TODO: how do we manage message ID\'s? Should it be a global runtime counter, or per URL address?\n      //Global counter will not work, because there will be multiple MiniBus instances!\n      //Per URL, can be a lot of data to maintain!\n      //Maybe a counter per MiniBus instance. This is the assumed solution for now.\n      if (!inMsg.id || inMsg.id === 0) {\n        this._msgId++;\n        inMsg.id = this._msgId;\n      }\n    }\n    /**\r\n    * Send messages to local listeners, or if not exists to external listeners.\r\n    * It\'s has an optional mechanism for automatic management of response handlers.\r\n    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).\r\n    * @param  {Message} msg Message to send. Message ID is automatically added to the message.\r\n    * @param  {Function} responseCallback Optional parameter, if the developer what\'s automatic response management.\r\n    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.\r\n    */\n\n  }, {\n    key: "postMessage",\n    value: function postMessage(inMsg, responseCallback) {}\n    /**\r\n     * Function to post messages with a number of retries in case timeouts occur.\r\n     * @param  {Message} msg Message to send. Message ID is automatically added to the message.\r\n     * @param  {Function} responseCallback Optional parameter, if the developer what\'s automatic response management.\r\n     * @param  {integer} retries number of retries when timeouts occur\r\n     * @return {boolean} message delivery result;\r\n     */\n\n  }, {\n    key: "postMessageWithRetries",\n    value: function postMessageWithRetries(msg, retries, callback) {\n      var _this = this;\n\n      var retry = 0; //let timeout = true;\n\n      var sendMsg = function sendMsg() {\n        return new Promise(function (resolve, reject) {\n          _this.postMessage(msg, function (reply) {\n            if (reply.body.code === 408 || reply.body.code === 500) reject();else {\n              log.info(\'[Bus.postMessageWithRetries] msg delivered: \', msg);\n              callback(reply);\n              resolve();\n            }\n          });\n        });\n      };\n\n      var tryAgain = function tryAgain() {\n        sendMsg().then(function () {\n          //timeout = false;\n          return;\n        }, function () {\n          log.warn("[Bus.postMessageWithRetries] Message Bounced (retry ".concat(retry, "): \'"), msg);\n\n          if (retry++ < retries) {\n            tryAgain(); // setTimeout(() => { tryAgain(); }, 1000);\n          } else {\n            var error = "[Error] Message Bounced (delivery attempts ".concat(retries, "): \'");\n            throw new Error(error + msg);\n          }\n        });\n      };\n\n      tryAgain();\n    }\n    /**\r\n     * Not public available, used by the class extension implementation, to process messages from the public "postMessage" without a registered listener.\r\n     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.\r\n     * @param  {Message.Message} msg Message\r\n     */\n\n  }, {\n    key: "_onPostMessage",\n    value: function _onPostMessage(msg) {}\n    /*implementation will send message to external system*/\n\n    /**\r\n     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.\r\n     * This method is called one time in the constructor to register external listeners.\r\n     * The implementation will probably call the "_onMessage" method to publish in the local listeners.\r\n     * DO NOT call "postMessage", there is a danger that the message enters in a cycle!\r\n     */\n\n  }, {\n    key: "_registerExternalListener",\n    value: function _registerExternalListener() {\n      /*implementation will register external listener and call "this._onMessage(msg)" */\n    }\n  }]);\n\n  return Bus;\n}();\n\nvar MsgListener =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _subscriptions: <string: MsgListener[]>;\r\n  _url: string;\r\n  _callback: (msg) => void;\r\n  */\n  function MsgListener(subscriptions, url, callback) {\n    _classCallCheck(this, MsgListener);\n\n    var _this = this;\n\n    _this._subscriptions = subscriptions;\n    _this._url = url;\n    _this._callback = callback;\n  }\n\n  _createClass(MsgListener, [{\n    key: "remove",\n\n    /**\r\n     * Remove this listener from the Bus\r\n     */\n    value: function remove() {\n      var _this = this;\n\n      var subs = _this._subscriptions[_this._url];\n\n      if (subs) {\n        var index = subs.indexOf(_this);\n        subs.splice(index, 1); //if there are no listeners, remove the subscription entirely.\n\n        if (subs.length === 0) {\n          delete _this._subscriptions[_this._url];\n        }\n      }\n    }\n  }, {\n    key: "url",\n    get: function get() {\n      return this._url;\n    }\n  }]);\n\n  return MsgListener;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (Bus);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * EventEmitter\r\n * All classes which extends this, can have addEventListener and trigger events;\r\n */\nvar EventEmitter =\n/*#__PURE__*/\nfunction () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n  }\n\n  _createClass(EventEmitter, [{\n    key: "addEventListener",\n\n    /**\r\n     * addEventListener listen for an eventType\r\n     * @param  {string}         eventType - listening for this type of event\r\n     * @param  {Function}       cb        - callback function will be executed when the event it is invoked\r\n     */\n    value: function addEventListener(eventType, cb) {\n      var _this = this;\n\n      _this[eventType] = cb;\n    }\n    /**\r\n     * Invoke the eventType\r\n     * @param  {string} eventType - event will be invoked\r\n     * @param  {object} params - parameters will be passed to the addEventListener\r\n     */\n\n  }, {\n    key: "trigger",\n    value: function trigger(eventType, params) {\n      var _this = this;\n\n      if (_this[eventType]) {\n        _this[eventType](params);\n      }\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\n/* harmony default export */ __webpack_exports__["a"] = (EventEmitter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9FdmVudEVtaXR0ZXIuanM/OGE4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcbi8qKlxyXG4gKiBFdmVudEVtaXR0ZXJcclxuICogQWxsIGNsYXNzZXMgd2hpY2ggZXh0ZW5kcyB0aGlzLCBjYW4gaGF2ZSBhZGRFdmVudExpc3RlbmVyIGFuZCB0cmlnZ2VyIGV2ZW50cztcclxuICovXHJcbmNsYXNzIEV2ZW50RW1pdHRlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIGFkZEV2ZW50TGlzdGVuZXIgbGlzdGVuIGZvciBhbiBldmVudFR5cGVcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgZXZlbnRUeXBlIC0gbGlzdGVuaW5nIGZvciB0aGlzIHR5cGUgb2YgZXZlbnRcclxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gICAgICAgY2IgICAgICAgIC0gY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBldmVudCBpdCBpcyBpbnZva2VkXHJcbiAgICovXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNiKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXNbZXZlbnRUeXBlXSA9IGNiO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW52b2tlIHRoZSBldmVudFR5cGVcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHdpbGwgYmUgaW52b2tlZFxyXG4gICAqIEBwYXJhbSAge29iamVjdH0gcGFyYW1zIC0gcGFyYW1ldGVycyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgYWRkRXZlbnRMaXN0ZW5lclxyXG4gICAqL1xyXG4gIHRyaWdnZXIoZXZlbnRUeXBlLCBwYXJhbXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKF90aGlzW2V2ZW50VHlwZV0pIHtcclxuICAgICAgX3RoaXNbZXZlbnRUeXBlXShwYXJhbXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV2ZW50RW1pdHRlcjtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7Ozs7QUFJQTs7Ozs7Ozs7OztBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBSUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* Core IdentityManager interface\r\n* Class to allow applications to search for Identities registered in runtime-core\r\n*/\n\nvar IdentityManager =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * To initialise the IdentityManager, which will provide the support for hyperties to\r\n  * query about identities registered\r\n  * @param  {String}          owner            owner\r\n  * @param  {String}          runtimeURL            runtimeURL\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  */\n  function IdentityManager(owner, runtimeURL, msgBus) {\n    _classCallCheck(this, IdentityManager);\n\n    var _this = this;\n\n    _this.messageBus = msgBus;\n    _this.domain = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[/* divideURL */ \"k\"])(owner).domain;\n    _this.owner = owner;\n    _this.runtimeURL = runtimeURL;\n  }\n  /**\r\n  * Function to query the runtime registry about the identity to which the hyperty was associated\r\n  * @param {String}       type (Optional)         type of user info required\r\n  * @param {String}       owner (Optional)   owner to search for\r\n  * @return {Promise}     userURL       userURL associated to the hyperty\r\n  */\n\n\n  _createClass(IdentityManager, [{\n    key: \"discoverUserRegistered\",\n    value: function discoverUserRegistered(type, hyperty) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var activeHypertyURL; // if any type of search is selected query for that type, otherwise query for default user info\n\n        var searchType = type ? type : '.';\n\n        if (!hyperty) {\n          activeHypertyURL = _this.owner;\n        } else {\n          activeHypertyURL = hyperty;\n        }\n\n        var msg = {\n          type: 'read',\n          from: activeHypertyURL,\n          to: _this.runtimeURL + '/registry/',\n          body: {\n            resource: searchType,\n            criteria: activeHypertyURL\n          }\n        };\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          var userURL = reply.body.resource;\n\n          if (userURL && reply.body.code === 200) {\n            resolve(userURL);\n          } else {\n            reject('code: ' + reply.body.code + ' No user was found');\n          }\n        });\n      });\n    }\n    /**\r\n    * Function to query the Identity Module about authenticated identities from a certain domain\r\n    * @param {String}       idp idp domain of the identity to be discovered\r\n    * @return {Promise}     identity\r\n    */\n\n  }, {\n    key: \"discoverIdentityPerIdP\",\n    value: function discoverIdentityPerIdP(idp) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          type: 'read',\n          from: this.owner,\n          to: _this.runtimeURL + '/idm',\n          body: {\n            resource: idp,\n            criteria: 'idp'\n          }\n        };\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            resolve(reply.body.value);\n          } else {\n            reject(reply.body.code + ' ' + reply.body.desc);\n          }\n        });\n      });\n    }\n  }]);\n\n  return IdentityManager;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (IdentityManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1tuYW1lXS8uL3NyYy9pZGVudGl0eS9JZGVudGl0eU1hbmFnZXIuanM/MTYzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcbmltcG9ydCB7ZGl2aWRlVVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG4vKipcclxuKiBDb3JlIElkZW50aXR5TWFuYWdlciBpbnRlcmZhY2VcclxuKiBDbGFzcyB0byBhbGxvdyBhcHBsaWNhdGlvbnMgdG8gc2VhcmNoIGZvciBJZGVudGl0aWVzIHJlZ2lzdGVyZWQgaW4gcnVudGltZS1jb3JlXHJcbiovXHJcbmNsYXNzIElkZW50aXR5TWFuYWdlciB7XHJcblxyXG4gIC8qKlxyXG4gICogVG8gaW5pdGlhbGlzZSB0aGUgSWRlbnRpdHlNYW5hZ2VyLCB3aGljaCB3aWxsIHByb3ZpZGUgdGhlIHN1cHBvcnQgZm9yIGh5cGVydGllcyB0b1xyXG4gICogcXVlcnkgYWJvdXQgaWRlbnRpdGllcyByZWdpc3RlcmVkXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgIG93bmVyICAgICAgICAgICAgb3duZXJcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgcnVudGltZVVSTCAgICAgICAgICAgIHJ1bnRpbWVVUkxcclxuICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXNcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKG93bmVyLCBydW50aW1lVVJMLCBtc2dCdXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gbXNnQnVzO1xyXG5cclxuICAgIF90aGlzLmRvbWFpbiA9IGRpdmlkZVVSTChvd25lcikuZG9tYWluO1xyXG4gICAgX3RoaXMub3duZXIgPSBvd25lcjtcclxuICAgIF90aGlzLnJ1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBxdWVyeSB0aGUgcnVudGltZSByZWdpc3RyeSBhYm91dCB0aGUgaWRlbnRpdHkgdG8gd2hpY2ggdGhlIGh5cGVydHkgd2FzIGFzc29jaWF0ZWRcclxuICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgICB0eXBlIChPcHRpb25hbCkgICAgICAgICB0eXBlIG9mIHVzZXIgaW5mbyByZXF1aXJlZFxyXG4gICogQHBhcmFtIHtTdHJpbmd9ICAgICAgIG93bmVyIChPcHRpb25hbCkgICBvd25lciB0byBzZWFyY2ggZm9yXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgdXNlclVSTCAgICAgICB1c2VyVVJMIGFzc29jaWF0ZWQgdG8gdGhlIGh5cGVydHlcclxuICAqL1xyXG4gIGRpc2NvdmVyVXNlclJlZ2lzdGVyZWQodHlwZSwgaHlwZXJ0eSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBsZXQgYWN0aXZlSHlwZXJ0eVVSTDtcclxuXHJcbiAgICAgIC8vIGlmIGFueSB0eXBlIG9mIHNlYXJjaCBpcyBzZWxlY3RlZCBxdWVyeSBmb3IgdGhhdCB0eXBlLCBvdGhlcndpc2UgcXVlcnkgZm9yIGRlZmF1bHQgdXNlciBpbmZvXHJcbiAgICAgIGxldCBzZWFyY2hUeXBlID0gKHR5cGUpID8gdHlwZSA6ICcuJztcclxuXHJcbiAgICAgIGlmICghaHlwZXJ0eSkge1xyXG4gICAgICAgIGFjdGl2ZUh5cGVydHlVUkwgPSBfdGhpcy5vd25lcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhY3RpdmVIeXBlcnR5VVJMID0gaHlwZXJ0eTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IG1zZyA9IHtcclxuICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IGFjdGl2ZUh5cGVydHlVUkwsIHRvOiBfdGhpcy5ydW50aW1lVVJMICsgJy9yZWdpc3RyeS8nLCBib2R5OiB7IHJlc291cmNlOiBzZWFyY2hUeXBlLCBjcml0ZXJpYTogYWN0aXZlSHlwZXJ0eVVSTH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IHVzZXJVUkwgPSByZXBseS5ib2R5LnJlc291cmNlO1xyXG5cclxuICAgICAgICBpZiAodXNlclVSTCAmJiByZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh1c2VyVVJMKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdjb2RlOiAnICsgcmVwbHkuYm9keS5jb2RlICsgJyBObyB1c2VyIHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gcXVlcnkgdGhlIElkZW50aXR5IE1vZHVsZSBhYm91dCBhdXRoZW50aWNhdGVkIGlkZW50aXRpZXMgZnJvbSBhIGNlcnRhaW4gZG9tYWluXHJcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgICAgaWRwIGlkcCBkb21haW4gb2YgdGhlIGlkZW50aXR5IHRvIGJlIGRpc2NvdmVyZWRcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICBpZGVudGl0eVxyXG4gICovXHJcblxyXG4gIGRpc2NvdmVySWRlbnRpdHlQZXJJZFAoaWRwKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIGxldCBtc2cgPSB7XHJcbiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiB0aGlzLm93bmVyLCB0bzogX3RoaXMucnVudGltZVVSTCArICcvaWRtJywgYm9keTogeyByZXNvdXJjZTogaWRwLCBjcml0ZXJpYTogJ2lkcCd9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LnZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuY29kZSArICcgJyArIHJlcGx5LmJvZHkuZGVzYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSWRlbnRpdHlNYW5hZ2VyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTtBQUVBOzs7OztBQUlBOzs7QUFFQTs7Ozs7OztBQU9BO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBR0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n//import IdentityManager from '../identityManager/IdentityManager';\n//import Syncher from '../syncher/Syncher.js';\n//import Discovery from '../discovery/Discovery.js';\n//import {divideURL} from '../utils/utils';\n//import Search from '../utils/Search';\n\n/**\r\n* Context Observer;\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n*/\n\nvar ContextObserver =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ContextObserver, _EventEmitter);\n\n  function ContextObserver(hypertyURL, bus, configuration, contextResourceTypes, factory, syncher) {\n    var _this2;\n\n    _classCallCheck(this, ContextObserver);\n\n    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\n    if (!bus) throw new Error('The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('The configuration is a needed parameter ');\n    if (!factory) throw new Error('The factory is a needed parameter ');\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ContextObserver).call(this));\n\n    var _this = _assertThisInitialized(_assertThisInitialized(_this2));\n\n    _this._contextResourceTypes = contextResourceTypes;\n    _this._url = hypertyURL;\n    _this._discoverUsersPromises = {}; // object with promises executed at discoverUsers function\n\n    _this._observePromises = {}; // object with promises executed at observe function\n    //let identityManager = new IdentityManager(hypertyURL, configuration.runtimeURL, bus);\n\n    console.log('[ContextObserver] started with hypertyURL->', hypertyURL);\n    _this._domain = factory.divideURL(configuration.runtimeURL).domain;\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + _this._domain + '/.well-known/dataschema/Context';\n    _this._users2observe = [];\n    _this._observers = {};\n    _this2._syncher = syncher ? syncher : factory.createSyncher(hypertyURL, bus, configuration);\n    var discovery = factory.createDiscovery(hypertyURL, configuration.runtimeURL, bus);\n    _this._discovery = discovery;\n    _this._discoveries = {}; //list of discovered objects\n    //_this.identityManager = identityManager;\n    //_this.search = new Search(discovery, identityManager);\n\n    window.discovery = _this._discovery;\n    return _this2;\n  }\n\n  _createClass(ContextObserver, [{\n    key: \"start\",\n    value: function start(resumedContext, disconnectedCallBack) {\n      var _this = this;\n\n      console.log('[ContextObserver.start] ');\n      return new Promise(function (resolve, reject) {\n        _this._syncher.resumeObservers({\n          store: true\n        }).then(function (observers) {\n          var observersList = Object.keys(observers);\n\n          if (observersList.length > 0) {\n            console.log('[ContextObserver.start] resuming: ', observers);\n            /*observersList.forEach((i)=>{\r\n            _this._users2observe.push(new UserAvailabilityController(observers[i]));\r\n            });*/\n\n            _this._observers = observers;\n            resolve(observers);\n            observersList.forEach(function (observer) {\n              var Context = observers[observer]; // By default resumed context is set with resumedContext.\n\n              if (resumedContext) context.data.values = resumedContext; // Context will will be updated with value synchronized with reporter if connected\n\n              Context.sync(); //Add listener to be notified when reporter is abruptly disconnected\n\n              if (disconnectedCallBack) Context.onDisconnected(disconnectedCallBack);\n            });\n          } else {\n            resolve(false);\n          }\n        }).catch(function (reason) {\n          console.info('[ContextObserver] Resume Observer failed | ', reason);\n          resolve(false);\n        });\n      }).catch(function (reason) {\n        reject('[ContextObserver] Start failed | ', reason);\n      });\n    }\n  }, {\n    key: \"resumeDiscoveries\",\n    value: function resumeDiscoveries() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._discovery.resumeDiscoveries().then(function (discoveries) {\n          console.log('[ContextObserver._resumeDiscoveries] found: ', discoveries);\n          discoveries.forEach(function (discovery) {\n            if (discovery.data.resources && discovery.data.resources[0] === _this._contextResourceTypes[0]) {\n              console.log('[ContextObserver._resumeDiscoveries] resuming: ', discovery);\n\n              if (discovery.data.status === 'live') {\n                // previously discovered object is now live\n                resolve([discovery.data]);\n                discovery.unsubscribeLive(_this._url);\n              } else {\n                // previously discovered object is still disconnected\n                discovery.onLive(_this._url, function () {\n                  console.log('[ContextObserver._resumeDiscoveries] disconnected Hyperty is back to live', discovery);\n                  resolve([discovery.data]);\n                  discovery.unsubscribeLive(_this._url);\n                });\n              }\n            }\n          });\n        });\n      }).catch(function (reason) {\n        reject('[ContextObserver] resumeDiscoveries failed | ', reason);\n      });\n    }\n  }, {\n    key: \"onResumeObserver\",\n    value: function onResumeObserver(callback) {\n      var _this = this;\n\n      _this._onResumeObserver = callback;\n    }\n  }, {\n    key: \"discoverUsers\",\n    value: function discoverUsers(email, domain) {\n      var _this = this;\n\n      var user = email + '@' + domain;\n\n      if (!_this._discoverUsersPromises[user]) {\n        _this._discoverUsersPromises[user] = new Promise(function (resolve, reject) {\n          _this._discovery.discoverHypertiesDO(email, ['context'], _this._contextResourceTypes, domain).then(function (hyperties) {\n            //_this.search.users([email], [domain], ['context'], ['Context_context']).then(function(a) {\n            console.log('[ContextObserver.discoverUsers] discovery result->', hyperties);\n            var discovered = [];\n            var disconnected = [];\n            hyperties.forEach(function (hyperty) {\n              _this._discoveries[hyperty.data.hypertyID] = hyperty;\n\n              if (hyperty.data.status === 'live') {\n                discovered.push(hyperty.data);\n              } else {\n                disconnected.push(hyperty);\n              }\n            });\n\n            if (discovered.length > 0) {\n              console.log('[ContextObserver.discoverUsers] returning discovered hyperties data->', discovered);\n              resolve(discovered);\n            } else if (disconnected.length > 0) {\n              console.log('[ContextObserver.discoverUsers] disconnected Hyperties ', disconnected); //resolve([]);\n\n              disconnected[0].onLive(_this._url, function () {\n                console.log('[ContextObserver.discoverUsers] disconnected Hyperty is back to live', disconnected[0]);\n                discovered.push(disconnected[0].data);\n                resolve(discovered);\n                disconnected[0].unsubscribeLive(_this._url);\n              });\n            }\n          });\n        });\n      }\n\n      return _this._discoverUsersPromises[user];\n    }\n    /**\r\n     * This function is used to start the user Context observation for a certain user Context reporter\r\n     * @param  {DiscoveredObject} hyperty       Hyperty to be observed.\r\n     * @return {<Promise> DataObjectObserver}      It returns as a Promise the UserAvailability Data Object Observer.\r\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe(hyperty) {\n      var domainSubscription = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _this = this;\n\n      if (!_this._observePromises[hyperty.hypertyID]) {\n        _this._observePromises[hyperty.hypertyID] = new Promise(function (resolve, reject) {\n          //check if we are already observing it\n          _this._users2observe.forEach(function (Context) {\n            if (Context._reporter === hyperty.hypertyID) return resolve(Context);\n          });\n\n          _this._discovery.discoverDataObjectsPerReporter(hyperty.hypertyID, ['context'], _this._contextResourceTypes, _this._domain).then(function (dataObjects) {\n            console.log('[ContextObserver.discoverAvailability] discovered context objects ', dataObjects);\n            var last = 0;\n            var url;\n            dataObjects.forEach(function (dataObject) {\n              if (dataObject.hasOwnProperty('lastModified') && dataObject.hasOwnProperty('url') && Date.parse(dataObject.lastModified) > last) {\n                last = dataObject.lastModified;\n                url = dataObject.url; //console.log('URL DATA Object', url);\n              }\n            });\n\n            if (last != 0 && url) {\n              resolve(_this._subscribeContext(hyperty, url, domainSubscription));\n            } else {\n              reject('[ContextObserver.observe] discovered DataObjecs are invalid', dataObjects);\n            }\n          });\n        });\n      }\n\n      return _this._observePromises[hyperty.hypertyID];\n    }\n  }, {\n    key: \"_subscribeContext\",\n    value: function _subscribeContext(hyperty, url) {\n      var domainSubscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var _this = this; // avoid duplicated subscriptions\n\n\n      return new Promise(function (resolve, reject) {\n        _this._users2observe.forEach(function (Context) {\n          if (Context.url === url) return resolve(Context);\n        });\n\n        var input = {\n          schema: _this._objectDescURL,\n          resource: url,\n          store: null,\n          p2p: null,\n          mutual: null,\n          domain_subscription: domainSubscription\n        };\n\n        _this._syncher.subscribe(input).then(function (Context) {\n          console.log('[ContextObserver._subscribeContext] observer object', Context); //let newUserAvailability = new UserAvailabilityController(Context, userID);\n\n          _this._users2observe.push(Context); // When Object is disconnected set user Context status as unavailable\n\n\n          Context.onDisconnected(function () {\n            console.log('[ContextObserver.onDisconnected]: ', Context);\n            Context.data.values[0].value = 'unavailable';\n            Context.sync();\n          });\n          resolve(Context);\n        });\n      });\n    }\n  }, {\n    key: \"_discoverAndSubscribeLegacyUsers\",\n    value: function _discoverAndSubscribeLegacyUsers(name) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._discovery.discoverDataObjectsPerName(name).then(function (result) {\n          console.log('[ContextObserver._discoverAndSubscribeLegacyUsers] All DataObjects Result', result);\n          result.forEach(function (obj) {\n            if (obj.status === 'live') {\n              console.log('Live obj', obj);\n\n              if (!obj.hypertyID) {\n                obj.hypertyID = obj.reporter;\n              }\n\n              _this._subscribeContext(obj.schema, obj.url).then(function (resultSubscribe) {\n                console.log('[ContextObserver._discoverAndSubscribeLegacyUsers] _subscribeContext', resultSubscribe);\n                return resolve(resultSubscribe);\n              });\n            }\n          });\n        }).catch(function (err) {\n          console.log('error ', err);\n        });\n      });\n    }\n    /**\r\n    * This function is used to stop the user Context observation for a certain user\r\n    * @param  {string} Context       the UserAvailability Data Object Observer URL to be unobserved.\r\n    */\n\n  }, {\n    key: \"unobserve\",\n    value: function unobserve(Context) {\n      var _this = this;\n\n      _this._users2observe.forEach(function (user, index) {\n        if (user.url === Context) {\n          user.unsubscribe();\n\n          _this._users2observe.splice(index, 1);\n        }\n      });\n    }\n  }]);\n\n  return ContextObserver;\n}(_utils_EventEmitter__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ContextObserver);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_EventEmitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Service Framework\n//import Syncher from '../syncher/Syncher';\n// Utils\n //import {divideURL} from '../utils/utils.js';\n// import availability from './availability.js';\n\n/**\r\n* Context Reporter;\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n*/\n\nvar ContextReporter =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ContextReporter, _EventEmitter);\n\n  function ContextReporter(hypertyURL, bus, configuration, factory, syncher) {\n    var _this2;\n\n    _classCallCheck(this, ContextReporter);\n\n    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\n    if (!bus) throw new Error('The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('The configuration is a needed parameter');\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ContextReporter).call(this, hypertyURL, bus, configuration));\n\n    var _this = _assertThisInitialized(_assertThisInitialized(_this2));\n\n    console.info('[ContextReporter] started with url: ', hypertyURL);\n    _this2.syncher = syncher ? syncher : factory.createSyncher(hypertyURL, bus, configuration); //    this.discovery = new Discovery(hypertyURL, bus);\n\n    _this2.domain = factory.divideURL(configuration.runtimeURL).domain;\n    _this2.contexts = {};\n    _this2.contextDescURL = 'hyperty-catalogue://catalogue.' + _this2.domain + '/.well-known/dataschema/Context'; //    this.heartbeat = [];\n\n    _this2.syncher.onNotification(function (event) {\n      var _this = _assertThisInitialized(_assertThisInitialized(_this2));\n\n      _this.onNotification(event);\n    }); //TODO: uncomment when used with service framework develop branch\n\n\n    _this2.syncher.onClose(function (event) {\n      console.log('[ContextReporter.onClose]');\n\n      var _this = _assertThisInitialized(_assertThisInitialized(_this2));\n\n      _this.setStatus(event.id, 'unavailable');\n\n      event.ack();\n    });\n\n    return _this2;\n  } //TODO: move to User availability Reporter or to abstract HypertyContextReporter\n\n\n  _createClass(ContextReporter, [{\n    key: \"start\",\n    value: function start() {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3.syncher.resumeReporters({\n          store: true\n        }).then(function (reporters) {\n          var reportersList = Object.keys(reporters);\n\n          if (reportersList.length > 0) {\n            console.log('[ContextReporter.start] resuming ', reporters[reportersList[0]]); // set availability to available\n\n            _this.contexts = reporters; //TODO:\n\n            reportersList.forEach(function (context) {\n              _this._onSubscription(_this.contexts[context]);\n            });\n            resolve(_this.contexts);\n          } else {\n            console.log('[ContextReporter.start] nothing to resume ', reporters);\n            resolve(false);\n          }\n        }).catch(function (reason) {\n          console.error('[ContextReporter] Resume failed | ', reason);\n        });\n      }).catch(function (reason) {\n        reject('[ContextReporter] Start failed | ', reason);\n      });\n    }\n  }, {\n    key: \"processNotification\",\n    value: function processNotification(event) {\n      var _this = this;\n\n      console.log('[ContextReporter.processNotification: ', event);\n      event.ack();\n    }\n    /**\r\n     * This function is used to create a new status object syncher\r\n     * @param  {URL.UserURL} contacts List of Users\r\n     * @return {Promise}\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(id, init, resources) {\n      var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'myContext';\n      var reporter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var reuseURL = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n      //debugger;\n      var _this = this;\n\n      var input;\n      return new Promise(function (resolve, reject) {\n        if (!reporter && !reuseURL) {\n          input = {\n            resources: resources,\n            expires: 30\n          };\n        } else if (reporter && !reuseURL) {\n          input = {\n            resources: resources,\n            expires: 30,\n            reporter: reporter\n          };\n        } else if (!reporter && reuseURL) {\n          input = {\n            resources: resources,\n            expires: 30,\n            reuseURL: reuseURL\n          };\n        } else {\n          input = {\n            resources: resources,\n            expires: 30,\n            reuseURL: reuseURL,\n            reporter: reporter\n          };\n        }\n\n        console.info('[ContextReporter.create] lets create a new User availability Context Object ', input);\n\n        _this.syncher.create(_this.contextDescURL, [], init, true, false, name, null, input).then(function (context) {\n          _this.contexts[id] = context;\n\n          _this._onSubscription(context);\n\n          resolve(context);\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"_onSubscription\",\n    value: function _onSubscription(context) {\n      context.onSubscription(function (event) {\n        console.info('[ContextReporter._onSubscription] accepting: ', event);\n        event.accept();\n      });\n    }\n  }, {\n    key: \"setContext\",\n    value: function setContext(id, newContext) {\n      var _this = this;\n\n      console.log('THIS [ContextReporter.setContext] before change :', _this.contexts[id]);\n      console.log('[ContextReporter.setContext] before change :', _this.contexts[id].data); //    _this.contexts[id].data.values[0].value = newContext;\n\n      _this.contexts[id].data.values = newContext;\n      console.debug('[ContextReporter.setContext] after change :', _this.contexts[id].data);\n\n      _this.trigger(id + '-context-update', newContext);\n    }\n  }]);\n\n  return ContextReporter;\n}(_utils_EventEmitter_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ContextReporter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./src/syncher/Syncher.js + 11 modules\nvar Syncher = __webpack_require__(13);\n\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/syncher/NotificationHandler.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* The Notitification Handler is used to handle notifications not processed by the syncher when running in a sandbox.\r\n*/\n\n\nvar NotificationHandler_NotificationHandler =\n/*#__PURE__*/\nfunction () {\n  function NotificationHandler(bus) {\n    _classCallCheck(this, NotificationHandler);\n\n    if (!bus) throw Error('[NotificationHandler Constructor] bus input is mandatory');\n    this._bus = bus;\n    this._onNotificationHandler = {};\n  }\n\n  _createClass(NotificationHandler, [{\n    key: \"onNotification\",\n    value: function onNotification(scheme, callback) {\n      this._onNotificationHandler[scheme] = callback;\n    }\n  }, {\n    key: \"onCreate\",\n    value: function onCreate(msg) {\n      var _this = this; //  let resource = msg.from.slice(0, -13); //remove \"/subscription\" from the URL\n\n\n      var resource = msg.body.hasOwnProperty('resource') ? msg.body.resource : msg.from.slice(0, -13);\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(resource);\n      var domain = dividedURL.domain;\n      var scheme = resource.split('://')[0];\n\n      var _error = function error(reason) {\n        _this._bus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 400,\n            desc: 'Bad Request: ' + reason\n          }\n        });\n      };\n\n      if (!msg.body.hasOwnProperty('source')) {\n        _error('Missing source');\n      }\n\n      if (!msg.body.hasOwnProperty('schema')) {\n        _error('Missing schema');\n      }\n\n      if (!msg.body.hasOwnProperty('value')) {\n        _error('Missing value');\n      }\n\n      if (!msg.body.hasOwnProperty('identity')) {\n        _error('Missing identity');\n      }\n\n      var event = {\n        type: msg.type,\n        from: msg.body.source,\n        url: resource,\n        domain: domain,\n        schema: msg.body.schema,\n        value: msg.body.value,\n        identity: msg.body.identity,\n        to: msg.to,\n        via: msg.body.via,\n        ack: function ack(type) {\n          var lType = 200;\n\n          if (type) {\n            lType = type;\n          } //send ack response message\n\n\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: lType\n            }\n          });\n        },\n        error: function error(reason) {\n          _error(reason);\n        }\n      };\n\n      if (_this._onNotificationHandler[scheme]) {\n        console.info('[NotificationHandler] NOTIFICATION-EVENT: ', event);\n\n        _this._onNotificationHandler[scheme](event);\n      }\n    }\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(msg) {\n      var _this = this; //remove \"/subscription\" from the URL\n\n\n      var resource = msg.body.resource;\n      var object = _this._observers[resource];\n      var unsubscribe = {\n        from: _this.owner,\n        to: _this._subURL,\n        id: msg.id,\n        type: 'unsubscribe',\n        body: {\n          resource: msg.body.resource\n        }\n      };\n\n      _this._bus.postMessage(unsubscribe);\n\n      delete _this._observers[resource];\n\n      if (object) {\n        var event = {\n          type: msg.type,\n          url: resource,\n          identity: msg.body.identity,\n          ack: function ack(type) {\n            var lType = 200;\n\n            if (type) {\n              lType = type;\n            } //TODO: any other different options for the release process, like accept but nor release local?\n\n\n            if (lType === 200) {\n              object.delete();\n            } //send ack response message\n\n\n            _this._bus.postMessage({\n              id: msg.id,\n              type: 'response',\n              from: msg.to,\n              to: msg.from,\n              body: {\n                code: lType,\n                source: _this._owner\n              }\n            });\n          }\n        };\n\n        if (_this._onNotificationHandler) {\n          log.log('NOTIFICATION-EVENT: ', event);\n\n          _this._onNotificationHandler(event);\n        }\n      } else {\n        _this._bus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 404,\n            source: _this._owner\n          }\n        });\n      }\n    }\n  }]);\n\n  return NotificationHandler;\n}();\n\n/* harmony default export */ var syncher_NotificationHandler = (NotificationHandler_NotificationHandler);\n// EXTERNAL MODULE: ./src/identity/IdentityManager.js\nvar IdentityManager = __webpack_require__(9);\n\n// EXTERNAL MODULE: ./src/discovery/Discovery.js + 1 modules\nvar Discovery = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./src/discovery/RegistrationStatus.js\nvar RegistrationStatus = __webpack_require__(5);\n\n// CONCATENATED MODULE: ./src/utils/Search.js\nfunction Search_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Search_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Search_createClass(Constructor, protoProps, staticProps) { if (protoProps) Search_defineProperties(Constructor.prototype, protoProps); if (staticProps) Search_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Search =\n/*#__PURE__*/\nfunction () {\n  function Search(discovery, identityManager) {\n    Search_classCallCheck(this, Search);\n\n    if (!discovery) throw new Error('The discovery component is a needed parameter');\n    if (!identityManager) throw new Error('The identityManager component is a needed parameter');\n\n    var _this = this;\n\n    _this.discovery = discovery;\n    _this.identityManager = identityManager;\n  }\n\n  Search_createClass(Search, [{\n    key: \"myIdentity\",\n    value: function myIdentity() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.identityManager.discoverUserRegistered().then(function (result) {\n          resolve(result);\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"hyperties\",\n    value: function hyperties(users, schemes, resources) {\n      var globalFlag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    } //TODO: reuse users or the other way around\n\n    /**\r\n     * List of usersURL to search\r\n     * @param  {array<URL.userURL>}  users List of UserUR, like this format user://<ipddomain>/<user-identifier>\r\n     * @return {Promise}\r\n     */\n\n  }, {\n    key: \"users\",\n    value: function users(usersURLs, providedDomains, schemes, resources) {\n      var globalFlag = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (!usersURLs) throw new Error('You need to provide a list of users');\n      if (!providedDomains) throw new Error('You need to provide a list of domains');\n      if (!resources) throw new Error('You need to provide a list of resources');\n      if (!schemes) throw new Error('You need to provide a list of schemes');\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        console.info('[Search] Users: ', usersURLs, usersURLs.length);\n        console.info('[Search] Domains: ', providedDomains, providedDomains.length);\n\n        if (usersURLs.length === 0) {\n          console.info('Don\\'t have users to discovery');\n          resolve(usersURLs);\n        } else {\n          var getUsers = [];\n          usersURLs.forEach(function (userURL, index) {\n            var currentDomain = providedDomains[index];\n            console.info('[Search] Search user ' + userURL + ' for provided domain:', currentDomain);\n\n            if (!globalFlag) {\n              getUsers.push(_this.discovery.discoverHyperties(userURL, schemes, resources, currentDomain));\n            } else {\n              getUsers.push(_this.discovery.discoverHypertiesPerUserProfileData(userURL, schemes, resources));\n            }\n          });\n          console.info('Requests promises: ', getUsers);\n          Promise.all(getUsers.map(function (promise) {\n            return promise.then(function (hyperty) {\n              return hyperty;\n            }, function (error) {\n              return error;\n            });\n          })).then(function (hyperties) {\n            console.info('[Search] Hyperties from new Discovery', hyperties);\n            var result = hyperties.map(function (hyperty) {\n              if (hyperty.hasOwnProperty('hypertyID')) return hyperty;\n              var recent = Object.keys(hyperty).reduceRight(function (a, b) {\n                var hypertyDate = new Date(hyperty[b].lastModified);\n                var hypertyDateP = new Date(hyperty[a].lastModified);\n\n                if (hypertyDateP.getTime() < hypertyDate.getTime()) {\n                  return b;\n                }\n\n                return a;\n              });\n              return hyperty[recent];\n            });\n            var clean = result.filter(function (hyperty) {\n              return hyperty.hasOwnProperty('hypertyID');\n            });\n            console.log('Requests result: ', clean);\n            hyperties.forEach(function (entry) {\n              if (entry !== 'No Hyperty was found') {\n                return resolve(clean);\n              }\n            });\n            reject('No Hyperty was found');\n          }).catch(function (reason) {\n            console.error(reason);\n            resolve(usersURLs);\n          });\n        }\n      });\n    }\n  }]);\n\n  return Search;\n}();\n\n/* harmony default export */ var utils_Search = (Search);\n// EXTERNAL MODULE: ./src/contextManager/ContextObserver.js\nvar ContextObserver = __webpack_require__(10);\n\n// EXTERNAL MODULE: ./src/contextManager/ContextReporter.js\nvar ContextReporter = __webpack_require__(11);\n\n// CONCATENATED MODULE: ./src/identity/UserProfile.js\nfunction UserProfile_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n* The UserProfile according to User Identity Data Model\r\n*/\nvar UserProfile = function UserProfile(username, userURL, picture, name, locale, profile) {\n  UserProfile_classCallCheck(this, UserProfile);\n\n  if (username) {\n    this.preferred_username = username;\n  }\n\n  if (picture) {\n    this.picture = picture;\n  }\n\n  if (name) {\n    this.name = name;\n  }\n\n  if (locale) {\n    this.locale = locale;\n  }\n\n  if (userURL) {\n    this.userURL = userURL;\n  }\n\n  if (profile) Object.assign(this, profile);\n};\n\n/* harmony default export */ var identity_UserProfile = (UserProfile);\n// CONCATENATED MODULE: ./src/identity/MessageBodyIdentity.js\nfunction MessageBodyIdentity_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n* The Identity info to be added to Message.Body.Identity\r\n*/\n\n\nvar MessageBodyIdentity_MessageBodyIdentity = function MessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile) {\n  MessageBodyIdentity_classCallCheck(this, MessageBodyIdentity);\n\n  if (!idp) throw new Error('IDP should be a parameter');\n  if (!username) throw new Error('username should be a parameter');\n  this.idp = idp;\n\n  if (assertion) {\n    this.assertion = assertion;\n  }\n\n  this.userProfile = new identity_UserProfile(username, userURL, picture, name, locale, profile);\n};\n\n/* harmony default export */ var identity_MessageBodyIdentity = (MessageBodyIdentity_MessageBodyIdentity);\n// CONCATENATED MODULE: ./src/chatManager/communication.js\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\nvar CommunicationStatus = {\n  OPEN: 'open',\n  PENDING: 'pending',\n  CLOSED: 'closed',\n  PAUSED: 'paused',\n  FAILED: 'failed'\n};\nvar communicationObject = {\n  startingTime: '',\n  status: '',\n  participants: {}\n};\nvar communicationChildren = {\n  \"parent\": \"communication\",\n  \"listener\": \"resources\",\n  \"type\": \"HypertyResource\"\n};\n/*\r\nexport let communicationObject = {\r\n  id: '',\r\n  name: '',\r\n  owner: '',\r\n  scheme: 'comm',\r\n  startingTime: '',\r\n  lastModified: '',\r\n  duration: '',\r\n  status: '',\r\n  participants: []\r\n};\r\n*/\n// CONCATENATED MODULE: ./src/chatManager/InvitationsHandler.js\nfunction InvitationsHandler_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction InvitationsHandler_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction InvitationsHandler_createClass(Constructor, protoProps, staticProps) { if (protoProps) InvitationsHandler_defineProperties(Constructor.prototype, protoProps); if (staticProps) InvitationsHandler_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* To manage Group Chat Invitations\r\n* @author Paulo Chainho [paulo-g-chainho@alticelabs.com]\r\n* @version 0.1.0\r\n*/\n// TODO: have an instance per ChatController\nvar InvitationsHandler =\n/*#__PURE__*/\nfunction () {\n  function InvitationsHandler(hypertyURL) {\n    InvitationsHandler_classCallCheck(this, InvitationsHandler);\n\n    if (!hypertyURL) throw Error('hypertyURL is a necessary dependecy');\n\n    var _this = this;\n\n    _this._hypertyURL = hypertyURL;\n    _this._pending = {}; // All pending invitations\n  }\n\n  InvitationsHandler_createClass(InvitationsHandler, [{\n    key: \"inviteDisconnectedHyperties\",\n\n    /**\r\n     * This function is used to handle notifications for disconnected Hy+erties.\r\n     * @param  {DiscoveredObject[]}    disconnected  array of discovered hyperties that are disconnected\r\n     * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n     */\n    value: function inviteDisconnectedHyperties(disconnected, dataObjectReporter) {\n      var _this = this;\n\n      console.log('[GroupChatManager.InvitationsHandler.inviteDisconnectedHyperties] lets invite ', disconnected);\n      disconnected.forEach(function (disconnectedHyperty) {\n        if (!_this._pending[dataObjectReporter]) {\n          _this._pending[dataObjectReporter] = {};\n        }\n\n        _this._pending[dataObjectReporter][disconnectedHyperty.data.hypertyID] = disconnectedHyperty;\n        disconnectedHyperty.onLive(_this._hypertyURL, function () {\n          console.log('[GroupChatManager.create] disconnected Hyperty is back to live', disconnectedHyperty);\n          dataObjectReporter.inviteObservers([disconnectedHyperty.data.hypertyID]);\n          disconnectedHyperty.unsubscribeLive(_this._hypertyURL);\n          delete _this._pending[dataObjectReporter][disconnectedHyperty.data.hypertyID];\n        });\n      });\n    }\n    /**\r\n     * This function is used to process sent invitations. In case invitations are not acknowledge by recipient it will be handled as a disconnected hyperty\r\n     * @param  {DiscoveredObject[]}    live  array of discovered hyperties that are or were live\r\n     * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n     */\n\n  }, {\n    key: \"processInvitations\",\n    value: function processInvitations(live, dataObjectReporter) {\n      var _this2 = this;\n\n      var _this = this;\n\n      var invitations = dataObjectReporter.invitations || [];\n      console.log('[GroupChatManager.InvitationsHandler.processInvitations] waiting for replies ', invitations, this._invitationsResponse);\n      invitations.forEach(function (invitation) {\n        invitation.then(function (result) {\n          console.log('[GroupChatManager.InvitationsHandler.processInvitations] - OK: ', result, _this2._invitationsResponse);\n\n          if (_this2._invitationsResponse) {\n            _this2._invitationsResponse(result);\n          }\n        }).catch(function (result) {\n          console.log('[GroupChatManager.InvitationsHandler.processInvitations] - NOT OK: ', result, _this2._invitationsResponse);\n\n          if (_this2._invitationsResponse) {\n            _this2._invitationsResponse(result);\n          }\n\n          _this.inviteDisconnectedHyperties([live[result.invited]], dataObjectReporter);\n        });\n      });\n    }\n  }, {\n    key: \"resumeDiscoveries\",\n    value: function resumeDiscoveries(discoveryEngine, groupChat) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var live = {};\n        var liveHyperties = [];\n        var disconnected = [];\n        var unsubscriptonPromises = [];\n        discoveryEngine.resumeDiscoveries().then(function (discoveries) {\n          console.log('[GroupChatManager.InvitationsHandler.resumeDiscoveries] found: ', discoveries);\n          discoveries.forEach(function (discovery) {\n            if (discovery.data.resources && discovery.data.resources[0] === 'chat') {\n              console.log('[GroupChatManager.InvitationsHandler.resumeDiscoveries] resuming: ', discovery);\n\n              if (discovery.data.status === 'live') {\n                // previously discovered object is now live\n                live[discovery.data.hypertyID] = discovery;\n                liveHyperties.push(discovery.data.hypertyID);\n                unsubscriptonPromises.push(discovery.unsubscribeLive(_this._hypertyURL));\n              } else {\n                // previously discovered object is still disconnected\n                disconnected.push(discovery);\n              }\n            }\n          });\n          if (disconnected.length > 0) _this.inviteDisconnectedHyperties(disconnected, groupChat);\n\n          if (Object.keys(live).length > 0) {\n            groupChat.inviteObservers(liveHyperties);\n            if (groupChat.invitations.length > 0) _this.processInvitations(live, groupChat);\n            Promise.all(unsubscriptonPromises).then(function () {\n              resolve();\n            });\n          } else resolve();\n        });\n      }).catch(function (reason) {\n        reject('[GroupChatManager.InvitationsHandler.resumeDiscoveries] failed | ', reason);\n      });\n    }\n    /**\r\n     * This function is used to remove and clean all pending invitations.\r\n     * @param  {DataObjectReporter}    DataObjectReporter   Data Object Reporter addressed by invitations\r\n     * @return {Promise} return a promise when all unsubscriptons for pending invitations are finished\r\n     */\n\n  }, {\n    key: \"cleanInvitations\",\n    value: function cleanInvitations(dataObjectReporter) {\n      var _this = this;\n\n      var chatInvitations = _this._pending[dataObjectReporter];\n      console.log('[GroupChatManager.InvitationsHandler.cleanInvitations] ', chatInvitations);\n\n      if (chatInvitations) {\n        return new Promise(function (resolve, reject) {\n          var pendingInvitations = Object.keys(chatInvitations);\n          var unsubscriptonPromises = [];\n          pendingInvitations.forEach(function (invitation) {\n            unsubscriptonPromises.push(chatInvitations[invitation].unsubscribeLive(_this._hypertyURL));\n          });\n          Promise.all(pendingInvitations).then(function () {\n            resolve();\n          });\n        });\n      } else return Promise.resolve();\n    }\n  }, {\n    key: \"invitationResponse\",\n    set: function set(callback) {\n      this._invitationsResponse = callback;\n    }\n  }]);\n\n  return InvitationsHandler;\n}();\n\n/* harmony default export */ var chatManager_InvitationsHandler = (InvitationsHandler);\n// CONCATENATED MODULE: ./src/chatManager/ChatController.js\nfunction ChatController_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ChatController_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ChatController_createClass(Constructor, protoProps, staticProps) { if (protoProps) ChatController_defineProperties(Constructor.prototype, protoProps); if (staticProps) ChatController_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* The Group Chat API is used to control a Group Chat instance.\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n//import { UserInfo } from './UserInfo';\n\n\n\nvar ChatController_ChatController =\n/*#__PURE__*/\nfunction () {\n  function ChatController(syncher, discovery, domain, search, identity, manager) {\n    ChatController_classCallCheck(this, ChatController);\n\n    if (!syncher) throw Error('Syncher is a necessary dependecy');\n    if (!discovery) throw Error('Discover is a necessary dependecy');\n    if (!domain) throw Error('Domain is a necessary dependecy');\n    if (!search) throw Error('Search is a necessary dependecy');\n\n    var _this = this;\n\n    _this._syncher = syncher;\n    _this.discovery = discovery;\n    _this.search = search;\n    _this.myIdentity = identity;\n    _this.controllerMode = 'reporter';\n    _this.child_cseq = 0;\n    _this.domain = domain;\n    _this._manager = manager;\n    var hypertyURL = syncher.owner;\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\n    _this._invitationsHandler = new chatManager_InvitationsHandler(hypertyURL);\n  }\n\n  ChatController_createClass(ChatController, [{\n    key: \"_setOnAddChildListener\",\n    value: function _setOnAddChildListener(dataObject) {\n      var _this = this;\n\n      dataObject.onAddChild(function (child) {\n        _this.child_cseq += 1;\n        console.info('[ChatManager.ChatController._setOnAddChildListener] new Child received: ', child);\n        if (_this._onMessage) _this._onMessage(child);\n      });\n    }\n  }, {\n    key: \"_onSubscribe\",\n    value: function _onSubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      event.accept();\n      console.log('[ChatManager.ChatController.onSubscribe] event', event, dataObjectReporter.url);\n      console.log('[ChatManager.ChatController.onSubscribe] New user has subscribe this object: ', dataObjectReporter.data, event.identity);\n      var identity = JSON.parse(JSON.stringify(event.identity));\n\n      if (identity.hasOwnProperty('assertion')) {\n        delete identity.assertion;\n      }\n\n      var userInfo = {\n        hypertyURL: event.url,\n        domain: event.domain,\n        identity: identity\n      };\n      var userURL = event.identity.userProfile.guid;\n      console.log('[ChatManager.ChatController.onSubscribe]  new participant', userInfo);\n\n      if (event.identity.legacy) {\n        userInfo.legacy = event.identity.legacy;\n      }\n\n      dataObjectReporter.data.participants[userURL] = userInfo;\n      console.log('[ChatManager.ChatController.onSubscribe] communicationObject OBJ chatcontroller', dataObjectReporter.data.participants);\n      console.log('[ChatManager.ChatController.onSubscribe - onSubscription] ', userInfo); // console.log('[ChatManager.ChatController.onSubscribe - this._onUserAdded] ', this._onUserAdded);\n\n      if (this._onUserAdded) this._onUserAdded(userInfo);\n    }\n  }, {\n    key: \"_onUnsubscribe\",\n    value: function _onUnsubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      console.log('[ChatManager.ChatController.onUnsubscribe] event', event, dataObjectReporter.url);\n      var participant = event.identity.userProfile;\n      console.log('[ChatManager.ChatController.onUnsubscribe]  participant left', participant);\n\n      if (event.identity.legacy) {\n        participant.legacy = event.identity.legacy;\n      }\n\n      delete dataObjectReporter.data.participants[participant.userURL];\n      console.log('[ChatManager.ChatController.onUnsubscribe - this._onUserRemoved] ', this.onUserRemoved);\n      if (this._onUserRemoved) this._onUserRemoved(participant);\n    }\n    /**\r\n     * This function is used to send a file.\r\n     * @param  {string}     file                        Is the file to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(file) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        var identity = {\n          userProfile: _this.myIdentity\n        };\n        dataObject.addHypertyResource('resources', 'file', file, identity).then(function (resourceFile) {\n          var identity = {\n            userProfile: _this.myIdentity\n          };\n          var fileSentEvt = {\n            value: resourceFile,\n            identity: identity,\n            resource: resourceFile\n          };\n          var reporterStatus = new RegistrationStatus[\"a\" /* default */](dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus); // recursive function to sync with chat reporter\n\n          var share2Reporter = function share2Reporter(file, subscriber, evt, status) {\n            var statusOfReporter = status;\n            file.sharingStatus.then(resolve(evt)).catch(function (result) {\n              console.log('[ChatManager.ChatController.sendFile] share failed: ', result);\n              statusOfReporter.onLive(subscriber, function () {\n                statusOfReporter.unsubscribeLive(subscriber);\n                file.share(true);\n                share2Reporter(file, subscriber, evt, statusOfReporter);\n              }); //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\n            });\n          };\n\n          share2Reporter(resourceFile, _this._manager._hypertyURL, fileSentEvt, reporterStatus);\n        });\n      }).catch(function (reason) {\n        console.error('Reason:', reason);\n        reject(reason);\n      });\n    }\n    /**\r\n     * This function is used to send a chat message.\r\n     * @param  {string}     message                        Is the ChatMessage to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(message, identity) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        //      let _dataObjectChild;\n        _this.child_cseq += 1;\n        var msg = {\n          /*        url: dataObject.data.url,\r\n                  cseq: _this.child_cseq,\r\n                  reporter: dataObject.data.reporter,\r\n                  schema: dataObject.data.schema,\r\n                  name: dataObject.data.name,\r\n                  created : new Date().toJSON(),*/\n          type: 'chat',\n          content: message\n        };\n        var sender = identity ? identity : {\n          userProfile: _this.myIdentity\n        }; // TODO: change chatmessages to resource - chat, file\n        // TODO: change message to hypertyResource - https://github.com/reTHINK-project/dev-service-framework/tree/develop/docs/datamodel/data-objects/hyperty-resource\n        // TODO: handle with multiple resources - if the \"message\" will be different for each type of resources\n\n        dataObject.addChild(msg, sender).then(function (dataObjectChild) {\n          console.log('[ChatManager.ChatController][addChild - Chat Message]: ', dataObjectChild); //resolve(dataObjectChild);\n          //TODO: move to separate function\n\n          var msg = {\n            childId: dataObjectChild._childId,\n            from: dataObjectChild._owner,\n            value: dataObjectChild.data,\n            type: 'create',\n            identity: sender\n          };\n          var reporterStatus = new RegistrationStatus[\"a\" /* default */](dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus); // recursive function to sync with chat reporter\n\n          var share2Reporter = function share2Reporter(child, subscriber, msg, status) {\n            var statusOfReporter = status;\n            child.sharingStatus.then(resolve(msg)).catch(function (result) {\n              statusOfReporter.onLive(subscriber, function () {\n                statusOfReporter.unsubscribeLive(subscriber);\n                child.share(true);\n                share2Reporter(child, subscriber, msg, statusOfReporter);\n              }); //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\n            });\n          };\n\n          share2Reporter(dataObjectChild, _this._manager._hypertyURL, msg, reporterStatus);\n        }).catch(function (reason) {\n          console.error('Reason:', reason);\n          reject(reason);\n        });\n      });\n    }\n    /**\r\n     * [onChange description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      var _this = this;\n\n      _this._onChange = callback;\n    }\n    /**\r\n     * This function is used to receive new messages.\r\n     * @param  {Function} callback Function to handle with new messages\r\n     * @return {Communication.ChatMessage} m\r\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      var _this = this;\n\n      _this._onMessage = callback;\n    }\n    /**\r\n     * [onUserAdded description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserAdded\",\n    value: function onUserAdded(callback) {\n      var _this = this;\n\n      _this._onUserAdded = callback;\n    }\n    /**\r\n     * When the an user was removed\r\n     * @param  {Function} callback Function handle with the removed user\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserRemoved\",\n    value: function onUserRemoved(callback) {\n      var _this = this;\n\n      _this._onUserRemoved = callback;\n    }\n    /**\r\n     * This function is used to receive requests to close the Group Chat instance.\r\n     * @return {DeleteEvent} The DeleteEvent fired by the Syncher when the Chat is closed.\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      var _this = this;\n\n      _this._onClose = callback;\n    }\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      var _this = this;\n\n      _this._onResponse = callback;\n    }\n    /**\r\n     * This function is used to add / invite new user on an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n  }, {\n    key: \"addUser\",\n    value: function addUser(users) {\n      var _this = this;\n\n      var haveEmptyElements = function haveEmptyElements(element) {\n        console.log('Element:', element.length);\n        return element.length !== 0;\n      };\n\n      var notFoundElements = function notFoundElements(element) {\n        console.log('user not found: ', element);\n        return !(element instanceof String);\n      };\n\n      return new Promise(function (resolve, reject) {\n        if (users.filter(haveEmptyElements).length === 0) {\n          return reject('Don\\'t have users to invite');\n        }\n\n        console.info('[ChatManager.ChatController.addUsers ]: ', users);\n        /*_this.search.users(users, domains, ['comm'], ['chat'])\r\n        .then((hypertiesIDs) => {\r\n          if (hypertiesIDs.filter(notFoundElements).length === 0) {\r\n          throw 'User(s) not found';\r\n        }\r\n          let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n          return hyperty.hypertyID;\r\n        });*/\n\n        var usersDiscovery = [];\n        var disconnected = [];\n        var live = {};\n        users.forEach(function (user) {\n          var userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\n\n          usersDiscovery.push(userDiscoveryPromise);\n        });\n        Promise.all(usersDiscovery).then(function (userDiscoveryResults) {\n          console.log('[ChatManager.ChatController.addUsers] Users Discovery Results->', userDiscoveryResults);\n          var selectedHyperties = [];\n          userDiscoveryResults.forEach(function (userDiscoveryResult) {\n            userDiscoveryResult.forEach(function (discovered) {\n              if (discovered.data.status === 'live') {\n                selectedHyperties.push(discovered.data.hypertyID);\n                live[discovered.data.hypertyID] = discovered;\n              } else if (disconnected.length < 5) disconnected.push(discovered);\n            });\n          });\n          console.info('[ChatManager.ChatController]------------------------ Syncher Create ---------------------- \\n');\n          console.info('[ChatManager.ChatController]Selected Hyperties: !!! ', selectedHyperties);\n          console.info(\"Have \".concat(selectedHyperties.length, \" users;\")); //        console.info('[ChatManager] HypertiesIDs ', hypertiesIDs);\n\n          var dataObject = _this.controllerMode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n          if (disconnected.length > 0) _this._invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObject);\n          dataObject.inviteObservers(selectedHyperties);\n          if (dataObject.invitations.length > 0) _this._invitationsHandler.processInvitations(live, dataObject);\n          return;\n        }).then(function () {\n          console.info('[ChatManager.ChatController]Are invited with success ' + users.length + ' users;');\n          resolve(true);\n        }).catch(function (reason) {\n          console.error('An error occurred when trying to invite users;\\n', reason);\n          reject(reason);\n        });\n      });\n    }\n    /**\r\n     * This function is used to request the Reporter to add / invite new user on an existing Group Chat instance.\r\n     * Only Observers are allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n  }, {\n    key: \"addUserReq\",\n    value: function addUserReq(users) {\n      var _this = this; //check is Observer and invoke observer.execute() with new promise\n\n\n      var haveEmptyElements = function haveEmptyElements(element) {\n        console.log('Element:', element.length);\n        return element.length !== 0;\n      };\n\n      return new Promise(function (resolve, reject) {\n        if (users.filter(haveEmptyElements).length === 0) {\n          return reject('[ChatManager.ChatController.addUserReq] Don\\'t have users to add');\n        }\n\n        if (!_this.controllerMode === 'observer') {\n          return reject('[ChatManager.ChatController.addUserReq] only allowed to Chat Observer');\n\n          var addUser = _this.addUser(users);\n\n          if (_this._dataObjectObserver) {\n            addUser = _this._dataObjectObserver.execute('addUser', users);\n          }\n\n          addUser.then(function () {\n            console.info('[ChatManager.ChatController.addUserReq] Request accepted by Reporter ');\n            resolve(true);\n          }).catch(function (reason) {\n            console.error('[ChatManager.ChatController.addUserReq] Request rejected by Reporter;\\n', reason);\n            reject(reason);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"onInvitationResponse\",\n    value: function onInvitationResponse(callback) {\n      var _this = this;\n\n      _this._onInvitationResponse = callback;\n      _this._invitationsHandler.invitationResponse = callback;\n    }\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @return {<Promise> boolean} Promise with the status\r\n     */\n\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param  {URL.UserURL} user       User to be removed from the Group Chat that is identified with reTHINK User URL.\r\n     * @return {<Promise> boolean}      It returns as a Promise true if successfully removed or false otherwise.\r\n     */\n\n  }, {\n    key: \"removeUser\",\n    value: function removeUser(user) {\n      // TODO: implement the removeUser;\n      console.log('[ChatManager.ChatController]Not yet implemented: ', user);\n    }\n    /**\r\n     * This function is used to close an existing Group Chat instance.\r\n     * Only available to Chat Group Reporters i.e. the Hyperty instance that created the Group Chat.\r\n     * @return {<Promise>Boolean} It returns as a Promise true if successfully closed or false otherwise.\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var del = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      // TODO: the dataObjectReporter.delete should be a Promise;\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this.controllerMode === 'reporter') {\n          // reporter\n          _this._invitationsHandler.cleanInvitations(_this.dataObjectReporter).then(function () {\n            if (!del) {\n              _this._manager.communicationObject.status = 'closed';\n              resolve(true);\n            } else {\n              try {\n                delete _this._manager._reportersControllers[_this.dataObjectReporter.url];\n\n                _this.dataObjectReporter.delete();\n\n                resolve(true);\n                if (_this._onClose) _this._onClose({\n                  code: 200,\n                  desc: 'deleted',\n                  url: _this.dataObjectReporter.url\n                });\n              } catch (e) {\n                console.error(e);\n                reject(false);\n              }\n            }\n          });\n        } else {\n          // observer\n          if (del) {\n            try {\n              delete _this._manager._observersControllers[_this.dataObjectObserver.url];\n\n              _this.dataObjectObserver.unsubscribe();\n\n              resolve(true);\n            } catch (e) {\n              console.error(e);\n              reject(false);\n            }\n          } else {\n            // TODO: send message \n            resolve(true);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"invitationsHandler\",\n    get: function get() {\n      return this._invitationsHandler;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter.url : this.dataObjectObserver.url;\n    }\n  }, {\n    key: \"dataObjectReporter\",\n    set: function set(dataObjectReporter) {\n      if (!dataObjectReporter) throw new Error('[ChatController] The data object reporter is necessary parameter ');\n\n      var _this = this;\n\n      _this.controllerMode = 'reporter'; // Handler to process received files\n      // dataObjectReporter.onResponse(function(event) {\n      //   console.log('[DataObjectReporter - onResponse]', event);\n      //   if (_this._onInvitationResponse) {\n      //     _this._onInvitationResponse(event);\n      //   }\n      //\n      // });\n\n      dataObjectReporter.onSubscription(function (event) {\n        switch (event.type) {\n          case 'subscribe':\n            _this._onSubscribe(event);\n\n            break;\n\n          case 'unsubscribe':\n            _this._onUnsubscribe(event);\n\n            break;\n        }\n      });\n\n      _this._setOnAddChildListener(dataObjectReporter);\n\n      dataObjectReporter.onRead(function (event) {\n        event.accept();\n      });\n      dataObjectReporter.onExecute(function (event) {\n        switch (event.method) {\n          case 'addUser':\n            _this.addUser(event.params[0]).then(function () {\n              event.accept();\n            }).catch(function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          case 'removeUser':\n            _this.removeUser(event.params).then(function () {\n              event.accept();\n            }).catch(function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          default:\n            event.reject('[ChatController.onExecute] Chat method execution not accepted by Reporter');\n            break;\n        }\n      });\n      _this._dataObjectReporter = dataObjectReporter;\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectReporter;\n    }\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this._dataObjectReporter._childrenObjects : this._dataObjectObserver._childrenObjects;\n    }\n  }, {\n    key: \"dataObjectObserver\",\n    set: function set(dataObjectObserver) {\n      var _this = this;\n\n      _this.controllerMode = 'observer';\n      _this._dataObjectObserver = dataObjectObserver;\n      dataObjectObserver.onChange('*', function (event) {\n        console.info('[ChatManager.ChatController]Observer - onChange', event);\n\n        if (event.field.includes('participants')) {\n          switch (event.cType) {\n            case 'add':\n              if (_this._onUserAdded) _this._onUserAdded(event);\n              break;\n\n            case 'remove':\n              if (_this._onUserRemoved) _this._onUserRemoved(event);\n              break;\n          }\n        }\n\n        if (_this._onChange) _this._onChange(event);\n      });\n\n      _this._setOnAddChildListener(dataObjectObserver); // let childrens = dataObjectObserver.childrens;\n      // Object.keys(childrens).forEach((child) => {\n      //   if (_this._onMessage) _this._onMessage({\n      //     childId: child,\n      //     identity: childrens[child].identity,\n      //     value: childrens[child].data\n      //   });\n      // })\n\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectObserver;\n    }\n  }, {\n    key: \"dataObject\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter : this.dataObjectObserver;\n    }\n  }, {\n    key: \"closeEvent\",\n    set: function set(event) {\n      var _this = this;\n\n      _this._closeEvent = event;\n      if (_this._onClose) _this._onClose(event);\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._closeEvent;\n    }\n  }]);\n\n  return ChatController;\n}();\n\n/* harmony default export */ var chatManager_ChatController = (ChatController_ChatController);\n// CONCATENATED MODULE: ./src/chatManager/UserInfo.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction UserInfo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\nvar UserInfo_UserInfo = function UserInfo(hypertyURL, domain, identity) {\n  var _ref;\n\n  UserInfo_classCallCheck(this, UserInfo);\n\n  var completeIdentity = Object(utils[\"i\" /* deepClone */])(identity);\n\n  if (!identity.hasOwnProperty('userProfile')) {\n    completeIdentity['userProfile'] = identity;\n  }\n\n  return _ref = {\n    hypertyURL: hypertyURL,\n    domain: domain\n  }, _defineProperty(_ref, \"domain\", domain), _defineProperty(_ref, \"identity\", completeIdentity), _ref;\n};\n// CONCATENATED MODULE: ./src/chatManager/ChatManager.js\nfunction ChatManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ChatManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ChatManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) ChatManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) ChatManager_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Service Framework\n//import IdentityManager from '../identityManager/IdentityManager';\n//import RegistrationStatus from '../discovery/RegistrationStatus';\n//import Discovery from '../discovery/Discovery';\n//import Syncher from '../syncher/Syncher';\n// Utils\n//import {divideURL} from '../utils/utils';\n//import Search from '../utils/Search';\n// Internals\n\n\n\n/**\r\n* Hyperty Group Chat Manager API (HypertyChat)\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n\nvar ChatManager_ChatManager =\n/*#__PURE__*/\nfunction () {\n  function ChatManager(myUrl, bus, configuration, syncher, factory) {\n    ChatManager_classCallCheck(this, ChatManager);\n\n    if (!myUrl) throw new Error('[ChatManager.constructor] The myUrl is a needed parameter');\n    if (!bus) throw new Error('[ChatManager.constructor] The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('[ChatManager.constructor] The configuration is a needed parameter');\n\n    var _this = this;\n\n    if (!syncher) {\n      syncher = factory.createSyncher(myUrl, bus, configuration);\n    }\n\n    _this._runtimeURL = configuration.runtimeURL;\n    var domain = factory.divideURL(_this._runtimeURL).domain;\n    var discovery = factory.createDiscovery(myUrl, configuration.runtimeURL, bus);\n    var identityManager = factory.createIdentityManager(myUrl, configuration.runtimeURL, bus);\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\n    _this._reportersControllers = {};\n    _this._observersControllers = {};\n    _this._myUrl = myUrl;\n    _this._bus = bus;\n    _this._syncher = syncher;\n    _this._domain = domain;\n    _this.discovery = discovery;\n    _this.identityManager = identityManager;\n    _this.currentIdentity;\n    _this.search = factory.createSearch(discovery, identityManager);\n    _this.communicationObject = communicationObject;\n    _this.communicationChildren = communicationChildren;\n    console.log('[ChatManager] Discover ', discovery);\n    console.log('[ChatManager] Identity Manager ', identityManager);\n  }\n\n  ChatManager_createClass(ChatManager, [{\n    key: \"processNotification\",\n    value: function processNotification(event) {\n      var _this = this;\n\n      console.log('[ChatManager.processNotification: ', event);\n\n      if (event.type === 'create') {\n        // TODO: replace the 100 for Message.Response\n        // event.ack(200);\n        if (_this._onInvitation) {\n          _this._onInvitation(event);\n        }\n      }\n\n      if (event.type === 'delete') {\n        // TODO: replace the 200 for Message.Response\n        event.ack(200);\n        _this._observersControllers[event.url].closeEvent = event;\n        delete _this._observersControllers[event.url];\n        _this._observersControllers.closeEvent = event;\n        _this.communicationObject = communicationObject;\n\n        for (var url in this._reportersControllers) {\n          this._reportersControllers[url].close(event);\n        }\n\n        for (var _url in this._observersControllers) {\n          this._observersControllers[_url].close(event);\n        }\n      }\n    }\n  }, {\n    key: \"myIdentity\",\n    value: function myIdentity(identity) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        console.info('[ChatManager.myIdentity]');\n        if (identity) return resolve(identity);\n\n        if (_this._myUrl.includes('hyperty://')) {\n          _this.identityManager.discoverUserRegistered().then(function (identity) {\n            resolve(identity);\n          }).catch(function (reason) {\n            reject(reason);\n          });\n        } else {\n          _this.identityManager.discoverIdentityPerIdP().then(function (identity) {\n            resolve(identity);\n          }).catch(function (reason) {\n            reject(reason);\n          });\n        }\n      });\n    }\n    /**\r\n     * This function is used to create a new Group Chat providing the name and the identifiers of users to be invited.\r\n     * @param  {string}                     name  Is a string to identify the Group Chat\r\n     * @param  {array<URL.userURL>}         users Array of users to be invited to join the Group Chat. Users are identified with reTHINK User URL, like this format user://<ipddomain>/<user-identifier>\r\n     * @return {<Promise>ChatController}    A ChatController object as a Promise.\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name, users) {\n      var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _this = this;\n\n      var syncher = _this._syncher;\n      return new Promise(function (resolve, reject) {\n        _this.communicationObject = communicationObject;\n        _this.communicationObject.cseq = 1;\n        _this.communicationObject.startingTime = new Date().toJSON();\n        _this.communicationObject.status = CommunicationStatus.OPEN;\n        var myIdentity;\n\n        _this.myIdentity().then(function (identity) {\n          myIdentity = identity;\n          console.log('[ChatManager.create ] My Identity', identity); // let url = _this.communicationObject.reporter;\n\n          var userInfo = new UserInfo_UserInfo(_this._myUrl, _this._domain, identity); // Add my identity\n\n          _this.communicationObject.participants[identity.guid] = userInfo;\n          console.log('[ChatManager.create ] participants: ', _this.communicationObject.participants);\n          console.log('[ChatManager.create ] communicationObject', _this.communicationObject);\n          console.info('[ChatManager.create] searching ' + users); //let usersSearch = _this.search.users(users, domains, ['comm'], ['chat']);\n\n          var usersDiscovery = [];\n          var disconnected = [];\n          var live = {};\n          users.forEach(function (user) {\n            var userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\n\n            usersDiscovery.push(userDiscoveryPromise); //if (user.user.includes('://')) mutual = false;\n          });\n          Promise.all(usersDiscovery).then(function (userDiscoveryResults) {\n            console.log('[ChatManager.create] Users Discovery Results->', userDiscoveryResults);\n            var selectedHyperties = [];\n            userDiscoveryResults.forEach(function (userDiscoveryResult) {\n              userDiscoveryResult.forEach(function (discovered) {\n                if (discovered.data.status === 'live') {\n                  selectedHyperties.push(discovered.data.hypertyID);\n                  live[discovered.data.hypertyID] = discovered;\n                } else {\n                  // To control the number of subscriptions to disconnected devices\n                  if (disconnected.length < 5) {\n                    disconnected.push(discovered);\n                  }\n                }\n              });\n            });\n            /*        return usersSearch;\r\n            }).then((hypertiesIDs) => {\r\n            let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n            return hyperty.hypertyID;\r\n            }); */\n\n            console.info('[ChatManager] ---------------------- Syncher Create ---------------------- \\n');\n            console.info('[ChatManager] Selected Hyperties: !!! ', selectedHyperties);\n            console.info(\"Have \".concat(selectedHyperties.length, \" users;\"));\n            var mutual = extra.mutual ? extra.mutual : true;\n            var input = Object.assign({\n              resources: ['chat'],\n              mutual: mutual\n            }, extra);\n            delete input.name;\n            if (_this.offline) input.offline = _this.offline;\n            console.info('[ChatManager] input data:', input);\n            return syncher.create(_this._objectDescURL, selectedHyperties, _this.communicationObject, true, false, name, {}, input);\n          }).then(function (dataObjectReporter) {\n            console.info('[ChatManager] 3. Return Create Data Object Reporter', dataObjectReporter);\n            var chatController = new chatManager_ChatController(syncher, _this.discovery, _this._domain, _this.search, myIdentity, _this);\n            chatController.dataObjectReporter = dataObjectReporter;\n            _this._reportersControllers[dataObjectReporter.url] = chatController;\n            console.log('[ChatManager] chatController invitationsHandler: ', chatController.invitationsHandler); // process invitations to handle not received invitations\n\n            if (dataObjectReporter.invitations.length > 0) {\n              chatController.invitationsHandler.processInvitations(live, dataObjectReporter);\n            } // If any invited User is disconnected let's wait until it is connected again\n\n\n            if (disconnected.length > 0) chatController.invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObjectReporter);\n            resolve(chatController);\n          }).catch(function (reason) {\n            reject(reason);\n          });\n        }).catch(function (reason) {\n          console.log('[ChatManager.create] MyIdentity Error:', reason);\n          return reject(reason);\n        });\n      });\n    }\n    /**\r\n     * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n     * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n     */\n\n  }, {\n    key: \"onInvitation\",\n    value: function onInvitation(callback) {\n      var _this = this;\n\n      _this._onInvitation = callback;\n    }\n    /**\r\n     * This function is used to join a Group Chat.\r\n     * @param  {URL.CommunicationURL} invitationURL  The Communication URL of the Group Chat to join that is provided in the invitation event\r\n     * @return {<Promise>ChatController}             It returns the ChatController object as a Promise\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(invitationURL) {\n      var mutual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var identity = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var syncher = _this._syncher;\n        var myIdentity;\n        console.info('[ChatManager] ------------------------ Syncher subscribe ---------------------- \\n');\n        console.info('invitationURL', invitationURL);\n\n        _this.myIdentity(identity).then(function (identity) {\n          myIdentity = identity;\n          var input = {\n            schema: _this._objectDescURL,\n            resource: invitationURL,\n            store: true,\n            p2p: false,\n            mutual: mutual,\n            domain_subscription: true,\n            identity: identity\n          };\n          if (_this.offline) input.offline = _this.offline;\n          return syncher.subscribe(input);\n        }).then(function (dataObjectObserver) {\n          console.info('Data Object Observer: ', dataObjectObserver);\n          var chatController = new chatManager_ChatController(syncher, _this.discovery, _this._domain, _this.search, myIdentity, _this);\n          resolve(chatController);\n          chatController.dataObjectObserver = dataObjectObserver;\n          _this._observersControllers[dataObjectObserver.url] = chatController;\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"offline\",\n    set: function set(offline) {\n      this._offline = offline;\n    },\n    get: function get() {\n      return this._offline ? this._offline : false;\n    }\n  }]);\n\n  return ChatManager;\n}();\n\n/* harmony default export */ var chatManager_ChatManager = (ChatManager_ChatManager);\n// CONCATENATED MODULE: ./src/chatManager/Chat.js\nfunction Chat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Chat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Chat_createClass(Constructor, protoProps, staticProps) { if (protoProps) Chat_defineProperties(Constructor.prototype, protoProps); if (staticProps) Chat_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n* The Group Chat API is used to control a Group Chat instance.\r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n//import { UserInfo } from './UserInfo';\n//import RegistrationStatus from '../discovery/RegistrationStatus';\n//import InvitationsHandler from './InvitationsHandler';\nvar Chat =\n/*#__PURE__*/\nfunction () {\n  function Chat(syncher, domain, identity, manager) {\n    Chat_classCallCheck(this, Chat);\n\n    if (!syncher) throw Error('Syncher is a necessary dependecy'); //    if (!discovery) throw Error('Discover is a necessary dependecy');\n\n    if (!domain) throw Error('Domain is a necessary dependecy'); //    if (!search) throw Error('Search is a necessary dependecy');\n\n    var _this = this;\n\n    _this._syncher = syncher; //    _this.discovery = discovery;\n    //    _this.search = search;\n\n    _this.myIdentity = identity;\n    _this.controllerMode = 'reporter';\n    _this.child_cseq = 0;\n    _this.domain = domain;\n    _this._manager = manager;\n    var hypertyURL = syncher.owner;\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication'; //    _this._invitationsHandler = new InvitationsHandler(hypertyURL);\n  }\n  /*  get invitationsHandler() {\r\n      return this._invitationsHandler;\r\n    }*/\n\n\n  Chat_createClass(Chat, [{\n    key: \"_setOnAddChildListener\",\n    value: function _setOnAddChildListener(dataObject) {\n      var _this = this;\n\n      dataObject.onAddChild(function (child) {\n        _this.child_cseq += 1;\n        console.info('[ChatManager.ChatController._setOnAddChildListener] new Child received: ', child);\n        if (_this._onMessage) _this._onMessage(child);\n      });\n    }\n  }, {\n    key: \"_onSubscribe\",\n    value: function _onSubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      event.accept();\n      console.log('[ChatManager.ChatController.onSubscribe] event', event, dataObjectReporter.url);\n      console.log('[ChatManager.ChatController.onSubscribe] New user has subscribe this object: ', dataObjectReporter.data, event.identity);\n      var identity = JSON.parse(JSON.stringify(event.identity));\n\n      if (identity.hasOwnProperty('assertion')) {\n        delete identity.assertion;\n      }\n\n      var userInfo = {\n        hypertyURL: event.url,\n        domain: event.domain,\n        identity: identity\n      };\n      var userURL = event.identity.userProfile.guid;\n      console.log('[ChatManager.ChatController.onSubscribe]  new participant', userInfo);\n\n      if (event.identity.legacy) {\n        userInfo.legacy = event.identity.legacy;\n      }\n\n      dataObjectReporter.data.participants[userURL] = userInfo;\n      console.log('[ChatManager.ChatController.onSubscribe] communicationObject OBJ chatcontroller', dataObjectReporter.data.participants);\n      console.log('[ChatManager.ChatController.onSubscribe - onSubscription] ', userInfo); // console.log('[ChatManager.ChatController.onSubscribe - this._onUserAdded] ', this._onUserAdded);\n\n      if (this._onUserAdded) this._onUserAdded(userInfo);\n    }\n  }, {\n    key: \"_onUnsubscribe\",\n    value: function _onUnsubscribe(event) {\n      var dataObjectReporter = this._dataObjectReporter;\n      console.log('[ChatManager.ChatController.onUnsubscribe] event', event, dataObjectReporter.url);\n      var participant = event.identity.userProfile;\n      console.log('[ChatManager.ChatController.onUnsubscribe]  participant left', participant);\n\n      if (event.identity.legacy) {\n        participant.legacy = event.identity.legacy;\n      }\n\n      delete dataObjectReporter.data.participants[participant.userURL];\n      console.log('[ChatManager.ChatController.onUnsubscribe - this._onUserRemoved] ', this.onUserRemoved);\n      if (this._onUserRemoved) this._onUserRemoved(participant);\n    }\n    /**\r\n     * This function is used to send a file.\r\n     * @param  {string}     file                        Is the file to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(file) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        var identity = {\n          userProfile: _this.myIdentity\n        };\n        dataObject.addHypertyResource('resources', 'file', file, identity).then(function (resourceFile) {\n          var identity = {\n            userProfile: _this.myIdentity\n          };\n          var fileSentEvt = {\n            value: resourceFile,\n            identity: identity,\n            resource: resourceFile\n          };\n          /*          let reporterStatus = new RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n          \r\n                    // recursive function to sync with chat reporter\r\n          \r\n                      let share2Reporter = function(file, subscriber, evt, status) {\r\n                        let statusOfReporter = status;\r\n                        file.sharingStatus.then(resolve(evt)).catch((result)=>{\r\n                          console.log('[ChatManager.ChatController.sendFile] share failed: ', result);\r\n          \r\n                          statusOfReporter.onLive( subscriber, () => {\r\n                          statusOfReporter.unsubscribeLive(subscriber);\r\n                          file.share(true);\r\n                          share2Reporter(file, subscriber, evt, statusOfReporter);\r\n                          });\r\n                            //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n                        });\r\n                      }*/\n          //            resourceFile.share(true).then(()=>{\n\n          resolve(fileSentEvt); //            });\n          //            share2Reporter(resourceFile, _this._manager._hypertyURL, fileSentEvt, reporterStatus);\n        });\n      }).catch(function (reason) {\n        console.error('Reason:', reason);\n        reject(reason);\n      });\n    }\n    /**\r\n     * This function is used to send a chat message.\r\n     * @param  {string}     message                        Is the ChatMessage to be sent.\r\n     * @return {Promise<Communication.ChatMessage>}        It returns the ChatMessage child object created by the Syncher as a Promise.\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(message, identity) {\n      var _this = this;\n\n      var mode = _this.controllerMode;\n      var dataObject = mode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\n      return new Promise(function (resolve, reject) {\n        //      let _dataObjectChild;\n        _this.child_cseq += 1;\n        var msg = {\n          /*        url: dataObject.data.url,\r\n                  cseq: _this.child_cseq,\r\n                  reporter: dataObject.data.reporter,\r\n                  schema: dataObject.data.schema,\r\n                  name: dataObject.data.name,\r\n                  created : new Date().toJSON(),*/\n          type: 'chat',\n          content: message\n        };\n        var sender = identity ? identity : {\n          userProfile: _this.myIdentity\n        }; // TODO: change chatmessages to resource - chat, file\n        // TODO: change message to hypertyResource - https://github.com/reTHINK-project/dev-service-framework/tree/develop/docs/datamodel/data-objects/hyperty-resource\n        // TODO: handle with multiple resources - if the \"message\" will be different for each type of resources\n\n        dataObject.addChild(msg, sender).then(function (dataObjectChild) {\n          console.log('[ChatManager.ChatController][addChild - Chat Message]: ', dataObjectChild); //resolve(dataObjectChild);\n          //TODO: move to separate function\n\n          var msg = {\n            childId: dataObjectChild._childId,\n            from: dataObjectChild._owner,\n            value: dataObjectChild.data,\n            type: 'create',\n            identity: sender\n          };\n          /*        let reporterStatus = new RegistrationStatus(dataObject.url, _this._manager._runtimeURL, _this._manager._hypertyURL, _this._manager._bus );\r\n          \r\n                  // recursive function to sync with chat reporter\r\n          \r\n                    let share2Reporter = function(child, subscriber, msg, status) {\r\n                      let statusOfReporter = status;\r\n                      child.sharingStatus.then(resolve(msg)).catch((result)=>{\r\n          \r\n                          statusOfReporter.onLive( subscriber, () => {\r\n                            statusOfReporter.unsubscribeLive(subscriber);\r\n                            child.share(true);\r\n                            share2Reporter(child, subscriber, msg, statusOfReporter);\r\n                          });\r\n                          //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\r\n                      });\r\n                    }*/\n          //          share2Reporter(dataObjectChild, _this._manager._hypertyURL, msg, reporterStatus);\n          //        dataObjectChild.share(true);\n\n          resolve(msg);\n        }).catch(function (reason) {\n          console.error('Reason:', reason);\n          reject(reason);\n        });\n      });\n    }\n    /**\r\n     * [onChange description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      var _this = this;\n\n      _this._onChange = callback;\n    }\n    /**\r\n     * This function is used to receive new messages.\r\n     * @param  {Function} callback Function to handle with new messages\r\n     * @return {Communication.ChatMessage} m\r\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      var _this = this;\n\n      _this._onMessage = callback;\n    }\n    /**\r\n     * [onUserAdded description]\r\n     * @param  {Function} callback [description]\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserAdded\",\n    value: function onUserAdded(callback) {\n      var _this = this;\n\n      _this._onUserAdded = callback;\n    }\n    /**\r\n     * When the an user was removed\r\n     * @param  {Function} callback Function handle with the removed user\r\n     * @return {[type]}            [description]\r\n     */\n\n  }, {\n    key: \"onUserRemoved\",\n    value: function onUserRemoved(callback) {\n      var _this = this;\n\n      _this._onUserRemoved = callback;\n    }\n    /**\r\n     * This function is used to receive requests to close the Group Chat instance.\r\n     * @return {DeleteEvent} The DeleteEvent fired by the Syncher when the Chat is closed.\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      var _this = this;\n\n      _this._onClose = callback;\n    }\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      var _this = this;\n\n      _this._onResponse = callback;\n    }\n    /**\r\n     * This function is used to add / invite new user on an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n    /*  addUser(users) {\r\n    \r\n        let _this = this;\r\n    \r\n        let haveEmptyElements = (element) => {\r\n          console.log('Element:', element.length);\r\n          return element.length !== 0;\r\n        };\r\n    \r\n        let notFoundElements = (element) => {\r\n          console.log('user not found: ', element);\r\n          return !(element instanceof String);\r\n        };\r\n    \r\n        return new Promise(function(resolve, reject) {\r\n    \r\n          if (users.filter(haveEmptyElements).length === 0) {\r\n            return reject('Don\\'t have users to invite');\r\n          }\r\n    \r\n          console.info('[ChatManager.ChatController.addUsers ]: ', users);\r\n    \r\n          /*_this.search.users(users, domains, ['comm'], ['chat'])\r\n    \r\n        .then((hypertiesIDs) => {\r\n    \r\n          if (hypertiesIDs.filter(notFoundElements).length === 0) {\r\n            throw 'User(s) not found';\r\n          }\r\n    \r\n          let selectedHyperties = hypertiesIDs.map((hyperty) => {\r\n            return hyperty.hypertyID;\r\n          });*/\n\n    /*      let usersDiscovery = [];\r\n          let disconnected = [];\r\n          let live = {};\r\n    \r\n          users.forEach((user) => {\r\n            let userDiscoveryPromise = _this.discovery.discoverHypertiesDO(user.user, ['comm'], ['chat'], user.domain);\r\n              usersDiscovery.push(userDiscoveryPromise);\r\n            });\r\n    \r\n          Promise.all(usersDiscovery).then((userDiscoveryResults) => {\r\n            console.log('[ChatManager.ChatController.addUsers] Users Discovery Results->', userDiscoveryResults);\r\n    \r\n            let selectedHyperties = [];\r\n    \r\n             userDiscoveryResults.forEach((userDiscoveryResult) => {\r\n    \r\n               userDiscoveryResult.forEach((discovered)=>{\r\n                 if (discovered.data.status === 'live'){\r\n                   selectedHyperties.push(discovered.data.hypertyID);\r\n                   live[discovered.data.hypertyID] = discovered;\r\n                 }\r\n                 else if (disconnected.length < 5) disconnected.push(discovered);\r\n               });\r\n    \r\n            });\r\n    \r\n            console.info('[ChatManager.ChatController]------------------------ Syncher Create ---------------------- \\n');\r\n            console.info('[ChatManager.ChatController]Selected Hyperties: !!! ', selectedHyperties);\r\n            console.info(`Have ${selectedHyperties.length} users;`);\r\n    //        console.info('[ChatManager] HypertiesIDs ', hypertiesIDs);\r\n    \r\n            let dataObject = _this.controllerMode === 'reporter' ? _this.dataObjectReporter : _this.dataObjectObserver;\r\n    \r\n            if (disconnected.length > 0) _this._invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObject);\r\n    \r\n            dataObject.inviteObservers(selectedHyperties);\r\n    \r\n            if (dataObject.invitations.length > 0) _this._invitationsHandler.processInvitations(live, dataObject);\r\n    \r\n            return;\r\n    \r\n            })\r\n            .then(() => {\r\n              console.info('[ChatManager.ChatController]Are invited with success ' + users.length + ' users;');\r\n              resolve(true);\r\n    \r\n    \r\n    \r\n            }).catch((reason) => {\r\n              console.error('An error occurred when trying to invite users;\\n', reason);\r\n              reject(reason);\r\n            });\r\n    \r\n        });\r\n    \r\n      }*/\n\n    /**\r\n     * This function is used to request the Reporter to add / invite new user on an existing Group Chat instance.\r\n     * Only Observers are allowed to use this function.\r\n     * @param {URL.UserURL}  users  User to be invited to join the Group Chat that is identified with reTHINK User URL.\r\n     * @return {Promise<boolean>}   It returns as a Promise true if successfully invited or false otherwise.\r\n     */\n\n    /*  addUserReq(users) {\r\n    \r\n        let _this = this;\r\n    \r\n        //check is Observer and invoke observer.execute() with new promise\r\n        let haveEmptyElements = (element) => {\r\n          console.log('Element:', element.length);\r\n          return element.length !== 0;\r\n        };\r\n    \r\n        return new Promise(function(resolve, reject) {\r\n    \r\n          if (users.filter(haveEmptyElements).length === 0) {\r\n            return reject('[ChatManager.ChatController.addUserReq] Don\\'t have users to add');\r\n          }\r\n          if (!_this.controllerMode === 'observer') {\r\n            return reject('[ChatManager.ChatController.addUserReq] only allowed to Chat Observer');\r\n    \r\n          let addUser = _this.addUser(users);\r\n    \r\n          if (_this._dataObjectObserver) {\r\n            addUser = _this._dataObjectObserver.execute('addUser', users);\r\n          }\r\n    \r\n          addUser.then(() => {\r\n            console.info('[ChatManager.ChatController.addUserReq] Request accepted by Reporter ');\r\n            resolve(true);\r\n          }).catch((reason) => {\r\n            console.error('[ChatManager.ChatController.addUserReq] Request rejected by Reporter;\\n', reason);\r\n            reject(reason);\r\n          });\r\n        }\r\n    \r\n      });\r\n    \r\n    }*/\n\n  }, {\n    key: \"onInvitationResponse\",\n    value: function onInvitationResponse(callback) {\n      var _this = this;\n\n      _this._onInvitationResponse = callback; //    _this._invitationsHandler.invitationResponse = callback;\n    }\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @return {<Promise> boolean} Promise with the status\r\n     */\n\n    /**\r\n     * This function is used to remove a user from an existing Group Chat instance.\r\n     * Only the Reporter, i.e. the Hyperty that has created the Group Chat, is allowed to use this function.\r\n     * @param  {URL.UserURL} user       User to be removed from the Group Chat that is identified with reTHINK User URL.\r\n     * @return {<Promise> boolean}      It returns as a Promise true if successfully removed or false otherwise.\r\n     */\n\n  }, {\n    key: \"removeUser\",\n    value: function removeUser(user) {\n      // TODO: implement the removeUser;\n      console.log('[ChatManager.ChatController]Not yet implemented: ', user);\n    }\n    /**\r\n     * This function is used to close an existing Group Chat instance.\r\n     * Only available to Chat Group Reporters i.e. the Hyperty instance that created the Group Chat.\r\n     * @return {<Promise>Boolean} It returns as a Promise true if successfully closed or false otherwise.\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var del = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      // TODO: the dataObjectReporter.delete should be a Promise;\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this.controllerMode === 'reporter') {\n          // reporter\n          //        _this._invitationsHandler.cleanInvitations(_this.dataObjectReporter).then(() => {\n          if (!del) {\n            _this._manager.communicationObject.status = 'closed';\n            resolve(true);\n          } else {\n            try {\n              delete _this._manager._reportersControllers[_this.dataObjectReporter.url];\n\n              _this.dataObjectReporter.delete();\n\n              resolve(true);\n              if (_this._onClose) _this._onClose({\n                code: 200,\n                desc: 'deleted',\n                url: _this.dataObjectReporter.url\n              });\n            } catch (e) {\n              console.error(e);\n              reject(false);\n            }\n          } //          });\n\n        } else {\n          // observer\n          if (del) {\n            try {\n              delete _this._manager._observersControllers[_this.dataObjectObserver.url];\n\n              _this.dataObjectObserver.unsubscribe();\n\n              resolve(true);\n            } catch (e) {\n              console.error(e);\n              reject(false);\n            }\n          } else {\n            // TODO: send message \n            resolve(true);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter.url : this.dataObjectObserver.url;\n    }\n  }, {\n    key: \"dataObjectReporter\",\n    set: function set(dataObjectReporter) {\n      if (!dataObjectReporter) throw new Error('[ChatController] The data object reporter is necessary parameter ');\n\n      var _this = this;\n\n      _this.controllerMode = 'reporter'; // Handler to process received files\n      // dataObjectReporter.onResponse(function(event) {\n      //   console.log('[DataObjectReporter - onResponse]', event);\n      //   if (_this._onInvitationResponse) {\n      //     _this._onInvitationResponse(event);\n      //   }\n      //\n      // });\n\n      dataObjectReporter.onSubscription(function (event) {\n        switch (event.type) {\n          case 'subscribe':\n            _this._onSubscribe(event);\n\n            break;\n\n          case 'unsubscribe':\n            _this._onUnsubscribe(event);\n\n            break;\n        }\n      });\n\n      _this._setOnAddChildListener(dataObjectReporter);\n\n      dataObjectReporter.onRead(function (event) {\n        event.accept();\n      });\n      dataObjectReporter.onExecute(function (event) {\n        switch (event.method) {\n          case 'addUser':\n            _this.addUser(event.params[0]).then(function () {\n              event.accept();\n            }).catch(function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          case 'removeUser':\n            _this.removeUser(event.params).then(function () {\n              event.accept();\n            }).catch(function (reason) {\n              console.error('Reason:', reason);\n              event.reject(reason);\n            });\n\n            break;\n\n          default:\n            event.reject('[ChatController.onExecute] Chat method execution not accepted by Reporter');\n            break;\n        }\n      });\n      _this._dataObjectReporter = dataObjectReporter;\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectReporter;\n    }\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this._dataObjectReporter._childrenObjects : this._dataObjectObserver._childrenObjects;\n    }\n  }, {\n    key: \"dataObjectObserver\",\n    set: function set(dataObjectObserver) {\n      var _this = this;\n\n      _this.controllerMode = 'observer';\n      _this._dataObjectObserver = dataObjectObserver;\n      dataObjectObserver.onChange('*', function (event) {\n        console.info('[ChatManager.ChatController]Observer - onChange', event);\n\n        if (event.field.includes('participants')) {\n          switch (event.cType) {\n            case 'add':\n              if (_this._onUserAdded) _this._onUserAdded(event);\n              break;\n\n            case 'remove':\n              if (_this._onUserRemoved) _this._onUserRemoved(event);\n              break;\n          }\n        }\n\n        if (_this._onChange) _this._onChange(event);\n      });\n\n      _this._setOnAddChildListener(dataObjectObserver); // let childrens = dataObjectObserver.childrens;\n      // Object.keys(childrens).forEach((child) => {\n      //   if (_this._onMessage) _this._onMessage({\n      //     childId: child,\n      //     identity: childrens[child].identity,\n      //     value: childrens[child].data\n      //   });\n      // })\n\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._dataObjectObserver;\n    }\n  }, {\n    key: \"dataObject\",\n    get: function get() {\n      return this.controllerMode === 'reporter' ? this.dataObjectReporter : this.dataObjectObserver;\n    }\n  }, {\n    key: \"closeEvent\",\n    set: function set(event) {\n      var _this = this;\n\n      _this._closeEvent = event;\n      if (_this._onClose) _this._onClose(event);\n    },\n    get: function get() {\n      var _this = this;\n\n      return _this._closeEvent;\n    }\n  }]);\n\n  return Chat;\n}();\n\n/* harmony default export */ var chatManager_Chat = (Chat);\n// CONCATENATED MODULE: ./src/chatManager/SimpleChatManager.js\nfunction SimpleChatManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SimpleChatManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SimpleChatManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) SimpleChatManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) SimpleChatManager_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Service Framework\n//import IdentityManager from '../identityManager/IdentityManager';\n//import RegistrationStatus from '../discovery/RegistrationStatus';\n//import Discovery from '../discovery/Discovery';\n//import Syncher from '../syncher/Syncher';\n// Utils\n//import {divideURL} from '../utils/utils';\n//import Search from '../utils/Search';\n// Internals\n\n\n\n/**\r\n* Hyperty Simple Group Chat Manager API \r\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\r\n* @version 0.1.0\r\n*/\n\nvar SimpleChatManager_SimpleSimpleChatManager =\n/*#__PURE__*/\nfunction () {\n  function SimpleSimpleChatManager(myUrl, bus, configuration, syncher, factory) {\n    SimpleChatManager_classCallCheck(this, SimpleSimpleChatManager);\n\n    if (!myUrl) throw new Error('[SimpleChatManager.constructor] The myUrl is a needed parameter');\n    if (!bus) throw new Error('[SimpleChatManager.constructor] The MiniBus is a needed parameter');\n    if (!configuration) throw new Error('[SimpleChatManager.constructor] The configuration is a needed parameter');\n\n    var _this = this;\n\n    if (!syncher) {\n      syncher = factory.createSyncher(myUrl, bus, configuration);\n    }\n\n    _this._runtimeURL = configuration.runtimeURL;\n    var domain = factory.divideURL(_this._runtimeURL).domain; //    let discovery = factory.createDiscovery(myUrl, configuration.runtimeURL, bus);\n\n    var identityManager = factory.createIdentityManager(myUrl, configuration.runtimeURL, bus);\n    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/Communication';\n    _this._reportersControllers = {};\n    _this._observersControllers = {};\n    _this._myUrl = myUrl;\n    _this._bus = bus;\n    _this._syncher = syncher;\n    _this._domain = domain; //    _this.discovery = discovery;\n\n    _this.identityManager = identityManager;\n    _this.currentIdentity; //    _this.search = factory.createSearch(discovery, identityManager);\n\n    _this.communicationObject = communicationObject;\n    _this.communicationChildren = communicationChildren; //    console.log('[SimpleChatManager] Discover ', discovery);\n\n    console.log('[SimpleChatManager] Identity Manager ', identityManager);\n  }\n\n  SimpleChatManager_createClass(SimpleSimpleChatManager, [{\n    key: \"processNotification\",\n    value: function processNotification(event) {\n      var _this = this;\n\n      console.log('[SimpleChatManager.processNotification: ', event);\n\n      if (event.type === 'create') {\n        // TODO: replace the 100 for Message.Response\n        // event.ack(200);\n        if (_this._onInvitation) {\n          _this._onInvitation(event);\n        }\n      }\n\n      if (event.type === 'delete') {\n        // TODO: replace the 200 for Message.Response\n        event.ack(200);\n        _this._observersControllers[event.url].closeEvent = event;\n        delete _this._observersControllers[event.url];\n        _this._observersControllers.closeEvent = event;\n        _this.communicationObject = communicationObject;\n\n        for (var url in this._reportersControllers) {\n          this._reportersControllers[url].close(event);\n        }\n\n        for (var _url in this._observersControllers) {\n          this._observersControllers[_url].close(event);\n        }\n      }\n    }\n  }, {\n    key: \"myIdentity\",\n    value: function myIdentity(identity) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        console.info('[SimpleChatManager.myIdentity]');\n        if (identity) return resolve(identity);\n\n        if (_this._myUrl.includes('hyperty://')) {\n          _this.identityManager.discoverUserRegistered().then(function (identity) {\n            _this.currentIdentity = identity;\n            resolve(identity);\n          }).catch(function (reason) {\n            reject(reason);\n          });\n        } else {\n          _this.identityManager.discoverIdentityPerIdP().then(function (identity) {\n            _this.currentIdentity = identity;\n            resolve(identity);\n          }).catch(function (reason) {\n            reject(reason);\n          });\n        }\n      });\n    }\n    /**\r\n     * This function is used to create a new Group Chat providing the name and the identifiers of users to be invited.\r\n     * @param  {string}                     name  Is a string to identify the Group Chat\r\n     * @param  {array<URL.HypertyURL>}         hyperties Array of hyperties to be invited to join the Group Chat. Users are identified with reTHINK User URL, like this format user://<ipddomain>/<user-identifier>\r\n     * @return {<Promise>ChatController}    A ChatController object as a Promise.\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name, hyperties) {\n      var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _this = this;\n\n      var syncher = _this._syncher;\n      return new Promise(function (resolve, reject) {\n        _this.communicationObject = communicationObject;\n        _this.communicationObject.cseq = 1;\n        _this.communicationObject.startingTime = new Date().toJSON();\n        _this.communicationObject.status = CommunicationStatus.OPEN;\n        var myIdentity;\n\n        _this.myIdentity().then(function (identity) {\n          myIdentity = identity;\n          console.log('[SimpleChatManager.create ] My Identity', identity); // let url = _this.communicationObject.reporter;\n\n          var userInfo = new UserInfo_UserInfo(_this._myUrl, _this._domain, identity); // Add my identity\n\n          _this.communicationObject.participants[identity.guid] = userInfo;\n          console.log('[SimpleChatManager.create ] participants: ', _this.communicationObject.participants);\n          console.log('[SimpleChatManager.create ] communicationObject', _this.communicationObject);\n          console.info('[SimpleChatManager] ---------------------- Syncher Create ---------------------- \\n');\n          console.info('[SimpleChatManager] Selected Hyperties: !!! ', hyperties); //          console.info(`Have ${hyperties.length} users;`);\n\n          var mutual = extra.mutual ? extra.mutual : true;\n          var input = Object.assign({\n            resources: ['chat'],\n            mutual: mutual\n          }, extra);\n          delete input.name;\n          if (_this.offline) input.offline = _this.offline;\n          if (_this.backup) input.backup = _this.backup;\n          console.log('[SimpleChatManager] input data:', input);\n          return syncher.create(_this._objectDescURL, hyperties, _this.communicationObject, true, false, name, {}, input);\n        }).then(function (dataObjectReporter) {\n          console.info('[SimpleChatManager] 3. Return Create Data Object Reporter', dataObjectReporter);\n          var chat = new chatManager_Chat(syncher, _this._domain, myIdentity, _this);\n          chat.dataObjectReporter = dataObjectReporter;\n          _this._reportersControllers[dataObjectReporter.url] = chat; //          console.log('[SimpleChatManager] chat invitationsHandler: ',   chat.invitationsHandler);\n          // process invitations to handle not received invitations\n\n          /*          if (dataObjectReporter.invitations.length > 0) {\r\n                      chat.invitationsHandler.processInvitations(live, dataObjectReporter);\r\n                    }\r\n          \r\n                    // If any invited User is disconnected let's wait until it is connected again\r\n                    if (disconnected.length > 0) chat.invitationsHandler.inviteDisconnectedHyperties(disconnected, dataObjectReporter);\r\n          */\n\n          resolve(chat);\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      }).catch(function (reason) {\n        console.log('[SimpleChatManager.create] MyIdentity Error:', reason);\n        return reject(reason);\n      }); //    });\n    }\n    /**\r\n     * This function is used to handle notifications about incoming invitations to join a Group Chat.\r\n     * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\r\n     */\n\n  }, {\n    key: \"onInvitation\",\n    value: function onInvitation(callback) {\n      var _this = this;\n\n      _this._onInvitation = callback;\n    }\n    /**\r\n     * This function is used to join a Group Chat.\r\n     * @param  {URL.CommunicationURL} invitationURL  The Communication URL of the Group Chat to join that is provided in the invitation event\r\n     * @return {<Promise>ChatController}             It returns the ChatController object as a Promise\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(invitationURL) {\n      var mutual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var identity = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var syncher = _this._syncher;\n        var myIdentity;\n        console.info('[SimpleChatManager] ------------------------ Syncher subscribe ---------------------- \\n');\n        console.info('invitationURL', invitationURL);\n\n        _this.myIdentity(identity).then(function (identity) {\n          myIdentity = identity;\n          var input = {\n            schema: _this._objectDescURL,\n            resource: invitationURL,\n            store: true,\n            p2p: false,\n            mutual: mutual,\n            domain_subscription: true,\n            identity: identity\n          };\n          if (_this.offline) input.offline = _this.offline;\n          return syncher.subscribe(input);\n        }).then(function (dataObjectObserver) {\n          console.info('Data Object Observer: ', dataObjectObserver);\n          var chat = new chatManager_Chat(syncher, _this._domain, myIdentity, _this);\n          resolve(chat);\n          chat.dataObjectObserver = dataObjectObserver;\n          _this._observersControllers[dataObjectObserver.url] = chat;\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: \"offline\",\n    set: function set(offline) {\n      this._offline = offline;\n    },\n    get: function get() {\n      return this._offline ? this._offline : false;\n    }\n  }, {\n    key: \"backup\",\n    set: function set(backup) {\n      this._backup = backup;\n    },\n    get: function get() {\n      return this._backup ? this._backup : false;\n    }\n  }]);\n\n  return SimpleSimpleChatManager;\n}();\n\n/* harmony default export */ var SimpleChatManager = (SimpleChatManager_SimpleSimpleChatManager);\n// CONCATENATED MODULE: ./src/sandbox/SandboxFactory.js\nfunction SandboxFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction SandboxFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SandboxFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) SandboxFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) SandboxFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * Internal component to instantiate framework functionalities.\r\n */\n\nvar SandboxFactory_SandboxFactory =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _components: <url: instance>\r\n  */\n  function SandboxFactory(bus) {\n    SandboxFactory_classCallCheck(this, SandboxFactory);\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._divideURL = utils[\"k\" /* divideURL */];\n  }\n\n  SandboxFactory_createClass(SandboxFactory, [{\n    key: \"createSyncher\",\n    value: function createSyncher(owner, bus, config) {\n      return new Syncher[\"a\" /* default */](owner, bus, config);\n    }\n  }, {\n    key: \"createIdentityManager\",\n    value: function createIdentityManager(hypertyURL, runtimeURL, bus) {\n      var _this = this;\n\n      return new IdentityManager[\"a\" /* default */](hypertyURL, runtimeURL, bus);\n    }\n  }, {\n    key: \"createDiscovery\",\n    value: function createDiscovery(hypertyURL, runtimeURL, bus) {\n      var _this = this;\n\n      return new Discovery[\"a\" /* default */](hypertyURL, runtimeURL, bus);\n    }\n  }, {\n    key: \"createSearch\",\n    value: function createSearch(discovery, identityManager) {\n      var _this = this;\n\n      return new utils_Search(discovery, identityManager);\n    }\n  }, {\n    key: \"createContextObserver\",\n    value: function createContextObserver(hypertyURL, bus, config, schemes) {\n      return new ContextObserver[\"a\" /* default */](hypertyURL, bus, config, schemes, this);\n    }\n  }, {\n    key: \"createContextReporter\",\n    value: function createContextReporter(hypertyURL, bus, config) {\n      var _this = this;\n\n      return new ContextReporter[\"a\" /* default */](hypertyURL, bus, config, this);\n    }\n  }, {\n    key: \"createNotificationHandler\",\n    value: function createNotificationHandler(bus) {\n      var _this = this;\n\n      return new syncher_NotificationHandler(bus);\n    }\n  }, {\n    key: \"createMessageBodyIdentity\",\n    value: function createMessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile) {\n      return new identity_MessageBodyIdentity(username, userURL, picture, name, locale, idp, assertion, profile);\n    }\n  }, {\n    key: \"createChatManager\",\n    value: function createChatManager(hypertyURL, bus, configuration, syncher) {\n      return new chatManager_ChatManager(hypertyURL, bus, configuration, syncher, this);\n    }\n  }, {\n    key: \"createChatController\",\n    value: function createChatController(syncher, discovery, domain, search, identity, manager) {\n      return new chatManager_ChatController(syncher, discovery, domain, search, identity, manager);\n    }\n  }, {\n    key: \"createSimpleChatManager\",\n    value: function createSimpleChatManager(hypertyURL, bus, configuration, syncher) {\n      return new SimpleChatManager(hypertyURL, bus, configuration, syncher, this);\n    }\n  }, {\n    key: \"createChat\",\n    value: function createChat(syncher, domain, identity, manager) {\n      return new chatManager_Chat(syncher, domain, identity, manager);\n    }\n  }, {\n    key: \"createRegistrationStatus\",\n    value: function createRegistrationStatus(observer, runtimeURL, chatUrl, bus) {\n      return new RegistrationStatus[\"a\" /* default */](observer, runtimeURL, chatUrl, bus);\n    }\n  }, {\n    key: \"divideURL\",\n    get: function get() {\n      return this._divideURL;\n    }\n  }]);\n\n  return SandboxFactory;\n}();\n\n/* harmony default export */ var sandbox_SandboxFactory = __webpack_exports__[\"a\"] = (SandboxFactory_SandboxFactory);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/proxy-observe/index.js\nvar proxy_observe = __webpack_require__(19);\n\n// CONCATENATED MODULE: ./src/syncher/ProxyObject.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar objectType = {\n  ARRAY: '[object Array]',\n  OBJECT: '[object Object]'\n};\n/**\r\n * @access private\r\n * Main class that maintains a JSON object, and observes changes in this object, recursively.\r\n * Internal objects and arrays are also observed.\r\n */\n\nvar ProxyObject_SyncObject =\n/*#__PURE__*/\nfunction () {\n  function SyncObject(initialData) {\n    _classCallCheck(this, SyncObject);\n\n    var _this = this;\n\n    _this._observers = [];\n    _this._filters = {};\n    this._data = initialData || {};\n\n    this._internalObserve(this._data);\n  }\n\n  _createClass(SyncObject, [{\n    key: \"observe\",\n    value: function observe(callback) {\n      this._observers.push(callback);\n    }\n  }, {\n    key: \"find\",\n    value: function find(path) {\n      var list = Object(utils[\"y\" /* parseAttributes */])(path);\n      return this._findWithSplit(list);\n    }\n  }, {\n    key: \"findBefore\",\n    value: function findBefore(path) {\n      var result = {};\n      var list = Object(utils[\"y\" /* parseAttributes */])(path);\n      result.last = list.pop();\n      result.obj = this._findWithSplit(list);\n      return result;\n    }\n  }, {\n    key: \"_findWithSplit\",\n    value: function _findWithSplit(list) {\n      var obj = this._data;\n      list.forEach(function (value) {\n        obj = obj[value];\n      });\n      return obj;\n    }\n  }, {\n    key: \"_internalObserve\",\n    value: function _internalObserve(object) {\n      var _this2 = this;\n\n      var handler = function handler(changeset) {\n        changeset.every(function (change) {\n          _this2._onChanges(change);\n        });\n      };\n\n      this._data = Object.deepObserve(object, handler);\n    }\n  }, {\n    key: \"_fireEvent\",\n    value: function _fireEvent(event) {\n      this._observers.forEach(function (callback) {\n        callback(event);\n      });\n    }\n  }, {\n    key: \"_onChanges\",\n    value: function _onChanges(change) {\n      var obj = change.object;\n      var objType;\n\n      if (obj.constructor === Object) {\n        objType = ObjectType.OBJECT;\n      }\n\n      if (obj.constructor === Array) {\n        objType = ObjectType.ARRAY;\n      }\n\n      var fieldString = change.keypath; // console.log('Field:', fieldString);\n      // console.log('type:', change.type);\n      //let oldValue = change.oldValue;\n\n      var newValue = obj[change.name]; // console.info(change.type + ' | Field: ' + fieldString + ' | New Value:', JSON.stringify(newValue), fieldString.includes('length'));\n\n      if (change.type === 'update' && !fieldString.includes('.length')) {\n        this._fireEvent({\n          cType: ChangeType.UPDATE,\n          oType: objType,\n          field: fieldString,\n          data: newValue\n        });\n      }\n\n      if (change.type === 'add') {\n        this._fireEvent({\n          cType: ChangeType.ADD,\n          oType: objType,\n          field: fieldString,\n          data: newValue\n        });\n      }\n\n      if (change.type === 'delete') {\n        this._fireEvent({\n          cType: ChangeType.REMOVE,\n          oType: objType,\n          field: fieldString\n        });\n      }\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }]);\n\n  return SyncObject;\n}();\n\nvar ChangeType = {\n  UPDATE: 'update',\n  ADD: 'add',\n  REMOVE: 'remove'\n};\nvar ObjectType = {\n  OBJECT: 'object',\n  ARRAY: 'array'\n};\n/* harmony default export */ var ProxyObject = (ProxyObject_SyncObject);\n// CONCATENATED MODULE: ./src/syncher/DataObjectChild.js\nfunction DataObjectChild_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObjectChild_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObjectChild_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObjectChild_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObjectChild_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar log = loglevel[\"getLogger\"]('DataObjectChild');\n\n\n/**\r\n * The class returned from the DataObject addChildren call or from onAddChildren if remotely created.\r\n */\n\nvar DataObjectChild_DataObjectChild\n/* implements SyncStatus */\n=\n/*#__PURE__*/\nfunction () {\n  /* private\r\n    ----event handlers----\r\n  _onResponseHandler: (event) => void\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the DataObject.addChild\r\n   */\n  function DataObjectChild(input) {\n    DataObjectChild_classCallCheck(this, DataObjectChild);\n\n    var _this = this;\n\n    function throwMandatoryParmMissingError(par) {\n      throw '[DataObjectChild] ' + par + ' mandatory parameter is missing';\n    }\n\n    input.parent ? _this._parent = input.parent : throwMandatoryParmMissingError('parent');\n    input.url ? _this._url = input.url : throwMandatoryParmMissingError('url');\n    input.created ? _this._created = input.created : throwMandatoryParmMissingError('created');\n    input.reporter ? _this._reporter = input.reporter : throwMandatoryParmMissingError('reporter');\n    input.runtime ? _this._runtime = input.runtime : throwMandatoryParmMissingError('runtime');\n    input.schema ? _this._schema = input.schema : throwMandatoryParmMissingError('schema');\n    input.parentObject ? _this._parentObject = input.parentObject : throwMandatoryParmMissingError('parentObject');\n    if (input.name) _this._name = input.name;\n    if (input.description) _this._description = input.description;\n    if (input.tags) _this._tags = input.tags;\n    if (input.resources) _this._resources = input.resources;\n    if (input.observerStorage) _this._observerStorage = input.observerStorage;\n    if (input.publicObservation) _this._publicObservation = input.publicObservation;\n    _this._childId = input.url;\n\n    if (input.data) {\n      _this._syncObj = new ProxyObject(input.data);\n    } else {\n      _this._syncObj = new ProxyObject({});\n    }\n\n    log.log('[DataObjectChild -  Constructor] - ', _this._syncObj);\n    _this._bus = _this._parentObject._bus;\n    _this._owner = _this._parentObject._owner;\n\n    _this._allocateListeners();\n\n    _this._metadata = input; // delete _this._metadata.data;\n\n    delete _this._metadata.parentObject;\n    _this._sharingStatus = false;\n  }\n\n  DataObjectChild_createClass(DataObjectChild, [{\n    key: \"share\",\n\n    /**\r\n     * This function is used to share the child Object among authorised Hyperties\r\n     * @param  {boolean}     reporter  If true the child object is only shared to Parent reporter\r\n     * @return {Promise<JSON>}        It returns a promise with the sharing results.\r\n     */\n    value: function share(toReporter) {\n      var _this = this;\n\n      _this._sharingStatus = new Promise(function (resolve, reject) {\n        var to;\n        var reporter = toReporter;\n\n        if (reporter) {\n          to = _this.metadata.parent;\n        } else to = _this.metadata.parent + '/children/';\n\n        var childValue = _this.metadata;\n        childValue.data = _this.data; //FLOW-OUT: this message will be sent directly to a resource child address: MessageBus\n\n        var requestMsg = {\n          type: 'create',\n          from: _this.metadata.reporter,\n          to: to,\n          body: {\n            resource: childValue.url,\n            value: childValue\n          }\n        };\n\n        if (_this.identity) {\n          requestMsg.body.identity = _this.identity;\n        } //to be used to disable mutual authentication for legacy users\n\n\n        if (_this._parentObject.data.hasOwnProperty('mutual')) requestMsg.body.mutual = _this._parentObject.data.mutual;\n\n        if (_this._parentObject.metadata.reporter === _this.metadata.reporter) {\n          _this._bus.postMessage(Object(utils[\"i\" /* deepClone */])(requestMsg));\n\n          return resolve();\n        } else {\n          var callback = function callback(reply) {\n            if (reply.to === _this._reporter) {\n              _this._bus.removeResponseListener(requestMsg.from, reply.id);\n\n              log.log('[Syncher.DataObjectChild.share] Parent reporter reply ', reply);\n              var result = {\n                code: reply.body && reply.body.code ? reply.body.code : 500,\n                desc: reply.body && reply.body.desc ? reply.body.desc : 'Unknown'\n              };\n\n              if (reply.body.code < 300) {\n                return resolve(result);\n              } else return reject(result);\n            }\n          };\n\n          var id = _this._bus.postMessage(Object(utils[\"i\" /* deepClone */])(requestMsg), callback, false);\n\n          setTimeout(function () {\n            // If Reporter does  not reply the promise is rejected\n            _this._bus.removeResponseListener(requestMsg.from, id);\n\n            var result = {\n              code: 408,\n              desc: 'timout'\n            };\n            return reject(result);\n          }, 3000);\n        }\n      });\n    }\n    /**\r\n       * This function is used to share the child Object among authorised Hyperties\r\n       * @param  {boolean}     reporter  If true the child object is only shared to Parent reporter\r\n       * @return {Promise<JSON>}        It returns a promise with the sharing results.\r\n       */\n\n  }, {\n    key: \"store\",\n    value: function store() {\n      var _this = this;\n\n      var child = {};\n      var key = _this.metadata.children + '.' + _this.metadata.url;\n      child.value = _this.metadata;\n      child.identity = _this.identity;\n      var msg = {\n        from: _this.metadata.reporter,\n        to: _this._parentObject._syncher._subURL,\n        type: 'create',\n        body: {\n          resource: _this.metadata.parent,\n          attribute: key,\n          value: child\n        }\n      };\n      log.log('[DataObjectChild.store]:', msg);\n\n      _this._bus.postMessage(msg);\n    }\n  }, {\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      var _this = this; //this is only needed for children reporters\n\n\n      if (_this._reporter === _this._owner) {\n        _this._listener = _this._bus.addListener(_this._reporter, function (msg) {\n          if (msg.type === 'response' && msg.id === _this._msgId) {\n            log.log('DataObjectChild.onResponse:', msg);\n\n            _this._onResponse(msg);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      if (_this._listener) {\n        _this._listener.remove();\n      }\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      _this._releaseListeners(); //TODO: send delete message ?\n      // nothing to be done\n      // return new Promise((resolve) => {\n      //   log.log('[DataObjectChild.delete]');\n      //   resolve();\n      // });\n\n    }\n    /**\r\n     * All Metadata about the Child Data Object\r\n     * @type {Object} -\r\n     */\n\n  }, {\n    key: \"onChange\",\n\n    /**\r\n     * Register the change listeners sent by the reporter child\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n    value: function onChange(callback) {\n      this._syncObj.observe(function (event) {\n        log.log('[DataObjectChild - observer] - ', event);\n        callback(event);\n      });\n    }\n    /**\r\n     * Setup the callback to process response notifications of the creates\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      this._onResponseHandler = callback;\n    } //FLOW-IN: message received from a remote DataObject -> _onChildCreate\n\n  }, {\n    key: \"_onResponse\",\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      var event = {\n        type: msg.type,\n        url: msg.body.source,\n        code: msg.body.code\n      };\n\n      if (_this._onResponseHandler) {\n        _this._onResponseHandler(event);\n      }\n    }\n  }, {\n    key: \"shareable\",\n    get: function get() {\n      var shareable = this.metadata;\n      shareable.data = this.data;\n      return shareable;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n    /**\r\n     * Children ID generated on addChildren. Unique identifier\r\n     * @type {URL} - URL of the format <HypertyURL>#<numeric-sequence>\r\n     */\n\n  }, {\n    key: \"childId\",\n    get: function get() {\n      return this._childId;\n    }\n    /**\r\n     * Data Structure to be synchronized.\r\n     * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n     */\n\n  }, {\n    key: \"sharingStatus\",\n    get: function get() {\n      return this._sharingStatus;\n    }\n    /**\r\n      * Data Structure to be synchronized.\r\n      * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n      */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._syncObj.data;\n    }\n    /**\r\n     * Set for this dataObjectChild an identity\r\n     * @method identity\r\n     * @param  {Identity} identity identity from who created the message\r\n     */\n\n  }, {\n    key: \"identity\",\n    set: function set(identity) {\n      this._identity = identity;\n    }\n    /**\r\n     * Get for this dataObjectChild an identity\r\n     * @method identity\r\n     * @return {Identity} identity from who created the message\r\n     */\n    ,\n    get: function get() {\n      return this._identity;\n    }\n  }]);\n\n  return DataObjectChild;\n}();\n\n/* harmony default export */ var syncher_DataObjectChild = (DataObjectChild_DataObjectChild);\n// CONCATENATED MODULE: ./src/syncher/HeartBeat.js\nfunction HeartBeat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction HeartBeat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HeartBeat_createClass(Constructor, protoProps, staticProps) { if (protoProps) HeartBeat_defineProperties(Constructor.prototype, protoProps); if (staticProps) HeartBeat_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\r\n * Class to handle Children Data Object Heart beats \r\n * required to manage synchronisation with remote storage servers.\r\n */\n\nvar HeartBeat_HeartBeat =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n    */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the DataObject constructor\r\n   */\n  function HeartBeat(bus, hypertyUrl, runtimeUrl, dataObject) {\n    var heartBeatRate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 60;\n\n    HeartBeat_classCallCheck(this, HeartBeat);\n\n    var _this = this;\n\n    function throwMandatoryParmMissingError(par) {\n      throw '[HeartBeat] ' + par + ' mandatory parameter is missing';\n    }\n\n    bus ? _this._bus = bus : throwMandatoryParmMissingError('bus');\n    dataObject ? _this._dataObject = dataObject : throwMandatoryParmMissingError('dataObject');\n    heartBeatRate ? _this._heartBeatRate = heartBeatRate : throwMandatoryParmMissingError('heartBeatRate');\n    runtimeUrl ? _this._runtimeUrl = runtimeUrl : throwMandatoryParmMissingError('runtimeUrl');\n    hypertyUrl ? _this._hypertyUrl = hypertyUrl : throwMandatoryParmMissingError('hypertyUrl');\n    this.heartbeat = 0;\n    _this._stop = {\n      heartBeat: false,\n      sync: function sync(bus) {\n        var stopSyncMsg = {\n          from: hypertyUrl,\n          to: runtimeUrl + '/sm',\n          type: 'execute',\n          body: {\n            method: 'stopSync',\n            params: [dataObject.url]\n          }\n        };\n        console.log('[Heartbeat.stop.sync()] sending msg:', stopSyncMsg);\n        bus.postMessage(stopSyncMsg);\n      }\n    };\n  }\n\n  HeartBeat_createClass(HeartBeat, [{\n    key: \"start\",\n    value: function start(resume) {\n      var _this2 = this;\n\n      var isReporter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      console.log('[HeartBeat] starting. isReporter: ', isReporter);\n\n      if (resume || !isReporter) {\n        this._getLastHearBeat().then(function () {\n          var isHeartBeatActive = _this2._isHeartBeatActive(_this2.heartBeat, _this2._heartBeatRate * 2);\n\n          if (!isHeartBeatActive) {\n            console.log('[HeartBeat] heart beats are disabled for ', _this2._dataObject); // Is disabled: lets start observer heart beat and start synching with remote storage server\n\n            _this2._stop.heartBeat = _this2._startHeartBeat(_this2._heartBeatRate);\n            console.log('[HeartBeat]  ', _this2._hypertyUrl, ' started synching with remote storage server');\n\n            _this2._startSync();\n          } else {\n            //  heart beat is active, \n            // it means the data object is already being synchronised with remote storage server\n            // we only need to watch the heart beat and try to replace it in case it fails.\n            _this2._watchHeartBeat(_this2._heartBeatRate, true, _this2._onHertbeatStopped);\n          }\n        });\n      } else {\n        this._startHeartBeat(this._heartBeatRate);\n\n        this._startSync();\n      }\n    }\n  }, {\n    key: \"_getLastHearBeat\",\n    value: function _getLastHearBeat() {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          console.log('[HeartBeat._getLastHearBeat] stop waiting ');\n          resolve();\n        }, _this3._heartBeatRate * 1000 * 1.5);\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._stop.heartBeat) this._stop.heartBeat();\n\n      this._stop.sync(this._bus);\n    }\n  }, {\n    key: \"onNewHeartbeat\",\n    value: function onNewHeartbeat(heartbeat) {\n      this.heartbeat = heartbeat;\n    }\n  }, {\n    key: \"_isHeartBeatActive\",\n    value: function _isHeartBeatActive(lastHeartbeat, maxHeartBeatInterval) {\n      var lastHeartPeriodInterval = Object(utils[\"C\" /* secondsSinceEpoch */])() - lastHeartbeat;\n      console.log('[HeartBeat._isHeartBeatActive] now - lastHeartBeat', lastHeartPeriodInterval);\n      console.log('[HeartBeat._isHeartBeatActive] ', !(lastHeartPeriodInterval > maxHeartBeatInterval * 2));\n      return !(lastHeartPeriodInterval > maxHeartBeatInterval * 2);\n    }\n  }, {\n    key: \"_startHeartBeat\",\n    value: function _startHeartBeat(rate) {\n      var _this = this;\n\n      var msg = {\n        from: _this._hypertyUrl,\n        to: _this._dataObject.url + '/children/',\n        type: 'create',\n        body: {\n          resource: 'heartbeat',\n          mutual: false,\n          value: Object(utils[\"C\" /* secondsSinceEpoch */])()\n        }\n      };\n      console.log('[HeartBeat._startHeartBeat] starting ... ', msg.body.value);\n\n      this._bus.postMessage(msg);\n\n      this.heartbeat = Object(utils[\"C\" /* secondsSinceEpoch */])();\n      var id = setInterval(function () {\n        var msg = {\n          from: _this._hypertyUrl,\n          to: _this._dataObject.url + '/children/',\n          type: 'create',\n          body: {\n            resource: 'heartbeat',\n            mutual: false,\n            value: Object(utils[\"C\" /* secondsSinceEpoch */])()\n          }\n        };\n        console.log('[HeartBeat] ', msg);\n\n        _this._bus.postMessage(msg);\n\n        this.heartbeat = Object(utils[\"C\" /* secondsSinceEpoch */])();\n      }, rate * 1000); // returns function to stop the heart beat\n\n      return function () {\n        clearInterval(id);\n      };\n    }\n  }, {\n    key: \"_startSync\",\n    value: function _startSync() {\n      console.log('[HeartBeat._startSync] starting observer sync ', this._dataObject.data);\n      var backupRevision = this._dataObject.data.backupRevision;\n      console.log('[HeartBeat._startSync] backupRevision ', backupRevision);\n      var msg = {\n        from: this._hypertyUrl,\n        to: this._runtimeUrl + '/sm',\n        type: 'execute',\n        body: {\n          method: 'sync',\n          params: [this._dataObject.url, backupRevision]\n        }\n      };\n      console.log('[HeartBeat._startSync] sending msg ', msg);\n\n      this._bus.postMessage(msg);\n    }\n  }, {\n    key: \"_watchHeartBeat\",\n    value: function _watchHeartBeat(rate, onWatchingIsEnabled, callback) {\n      //  qdo o heartBeat terminar chama callback \n      // usa heartBeat Rating para iniciar timer no respectivo \n      // campo do DO chamando isHeartBeatActive()\n      var _this = this;\n\n      var syncFun = callback;\n      console.log('[HeartBeat._watchHeartBeat] started watching ', _this.heartBeat); //let heartBeat = type + 'HeartBeat';\n\n      var watcher = setInterval(function () {\n        if (onWatchingIsEnabled && !_this._isHeartBeatActive(_this.heartBeat, _this._heartBeatRate)) {\n          console.log('[HeartBeat._watchHeartBeat] has stopped ', _this._dataObject.data);\n          clearInterval(watcher);\n          syncFun(_this);\n        } else if (!onWatchingIsEnabled && this._isHeartBeatActive(_this.heartBeat, _this._heartBeatRate)) {\n          console.log('[HeartBeat._watchHeartBeat] has changed to disabled ', _this._dataObject.data);\n          clearInterval(watcher);\n          syncFun();\n        }\n      }, rate * 1000 * 2);\n    }\n  }, {\n    key: \"_onHertbeatStopped\",\n    value: function _onHertbeatStopped(_this) {\n      _this._startHeartBeat(_this._heartBeatRate);\n\n      _this._startSync();\n    }\n  }, {\n    key: \"heartBeat\",\n    get: function get() {\n      if (this.heartbeat) return this.heartbeat;else return 0;\n    }\n  }]);\n\n  return HeartBeat;\n}();\n\n/* harmony default export */ var syncher_HeartBeat = (HeartBeat_HeartBeat);\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResource.js\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction HypertyResource_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction HypertyResource_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HypertyResource_createClass(Constructor, protoProps, staticProps) { if (protoProps) HypertyResource_defineProperties(Constructor.prototype, protoProps); if (staticProps) HypertyResource_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\n// Log System\n\nvar HypertyResource_log = loglevel[\"getLogger\"]('HypertyResource');\n\n\n\nvar HypertyResource_HypertyResource =\n/*#__PURE__*/\nfunction (_DataObjectChild) {\n  _inherits(HypertyResource, _DataObjectChild);\n\n  /**\r\n  * HypertyResource constructor\r\n  *\r\n  * @param  {URL} localRuntimeURL RuntimeURL of local runtime\r\n  * @param  {URL} input.owner HypertyURL of the Hyperty handling this resource\r\n  * @param  {URL} input.runtime Runtime URL where this resource is hosted\r\n  * @param  {Bus} input.bus sandbox message bus\r\n  * @param  {DataObject} input.parent Parent Data Object where the HypertyResource is handled as a child\r\n  * @param  {Boolean} isSender indicates if parent is Reporter or an Observer\r\n  * @param  {Array} input optional input parameters\r\n  */\n  function HypertyResource(isSender, input) {\n    var _this2;\n\n    HypertyResource_classCallCheck(this, HypertyResource);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HypertyResource).call(this, input));\n\n    var _this = _assertThisInitialized(_assertThisInitialized(_this2));\n\n    _this.arraybufferSizeLimit = 5242880; //above this limit content is not saved as ArrayBuffer\n\n    _this._isSender = isSender;\n    _this._localStorageURL = _this._parentObject._syncher._runtimeUrl + '/storage';\n    return _this2;\n  }\n\n  HypertyResource_createClass(HypertyResource, [{\n    key: \"save\",\n\n    /*\r\n    set parent(parent) {\r\n      let _this = this;\r\n      _this._parent = parent;\r\n    }*/\n    value: function save() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          from: _this._owner,\n          to: _this._localStorageURL,\n          type: 'create',\n          body: {\n            value: Object(utils[\"i\" /* deepClone */])(_this._metadata)\n          }\n        };\n\n        var callback = function callback(reply) {\n          HypertyResource_log.info('[HypertyResource.save] reply: ', reply);\n\n          _this._bus.removeResponseListener(_this._owner, reply.id);\n\n          if (reply.body.code === 200) {\n            if (reply.body.value) {\n              if (!_this._metadata.contentURL) _this._metadata.contentURL = [];\n\n              _this._metadata.contentURL.push(reply.body.value);\n            }\n\n            resolve();\n          } else reject(reply.body.code + ' ' + reply.body.desc);\n        };\n\n        msg.body.value.content = _this._content;\n\n        _this._bus.postMessage(msg, callback, false);\n      });\n    }\n    /**\r\n    * Function to Read HypertyResource\r\n    *\r\n    * @param  {} callback callback to be called with progress information in terms of percentage\r\n    * @return  {Promise}  input optional input parameters\r\n    */\n\n  }, {\n    key: \"read\",\n    value: function read(callback) {\n      var _this = this;\n\n      HypertyResource_log.info('[HypertyResource.read] ', this);\n      return new Promise(function (resolve, reject) {\n        if (_this.content) {\n          resolve(_this);\n        } else {\n          //TODO: use an iteration to get online runtime storages when some are offline\n          var storage = _this._getBestContentURL(_this._metadata.contentURL);\n\n          HypertyResource_log.log('Storage:', storage);\n          var msg = {\n            from: _this._owner,\n            to: storage.url,\n            type: 'read',\n            body: {\n              resource: storage.url + '/' + storage.resource,\n              p2p: true\n            }\n          };\n\n          if (_this.metadata.p2pRequester && _this.metadata.p2pHandler) {\n            msg.body.p2pRequester = _this.metadata.p2pRequester;\n            msg.body.p2pHandler = _this.metadata.p2pHandler;\n          } // get the resource first on the Local Hyperty Resource Storage;\n\n\n          _this._getBestResource(msg, callback).then(function (reply) {\n            HypertyResource_log.info('[HypertyResource] - get locally the resource:', reply);\n            resolve(_this);\n          }).catch(function (reply) {\n            HypertyResource_log.warn('[HypertyResource] - get locally the resource fail', reply); // Generate new message to not use the same id of the last one;\n\n            var msg = {\n              from: _this._owner,\n              to: storage.remoteURL,\n              type: 'read',\n              body: {\n                resource: storage.remoteURL + '/' + storage.resource,\n                p2p: true\n              }\n            };\n\n            if (_this.metadata.p2pRequester && _this.metadata.p2pHandler) {\n              msg.body.p2pRequester = _this.metadata.p2pRequester;\n              msg.body.p2pHandler = _this.metadata.p2pHandler;\n            } // get the resource on the Remote Hyperty Resource Storage;\n\n\n            _this._getBestResource(msg, callback).then(function (reply) {\n              HypertyResource_log.warn('[HypertyResource] - get remotely the resource', reply);\n              resolve(_this);\n            }).catch(function (reply) {\n              HypertyResource_log.warn('[HypertyResource] - get remotely the resource fail', reply);\n              reject(reply.body.code + ' ' + reply.body.desc);\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_getBestResource\",\n    value: function _getBestResource(msg, inProgressCallback) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var waitForResponse = setTimeout(function () {\n          // If Reporter does  not reply the promise is rejected\n          _this._bus.removeResponseListener(_this._owner, id);\n\n          msg.body.code = 408;\n          msg.body.desc = 'Response timeout';\n          return reject(msg);\n        }, 3000);\n\n        var callback = function callback(reply) {\n          HypertyResource_log.log('[HypertyResource.read] reply: ', reply);\n          var id = reply.id;\n          clearTimeout(waitForResponse);\n\n          switch (reply.body.code) {\n            case 200:\n              _this._content = reply.body.value.content; // save locally if not too big\n\n              if (reply.body.value.size < _this.arraybufferSizeLimit) {\n                _this.save();\n              }\n\n              _this._bus.removeResponseListener(_this._owner, id);\n\n              resolve(reply);\n              break;\n\n            case 183:\n              inProgressCallback(reply.body.value);\n              break;\n\n            default:\n              _this._bus.removeResponseListener(_this._owner, id);\n\n              reject(reply);\n              break;\n          }\n        };\n\n        var id = _this._bus.postMessage(msg, callback, false);\n      });\n    } // Remove Hyperty from the local storage\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      HypertyResource_log.info('[HypertyResource.delete]', _this.metadata);\n      var msg = {\n        from: _this._owner,\n        to: _this._localStorageURL,\n        type: 'delete',\n        body: {\n          resources: _this.metadata.contentURL\n        }\n      };\n      return new Promise(function (resolve) {\n        _this._bus.postMessage(msg, function (reply) {\n          if (reply.body.code < 300) resolve(true);else resolve(false);\n        });\n      });\n    }\n  }, {\n    key: \"_getBestContentURL\",\n    value: function _getBestContentURL(contentURLList) {\n      var _this = this;\n\n      var contentURL = contentURLList[0];\n      var splitedResource = contentURL.substr(contentURL.lastIndexOf('/') + 1);\n      var url = _this._localStorageURL; // contentURL.substr(0, contentURL.lastIndexOf('/'));\n\n      var remoteResource = contentURL.substr(0, contentURL.lastIndexOf('/'));\n      return {\n        url: url,\n        resource: splitedResource,\n        remoteURL: remoteResource\n      };\n    }\n  }, {\n    key: \"resourceType\",\n    get: function get() {\n      var _this = this;\n\n      return _this.metadata.resourceType;\n    }\n  }, {\n    key: \"mimetype\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.type;\n    }\n  }, {\n    key: \"content\",\n    get: function get() {\n      var _this = this;\n\n      return _this._content;\n    }\n  }, {\n    key: \"contentURL\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.contentURL;\n    }\n  }, {\n    key: \"shareable\",\n    get: function get() {\n      var _this = this;\n\n      var shareable = _get(_getPrototypeOf(HypertyResource.prototype), \"metadata\", this);\n\n      shareable.resourceType = _this.resourceType;\n      return shareable;\n    }\n  }]);\n\n  return HypertyResource;\n}(syncher_DataObjectChild);\n\n/* harmony default export */ var hyperty_resource_HypertyResource = (HypertyResource_HypertyResource);\n// CONCATENATED MODULE: ./src/utils/ImageTools.js\nfunction ImageTools_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ImageTools_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ImageTools_createClass(Constructor, protoProps, staticProps) { if (protoProps) ImageTools_defineProperties(Constructor.prototype, protoProps); if (staticProps) ImageTools_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar hasBlobConstructor = typeof Blob !== 'undefined' && function () {\n  try {\n    return Boolean(new Blob());\n  } catch (e) {\n    return false;\n  }\n}();\n\nvar hasArrayBufferViewSupport = hasBlobConstructor && typeof Uint8Array !== 'undefined' && function () {\n  try {\n    return new Blob([new Uint8Array(100)]).size === 100;\n  } catch (e) {\n    return false;\n  }\n}();\n\nvar hasToBlobSupport = typeof HTMLCanvasElement !== \"undefined\" ? HTMLCanvasElement.prototype.toBlob : false;\nvar hasBlobSupport = hasToBlobSupport || typeof Uint8Array !== 'undefined' && typeof ArrayBuffer !== 'undefined' && typeof atob !== 'undefined';\nvar hasReaderSupport = typeof FileReader !== 'undefined' || typeof URL !== 'undefined';\n\nvar ImageTools =\n/*#__PURE__*/\nfunction () {\n  function ImageTools() {\n    ImageTools_classCallCheck(this, ImageTools);\n  }\n\n  ImageTools_createClass(ImageTools, null, [{\n    key: \"resize\",\n    value: function resize(file, maxDimensions, callback) {\n      if (typeof maxDimensions === 'function') {\n        callback = maxDimensions;\n        maxDimensions = {\n          width: 640,\n          height: 480\n        };\n      }\n\n      var maxWidth = maxDimensions.width;\n      var maxHeight = maxDimensions.height;\n\n      if (!ImageTools.isSupported() || !file.type.match(/image.*/)) {\n        callback(file, false);\n        return false;\n      }\n\n      if (file.type.match(/image\\/gif/)) {\n        // Not attempting, could be an animated gif\n        callback(file, false); // TODO: use https://github.com/antimatter15/whammy to convert gif to webm\n\n        return false;\n      }\n\n      var image = document.createElement('img');\n\n      image.onload = function (imgEvt) {\n        var width = image.width;\n        var height = image.height;\n        var isTooLarge = false;\n\n        if (width >= height && width > maxDimensions.width) {\n          // width is the largest dimension, and it's too big.\n          height *= maxDimensions.width / width;\n          width = maxDimensions.width;\n          isTooLarge = true;\n        } else if (height > maxDimensions.height) {\n          // either width wasn't over-size or height is the largest dimension\n          // and the height is over-size\n          width *= maxDimensions.height / height;\n          height = maxDimensions.height;\n          isTooLarge = true;\n        }\n\n        if (!isTooLarge) {\n          // early exit; no need to resize\n          callback(file, false);\n          return;\n        }\n\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(image, 0, 0, width, height);\n\n        if (hasToBlobSupport) {\n          canvas.toBlob(function (blob) {\n            callback(blob, true);\n          }, file.type);\n        } else {\n          var blob = ImageTools._toBlob(canvas, file.type);\n\n          callback(blob, true);\n        }\n      };\n\n      ImageTools._loadImage(image, file);\n\n      return true;\n    }\n  }, {\n    key: \"_toBlob\",\n    value: function _toBlob(canvas, type) {\n      var dataURI = canvas.toDataURL(type);\n      var dataURIParts = dataURI.split(',');\n      var byteString;\n\n      if (dataURIParts[0].indexOf('base64') >= 0) {\n        // Convert base64 to raw binary data held in a string:\n        byteString = atob(dataURIParts[1]);\n      } else {\n        // Convert base64/URLEncoded data component to raw binary data:\n        byteString = decodeURIComponent(dataURIParts[1]);\n      }\n\n      var arrayBuffer = new ArrayBuffer(byteString.length);\n      var intArray = new Uint8Array(arrayBuffer);\n\n      for (var i = 0; i < byteString.length; i += 1) {\n        intArray[i] = byteString.charCodeAt(i);\n      }\n\n      var mimeString = dataURIParts[0].split(':')[1].split(';')[0];\n      var blob = null;\n\n      if (hasBlobConstructor) {\n        blob = new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], {\n          type: mimeString\n        });\n      } else {\n        var bb = new BlobBuilder();\n        bb.append(arrayBuffer);\n        blob = bb.getBlob(mimeString);\n      }\n\n      return blob;\n    }\n  }, {\n    key: \"_loadImage\",\n    value: function _loadImage(image, file, callback) {\n      if (typeof URL === 'undefined') {\n        var reader = new FileReader();\n\n        reader.onload = function (evt) {\n          image.src = evt.target.result;\n\n          if (callback) {\n            callback();\n          }\n        };\n\n        reader.readAsDataURL(file);\n      } else {\n        image.src = URL.createObjectURL(file);\n\n        if (callback) {\n          callback();\n        }\n      }\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof HTMLCanvasElement !== 'undefined' && hasBlobSupport && hasReaderSupport;\n    }\n  }]);\n\n  return ImageTools;\n}();\n\n\n// CONCATENATED MODULE: ./src/hyperty-resource/FileHypertyResource.js\nfunction FileHypertyResource_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { FileHypertyResource_typeof = function _typeof(obj) { return typeof obj; }; } else { FileHypertyResource_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return FileHypertyResource_typeof(obj); }\n\nfunction FileHypertyResource_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction FileHypertyResource_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction FileHypertyResource_createClass(Constructor, protoProps, staticProps) { if (protoProps) FileHypertyResource_defineProperties(Constructor.prototype, protoProps); if (staticProps) FileHypertyResource_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction FileHypertyResource_possibleConstructorReturn(self, call) { if (call && (FileHypertyResource_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return FileHypertyResource_assertThisInitialized(self); }\n\nfunction FileHypertyResource_getPrototypeOf(o) { FileHypertyResource_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FileHypertyResource_getPrototypeOf(o); }\n\nfunction FileHypertyResource_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) FileHypertyResource_setPrototypeOf(subClass, superClass); }\n\nfunction FileHypertyResource_setPrototypeOf(o, p) { FileHypertyResource_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FileHypertyResource_setPrototypeOf(o, p); }\n\nfunction FileHypertyResource_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\n// Log System\n\nvar FileHypertyResource_log = loglevel[\"getLogger\"]('FileHypertyResource');\n\n\n\n\nvar FileHypertyResource_FileHypertyResource =\n/*#__PURE__*/\nfunction (_HypertyResource) {\n  FileHypertyResource_inherits(FileHypertyResource, _HypertyResource);\n\n  /**\r\n  * FileHypertyResource constructor\r\n  *\r\n  * @param  {URL} owner HypertyURL of the Hyperty handling this resource\r\n  * @param  {URL} runtime Runtime URL where this resource is hosted\r\n  * @param  {Bus} bus sandbox message bus\r\n  * @param  {DataObject} parent Parent Data Object where the HypertyResource is handled as a child\r\n  * @param  {File} file file to be encoded as HypertyResource\r\n  * @param  {Boolean} isReporter indicates if parent is Reporter or an Observer\r\n  * @param  {Array} input optional input parameters\r\n  */\n  function FileHypertyResource(isSender, input) {\n    var _this2;\n\n    FileHypertyResource_classCallCheck(this, FileHypertyResource);\n\n    _this2 = FileHypertyResource_possibleConstructorReturn(this, FileHypertyResource_getPrototypeOf(FileHypertyResource).call(this, isSender, input));\n\n    var _this = FileHypertyResource_assertThisInitialized(FileHypertyResource_assertThisInitialized(_this2));\n\n    _this.metadata.resourceType = 'file';\n    return _this2;\n  }\n\n  FileHypertyResource_createClass(FileHypertyResource, [{\n    key: \"init\",\n    value: function init(file) {\n      var _this = this;\n\n      if (!file) throw new Error('[FileHypertyResource.constructor] missing mandatory *file* input ');\n      return new Promise(function (resolve, reject) {\n        _this._metadata.name = file.name;\n        _this._metadata.lastModified = file.lastModified;\n        _this._metadata.size = file.size;\n        _this._metadata.mimetype = file.type;\n        FileHypertyResource_log.log('[FileHypertyResource.init] file: ', file);\n\n        if (_this._isSender) {\n          var mimetype = file.type.split('/')[0];\n\n          switch (mimetype) {\n            case 'image':\n              _this._getImagePreview(file).then(function (preview) {\n                _this._metadata.preview = preview;\n                _this._content = file;\n                resolve();\n              });\n\n              break;\n\n            default:\n              _this._content = file;\n              resolve();\n              break;\n          } // if too big lets store as File and asArray Buffer\n          //  if (file.size > _this.arraybufferSizeLimit) {\n\n          /*  } else {\r\n                let reader = new FileReader();\r\n                reader.onload = function(theFile) {\r\n                  log.log('[FileHypertyResource.init] file loaded ', theFile);\r\n                  _this._content = theFile.target.result;\r\n                resolve();\r\n                }\r\n                reader.readAsArrayBuffer(file);\r\n              }*/\n\n        } else {\n          _this._content = file.content;\n          if (file.preview) _this._metadata.preview = file.preview;\n          resolve();\n        }\n      });\n    }\n  }, {\n    key: \"_getImagePreview\",\n    value: function _getImagePreview(image) {\n      var reader = new FileReader();\n      return new Promise(function (resolve, reject) {\n        ImageTools.resize(image, {\n          width: 100,\n          // maximum width\n          height: 100 // maximum height\n\n        }, function (blob, didItResize) {\n          // didItResize will be true if it managed to resize it, otherwise false (and will return the original file as 'blob')\n          if (didItResize) {\n            reader.readAsDataURL(blob);\n\n            reader.onload = function (theImage) {\n              resolve(theImage.target.result);\n            };\n          } else {\n            FileHypertyResource_log.warn('[FileHypertyResource._getImagePreview] unable to create image preview from original image ');\n            resolve(undefined);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"toMessage\",\n\n    /**\r\n    * Share file as a data object child of a data object parent\r\n    *\r\n    * @param  {string} children Data Object Parent children name where the file is shared\r\n    */\n\n    /*  share(children) {\r\n        let _this = this;\r\n    \r\n        return new Promise(function(resolve, reject) {\r\n          //to be improved and adapted\r\n    \r\n          if (!_this._isSender) return reject('[FileHypertyResource.share] Observers can not share files');\r\n    \r\n          let file2share = _this._metadata;\r\n          file2share.type = _this._type;\r\n    \r\n          _this._parent.addChild(children, file2share).then(function(dataObjectChild) {\r\n            log.log('[FileHypertyResource.share] object child: ', dataObjectChild);\r\n    \r\n            let sharedFile = dataObjectChild.data;\r\n    \r\n            resolve(sharedFile);\r\n    \r\n          }).catch(function(reason) {\r\n            log.error('Reason:', reason);\r\n            reject(reason);\r\n          });\r\n    \r\n        });\r\n    \r\n      }*/\n\n    /**\r\n    * Returns file content optimised to be displayed in a message line\r\n    *\r\n    * @param  {string} children Data Object Parent children name where the file is shared\r\n    */\n    value: function toMessage() {//TODO: to be implemented. It should return HTML with img attribute as a thumbnail plus the name.\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.name;\n    }\n  }, {\n    key: \"preview\",\n    get: function get() {\n      var _this = this;\n\n      return _this._metadata.preview;\n    }\n  }]);\n\n  return FileHypertyResource;\n}(hyperty_resource_HypertyResource);\n\n/* harmony default export */ var hyperty_resource_FileHypertyResource = (FileHypertyResource_FileHypertyResource);\n// CONCATENATED MODULE: ./src/hyperty-resource/HypertyResourceFactory.js\nfunction HypertyResourceFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction HypertyResourceFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HypertyResourceFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) HypertyResourceFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) HypertyResourceFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* The Hyperty Resource Data Model is used to model resouces handled by Hyperties and Data Objects including chat messages, files, real time human audio and video..\r\n*\r\n*/\n\n\nvar HypertyResourceFactory_HypertyResourceFactory =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * HypertyResourceFactory constructor\r\n  *\r\n  */\n  function HypertyResourceFactory() {\n    HypertyResourceFactory_classCallCheck(this, HypertyResourceFactory);\n  }\n\n  HypertyResourceFactory_createClass(HypertyResourceFactory, [{\n    key: \"createHypertyResource\",\n    value: function createHypertyResource(isSender, type, metadata) {\n      var newHypertyResource;\n\n      switch (type) {\n        case 'file':\n          newHypertyResource = new hyperty_resource_FileHypertyResource(isSender, metadata);\n          break;\n\n        default:\n          throw new Error('[HypertyResourceFactory.createHypertyResource] not supported type: ', type);\n          break;\n      }\n\n      return newHypertyResource;\n    }\n  }, {\n    key: \"createHypertyResourceWithContent\",\n    value: function createHypertyResourceWithContent(isSender, type, content, metadata) {\n      var newHypertyResource;\n      return new Promise(function (resolve) {\n        switch (type) {\n          case 'file':\n            newHypertyResource = new hyperty_resource_FileHypertyResource(isSender, metadata);\n            break;\n\n          default:\n            reject();\n            break;\n        }\n\n        newHypertyResource.init(content).then(function () {\n          return newHypertyResource.save(); // skip save?\n        }).then(function () {\n          resolve(newHypertyResource);\n        });\n      });\n    }\n  }]);\n\n  return HypertyResourceFactory;\n}();\n\n/* harmony default export */ var hyperty_resource_HypertyResourceFactory = (HypertyResourceFactory_HypertyResourceFactory);\n// CONCATENATED MODULE: ./src/syncher/DataObject.js\nfunction DataObject_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DataObject_typeof = function _typeof(obj) { return typeof obj; }; } else { DataObject_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DataObject_typeof(obj); }\n\nfunction DataObject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObject_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObject_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObject_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar DataObject_log = loglevel[\"getLogger\"]('DataObject');\n\n\n\n\n\n/**\r\n * Main extension class for observers and reporters, with common properties and methods.\r\n * Children management is common for observers and reporters.\r\n */\n\nvar DataObject_DataObject =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _version: number\r\n    _owner: HypertyURL\r\n  _url: ObjectURL\r\n  _schema: Schema\r\n  _bus: MiniBus\r\n  _status: on | paused\r\n  _syncObj: SyncData\r\n    _children: { id: DataObjectChild }\r\n  _childrenListener: [MsgListener]\r\n    ----event handlers----\r\n  _onAddChildHandler: (event) => void\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's\r\n   */\n  function DataObject(input) {\n    DataObject_classCallCheck(this, DataObject);\n\n    var _this = this;\n\n    function throwMandatoryParmMissingError(par) {\n      throw '[DataObject] ' + par + ' mandatory parameter is missing';\n    }\n\n    input.syncher ? _this._syncher = input.syncher : throwMandatoryParmMissingError('syncher');\n    input.url ? _this._url = input.url : throwMandatoryParmMissingError('url');\n    input.created ? _this._created = input.created : throwMandatoryParmMissingError('created');\n    input.reporter ? _this._reporter = input.reporter : throwMandatoryParmMissingError('reporter');\n    input.runtime ? _this._runtime = input.runtime : throwMandatoryParmMissingError('runtime');\n    input.schema ? _this._schema = input.schema : throwMandatoryParmMissingError('schema');\n    input.name ? _this._name = input.name : throwMandatoryParmMissingError('name');\n    _this._status = input.status;\n\n    if (input.data) {\n      _this._syncObj = new ProxyObject(input.data);\n    } else {\n      _this._syncObj = new ProxyObject({});\n    }\n\n    _this._childrens = input.childrens; //TODO: For Further Study\n\n    _this._mutual = input.mutual;\n    _this._version = 0;\n    _this._childId = 1;\n    _this._childrenListener; //bus listener for children\n\n    _this._onAddChildrenHandler; //Hyperty side handlers to process child objects created by remote Hyperties\n\n    _this._resumed = input.resume;\n\n    if (input.resume) {\n      _this._version = input.version;\n    }\n\n    _this._owner = input.syncher._owner;\n    _this._bus = input.syncher._bus;\n    if (input.description) _this._description = input.description;\n    if (input.tags) _this._tags = input.tags;\n    if (input.resources) _this._resources = input.resources;\n    if (input.observerStorage) _this._observerStorage = input.observerStorage;\n    if (input.publicObservation) _this._publicObservation = input.publicObservation;\n    _this._metadata = Object.assign(input); //    console.log('[DataObject] mutual ', _this._metadata.mutual);\n\n    if (!input.hasOwnProperty('resume') || input.hasOwnProperty('resume') && !input.resume) {\n      _this._metadata.lastModified = _this._metadata.created;\n    }\n\n    delete _this._metadata.data;\n    delete _this._metadata.syncher;\n    delete _this._metadata.authorise;\n    _this._hypertyResourceFactory = new hyperty_resource_HypertyResourceFactory();\n    _this._childrenObjects = {};\n    _this._sharedChilds = []; //childObjects that were not sent yet to Reporters\n\n    if (input.backup && _this._childrens) {\n      var lastHeartbeat = input.hasOwnProperty('childrenObjects') && input.childrenObjects.hasOwnProperty('heartbeat') ? input.childrenObjects.heartbeat : 0;\n      _this._heartBeat = new syncher_HeartBeat(_this._bus, _this._owner, _this._syncher._runtimeUrl, this, 15, lastHeartbeat);\n      if (_this._resumed) _this._heartBeat.start(true, _this.metadata.isReporter);else _this._heartBeat.start(false, _this.metadata.isReporter);\n    }\n  }\n\n  DataObject_createClass(DataObject, [{\n    key: \"_getLastChildId\",\n    value: function _getLastChildId() {\n      var _this = this;\n\n      var childIdInt = 0;\n      var childIdString = _this._owner + '#' + childIdInt;\n      Object.keys(_this._childrens).filter(function (key) {\n        if (_this._childrens[key].childId > childIdString) {\n          childIdString = _this._childrens[key].childId;\n        }\n      });\n      return childIdInt = Number(childIdString.split('#')[1]);\n    }\n  }, {\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      var _this2 = this;\n\n      var _this = this;\n\n      var childBaseURL = _this._url + '/children/';\n      DataObject_log.log('[Data Object - AllocateListeners] - ', _this._childrens);\n\n      if (_this._childrens) {\n        //      _this._childrens.forEach((child) => {\n        var childURL = childBaseURL;\n\n        var listener = _this._bus.addListener(childURL, function (msg) {\n          //ignore msg sent by himself\n          if (msg.from !== _this2._owner) {\n            DataObject_log.log('DataObject-Children-RCV: ', msg);\n\n            switch (msg.type) {\n              case 'create':\n                _this._onChildCreate(msg);\n\n                break;\n\n              case 'delete':\n                DataObject_log.log(msg);\n                break;\n\n              default:\n                _this._changeChildren(msg);\n\n                break;\n            }\n          } //        });\n\n\n          _this._childrenListener = listener;\n        });\n      }\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      if (_this._childrenListener) {\n        _this._childrenListener.remove();\n\n        Object.keys(_this._childrenObjects).forEach(function (child) {\n          /*      if (children === 'resources') {\r\n                  Object.keys(_this._childrenObjects[children]).forEach((child) => {\r\n                    _this._childrenObjects[children][child]._releaseListeners();\r\n                  });\r\n                } else {*/\n          _this._childrenObjects[child]._releaseListeners(); //      }\n\n        });\n      }\n    }\n    /**\r\n     * Sync Data Object Observer with last version of Data Object Reporter. Useful for Resumes\r\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      var _this3 = this;\n\n      var _this = this;\n\n      DataObject_log.info('[DataObject.sync] synchronising ');\n      return new Promise(function (resolve, reject) {\n        var criteria = {};\n        if (_this3.metadata.backupRevision) criteria.backupRevision = _this3.metadata.backupRevision;\n\n        _this._syncher.read(_this._metadata.url, criteria).then(function (value) {\n          DataObject_log.info('[DataObject.sync] value to sync: ', value);\n          Object.assign(_this.data, Object(utils[\"i\" /* deepClone */])(value.data));\n          _this._version = value.version;\n          _this._metadata.lastModified = value.lastModified; //TODO: check first if there are new childrenObjects to avoid overhead\n\n          if (value.childrenObjects) {\n            _this.resumeChildrens(value.childrenObjects);\n\n            _this._storeChildrens();\n\n            resolve(true);\n          } else resolve(true);\n          /*if (value.version != _this._version) {\r\n            log.info('[DataObject.sync] updating existing data: ', _this.data);\r\n              Object.assign(_this.data || {}, deepClone(value.data));\r\n              _this._metadata = deepClone(value);\r\n              delete _this._metadata.data;\r\n              _this._version = value.version;\r\n            } else {\r\n            log.info('[DataObject.sync] existing data is updated: ', value);\r\n          }*/\n\n        }).catch(function (reason) {\n          DataObject_log.info('[DataObject.sync] sync failed: ', reason);\n          resolve(false);\n        });\n      });\n    }\n    /**\r\n     *\r\n     */\n\n  }, {\n    key: \"resumeChildrens\",\n    value: function resumeChildrens(childrens) {\n      var _this4 = this;\n\n      var _this = this;\n\n      var childIdString = this._owner.split('/')[3] + '#' + this._childId; //setup childrens data from subscription\n      //    Object.keys(childrens).forEach((childrenResource) => {\n      //      let children = childrens[childrenResource];\n\n\n      var children = childrens; //_this._childrenObjects[childrenResource] = {};\n\n      Object.keys(children).forEach(function (childId) {\n        var newChild = false;\n        /*        if (!_this._childrenObjects.hasOwnProperty(childrenResource))\r\n                  _this._childrenObjects[childrenResource] = {};*/\n        // check if it is the last heartbeat\n\n        if (childId === 'heartbeat') {//          _this._heartBeat.onNewHeartbeat(children[childId].value);\n          //          _this._heartBeat.start(true);\n        } else if (children[childId].hasOwnProperty('value') && children[childId].value.resourceType && !_this._childrenObjects.hasOwnProperty(childId)) {\n          _this._childrenObjects[childId] = _this._resumeHypertyResource(children[childId]);\n          newChild = true;\n        } else if (!_this._childrenObjects.hasOwnProperty(childId)) {\n          _this._childrenObjects[childId] = _this._resumeChild(children[childId]);\n          DataObject_log.log('[DataObject.resumeChildrens] new DataObjectChild: ', _this._childrenObjects[childId]);\n          newChild = true;\n        }\n\n        if (newChild && childId > childIdString) {\n          childIdString = childId;\n          DataObject_log.log('[DataObjectReporter.resumeChildrens] - resuming: ', _this4._childrenObjects[childId]);\n        }\n      }); //    });\n\n      this._childId = Number(childIdString.split('#')[1]);\n    }\n  }, {\n    key: \"_resumeChild\",\n    value: function _resumeChild(input) {\n      var _this = this;\n\n      var childInput = input.value;\n      childInput.parentObject = _this;\n      childInput.parent = _this._url;\n      var child = new syncher_DataObjectChild(childInput);\n      child.identity = input.identity;\n      var event = {\n        type: 'create',\n        from: child.reporter,\n        url: child.parent,\n        value: child.data,\n        childId: child.url,\n        identity: child.identity,\n        child: child\n      };\n\n      if (child.resourceType) {\n        event.resource = child;\n      }\n\n      if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\n      return child;\n    }\n  }, {\n    key: \"_resumeHypertyResource\",\n    value: function _resumeHypertyResource(input) {\n      var _this = this;\n\n      var childInput = input.value;\n      childInput.parentObject = _this;\n      childInput.parent = _this._url;\n\n      var hypertyResource = _this._hypertyResourceFactory.createHypertyResource(false, childInput.resourceType, childInput);\n\n      hypertyResource.identity = input.identity;\n      var event = {\n        type: 'create',\n        from: hypertyResource.reporter,\n        url: hypertyResource.parent,\n        value: hypertyResource.data,\n        childId: hypertyResource.url,\n        identity: hypertyResource.identity,\n        child: hypertyResource\n      };\n\n      if (hypertyResource.resourceType) {\n        event.resource = hypertyResource;\n      }\n\n      if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\n      return hypertyResource;\n    }\n    /**\r\n     * All Metadata about the Data Object\r\n     * @type {Object} -\r\n     */\n\n  }, {\n    key: \"pause\",\n\n    /**\r\n     * @ignore\r\n     */\n    value: function pause() {\n      //TODO: this feature needs more analise\n      throw 'Not implemented';\n    }\n    /**\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      //TODO: this feature needs more analise\n      throw 'Not implemented';\n    }\n    /**\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      //TODO: should remove the subscription and send message unsubscribe?\n      throw 'Not implemented';\n    }\n    /**\r\n     * Create and add a DataObjectChild to a children collection.\r\n     * @param {JSON} initialData - Initial data of the child\r\n     * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n     * @param  {SyncChildMetadata} input - (optional) All additional metadata about the DataObjectChild.\r\n     * @return {Promise<DataObjectChild>} - Return Promise to a new DataObjectChild.\r\n     */\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(initialData, identity, input) {\n      var _this = this;\n\n      var newChild; //returns promise, in the future, the API may change to asynchronous call\n\n      return new Promise(function (resolve) {\n        var msgChildPath = _this._url + '/children/';\n\n        var childInput = _this._getChildInput(input);\n\n        childInput.data = initialData; //      childInput.children = children;\n\n        newChild = new syncher_DataObjectChild(childInput);\n        if (identity) newChild.identity = identity;\n        newChild.share();\n        console.log('[DataObject.addChild] added ', newChild);\n        newChild.onChange(function (event) {\n          _this._onChange(event, {\n            path: msgChildPath,\n            childId: childInput.url\n          });\n        }); //     if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n        _this._childrenObjects[childInput.url] = newChild;\n        resolve(newChild);\n      });\n    }\n  }, {\n    key: \"_deleteChildrens\",\n    value: function _deleteChildrens() {\n      var _this = this;\n\n      var deletePromises = [];\n      return new Promise(function (resolve) {\n        if (_this.childrens) {\n          DataObject_log.log('[DataObject.deleteChildrens]', _this.childrens);\n          var child;\n\n          for (child in _this.childrens) {\n            //          let child;\n\n            /*          if (children === 'resources') {\r\n                        for (child in _this.childrens[children]) {\r\n                          let childObj = _this.childrens[children][child];\r\n                          log.log('[DataObject._deleteChildrens] child',childObj);\r\n                          if (childObj.metadata.hasOwnProperty('resourceType'))\r\n                            deletePromises.push(_this.childrens[children][child].delete());\r\n                        }\r\n                       } else {*/\n            var childObj = _this.childrens[child];\n            DataObject_log.log('[DataObject._deleteChildrens] child', childObj);\n            if (childObj.metadata.hasOwnProperty('resourceType')) deletePromises.push(_this.childrens[child].delete());\n          } //        }\n\n\n          DataObject_log.log('[DataObject._deleteChildrens] promises ', deletePromises);\n\n          if (deletePromises.length > 0) {\n            Promise.all(deletePromises).then(function () {\n              resolve('[DataObject._deleteChildrens] done');\n            });\n          } else resolve('[DataObject._deleteChildrens] nothing to delete');\n        }\n      });\n    }\n  }, {\n    key: \"_getChildInput\",\n    value: function _getChildInput(input) {\n      var _this = this;\n\n      var childInput = Object.assign({}, input);\n      _this._childId++; //removing domain from childId to avoid backup issues with '.'\n\n      childInput.url = _this._owner.split('/')[3] + '#' + _this._childId;\n      childInput.parentObject = _this;\n      childInput.reporter = _this._owner;\n      childInput.created = new Date().toISOString();\n      childInput.runtime = _this._syncher._runtimeUrl;\n      childInput.p2pHandler = _this._syncher._p2pHandler;\n      childInput.p2pRequester = _this._syncher._p2pRequester;\n      childInput.schema = _this._schema;\n      childInput.parent = _this.url;\n      childInput.mutual = _this.metadata.mutual; //    console.log('[DataObject._getChildInput] mutual ', childInput.mutual);\n\n      return childInput;\n    }\n  }, {\n    key: \"addHypertyResource\",\n    value: function addHypertyResource(type, resource, identity, input) {\n      var _this = this; //returns promise, in the future, the API may change to asynchronous call\n\n\n      return new Promise(function (resolve) {\n        var hypertyResource;\n        var msgChildPath = _this._url + '/children/';\n\n        var childInput = _this._getChildInput(input); //      childInput.children = children;\n\n\n        _this._hypertyResourceFactory.createHypertyResourceWithContent(true, type, resource, childInput).then(function (resource) {\n          hypertyResource = resource;\n          if (identity) hypertyResource.identity = identity;\n          hypertyResource.share();\n          DataObject_log.log('[DataObject.addHypertyResource] added ', hypertyResource);\n          hypertyResource.onChange(function (event) {\n            _this._onChange(event, {\n              path: msgChildPath,\n              childId: hypertyResource.childId\n            });\n          }); //        if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n          _this._childrenObjects[hypertyResource.childId] = hypertyResource;\n          resolve(hypertyResource);\n        });\n      });\n    }\n    /**\r\n     * Setup the callback to process create and delete of childrens.\r\n     * @param {function(event: MsgEvent)} callback\r\n     * TODO: add childrenId to support different handlers per children\r\n     */\n\n  }, {\n    key: \"onAddChild\",\n    value: function onAddChild(callback) {\n      this._onAddChildrenHandler = callback;\n    } //FLOW-IN: message received from a remote DataObject -> addChild\n\n  }, {\n    key: \"_onChildCreate\",\n    value: function _onChildCreate(msg) {\n      var _this = this; //    console.log('[DataObject._onChildCreate] receivedBy ' + _this._owner + ' : ', msg);\n      // if this is an heartbeat msg foward it to heatbeat handler\n\n\n      if (msg.body.resource === 'heartbeat') {\n        console.log('[DataObject._onChildCreate] new heartbeat received ' + msg.body.value);\n\n        this._heartBeat.onNewHeartbeat(msg.body.value);\n      } else {\n        console.log('[DataObject._onChildCreate] new child receivedBy ' + _this._owner + ' : ', msg);\n        var response = {\n          from: msg.to,\n          to: msg.from,\n          type: 'response',\n          id: msg.id,\n          body: {\n            code: 100\n          }\n        };\n\n        _this._bus.postMessage(response);\n\n        if (msg.body.value.resourceType) {\n          _this._onHypertyResourceAdded(msg);\n        } else _this._onChildAdded(msg);\n      }\n    }\n  }, {\n    key: \"_onChildAdded\",\n    value: function _onChildAdded(msg) {\n      var _this = this;\n\n      var childInput = Object(utils[\"i\" /* deepClone */])(msg.body.value);\n      childInput.parentObject = _this; //    let children = childInput.children;\n\n      var newChild = new syncher_DataObjectChild(childInput);\n      newChild.identity = msg.body.identity; //    if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n      _this._childrenObjects[childInput.url] = newChild;\n      if (msg.to === _this.metadata.url) newChild.store();\n\n      _this._hypertyEvt(msg, newChild);\n    }\n  }, {\n    key: \"_onHypertyResourceAdded\",\n    value: function _onHypertyResourceAdded(msg) {\n      var _this = this;\n\n      var input = msg.body.value;\n      var hypertyResource; //    let children = input.children;\n\n      input.parentObject = _this;\n      hypertyResource = _this._hypertyResourceFactory.createHypertyResource(false, input.resourceType, input);\n      hypertyResource.identity = msg.body.identity; //    if (!_this._childrenObjects.hasOwnProperty(children)) _this._childrenObjects[children] = {};\n\n      _this._childrenObjects[hypertyResource.childId] = hypertyResource;\n\n      _this._hypertyEvt(msg, hypertyResource); // locally store messages that are directly sent to the hyperty\n      // ie to sync with messages sent when offline\n\n\n      if (msg.to === _this.metadata.url) hypertyResource.store();\n    }\n  }, {\n    key: \"_hypertyEvt\",\n    value: function _hypertyEvt(msg, child) {\n      var _this = this;\n\n      var event = {\n        type: msg.type,\n        from: msg.from,\n        url: msg.to,\n        value: child.data,\n        childId: child.url,\n        identity: msg.body.identity,\n        child: child\n      };\n\n      if (child.resourceType) {\n        event.resource = child;\n      }\n\n      if (_this._onAddChildrenHandler) _this._onAddChildrenHandler(event);\n    } //send delta messages to subscriptions\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(event, childInfo) {\n      var _this = this;\n\n      _this._metadata.lastModified = new Date().toISOString();\n      _this._version++;\n\n      if (_this._status === 'live') {\n        //FLOW-OUT: this message will be sent directly to a resource changes address: MessageBus\n        var changeMsg = {\n          type: 'update',\n          from: _this._url,\n          to: _this._url + '/changes',\n          body: {\n            version: _this._version,\n            source: _this._owner,\n            attribute: event.field,\n            lastModified: _this._metadata.lastModified\n          }\n        };\n        DataObject_log.log('[DataObject - _onChange] - ', event, childInfo, changeMsg);\n\n        if (event.oType === ObjectType.OBJECT) {\n          if (event.cType !== ChangeType.REMOVE) {\n            changeMsg.body.value = Object(utils[\"i\" /* deepClone */])(event.data);\n          }\n        } else {\n          changeMsg.body.attributeType = event.oType;\n          changeMsg.body.value = event.data;\n\n          if (event.cType !== ChangeType.UPDATE) {\n            changeMsg.body.operation = event.cType;\n          }\n        } //childInfo must have (path, childId)\n\n\n        if (childInfo) {\n          changeMsg.to = childInfo.path;\n          changeMsg.body.resource = childInfo.childId;\n        } //TODO: For Further Study\n\n\n        if (!_this.data._mutual) changeMsg.body.mutual = _this._mutual;\n\n        _this._bus.postMessage(changeMsg);\n      }\n    } //FLOW-IN: delta message received from a remote DataObjectReporter or DataObjectChild when changing data\n\n  }, {\n    key: \"_changeObject\",\n    value: function _changeObject(syncObj, msg) {\n      var _this = this; //TODO: update version ?\n      //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?\n      //will we need to confirm the reception ?\n\n\n      if (_this._version + 1 <= msg.body.version) {\n        _this._version = msg.body.version;\n        var path = msg.body.attribute;\n        var value;\n        if (DataObject_typeof(msg.body.value) === 'object') value = Object(utils[\"i\" /* deepClone */])(msg.body.value);else value = msg.body.value;\n        var findResult = syncObj.findBefore(path);\n\n        if (msg.body.lastModified) {\n          _this._metadata.lastModified = msg.body.lastModified;\n        } else {\n          _this._metadata.lastModified = new Date().toISOString();\n        }\n\n        if (msg.body.attributeType === ObjectType.ARRAY) {\n          if (msg.body.operation === ChangeType.ADD) {\n            var arr = findResult.obj;\n            var index = findResult.last;\n            Array.prototype.splice.apply(arr, [index, 0].concat(value));\n          } else if (msg.body.operation === ChangeType.REMOVE) {\n            var _arr = findResult.obj;\n            var _index = findResult.last;\n\n            _arr.splice(_index, value);\n          } else {\n            findResult.obj[findResult.last] = value; // UPDATE\n          }\n        } else {\n          if (msg.body.hasOwnProperty('value')) {\n            findResult.obj[findResult.last] = value; // UPDATE or ADD\n          } else {\n            delete findResult.obj[findResult.last]; // REMOVE\n          }\n        }\n      } else {\n        //TODO: how to handle unsynchronized versions?\n        DataObject_log.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');\n      }\n    } //FLOW-IN: message received from a remote DataObjectChild when changing data\n\n  }, {\n    key: \"_changeChildren\",\n    value: function _changeChildren(msg) {\n      var _this = this;\n\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(msg.to);\n      var identity = dividedURL.identity; //    const resource = identity ? identity.substring(identity.lastIndexOf('/') + 1) : undefined;\n\n      var childId = msg.body.resource;\n      var children = _this._childrenObjects[childId];\n      DataObject_log.log('Change children: ', _this._owner, msg, resource);\n\n      if (children) {\n        _this._changeObject(children._syncObj, msg);\n      } else {\n        DataObject_log.warn('No children found for: ', childId);\n      }\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n    /**\r\n     * Object URL of reporter or observer\r\n     * @type {ObjectURL}\r\n     */\n\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._url;\n    }\n    /**\r\n     * Object schema URL (this field is not yet stable, and is subsject to change)\r\n     * @type {SchemaURL}\r\n     */\n\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._schema;\n    }\n    /**\r\n     * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)\r\n     * @type {Status} - Enum of: on | paused\r\n     */\n\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this._status;\n    }\n    /**\r\n     * Data structure to be synchronized.\r\n     * @type {JSON} - JSON structure that should follow the defined schema, if any.\r\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._syncObj.data;\n    }\n    /**\r\n     * All created children's since the subscription, doesn't contain all children's since reporter creation.\r\n     * @type {Object<ChildId, DataObjectChild>}\r\n     */\n\n  }, {\n    key: \"childrens\",\n    get: function get() {\n      return this._childrenObjects;\n    }\n  }]);\n\n  return DataObject;\n}();\n\n/* harmony default export */ var syncher_DataObject = (DataObject_DataObject);\n// CONCATENATED MODULE: ./src/syncher/DataObjectReporter.js\nfunction DataObjectReporter_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DataObjectReporter_typeof = function _typeof(obj) { return typeof obj; }; } else { DataObjectReporter_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DataObjectReporter_typeof(obj); }\n\nfunction DataObjectReporter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObjectReporter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObjectReporter_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObjectReporter_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObjectReporter_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction DataObjectReporter_possibleConstructorReturn(self, call) { if (call && (DataObjectReporter_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return DataObjectReporter_assertThisInitialized(self); }\n\nfunction DataObjectReporter_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { DataObjectReporter_get = Reflect.get; } else { DataObjectReporter_get = function _get(target, property, receiver) { var base = DataObjectReporter_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return DataObjectReporter_get(target, property, receiver || target); }\n\nfunction DataObjectReporter_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = DataObjectReporter_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction DataObjectReporter_getPrototypeOf(o) { DataObjectReporter_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return DataObjectReporter_getPrototypeOf(o); }\n\nfunction DataObjectReporter_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) DataObjectReporter_setPrototypeOf(subClass, superClass); }\n\nfunction DataObjectReporter_setPrototypeOf(o, p) { DataObjectReporter_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return DataObjectReporter_setPrototypeOf(o, p); }\n\nfunction DataObjectReporter_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar DataObjectReporter_log = loglevel[\"getLogger\"]('DataObjectReporter');\n\n\n/**\r\n * The class returned from the Syncher create call.\r\n * To be used as a reporter point, changes will be submited to DataObjectObserver instances.\r\n */\n\nvar DataObjectReporter_DataObjectReporter =\n/*#__PURE__*/\nfunction (_DataObject) {\n  DataObjectReporter_inherits(DataObjectReporter, _DataObject);\n\n  /* private\r\n  _subscriptions: <hypertyUrl: { status: string } }>\r\n    ----event handlers----\r\n  _onSubscriptionHandler: (event) => void\r\n  _onResponseHandler: (event) => void\r\n  _onReadHandler: (event) => void\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher.create method\r\n   */\n  //constructor(syncher, url, created, reporter, runtime, schema, name, initialStatus, initialData, childrens, mutual = true, resumed = false, description, tags, resources, observerStorage, publicObservation) {\n  function DataObjectReporter(input) {\n    var _this2;\n\n    DataObjectReporter_classCallCheck(this, DataObjectReporter);\n\n    _this2 = DataObjectReporter_possibleConstructorReturn(this, DataObjectReporter_getPrototypeOf(DataObjectReporter).call(this, input));\n\n    var _this = DataObjectReporter_assertThisInitialized(DataObjectReporter_assertThisInitialized(_this2));\n\n    _this._subscriptions = {};\n\n    _this._syncObj.observe(function (event) {\n      DataObjectReporter_log.log('[Syncher.DataObjectReporter] ' + _this.url + ' publish change: ', event);\n\n      _this._onChange(event);\n    });\n\n    _this._allocateListeners();\n\n    _this.invitations = []; // array of promises with pending invitations\n\n    _this._childrenSizeThreshold = 50000; // to be used when replying to sync requests to ensure each response msg is not too large\n\n    return _this2;\n  }\n\n  DataObjectReporter_createClass(DataObjectReporter, [{\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      DataObjectReporter_get(DataObjectReporter_getPrototypeOf(DataObjectReporter.prototype), \"_allocateListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._objectListener = _this._bus.addListener(_this._url, function (msg) {\n        DataObjectReporter_log.log('[Syncher.DataObjectReporter] listener ' + _this._url + ' Received: ', msg);\n\n        switch (msg.type) {\n          case 'response':\n            _this._onResponse(msg);\n\n            break;\n\n          case 'read':\n            _this._onRead(msg);\n\n            break;\n\n          case 'execute':\n            _this._onExecute(msg);\n\n            break;\n\n          case 'create':\n            _this._onChildCreate(msg);\n\n            break;\n          // to create child objects that were sent whenn offline\n        }\n      });\n      _this._runtimeStatusListener = _this._bus.addListener(_this._syncher._runtimeUrl + '/status', function (evt) {\n        console.log('[Syncher.DataObjectReporter] runtime status event received ' + evt);\n\n        if (evt.body && evt.body.resource && evt.body.resource === _this._url && evt.body.value && evt.body.value.backupRevision) {\n          // broadcast backupRevision update\n          _this.data.backupRevision = evt.body.value.backupRevision;\n          console.log('[Syncher.DataObjectReporter] DO updated with backup revision ' + _this.data.backupRevision);\n        }\n      });\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      DataObjectReporter_get(DataObjectReporter_getPrototypeOf(DataObjectReporter.prototype), \"_releaseListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._objectListener.remove();\n    }\n    /**\r\n     * Send invitations (create messages) to hyperties, observers list.\r\n     * @param  {HypertyURL[]} observers List of Hyperty URL's\r\n     */\n\n  }, {\n    key: \"inviteObservers\",\n    value: function inviteObservers(observers, p2p) {\n      var _this = this; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\n      // TODO: remove value and add resources? should similar to 1st create\n\n\n      var toInvite = observers; // let invitePromises = [];\n\n      /*  observers.forEach((observer)=> {\r\n        if (!_this.invitations[observer]) {\r\n          toInvite.push(observer);\r\n          _this.invitations[observer] = observer;\r\n        }\r\n      });*/\n\n      if (toInvite.length > 0) {\n        DataObjectReporter_log.log('[Syncher.DataObjectReporter] InviteObservers ', toInvite, _this._metadata);\n        toInvite.forEach(function (observer) {\n          var invitation = new Promise(function (resolve, reject) {\n            var inviteMsg = {\n              type: 'create',\n              from: _this._syncher._owner,\n              to: _this._syncher._subURL,\n              body: {\n                resume: false,\n                resource: _this._url,\n                schema: _this._schema,\n                value: _this._metadata,\n                authorise: [observer]\n              }\n            };\n            if (p2p) inviteMsg.body.p2p = p2p;\n            if (!_this.data.mutual) inviteMsg.body.mutual = _this.data.mutual;\n\n            _this._bus.postMessage(inviteMsg, function (reply) {\n              DataObjectReporter_log.log('[Syncher.DataObjectReporter] Invitation reply ', reply);\n              var result = {\n                invited: observer,\n                code: reply.body && reply.body.code ? reply.body.code : 500,\n                desc: reply.body && reply.body.desc ? reply.body.desc : 'Unknown'\n              };\n              if (result.code < 300) resolve(result);\n              /*            else if (result.code >= 300) {\r\n                            if (_this.metadata.offline) {\r\n                              resolve(_this._processOfflineInvitation(inviteMsg));\r\n                            }*/\n              else reject(result); //            } \n            });\n          });\n\n          _this.invitations.push(invitation);\n        }); //      return(invitePromises);\n      }\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      if (_this._heartBeat) _this._heartBeat.stop();\n\n      _this._deleteChildrens().then(function (result) {\n        DataObjectReporter_log.log(result); //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onDelete\n\n        var deleteMsg = {\n          type: 'delete',\n          from: _this._owner,\n          to: _this._syncher._subURL,\n          body: {\n            resource: _this._url\n          }\n        };\n\n        _this._bus.postMessage(deleteMsg, function (reply) {\n          DataObjectReporter_log.log('DataObjectReporter-DELETE: ', reply);\n\n          if (reply.body.code === 200) {\n            _this._releaseListeners();\n\n            delete _this._syncher._reporters[_this._url]; //_this._syncObj.unobserve();\n\n            _this._syncObj = {};\n          }\n        });\n      });\n    }\n    /**\r\n     * Subscriptions requested and accepted to this reporter\r\n     * @type {Object<HypertyURL, SyncSubscription>}\r\n     */\n\n  }, {\n    key: \"onSubscription\",\n\n    /**\r\n     * Setup the callback to process subscribe and unsubscribe notifications\r\n     * @param {function(event: MsgEvent)} callback function to receive events\r\n     */\n    value: function onSubscription(callback) {\n      this._onSubscriptionHandler = callback;\n    }\n    /**\r\n     * Setup the callback to process response notifications of the create's\r\n     * @param {function(event: MsgEvent)} callback function to receive events\r\n     */\n\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(callback) {\n      this._onResponseHandler = callback;\n    }\n    /**\r\n     * Setup the callback to process read notifications\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onRead\",\n    value: function onRead(callback) {\n      this._onReadHandler = callback;\n    }\n    /**\r\n     * Setup the callback to process execute notifications\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onExecute\",\n    value: function onExecute(callback) {\n      this._onExecuteHandler = callback;\n    } //FLOW-IN: message received from parent Syncher -> _onForward\n\n  }, {\n    key: \"_onForward\",\n    value: function _onForward(msg) {\n      var _this = this;\n\n      DataObjectReporter_log.log('DataObjectReporter-RCV: ', msg);\n\n      switch (msg.body.type) {\n        case 'subscribe':\n          _this._onSubscribe(msg);\n\n          break;\n\n        case 'unsubscribe':\n          _this._onUnSubscribe(msg);\n\n          break;\n      }\n    } //FLOW-IN: message received from this -> _onForward: emitted by a remote Syncher -> subscribe\n\n  }, {\n    key: \"_onSubscribe\",\n    value: function _onSubscribe(msg) {\n      var _this = this;\n\n      var hypertyUrl = msg.body.from;\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(hypertyUrl);\n      var domain = dividedURL.domain;\n      var mutual = true;\n      if (msg.body.hasOwnProperty('mutual') && !msg.body.mutual) mutual = false;\n      console.log('[DataObjectReporter._onSubscribe]', msg, domain, dividedURL);\n      var event = {\n        type: msg.body.type,\n        url: hypertyUrl,\n        domain: domain,\n        identity: msg.body.identity,\n        nutual: mutual,\n        accept: function accept() {\n          //create new subscription\n          var sub = {\n            url: hypertyUrl,\n            status: 'live'\n          };\n          _this._subscriptions[hypertyUrl] = sub;\n\n          if (_this.metadata.subscriptions) {\n            _this.metadata.subscriptions.push(sub.url);\n          }\n\n          var msgValue = Object(utils[\"i\" /* deepClone */])(_this._metadata);\n          msgValue.data = Object(utils[\"i\" /* deepClone */])(_this.data);\n          msgValue.version = _this._version; //process and send childrens data\n          // let childrenValues = {};\n          //\n          // if (_this._childrenObjects) {\n          //   Object.keys(_this._childrenObjects).forEach((childrenId) => {\n          //     let childrenData = _this._childrenObjects[childrenId];\n          //     childrenValues[childrenId] = deepClone(childrenData);\n          //   });\n          //   msgValue.childrenObjects = childrenValues;\n          // }\n\n          var sendMsg = {\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 200,\n              schema: _this._schema,\n              value: msgValue\n            }\n          }; //TODO: For Further Study\n\n          if (msg.body.hasOwnProperty('mutual') && !msg.body.mutual) {\n            sendMsg.body.mutual = msg.body.mutual; // TODO: remove?\n\n            _this.data.mutual = false;\n          }\n\n          if (_this._heartBeat) {\n            sendMsg.body.value.childrenObjects = {};\n            sendMsg.body.value.childrenObjects.heartbeat = _this._heartBeat.heartbeat;\n          }\n\n          console.log('[DataObjectReporter._onSubscribe.accept] sending response: ', sendMsg); //send ok response message\n\n          _this._bus.postMessage(sendMsg);\n\n          return sub;\n        },\n        reject: function reject(reason) {\n          //send reject response message\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 403,\n              desc: reason\n            }\n          });\n        }\n      };\n\n      if (_this._onSubscriptionHandler) {\n        DataObjectReporter_log.log('SUBSCRIPTION-EVENT: ', event);\n\n        _this._onSubscriptionHandler(event);\n      }\n    } //FLOW-IN: message received from this -> _onForward: emitted by a remote DataObjectObserver -> unsubscribe\n\n  }, {\n    key: \"_onUnSubscribe\",\n    value: function _onUnSubscribe(msg) {\n      var _this = this;\n\n      var hypertyUrl = msg.body.from;\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(hypertyUrl);\n      var domain = dividedURL.domain;\n      DataObjectReporter_log.log('[DataObjectReporter._onUnSubscribe]', msg, domain, dividedURL); //let sub = _this._subscriptions[hypertyUrl];\n\n      delete _this._subscriptions[hypertyUrl];\n      delete _this.invitations[hypertyUrl];\n      var event = {\n        type: msg.body.type,\n        url: hypertyUrl,\n        domain: domain,\n        identity: msg.body.identity\n      }; // TODO: check if the _onSubscriptionHandler it is the same of the subscriptions???\n\n      if (_this._onSubscriptionHandler) {\n        DataObjectReporter_log.log('UN-SUBSCRIPTION-EVENT: ', event);\n\n        _this._onSubscriptionHandler(event);\n      }\n    } //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> _onRemoteCreate -> event.ack\n\n  }, {\n    key: \"_onResponse\",\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      var event = {\n        type: msg.type,\n        url: msg.from,\n        code: msg.body.code\n      };\n\n      if (_this._onResponseHandler) {\n        DataObjectReporter_log.log('RESPONSE-EVENT: ', event);\n\n        _this._onResponseHandler(event);\n      }\n    } //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> read\n\n  }, {\n    key: \"_onRead\",\n    value: function _onRead(msg) {\n      var _this = this;\n\n      var childrensSize = JSON.stringify(_this.childrensJSON).length;\n      var largeObject = childrensSize > _this._childrenSizeThreshold ? true : false;\n      var event = {\n        type: msg.type,\n        url: msg.from,\n        accept: function accept() {\n          if (largeObject) _this._syncReplyForLargeData(msg);else _this._syncReply(msg);\n        },\n        reject: function reject(reason) {\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 401,\n              desc: reason\n            }\n          });\n        }\n      }; // if the requester is an authorised observer, the data object is responded otherwise an event is triggered\n\n      var subscriptions = [];\n\n      if (_this.metadata.subscriptions) {\n        subscriptions = _this.metadata.subscriptions;\n      } else if (_this._subscriptions) {\n        subscriptions = Object.keys(_this._subscriptions).map(function (key) {\n          return _this._subscriptions[key].url;\n        });\n      }\n\n      if (subscriptions.indexOf(msg.from) != -1) {\n        if (largeObject) _this._syncReplyForLargeData(msg);else _this._syncReply(msg);\n      } else if (_this._onReadHandler) {\n        DataObjectReporter_log.log('READ-EVENT: ', event);\n\n        _this._onReadHandler(event);\n      }\n    }\n  }, {\n    key: \"_syncReply\",\n    value: function _syncReply(msg) {\n      var _this = this;\n\n      var objectValue = Object(utils[\"i\" /* deepClone */])(_this.metadata);\n      objectValue.data = Object(utils[\"i\" /* deepClone */])(_this.data);\n      objectValue.childrenObjects = Object(utils[\"i\" /* deepClone */])(_this.childrensJSON);\n      objectValue.version = _this._version;\n      var response = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 200,\n          value: objectValue\n        }\n      };\n\n      _this._bus.postMessage(response);\n    } // This function is only used if the data object to be synched has childrenOjects too large\n\n  }, {\n    key: \"_syncReplyForLargeData\",\n    value: function _syncReplyForLargeData(msg) {\n      //set attribute with number of spllited messages\n      var _this = this; // lets set the initial message with no childObjects\n\n\n      var objectValue = Object(utils[\"i\" /* deepClone */])(_this.metadata);\n      objectValue.data = Object(utils[\"i\" /* deepClone */])(_this.data);\n      objectValue.version = _this._version;\n      delete objectValue.childrenObjects;\n      var children;\n      var values = []; // array of values to be sent in separated responses\n\n      var childrenValue = {}; // value to be used in each response\n\n      for (child in _this._childrenObjects) {\n        //      let child;\n        childrenValue[child] = {}; //      for (child in _this._childrenObjects[children]) {\n\n        if (JSON.stringify(childrenValue).length > _this._childrenSizeThreshold) {\n          //childrenValue big enough to be sent in a response message\n          values.push(childrenValue); //          childrenValue = {};\n          //          childrenValue[child] = {};\n        }\n\n        childrenValue[child] = {};\n        childrenValue[child].value = _this._childrenObjects[child].metadata;\n        childrenValue[child].identity = _this._childrenObjects[child].identity; //      }\n      }\n\n      values.push(childrenValue);\n      objectValue.responses = values.length + 1; //number of responses to be sent\n\n      var initialResponse = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 100,\n          value: objectValue\n        }\n      };\n\n      _this._bus.postMessage(initialResponse);\n\n      values.forEach(function (value) {\n        var response = Object(utils[\"i\" /* deepClone */])(initialResponse);\n        response.body.value = value;\n        response.body.value.responses = objectValue.responses;\n        setTimeout(function () {\n          _this._bus.postMessage(response);\n        }, 50); // should put a timeout?\n      });\n    } // Execute request received\n\n  }, {\n    key: \"_onExecute\",\n    value: function _onExecute(msg) {\n      var _this = this;\n\n      if (!msg.body.method) throw '[DataObjectReporter._onExecute] method missing ', msg;\n      var response = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 200\n        }\n      };\n      var event = {\n        type: msg.type,\n        url: msg.from,\n        method: msg.body.method,\n        params: msg.body.params,\n        accept: function accept() {\n          _this._bus.postMessage(response);\n        },\n        reject: function reject(reason) {\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: 401,\n              desc: reason\n            }\n          });\n        }\n      };\n\n      if (_this._onExecuteHandler) {\n        DataObjectReporter_log.log('[DataObjectReporter] EXECUTE-EVENT: ', event);\n\n        _this._onExecuteHandler(event);\n      }\n    }\n  }, {\n    key: \"subscriptions\",\n    get: function get() {\n      return this._subscriptions;\n    }\n  }, {\n    key: \"childrensJSON\",\n    get: function get() {\n      var _this = this;\n\n      var childrens = {}; //    let children;\n      //    for (children in _this._childrenObjects) {\n\n      var child; //      childrens[children] = {};\n\n      for (child in _this._childrenObjects) {\n        childrens[child] = {};\n        childrens[child].value = _this._childrenObjects[child].metadata;\n        childrens[child].identity = _this._childrenObjects[child].identity;\n      } //    }\n\n\n      return childrens;\n    }\n  }]);\n\n  return DataObjectReporter;\n}(syncher_DataObject\n/* implements SyncStatus */\n);\n\n/* harmony default export */ var syncher_DataObjectReporter = (DataObjectReporter_DataObjectReporter);\n// CONCATENATED MODULE: ./src/syncher/DataObjectObserver.js\nfunction DataObjectObserver_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { DataObjectObserver_typeof = function _typeof(obj) { return typeof obj; }; } else { DataObjectObserver_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return DataObjectObserver_typeof(obj); }\n\nfunction DataObjectObserver_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataObjectObserver_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataObjectObserver_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataObjectObserver_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataObjectObserver_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction DataObjectObserver_possibleConstructorReturn(self, call) { if (call && (DataObjectObserver_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return DataObjectObserver_assertThisInitialized(self); }\n\nfunction DataObjectObserver_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { DataObjectObserver_get = Reflect.get; } else { DataObjectObserver_get = function _get(target, property, receiver) { var base = DataObjectObserver_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return DataObjectObserver_get(target, property, receiver || target); }\n\nfunction DataObjectObserver_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = DataObjectObserver_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction DataObjectObserver_getPrototypeOf(o) { DataObjectObserver_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return DataObjectObserver_getPrototypeOf(o); }\n\nfunction DataObjectObserver_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) DataObjectObserver_setPrototypeOf(subClass, superClass); }\n\nfunction DataObjectObserver_setPrototypeOf(o, p) { DataObjectObserver_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return DataObjectObserver_setPrototypeOf(o, p); }\n\nfunction DataObjectObserver_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar DataObjectObserver_log = loglevel[\"getLogger\"]('DataObjectObserver');\n\n\nvar FilterType = {\n  ANY: 'any',\n  START: 'start',\n  EXACT: 'exact'\n};\n/**\r\n * The class returned from the Syncher subscribe call.\r\n * To be used as an observation point from a DataObjectReporter change.\r\n */\n\nvar DataObjectObserver_DataObjectObserver =\n/*#__PURE__*/\nfunction (_DataObject) {\n  DataObjectObserver_inherits(DataObjectObserver, _DataObject);\n\n  /* private\r\n  _changeListener: MsgListener\r\n    ----event handlers----\r\n  _filters: {<filter>: {type: <start, exact>, callback: <function>} }\r\n  */\n\n  /**\r\n   * @ignore\r\n   * Should not be used directly by Hyperties. It's called by the Syncher.subscribe method\r\n   */\n  //TODO: For Further Study\n  function DataObjectObserver(input) {\n    var _this2;\n\n    DataObjectObserver_classCallCheck(this, DataObjectObserver);\n\n    //todo: check why\n    //input.initialData = input.initialData.data;\n    _this2 = DataObjectObserver_possibleConstructorReturn(this, DataObjectObserver_getPrototypeOf(DataObjectObserver).call(this, input));\n\n    var _this = DataObjectObserver_assertThisInitialized(DataObjectObserver_assertThisInitialized(_this2));\n\n    _this._version = input.version;\n    _this._filters = {};\n\n    _this._syncObj.observe(function (event) {\n      _this._onFilter(event);\n    });\n\n    _this._allocateListeners();\n\n    return _this2;\n  }\n  /**\r\n   * Sync Data Object Observer with last version of Data Object Reporter. Useful for Resumes\r\n   */\n\n\n  DataObjectObserver_createClass(DataObjectObserver, [{\n    key: \"sync\",\n    value: function sync() {\n      var _this = this;\n\n      DataObjectObserver_log.info('[DataObjectObserver_sync] synchronising ');\n      return new Promise(function (resolve, reject) {\n        var criteria = {}; //      if (this.metadata.backupRevision) criteria.backupRevision = this.metadata.backupRevision;\n\n        _this._syncher.read(_this._metadata.url, criteria).then(function (value) {\n          DataObjectObserver_log.info('[DataObjectObserver_sync] value to sync: ', value);\n          Object.assign(_this.data, Object(utils[\"i\" /* deepClone */])(value.data));\n          _this._version = value.version;\n          _this._metadata.lastModified = value.lastModified; //TODO: check first if there are new childrenObjects to avoid overhead\n\n          if (value.childrenObjects) {\n            _this.resumeChildrens(value.childrenObjects);\n\n            _this._storeChildrens();\n\n            resolve(true);\n          } else resolve(true);\n          /*if (value.version != _this._version) {\r\n            log.info('[DataObjectObserver_sync] updating existing data: ', _this.data);\r\n              Object.assign(_this.data || {}, deepClone(value.data));\r\n              _this._metadata = deepClone(value);\r\n              delete _this._metadata.data;\r\n              _this._version = value.version;\r\n            } else {\r\n            log.info('[DataObjectObserver_sync] existing data is updated: ', value);\r\n          }*/\n\n        }).catch(function (reason) {\n          DataObjectObserver_log.info('[DataObjectObserver_sync] sync failed: ', reason);\n          resolve(false);\n        });\n      });\n    }\n  }, {\n    key: \"_storeChildrens\",\n    value: function _storeChildrens() {\n      var _this = this;\n\n      var childrens = {}; //TODO: to be sent to HypertyResourceStorage when ready to handle Chat Messages\n\n      Object.keys(_this._childrenObjects).forEach(function (childId) {\n        var children = _this._childrenObjects; //      childrens[childrenResource] = {};\n        //      Object.keys(children).forEach((childId) => {\n\n        childrens[childId] = {};\n        childrens[childId].value = children[childId].metadata;\n        childrens[childId].identity = children[childId].identity; //      });\n      });\n      var msg = {\n        from: _this._owner,\n        to: _this._syncher._subURL,\n        type: 'create',\n        body: {\n          resource: _this._url,\n          attribute: 'childrenObjects',\n          value: childrens\n        }\n      };\n\n      _this._bus.postMessage(msg);\n    }\n  }, {\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      DataObjectObserver_get(DataObjectObserver_getPrototypeOf(DataObjectObserver.prototype), \"_allocateListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._changeListener = _this._bus.addListener(_this._url + '/changes', function (msg) {\n        if (msg.type === 'update') {\n          DataObjectObserver_log.log('DataObjectObserver-' + _this._url + '-RCV: ', msg);\n\n          _this._changeObject(_this._syncObj, msg);\n        }\n      });\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      DataObjectObserver_get(DataObjectObserver_getPrototypeOf(DataObjectObserver.prototype), \"_releaseListeners\", this).call(this);\n\n      var _this = this;\n\n      _this._changeListener.remove();\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this = this;\n\n      if (_this._heartBeat) _this._heartBeat.stop();\n\n      _this._deleteChildrens().then(function () {\n        _this.unsubscribe();\n\n        _this._releaseListeners();\n\n        delete _this._syncher._observers[_this._url];\n      });\n    }\n    /**\r\n     * Release and delete object data\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this = this; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalUnSubscribe\n\n\n      var unSubscribeMsg = {\n        type: 'unsubscribe',\n        from: _this._owner,\n        to: _this._syncher._subURL,\n        body: {\n          resource: _this._url\n        }\n      };\n\n      _this._bus.postMessage(unSubscribeMsg, function (reply) {\n        DataObjectObserver_log.log('DataObjectObserver-UNSUBSCRIBE: ', reply);\n\n        if (reply.body.code === 200) {\n          _this._releaseListeners();\n\n          delete _this._syncher._observers[_this._url];\n        }\n      });\n    }\n    /**\r\n     * Register the change listeners sent by the reporter\r\n     * @param {string} filter - Filter that identifies the field (separated dot path). Accepts * at the end for a more unrestricted filtering.\r\n     * @param {function(event: MsgEvent)} callback\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(filter, callback) {\n      var key = filter;\n      var filterObj = {\n        type: FilterType.EXACT,\n        callback: callback\n      };\n      var idx = filter.indexOf('*');\n\n      if (idx === filter.length - 1) {\n        if (idx === 0) {\n          filterObj.type = FilterType.ANY;\n        } else {\n          filterObj.type = FilterType.START;\n          key = filter.substr(0, filter.length - 1);\n        }\n      }\n\n      this._filters[key] = filterObj;\n    }\n  }, {\n    key: \"_onFilter\",\n    value: function _onFilter(event) {\n      var _this = this;\n\n      Object.keys(_this._filters).forEach(function (key) {\n        var filter = _this._filters[key];\n\n        if (filter.type === FilterType.ANY) {\n          //match anything\n          filter.callback(event);\n        } else if (filter.type === FilterType.START) {\n          //if starts with filter...\n          if (event.field.indexOf(key) === 0) {\n            filter.callback(event);\n          }\n        } else if (filter.type === FilterType.EXACT) {\n          //exact match\n          if (event.field === key) {\n            filter.callback(event);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"onDisconnected\",\n    value: function onDisconnected(callback) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3._subscribeRegistration().then(function () {\n          _this3._onDisconnected = callback;\n          resolve();\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_subscribeRegistration\",\n    value: function _subscribeRegistration() {\n      var _this4 = this;\n\n      var msg = {\n        type: 'subscribe',\n        from: this._owner,\n        to: this._syncher._runtimeUrl + '/subscriptions',\n        body: {\n          resources: [this._url + '/registration']\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this4._bus.postMessage(msg, function (reply) {\n          DataObjectObserver_log.log(\"[DataObjectObserver._subscribeRegistration] \".concat(_this4._url, \" rcved reply \"), reply);\n\n          if (reply.body.code === 200) {\n            _this4._generateListener(_this4._url + '/registration');\n\n            resolve();\n          } else {\n            DataObjectObserver_log.error('Error subscribing registration status for ', _this4._url);\n            reject('Error subscribing registration status for ' + _this4._url);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_generateListener\",\n    value: function _generateListener(notificationURL) {\n      var _this = this;\n\n      _this._bus.addListener(notificationURL, function (msg) {\n        DataObjectObserver_log.log(\"[DataObjectObserver.registrationNotification] \".concat(_this._url, \": \"), msg);\n\n        if (msg.body.value && msg.body.value === 'disconnected' && _this._onDisconnected) {\n          DataObjectObserver_log.log(\"[DataObjectObserver] \".concat(_this._url, \": was disconnected \"), msg);\n\n          _this._onDisconnected();\n        }\n      });\n    }\n    /**\r\n     * Requests the reporter to execute a method on the data object\r\n     * @param {string} method - Name of the function to be executed.\r\n     * @param {array} params - array of parameters for the requested function\r\n     * @return {promise}\r\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(method, params) {\n      var _this5 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          type: 'execute',\n          from: _this5._owner,\n          to: _this._url,\n          body: {\n            method: method,\n            params: params\n          }\n        };\n\n        _this._bus.postMessage(msg, function (reply) {\n          DataObjectObserver_log.log(\"[DataObjectObserver.execute] \".concat(_this._url, \" rcved reply \"), reply);\n\n          if (reply.body.code === 200) {\n            resolve();\n          } else {\n            DataObjectObserver_log.warn(\"[DataObjectObserver.execute] execution of method \".concat(method, \" was reject by reporter\"));\n            reject(\"[DataObjectObserver.execute] execution of method \".concat(method, \" was reject by reporter\"));\n          }\n        });\n      });\n    }\n  }]);\n\n  return DataObjectObserver;\n}(syncher_DataObject\n/* implements SyncStatus */\n);\n\n/* harmony default export */ var syncher_DataObjectObserver = (DataObjectObserver_DataObjectObserver);\n// CONCATENATED MODULE: ./src/syncher/DataProvisional.js\nfunction DataProvisional_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction DataProvisional_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction DataProvisional_createClass(Constructor, protoProps, staticProps) { if (protoProps) DataProvisional_defineProperties(Constructor.prototype, protoProps); if (staticProps) DataProvisional_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n/**\r\n * @access private\r\n * This class is responsible for collecting delta changes in remote objects, before the response of subscription reach the observer.\r\n * It's used in Syncher -> subscribe. The flow is defined as:\r\n * 1. (observer) --subscribe--\x3e (reporter)\r\n * 2. (observer) <--delta updates-- (reporter)\r\n * 3. (observer) <--subscribe response-- (reporter)\r\n * This means that there could be delta updates transferred before the subscription confirmation.\r\n * Since there is no DataObjectObserver before the ubscription confirmation, there should be some other object collecting the updates.\r\n * Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\r\n */\n// Log System\n\nvar DataProvisional_log = loglevel[\"getLogger\"]('DataProvisional');\n\nvar DataProvisional =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _childrenListeners: [MsgListener]\r\n  _listener: MsgListener\r\n    _changes: []\r\n  */\n  function DataProvisional(owner, url, bus, children) {\n    DataProvisional_classCallCheck(this, DataProvisional);\n\n    var _this = this;\n\n    _this._owner = owner;\n    _this._url = url;\n    _this._bus = bus;\n    _this._children = children;\n    _this._changes = [];\n\n    _this._allocateListeners();\n  }\n\n  DataProvisional_createClass(DataProvisional, [{\n    key: \"_allocateListeners\",\n    value: function _allocateListeners() {\n      var _this = this;\n\n      _this._listener = _this._bus.addListener(_this._url, function (msg) {\n        DataProvisional_log.log('DataProvisional-' + _this._url + '-RCV: ', msg);\n\n        _this._changes.push(msg);\n      });\n      /*\r\n      _this._childrenListeners = [];\r\n      if (_this._children) {\r\n        let childBaseURL = url + '/children/';\r\n        _this._children.forEach((child) => {\r\n          let childURL = childBaseURL + child;\r\n          let listener = _this._bus.addListener(childURL, (msg) => {\r\n            //ignore msg sent by himself\r\n            if (msg.from !== owner) {\r\n              log.log(msg);\r\n            }\r\n          });\r\n            _this._childrenListeners.push(listener);\r\n        });\r\n      }*/\n    }\n  }, {\n    key: \"_releaseListeners\",\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._listener.remove();\n      /*_this._childrenListeners.forEach((listener) => {\r\n        listener.remove();\r\n      });*/\n\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(observer) {\n      var _this = this;\n\n      _this._changes.forEach(function (change) {\n        observer._changeObject(observer._syncObj, change);\n      });\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this._children;\n    }\n  }]);\n\n  return DataProvisional;\n}();\n\n/* harmony default export */ var syncher_DataProvisional = (DataProvisional);\n// CONCATENATED MODULE: ./src/syncher/Syncher.js\nfunction Syncher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Syncher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Syncher_createClass(Constructor, protoProps, staticProps) { if (protoProps) Syncher_defineProperties(Constructor.prototype, protoProps); if (staticProps) Syncher_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar Syncher_log = loglevel[\"getLogger\"]('Syncher');\n\n\n\n\n/**\r\n* The main class for the syncher package.\r\n* The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.\r\n* Main functionality is to create reporters and to subscribe to existing ones.\r\n*/\n\nvar Syncher_Syncher =\n/*#__PURE__*/\nfunction () {\n  /* private\r\n  _owner: URL\r\n  _bus: MiniBus\r\n    _subURL: URL\r\n    _reporters: <url: DataObjectReporter>\r\n  _observers: <url: DataObjectObserver>\r\n  _provisionals: <url: DataProvisional>\r\n    ----event handlers----\r\n  _onNotificationHandler: (event) => void\r\n  _onResume: (event) => void\r\n  */\n\n  /**\r\n  * Constructor that should be used by the Hyperty owner\r\n  * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.\r\n  * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.\r\n  * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.\r\n  */\n  function Syncher(owner, bus, config) {\n    Syncher_classCallCheck(this, Syncher);\n\n    var _this = this;\n\n    _this._owner = owner;\n    _this._bus = bus;\n    _this._subURL = config.runtimeURL + '/sm';\n    _this._runtimeUrl = config.runtimeURL;\n    _this._p2pHandler = config.p2pHandler;\n    _this._p2pRequester = config.p2pRequester;\n    _this._reporters = {};\n    _this._observers = {};\n    _this._provisionals = {};\n    bus.addListener(owner, function (msg) {\n      //ignore msg sent by himself\n      if (msg.from !== owner) {\n        Syncher_log.info('[Syncher] Syncher-RCV: ', msg, _this);\n\n        switch (msg.type) {\n          case 'forward':\n            _this._onForward(msg);\n\n            break;\n\n          case 'create':\n            _this._onRemoteCreate(msg);\n\n            break;\n\n          case 'delete':\n            _this._onRemoteDelete(msg);\n\n            break;\n\n          case 'execute':\n            _this._onExecute(msg);\n\n            break;\n        }\n      }\n    });\n  }\n  /**\r\n  * The owner of the Syncher and all created reporters.\r\n  * @type {HypertyURL}\r\n  */\n\n\n  Syncher_createClass(Syncher, [{\n    key: \"create\",\n\n    /**\r\n    * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.\r\n    * @param  {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\r\n    * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription\r\n    * @param  {JSON} initialData - Initial data of the reporter\r\n    * @param  {boolean} store - (Optional) if true, object will be stored by the runtime\r\n    * @param  {boolean} p2p - (Optional) if true, data synchronisation stream will use p2p connection as much as possible\r\n    * @param  {string} name - (Optional) the name of the dataobject\r\n    * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n    * @param  {SyncMetadata} input - (optional) all metadata required to sunc the Data Object.\r\n    * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP\r\n    */\n    value: function create(schema, observers, initialData) {\n      var store = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var p2p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'no name';\n      var identity = arguments.length > 6 ? arguments[6] : undefined;\n      var input = arguments.length > 7 ? arguments[7] : undefined;\n      if (!schema) throw Error('[Syncher - Create] - You need specify the data object schema');\n      if (!observers) throw Error('[Syncher - Create] -The observers should be defined');\n\n      var _this = this;\n\n      input = input || {};\n      var createInput = Object.assign({}, input);\n      createInput.p2p = p2p;\n      createInput.store = store;\n      createInput.schema = schema;\n      createInput.authorise = observers;\n      createInput.p2pHandler = _this._p2pHandler;\n      createInput.p2pRequester = _this._p2pRequester;\n      initialData ? createInput.data = Object(utils[\"i\" /* deepClone */])(initialData) : createInput.data = {};\n      createInput.name = name.length === 0 ? 'no name' : name;\n      createInput.reporter = input.hasOwnProperty('reporter') && typeof input.reporter !== 'boolean' ? input.reporter : _this._owner;\n      createInput.resume = false;\n\n      if (input) {\n        createInput.mutual = input.hasOwnProperty('mutual') ? input.mutual : false;\n        createInput.name = input.hasOwnProperty('name') ? input.name : createInput.name;\n      } else {\n        createInput.mutual = false;\n      }\n\n      if (input.hasOwnProperty('reuseURL')) {\n        createInput.resource = input.reuseURL;\n      }\n\n      if (identity) {\n        createInput.identity = identity;\n      } //Object.assign(createInput, {resume: false});\n      //debugger;\n      //    console.log('[syncher - create] - create Reporter - createInput: ', createInput);\n\n\n      return _this._create(createInput);\n    }\n    /**\r\n    * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.\r\n    * @param  {Object} criteria - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n    * @return {Promise<DataObjectReporter>[]} Return a promise with a list of DataObjectReporter to be resumed;\r\n    */\n\n  }, {\n    key: \"resumeReporters\",\n    value: function resumeReporters(criteria) {\n      var _this = this;\n\n      Syncher_log.log('[syncher - create] - resume Reporter - criteria: ', criteria);\n      Object.assign(criteria, {\n        resume: true\n      });\n      return _this._resumeCreate(criteria);\n    }\n    /**\r\n    * Request a subscription to an existent reporter object.\r\n    * @param {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\r\n    * @param {ObjectURL} objURL - Address of the existent reporter object to be observed\r\n    * @param {Boolean} [store=false] - Save the subscription on the Syncher Manager for further resume (Default is false)\r\n    * @param {Boolean} [p2p=false] - Info about if should use p2p connection (Default is false)\r\n    * @param {Boolean} [mutual=true] - Info about if messages of this object should be encrypted (Default is true)\r\n    * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.\r\n    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.\r\n    */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(input) {\n      /*  let _this = this;\r\n        let criteria = {};\r\n          criteria.p2p = p2p;\r\n        criteria.store = store;\r\n        criteria.schema = schema;\r\n        criteria.domain_subscription = domain_subscription;\r\n          criteria.resource = objURL;\r\n        if (identity)      { criteria.identity = identity; }\r\n          //TODO: For Further Study\r\n        criteria.mutual = mutual;\r\n          log.log('[syncher - subscribe] - subscribe criteria: ', criteria);\r\n          Object.assign(criteria, {resume: false});*/\n      return this._subscribe(input);\n    }\n    /**\r\n    * Request a subscription to an existent reporter object.\r\n    * @param {criteria} criteria - Information to discovery the observer object\r\n    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.\r\n    */\n\n  }, {\n    key: \"resumeObservers\",\n    value: function resumeObservers(criteria) {\n      var _this = this;\n\n      var _criteria = criteria || {};\n\n      Object.assign(_criteria, {\n        resume: true\n      });\n      return _this._resumeSubscribe(_criteria);\n    }\n    /**\r\n    * Request a read action on the reporter object\r\n    * @param {ObjectURL} objURL - URL of the reporter object to be read\r\n    * @return {Promise<Object>} Return Promise to last available data of the reporter\r\n    */\n\n  }, {\n    key: \"read\",\n    value: function read(objURL, criteria) {\n      var _this = this;\n\n      console.log('[Syncher.read] ', objURL);\n      return new Promise(function (resolve, reject) {\n        // in case the object is synched in a remote storage, lets sync with it\n\n        /*      if (_this._observers[objURL] && _this._observers[objURL].metadata.hasOwnProperty('backup') && _this._observers[objURL].metadata.backup) {\r\n        \r\n                let readMsg = {\r\n                  type: 'read', from: _this._owner, to: _this._subURL, \r\n                  body: { resource: objURL}\r\n                };\r\n        \r\n                if (criteria) readMsg.body.criteria = criteria;\r\n        \r\n                  let callback = (reply) => {\r\n                    return _this._readCallBack(reply, resolve, reject);\r\n                  };\r\n            \r\n                  _this._bus.postMessage(readMsg, callback, false);\r\n            \r\n              } else {*/\n        _this._readReporter(objURL).then(function (result) {\n          resolve(result);\n        }); //    }\n\n      });\n    }\n  }, {\n    key: \"_readCallBack\",\n    value: function _readCallBack(reply, resolve, reject) {\n      var _this = this;\n\n      console.log('[Syncher.read] reply: ', reply);\n      var childrens = {};\n      var value = {};\n      var n = 0;\n\n      if (reply.body.code < 300) {\n        if (!reply.body.value.hasOwnProperty('responses')) {\n          _this._bus.removeResponseListener(reply.from, reply.id);\n\n          resolve(reply.body.value);\n        } else {\n          //data object is sent in separated messages\n          if (n === 0) {\n            //initial response without childrens\n            value = reply.body.value;\n            ++n;\n          } else {\n            // received response contains childrens\n            delete reply.body.value.responses;\n            var children;\n\n            for (children in reply.body.value) {\n              if (!childrens.hasOwnProperty(children)) childrens[children] = {};\n              Object.assign(childrens[children], reply.body.value[children]);\n            }\n\n            ++n;\n\n            if (n === value.responses) {\n              value.childrenObjects = childrens;\n              delete value.responses;\n\n              _this._bus.removeResponseListener(reply.from, reply.id);\n\n              resolve(value);\n            }\n          }\n        }\n      } else {\n        reject(reply.body.desc);\n      }\n    }\n  }, {\n    key: \"_readReporter\",\n    value: function _readReporter(objURL) {\n      var _this = this; //FLOW-OUT: this message will be sent directly to reporter object (maybe there is no listener available, so it will be resolved with MessageBus -> resolve)\n      //will reach the remote object in DataObjectReporter -> _onRead\n\n\n      var readMsg = {\n        type: 'read',\n        from: _this._owner,\n        to: objURL\n      };\n      return new Promise(function (resolve, reject) {\n        _this._bus.postMessage(readMsg, function (reply) {\n          return _this._readCallBack(reply, resolve, reject);\n        }, false);\n      });\n    }\n    /**\r\n    * Setup the callback to process create and delete events of remove Reporter objects.\r\n    * This is releated to the messagens sent by create to the observers Hyperty array.\r\n    * @param {function(event: MsgEvent)} callback\r\n    */\n\n  }, {\n    key: \"onNotification\",\n    value: function onNotification(callback) {\n      this._onNotificationHandler = callback;\n    }\n    /**\r\n    * Setup the callback to process close events from the runtime.\r\n    * @param {function(event: MsgEvent)} callback\r\n    */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this._onClose = callback;\n    }\n  }, {\n    key: \"_create\",\n    value: function _create(input) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var reporterInput = Object.assign({}, input);\n        var resume = input.resume;\n        reporterInput.created = new Date().toISOString();\n        reporterInput.runtime = _this._runtimeUrl;\n        var requestValue = Object(utils[\"i\" /* deepClone */])(reporterInput);\n        delete requestValue.p2p;\n        delete requestValue.store;\n        delete requestValue.observers;\n        delete requestValue.identity; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\n        //debugger;\n\n        var requestMsg = {\n          type: 'create',\n          from: _this._owner,\n          to: _this._subURL,\n          body: {\n            resume: resume,\n            value: requestValue\n          }\n        };\n        requestMsg.body.schema = reporterInput.schema;\n        if (reporterInput.p2p) requestMsg.body.p2p = reporterInput.p2p;\n        if (reporterInput.store) requestMsg.body.store = reporterInput.store;\n        if (reporterInput.identity) requestMsg.body.identity = reporterInput.identity;\n        console.log('[syncher._create]: ', reporterInput, requestMsg); //request create to the allocation system. Can be rejected by the PolicyEngine.\n\n        _this._bus.postMessage(requestMsg, function (reply) {\n          Syncher_log.log('[syncher - create] - create-response: ', reply);\n\n          if (reply.body.code === 200) {\n            //reporter creation accepted\n            reporterInput.url = reply.body.resource;\n            /*          if (reply.body.p2pHandler) reporterInput.p2pHandler = reply.body.p2pHandler;\r\n                      if (reply.body.p2pRequester) reporterInput.p2pRequester = reply.body.p2pRequester;*/\n\n            reporterInput.status = 'live'; // pch: do we ned this?\n\n            reporterInput.syncher = _this;\n            reporterInput.childrens = reply.body.childrenResources;\n            var newObj = _this._reporters[reporterInput.url];\n\n            if (!newObj) {\n              newObj = new syncher_DataObjectReporter(reporterInput);\n              _this._reporters[reporterInput.url] = newObj;\n            }\n\n            newObj.inviteObservers(input.authorise, input.p2p);\n            resolve(newObj);\n          } else {\n            //reporter creation rejected\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_resumeCreate\",\n    value: function _resumeCreate(criteria) {\n      var _this2 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var resume = criteria.resume; //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\n\n        var requestMsg = {\n          type: 'create',\n          from: _this._owner,\n          to: _this._subURL,\n          body: {\n            resume: resume\n          }\n        };\n        Syncher_log.log('[syncher - create]: ', criteria, requestMsg);\n\n        if (criteria) {\n          requestMsg.body.value = criteria;\n\n          if (criteria.hasOwnProperty('reporter')) {\n            requestMsg.body.value.reporter = criteria.reporter;\n          } else {\n            requestMsg.body.value.reporter = _this._owner;\n          }\n        }\n\n        if (criteria.p2p) requestMsg.body.p2p = criteria.p2p;\n        if (criteria.store) requestMsg.body.store = criteria.store;\n        if (criteria.observers) requestMsg.body.authorise = criteria.observers;\n        if (criteria.identity) requestMsg.body.identity = criteria.identity;\n        Syncher_log.log('[syncher._resumeCreate] - resume message: ', requestMsg); //debugger;\n        //request create to the allocation system. Can be rejected by the PolicyEngine.\n\n        _this._bus.postMessage(requestMsg, function (reply) {\n          Syncher_log.log('[syncher._resumeCreate] - create-resumed-response: ', reply);\n\n          if (reply.body.code === 200) {\n            //debugger;\n            var listOfReporters = reply.body.value;\n\n            for (var index in listOfReporters) {\n              var dataObject = listOfReporters[index]; //reporter creation accepted\n\n              dataObject.data = Object(utils[\"i\" /* deepClone */])(dataObject.data) || {};\n\n              if (dataObject.childrenObjects) {\n                dataObject.childrenObjects = Object(utils[\"i\" /* deepClone */])(dataObject.childrenObjects);\n              }\n\n              dataObject.mutual = false;\n              dataObject.resume = true;\n              dataObject.status = 'live'; // pch: do we ned this?\n\n              dataObject.syncher = _this;\n              Syncher_log.log('[syncher._resumeCreate] - create-resumed-dataObjectReporter', dataObject);\n              var newObj = new syncher_DataObjectReporter(dataObject);\n\n              if (dataObject.childrenObjects) {\n                newObj.resumeChildrens(dataObject.childrenObjects);\n              }\n\n              _this._reporters[dataObject.url] = newObj;\n            }\n\n            resolve(_this._reporters);\n            if (_this2._onReportersResume) _this2._onReportersResume(_this2._reporters);\n          } else if (reply.body.code === 404) {\n            resolve({});\n          } else {\n            //reporter creation rejected\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(input) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe\n        var subscribeMsg = {\n          type: 'subscribe',\n          from: _this._owner,\n          to: _this._subURL,\n          body: input\n        }; // Hyperty request to be an Observer\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer\n        // Resume Subscriptions for the same Hyperty URL\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url\n        // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url\n\n        /*      if (input) {\r\n                if (input.hasOwnProperty('p2p')) subscribeMsg.body.p2p = input.p2p;\r\n                if (input.hasOwnProperty('store')) subscribeMsg.body.store = input.store;\r\n                if (input.hasOwnProperty('schema')) subscribeMsg.body.schema = input.schema;\r\n                if (input.hasOwnProperty('identity')) subscribeMsg.body.identity = input.identity;\r\n                if (input.hasOwnProperty('resource')) subscribeMsg.body.resource = input.resource;\r\n                if (input.hasOwnProperty('domain_subscription')) subscribeMsg.body.domain_subscription = input.domain_subscription;\r\n              }\r\n              \r\n        \r\n              subscribeMsg.body.resume = input.resume;\r\n        \r\n              //TODO: For Further Study\r\n              if (input.hasOwnProperty('mutual')) subscribeMsg.body.mutual = input.mutual;*/\n\n        Syncher_log.log('[syncher_subscribe] - subscribe message: ', input, subscribeMsg); //request subscription\n        //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\n        //for more info see the DataProvisional class documentation.\n\n        _this._bus.postMessage(subscribeMsg, function (reply) {\n          Syncher_log.log('[syncher] - subscribe-response: ', reply);\n          var objURL = reply.body.resource;\n          var newProvisional = _this._provisionals[objURL];\n          delete _this._provisionals[objURL];\n          if (newProvisional) newProvisional._releaseListeners();\n\n          if (reply.body.code < 200) {\n            Syncher_log.log('[syncher] - new DataProvisional: ', reply.body.childrenResources, objURL);\n            newProvisional = new syncher_DataProvisional(_this._owner, objURL, _this._bus, reply.body.childrenResources);\n            _this._provisionals[objURL] = newProvisional;\n          } else if (reply.body.code === 200) {\n            Syncher_log.log('[syncher] - new Data Object Observer: ', reply, _this._provisionals);\n            var observerInput = reply.body.value;\n            observerInput.syncher = _this;\n            observerInput.p2p = input.p2p;\n            observerInput.store = input.store;\n            observerInput.identity = input.identity;\n            observerInput.resume = false; // todo: For Further Study\n\n            observerInput.mutual = input.mutual; //observerInput.children = newProvisional.children;\n            //TODO: mutual For Further Study\n\n            var newObj = _this._observers[objURL];\n\n            if (!newObj) {\n              newObj = new syncher_DataObjectObserver(observerInput);\n              _this._observers[objURL] = newObj;\n            } else {\n              newObj.sync();\n            }\n\n            Syncher_log.log('[syncher] - new Data Object Observer already exist: ', newObj);\n            resolve(newObj);\n\n            if (newProvisional) {\n              newProvisional.apply(newObj);\n            }\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n    /*\r\n      _processOfflineSubscription(subscription, redirectTo) {\r\n        let _this = this;\r\n    \r\n        let forward = {\r\n          from: subscription.from,\r\n          type: 'forward',\r\n          to: redirectTo,\r\n          body: subscription\r\n        };\r\n    \r\n        console.log('[Syncher._processOfflineSubscription] forwading ', forward);\r\n    \r\n        _this._bus.postMessage(forward);\r\n    \r\n        let result = {\r\n          code: 302,\r\n          desc: \"Found \" + redirectTo\r\n        };\r\n    \r\n        return(result);\r\n    \r\n      }*/\n\n  }, {\n    key: \"_resumeSubscribe\",\n    value: function _resumeSubscribe(criteria) {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe\n        var subscribeMsg = {\n          type: 'subscribe',\n          from: _this._owner,\n          to: _this._subURL,\n          body: {}\n        }; // Hyperty request to be an Observer\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer\n        // Resume Subscriptions for the same Hyperty URL\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url\n        // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.\n        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url\n\n        if (criteria) {\n          if (criteria.hasOwnProperty('p2p')) subscribeMsg.body.p2p = criteria.p2p;\n          if (criteria.hasOwnProperty('store')) subscribeMsg.body.store = criteria.store;\n          if (criteria.hasOwnProperty('schema')) subscribeMsg.body.schema = criteria.schema;\n          if (criteria.hasOwnProperty('identity')) subscribeMsg.body.identity = criteria.identity;\n          if (criteria.hasOwnProperty('resource')) subscribeMsg.body.resource = criteria.resource;\n        }\n\n        subscribeMsg.body.resume = criteria.resume; //TODO: For Further Study\n\n        var mutual = criteria.mutual;\n        if (criteria.hasOwnProperty('mutual')) subscribeMsg.body.mutual = mutual;\n        console.log('[syncher] - subscribe message: ', criteria, subscribeMsg); //request subscription\n        //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\n        //for more info see the DataProvisional class documentation.\n\n        _this._bus.postMessage(subscribeMsg, function (reply) {\n          console.log('[syncher] - subscribe-resumed-response: ', reply);\n          var objURL = reply.body.resource;\n          var newProvisional = _this._provisionals[objURL];\n          delete _this._provisionals[objURL];\n          if (newProvisional) newProvisional._releaseListeners();\n\n          if (reply.body.code < 200) {\n            // todo: check if this is needed for the resume\n            Syncher_log.log('[syncher] - resume new DataProvisional: ', reply, objURL);\n            newProvisional = new syncher_DataProvisional(_this._owner, objURL, _this._bus, reply.body.childrenResources);\n            _this._provisionals[objURL] = newProvisional;\n          } else if (reply.body.code === 200) {\n            var listOfObservers = reply.body.value;\n\n            for (var index in listOfObservers) {\n              var dataObject = listOfObservers[index];\n              console.log('[syncher] - Resume Object Observer: ', reply, dataObject, _this._provisionals);\n\n              if (dataObject.childrenObjects) {\n                dataObject.childrenObjects = Object(utils[\"i\" /* deepClone */])(dataObject.childrenObjects);\n              }\n\n              dataObject.data = Object(utils[\"i\" /* deepClone */])(dataObject.data) || {};\n              dataObject.resume = true;\n              dataObject.syncher = _this; //TODO: mutual For Further Study\n\n              console.log('[syncher._resumeSubscribe] - create new dataObject: ', dataObject);\n              var newObj = new syncher_DataObjectObserver(dataObject);\n\n              if (dataObject.childrenObjects) {\n                newObj.resumeChildrens(dataObject.childrenObjects);\n              }\n\n              Syncher_log.log('[syncher._resumeSubscribe] - new dataObject', newObj);\n              _this._observers[newObj.url] = newObj;\n\n              if (_this._provisionals[newObj.url]) {\n                _this._provisionals[newObj.url].apply(newObj);\n              } //lets sync with Reporter\n              // it was commented to let hyperties decide when to sync\n              //newObj.sync();\n\n            }\n\n            resolve(_this._observers);\n            if (_this3._onObserversResume) _this3._onObserversResume(_this._observers);\n          } else if (reply.body.code === 404) {\n            resolve({});\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    } //FLOW-IN: message received from a local runtime ReporterObject -> _onRemoteSubscribe\n\n  }, {\n    key: \"_onForward\",\n    value: function _onForward(msg) {\n      var _this = this;\n\n      var reporter = _this._reporters[msg.body.to];\n\n      reporter._onForward(msg);\n    } //FLOW-IN: message received from a remote Syncher -> create (this is actually an invitation to subscribe)\n\n  }, {\n    key: \"_onRemoteCreate\",\n    value: function _onRemoteCreate(msg) {\n      var _this = this;\n\n      var resource = msg.from.slice(0, -13); //remove \"/subscription\" from the URL\n\n      var dividedURL = Object(utils[\"k\" /* divideURL */])(resource);\n      var domain = dividedURL.domain;\n      var event = {\n        type: msg.type,\n        from: msg.body.source,\n        url: resource,\n        domain: domain,\n        schema: msg.body.schema,\n        value: msg.body.value,\n        identity: msg.body.identity,\n        ack: function ack(type) {\n          var lType = 200;\n\n          if (type) {\n            lType = type;\n          } //send ack response message\n\n\n          _this._bus.postMessage({\n            id: msg.id,\n            type: 'response',\n            from: msg.to,\n            to: msg.from,\n            body: {\n              code: lType\n            }\n          });\n        }\n      };\n\n      if (_this._onNotificationHandler) {\n        Syncher_log.info('[Syncher] NOTIFICATION-EVENT: ', event);\n\n        _this._onNotificationHandler(event);\n      }\n    } //FLOW-IN: message received from a remote DataObjectReporter -> delete\n\n  }, {\n    key: \"_onRemoteDelete\",\n    value: function _onRemoteDelete(msg) {\n      var _this = this; //remove \"/subscription\" from the URL\n\n\n      var resource = msg.body.resource;\n      var object = _this._observers[resource];\n      var unsubscribe = {\n        from: _this.owner,\n        to: _this._subURL,\n        id: msg.id,\n        type: 'unsubscribe',\n        body: {\n          resource: msg.body.resource\n        }\n      };\n\n      _this._bus.postMessage(unsubscribe);\n\n      delete _this._observers[resource];\n\n      if (object) {\n        var event = {\n          type: msg.type,\n          url: resource,\n          identity: msg.body.identity,\n          ack: function ack(type) {\n            var lType = 200;\n\n            if (type) {\n              lType = type;\n            } //TODO: any other different options for the release process, like accept but nor release local?\n\n\n            if (lType === 200) {\n              object.delete();\n            } //send ack response message\n\n\n            _this._bus.postMessage({\n              id: msg.id,\n              type: 'response',\n              from: msg.to,\n              to: msg.from,\n              body: {\n                code: lType,\n                source: _this._owner\n              }\n            });\n          }\n        };\n\n        if (_this._onNotificationHandler) {\n          Syncher_log.log('NOTIFICATION-EVENT: ', event);\n\n          _this._onNotificationHandler(event);\n        }\n      } else {\n        _this._bus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 404,\n            source: _this._owner\n          }\n        });\n      }\n    } // close event received from runtime registry\n\n  }, {\n    key: \"_onExecute\",\n    value: function _onExecute(msg) {\n      var _this = this;\n\n      var reply = {\n        id: msg.id,\n        type: 'response',\n        from: msg.to,\n        to: msg.from,\n        body: {\n          code: 200\n        }\n      };\n\n      if ((msg.from === _this._runtimeUrl + '/registry/' || msg.from === _this._runtimeUrl + '/registry') && msg.body && msg.body.method && msg.body.method === 'close' && _this._onClose) {\n        var event = {\n          type: 'close',\n          ack: function ack(type) {\n            if (type) {\n              reply.body.code = type;\n            } //send ack response message\n\n\n            _this._bus.postMessage(reply);\n          }\n        };\n        Syncher_log.info('[Syncher] Close-EVENT: ', event);\n\n        _this._onClose(event);\n      } else {\n        _this._bus.postMessage(reply);\n      }\n    }\n    /**\r\n    * Callback system to trigger the resumed reporters\r\n    * @param  {Function} callback - function callback which will be invoked\r\n    * @return {Object<URL, DataObjectReporter>} Return one object with all resumed reporters;\r\n    */\n\n  }, {\n    key: \"onReportersResume\",\n    value: function onReportersResume(callback) {\n      this._onReportersResume = callback;\n    }\n    /**\r\n    * Callback system to trigger the resumed observers\r\n    * @param  {Function} callback - function callback which will be invoked\r\n    * @return {Object<URL, DataObjectObserver>} Return one object with all resumed observers;\r\n    */\n\n  }, {\n    key: \"onObserversResume\",\n    value: function onObserversResume(callback) {\n      this._onObserversResume = callback;\n    }\n  }, {\n    key: \"owner\",\n    get: function get() {\n      return this._owner;\n    }\n    /**\r\n    * All owned reporters, the ones that were created by a create\r\n    * @type {Object<URL, DataObjectReporter>}\r\n    */\n\n  }, {\n    key: \"reporters\",\n    get: function get() {\n      return this._reporters;\n    }\n    /**\r\n    * All owned observers, the ones that were created by a local subscription\r\n    * @type {Object<URL, DataObjectObserver>}\r\n    */\n\n  }, {\n    key: \"observers\",\n    get: function get() {\n      return this._observers;\n    }\n  }]);\n\n  return Syncher;\n}();\n\n/* harmony default export */ var syncher_Syncher = __webpack_exports__[\"a\"] = (Syncher_Syncher);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/utils/utils.js\nvar utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/discovery/RegistrationStatus.js\nvar RegistrationStatus = __webpack_require__(5);\n\n// CONCATENATED MODULE: ./src/discovery/DiscoveredObject.js\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n//import {divideURL, convertToUserURL} from '../utils/utils';\n\n/**\r\n* Discovered Object interface\r\n*/\n\nvar DiscoveredObject =\n/*#__PURE__*/\nfunction (_RegistrationStatus) {\n  _inherits(DiscoveredObject, _RegistrationStatus);\n\n  _createClass(DiscoveredObject, [{\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }]);\n\n  function DiscoveredObject(data, runtimeURL, discoveryURL, msgBus, discovery) {\n    var _this2;\n\n    _classCallCheck(this, DiscoveredObject);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DiscoveredObject).call(this, data.hypertyID || data.url, runtimeURL, discoveryURL, msgBus));\n    _this2._data = data;\n    _this2._discovery = discovery;\n    return _this2;\n  }\n  /**\r\n  * function to check the status of the DiscoveredObject.\r\n  * Depending on existing subscribers it may trigger onLive or onDisconnected events.\r\n  *\r\n  */\n\n\n  _createClass(DiscoveredObject, [{\n    key: \"check\",\n    value: function check() {\n      // query DR for the status and call processNotification with msg received\n      var _this = this;\n\n      var message = {\n        body: {}\n      };\n\n      if (_this._discoveredObjectURL.startsWith('hyperty://')) {\n        _this._discovery.discoverHypertyPerURL(_this._discoveredObjectURL).then(function (registration) {\n          message.body.status = registration.status;\n\n          _this._processNotification(message);\n        });\n      } else {\n        _this._discovery.discoverDataObjectsPerURL(_this._discoveredObjectURL).then(function (registration) {\n          message.body.status = registration.status;\n\n          _this._processNotification(message);\n        });\n      }\n    }\n  }]);\n\n  return DiscoveredObject;\n}(RegistrationStatus[\"a\" /* default */]);\n\n/* harmony default export */ var discovery_DiscoveredObject = (DiscoveredObject);\n// CONCATENATED MODULE: ./src/discovery/Discovery.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction Discovery_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Discovery_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Discovery_createClass(Constructor, protoProps, staticProps) { if (protoProps) Discovery_defineProperties(Constructor.prototype, protoProps); if (staticProps) Discovery_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n// Log System\n\nvar log = loglevel[\"getLogger\"]('Discovery');\n\n\n/**\r\n* Core Discovery interface\r\n* Class to allow applications to search for hyperties and DataObjects using the message bus\r\n*/\n\nvar Discovery_Discovery =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * To initialise the HypertyDiscover, which will provide the support for hyperties to\r\n  * query users registered in outside the internal core.\r\n  * @param  {MessageBus}          msgbus                msgbus\r\n  * @param  {RuntimeURL}          runtimeURL            runtimeURL\r\n  */\n  function Discovery(hypertyURL, runtimeURL, msgBus) {\n    Discovery_classCallCheck(this, Discovery);\n\n    var _this = this;\n\n    _this.messageBus = msgBus;\n    _this.runtimeURL = runtimeURL;\n    _this.domain = Object(utils[\"k\" /* divideURL */])(hypertyURL).domain;\n    _this.discoveryURL = hypertyURL;\n  }\n  /**\r\n  * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n  * @param  {String}           userIdentifier\r\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n  */\n\n\n  Discovery_createClass(Discovery, [{\n    key: \"_isLegacyUser\",\n    value: function _isLegacyUser(userIdentifier) {\n      if (userIdentifier.includes(':') && !userIdentifier.includes('user://')) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerUserProfileData\",\n    value: function discoverHypertiesPerUserProfileData(userIdentifier, schema, resources) {\n      var _this = this;\n\n      var filteredHyperties = [];\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/userprofile/' + userIdentifier\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._isLegacyUser(userIdentifier)) {\n          // todo: to reomve when discovery of legcay users are supported\n          _this.messageBus.postMessage(msg, function (reply) {\n            if (reply.body.code === 200) {\n              reply.body.value.map(function (hyperty) {\n                if (hyperty.hypertyID != _this.discoveryURL) filteredHyperties.push(hyperty);\n              });\n              if (filteredHyperties.length === 0) resolve([]);else {\n                log.log(\"[Discovery.discoverHypertiesPerUserProfileData] Reply log: \", filteredHyperties);\n                resolve(filteredHyperties);\n              }\n            } else {\n              log.warn(\"[Discovery.discoverHypertiesPerUserProfileData] Error Reply for \" + userIdentifier + \" Reason: \", reply.body.description);\n              resolve([]);\n            }\n          });\n        } else {\n          resolve([{\n            hypertyID: userIdentifier,\n            status: 'live'\n          }]);\n        }\n      });\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * returns DiscoveredObject\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerUserProfileDataDO\",\n    value: function discoverHypertiesPerUserProfileDataDO(userIdentifier, schema, resources) {\n      var _this2 = this,\n          _arguments = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this2.discoverHypertiesPerUserProfileData.apply(_this2, _toConsumableArray(_arguments)).then(function (hyperties) {\n          resolve(_this2._convertToDiscoveredObject(hyperties));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for DataObjects registered in domain registry associated with some user identifier (eg email, name ...)\r\n    * @param  {String}           userIdentifier\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerUserProfileData\",\n    value: function discoverDataObjectsPerUserProfileData(userIdentifier, schema, resources) {\n      var _this = this;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/userprofile/' + userIdentifier\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._isLegacyUser(userIdentifier)) {\n          // todo: to reomve when discovery of legcay users are supported\n          _this.messageBus.postMessage(msg, function (reply) {\n            if (reply.body.code === 200) {\n              log.log(\"Reply log: \", reply.body.value);\n              resolve(reply.body.value);\n            } else {\n              log.warn(\"[Discovery.discoverDataObjectsPerUserProfileData] Error Reply for \" + userIdentifier + \" Reason: \", reply.body.description);\n              resolve([]);\n            }\n          });\n        } else {\n          resolve([{\n            hypertyID: userIdentifier,\n            status: 'live'\n          }]);\n        }\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerUserProfileDataDO\",\n    value: function discoverDataObjectsPerUserProfileDataDO(guidURL, schema, resources) {\n      var _this3 = this,\n          _arguments2 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this3.discoverDataObjectsPerUserProfileData.apply(_this3, _toConsumableArray(_arguments2)).then(function (registryObjects) {\n          return resolve(_this3._convertToDiscoveredObject(registryObjects));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerGUID\",\n    value: function discoverHypertiesPerGUID(guidURL, schema, resources) {\n      var _this = this;\n\n      var filteredHyperties = [];\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/guid/' + guidURL\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            reply.body.value.map(function (hyperty) {\n              if (hyperty.hypertyID != _this.discoveryURL) filteredHyperties.push(hyperty);\n            });\n            if (filteredHyperties.length === 0) reject('No Hyperty was found');else {\n              log.log(\"Reply log: \", filteredHyperties);\n              resolve(filteredHyperties);\n            }\n          } else {\n            log.warn(\"[Discovery.discoverHypertiesPerGUID] Error Reply for \" + guidURL + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for Hyperties registered in domain registry associated with some GUID\r\n    * returns DiscoveredObject\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerGUIDDO\",\n    value: function discoverHypertiesPerGUIDDO(guidURL, schema, resources) {\n      var _this4 = this,\n          _arguments3 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this4.discoverHypertiesPerGUID.apply(_this4, _toConsumableArray(_arguments3)).then(function (hyperties) {\n          resolve(_this4._convertToDiscoveredObject(hyperties));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * Advanced Search for DataObjects registered in domain registry associated with some GUID\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerGUID\",\n    value: function discoverDataObjectsPerGUID(guidURL, schema, resources) {\n      var _this = this;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/guid/' + guidURL\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectsPerGUID] Error Reply for \" + guidURL + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}           guidURL                guid URL e.g user-guid://<unique-user-identifier>\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerGUIDDO\",\n    value: function discoverDataObjectsPerGUIDDO(guidURL, schema, resources) {\n      var _this5 = this,\n          _arguments4 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this5.discoverDataObjectsPerGUID.apply(_this5, _toConsumableArray(_arguments4)).then(function (registryObjects) {\n          return resolve(_this5._convertToDiscoveredObject(registryObjects));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /** Advanced Search for Hyperties registered in domain registry\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverHyperties\",\n    value: function discoverHyperties(user, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      var filteredHyperties = [];\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/user/' + user\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this._isLegacyUser(user)) {\n          // todo: to reomve when discovery of legcay users are supported\n          _this.messageBus.postMessage(msg, function (reply) {\n            if (reply.body.code === 200 || reply.body.code === 500) {\n              reply.body.value.map(function (hyperty) {\n                if (hyperty.hypertyID != _this.discoveryURL) filteredHyperties.push(hyperty);\n              });\n              /*            if(filteredHyperties.length === 0)\r\n                            reject('No Hyperty was found');\r\n                          else {*/\n\n              log.log(\"[Discovery.discoverHyperties] Reply : \", filteredHyperties);\n              resolve(filteredHyperties); //            }\n            } else {\n              log.warn(\"[Discovery.discoverHyperties] Error Reply for \" + user + \" Reason: \", reply.body.description);\n              resolve(filteredHyperties);\n            }\n          });\n        } else {\n          resolve([{\n            hypertyID: user,\n            status: 'live'\n          }]);\n        }\n      });\n    }\n    /** Advanced Search for Hyperties registered in domain registry,\r\n    *returns DiscoveredObject\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverHypertiesDO\",\n    value: function discoverHypertiesDO(user, schema, resources, domain) {\n      var _this6 = this,\n          _arguments5 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this6.discoverHyperties.apply(_this6, _toConsumableArray(_arguments5)).then(function (hyperties) {\n          resolve(_this6._convertToDiscoveredObject(hyperties));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /** Advanced Search for DataObjects registered in domain registry\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjects\",\n    value: function discoverDataObjects(user, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/user/' + user\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjects] Error Reply for \" + user + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsDO\",\n    value: function discoverDataObjectsDO(user, schema, resources, domain) {\n      var _this7 = this,\n          _arguments6 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this7.discoverDataObjects.apply(_this7, _toConsumableArray(_arguments6)).then(function (registryObjects) {\n          return resolve(_this7._convertToDiscoveredObject(registryObjects));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about hyperties registered in domain registry, and\r\n    * return the hyperty information, if found.\r\n    * @param  {String}              url  hyperty URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertyPerURL\",\n    value: function discoverHypertyPerURL(url, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/hyperty/url/' + url,\n          criteria: {\n            domain: activeDomain\n          }\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverHypertyPerURL] Error Reply for \" + url + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about hyperties registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              url  hyperty URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertyPerURLDO\",\n    value: function discoverHypertyPerURLDO(url, domain) {\n      var _this8 = this,\n          _arguments7 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this8.discoverHypertyPerURL.apply(_this8, _toConsumableArray(_arguments7)).then(function (hyperty) {\n          return resolve(new discovery_DiscoveredObject(hyperty, _this8.runtimeURL, _this8.discoveryURL, _this8.messageBus, _this8));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * return the dataObject information, if found.\r\n    * @param  {String}              url  dataObject URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectPerURL\",\n    value: function discoverDataObjectPerURL(url, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/url/' + url,\n          criteria: {\n            domain: activeDomain\n          }\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectPerURL] Error Reply for \" + url + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              url  dataObject URL\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectPerURLDO\",\n    value: function discoverDataObjectPerURLDO(url, domain) {\n      var _this9 = this,\n          _arguments8 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this9.discoverDataObjectPerURL.apply(_this9, _toConsumableArray(_arguments8)).then(function (registryObject) {\n          return resolve(new discovery_DiscoveredObject(registryObject, _this9.runtimeURL, _this9.discoveryURL, _this9.messageBus, _this9));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about an dataObjects registered in domain registry with a given name, and\r\n    * return the dataObjects information, if found.\r\n    * @param  {String}              name  dataObject URL\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerName\",\n    value: function discoverDataObjectsPerName(name, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/name/' + name\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectsPerName] Error Reply for \" + name + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              name  dataObject URL\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerNameDO\",\n    value: function discoverDataObjectsPerNameDO(name, schema, resources, domain) {\n      var _this10 = this,\n          _arguments9 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this10.discoverDataObjectsPerName.apply(_this10, _toConsumableArray(_arguments9)).then(function (registryObjects) {\n          return resolve(_this10._convertToDiscoveredObject(registryObjects));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\r\n    * function to request about specific reporter dataObject registered in domain registry, and\r\n    * return the dataObjects from that reporter.\r\n    * @param  {String}           reporter     dataObject reporter\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}           domain       (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerReporter\",\n    value: function discoverDataObjectsPerReporter(reporter, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: _this.runtimeURL + '/discovery/',\n        body: {\n          resource: '/dataObject/reporter/' + reporter\n        }\n      };\n\n      if (schema || resources) {\n        msg.body['criteria'] = {\n          resources: resources,\n          dataSchemes: schema,\n          domain: activeDomain\n        };\n      } else {\n        msg.body['criteria'] = {\n          domain: activeDomain\n        };\n      }\n\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            log.log(\"Reply Value Log: \", reply.body.value);\n            resolve(reply.body.value);\n          } else {\n            log.warn(\"[Discovery.discoverDataObjectsPerName] Error Reply for \" + reporter + \" Reason: \", reply.body.description);\n            resolve([]);\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about dataObject registered in domain registry, and\r\n    * returns discoveredObject.\r\n    * @param  {String}              name  dataObject URL\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObjects schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\r\n    * @param  {String}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverDataObjectsPerReporterDO\",\n    value: function discoverDataObjectsPerReporterDO(reporter, schema, resources, domain) {\n      var _this11 = this,\n          _arguments10 = arguments;\n\n      return new Promise(function (resolve, reject) {\n        _this11.discoverDataObjectsPerReporter.apply(_this11, _toConsumableArray(_arguments10)).then(function (registryObjects) {\n          return resolve(_this11._convertToDiscoveredObject(registryObjects));\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"_convertToDiscoveredObject\",\n    value: function _convertToDiscoveredObject(registryObjects) {\n      var _this12 = this;\n\n      return registryObjects.map(function (registryObject) {\n        return new discovery_DiscoveredObject(registryObject, _this12.runtimeURL, _this12.discoveryURL, _this12.messageBus, _this12);\n      });\n    }\n    /** Advanced Search for dataObjects registered in domain registry\r\n    * @deprecated Deprecated. Use discoverDataObjectsPerName instead\r\n    * @param  {String}           name                  name of the dataObject\r\n    * @param  {Array<string>}    schema (Optional)     types of dataObject schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of dataObject resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverDataObject\",\n    value: function discoverDataObject(name, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain; //let userIdentifier = convertToUserURL(user);\n\n      activeDomain = !domain ? _this.domain : domain;\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: name,\n          criteria: {\n            resources: resources,\n            dataSchemes: schema\n          }\n        }\n      };\n      return new Promise(function (resolve, reject) {\n        _this.messageBus.postMessage(msg, function (reply) {\n          log.log('[Discovery]', reply);\n\n          if (reply.body.code > 299) {\n            log.warn(\"[Discovery.discoverDataObject] Error Reply for \" + name + \" Reason: \", reply.body.description);\n            return resolve([]);\n          }\n\n          var hyperties = reply.body.value;\n\n          if (hyperties) {\n            resolve(hyperties);\n          } else {\n            resolve([]);\n          }\n        });\n      });\n    }\n    /** Advanced Search for Hyperties registered in domain registry\r\n    * @deprecated Deprecated. Use discoverHyperties instead\r\n    * @param  {String}           user                  user identifier, either in url or email format\r\n    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\r\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\r\n    * @param  {String}           domain (Optional)     domain of the registry to search\r\n    */\n\n  }, {\n    key: \"discoverHyperty\",\n    value: function discoverHyperty(user, schema, resources, domain) {\n      var _this = this;\n\n      var activeDomain;\n      var userIdentifier = Object(utils[\"f\" /* convertToUserURL */])(user);\n\n      if (!domain) {\n        activeDomain = _this.domain;\n      } else {\n        activeDomain = domain;\n      }\n\n      return new Promise(function (resolve, reject) {\n        log.log('[Discovery.discoverHyperty] ACTIVE DOMAIN -> ', activeDomain, 'user->', user, 'schema->', schema, 'resources->', resources, 'domain->', domain);\n\n        if (user.includes(':') && !user.includes('user://')) {\n          log.log('[Discovery.discoverHyperty] ' + user + ' is legacy domain');\n          var legacyUser = {\n            userID: user,\n            hypertyID: user,\n            schema: schema,\n            resources: resources\n          };\n          return resolve(legacyUser);\n        }\n\n        var msg = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: 'domain://registry.' + activeDomain,\n          body: {\n            resource: userIdentifier,\n            criteria: {\n              resources: resources,\n              dataSchemes: schema\n            }\n          }\n        };\n        log.info('[Discovery] msg to send->', msg);\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          log.info('[Discovery] ON discoverHyperty->', reply);\n          var hyperties = reply.body.value;\n\n          if (hyperties) {\n            resolve(hyperties);\n          } else {\n            reject('No Hyperty was found');\n          }\n        });\n      });\n    }\n    /**\r\n    * function to request about users registered in domain registry, and\r\n    * return the last hyperty instance registered by the user.\r\n    * @deprecated Deprecated. Use discoverHyperty instead\r\n    * @param  {email}              email\r\n    * @param  {domain}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertyPerUser\",\n    value: function discoverHypertyPerUser(email, domain) {\n      var _this = this;\n\n      var activeDomain;\n      return new Promise(function (resolve, reject) {\n        // Hack for legacy users\n        if (email.includes(':') && !email.includes('user://')) {\n          log.log('[Discovery.discoverHyperty] ' + email + 'is legacy domain');\n          var legacyUser = {\n            id: email,\n            hypertyURL: email,\n            descriptor: 'unknown'\n          };\n          return resolve(legacyUser);\n        }\n\n        if (!domain) {\n          activeDomain = _this.domain;\n        } else {\n          activeDomain = domain;\n        }\n\n        var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@')); // message to query domain registry, asking for a user hyperty.\n\n        var message = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: 'domain://registry.' + activeDomain,\n          body: {\n            resource: identityURL\n          }\n        };\n        log.info('[Discovery] Message: ', message, activeDomain, identityURL); //log.info('[Discovery] message READ', message);\n\n        _this.messageBus.postMessage(message, function (reply) {\n          log.info('[Discovery] message reply', reply);\n          var hyperty;\n          var mostRecent;\n          var lastHyperty;\n          var value = reply.body.value;\n\n          for (hyperty in value) {\n            if (value[hyperty].lastModified !== undefined) {\n              if (mostRecent === undefined) {\n                mostRecent = new Date(value[hyperty].lastModified);\n                lastHyperty = hyperty;\n              } else {\n                var hypertyDate = new Date(value[hyperty].lastModified);\n\n                if (mostRecent.getTime() < hypertyDate.getTime()) {\n                  mostRecent = hypertyDate;\n                  lastHyperty = hyperty;\n                }\n              }\n            }\n          }\n\n          log.info('[Discovery] Last Hyperty: ', lastHyperty, mostRecent);\n          var hypertyURL = lastHyperty;\n\n          if (hypertyURL === undefined) {\n            return reject('User Hyperty not found');\n          }\n\n          var idPackage = {\n            id: email,\n            descriptor: value[hypertyURL].descriptor,\n            hypertyURL: hypertyURL\n          };\n          log.info('[Discovery] ===> hypertyDiscovery messageBundle: ', idPackage);\n          resolve(idPackage);\n        });\n      });\n    }\n    /**\r\n    * function to request about users registered in domain registry, and\r\n    * return the all the hyperties registered by the user\r\n    * @deprecated Deprecated. Use discoverHyperty instead\r\n    * @param  {email}              email\r\n    * @param  {domain}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"discoverHypertiesPerUser\",\n    value: function discoverHypertiesPerUser(email, domain) {\n      var _this = this;\n\n      var activeDomain;\n      log.log('on Function->', email);\n      return new Promise(function (resolve, reject) {\n        if (email.includes(':') && !email.includes('user://')) {\n          log.log('[Discovery.discoverHyperty] is legacy domain');\n          var legacyUser = {\n            userID: email,\n            hypertyID: email,\n            schema: schema,\n            resources: resources\n          };\n          return resolve(legacyUser);\n        }\n\n        if (!domain) {\n          activeDomain = _this.domain;\n        } else {\n          activeDomain = domain;\n        }\n\n        var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@')); // message to query domain registry, asking for a user hyperty.\n\n        var message = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: 'domain://registry.' + activeDomain,\n          body: {\n            resource: identityURL\n          }\n        };\n        log.log('[Discovery] Message discoverHypertiesPerUser: ', message, activeDomain, identityURL); //log.info('[Discovery] message READ', message);\n\n        _this.messageBus.postMessage(message, function (reply) {\n          log.info('[Discovery] discoverHypertiesPerUser reply', reply);\n          var value = reply.body.value;\n\n          if (!value) {\n            return reject('User Hyperty not found');\n          }\n\n          resolve(value);\n        });\n      });\n    }\n    /**\r\n    * function to request about users registered in domain registry, and\r\n    * return the all the hyperties registered by the user\r\n    * @deprecated Deprecated. Use discoverHyperty instead\r\n    * @param  {email}              email\r\n    * @param  {domain}            domain (Optional)\r\n    */\n\n  }, {\n    key: \"resumeDiscoveries\",\n    value: function resumeDiscoveries() {\n      var _this = this;\n\n      log.log('[Discovery] resumeDiscoveries');\n      return new Promise(function (resolve, reject) {\n        var msg = {\n          type: 'read',\n          from: _this.discoveryURL,\n          to: _this.runtimeURL + '/subscriptions',\n          body: {\n            resource: _this.discoveryURL\n          }\n        };\n\n        _this.messageBus.postMessage(msg, function (reply) {\n          log.log('[Discovery.resumeDiscoveries] reply: ', reply);\n          var notifications = [];\n\n          if (reply.body.code === 200) {\n            var urls = reply.body.value; // URLs to add listeners to\n            //lets create one DiscoveryObject per notification\n\n            urls.forEach(function (url) {\n              var objectUrl = url.split('/registration')[0];\n              var data = {};\n              data.url = objectUrl;\n              log.log('[Discovery.resumeDiscoveries] adding listener to: ', objectUrl);\n\n              if (objectUrl.includes('hyperty://')) {\n                notifications.push(_this.discoverHypertyPerURLDO(objectUrl));\n              } else {\n                notifications.push(_this.discoverDataObjectPerURLDO(objectUrl));\n              }\n            });\n            Promise.all(notifications).then(function (values) {\n              resolve(values);\n            });\n          } else {\n            resolve([]);\n          }\n        });\n      });\n    }\n  }]);\n\n  return Discovery;\n}();\n\n/* harmony default export */ var discovery_Discovery = __webpack_exports__[\"a\"] = (Discovery_Discovery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n")},,,,,function(module,exports){eval('//     proxy-observe v0.0.18\r\n//     Copyright (c) 2015, 2016 Simon Y. Blackwell, AnyWhichWay\r\n//     MIT License - http://opensource.org/licenses/mit-license.php\r\n(function() {\r\n\t"use strict";\r\n\t// Creates and returns a Proxy wrapping a target so that all changes can be trapped and forwarded to\r\n\t// a callback. The callback takes an array of changes just like the traditional original Chrome Object.observe\r\n\t// {object:<object changed>,name:<field changed>,type:add|update|delete|reconfigure|preventExtensions|setPrototype,oldValue:<old value if update | delete>}\r\n\t// The acceptlist can be add|update|delete|reconfigure|preventExtensions|setPrototype.\r\n\t// v 0.0.10 to support pausing and restarting observation two additional constructor arguments are available to Object.observe:\r\n\t// pausable - create the Observer so it can be paused\r\n\t// pause - create observer in paused state\r\n\t// if pausable is true then an additional method deliver(ignorePrevious) is available to start delivery\r\n\t// to pause delivery set a property called pause on the function deliver to true\r\n\t// pausable is optional to reduce the chance of shadowing a property or method on any existing code called deliver\r\n\tif(!Object.observe && typeof(Proxy)==="function") {\r\n\t\tfunction Observer(target,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tvar me = this, proxy;\r\n\t    \tfunction deliver(ignorePrevious,delay) {\r\n\t    \t\tdeliver.delay = delay;\r\n\t    \t\tif(!deliver.pause) {\r\n\t        \t\tif(me.changeset.length>0) {\r\n\t        \t\t\tif(!ignorePrevious) {\r\n\t\t    \t    \t\tvar changes = me.changeset.filter(function(change) { return !acceptlist || acceptlist.indexOf(change.type)>=0; });\r\n\t\t        \t\t\tif(changes.length>0) {\r\n\t\t        \t\t\t\tcallback(changes);\r\n\t\t        \t\t\t}\r\n\t        \t\t\t}\r\n\t        \t\t\tme.changeset = [];\r\n\t        \t\t}\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \tdeliver.pause = pause;\r\n\t    \tdeliver.delay = delay;\r\n\t\t    me.get = function(target, property) {\r\n\t\t    \tif(property==="__observer__") {\r\n\t\t    \t\treturn me;\r\n\t\t    \t}\r\n\t\t    \tif(property==="unobserve") {\r\n\t\t    \t\treturn function() {\r\n\t\t    \t\t\tObject.unobserve(target);\r\n\t\t    \t\t\treturn target;\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t\t    \tif(property==="deliver") {\r\n\t\t    \t\treturn deliver;\r\n\t\t    \t}\r\n\t\t    \treturn target[property];\r\n\t\t    }\r\n\t    \tme.target = target;\r\n\t    \tme.changeset = [];\r\n\t    \tif(!me.target.__observerCallbacks__) {\r\n\t    \t\t// __observerCallbacks__ is used as an index to get at the proxy which is the observer, so we can unobserve\r\n\t    \t\tObject.defineProperty(target,"__observerCallbacks__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t\tObject.defineProperty(target,"__observers__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t}\r\n\t    \tme.target.__observerCallbacks__.push(callback);\r\n\t    \tme.target.__observers__.push(this);\r\n\t    \tproxy = new Proxy(target,me);\r\n\t    \tdeliver(false,delay);\r\n\t    \treturn proxy;\r\n\t    }\r\n\t\tObserver.prototype.deliver = function() {\r\n\t\t\treturn this.get(null,"deliver");\r\n\t\t}\r\n\t    Observer.prototype.set = function(target, property, value) { // , receiver\r\n\t    \tvar oldvalue = target[property];\r\n\t    \tvar type = (oldvalue===undefined ? "add" : "update");\r\n\t    \ttarget[property] = value;\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && (!this.acceptlist || this.acceptlist.indexOf(type)>=0)) {\r\n\t        \tvar change = {object:target,name:property,type:type},\r\n\t        \t\tstart = this.changeset.length === 0,\r\n\t        \t\tdeliver = this.deliver();\r\n\t        \tif(type==="update") {\r\n\t        \t\tchange.oldValue = oldvalue;\r\n\t        \t}\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.deleteProperty = function(target, property) {\r\n\t    \tvar oldvalue = target[property];\r\n\t    \t//if(typeof(oldvalue)!=="undefined") {\r\n\t\t    \tdelete target[property];\r\n\t\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("delete")>=0) {\r\n\t\t        \tvar change = {object:target,name:property,type:"delete",oldValue:oldvalue},\r\n\t\t        \t\tstart = this.changeset.length === 0,\r\n\t\t        \t\tdeliver = this.deliver();\r\n\t\t        \tthis.changeset.push(change);\r\n\t\t        \tif(start) {\r\n\t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t\t        \t}\r\n\t\t    \t}\r\n\t    \t//}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.defineProperty = function(target, property, descriptor) {\r\n\t    \tObject.defineProperty(target, property, descriptor);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("reconfigure")>=0) {\r\n\t        \tvar change = {object:target,name:property,type:"reconfigure"},\r\n        \t\t\tstart = this.changeset.length === 0,\r\n        \t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.setPrototypeOf = function(target, prototype) {\r\n\t    \tvar oldvalue = Object.getPrototypeOf(target);\r\n\t    \tObject.setPrototypeOf(target, prototype);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("setPrototype")>=0) {\r\n\t        \tvar change = {object:target,name:"__proto__",type:"setPrototype",oldValue:oldvalue},\r\n    \t\t\t\tstart = this.changeset.length === 0,\r\n    \t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.preventExtensions = function(target) {\r\n\t        Object.preventExtensions(target);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("preventExtensions")>=0) {\r\n\t        \tvar change = {object:target,type:"preventExtensions"},\r\n\t\t\t\t\tstart = this.changeset.length === 0,\r\n\t\t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Object.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \treturn new Observer(object,callback,acceptlist,pausable,pause,delay);\r\n\t    };\r\n\t    Object.unobserve = function(object,callback) {\r\n\t    \tif(object.__observerCallbacks__) {\r\n\t    \t\tif(!callback) {\r\n\t    \t\t\tobject.__observerCallbacks__.splice(0,object.__observerCallbacks__.length);\r\n\t    \t\t\tobject.__observers__.splice(0,object.__observers__.length);\r\n\t    \t\t\treturn;\r\n\t    \t\t}\r\n\t    \t\tobject.__observerCallbacks__.forEach(function(observercallback,i) {\r\n\t    \t\t\tif(callback===observercallback) {\r\n\t    \t\t\t\tobject.__observerCallbacks__.splice(i,1);\r\n\t    \t\t\t\tdelete object.__observers__[i].callback;\r\n\t    \t\t\t\tobject.__observers__.splice(i,1);\r\n\t    \t\t\t}\r\n\t    \t\t});\r\n\t    \t}\r\n\t    };\r\n\t    Array.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tif(!(object instanceof Array) && !Array.isArray(object)) {\r\n\t    \t\tthrow new TypeError("First argument to Array.observer is not an Array");\r\n\t    \t}\r\n            \tacceptlist = acceptlist || ["add", "update", "delete", "splice"];\r\n\t    \tvar arrayproxy = new Proxy(object,{get: function(target,property) {\r\n\t    \t\tif(property==="unobserve") {\r\n\t\t    \t\treturn function(callback) {\r\n\t\t    \t\t\tif(callback) {\r\n\t\t    \t\t\t\treturn Object.unobserve(target,callback);\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\treturn target.unobserve();\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t    \t\tif(property==="splice") {\r\n\t    \t\t\treturn function(start,end) {\r\n\t    \t\t\t\tif(typeof(start)!=="number" || typeof(end)!=="number") {\r\n\t    \t\t\t\t\tthrow new TypeError("First two arguments to Array splice are not number, number");\r\n\t    \t\t\t\t}\r\n\t    \t    \t\tvar removed = this.slice(start,start+end),\r\n\t    \t    \t\t\taddedCount = (arguments.length > 1 ? arguments.length-2 : 0),\r\n\t    \t    \t\t\tchange =  {object:object,type:"splice",index:start,removed:removed,addedCount:addedCount};\r\n\t    \t    \t\ttarget.splice.apply(target,arguments);\r\n\t    \t    \t\tif(acceptlist.indexOf("splice")>=0) {\r\n\t    \t    \t\t\tvar start = proxy.__observer__.changeset.length === 0,\r\n\t    \t        \t\t\tdeliver = proxy.__observer__.deliver();\r\n\t    \t    \t\t\tproxy.__observer__.changeset.push(change);\r\n\t    \t    \t\t\tif(start) {\r\n\t    \t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t    \t\t        \t}\r\n\t    \t    \t\t}\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="push") {\r\n\t    \t\t\t return function(item) {\r\n\t    \t\t    \treturn this.splice(this.length,0,item);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="pop") {\r\n\t    \t\t\t return function() {\r\n\t    \t\t    \treturn this.splice(this.length-1,1);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="unshift") {\r\n\t    \t\t\t return function(item) {\r\n    \t\t    \t\treturn this.splice(0,0,item);\r\n    \t\t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="shift") {\r\n\t    \t\t\treturn function() {\r\n\t    \t    \t\treturn this.splice(0,1);\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\treturn target[property];\r\n\t    \t}});\r\n\t    \tvar proxy = Object.observe(arrayproxy,function(changeset) { \r\n\t    \t\tvar changes = changeset.filter(function(change) { return change.name!=="length" && change.name!=="add" && (!acceptlist || acceptlist.indexOf(change.type)>=0); });\r\n\t    \t\tif(changes.length>0) {\r\n\t    \t\t\tcallback(changes);\r\n\t    \t\t}\r\n\t    \t},acceptlist,pausable,pause,delay);\r\n\t    \treturn proxy;\r\n\t    };\r\n\t    Array.unobserve = function(object,callback) {\r\n\t\t  return object.unobserve(callback);\r\n\t    }\r\n\t}\r\n\tObject.deepObserve = function(object,callback,parts) {\r\n\r\n\t\tparts = (parts ? parts : []);\r\n\r\n\t\tvar toTypeName = function(obj) {\r\n\t\t\treturn ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()\r\n\t\t}\r\n\r\n\t\tfunction reobserve(value, parts) {\r\n\t\t\tvar keys = Object.keys(value);\r\n\t\t\tkeys.forEach(function(key) {\r\n\t\t\t\tif((toTypeName(value[key]) === \'object\' || toTypeName(value[key]) === \'array\') && !value[key].hasOwnProperty(\'__observers__\')) {\r\n\t\t\t\t\tvar newparts = parts.slice(0);\r\n\t\t\t\t\tnewparts.push(key);\r\n\t\t\t\t\tvalue[key] = Object.deepObserve(value[key],callback,newparts);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treobserve(object, parts);\r\n\r\n\t\tvar observed = Object.observe(object,function(changeset) {\r\n\t\t\tvar changes = [];\r\n\t\t\tfunction recurse(name,rootObject,oldObject,newObject,path) {\r\n\t\t\t\tif(newObject instanceof Object) {\r\n\t\t\t\t\tvar newkeys = Object.keys(newObject);\r\n\t\t\t\t\tnewkeys.forEach(function(key) {\r\n\t\t\t\t\t\tif(!oldObject || (oldObject[key]!==newObject[key])) {\r\n\t\t\t\t\t\t\tvar oldvalue = (oldObject && oldObject[key]!==undefined ? oldObject[key] : undefined),\r\n\t\t\t\t\t\t\t\tchange = (oldvalue===undefined ? "add" : "update"),\r\n\t\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\r\n\t\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldvalue,newValue:newObject[key],keypath:keypath});\r\n\t\t\t\t\t\t\trecurse(name,rootObject,oldvalue,newObject[key],keypath);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if(oldObject instanceof Object) {\r\n\t\t\t\t\tvar oldkeys = Object.keys(oldObject);\r\n\t\t\t\t\toldkeys.forEach(function(key) {\r\n\t\t\t\t\t\tvar change = (newObject===null ? "update" : "delete"),\r\n\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldObject[key],newValue:newObject,keypath:keypath});\r\n\t\t\t\t\t\trecurse(name,rootObject,oldObject[key],undefined,keypath);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tchangeset.forEach(function(change) {\r\n\t\t\t\tvar keypath = (parts.length>0 ? parts.join(".") + "." : "") + change.name;\r\n\r\n\t\t\t\tif (change.type === "update" || change.type === "add") { \r\n\t\t\t\t\treobserve(change.object, parts);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchanges.push({name:change.name,object:change.object,type:change.type,oldValue:change.oldValue,newValue:change.object[change.name],keypath:keypath});\r\n\t\t\t\trecurse(change.name,change.object,change.oldValue,change.object[change.name],keypath);\r\n\t\t\t});\r\n\t\t\tcallback(changes);\r\n\t\t});\r\n\t\treturn observed;\r\n\t};\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n')},,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sandbox_Sandbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sandbox", function() { return _sandbox_Sandbox__WEBPACK_IMPORTED_MODULE_0__["b"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SandboxType", function() { return _sandbox_Sandbox__WEBPACK_IMPORTED_MODULE_0__["a"]; });\n\n/* harmony import */ var _sandbox_SandboxRegistry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SandboxRegistry", function() { return _sandbox_SandboxRegistry__WEBPACK_IMPORTED_MODULE_1__["a"]; });\n\n/* harmony import */ var _sandbox_SandboxFactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SandboxFactory", function() { return _sandbox_SandboxFactory__WEBPACK_IMPORTED_MODULE_2__["a"]; });\n\n/* harmony import */ var _syncher_Syncher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(13);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Syncher", function() { return _syncher_Syncher__WEBPACK_IMPORTED_MODULE_3__["a"]; });\n\n/* harmony import */ var _discovery_Discovery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Discovery", function() { return _discovery_Discovery__WEBPACK_IMPORTED_MODULE_4__["a"]; });\n\n/* harmony import */ var _identity_IdentityManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IdentityManager", function() { return _identity_IdentityManager__WEBPACK_IMPORTED_MODULE_5__["a"]; });\n\n/* harmony import */ var _contextManager_ContextObserver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(10);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContextObserver", function() { return _contextManager_ContextObserver__WEBPACK_IMPORTED_MODULE_6__["a"]; });\n\n/* harmony import */ var _contextManager_ContextReporter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContextReporter", function() { return _contextManager_ContextReporter__WEBPACK_IMPORTED_MODULE_7__["a"]; });\n\n/**\r\n* Copyright 2016 PT Inovação e Sistemas SA\r\n* Copyright 2016 INESC-ID\r\n* Copyright 2016 QUOBIS NETWORKS SL\r\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\r\n* Copyright 2016 ORANGE SA\r\n* Copyright 2016 Deutsche Telekom AG\r\n* Copyright 2016 Apizee\r\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the "License");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an "AS IS" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n**/\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvc2FuZGJveC1wYWNrLmpzPzIyNWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5pbXBvcnQgU2FuZGJveCBmcm9tICcuL3NhbmRib3gvU2FuZGJveCc7XHJcbmltcG9ydCB7U2FuZGJveFR5cGV9IGZyb20gJy4vc2FuZGJveC9TYW5kYm94JztcclxuaW1wb3J0IFNhbmRib3hSZWdpc3RyeSBmcm9tICcuL3NhbmRib3gvU2FuZGJveFJlZ2lzdHJ5JztcclxuaW1wb3J0IFNhbmRib3hGYWN0b3J5IGZyb20gJy4vc2FuZGJveC9TYW5kYm94RmFjdG9yeSc7XHJcbmltcG9ydCBTeW5jaGVyIGZyb20gJy4vc3luY2hlci9TeW5jaGVyJztcclxuaW1wb3J0IERpc2NvdmVyeSBmcm9tICcuL2Rpc2NvdmVyeS9EaXNjb3ZlcnknO1xyXG5pbXBvcnQgSWRlbnRpdHlNYW5hZ2VyIGZyb20gJy4vaWRlbnRpdHkvSWRlbnRpdHlNYW5hZ2VyJztcclxuaW1wb3J0IENvbnRleHRPYnNlcnZlciBmcm9tICcuL2NvbnRleHRNYW5hZ2VyL0NvbnRleHRPYnNlcnZlcic7XHJcbmltcG9ydCBDb250ZXh0UmVwb3J0ZXIgZnJvbSAnLi9jb250ZXh0TWFuYWdlci9Db250ZXh0UmVwb3J0ZXInO1xyXG5cclxuZXhwb3J0IHtTYW5kYm94LCBTYW5kYm94VHlwZSwgU2FuZGJveFJlZ2lzdHJ5LCBTYW5kYm94RmFjdG9yeSwgU3luY2hlciwgRGlzY292ZXJ5LCBJZGVudGl0eU1hbmFnZXIsIENvbnRleHRPYnNlcnZlciwgQ29udGV4dFJlcG9ydGVyfTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n')}])});